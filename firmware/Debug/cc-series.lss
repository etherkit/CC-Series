
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00003a4a  00003afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a4a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800136  00800136  00003b34  2**0
                  ALLOC
  3 .eeprom       0000002a  00810000  00810000  00003b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005610  00000000  00000000  00003b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000022f0  00000000  00000000  00009170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	ea e4       	ldi	r30, 0x4A	; 74
     1b8:	fa e3       	ldi	r31, 0x3A	; 58
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a6 33       	cpi	r26, 0x36	; 54
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	a6 e3       	ldi	r26, 0x36	; 54
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	aa 3e       	cpi	r26, 0xEA	; 234
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 9f 0a 	call	0x153e	; 0x153e <main>
     1da:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_11>:

// Timer1 ISR
//
// Timer1 is the sinewave generator.
ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_11+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 36 01 	lds	r24, 0x0136
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_11+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_11+0xae>
	{
		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 9a 01 	lds	r18, 0x019A
     21c:	30 91 9b 01 	lds	r19, 0x019B
     220:	40 91 9c 01 	lds	r20, 0x019C
     224:	50 91 9d 01 	lds	r21, 0x019D
     228:	80 91 ac 01 	lds	r24, 0x01AC
     22c:	90 91 ad 01 	lds	r25, 0x01AD
     230:	a0 91 ae 01 	lds	r26, 0x01AE
     234:	b0 91 af 01 	lds	r27, 0x01AF
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 9a 01 	sts	0x019A, r24
     244:	90 93 9b 01 	sts	0x019B, r25
     248:	a0 93 9c 01 	sts	0x019C, r26
     24c:	b0 93 9d 01 	sts	0x019D, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 9a 01 	lds	r24, 0x019A
     254:	90 91 9b 01 	lds	r25, 0x019B
     258:	a0 91 9c 01 	lds	r26, 0x019C
     25c:	b0 91 9d 01 	lds	r27, 0x019D
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 68 01 	sts	0x0168, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 68 01 	lds	r18, 0x0168
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
	}
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(/*((timer > mute_start) && (timer < mute_end)) || */(mute_on == TRUE))
     2e4:	80 91 37 01 	lds	r24, 0x0137
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	51 f4       	brne	.+20     	; 0x300 <__vector_7+0x46>
		MUTE_PORT |= _BV(MUTE);
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	28 e2       	ldi	r18, 0x28	; 40
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	20 62       	ori	r18, 0x20	; 32
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_7+0x58>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     300:	88 e2       	ldi	r24, 0x28	; 40
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	28 e2       	ldi	r18, 0x28	; 40
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7d       	andi	r18, 0xDF	; 223
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     312:	80 91 38 01 	lds	r24, 0x0138
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	d9 f5       	brne	.+118    	; 0x390 <__vector_7+0xd6>
     31a:	20 91 6a 01 	lds	r18, 0x016A
     31e:	30 91 6b 01 	lds	r19, 0x016B
     322:	40 91 6c 01 	lds	r20, 0x016C
     326:	50 91 6d 01 	lds	r21, 0x016D
     32a:	80 91 df 01 	lds	r24, 0x01DF
     32e:	90 91 e0 01 	lds	r25, 0x01E0
     332:	a0 91 e1 01 	lds	r26, 0x01E1
     336:	b0 91 e2 01 	lds	r27, 0x01E2
     33a:	28 17       	cp	r18, r24
     33c:	39 07       	cpc	r19, r25
     33e:	4a 07       	cpc	r20, r26
     340:	5b 07       	cpc	r21, r27
     342:	30 f5       	brcc	.+76     	; 0x390 <__vector_7+0xd6>
     344:	20 91 6a 01 	lds	r18, 0x016A
     348:	30 91 6b 01 	lds	r19, 0x016B
     34c:	40 91 6c 01 	lds	r20, 0x016C
     350:	50 91 6d 01 	lds	r21, 0x016D
     354:	80 91 a4 01 	lds	r24, 0x01A4
     358:	90 91 a5 01 	lds	r25, 0x01A5
     35c:	a0 91 a6 01 	lds	r26, 0x01A6
     360:	b0 91 a7 01 	lds	r27, 0x01A7
     364:	82 17       	cp	r24, r18
     366:	93 07       	cpc	r25, r19
     368:	a4 07       	cpc	r26, r20
     36a:	b5 07       	cpc	r27, r21
     36c:	88 f4       	brcc	.+34     	; 0x390 <__vector_7+0xd6>
	{
		if(rit_enable == TRUE)
     36e:	80 91 e4 01 	lds	r24, 0x01E4
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	19 f4       	brne	.+6      	; 0x37c <__vector_7+0xc2>
			set_dds_freq_reg(REG_1);
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     37c:	88 e2       	ldi	r24, 0x28	; 40
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	28 e2       	ldi	r18, 0x28	; 40
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	20 61       	ori	r18, 0x10	; 16
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
     38e:	0c c0       	rjmp	.+24     	; 0x3a8 <__vector_7+0xee>
	}
	else
	{
		set_dds_freq_reg(REG_0);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     396:	88 e2       	ldi	r24, 0x28	; 40
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	28 e2       	ldi	r18, 0x28	; 40
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	2f 7e       	andi	r18, 0xEF	; 239
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
	}

	debounce(FALSE);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>

	// Need to consider timer overflow?
	timer++;
     3ae:	80 91 6a 01 	lds	r24, 0x016A
     3b2:	90 91 6b 01 	lds	r25, 0x016B
     3b6:	a0 91 6c 01 	lds	r26, 0x016C
     3ba:	b0 91 6d 01 	lds	r27, 0x016D
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	a1 1d       	adc	r26, r1
     3c2:	b1 1d       	adc	r27, r1
     3c4:	80 93 6a 01 	sts	0x016A, r24
     3c8:	90 93 6b 01 	sts	0x016B, r25
     3cc:	a0 93 6c 01 	sts	0x016C, r26
     3d0:	b0 93 6d 01 	sts	0x016D, r27
}
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     418:	88 e6       	ldi	r24, 0x68	; 104
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	10 82       	st	Z, r1

	cur_mode = default_mode;
     420:	80 91 69 01 	lds	r24, 0x0169
     424:	80 93 9e 01 	sts	0x019E, r24
	cur_state = IDLE;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 c0 01 	sts	0x01C0, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 50;
     42e:	80 91 64 01 	lds	r24, 0x0164
     432:	90 91 65 01 	lds	r25, 0x0165
     436:	a0 91 66 01 	lds	r26, 0x0166
     43a:	b0 91 67 01 	lds	r27, 0x0167
     43e:	c2 96       	adiw	r24, 0x32	; 50
     440:	a1 1d       	adc	r26, r1
     442:	b1 1d       	adc	r27, r1
     444:	80 93 ca 01 	sts	0x01CA, r24
     448:	90 93 cb 01 	sts	0x01CB, r25
     44c:	a0 93 cc 01 	sts	0x01CC, r26
     450:	b0 93 cd 01 	sts	0x01CD, r27
	sleep_timer = cur_timer + SLEEP_DELAY;
     454:	80 91 64 01 	lds	r24, 0x0164
     458:	90 91 65 01 	lds	r25, 0x0165
     45c:	a0 91 66 01 	lds	r26, 0x0166
     460:	b0 91 67 01 	lds	r27, 0x0167
     464:	88 57       	subi	r24, 0x78	; 120
     466:	9c 4e       	sbci	r25, 0xEC	; 236
     468:	af 4f       	sbci	r26, 0xFF	; 255
     46a:	bf 4f       	sbci	r27, 0xFF	; 255
     46c:	80 93 c5 01 	sts	0x01C5, r24
     470:	90 93 c6 01 	sts	0x01C6, r25
     474:	a0 93 c7 01 	sts	0x01C7, r26
     478:	b0 93 c8 01 	sts	0x01C8, r27
	//mute_on = TRUE;
}
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <init>:

void init(void)
{
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	0f 92       	push	r0
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     4a0:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     4a2:	81 e6       	ldi	r24, 0x61	; 97
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	20 e8       	ldi	r18, 0x80	; 128
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	CLKPR = 0;
     4ac:	81 e6       	ldi	r24, 0x61	; 97
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     4b4:	84 e4       	ldi	r24, 0x44	; 68
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	21 e8       	ldi	r18, 0x81	; 129
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     4be:	85 e4       	ldi	r24, 0x45	; 69
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
	//TCCR0B = _BV(CS01);
	//TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt

	// Setup Timer1 as sample rate generator for sidetone
	TCCR1B = _BV(WGM12) | _BV(CS10); // Set for CTC mode, Prescaler /1
     4c8:	81 e8       	ldi	r24, 0x81	; 129
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	29 e0       	ldi	r18, 0x09	; 9
     4ce:	fc 01       	movw	r30, r24
     4d0:	20 83       	st	Z, r18
	TCCR1A = 0;
     4d2:	80 e8       	ldi	r24, 0x80	; 128
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	fc 01       	movw	r30, r24
     4d8:	10 82       	st	Z, r1
	OCR1A = 1000; // 16 MHz clock / 16 kHz sample rate = 1000
     4da:	88 e8       	ldi	r24, 0x88	; 136
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	28 ee       	ldi	r18, 0xE8	; 232
     4e0:	33 e0       	ldi	r19, 0x03	; 3
     4e2:	fc 01       	movw	r30, r24
     4e4:	31 83       	std	Z+1, r19	; 0x01
     4e6:	20 83       	st	Z, r18
	TIMSK1 = _BV(OCIE1A);
     4e8:	8f e6       	ldi	r24, 0x6F	; 111
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	22 e0       	ldi	r18, 0x02	; 2
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     4f2:	80 eb       	ldi	r24, 0xB0	; 176
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	22 e0       	ldi	r18, 0x02	; 2
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     4fc:	81 eb       	ldi	r24, 0xB1	; 177
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	24 e0       	ldi	r18, 0x04	; 4
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     506:	80 e7       	ldi	r24, 0x70	; 112
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	20 e7       	ldi	r18, 0x70	; 112
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	f9 01       	movw	r30, r18
     510:	20 81       	ld	r18, Z
     512:	22 60       	ori	r18, 0x02	; 2
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     518:	83 eb       	ldi	r24, 0xB3	; 179
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	29 ef       	ldi	r18, 0xF9	; 249
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     522:	8a e7       	ldi	r24, 0x7A	; 122
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	2a e7       	ldi	r18, 0x7A	; 122
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f9 01       	movw	r30, r18
     52c:	20 81       	ld	r18, Z
     52e:	24 68       	ori	r18, 0x84	; 132
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     534:	8c e7       	ldi	r24, 0x7C	; 124
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	20 e6       	ldi	r18, 0x60	; 96
     53a:	fc 01       	movw	r30, r24
     53c:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     53e:	8b e6       	ldi	r24, 0x6B	; 107
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) | _BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     548:	8d e6       	ldi	r24, 0x6D	; 109
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	2f e9       	ldi	r18, 0x9F	; 159
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     552:	8a e2       	ldi	r24, 0x2A	; 42
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	2a e2       	ldi	r18, 0x2A	; 42
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	f9 01       	movw	r30, r18
     55c:	20 81       	ld	r18, Z
     55e:	20 64       	ori	r18, 0x40	; 64
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     564:	87 e2       	ldi	r24, 0x27	; 39
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	27 e2       	ldi	r18, 0x27	; 39
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	f9 01       	movw	r30, r18
     56e:	20 81       	ld	r18, Z
     570:	20 62       	ori	r18, 0x20	; 32
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     576:	87 e2       	ldi	r24, 0x27	; 39
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	27 e2       	ldi	r18, 0x27	; 39
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	f9 01       	movw	r30, r18
     580:	20 81       	ld	r18, Z
     582:	20 61       	ori	r18, 0x10	; 16
     584:	fc 01       	movw	r30, r24
     586:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     588:	87 e2       	ldi	r24, 0x27	; 39
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	27 e2       	ldi	r18, 0x27	; 39
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	f9 01       	movw	r30, r18
     592:	20 81       	ld	r18, Z
     594:	2d 7f       	andi	r18, 0xFD	; 253
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     59a:	88 e2       	ldi	r24, 0x28	; 40
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	28 e2       	ldi	r18, 0x28	; 40
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	f9 01       	movw	r30, r18
     5a4:	20 81       	ld	r18, Z
     5a6:	2d 7f       	andi	r18, 0xFD	; 253
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     5ac:	8a e2       	ldi	r24, 0x2A	; 42
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	2a e2       	ldi	r18, 0x2A	; 42
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	f9 01       	movw	r30, r18
     5b6:	20 81       	ld	r18, Z
     5b8:	27 7f       	andi	r18, 0xF7	; 247
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     5be:	8b e2       	ldi	r24, 0x2B	; 43
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	2b e2       	ldi	r18, 0x2B	; 43
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	f9 01       	movw	r30, r18
     5c8:	20 81       	ld	r18, Z
     5ca:	28 60       	ori	r18, 0x08	; 8
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     5d0:	8a e2       	ldi	r24, 0x2A	; 42
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	2a e2       	ldi	r18, 0x2A	; 42
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	f9 01       	movw	r30, r18
     5da:	20 81       	ld	r18, Z
     5dc:	2f 7e       	andi	r18, 0xEF	; 239
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     5e2:	8b e2       	ldi	r24, 0x2B	; 43
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	2b e2       	ldi	r18, 0x2B	; 43
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	20 61       	ori	r18, 0x10	; 16
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     5f4:	8a e2       	ldi	r24, 0x2A	; 42
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	2a e2       	ldi	r18, 0x2A	; 42
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	f9 01       	movw	r30, r18
     5fe:	20 81       	ld	r18, Z
     600:	2b 7f       	andi	r18, 0xFB	; 251
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     606:	8b e2       	ldi	r24, 0x2B	; 43
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	2b e2       	ldi	r18, 0x2B	; 43
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	24 60       	ori	r18, 0x04	; 4
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     618:	8a e2       	ldi	r24, 0x2A	; 42
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	2a e2       	ldi	r18, 0x2A	; 42
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	2d 7f       	andi	r18, 0xFD	; 253
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     62a:	8b e2       	ldi	r24, 0x2B	; 43
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	2b e2       	ldi	r18, 0x2B	; 43
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	22 60       	ori	r18, 0x02	; 2
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     63c:	84 e2       	ldi	r24, 0x24	; 36
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	24 e2       	ldi	r18, 0x24	; 36
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	f9 01       	movw	r30, r18
     646:	20 81       	ld	r18, Z
     648:	2e 7f       	andi	r18, 0xFE	; 254
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     64e:	85 e2       	ldi	r24, 0x25	; 37
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	25 e2       	ldi	r18, 0x25	; 37
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	20 81       	ld	r18, Z
     65a:	21 60       	ori	r18, 0x01	; 1
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     660:	8a e2       	ldi	r24, 0x2A	; 42
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	2a e2       	ldi	r18, 0x2A	; 42
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	f9 01       	movw	r30, r18
     66a:	20 81       	ld	r18, Z
     66c:	2f 77       	andi	r18, 0x7F	; 127
     66e:	fc 01       	movw	r30, r24
     670:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     672:	8b e2       	ldi	r24, 0x2B	; 43
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	2b e2       	ldi	r18, 0x2B	; 43
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	f9 01       	movw	r30, r18
     67c:	20 81       	ld	r18, Z
     67e:	20 68       	ori	r18, 0x80	; 128
     680:	fc 01       	movw	r30, r24
     682:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     684:	8a e2       	ldi	r24, 0x2A	; 42
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	2a e2       	ldi	r18, 0x2A	; 42
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	f9 01       	movw	r30, r18
     68e:	20 81       	ld	r18, Z
     690:	2e 7f       	andi	r18, 0xFE	; 254
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     696:	8b e2       	ldi	r24, 0x2B	; 43
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	2b e2       	ldi	r18, 0x2B	; 43
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	f9 01       	movw	r30, r18
     6a0:	20 81       	ld	r18, Z
     6a2:	21 60       	ori	r18, 0x01	; 1
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     6a8:	84 e2       	ldi	r24, 0x24	; 36
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	24 e2       	ldi	r18, 0x24	; 36
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	20 81       	ld	r18, Z
     6b4:	2e 62       	ori	r18, 0x2E	; 46
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     6ba:	8c e4       	ldi	r24, 0x4C	; 76
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	29 e5       	ldi	r18, 0x59	; 89
     6c0:	fc 01       	movw	r30, r24
     6c2:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     6c4:	8d e4       	ldi	r24, 0x4D	; 77
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	89 83       	std	Y+1, r24	; 0x01
	spi_data = SPDR;
     6ce:	8e e4       	ldi	r24, 0x4E	; 78
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	fc 01       	movw	r30, r24
     6d4:	80 81       	ld	r24, Z
     6d6:	89 83       	std	Y+1, r24	; 0x01

	// Power saving
	power_twi_disable();
     6d8:	84 e6       	ldi	r24, 0x64	; 100
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	24 e6       	ldi	r18, 0x64	; 100
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	20 81       	ld	r18, Z
     6e4:	20 68       	ori	r18, 0x80	; 128
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
	power_usart0_disable();
     6ea:	84 e6       	ldi	r24, 0x64	; 100
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	24 e6       	ldi	r18, 0x64	; 100
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	22 60       	ori	r18, 0x02	; 2
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	80 93 6e 01 	sts	0x016E, r24
	cur_state = IDLE;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 c0 01 	sts	0x01C0, r24
	next_state = IDLE;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 a3 01 	sts	0x01A3, r24

	timer = 0;
     70e:	10 92 6a 01 	sts	0x016A, r1
     712:	10 92 6b 01 	sts	0x016B, r1
     716:	10 92 6c 01 	sts	0x016C, r1
     71a:	10 92 6d 01 	sts	0x016D, r1

	eeprom_busy_wait();
     71e:	8f e3       	ldi	r24, 0x3F	; 63
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	82 70       	andi	r24, 0x02	; 2
     72c:	90 70       	andi	r25, 0x00	; 0
     72e:	00 97       	sbiw	r24, 0x00	; 0
     730:	b1 f7       	brne	.-20     	; 0x71e <__stack+0x21f>
	wpm = eeprom_read_byte(&ee_wpm);
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 36 1c 	call	0x386c	; 0x386c <__eerd_byte_m168>
     73a:	80 93 d8 01 	sts	0x01D8, r24
	set_wpm(wpm);
     73e:	80 91 d8 01 	lds	r24, 0x01D8
     742:	0e 94 ed 03 	call	0x7da	; 0x7da <set_wpm>

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = DDS_INIT;
     746:	8c e0       	ldi	r24, 0x0C	; 12
     748:	9f e1       	ldi	r25, 0x1F	; 31
     74a:	a1 e1       	ldi	r26, 0x11	; 17
     74c:	b5 e0       	ldi	r27, 0x05	; 5
     74e:	80 93 a8 01 	sts	0x01A8, r24
     752:	90 93 a9 01 	sts	0x01A9, r25
     756:	a0 93 aa 01 	sts	0x01AA, r26
     75a:	b0 93 ab 01 	sts	0x01AB, r27
	tune_freq = FREQ_INIT;
     75e:	80 ee       	ldi	r24, 0xE0	; 224
     760:	99 e8       	ldi	r25, 0x89	; 137
     762:	a6 ed       	ldi	r26, 0xD6	; 214
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	80 93 d4 01 	sts	0x01D4, r24
     76a:	90 93 d5 01 	sts	0x01D5, r25
     76e:	a0 93 d6 01 	sts	0x01D6, r26
     772:	b0 93 d7 01 	sts	0x01D7, r27
	tune_dds(dds_freq_word, REG_0, TRUE);
     776:	80 91 a8 01 	lds	r24, 0x01A8
     77a:	90 91 a9 01 	lds	r25, 0x01A9
     77e:	a0 91 aa 01 	lds	r26, 0x01AA
     782:	b0 91 ab 01 	lds	r27, 0x01AB
     786:	bc 01       	movw	r22, r24
     788:	cd 01       	movw	r24, r26
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	0e 94 c2 09 	call	0x1384	; 0x1384 <tune_dds>
	tune_dds(dds_freq_word, REG_1, FALSE);
     792:	80 91 a8 01 	lds	r24, 0x01A8
     796:	90 91 a9 01 	lds	r25, 0x01A9
     79a:	a0 91 aa 01 	lds	r26, 0x01AA
     79e:	b0 91 ab 01 	lds	r27, 0x01AB
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	0e 94 c2 09 	call	0x1384	; 0x1384 <tune_dds>

	st_freq = ST_DEFAULT;
     7ae:	88 e5       	ldi	r24, 0x58	; 88
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	90 93 b7 01 	sts	0x01B7, r25
     7b6:	80 93 b6 01 	sts	0x01B6, r24
	set_st_freq(st_freq);
     7ba:	80 91 b6 01 	lds	r24, 0x01B6
     7be:	90 91 b7 01 	lds	r25, 0x01B7
     7c2:	cc 01       	movw	r24, r24
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	bc 01       	movw	r22, r24
     7ca:	cd 01       	movw	r24, r26
     7cc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <set_st_freq>

	// Enable interrupts
	sei();
     7d0:	78 94       	sei
}
     7d2:	0f 90       	pop	r0
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	08 95       	ret

000007da <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	0f 92       	push	r0
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 100 us per timer tick (dividing by 0.1 ms, so multiply by 10)
	dit_length = (1200 / new_wpm);
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	28 2f       	mov	r18, r24
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	80 eb       	ldi	r24, 0xB0	; 176
     7ee:	94 e0       	ldi	r25, 0x04	; 4
     7f0:	b9 01       	movw	r22, r18
     7f2:	0e 94 93 18 	call	0x3126	; 0x3126 <__divmodhi4>
     7f6:	9b 01       	movw	r18, r22
     7f8:	c9 01       	movw	r24, r18
     7fa:	90 93 70 01 	sts	0x0170, r25
     7fe:	80 93 6f 01 	sts	0x016F, r24
}
     802:	0f 90       	pop	r0
     804:	cf 91       	pop	r28
     806:	df 91       	pop	r29
     808:	08 95       	ret

0000080a <debounce>:

void debounce(enum BOOL flush)
{
     80a:	df 93       	push	r29
     80c:	cf 93       	push	r28
     80e:	0f 92       	push	r0
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	41 f5       	brne	.+80     	; 0x86c <debounce+0x62>
	{
		dit_on_count = 0;
     81c:	10 92 4c 01 	sts	0x014C, r1
     820:	10 92 4b 01 	sts	0x014B, r1
		dah_on_count = 0;
     824:	10 92 4e 01 	sts	0x014E, r1
     828:	10 92 4d 01 	sts	0x014D, r1
		dit_off_count = 0;
     82c:	10 92 50 01 	sts	0x0150, r1
     830:	10 92 4f 01 	sts	0x014F, r1
		dah_off_count = 0;
     834:	10 92 52 01 	sts	0x0152, r1
     838:	10 92 51 01 	sts	0x0151, r1
		cmd_on_count = 0;
     83c:	10 92 54 01 	sts	0x0154, r1
     840:	10 92 53 01 	sts	0x0153, r1
		msg_on_count = 0;
     844:	10 92 56 01 	sts	0x0156, r1
     848:	10 92 55 01 	sts	0x0155, r1
		both_on_count = 0;
     84c:	10 92 58 01 	sts	0x0158, r1
     850:	10 92 57 01 	sts	0x0157, r1
		enc_on_count = 0;
     854:	10 92 5a 01 	sts	0x015A, r1
     858:	10 92 59 01 	sts	0x0159, r1
		enca_on_count = 0;
     85c:	10 92 5c 01 	sts	0x015C, r1
     860:	10 92 5b 01 	sts	0x015B, r1
		encb_on_count = 0;
     864:	10 92 5e 01 	sts	0x015E, r1
     868:	10 92 5d 01 	sts	0x015D, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     86c:	89 e2       	ldi	r24, 0x29	; 41
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	88 70       	andi	r24, 0x08	; 8
     87a:	90 70       	andi	r25, 0x00	; 0
     87c:	00 97       	sbiw	r24, 0x00	; 0
     87e:	a9 f4       	brne	.+42     	; 0x8aa <debounce+0xa0>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     880:	80 91 4b 01 	lds	r24, 0x014B
     884:	90 91 4c 01 	lds	r25, 0x014C
     888:	85 30       	cpi	r24, 0x05	; 5
     88a:	91 05       	cpc	r25, r1
     88c:	48 f4       	brcc	.+18     	; 0x8a0 <debounce+0x96>
			dit_on_count++;
     88e:	80 91 4b 01 	lds	r24, 0x014B
     892:	90 91 4c 01 	lds	r25, 0x014C
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	90 93 4c 01 	sts	0x014C, r25
     89c:	80 93 4b 01 	sts	0x014B, r24
		dit_off_count = 0;
     8a0:	10 92 50 01 	sts	0x0150, r1
     8a4:	10 92 4f 01 	sts	0x014F, r1
     8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <debounce+0xc8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     8aa:	80 91 4f 01 	lds	r24, 0x014F
     8ae:	90 91 50 01 	lds	r25, 0x0150
     8b2:	85 30       	cpi	r24, 0x05	; 5
     8b4:	91 05       	cpc	r25, r1
     8b6:	48 f4       	brcc	.+18     	; 0x8ca <debounce+0xc0>
			dit_off_count++;
     8b8:	80 91 4f 01 	lds	r24, 0x014F
     8bc:	90 91 50 01 	lds	r25, 0x0150
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 50 01 	sts	0x0150, r25
     8c6:	80 93 4f 01 	sts	0x014F, r24
		dit_on_count = 0;
     8ca:	10 92 4c 01 	sts	0x014C, r1
     8ce:	10 92 4b 01 	sts	0x014B, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     8d2:	89 e2       	ldi	r24, 0x29	; 41
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	fc 01       	movw	r30, r24
     8d8:	80 81       	ld	r24, Z
     8da:	88 2f       	mov	r24, r24
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	80 71       	andi	r24, 0x10	; 16
     8e0:	90 70       	andi	r25, 0x00	; 0
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	a9 f4       	brne	.+42     	; 0x910 <debounce+0x106>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     8e6:	80 91 4d 01 	lds	r24, 0x014D
     8ea:	90 91 4e 01 	lds	r25, 0x014E
     8ee:	85 30       	cpi	r24, 0x05	; 5
     8f0:	91 05       	cpc	r25, r1
     8f2:	48 f4       	brcc	.+18     	; 0x906 <debounce+0xfc>
			dah_on_count++;
     8f4:	80 91 4d 01 	lds	r24, 0x014D
     8f8:	90 91 4e 01 	lds	r25, 0x014E
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	90 93 4e 01 	sts	0x014E, r25
     902:	80 93 4d 01 	sts	0x014D, r24
		dah_off_count = 0;
     906:	10 92 52 01 	sts	0x0152, r1
     90a:	10 92 51 01 	sts	0x0151, r1
     90e:	14 c0       	rjmp	.+40     	; 0x938 <debounce+0x12e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     910:	80 91 51 01 	lds	r24, 0x0151
     914:	90 91 52 01 	lds	r25, 0x0152
     918:	85 30       	cpi	r24, 0x05	; 5
     91a:	91 05       	cpc	r25, r1
     91c:	48 f4       	brcc	.+18     	; 0x930 <debounce+0x126>
			dah_off_count++;
     91e:	80 91 51 01 	lds	r24, 0x0151
     922:	90 91 52 01 	lds	r25, 0x0152
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	90 93 52 01 	sts	0x0152, r25
     92c:	80 93 51 01 	sts	0x0151, r24
		dah_on_count = 0;
     930:	10 92 4e 01 	sts	0x014E, r1
     934:	10 92 4d 01 	sts	0x014D, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     938:	80 91 4b 01 	lds	r24, 0x014B
     93c:	90 91 4c 01 	lds	r25, 0x014C
     940:	85 30       	cpi	r24, 0x05	; 5
     942:	91 05       	cpc	r25, r1
     944:	18 f0       	brcs	.+6      	; 0x94c <debounce+0x142>
		dit_active = TRUE;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 93 d2 01 	sts	0x01D2, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     94c:	80 91 4f 01 	lds	r24, 0x014F
     950:	90 91 50 01 	lds	r25, 0x0150
     954:	85 30       	cpi	r24, 0x05	; 5
     956:	91 05       	cpc	r25, r1
     958:	10 f0       	brcs	.+4      	; 0x95e <debounce+0x154>
		dit_active = FALSE;
     95a:	10 92 d2 01 	sts	0x01D2, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     95e:	80 91 4d 01 	lds	r24, 0x014D
     962:	90 91 4e 01 	lds	r25, 0x014E
     966:	85 30       	cpi	r24, 0x05	; 5
     968:	91 05       	cpc	r25, r1
     96a:	18 f0       	brcs	.+6      	; 0x972 <debounce+0x168>
		dah_active = TRUE;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 bc 01 	sts	0x01BC, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     972:	80 91 51 01 	lds	r24, 0x0151
     976:	90 91 52 01 	lds	r25, 0x0152
     97a:	85 30       	cpi	r24, 0x05	; 5
     97c:	91 05       	cpc	r25, r1
     97e:	10 f0       	brcs	.+4      	; 0x984 <debounce+0x17a>
		dah_active = FALSE;
     980:	10 92 bc 01 	sts	0x01BC, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     984:	89 e2       	ldi	r24, 0x29	; 41
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	84 70       	andi	r24, 0x04	; 4
     992:	90 70       	andi	r25, 0x00	; 0
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	a1 f4       	brne	.+40     	; 0x9c0 <debounce+0x1b6>
     998:	89 e2       	ldi	r24, 0x29	; 41
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	fc 01       	movw	r30, r24
     99e:	80 81       	ld	r24, Z
     9a0:	88 2f       	mov	r24, r24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	82 70       	andi	r24, 0x02	; 2
     9a6:	90 70       	andi	r25, 0x00	; 0
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	51 f4       	brne	.+20     	; 0x9c0 <debounce+0x1b6>
		both_on_count++;
     9ac:	80 91 57 01 	lds	r24, 0x0157
     9b0:	90 91 58 01 	lds	r25, 0x0158
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	90 93 58 01 	sts	0x0158, r25
     9ba:	80 93 57 01 	sts	0x0157, r24
     9be:	25 c0       	rjmp	.+74     	; 0xa0a <debounce+0x200>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     9c0:	80 91 57 01 	lds	r24, 0x0157
     9c4:	90 91 58 01 	lds	r25, 0x0158
     9c8:	85 30       	cpi	r24, 0x05	; 5
     9ca:	91 05       	cpc	r25, r1
     9cc:	60 f0       	brcs	.+24     	; 0x9e6 <debounce+0x1dc>
     9ce:	80 91 57 01 	lds	r24, 0x0157
     9d2:	90 91 58 01 	lds	r25, 0x0158
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	84 3f       	cpi	r24, 0xF4	; 244
     9da:	9f 07       	cpc	r25, r31
     9dc:	20 f4       	brcc	.+8      	; 0x9e6 <debounce+0x1dc>
			both_btn = PRESS;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 be 01 	sts	0x01BE, r24
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <debounce+0x1f8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     9e6:	80 91 57 01 	lds	r24, 0x0157
     9ea:	90 91 58 01 	lds	r25, 0x0158
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	84 3f       	cpi	r24, 0xF4	; 244
     9f2:	92 07       	cpc	r25, r18
     9f4:	20 f0       	brcs	.+8      	; 0x9fe <debounce+0x1f4>
			both_btn = HOLD;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	80 93 be 01 	sts	0x01BE, r24
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <debounce+0x1f8>
		else
			both_btn = OFF;
     9fe:	10 92 be 01 	sts	0x01BE, r1

		both_on_count = 0;
     a02:	10 92 58 01 	sts	0x0158, r1
     a06:	10 92 57 01 	sts	0x0157, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     a0a:	89 e2       	ldi	r24, 0x29	; 41
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	fc 01       	movw	r30, r24
     a10:	80 81       	ld	r24, Z
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	84 70       	andi	r24, 0x04	; 4
     a18:	90 70       	andi	r25, 0x00	; 0
     a1a:	00 97       	sbiw	r24, 0x00	; 0
     a1c:	51 f4       	brne	.+20     	; 0xa32 <debounce+0x228>
	{
		cmd_on_count++;
     a1e:	80 91 53 01 	lds	r24, 0x0153
     a22:	90 91 54 01 	lds	r25, 0x0154
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	90 93 54 01 	sts	0x0154, r25
     a2c:	80 93 53 01 	sts	0x0153, r24
     a30:	25 c0       	rjmp	.+74     	; 0xa7c <debounce+0x272>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     a32:	80 91 53 01 	lds	r24, 0x0153
     a36:	90 91 54 01 	lds	r25, 0x0154
     a3a:	85 30       	cpi	r24, 0x05	; 5
     a3c:	91 05       	cpc	r25, r1
     a3e:	60 f0       	brcs	.+24     	; 0xa58 <debounce+0x24e>
     a40:	80 91 53 01 	lds	r24, 0x0153
     a44:	90 91 54 01 	lds	r25, 0x0154
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	84 3f       	cpi	r24, 0xF4	; 244
     a4c:	9f 07       	cpc	r25, r31
     a4e:	20 f4       	brcc	.+8      	; 0xa58 <debounce+0x24e>
			cmd_btn = PRESS;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 bf 01 	sts	0x01BF, r24
     a56:	0e c0       	rjmp	.+28     	; 0xa74 <debounce+0x26a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     a58:	80 91 53 01 	lds	r24, 0x0153
     a5c:	90 91 54 01 	lds	r25, 0x0154
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	84 3f       	cpi	r24, 0xF4	; 244
     a64:	92 07       	cpc	r25, r18
     a66:	20 f0       	brcs	.+8      	; 0xa70 <debounce+0x266>
			cmd_btn = HOLD;
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	80 93 bf 01 	sts	0x01BF, r24
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <debounce+0x26a>
		else
			cmd_btn = OFF;
     a70:	10 92 bf 01 	sts	0x01BF, r1

		cmd_on_count = 0;
     a74:	10 92 54 01 	sts	0x0154, r1
     a78:	10 92 53 01 	sts	0x0153, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     a7c:	89 e2       	ldi	r24, 0x29	; 41
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	82 70       	andi	r24, 0x02	; 2
     a8a:	90 70       	andi	r25, 0x00	; 0
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	51 f4       	brne	.+20     	; 0xaa4 <debounce+0x29a>
		msg_on_count++;
     a90:	80 91 55 01 	lds	r24, 0x0155
     a94:	90 91 56 01 	lds	r25, 0x0156
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	90 93 56 01 	sts	0x0156, r25
     a9e:	80 93 55 01 	sts	0x0155, r24
     aa2:	25 c0       	rjmp	.+74     	; 0xaee <debounce+0x2e4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     aa4:	80 91 55 01 	lds	r24, 0x0155
     aa8:	90 91 56 01 	lds	r25, 0x0156
     aac:	85 30       	cpi	r24, 0x05	; 5
     aae:	91 05       	cpc	r25, r1
     ab0:	60 f0       	brcs	.+24     	; 0xaca <debounce+0x2c0>
     ab2:	80 91 55 01 	lds	r24, 0x0155
     ab6:	90 91 56 01 	lds	r25, 0x0156
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	84 3f       	cpi	r24, 0xF4	; 244
     abe:	9f 07       	cpc	r25, r31
     ac0:	20 f4       	brcc	.+8      	; 0xaca <debounce+0x2c0>
			msg_btn = PRESS;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 bd 01 	sts	0x01BD, r24
     ac8:	0e c0       	rjmp	.+28     	; 0xae6 <debounce+0x2dc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     aca:	80 91 55 01 	lds	r24, 0x0155
     ace:	90 91 56 01 	lds	r25, 0x0156
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	84 3f       	cpi	r24, 0xF4	; 244
     ad6:	92 07       	cpc	r25, r18
     ad8:	20 f0       	brcs	.+8      	; 0xae2 <debounce+0x2d8>
			msg_btn = HOLD;
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	80 93 bd 01 	sts	0x01BD, r24
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <debounce+0x2dc>
		else
			msg_btn = OFF;
     ae2:	10 92 bd 01 	sts	0x01BD, r1

		msg_on_count = 0;
     ae6:	10 92 56 01 	sts	0x0156, r1
     aea:	10 92 55 01 	sts	0x0155, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     aee:	89 e2       	ldi	r24, 0x29	; 41
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	fc 01       	movw	r30, r24
     af4:	80 81       	ld	r24, Z
     af6:	88 2f       	mov	r24, r24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	81 70       	andi	r24, 0x01	; 1
     afc:	90 70       	andi	r25, 0x00	; 0
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	51 f4       	brne	.+20     	; 0xb16 <debounce+0x30c>
		enc_on_count++;
     b02:	80 91 59 01 	lds	r24, 0x0159
     b06:	90 91 5a 01 	lds	r25, 0x015A
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	90 93 5a 01 	sts	0x015A, r25
     b10:	80 93 59 01 	sts	0x0159, r24
     b14:	25 c0       	rjmp	.+74     	; 0xb60 <debounce+0x356>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     b16:	80 91 59 01 	lds	r24, 0x0159
     b1a:	90 91 5a 01 	lds	r25, 0x015A
     b1e:	85 30       	cpi	r24, 0x05	; 5
     b20:	91 05       	cpc	r25, r1
     b22:	60 f0       	brcs	.+24     	; 0xb3c <debounce+0x332>
     b24:	80 91 59 01 	lds	r24, 0x0159
     b28:	90 91 5a 01 	lds	r25, 0x015A
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	84 3f       	cpi	r24, 0xF4	; 244
     b30:	9f 07       	cpc	r25, r31
     b32:	20 f4       	brcc	.+8      	; 0xb3c <debounce+0x332>
			enc_btn = PRESS;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 c9 01 	sts	0x01C9, r24
     b3a:	0e c0       	rjmp	.+28     	; 0xb58 <debounce+0x34e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     b3c:	80 91 59 01 	lds	r24, 0x0159
     b40:	90 91 5a 01 	lds	r25, 0x015A
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	84 3f       	cpi	r24, 0xF4	; 244
     b48:	92 07       	cpc	r25, r18
     b4a:	20 f0       	brcs	.+8      	; 0xb54 <debounce+0x34a>
			enc_btn = HOLD;
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	80 93 c9 01 	sts	0x01C9, r24
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <debounce+0x34e>
		else
			enc_btn = OFF;
     b54:	10 92 c9 01 	sts	0x01C9, r1

		enc_on_count = 0;
     b58:	10 92 5a 01 	sts	0x015A, r1
     b5c:	10 92 59 01 	sts	0x0159, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     b60:	83 e2       	ldi	r24, 0x23	; 35
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	fc 01       	movw	r30, r24
     b66:	80 81       	ld	r24, Z
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	81 70       	andi	r24, 0x01	; 1
     b6e:	90 70       	andi	r25, 0x00	; 0
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	a9 f4       	brne	.+42     	; 0xb9e <debounce+0x394>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     b74:	80 91 5b 01 	lds	r24, 0x015B
     b78:	90 91 5c 01 	lds	r25, 0x015C
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	91 05       	cpc	r25, r1
     b80:	48 f4       	brcc	.+18     	; 0xb94 <debounce+0x38a>
			enca_on_count++;
     b82:	80 91 5b 01 	lds	r24, 0x015B
     b86:	90 91 5c 01 	lds	r25, 0x015C
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	90 93 5c 01 	sts	0x015C, r25
     b90:	80 93 5b 01 	sts	0x015B, r24
		enca_off_count = 0;
     b94:	10 92 60 01 	sts	0x0160, r1
     b98:	10 92 5f 01 	sts	0x015F, r1
     b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <debounce+0x3bc>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     b9e:	80 91 5f 01 	lds	r24, 0x015F
     ba2:	90 91 60 01 	lds	r25, 0x0160
     ba6:	85 30       	cpi	r24, 0x05	; 5
     ba8:	91 05       	cpc	r25, r1
     baa:	48 f4       	brcc	.+18     	; 0xbbe <debounce+0x3b4>
			enca_off_count++;
     bac:	80 91 5f 01 	lds	r24, 0x015F
     bb0:	90 91 60 01 	lds	r25, 0x0160
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	90 93 60 01 	sts	0x0160, r25
     bba:	80 93 5f 01 	sts	0x015F, r24
		enca_on_count = 0;
     bbe:	10 92 5c 01 	sts	0x015C, r1
     bc2:	10 92 5b 01 	sts	0x015B, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     bc6:	89 e2       	ldi	r24, 0x29	; 41
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	fc 01       	movw	r30, r24
     bcc:	80 81       	ld	r24, Z
     bce:	88 23       	and	r24, r24
     bd0:	ac f0       	brlt	.+42     	; 0xbfc <debounce+0x3f2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     bd2:	80 91 5d 01 	lds	r24, 0x015D
     bd6:	90 91 5e 01 	lds	r25, 0x015E
     bda:	85 30       	cpi	r24, 0x05	; 5
     bdc:	91 05       	cpc	r25, r1
     bde:	48 f4       	brcc	.+18     	; 0xbf2 <debounce+0x3e8>
			encb_on_count++;
     be0:	80 91 5d 01 	lds	r24, 0x015D
     be4:	90 91 5e 01 	lds	r25, 0x015E
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	90 93 5e 01 	sts	0x015E, r25
     bee:	80 93 5d 01 	sts	0x015D, r24
		encb_off_count = 0;
     bf2:	10 92 62 01 	sts	0x0162, r1
     bf6:	10 92 61 01 	sts	0x0161, r1
     bfa:	14 c0       	rjmp	.+40     	; 0xc24 <debounce+0x41a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     bfc:	80 91 61 01 	lds	r24, 0x0161
     c00:	90 91 62 01 	lds	r25, 0x0162
     c04:	85 30       	cpi	r24, 0x05	; 5
     c06:	91 05       	cpc	r25, r1
     c08:	48 f4       	brcc	.+18     	; 0xc1c <debounce+0x412>
			encb_off_count++;
     c0a:	80 91 61 01 	lds	r24, 0x0161
     c0e:	90 91 62 01 	lds	r25, 0x0162
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	90 93 62 01 	sts	0x0162, r25
     c18:	80 93 61 01 	sts	0x0161, r24
		encb_on_count = 0;
     c1c:	10 92 5e 01 	sts	0x015E, r1
     c20:	10 92 5d 01 	sts	0x015D, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     c24:	80 91 5b 01 	lds	r24, 0x015B
     c28:	90 91 5c 01 	lds	r25, 0x015C
     c2c:	85 30       	cpi	r24, 0x05	; 5
     c2e:	91 05       	cpc	r25, r1
     c30:	18 f0       	brcs	.+6      	; 0xc38 <debounce+0x42e>
		enc_a = TRUE;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 63 01 	sts	0x0163, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     c38:	80 91 5f 01 	lds	r24, 0x015F
     c3c:	90 91 60 01 	lds	r25, 0x0160
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	91 05       	cpc	r25, r1
     c44:	10 f0       	brcs	.+4      	; 0xc4a <debounce+0x440>
		enc_a = FALSE;
     c46:	10 92 63 01 	sts	0x0163, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     c4a:	80 91 5d 01 	lds	r24, 0x015D
     c4e:	90 91 5e 01 	lds	r25, 0x015E
     c52:	85 30       	cpi	r24, 0x05	; 5
     c54:	91 05       	cpc	r25, r1
     c56:	18 f0       	brcs	.+6      	; 0xc5e <debounce+0x454>
		enc_b = TRUE;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	80 93 e3 01 	sts	0x01E3, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     c5e:	80 91 61 01 	lds	r24, 0x0161
     c62:	90 91 62 01 	lds	r25, 0x0162
     c66:	85 30       	cpi	r24, 0x05	; 5
     c68:	91 05       	cpc	r25, r1
     c6a:	10 f0       	brcs	.+4      	; 0xc70 <debounce+0x466>
		enc_b = FALSE;
     c6c:	10 92 e3 01 	sts	0x01E3, r1

	// Don't go to sleep if there are any paddle or button presses
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
     c70:	80 91 4b 01 	lds	r24, 0x014B
     c74:	90 91 4c 01 	lds	r25, 0x014C
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	c1 f4       	brne	.+48     	; 0xcac <debounce+0x4a2>
     c7c:	80 91 4d 01 	lds	r24, 0x014D
     c80:	90 91 4e 01 	lds	r25, 0x014E
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	91 f4       	brne	.+36     	; 0xcac <debounce+0x4a2>
     c88:	80 91 53 01 	lds	r24, 0x0153
     c8c:	90 91 54 01 	lds	r25, 0x0154
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	61 f4       	brne	.+24     	; 0xcac <debounce+0x4a2>
     c94:	80 91 55 01 	lds	r24, 0x0155
     c98:	90 91 56 01 	lds	r25, 0x0156
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	31 f4       	brne	.+12     	; 0xcac <debounce+0x4a2>
     ca0:	80 91 57 01 	lds	r24, 0x0157
     ca4:	90 91 58 01 	lds	r25, 0x0158
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	19 f0       	breq	.+6      	; 0xcb2 <debounce+0x4a8>
		allow_sleep = FALSE;
     cac:	10 92 0a 01 	sts	0x010A, r1
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <debounce+0x4ae>
	else
		allow_sleep = TRUE;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 0a 01 	sts	0x010A, r24
}
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <announce>:

void announce(char * msg, uint16_t freq, uint8_t speed)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <announce+0x6>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <announce+0x8>
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	7c 83       	std	Y+4, r23	; 0x04
     cd4:	6b 83       	std	Y+3, r22	; 0x03
     cd6:	4d 83       	std	Y+5, r20	; 0x05
	// Convert to uppercase
	strupr(msg);
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	9a 81       	ldd	r25, Y+2	; 0x02
     cdc:	0e 94 12 1a 	call	0x3424	; 0x3424 <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     ce0:	80 91 dd 01 	lds	r24, 0x01DD
     ce4:	90 91 de 01 	lds	r25, 0x01DE
     ce8:	29 81       	ldd	r18, Y+1	; 0x01
     cea:	3a 81       	ldd	r19, Y+2	; 0x02
     cec:	b9 01       	movw	r22, r18
     cee:	0e 94 0b 1a 	call	0x3416	; 0x3416 <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     cf2:	80 91 c0 01 	lds	r24, 0x01C0
     cf6:	80 93 6e 01 	sts	0x016E, r24
	prev_state_end = cur_state_end;
     cfa:	80 91 ca 01 	lds	r24, 0x01CA
     cfe:	90 91 cb 01 	lds	r25, 0x01CB
     d02:	a0 91 cc 01 	lds	r26, 0x01CC
     d06:	b0 91 cd 01 	lds	r27, 0x01CD
     d0a:	80 93 b0 01 	sts	0x01B0, r24
     d0e:	90 93 b1 01 	sts	0x01B1, r25
     d12:	a0 93 b2 01 	sts	0x01B2, r26
     d16:	b0 93 b3 01 	sts	0x01B3, r27
	prev_mode = cur_mode;
     d1a:	80 91 9e 01 	lds	r24, 0x019E
     d1e:	80 93 b4 01 	sts	0x01B4, r24
	prev_st_freq = st_freq;
     d22:	80 91 b6 01 	lds	r24, 0x01B6
     d26:	90 91 b7 01 	lds	r25, 0x01B7
     d2a:	90 93 c4 01 	sts	0x01C4, r25
     d2e:	80 93 c3 01 	sts	0x01C3, r24
	st_freq = freq;
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	90 93 b7 01 	sts	0x01B7, r25
     d3a:	80 93 b6 01 	sts	0x01B6, r24
	prev_wpm = wpm;
     d3e:	80 91 d8 01 	lds	r24, 0x01D8
     d42:	80 93 e5 01 	sts	0x01E5, r24
	wpm = speed;
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	80 93 d8 01 	sts	0x01D8, r24

	set_st_freq(st_freq);
     d4c:	80 91 b6 01 	lds	r24, 0x01B6
     d50:	90 91 b7 01 	lds	r25, 0x01B7
     d54:	cc 01       	movw	r24, r24
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <set_st_freq>
	set_wpm(wpm);
     d62:	80 91 d8 01 	lds	r24, 0x01D8
     d66:	0e 94 ed 03 	call	0x7da	; 0x7da <set_wpm>

	// Set into announce mode
	cur_state = IDLE;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 c0 01 	sts	0x01C0, r24
	cur_mode = ANNOUNCE;
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	80 93 9e 01 	sts	0x019E, r24
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <read_voltage>:

void read_voltage(void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <read_voltage+0x6>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <read_voltage+0x8>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <read_voltage+0xa>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     d94:	8a e0       	ldi	r24, 0x0A	; 10
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 c8 18 	call	0x3190	; 0x3190 <malloc>
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     da0:	8a e7       	ldi	r24, 0x7A	; 122
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	2a e7       	ldi	r18, 0x7A	; 122
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	d9 01       	movw	r26, r18
     daa:	2c 91       	ld	r18, X
     dac:	20 64       	ori	r18, 0x40	; 64
     dae:	fc 01       	movw	r30, r24
     db0:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     db2:	8a e7       	ldi	r24, 0x7A	; 122
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	dc 01       	movw	r26, r24
     db8:	8c 91       	ld	r24, X
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	80 74       	andi	r24, 0x40	; 64
     dc0:	90 70       	andi	r25, 0x00	; 0
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	b1 f7       	brne	.-20     	; 0xdb2 <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     dc6:	89 e7       	ldi	r24, 0x79	; 121
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	fc 01       	movw	r30, r24
     dcc:	80 81       	ld	r24, Z
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	9c 83       	std	Y+4, r25	; 0x04
     dd4:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 16.1 V
	// We'll use fixed point numbers, so full scale is 161 * 0.1 V
	vcc = (vcc_mon * 161) / 256;
     dd6:	4b 81       	ldd	r20, Y+3	; 0x03
     dd8:	5c 81       	ldd	r21, Y+4	; 0x04
     dda:	21 ea       	ldi	r18, 0xA1	; 161
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	42 9f       	mul	r20, r18
     de0:	c0 01       	movw	r24, r0
     de2:	43 9f       	mul	r20, r19
     de4:	90 0d       	add	r25, r0
     de6:	52 9f       	mul	r21, r18
     de8:	90 0d       	add	r25, r0
     dea:	11 24       	eor	r1, r1
     dec:	89 2f       	mov	r24, r25
     dee:	99 27       	eor	r25, r25
     df0:	9e 83       	std	Y+6, r25	; 0x06
     df2:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	2a e0       	ldi	r18, 0x0A	; 10
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	b9 01       	movw	r22, r18
     dfe:	0e 94 7f 18 	call	0x30fe	; 0x30fe <__udivmodhi4>
     e02:	9b 01       	movw	r18, r22
     e04:	f9 01       	movw	r30, r18
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	9e 81       	ldd	r25, Y+6	; 0x06
     e0a:	2a e0       	ldi	r18, 0x0A	; 10
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	b9 01       	movw	r22, r18
     e10:	0e 94 7f 18 	call	0x30fe	; 0x30fe <__udivmodhi4>
     e14:	9c 01       	movw	r18, r24
     e16:	8d b7       	in	r24, 0x3d	; 61
     e18:	9e b7       	in	r25, 0x3e	; 62
     e1a:	08 97       	sbiw	r24, 0x08	; 8
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	9e bf       	out	0x3e, r25	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	8d bf       	out	0x3d, r24	; 61
     e26:	8d b7       	in	r24, 0x3d	; 61
     e28:	9e b7       	in	r25, 0x3e	; 62
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	49 81       	ldd	r20, Y+1	; 0x01
     e2e:	5a 81       	ldd	r21, Y+2	; 0x02
     e30:	dc 01       	movw	r26, r24
     e32:	4d 93       	st	X+, r20
     e34:	5c 93       	st	X, r21
     e36:	4b e0       	ldi	r20, 0x0B	; 11
     e38:	51 e0       	ldi	r21, 0x01	; 1
     e3a:	dc 01       	movw	r26, r24
     e3c:	13 96       	adiw	r26, 0x03	; 3
     e3e:	5c 93       	st	X, r21
     e40:	4e 93       	st	-X, r20
     e42:	12 97       	sbiw	r26, 0x02	; 2
     e44:	dc 01       	movw	r26, r24
     e46:	15 96       	adiw	r26, 0x05	; 5
     e48:	fc 93       	st	X, r31
     e4a:	ee 93       	st	-X, r30
     e4c:	14 97       	sbiw	r26, 0x04	; 4
     e4e:	fc 01       	movw	r30, r24
     e50:	37 83       	std	Z+7, r19	; 0x07
     e52:	26 83       	std	Z+6, r18	; 0x06
     e54:	0e 94 1c 1a 	call	0x3438	; 0x3438 <sprintf>
     e58:	8d b7       	in	r24, 0x3d	; 61
     e5a:	9e b7       	in	r25, 0x3e	; 62
     e5c:	08 96       	adiw	r24, 0x08	; 8
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	9e bf       	out	0x3e, r25	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq, wpm);
     e68:	20 91 b6 01 	lds	r18, 0x01B6
     e6c:	30 91 b7 01 	lds	r19, 0x01B7
     e70:	40 91 d8 01 	lds	r20, 0x01D8
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	b9 01       	movw	r22, r18
     e7a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>

	free(vcc_out);
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	0e 94 62 19 	call	0x32c4	; 0x32c4 <free>
}
     e86:	26 96       	adiw	r28, 0x06	; 6
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <count_frequency>:

void count_frequency(void)
{
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <count_frequency+0xa>
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     ea6:	8f e0       	ldi	r24, 0x0F	; 15
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 c8 18 	call	0x3190	; 0x3190 <malloc>
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     eb2:	80 91 d4 01 	lds	r24, 0x01D4
     eb6:	90 91 d5 01 	lds	r25, 0x01D5
     eba:	a0 91 d6 01 	lds	r26, 0x01D6
     ebe:	b0 91 d7 01 	lds	r27, 0x01D7
     ec2:	28 ee       	ldi	r18, 0xE8	; 232
     ec4:	33 e0       	ldi	r19, 0x03	; 3
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
     ed2:	da 01       	movw	r26, r20
     ed4:	c9 01       	movw	r24, r18
     ed6:	24 e6       	ldi	r18, 0x64	; 100
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	8c 01       	movw	r16, r24
     eec:	80 91 d4 01 	lds	r24, 0x01D4
     ef0:	90 91 d5 01 	lds	r25, 0x01D5
     ef4:	a0 91 d6 01 	lds	r26, 0x01D6
     ef8:	b0 91 d7 01 	lds	r27, 0x01D7
     efc:	28 ee       	ldi	r18, 0xE8	; 232
     efe:	33 e0       	ldi	r19, 0x03	; 3
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	2a e0       	ldi	r18, 0x0A	; 10
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 a6 18 	call	0x314c	; 0x314c <__udivmodsi4>
     f20:	da 01       	movw	r26, r20
     f22:	c9 01       	movw	r24, r18
     f24:	9c 01       	movw	r18, r24
     f26:	8d b7       	in	r24, 0x3d	; 61
     f28:	9e b7       	in	r25, 0x3e	; 62
     f2a:	08 97       	sbiw	r24, 0x08	; 8
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	9e bf       	out	0x3e, r25	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	8d bf       	out	0x3d, r24	; 61
     f36:	8d b7       	in	r24, 0x3d	; 61
     f38:	9e b7       	in	r25, 0x3e	; 62
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	49 81       	ldd	r20, Y+1	; 0x01
     f3e:	5a 81       	ldd	r21, Y+2	; 0x02
     f40:	fc 01       	movw	r30, r24
     f42:	51 83       	std	Z+1, r21	; 0x01
     f44:	40 83       	st	Z, r20
     f46:	41 e1       	ldi	r20, 0x11	; 17
     f48:	51 e0       	ldi	r21, 0x01	; 1
     f4a:	fc 01       	movw	r30, r24
     f4c:	53 83       	std	Z+3, r21	; 0x03
     f4e:	42 83       	std	Z+2, r20	; 0x02
     f50:	fc 01       	movw	r30, r24
     f52:	15 83       	std	Z+5, r17	; 0x05
     f54:	04 83       	std	Z+4, r16	; 0x04
     f56:	fc 01       	movw	r30, r24
     f58:	37 83       	std	Z+7, r19	; 0x07
     f5a:	26 83       	std	Z+6, r18	; 0x06
     f5c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <sprintf>
     f60:	8d b7       	in	r24, 0x3d	; 61
     f62:	9e b7       	in	r25, 0x3e	; 62
     f64:	08 96       	adiw	r24, 0x08	; 8
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	9e bf       	out	0x3e, r25	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out, st_freq, wpm);
     f70:	20 91 b6 01 	lds	r18, 0x01B6
     f74:	30 91 b7 01 	lds	r19, 0x01B7
     f78:	40 91 d8 01 	lds	r20, 0x01D8
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	b9 01       	movw	r22, r18
     f82:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>

	free(freq_out);
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	0e 94 62 19 	call	0x32c4	; 0x32c4 <free>
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <poll_buttons>:

void poll_buttons(void)
{
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
     fae:	80 91 be 01 	lds	r24, 0x01BE
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	59 f4       	brne	.+22     	; 0xfcc <poll_buttons+0x30>
	{
		cur_state = IDLE;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 c0 01 	sts	0x01C0, r24
		prev_mode = cur_mode;
     fbc:	80 91 9e 01 	lds	r24, 0x019E
     fc0:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = TUNE;
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	80 93 9e 01 	sts	0x019E, r24
     fca:	36 c0       	rjmp	.+108    	; 0x1038 <poll_buttons+0x9c>
	}
	else if(cmd_btn == PRESS)
     fcc:	80 91 bf 01 	lds	r24, 0x01BF
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	59 f4       	brne	.+22     	; 0xfea <poll_buttons+0x4e>
	{
		prev_mode = cur_mode;
     fd4:	80 91 9e 01 	lds	r24, 0x019E
     fd8:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = MENU;
     fdc:	84 e0       	ldi	r24, 0x04	; 4
     fde:	80 93 9e 01 	sts	0x019E, r24
		cur_state = IDLE;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 c0 01 	sts	0x01C0, r24
     fe8:	27 c0       	rjmp	.+78     	; 0x1038 <poll_buttons+0x9c>
	}
	else if(msg_btn == PRESS)
     fea:	80 91 bd 01 	lds	r24, 0x01BD
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	19 f4       	brne	.+6      	; 0xff8 <poll_buttons+0x5c>
		count_frequency();
     ff2:	0e 94 4c 07 	call	0xe98	; 0xe98 <count_frequency>
     ff6:	20 c0       	rjmp	.+64     	; 0x1038 <poll_buttons+0x9c>
	else if(msg_btn == HOLD)
     ff8:	80 91 bd 01 	lds	r24, 0x01BD
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	e1 f4       	brne	.+56     	; 0x1038 <poll_buttons+0x9c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
    1000:	81 e7       	ldi	r24, 0x71	; 113
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	22 e0       	ldi	r18, 0x02	; 2
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	b9 01       	movw	r22, r18
    100a:	48 e2       	ldi	r20, 0x28	; 40
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	0e 94 26 1c 	call	0x384c	; 0x384c <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
    1012:	80 91 dd 01 	lds	r24, 0x01DD
    1016:	90 91 de 01 	lds	r25, 0x01DE
    101a:	21 e7       	ldi	r18, 0x71	; 113
    101c:	31 e0       	ldi	r19, 0x01	; 1
    101e:	b9 01       	movw	r22, r18
    1020:	0e 94 0b 1a 	call	0x3416	; 0x3416 <strcpy>
		cur_state = IDLE;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 c0 01 	sts	0x01C0, r24
		prev_mode = cur_mode;
    102a:	80 91 9e 01 	lds	r24, 0x019E
    102e:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = PLAYBACK;
    1032:	86 e0       	ldi	r24, 0x06	; 6
    1034:	80 93 9e 01 	sts	0x019E, r24
	}

	if(enc_btn == PRESS)
    1038:	80 91 c9 01 	lds	r24, 0x01C9
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	89 f5       	brne	.+98     	; 0x10a2 <poll_buttons+0x106>
	{
		if(tune_rate == FAST)
    1040:	80 91 06 01 	lds	r24, 0x0106
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	b1 f4       	brne	.+44     	; 0x1074 <poll_buttons+0xd8>
		{
			tune_rate = SLOW;
    1048:	10 92 06 01 	sts	0x0106, r1
			tune_step = DDS_20HZ;
    104c:	84 e3       	ldi	r24, 0x34	; 52
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	90 93 08 01 	sts	0x0108, r25
    1054:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 5;
    1058:	85 e0       	ldi	r24, 0x05	; 5
    105a:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>
			announce("S", ST_LOW, 25);
    1064:	8b e1       	ldi	r24, 0x1B	; 27
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	60 e9       	ldi	r22, 0x90	; 144
    106a:	71 e0       	ldi	r23, 0x01	; 1
    106c:	49 e1       	ldi	r20, 0x19	; 25
    106e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    1072:	8c c0       	rjmp	.+280    	; 0x118c <poll_buttons+0x1f0>
		}
		else
		{
			tune_rate = FAST;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 93 06 01 	sts	0x0106, r24
			tune_step = DDS_100HZ;
    107a:	8c e0       	ldi	r24, 0x0C	; 12
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	90 93 08 01 	sts	0x0108, r25
    1082:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 25;
    1086:	89 e1       	ldi	r24, 0x19	; 25
    1088:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>
			announce("S", ST_HIGH, 25);
    1092:	8b e1       	ldi	r24, 0x1B	; 27
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	64 e8       	ldi	r22, 0x84	; 132
    1098:	73 e0       	ldi	r23, 0x03	; 3
    109a:	49 e1       	ldi	r20, 0x19	; 25
    109c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    10a0:	75 c0       	rjmp	.+234    	; 0x118c <poll_buttons+0x1f0>
		}
	}
	else if(enc_btn == HOLD)
    10a2:	80 91 c9 01 	lds	r24, 0x01C9
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	09 f0       	breq	.+2      	; 0x10ac <poll_buttons+0x110>
    10aa:	70 c0       	rjmp	.+224    	; 0x118c <poll_buttons+0x1f0>
	{
		if(rit_enable == FALSE)
    10ac:	80 91 e4 01 	lds	r24, 0x01E4
    10b0:	88 23       	and	r24, r24
    10b2:	b9 f5       	brne	.+110    	; 0x1122 <poll_buttons+0x186>
		{
			RIT_LED_DDR |= _BV(RIT_LED);
    10b4:	87 e2       	ldi	r24, 0x27	; 39
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	27 e2       	ldi	r18, 0x27	; 39
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	f9 01       	movw	r30, r18
    10be:	20 81       	ld	r18, Z
    10c0:	22 60       	ori	r18, 0x02	; 2
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 83       	st	Z, r18
			RIT_LED_PORT |= _BV(RIT_LED);
    10c6:	88 e2       	ldi	r24, 0x28	; 40
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	28 e2       	ldi	r18, 0x28	; 40
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	f9 01       	movw	r30, r18
    10d0:	20 81       	ld	r18, Z
    10d2:	22 60       	ori	r18, 0x02	; 2
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 83       	st	Z, r18
			rit_enable = TRUE;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 e4 01 	sts	0x01E4, r24
			dds_rit_freq_word = dds_freq_word;
    10de:	80 91 a8 01 	lds	r24, 0x01A8
    10e2:	90 91 a9 01 	lds	r25, 0x01A9
    10e6:	a0 91 aa 01 	lds	r26, 0x01AA
    10ea:	b0 91 ab 01 	lds	r27, 0x01AB
    10ee:	80 93 b8 01 	sts	0x01B8, r24
    10f2:	90 93 b9 01 	sts	0x01B9, r25
    10f6:	a0 93 ba 01 	sts	0x01BA, r26
    10fa:	b0 93 bb 01 	sts	0x01BB, r27
			tune_dds(dds_rit_freq_word, REG_1, FALSE);
    10fe:	80 91 b8 01 	lds	r24, 0x01B8
    1102:	90 91 b9 01 	lds	r25, 0x01B9
    1106:	a0 91 ba 01 	lds	r26, 0x01BA
    110a:	b0 91 bb 01 	lds	r27, 0x01BB
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	0e 94 c2 09 	call	0x1384	; 0x1384 <tune_dds>
			debounce(TRUE);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>
    1120:	35 c0       	rjmp	.+106    	; 0x118c <poll_buttons+0x1f0>
		}
		else
		{

			RIT_LED_DDR &= ~(_BV(RIT_LED));
    1122:	87 e2       	ldi	r24, 0x27	; 39
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	27 e2       	ldi	r18, 0x27	; 39
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	f9 01       	movw	r30, r18
    112c:	20 81       	ld	r18, Z
    112e:	2d 7f       	andi	r18, 0xFD	; 253
    1130:	fc 01       	movw	r30, r24
    1132:	20 83       	st	Z, r18
			RIT_LED_PORT &= ~(_BV(RIT_LED));
    1134:	88 e2       	ldi	r24, 0x28	; 40
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	28 e2       	ldi	r18, 0x28	; 40
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	f9 01       	movw	r30, r18
    113e:	20 81       	ld	r18, Z
    1140:	2d 7f       	andi	r18, 0xFD	; 253
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
			rit_enable = FALSE;
    1146:	10 92 e4 01 	sts	0x01E4, r1
			dds_freq_word = dds_rit_freq_word;
    114a:	80 91 b8 01 	lds	r24, 0x01B8
    114e:	90 91 b9 01 	lds	r25, 0x01B9
    1152:	a0 91 ba 01 	lds	r26, 0x01BA
    1156:	b0 91 bb 01 	lds	r27, 0x01BB
    115a:	80 93 a8 01 	sts	0x01A8, r24
    115e:	90 93 a9 01 	sts	0x01A9, r25
    1162:	a0 93 aa 01 	sts	0x01AA, r26
    1166:	b0 93 ab 01 	sts	0x01AB, r27
			tune_dds(dds_freq_word, REG_0, FALSE);
    116a:	80 91 a8 01 	lds	r24, 0x01A8
    116e:	90 91 a9 01 	lds	r25, 0x01A9
    1172:	a0 91 aa 01 	lds	r26, 0x01AA
    1176:	b0 91 ab 01 	lds	r27, 0x01AB
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	0e 94 c2 09 	call	0x1384	; 0x1384 <tune_dds>
			debounce(TRUE);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>
		}
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    118c:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    118e:	80 91 63 01 	lds	r24, 0x0163
    1192:	88 23       	and	r24, r24
    1194:	19 f0       	breq	.+6      	; 0x119c <poll_buttons+0x200>
		cur_enc_state += 0x02;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	8e 5f       	subi	r24, 0xFE	; 254
    119a:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    119c:	80 91 e3 01 	lds	r24, 0x01E3
    11a0:	88 23       	and	r24, r24
    11a2:	19 f0       	breq	.+6      	; 0x11aa <poll_buttons+0x20e>
		cur_enc_state += 0x01;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    11aa:	80 91 4a 01 	lds	r24, 0x014A
    11ae:	99 81       	ldd	r25, Y+1	; 0x01
    11b0:	98 17       	cp	r25, r24
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <poll_buttons+0x21a>
    11b4:	dc c0       	rjmp	.+440    	; 0x136e <poll_buttons+0x3d2>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    11b6:	80 91 4a 01 	lds	r24, 0x014A
    11ba:	86 95       	lsr	r24
    11bc:	81 70       	andi	r24, 0x01	; 1
    11be:	80 93 4a 01 	sts	0x014A, r24

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    11c2:	80 91 4a 01 	lds	r24, 0x014A
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	82 27       	eor	r24, r18
    11d6:	93 27       	eor	r25, r19
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <poll_buttons+0x244>
    11de:	68 c0       	rjmp	.+208    	; 0x12b0 <poll_buttons+0x314>
		{
			if(tune_freq > LOWER_FREQ_LIMIT)
    11e0:	80 91 d4 01 	lds	r24, 0x01D4
    11e4:	90 91 d5 01 	lds	r25, 0x01D5
    11e8:	a0 91 d6 01 	lds	r26, 0x01D6
    11ec:	b0 91 d7 01 	lds	r27, 0x01D7
    11f0:	81 38       	cpi	r24, 0x81	; 129
    11f2:	ff e9       	ldi	r31, 0x9F	; 159
    11f4:	9f 07       	cpc	r25, r31
    11f6:	f5 ed       	ldi	r31, 0xD5	; 213
    11f8:	af 07       	cpc	r26, r31
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	bf 07       	cpc	r27, r31
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <poll_buttons+0x266>
    1200:	4c c0       	rjmp	.+152    	; 0x129a <poll_buttons+0x2fe>
			{
				dds_freq_word -= tune_step;
    1202:	20 91 a8 01 	lds	r18, 0x01A8
    1206:	30 91 a9 01 	lds	r19, 0x01A9
    120a:	40 91 aa 01 	lds	r20, 0x01AA
    120e:	50 91 ab 01 	lds	r21, 0x01AB
    1212:	80 91 07 01 	lds	r24, 0x0107
    1216:	90 91 08 01 	lds	r25, 0x0108
    121a:	cc 01       	movw	r24, r24
    121c:	a0 e0       	ldi	r26, 0x00	; 0
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	79 01       	movw	r14, r18
    1222:	8a 01       	movw	r16, r20
    1224:	e8 1a       	sub	r14, r24
    1226:	f9 0a       	sbc	r15, r25
    1228:	0a 0b       	sbc	r16, r26
    122a:	1b 0b       	sbc	r17, r27
    122c:	d8 01       	movw	r26, r16
    122e:	c7 01       	movw	r24, r14
    1230:	80 93 a8 01 	sts	0x01A8, r24
    1234:	90 93 a9 01 	sts	0x01A9, r25
    1238:	a0 93 aa 01 	sts	0x01AA, r26
    123c:	b0 93 ab 01 	sts	0x01AB, r27
				tune_freq -= tune_freq_step;
    1240:	20 91 d4 01 	lds	r18, 0x01D4
    1244:	30 91 d5 01 	lds	r19, 0x01D5
    1248:	40 91 d6 01 	lds	r20, 0x01D6
    124c:	50 91 d7 01 	lds	r21, 0x01D7
    1250:	80 91 09 01 	lds	r24, 0x0109
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	79 01       	movw	r14, r18
    125e:	8a 01       	movw	r16, r20
    1260:	e8 1a       	sub	r14, r24
    1262:	f9 0a       	sbc	r15, r25
    1264:	0a 0b       	sbc	r16, r26
    1266:	1b 0b       	sbc	r17, r27
    1268:	d8 01       	movw	r26, r16
    126a:	c7 01       	movw	r24, r14
    126c:	80 93 d4 01 	sts	0x01D4, r24
    1270:	90 93 d5 01 	sts	0x01D5, r25
    1274:	a0 93 d6 01 	sts	0x01D6, r26
    1278:	b0 93 d7 01 	sts	0x01D7, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    127c:	80 91 a8 01 	lds	r24, 0x01A8
    1280:	90 91 a9 01 	lds	r25, 0x01A9
    1284:	a0 91 aa 01 	lds	r26, 0x01AA
    1288:	b0 91 ab 01 	lds	r27, 0x01AB
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	0e 94 c2 09 	call	0x1384	; 0x1384 <tune_dds>
    1298:	6a c0       	rjmp	.+212    	; 0x136e <poll_buttons+0x3d2>
			}
			else
			{
				announce("L", ST_HIGH, 23);
    129a:	8d e1       	ldi	r24, 0x1D	; 29
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	64 e8       	ldi	r22, 0x84	; 132
    12a0:	73 e0       	ldi	r23, 0x03	; 3
    12a2:	47 e1       	ldi	r20, 0x17	; 23
    12a4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
				debounce(TRUE);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>
    12ae:	5f c0       	rjmp	.+190    	; 0x136e <poll_buttons+0x3d2>
			}
		}
		else
		{
			if(tune_freq < UPPER_FREQ_LIMIT)
    12b0:	80 91 d4 01 	lds	r24, 0x01D4
    12b4:	90 91 d5 01 	lds	r25, 0x01D5
    12b8:	a0 91 d6 01 	lds	r26, 0x01D6
    12bc:	b0 91 d7 01 	lds	r27, 0x01D7
    12c0:	80 3b       	cpi	r24, 0xB0	; 176
    12c2:	06 ef       	ldi	r16, 0xF6	; 246
    12c4:	90 07       	cpc	r25, r16
    12c6:	0a ed       	ldi	r16, 0xDA	; 218
    12c8:	a0 07       	cpc	r26, r16
    12ca:	00 e0       	ldi	r16, 0x00	; 0
    12cc:	b0 07       	cpc	r27, r16
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <poll_buttons+0x336>
    12d0:	44 c0       	rjmp	.+136    	; 0x135a <poll_buttons+0x3be>
			{
				dds_freq_word += tune_step;
    12d2:	80 91 07 01 	lds	r24, 0x0107
    12d6:	90 91 08 01 	lds	r25, 0x0108
    12da:	9c 01       	movw	r18, r24
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	80 91 a8 01 	lds	r24, 0x01A8
    12e4:	90 91 a9 01 	lds	r25, 0x01A9
    12e8:	a0 91 aa 01 	lds	r26, 0x01AA
    12ec:	b0 91 ab 01 	lds	r27, 0x01AB
    12f0:	82 0f       	add	r24, r18
    12f2:	93 1f       	adc	r25, r19
    12f4:	a4 1f       	adc	r26, r20
    12f6:	b5 1f       	adc	r27, r21
    12f8:	80 93 a8 01 	sts	0x01A8, r24
    12fc:	90 93 a9 01 	sts	0x01A9, r25
    1300:	a0 93 aa 01 	sts	0x01AA, r26
    1304:	b0 93 ab 01 	sts	0x01AB, r27
				tune_freq += tune_freq_step;
    1308:	80 91 09 01 	lds	r24, 0x0109
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	80 91 d4 01 	lds	r24, 0x01D4
    1318:	90 91 d5 01 	lds	r25, 0x01D5
    131c:	a0 91 d6 01 	lds	r26, 0x01D6
    1320:	b0 91 d7 01 	lds	r27, 0x01D7
    1324:	82 0f       	add	r24, r18
    1326:	93 1f       	adc	r25, r19
    1328:	a4 1f       	adc	r26, r20
    132a:	b5 1f       	adc	r27, r21
    132c:	80 93 d4 01 	sts	0x01D4, r24
    1330:	90 93 d5 01 	sts	0x01D5, r25
    1334:	a0 93 d6 01 	sts	0x01D6, r26
    1338:	b0 93 d7 01 	sts	0x01D7, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    133c:	80 91 a8 01 	lds	r24, 0x01A8
    1340:	90 91 a9 01 	lds	r25, 0x01A9
    1344:	a0 91 aa 01 	lds	r26, 0x01AA
    1348:	b0 91 ab 01 	lds	r27, 0x01AB
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	0e 94 c2 09 	call	0x1384	; 0x1384 <tune_dds>
    1358:	0a c0       	rjmp	.+20     	; 0x136e <poll_buttons+0x3d2>
			}
			else
			{
				announce("U", ST_HIGH, 23);
    135a:	8f e1       	ldi	r24, 0x1F	; 31
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	64 e8       	ldi	r22, 0x84	; 132
    1360:	73 e0       	ldi	r23, 0x03	; 3
    1362:	47 e1       	ldi	r20, 0x17	; 23
    1364:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
				debounce(TRUE);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>
				announce("U", ST_HIGH, 23);
				*/
		}
	}

	prev_enc_state = cur_enc_state;
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	80 93 4a 01 	sts	0x014A, r24
}
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	08 95       	ret

00001384 <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg, enum BOOL init)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	2c 97       	sbiw	r28, 0x0c	; 12
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	6f 83       	std	Y+7, r22	; 0x07
    139a:	78 87       	std	Y+8, r23	; 0x08
    139c:	89 87       	std	Y+9, r24	; 0x09
    139e:	9a 87       	std	Y+10, r25	; 0x0a
    13a0:	4b 87       	std	Y+11, r20	; 0x0b
    13a2:	2c 87       	std	Y+12, r18	; 0x0c
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    13a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	29 f4       	brne	.+10     	; 0x13b4 <tune_dds+0x30>
		freq_reg = 0x8000;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e8       	ldi	r25, 0x80	; 128
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <tune_dds+0x38>
	else
		freq_reg = 0x4000;
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e4       	ldi	r25, 0x40	; 64
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    13bc:	8f 81       	ldd	r24, Y+7	; 0x07
    13be:	98 85       	ldd	r25, Y+8	; 0x08
    13c0:	9c 01       	movw	r18, r24
    13c2:	3f 73       	andi	r19, 0x3F	; 63
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	a9 85       	ldd	r26, Y+9	; 0x09
    13d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    13d8:	07 2e       	mov	r0, r23
    13da:	7e e0       	ldi	r23, 0x0E	; 14
    13dc:	b6 95       	lsr	r27
    13de:	a7 95       	ror	r26
    13e0:	97 95       	ror	r25
    13e2:	87 95       	ror	r24
    13e4:	7a 95       	dec	r23
    13e6:	d1 f7       	brne	.-12     	; 0x13dc <tune_dds+0x58>
    13e8:	70 2d       	mov	r23, r0
    13ea:	9c 01       	movw	r18, r24
    13ec:	3f 73       	andi	r19, 0x3F	; 63
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05

	if(init == TRUE)
    13fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	21 f4       	brne	.+8      	; 0x1408 <tune_dds+0x84>
		send_dds_word(0x2100);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	91 e2       	ldi	r25, 0x21	; 33
    1404:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_dds_word>

	if(init == TRUE)
    1418:	8c 85       	ldd	r24, Y+12	; 0x0c
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	41 f4       	brne	.+16     	; 0x142e <tune_dds+0xaa>
	{
		// Send phase
		send_dds_word(0xC000);
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 ec       	ldi	r25, 0xC0	; 192
    1422:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_dds_word>

		// Exit reset
		send_dds_word(0x2000);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e2       	ldi	r25, 0x20	; 32
    142a:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_dds_word>
	}
}
    142e:	2c 96       	adiw	r28, 0x0c	; 12
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <send_dds_word>:
	send_dds_word(0x2000);
}
*/

void send_dds_word(uint16_t dds_word)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <send_dds_word+0x6>
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    144e:	85 e2       	ldi	r24, 0x25	; 37
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	25 e2       	ldi	r18, 0x25	; 37
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	f9 01       	movw	r30, r18
    1458:	20 81       	ld	r18, Z
    145a:	20 62       	ori	r18, 0x20	; 32
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    1460:	85 e2       	ldi	r24, 0x25	; 37
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	25 e2       	ldi	r18, 0x25	; 37
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	f9 01       	movw	r30, r18
    146a:	20 81       	ld	r18, Z
    146c:	2d 7f       	andi	r18, 0xFD	; 253
    146e:	fc 01       	movw	r30, r24
    1470:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    1472:	8e e4       	ldi	r24, 0x4E	; 78
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	29 81       	ldd	r18, Y+1	; 0x01
    1478:	3a 81       	ldd	r19, Y+2	; 0x02
    147a:	23 2f       	mov	r18, r19
    147c:	33 27       	eor	r19, r19
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1482:	00 00       	nop
    1484:	8d e4       	ldi	r24, 0x4D	; 77
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	fc 01       	movw	r30, r24
    148a:	80 81       	ld	r24, Z
    148c:	88 23       	and	r24, r24
    148e:	d4 f7       	brge	.-12     	; 0x1484 <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    1490:	8e e4       	ldi	r24, 0x4E	; 78
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	29 81       	ldd	r18, Y+1	; 0x01
    1496:	fc 01       	movw	r30, r24
    1498:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    149a:	00 00       	nop
    149c:	8d e4       	ldi	r24, 0x4D	; 77
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	fc 01       	movw	r30, r24
    14a2:	80 81       	ld	r24, Z
    14a4:	88 23       	and	r24, r24
    14a6:	d4 f7       	brge	.-12     	; 0x149c <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    14a8:	85 e2       	ldi	r24, 0x25	; 37
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	25 e2       	ldi	r18, 0x25	; 37
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	f9 01       	movw	r30, r18
    14b2:	20 81       	ld	r18, Z
    14b4:	22 60       	ori	r18, 0x02	; 2
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	29 f4       	brne	.+10     	; 0x14e0 <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	98 e2       	ldi	r25, 0x28	; 40
    14da:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_dds_word>
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e2       	ldi	r25, 0x20	; 32
    14e4:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_dds_word>
}
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <set_st_freq+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <set_st_freq+0x8>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	69 83       	std	Y+1, r22	; 0x01
    14fe:	7a 83       	std	Y+2, r23	; 0x02
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	ab 81       	ldd	r26, Y+3	; 0x03
    150a:	bc 81       	ldd	r27, Y+4	; 0x04
    150c:	23 e9       	ldi	r18, 0x93	; 147
    150e:	38 e1       	ldi	r19, 0x18	; 24
    1510:	44 e0       	ldi	r20, 0x04	; 4
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	0e 94 60 18 	call	0x30c0	; 0x30c0 <__mulsi3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	80 93 ac 01 	sts	0x01AC, r24
    1524:	90 93 ad 01 	sts	0x01AD, r25
    1528:	a0 93 ae 01 	sts	0x01AE, r26
    152c:	b0 93 af 01 	sts	0x01AF, r27
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <main>:

int main(void)
{
    153e:	1f 93       	push	r17
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	2d 97       	sbiw	r28, 0x0d	; 13
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    1554:	89 e2       	ldi	r24, 0x29	; 41
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 c8 18 	call	0x3190	; 0x3190 <malloc>
    155c:	90 93 de 01 	sts	0x01DE, r25
    1560:	80 93 dd 01 	sts	0x01DD, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    1564:	80 91 dd 01 	lds	r24, 0x01DD
    1568:	90 91 de 01 	lds	r25, 0x01DE
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	49 e2       	ldi	r20, 0x29	; 41
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	0e 94 04 1a 	call	0x3408	; 0x3408 <memset>
	cur_char_p = announce_buffer;
    1578:	80 91 dd 01 	lds	r24, 0x01DD
    157c:	90 91 de 01 	lds	r25, 0x01DE
    1580:	90 93 3b 01 	sts	0x013B, r25
    1584:	80 93 3a 01 	sts	0x013A, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    1588:	89 e2       	ldi	r24, 0x29	; 41
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 c8 18 	call	0x3190	; 0x3190 <malloc>
    1590:	90 93 3d 01 	sts	0x013D, r25
    1594:	80 93 3c 01 	sts	0x013C, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    1598:	80 91 3c 01 	lds	r24, 0x013C
    159c:	90 91 3d 01 	lds	r25, 0x013D
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	49 e2       	ldi	r20, 0x29	; 41
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	0e 94 04 1a 	call	0x3408	; 0x3408 <memset>

	init();
    15ac:	0e 94 4b 02 	call	0x496	; 0x496 <init>

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <main+0x82>
		debounce(FALSE);
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);

	init();

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	8f 5f       	subi	r24, 0xFF	; 255
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	8f 30       	cpi	r24, 0x0F	; 15
    15c4:	b8 f3       	brcs	.-18     	; 0x15b4 <main+0x76>
		debounce(FALSE);
	if(eeprom_read_byte(&ee_keyer) == FALSE)
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 36 1c 	call	0x386c	; 0x386c <__eerd_byte_m168>
    15ce:	88 23       	and	r24, r24
    15d0:	21 f4       	brne	.+8      	; 0x15da <main+0x9c>
		cur_mode = SK;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 9e 01 	sts	0x019E, r24
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <main+0xa0>
	else
		cur_mode = KEYER;
    15da:	10 92 9e 01 	sts	0x019E, r1

	if((dah_active == TRUE) && (dit_active == FALSE))
    15de:	80 91 bc 01 	lds	r24, 0x01BC
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	39 f4       	brne	.+14     	; 0x15f4 <main+0xb6>
    15e6:	80 91 d2 01 	lds	r24, 0x01D2
    15ea:	88 23       	and	r24, r24
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <main+0xb6>
		cur_mode = SK;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 93 9e 01 	sts	0x019E, r24

	announce("CC", st_freq, 15);
    15f4:	20 91 b6 01 	lds	r18, 0x01B6
    15f8:	30 91 b7 01 	lds	r19, 0x01B7
    15fc:	81 e2       	ldi	r24, 0x21	; 33
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	b9 01       	movw	r22, r18
    1602:	4f e0       	ldi	r20, 0x0F	; 15
    1604:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    1608:	f8 94       	cli
		cur_timer = timer;
    160a:	80 91 6a 01 	lds	r24, 0x016A
    160e:	90 91 6b 01 	lds	r25, 0x016B
    1612:	a0 91 6c 01 	lds	r26, 0x016C
    1616:	b0 91 6d 01 	lds	r27, 0x016D
    161a:	80 93 64 01 	sts	0x0164, r24
    161e:	90 93 65 01 	sts	0x0165, r25
    1622:	a0 93 66 01 	sts	0x0166, r26
    1626:	b0 93 67 01 	sts	0x0167, r27
		sei();
    162a:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    162c:	80 91 9e 01 	lds	r24, 0x019E
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <main+0xfe>
    163a:	a5 c7       	rjmp	.+3914   	; 0x2586 <main+0x1048>
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	91 05       	cpc	r25, r1
    1640:	64 f4       	brge	.+24     	; 0x165a <main+0x11c>
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	d1 f0       	breq	.+52     	; 0x167c <main+0x13e>
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	91 05       	cpc	r25, r1
    164c:	0c f0       	brlt	.+2      	; 0x1650 <main+0x112>
    164e:	e9 c5       	rjmp	.+3026   	; 0x2222 <main+0xce4>
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	09 f4       	brne	.+2      	; 0x1656 <main+0x118>
    1654:	5f c1       	rjmp	.+702    	; 0x1914 <main+0x3d6>
    1656:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <main+0x1b7c>
    165a:	85 30       	cpi	r24, 0x05	; 5
    165c:	91 05       	cpc	r25, r1
    165e:	11 f4       	brne	.+4      	; 0x1664 <main+0x126>
    1660:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <main+0x1528>
    1664:	85 30       	cpi	r24, 0x05	; 5
    1666:	91 05       	cpc	r25, r1
    1668:	14 f4       	brge	.+4      	; 0x166e <main+0x130>
    166a:	0c 94 83 13 	jmp	0x2706	; 0x2706 <main+0x11c8>
    166e:	86 30       	cpi	r24, 0x06	; 6
    1670:	91 05       	cpc	r25, r1
    1672:	11 f4       	brne	.+4      	; 0x1678 <main+0x13a>
    1674:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <main+0x1698>
    1678:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <main+0x1b7c>
		{
		case SK:
			default_mode = SK;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 69 01 	sts	0x0169, r24
			poll_buttons();
    1682:	0e 94 ce 07 	call	0xf9c	; 0xf9c <poll_buttons>

			switch(cur_state)
    1686:	80 91 c0 01 	lds	r24, 0x01C0
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	87 30       	cpi	r24, 0x07	; 7
    1690:	91 05       	cpc	r25, r1
    1692:	09 f4       	brne	.+2      	; 0x1696 <main+0x158>
    1694:	43 c0       	rjmp	.+134    	; 0x171c <main+0x1de>
    1696:	8c 30       	cpi	r24, 0x0C	; 12
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <main+0x160>
    169c:	a7 c0       	rjmp	.+334    	; 0x17ec <main+0x2ae>
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <main+0x168>
    16a4:	e6 c0       	rjmp	.+460    	; 0x1872 <main+0x334>
			{
			case IDLE:
				key_down = FALSE;
    16a6:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    16aa:	10 92 36 01 	sts	0x0136, r1
				mute_on = FALSE;
    16ae:	10 92 37 01 	sts	0x0137, r1
					mute_on = FALSE;
				else
					mute_on = TRUE;
					*/

				if(dit_active == TRUE)
    16b2:	80 91 d2 01 	lds	r24, 0x01D2
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	69 f5       	brne	.+90     	; 0x1714 <main+0x1d6>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    16ba:	80 91 64 01 	lds	r24, 0x0164
    16be:	90 91 65 01 	lds	r25, 0x0165
    16c2:	a0 91 66 01 	lds	r26, 0x0166
    16c6:	b0 91 67 01 	lds	r27, 0x0167
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	a1 1d       	adc	r26, r1
    16ce:	b1 1d       	adc	r27, r1
    16d0:	80 93 a4 01 	sts	0x01A4, r24
    16d4:	90 93 a5 01 	sts	0x01A5, r25
    16d8:	a0 93 a6 01 	sts	0x01A6, r26
    16dc:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = UINT32_MAX;
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	9f ef       	ldi	r25, 0xFF	; 255
    16e4:	dc 01       	movw	r26, r24
    16e6:	80 93 df 01 	sts	0x01DF, r24
    16ea:	90 93 e0 01 	sts	0x01E0, r25
    16ee:	a0 93 e1 01 	sts	0x01E1, r26
    16f2:	b0 93 e2 01 	sts	0x01E2, r27
					cur_state_end = UINT32_MAX;
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	9f ef       	ldi	r25, 0xFF	; 255
    16fa:	dc 01       	movw	r26, r24
    16fc:	80 93 ca 01 	sts	0x01CA, r24
    1700:	90 93 cb 01 	sts	0x01CB, r25
    1704:	a0 93 cc 01 	sts	0x01CC, r26
    1708:	b0 93 cd 01 	sts	0x01CD, r27
					cur_state = KEYDOWN;
    170c:	87 e0       	ldi	r24, 0x07	; 7
    170e:	80 93 c0 01 	sts	0x01C0, r24
				}
				else
				{
					cur_state = IDLE;
				}
				break;
    1712:	b2 c0       	rjmp	.+356    	; 0x1878 <main+0x33a>
					cur_state_end = UINT32_MAX;
					cur_state = KEYDOWN;
				}
				else
				{
					cur_state = IDLE;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	80 93 c0 01 	sts	0x01C0, r24
				}
				break;
    171a:	ae c0       	rjmp	.+348    	; 0x1878 <main+0x33a>

			case KEYDOWN:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    171c:	80 91 d4 01 	lds	r24, 0x01D4
    1720:	90 91 d5 01 	lds	r25, 0x01D5
    1724:	a0 91 d6 01 	lds	r26, 0x01D6
    1728:	b0 91 d7 01 	lds	r27, 0x01D7
    172c:	81 3b       	cpi	r24, 0xB1	; 177
    172e:	26 ef       	ldi	r18, 0xF6	; 246
    1730:	92 07       	cpc	r25, r18
    1732:	2a ed       	ldi	r18, 0xDA	; 218
    1734:	a2 07       	cpc	r26, r18
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	b2 07       	cpc	r27, r18
    173a:	80 f4       	brcc	.+32     	; 0x175c <main+0x21e>
    173c:	80 91 d4 01 	lds	r24, 0x01D4
    1740:	90 91 d5 01 	lds	r25, 0x01D5
    1744:	a0 91 d6 01 	lds	r26, 0x01D6
    1748:	b0 91 d7 01 	lds	r27, 0x01D7
    174c:	80 38       	cpi	r24, 0x80	; 128
    174e:	ef e9       	ldi	r30, 0x9F	; 159
    1750:	9e 07       	cpc	r25, r30
    1752:	e5 ed       	ldi	r30, 0xD5	; 213
    1754:	ae 07       	cpc	r26, r30
    1756:	e0 e0       	ldi	r30, 0x00	; 0
    1758:	be 07       	cpc	r27, r30
    175a:	38 f4       	brcc	.+14     	; 0x176a <main+0x22c>
				{
					key_down = FALSE;
    175c:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    1760:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    1764:	10 92 37 01 	sts	0x0137, r1
    1768:	09 c0       	rjmp	.+18     	; 0x177c <main+0x23e>
				}
				else
				{
					key_down = TRUE;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	80 93 37 01 	sts	0x0137, r24
				}

				if(dit_active == FALSE)
    177c:	80 91 d2 01 	lds	r24, 0x01D2
    1780:	88 23       	and	r24, r24
    1782:	41 f5       	brne	.+80     	; 0x17d4 <main+0x296>
				{
					cur_state = EXIT;
    1784:	8c e0       	ldi	r24, 0x0C	; 12
    1786:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    178a:	80 91 64 01 	lds	r24, 0x0164
    178e:	90 91 65 01 	lds	r25, 0x0165
    1792:	a0 91 66 01 	lds	r26, 0x0166
    1796:	b0 91 67 01 	lds	r27, 0x0167
    179a:	8c 59       	subi	r24, 0x9C	; 156
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	af 4f       	sbci	r26, 0xFF	; 255
    17a0:	bf 4f       	sbci	r27, 0xFF	; 255
    17a2:	80 93 ca 01 	sts	0x01CA, r24
    17a6:	90 93 cb 01 	sts	0x01CB, r25
    17aa:	a0 93 cc 01 	sts	0x01CC, r26
    17ae:	b0 93 cd 01 	sts	0x01CD, r27
					tx_end = cur_timer;
    17b2:	80 91 64 01 	lds	r24, 0x0164
    17b6:	90 91 65 01 	lds	r25, 0x0165
    17ba:	a0 91 66 01 	lds	r26, 0x0166
    17be:	b0 91 67 01 	lds	r27, 0x0167
    17c2:	80 93 df 01 	sts	0x01DF, r24
    17c6:	90 93 e0 01 	sts	0x01E0, r25
    17ca:	a0 93 e1 01 	sts	0x01E1, r26
    17ce:	b0 93 e2 01 	sts	0x01E2, r27
				}
				else
					tx_end = UINT32_MAX;
				break;
    17d2:	52 c0       	rjmp	.+164    	; 0x1878 <main+0x33a>
					cur_state = EXIT;
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
					tx_end = cur_timer;
				}
				else
					tx_end = UINT32_MAX;
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	9f ef       	ldi	r25, 0xFF	; 255
    17d8:	dc 01       	movw	r26, r24
    17da:	80 93 df 01 	sts	0x01DF, r24
    17de:	90 93 e0 01 	sts	0x01E0, r25
    17e2:	a0 93 e1 01 	sts	0x01E1, r26
    17e6:	b0 93 e2 01 	sts	0x01E2, r27
				break;
    17ea:	46 c0       	rjmp	.+140    	; 0x1878 <main+0x33a>

			case EXIT:
				key_down = FALSE;
    17ec:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    17f0:	10 92 36 01 	sts	0x0136, r1

				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    17f4:	80 91 d4 01 	lds	r24, 0x01D4
    17f8:	90 91 d5 01 	lds	r25, 0x01D5
    17fc:	a0 91 d6 01 	lds	r26, 0x01D6
    1800:	b0 91 d7 01 	lds	r27, 0x01D7
    1804:	81 3b       	cpi	r24, 0xB1	; 177
    1806:	f6 ef       	ldi	r31, 0xF6	; 246
    1808:	9f 07       	cpc	r25, r31
    180a:	fa ed       	ldi	r31, 0xDA	; 218
    180c:	af 07       	cpc	r26, r31
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	bf 07       	cpc	r27, r31
    1812:	80 f4       	brcc	.+32     	; 0x1834 <main+0x2f6>
    1814:	80 91 d4 01 	lds	r24, 0x01D4
    1818:	90 91 d5 01 	lds	r25, 0x01D5
    181c:	a0 91 d6 01 	lds	r26, 0x01D6
    1820:	b0 91 d7 01 	lds	r27, 0x01D7
    1824:	80 38       	cpi	r24, 0x80	; 128
    1826:	2f e9       	ldi	r18, 0x9F	; 159
    1828:	92 07       	cpc	r25, r18
    182a:	25 ed       	ldi	r18, 0xD5	; 213
    182c:	a2 07       	cpc	r26, r18
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	b2 07       	cpc	r27, r18
    1832:	18 f4       	brcc	.+6      	; 0x183a <main+0x2fc>
					mute_on = FALSE;
    1834:	10 92 37 01 	sts	0x0137, r1
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <main+0x302>
				else
					mute_on = TRUE;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 37 01 	sts	0x0137, r24

				if(cur_timer >= cur_state_end)
    1840:	20 91 64 01 	lds	r18, 0x0164
    1844:	30 91 65 01 	lds	r19, 0x0165
    1848:	40 91 66 01 	lds	r20, 0x0166
    184c:	50 91 67 01 	lds	r21, 0x0167
    1850:	80 91 ca 01 	lds	r24, 0x01CA
    1854:	90 91 cb 01 	lds	r25, 0x01CB
    1858:	a0 91 cc 01 	lds	r26, 0x01CC
    185c:	b0 91 cd 01 	lds	r27, 0x01CD
    1860:	28 17       	cp	r18, r24
    1862:	39 07       	cpc	r19, r25
    1864:	4a 07       	cpc	r20, r26
    1866:	5b 07       	cpc	r21, r27
    1868:	30 f0       	brcs	.+12     	; 0x1876 <main+0x338>
					cur_state = IDLE;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 c0 01 	sts	0x01C0, r24
				break;
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <main+0x33a>

			default:
				break;
    1872:	00 00       	nop
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <main+0x33a>
				else
					mute_on = TRUE;

				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;
    1876:	00 00       	nop
			default:
				break;
			}

			// Go to sleep
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1878:	83 e5       	ldi	r24, 0x53	; 83
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	23 e5       	ldi	r18, 0x53	; 83
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	f9 01       	movw	r30, r18
    1882:	20 81       	ld	r18, Z
    1884:	21 7f       	andi	r18, 0xF1	; 241
    1886:	24 60       	ori	r18, 0x04	; 4
    1888:	fc 01       	movw	r30, r24
    188a:	20 83       	st	Z, r18
			cli();
    188c:	f8 94       	cli
			if((cur_mode == KEYER) && (cur_state == IDLE) && (cur_timer > sleep_timer))
    188e:	80 91 9e 01 	lds	r24, 0x019E
    1892:	88 23       	and	r24, r24
    1894:	09 f0       	breq	.+2      	; 0x1898 <main+0x35a>
    1896:	3b c0       	rjmp	.+118    	; 0x190e <main+0x3d0>
    1898:	80 91 c0 01 	lds	r24, 0x01C0
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	b9 f5       	brne	.+110    	; 0x190e <main+0x3d0>
    18a0:	20 91 64 01 	lds	r18, 0x0164
    18a4:	30 91 65 01 	lds	r19, 0x0165
    18a8:	40 91 66 01 	lds	r20, 0x0166
    18ac:	50 91 67 01 	lds	r21, 0x0167
    18b0:	80 91 c5 01 	lds	r24, 0x01C5
    18b4:	90 91 c6 01 	lds	r25, 0x01C6
    18b8:	a0 91 c7 01 	lds	r26, 0x01C7
    18bc:	b0 91 c8 01 	lds	r27, 0x01C8
    18c0:	82 17       	cp	r24, r18
    18c2:	93 07       	cpc	r25, r19
    18c4:	a4 07       	cpc	r26, r20
    18c6:	b5 07       	cpc	r27, r21
    18c8:	10 f5       	brcc	.+68     	; 0x190e <main+0x3d0>
			{
				MUTE_PORT &= ~(_BV(MUTE));
    18ca:	88 e2       	ldi	r24, 0x28	; 40
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	28 e2       	ldi	r18, 0x28	; 40
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	f9 01       	movw	r30, r18
    18d4:	20 81       	ld	r18, Z
    18d6:	2f 7d       	andi	r18, 0xDF	; 223
    18d8:	fc 01       	movw	r30, r24
    18da:	20 83       	st	Z, r18
				PCICR = _BV(PCIE2);
    18dc:	88 e6       	ldi	r24, 0x68	; 104
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	24 e0       	ldi	r18, 0x04	; 4
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 83       	st	Z, r18
				sleep_enable();
    18e6:	83 e5       	ldi	r24, 0x53	; 83
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	23 e5       	ldi	r18, 0x53	; 83
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	f9 01       	movw	r30, r18
    18f0:	20 81       	ld	r18, Z
    18f2:	21 60       	ori	r18, 0x01	; 1
    18f4:	fc 01       	movw	r30, r24
    18f6:	20 83       	st	Z, r18
				sei();
    18f8:	78 94       	sei
				sleep_cpu();
    18fa:	88 95       	sleep
				sleep_disable();
    18fc:	83 e5       	ldi	r24, 0x53	; 83
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	23 e5       	ldi	r18, 0x53	; 83
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	f9 01       	movw	r30, r18
    1906:	20 81       	ld	r18, Z
    1908:	2e 7f       	andi	r18, 0xFE	; 254
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18
			}
			sei();
    190e:	78 94       	sei

			break;
    1910:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <main+0x1b7e>

		case KEYER:
			default_mode = KEYER;
    1914:	10 92 69 01 	sts	0x0169, r1
			poll_buttons();
    1918:	0e 94 ce 07 	call	0xf9c	; 0xf9c <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    191c:	80 91 c0 01 	lds	r24, 0x01C0
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	91 05       	cpc	r25, r1
    1928:	09 f4       	brne	.+2      	; 0x192c <main+0x3ee>
    192a:	19 c2       	rjmp	.+1074   	; 0x1d5e <main+0x820>
    192c:	84 30       	cpi	r24, 0x04	; 4
    192e:	91 05       	cpc	r25, r1
    1930:	44 f4       	brge	.+16     	; 0x1942 <main+0x404>
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	91 05       	cpc	r25, r1
    1936:	71 f0       	breq	.+28     	; 0x1954 <main+0x416>
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	91 05       	cpc	r25, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <main+0x402>
    193e:	76 c1       	rjmp	.+748    	; 0x1c2c <main+0x6ee>

				sleep_timer = cur_timer + SLEEP_DELAY;
				break;

			default:
				break;
    1940:	23 c4       	rjmp	.+2118   	; 0x2188 <main+0xc4a>
		case KEYER:
			default_mode = KEYER;
			poll_buttons();

			// Handle KEYER state conditions
			switch(cur_state)
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	91 05       	cpc	r25, r1
    1946:	09 f4       	brne	.+2      	; 0x194a <main+0x40c>
    1948:	a3 c2       	rjmp	.+1350   	; 0x1e90 <main+0x952>
    194a:	8c 30       	cpi	r24, 0x0C	; 12
    194c:	91 05       	cpc	r25, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <main+0x414>
    1950:	e1 c3       	rjmp	.+1986   	; 0x2114 <main+0xbd6>

				sleep_timer = cur_timer + SLEEP_DELAY;
				break;

			default:
				break;
    1952:	1a c4       	rjmp	.+2100   	; 0x2188 <main+0xc4a>

			// Handle KEYER state conditions
			switch(cur_state)
			{
			case IDLE:
				key_down = FALSE;
    1954:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    1958:	10 92 36 01 	sts	0x0136, r1
				mute_on = FALSE;
    195c:	10 92 37 01 	sts	0x0137, r1
				mute_end = cur_timer;
    1960:	80 91 64 01 	lds	r24, 0x0164
    1964:	90 91 65 01 	lds	r25, 0x0165
    1968:	a0 91 66 01 	lds	r26, 0x0166
    196c:	b0 91 67 01 	lds	r27, 0x0167
    1970:	80 93 ce 01 	sts	0x01CE, r24
    1974:	90 93 cf 01 	sts	0x01CF, r25
    1978:	a0 93 d0 01 	sts	0x01D0, r26
    197c:	b0 93 d1 01 	sts	0x01D1, r27
					mute_on = FALSE;
				else
					mute_on = TRUE;
				*/
				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    1980:	80 91 d2 01 	lds	r24, 0x01D2
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	09 f0       	breq	.+2      	; 0x198a <main+0x44c>
    1988:	68 c0       	rjmp	.+208    	; 0x1a5a <main+0x51c>
    198a:	80 91 bc 01 	lds	r24, 0x01BC
    198e:	88 23       	and	r24, r24
    1990:	09 f0       	breq	.+2      	; 0x1994 <main+0x456>
    1992:	63 c0       	rjmp	.+198    	; 0x1a5a <main+0x51c>
				{
					prev_state = IDLE;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DIT;
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	80 93 c0 01 	sts	0x01C0, r24
					next_state = IDLE;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + dit_length;
    19a6:	80 91 6f 01 	lds	r24, 0x016F
    19aa:	90 91 70 01 	lds	r25, 0x0170
    19ae:	9c 01       	movw	r18, r24
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	80 91 64 01 	lds	r24, 0x0164
    19b8:	90 91 65 01 	lds	r25, 0x0165
    19bc:	a0 91 66 01 	lds	r26, 0x0166
    19c0:	b0 91 67 01 	lds	r27, 0x0167
    19c4:	82 0f       	add	r24, r18
    19c6:	93 1f       	adc	r25, r19
    19c8:	a4 1f       	adc	r26, r20
    19ca:	b5 1f       	adc	r27, r21
    19cc:	80 93 ca 01 	sts	0x01CA, r24
    19d0:	90 93 cb 01 	sts	0x01CB, r25
    19d4:	a0 93 cc 01 	sts	0x01CC, r26
    19d8:	b0 93 cd 01 	sts	0x01CD, r27
					tx_start = cur_timer + TX_ON_DELAY;
    19dc:	80 91 64 01 	lds	r24, 0x0164
    19e0:	90 91 65 01 	lds	r25, 0x0165
    19e4:	a0 91 66 01 	lds	r26, 0x0166
    19e8:	b0 91 67 01 	lds	r27, 0x0167
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	a1 1d       	adc	r26, r1
    19f0:	b1 1d       	adc	r27, r1
    19f2:	80 93 a4 01 	sts	0x01A4, r24
    19f6:	90 93 a5 01 	sts	0x01A5, r25
    19fa:	a0 93 a6 01 	sts	0x01A6, r26
    19fe:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1a02:	80 91 ca 01 	lds	r24, 0x01CA
    1a06:	90 91 cb 01 	lds	r25, 0x01CB
    1a0a:	a0 91 cc 01 	lds	r26, 0x01CC
    1a0e:	b0 91 cd 01 	lds	r27, 0x01CD
    1a12:	80 93 df 01 	sts	0x01DF, r24
    1a16:	90 93 e0 01 	sts	0x01E0, r25
    1a1a:	a0 93 e1 01 	sts	0x01E1, r26
    1a1e:	b0 93 e2 01 	sts	0x01E2, r27
					mute_start = cur_timer;
    1a22:	80 91 64 01 	lds	r24, 0x0164
    1a26:	90 91 65 01 	lds	r25, 0x0165
    1a2a:	a0 91 66 01 	lds	r26, 0x0166
    1a2e:	b0 91 67 01 	lds	r27, 0x0167
    1a32:	80 93 d9 01 	sts	0x01D9, r24
    1a36:	90 93 da 01 	sts	0x01DA, r25
    1a3a:	a0 93 db 01 	sts	0x01DB, r26
    1a3e:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = UINT32_MAX;
    1a42:	8f ef       	ldi	r24, 0xFF	; 255
    1a44:	9f ef       	ldi	r25, 0xFF	; 255
    1a46:	dc 01       	movw	r26, r24
    1a48:	80 93 ce 01 	sts	0x01CE, r24
    1a4c:	90 93 cf 01 	sts	0x01CF, r25
    1a50:	a0 93 d0 01 	sts	0x01D0, r26
    1a54:	b0 93 d1 01 	sts	0x01D1, r27
    1a58:	e8 c0       	rjmp	.+464    	; 0x1c2a <main+0x6ec>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    1a5a:	80 91 bc 01 	lds	r24, 0x01BC
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <main+0x526>
    1a62:	6d c0       	rjmp	.+218    	; 0x1b3e <main+0x600>
    1a64:	80 91 d2 01 	lds	r24, 0x01D2
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <main+0x530>
    1a6c:	68 c0       	rjmp	.+208    	; 0x1b3e <main+0x600>
				{
					prev_state = IDLE;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DAH;
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	80 93 c0 01 	sts	0x01C0, r24
					next_state = IDLE;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + (dit_length * 3);
    1a80:	20 91 6f 01 	lds	r18, 0x016F
    1a84:	30 91 70 01 	lds	r19, 0x0170
    1a88:	c9 01       	movw	r24, r18
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	82 0f       	add	r24, r18
    1a90:	93 1f       	adc	r25, r19
    1a92:	9c 01       	movw	r18, r24
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	80 91 64 01 	lds	r24, 0x0164
    1a9c:	90 91 65 01 	lds	r25, 0x0165
    1aa0:	a0 91 66 01 	lds	r26, 0x0166
    1aa4:	b0 91 67 01 	lds	r27, 0x0167
    1aa8:	82 0f       	add	r24, r18
    1aaa:	93 1f       	adc	r25, r19
    1aac:	a4 1f       	adc	r26, r20
    1aae:	b5 1f       	adc	r27, r21
    1ab0:	80 93 ca 01 	sts	0x01CA, r24
    1ab4:	90 93 cb 01 	sts	0x01CB, r25
    1ab8:	a0 93 cc 01 	sts	0x01CC, r26
    1abc:	b0 93 cd 01 	sts	0x01CD, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1ac0:	80 91 64 01 	lds	r24, 0x0164
    1ac4:	90 91 65 01 	lds	r25, 0x0165
    1ac8:	a0 91 66 01 	lds	r26, 0x0166
    1acc:	b0 91 67 01 	lds	r27, 0x0167
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	b1 1d       	adc	r27, r1
    1ad6:	80 93 a4 01 	sts	0x01A4, r24
    1ada:	90 93 a5 01 	sts	0x01A5, r25
    1ade:	a0 93 a6 01 	sts	0x01A6, r26
    1ae2:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1ae6:	80 91 ca 01 	lds	r24, 0x01CA
    1aea:	90 91 cb 01 	lds	r25, 0x01CB
    1aee:	a0 91 cc 01 	lds	r26, 0x01CC
    1af2:	b0 91 cd 01 	lds	r27, 0x01CD
    1af6:	80 93 df 01 	sts	0x01DF, r24
    1afa:	90 93 e0 01 	sts	0x01E0, r25
    1afe:	a0 93 e1 01 	sts	0x01E1, r26
    1b02:	b0 93 e2 01 	sts	0x01E2, r27
					mute_start = cur_timer;
    1b06:	80 91 64 01 	lds	r24, 0x0164
    1b0a:	90 91 65 01 	lds	r25, 0x0165
    1b0e:	a0 91 66 01 	lds	r26, 0x0166
    1b12:	b0 91 67 01 	lds	r27, 0x0167
    1b16:	80 93 d9 01 	sts	0x01D9, r24
    1b1a:	90 93 da 01 	sts	0x01DA, r25
    1b1e:	a0 93 db 01 	sts	0x01DB, r26
    1b22:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = UINT32_MAX;
    1b26:	8f ef       	ldi	r24, 0xFF	; 255
    1b28:	9f ef       	ldi	r25, 0xFF	; 255
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	80 93 ce 01 	sts	0x01CE, r24
    1b30:	90 93 cf 01 	sts	0x01CF, r25
    1b34:	a0 93 d0 01 	sts	0x01D0, r26
    1b38:	b0 93 d1 01 	sts	0x01D1, r27
    1b3c:	76 c0       	rjmp	.+236    	; 0x1c2a <main+0x6ec>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    1b3e:	80 91 d2 01 	lds	r24, 0x01D2
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <main+0x60a>
    1b46:	6d c0       	rjmp	.+218    	; 0x1c22 <main+0x6e4>
    1b48:	80 91 bc 01 	lds	r24, 0x01BC
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <main+0x614>
    1b50:	68 c0       	rjmp	.+208    	; 0x1c22 <main+0x6e4>
    1b52:	80 91 a3 01 	lds	r24, 0x01A3
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <main+0x61e>
    1b5a:	63 c0       	rjmp	.+198    	; 0x1c22 <main+0x6e4>
				{
					prev_state = IDLE;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DIT;
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	80 93 c0 01 	sts	0x01C0, r24
					next_state = DAH;
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + dit_length;
    1b6e:	80 91 6f 01 	lds	r24, 0x016F
    1b72:	90 91 70 01 	lds	r25, 0x0170
    1b76:	9c 01       	movw	r18, r24
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	80 91 64 01 	lds	r24, 0x0164
    1b80:	90 91 65 01 	lds	r25, 0x0165
    1b84:	a0 91 66 01 	lds	r26, 0x0166
    1b88:	b0 91 67 01 	lds	r27, 0x0167
    1b8c:	82 0f       	add	r24, r18
    1b8e:	93 1f       	adc	r25, r19
    1b90:	a4 1f       	adc	r26, r20
    1b92:	b5 1f       	adc	r27, r21
    1b94:	80 93 ca 01 	sts	0x01CA, r24
    1b98:	90 93 cb 01 	sts	0x01CB, r25
    1b9c:	a0 93 cc 01 	sts	0x01CC, r26
    1ba0:	b0 93 cd 01 	sts	0x01CD, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1ba4:	80 91 64 01 	lds	r24, 0x0164
    1ba8:	90 91 65 01 	lds	r25, 0x0165
    1bac:	a0 91 66 01 	lds	r26, 0x0166
    1bb0:	b0 91 67 01 	lds	r27, 0x0167
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	a1 1d       	adc	r26, r1
    1bb8:	b1 1d       	adc	r27, r1
    1bba:	80 93 a4 01 	sts	0x01A4, r24
    1bbe:	90 93 a5 01 	sts	0x01A5, r25
    1bc2:	a0 93 a6 01 	sts	0x01A6, r26
    1bc6:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1bca:	80 91 ca 01 	lds	r24, 0x01CA
    1bce:	90 91 cb 01 	lds	r25, 0x01CB
    1bd2:	a0 91 cc 01 	lds	r26, 0x01CC
    1bd6:	b0 91 cd 01 	lds	r27, 0x01CD
    1bda:	80 93 df 01 	sts	0x01DF, r24
    1bde:	90 93 e0 01 	sts	0x01E0, r25
    1be2:	a0 93 e1 01 	sts	0x01E1, r26
    1be6:	b0 93 e2 01 	sts	0x01E2, r27
					mute_start = cur_timer;
    1bea:	80 91 64 01 	lds	r24, 0x0164
    1bee:	90 91 65 01 	lds	r25, 0x0165
    1bf2:	a0 91 66 01 	lds	r26, 0x0166
    1bf6:	b0 91 67 01 	lds	r27, 0x0167
    1bfa:	80 93 d9 01 	sts	0x01D9, r24
    1bfe:	90 93 da 01 	sts	0x01DA, r25
    1c02:	a0 93 db 01 	sts	0x01DB, r26
    1c06:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = UINT32_MAX;
    1c0a:	8f ef       	ldi	r24, 0xFF	; 255
    1c0c:	9f ef       	ldi	r25, 0xFF	; 255
    1c0e:	dc 01       	movw	r26, r24
    1c10:	80 93 ce 01 	sts	0x01CE, r24
    1c14:	90 93 cf 01 	sts	0x01CF, r25
    1c18:	a0 93 d0 01 	sts	0x01D0, r26
    1c1c:	b0 93 d1 01 	sts	0x01D1, r27
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <main+0x6ec>
				}
				else
				{
					cur_state = IDLE;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	80 93 c0 01 	sts	0x01C0, r24
				}

				break;
    1c28:	af c2       	rjmp	.+1374   	; 0x2188 <main+0xc4a>
    1c2a:	ae c2       	rjmp	.+1372   	; 0x2188 <main+0xc4a>

			case DIT:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1c2c:	80 91 d4 01 	lds	r24, 0x01D4
    1c30:	90 91 d5 01 	lds	r25, 0x01D5
    1c34:	a0 91 d6 01 	lds	r26, 0x01D6
    1c38:	b0 91 d7 01 	lds	r27, 0x01D7
    1c3c:	81 3b       	cpi	r24, 0xB1	; 177
    1c3e:	f6 ef       	ldi	r31, 0xF6	; 246
    1c40:	9f 07       	cpc	r25, r31
    1c42:	fa ed       	ldi	r31, 0xDA	; 218
    1c44:	af 07       	cpc	r26, r31
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	bf 07       	cpc	r27, r31
    1c4a:	80 f4       	brcc	.+32     	; 0x1c6c <main+0x72e>
    1c4c:	80 91 d4 01 	lds	r24, 0x01D4
    1c50:	90 91 d5 01 	lds	r25, 0x01D5
    1c54:	a0 91 d6 01 	lds	r26, 0x01D6
    1c58:	b0 91 d7 01 	lds	r27, 0x01D7
    1c5c:	80 38       	cpi	r24, 0x80	; 128
    1c5e:	2f e9       	ldi	r18, 0x9F	; 159
    1c60:	92 07       	cpc	r25, r18
    1c62:	25 ed       	ldi	r18, 0xD5	; 213
    1c64:	a2 07       	cpc	r26, r18
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	b2 07       	cpc	r27, r18
    1c6a:	38 f4       	brcc	.+14     	; 0x1c7a <main+0x73c>
				{
					key_down = FALSE;
    1c6c:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    1c70:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    1c74:	10 92 37 01 	sts	0x0137, r1
    1c78:	09 c0       	rjmp	.+18     	; 0x1c8c <main+0x74e>
				}
				else
				{
					key_down = TRUE;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 37 01 	sts	0x0137, r24
				}

				if(cur_timer > cur_state_end)
    1c8c:	20 91 64 01 	lds	r18, 0x0164
    1c90:	30 91 65 01 	lds	r19, 0x0165
    1c94:	40 91 66 01 	lds	r20, 0x0166
    1c98:	50 91 67 01 	lds	r21, 0x0167
    1c9c:	80 91 ca 01 	lds	r24, 0x01CA
    1ca0:	90 91 cb 01 	lds	r25, 0x01CB
    1ca4:	a0 91 cc 01 	lds	r26, 0x01CC
    1ca8:	b0 91 cd 01 	lds	r27, 0x01CD
    1cac:	82 17       	cp	r24, r18
    1cae:	93 07       	cpc	r25, r19
    1cb0:	a4 07       	cpc	r26, r20
    1cb2:	b5 07       	cpc	r27, r21
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <main+0x77a>
    1cb6:	45 c0       	rjmp	.+138    	; 0x1d42 <main+0x804>
				{
					prev_state = DIT;
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DITDELAY;
    1cbe:	84 e0       	ldi	r24, 0x04	; 4
    1cc0:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + dit_length;
    1cc4:	80 91 6f 01 	lds	r24, 0x016F
    1cc8:	90 91 70 01 	lds	r25, 0x0170
    1ccc:	9c 01       	movw	r18, r24
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	80 91 64 01 	lds	r24, 0x0164
    1cd6:	90 91 65 01 	lds	r25, 0x0165
    1cda:	a0 91 66 01 	lds	r26, 0x0166
    1cde:	b0 91 67 01 	lds	r27, 0x0167
    1ce2:	82 0f       	add	r24, r18
    1ce4:	93 1f       	adc	r25, r19
    1ce6:	a4 1f       	adc	r26, r20
    1ce8:	b5 1f       	adc	r27, r21
    1cea:	80 93 ca 01 	sts	0x01CA, r24
    1cee:	90 93 cb 01 	sts	0x01CB, r25
    1cf2:	a0 93 cc 01 	sts	0x01CC, r26
    1cf6:	b0 93 cd 01 	sts	0x01CD, r27
					mute_start = cur_timer;
    1cfa:	80 91 64 01 	lds	r24, 0x0164
    1cfe:	90 91 65 01 	lds	r25, 0x0165
    1d02:	a0 91 66 01 	lds	r26, 0x0166
    1d06:	b0 91 67 01 	lds	r27, 0x0167
    1d0a:	80 93 d9 01 	sts	0x01D9, r24
    1d0e:	90 93 da 01 	sts	0x01DA, r25
    1d12:	a0 93 db 01 	sts	0x01DB, r26
    1d16:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1d1a:	80 91 ca 01 	lds	r24, 0x01CA
    1d1e:	90 91 cb 01 	lds	r25, 0x01CB
    1d22:	a0 91 cc 01 	lds	r26, 0x01CC
    1d26:	b0 91 cd 01 	lds	r27, 0x01CD
    1d2a:	8c 59       	subi	r24, 0x9C	; 156
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	af 4f       	sbci	r26, 0xFF	; 255
    1d30:	bf 4f       	sbci	r27, 0xFF	; 255
    1d32:	80 93 ce 01 	sts	0x01CE, r24
    1d36:	90 93 cf 01 	sts	0x01CF, r25
    1d3a:	a0 93 d0 01 	sts	0x01D0, r26
    1d3e:	b0 93 d1 01 	sts	0x01D1, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    1d42:	80 91 bc 01 	lds	r24, 0x01BC
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <main+0x80e>
    1d4a:	17 c2       	rjmp	.+1070   	; 0x217a <main+0xc3c>
    1d4c:	80 91 a3 01 	lds	r24, 0x01A3
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <main+0x818>
    1d54:	14 c2       	rjmp	.+1064   	; 0x217e <main+0xc40>
					next_state = DAH;
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	80 93 a3 01 	sts	0x01A3, r24

				break;
    1d5c:	15 c2       	rjmp	.+1066   	; 0x2188 <main+0xc4a>

			case DAH:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1d5e:	80 91 d4 01 	lds	r24, 0x01D4
    1d62:	90 91 d5 01 	lds	r25, 0x01D5
    1d66:	a0 91 d6 01 	lds	r26, 0x01D6
    1d6a:	b0 91 d7 01 	lds	r27, 0x01D7
    1d6e:	81 3b       	cpi	r24, 0xB1	; 177
    1d70:	e6 ef       	ldi	r30, 0xF6	; 246
    1d72:	9e 07       	cpc	r25, r30
    1d74:	ea ed       	ldi	r30, 0xDA	; 218
    1d76:	ae 07       	cpc	r26, r30
    1d78:	e0 e0       	ldi	r30, 0x00	; 0
    1d7a:	be 07       	cpc	r27, r30
    1d7c:	80 f4       	brcc	.+32     	; 0x1d9e <main+0x860>
    1d7e:	80 91 d4 01 	lds	r24, 0x01D4
    1d82:	90 91 d5 01 	lds	r25, 0x01D5
    1d86:	a0 91 d6 01 	lds	r26, 0x01D6
    1d8a:	b0 91 d7 01 	lds	r27, 0x01D7
    1d8e:	80 38       	cpi	r24, 0x80	; 128
    1d90:	ff e9       	ldi	r31, 0x9F	; 159
    1d92:	9f 07       	cpc	r25, r31
    1d94:	f5 ed       	ldi	r31, 0xD5	; 213
    1d96:	af 07       	cpc	r26, r31
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	bf 07       	cpc	r27, r31
    1d9c:	38 f4       	brcc	.+14     	; 0x1dac <main+0x86e>
				{
					key_down = FALSE;
    1d9e:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    1da2:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    1da6:	10 92 37 01 	sts	0x0137, r1
    1daa:	09 c0       	rjmp	.+18     	; 0x1dbe <main+0x880>
				}
				else
				{
					key_down = TRUE;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	80 93 37 01 	sts	0x0137, r24
				}

				if(cur_timer > cur_state_end)
    1dbe:	20 91 64 01 	lds	r18, 0x0164
    1dc2:	30 91 65 01 	lds	r19, 0x0165
    1dc6:	40 91 66 01 	lds	r20, 0x0166
    1dca:	50 91 67 01 	lds	r21, 0x0167
    1dce:	80 91 ca 01 	lds	r24, 0x01CA
    1dd2:	90 91 cb 01 	lds	r25, 0x01CB
    1dd6:	a0 91 cc 01 	lds	r26, 0x01CC
    1dda:	b0 91 cd 01 	lds	r27, 0x01CD
    1dde:	82 17       	cp	r24, r18
    1de0:	93 07       	cpc	r25, r19
    1de2:	a4 07       	cpc	r26, r20
    1de4:	b5 07       	cpc	r27, r21
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <main+0x8ac>
    1de8:	45 c0       	rjmp	.+138    	; 0x1e74 <main+0x936>
				{
					prev_state = DAH;
    1dea:	83 e0       	ldi	r24, 0x03	; 3
    1dec:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DITDELAY;
    1df0:	84 e0       	ldi	r24, 0x04	; 4
    1df2:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + dit_length;
    1df6:	80 91 6f 01 	lds	r24, 0x016F
    1dfa:	90 91 70 01 	lds	r25, 0x0170
    1dfe:	9c 01       	movw	r18, r24
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	80 91 64 01 	lds	r24, 0x0164
    1e08:	90 91 65 01 	lds	r25, 0x0165
    1e0c:	a0 91 66 01 	lds	r26, 0x0166
    1e10:	b0 91 67 01 	lds	r27, 0x0167
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	a4 1f       	adc	r26, r20
    1e1a:	b5 1f       	adc	r27, r21
    1e1c:	80 93 ca 01 	sts	0x01CA, r24
    1e20:	90 93 cb 01 	sts	0x01CB, r25
    1e24:	a0 93 cc 01 	sts	0x01CC, r26
    1e28:	b0 93 cd 01 	sts	0x01CD, r27
					mute_start = cur_timer;
    1e2c:	80 91 64 01 	lds	r24, 0x0164
    1e30:	90 91 65 01 	lds	r25, 0x0165
    1e34:	a0 91 66 01 	lds	r26, 0x0166
    1e38:	b0 91 67 01 	lds	r27, 0x0167
    1e3c:	80 93 d9 01 	sts	0x01D9, r24
    1e40:	90 93 da 01 	sts	0x01DA, r25
    1e44:	a0 93 db 01 	sts	0x01DB, r26
    1e48:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1e4c:	80 91 ca 01 	lds	r24, 0x01CA
    1e50:	90 91 cb 01 	lds	r25, 0x01CB
    1e54:	a0 91 cc 01 	lds	r26, 0x01CC
    1e58:	b0 91 cd 01 	lds	r27, 0x01CD
    1e5c:	8c 59       	subi	r24, 0x9C	; 156
    1e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e60:	af 4f       	sbci	r26, 0xFF	; 255
    1e62:	bf 4f       	sbci	r27, 0xFF	; 255
    1e64:	80 93 ce 01 	sts	0x01CE, r24
    1e68:	90 93 cf 01 	sts	0x01CF, r25
    1e6c:	a0 93 d0 01 	sts	0x01D0, r26
    1e70:	b0 93 d1 01 	sts	0x01D1, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    1e74:	80 91 d2 01 	lds	r24, 0x01D2
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <main+0x940>
    1e7c:	82 c1       	rjmp	.+772    	; 0x2182 <main+0xc44>
    1e7e:	80 91 a3 01 	lds	r24, 0x01A3
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <main+0x94a>
    1e86:	7f c1       	rjmp	.+766    	; 0x2186 <main+0xc48>
					next_state = DIT;
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	80 93 a3 01 	sts	0x01A3, r24

				break;
    1e8e:	7c c1       	rjmp	.+760    	; 0x2188 <main+0xc4a>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    1e90:	20 91 64 01 	lds	r18, 0x0164
    1e94:	30 91 65 01 	lds	r19, 0x0165
    1e98:	40 91 66 01 	lds	r20, 0x0166
    1e9c:	50 91 67 01 	lds	r21, 0x0167
    1ea0:	80 91 ca 01 	lds	r24, 0x01CA
    1ea4:	90 91 cb 01 	lds	r25, 0x01CB
    1ea8:	a0 91 cc 01 	lds	r26, 0x01CC
    1eac:	b0 91 cd 01 	lds	r27, 0x01CD
    1eb0:	82 17       	cp	r24, r18
    1eb2:	93 07       	cpc	r25, r19
    1eb4:	a4 07       	cpc	r26, r20
    1eb6:	b5 07       	cpc	r27, r21
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <main+0x97e>
    1eba:	e2 c0       	rjmp	.+452    	; 0x2080 <main+0xb42>
				{
					if(next_state == DIT)
    1ebc:	80 91 a3 01 	lds	r24, 0x01A3
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <main+0x988>
    1ec4:	5d c0       	rjmp	.+186    	; 0x1f80 <main+0xa42>
					{
						cur_state = DIT;
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer + dit_length;
    1ecc:	80 91 6f 01 	lds	r24, 0x016F
    1ed0:	90 91 70 01 	lds	r25, 0x0170
    1ed4:	9c 01       	movw	r18, r24
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	50 e0       	ldi	r21, 0x00	; 0
    1eda:	80 91 64 01 	lds	r24, 0x0164
    1ede:	90 91 65 01 	lds	r25, 0x0165
    1ee2:	a0 91 66 01 	lds	r26, 0x0166
    1ee6:	b0 91 67 01 	lds	r27, 0x0167
    1eea:	82 0f       	add	r24, r18
    1eec:	93 1f       	adc	r25, r19
    1eee:	a4 1f       	adc	r26, r20
    1ef0:	b5 1f       	adc	r27, r21
    1ef2:	80 93 ca 01 	sts	0x01CA, r24
    1ef6:	90 93 cb 01 	sts	0x01CB, r25
    1efa:	a0 93 cc 01 	sts	0x01CC, r26
    1efe:	b0 93 cd 01 	sts	0x01CD, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1f02:	80 91 64 01 	lds	r24, 0x0164
    1f06:	90 91 65 01 	lds	r25, 0x0165
    1f0a:	a0 91 66 01 	lds	r26, 0x0166
    1f0e:	b0 91 67 01 	lds	r27, 0x0167
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	a1 1d       	adc	r26, r1
    1f16:	b1 1d       	adc	r27, r1
    1f18:	80 93 a4 01 	sts	0x01A4, r24
    1f1c:	90 93 a5 01 	sts	0x01A5, r25
    1f20:	a0 93 a6 01 	sts	0x01A6, r26
    1f24:	b0 93 a7 01 	sts	0x01A7, r27
						tx_end = cur_state_end;
    1f28:	80 91 ca 01 	lds	r24, 0x01CA
    1f2c:	90 91 cb 01 	lds	r25, 0x01CB
    1f30:	a0 91 cc 01 	lds	r26, 0x01CC
    1f34:	b0 91 cd 01 	lds	r27, 0x01CD
    1f38:	80 93 df 01 	sts	0x01DF, r24
    1f3c:	90 93 e0 01 	sts	0x01E0, r25
    1f40:	a0 93 e1 01 	sts	0x01E1, r26
    1f44:	b0 93 e2 01 	sts	0x01E2, r27
						mute_start = cur_timer;
    1f48:	80 91 64 01 	lds	r24, 0x0164
    1f4c:	90 91 65 01 	lds	r25, 0x0165
    1f50:	a0 91 66 01 	lds	r26, 0x0166
    1f54:	b0 91 67 01 	lds	r27, 0x0167
    1f58:	80 93 d9 01 	sts	0x01D9, r24
    1f5c:	90 93 da 01 	sts	0x01DA, r25
    1f60:	a0 93 db 01 	sts	0x01DB, r26
    1f64:	b0 93 dc 01 	sts	0x01DC, r27
						mute_end = UINT32_MAX;
    1f68:	8f ef       	ldi	r24, 0xFF	; 255
    1f6a:	9f ef       	ldi	r25, 0xFF	; 255
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	80 93 ce 01 	sts	0x01CE, r24
    1f72:	90 93 cf 01 	sts	0x01CF, r25
    1f76:	a0 93 d0 01 	sts	0x01D0, r26
    1f7a:	b0 93 d1 01 	sts	0x01D1, r27
    1f7e:	7a c0       	rjmp	.+244    	; 0x2074 <main+0xb36>
					}
					else if(next_state == DAH)
    1f80:	80 91 a3 01 	lds	r24, 0x01A3
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <main+0xa4c>
    1f88:	62 c0       	rjmp	.+196    	; 0x204e <main+0xb10>
					{
						cur_state = DAH;
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer + (dit_length * 3);
    1f90:	20 91 6f 01 	lds	r18, 0x016F
    1f94:	30 91 70 01 	lds	r19, 0x0170
    1f98:	c9 01       	movw	r24, r18
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	82 0f       	add	r24, r18
    1fa0:	93 1f       	adc	r25, r19
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	80 91 64 01 	lds	r24, 0x0164
    1fac:	90 91 65 01 	lds	r25, 0x0165
    1fb0:	a0 91 66 01 	lds	r26, 0x0166
    1fb4:	b0 91 67 01 	lds	r27, 0x0167
    1fb8:	82 0f       	add	r24, r18
    1fba:	93 1f       	adc	r25, r19
    1fbc:	a4 1f       	adc	r26, r20
    1fbe:	b5 1f       	adc	r27, r21
    1fc0:	80 93 ca 01 	sts	0x01CA, r24
    1fc4:	90 93 cb 01 	sts	0x01CB, r25
    1fc8:	a0 93 cc 01 	sts	0x01CC, r26
    1fcc:	b0 93 cd 01 	sts	0x01CD, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1fd0:	80 91 64 01 	lds	r24, 0x0164
    1fd4:	90 91 65 01 	lds	r25, 0x0165
    1fd8:	a0 91 66 01 	lds	r26, 0x0166
    1fdc:	b0 91 67 01 	lds	r27, 0x0167
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	b1 1d       	adc	r27, r1
    1fe6:	80 93 a4 01 	sts	0x01A4, r24
    1fea:	90 93 a5 01 	sts	0x01A5, r25
    1fee:	a0 93 a6 01 	sts	0x01A6, r26
    1ff2:	b0 93 a7 01 	sts	0x01A7, r27
						tx_end = cur_state_end;
    1ff6:	80 91 ca 01 	lds	r24, 0x01CA
    1ffa:	90 91 cb 01 	lds	r25, 0x01CB
    1ffe:	a0 91 cc 01 	lds	r26, 0x01CC
    2002:	b0 91 cd 01 	lds	r27, 0x01CD
    2006:	80 93 df 01 	sts	0x01DF, r24
    200a:	90 93 e0 01 	sts	0x01E0, r25
    200e:	a0 93 e1 01 	sts	0x01E1, r26
    2012:	b0 93 e2 01 	sts	0x01E2, r27
						mute_start = cur_timer;
    2016:	80 91 64 01 	lds	r24, 0x0164
    201a:	90 91 65 01 	lds	r25, 0x0165
    201e:	a0 91 66 01 	lds	r26, 0x0166
    2022:	b0 91 67 01 	lds	r27, 0x0167
    2026:	80 93 d9 01 	sts	0x01D9, r24
    202a:	90 93 da 01 	sts	0x01DA, r25
    202e:	a0 93 db 01 	sts	0x01DB, r26
    2032:	b0 93 dc 01 	sts	0x01DC, r27
						mute_end = UINT32_MAX;
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	9f ef       	ldi	r25, 0xFF	; 255
    203a:	dc 01       	movw	r26, r24
    203c:	80 93 ce 01 	sts	0x01CE, r24
    2040:	90 93 cf 01 	sts	0x01CF, r25
    2044:	a0 93 d0 01 	sts	0x01D0, r26
    2048:	b0 93 d1 01 	sts	0x01D1, r27
    204c:	13 c0       	rjmp	.+38     	; 0x2074 <main+0xb36>
					}
					else
					{
						cur_state = IDLE;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer;
    2054:	80 91 64 01 	lds	r24, 0x0164
    2058:	90 91 65 01 	lds	r25, 0x0165
    205c:	a0 91 66 01 	lds	r26, 0x0166
    2060:	b0 91 67 01 	lds	r27, 0x0167
    2064:	80 93 ca 01 	sts	0x01CA, r24
    2068:	90 93 cb 01 	sts	0x01CB, r25
    206c:	a0 93 cc 01 	sts	0x01CC, r26
    2070:	b0 93 cd 01 	sts	0x01CD, r27
					}

					prev_state = DITDELAY;
    2074:	84 e0       	ldi	r24, 0x04	; 4
    2076:	80 93 6e 01 	sts	0x016E, r24
					next_state = IDLE;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 a3 01 	sts	0x01A3, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    2080:	80 91 d2 01 	lds	r24, 0x01D2
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	61 f4       	brne	.+24     	; 0x20a0 <main+0xb62>
    2088:	80 91 6e 01 	lds	r24, 0x016E
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	41 f4       	brne	.+16     	; 0x20a0 <main+0xb62>
    2090:	80 91 a3 01 	lds	r24, 0x01A3
    2094:	81 30       	cpi	r24, 0x01	; 1
    2096:	21 f4       	brne	.+8      	; 0x20a0 <main+0xb62>
					next_state = DIT;
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	80 93 a3 01 	sts	0x01A3, r24
    209e:	0f c0       	rjmp	.+30     	; 0x20be <main+0xb80>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    20a0:	80 91 bc 01 	lds	r24, 0x01BC
    20a4:	81 30       	cpi	r24, 0x01	; 1
    20a6:	59 f4       	brne	.+22     	; 0x20be <main+0xb80>
    20a8:	80 91 6e 01 	lds	r24, 0x016E
    20ac:	82 30       	cpi	r24, 0x02	; 2
    20ae:	39 f4       	brne	.+14     	; 0x20be <main+0xb80>
    20b0:	80 91 a3 01 	lds	r24, 0x01A3
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	19 f4       	brne	.+6      	; 0x20be <main+0xb80>
					next_state = DAH;
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	80 93 a3 01 	sts	0x01A3, r24

				key_down = FALSE;
    20be:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    20c2:	10 92 36 01 	sts	0x0136, r1
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    20c6:	80 91 d4 01 	lds	r24, 0x01D4
    20ca:	90 91 d5 01 	lds	r25, 0x01D5
    20ce:	a0 91 d6 01 	lds	r26, 0x01D6
    20d2:	b0 91 d7 01 	lds	r27, 0x01D7
    20d6:	81 3b       	cpi	r24, 0xB1	; 177
    20d8:	26 ef       	ldi	r18, 0xF6	; 246
    20da:	92 07       	cpc	r25, r18
    20dc:	2a ed       	ldi	r18, 0xDA	; 218
    20de:	a2 07       	cpc	r26, r18
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	b2 07       	cpc	r27, r18
    20e4:	80 f4       	brcc	.+32     	; 0x2106 <main+0xbc8>
    20e6:	80 91 d4 01 	lds	r24, 0x01D4
    20ea:	90 91 d5 01 	lds	r25, 0x01D5
    20ee:	a0 91 d6 01 	lds	r26, 0x01D6
    20f2:	b0 91 d7 01 	lds	r27, 0x01D7
    20f6:	80 38       	cpi	r24, 0x80	; 128
    20f8:	ef e9       	ldi	r30, 0x9F	; 159
    20fa:	9e 07       	cpc	r25, r30
    20fc:	e5 ed       	ldi	r30, 0xD5	; 213
    20fe:	ae 07       	cpc	r26, r30
    2100:	e0 e0       	ldi	r30, 0x00	; 0
    2102:	be 07       	cpc	r27, r30
    2104:	18 f4       	brcc	.+6      	; 0x210c <main+0xbce>
					mute_on = FALSE;
    2106:	10 92 37 01 	sts	0x0137, r1
				else
					mute_on = TRUE;
				break;
    210a:	3e c0       	rjmp	.+124    	; 0x2188 <main+0xc4a>
				key_down = FALSE;
				sidetone_on = FALSE;
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
					mute_on = FALSE;
				else
					mute_on = TRUE;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	80 93 37 01 	sts	0x0137, r24
				break;
    2112:	3a c0       	rjmp	.+116    	; 0x2188 <main+0xc4a>

			case EXIT:
				key_down = FALSE;
    2114:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    2118:	10 92 36 01 	sts	0x0136, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    211c:	10 92 37 01 	sts	0x0137, r1

				if(cur_timer > cur_state_end)
    2120:	20 91 64 01 	lds	r18, 0x0164
    2124:	30 91 65 01 	lds	r19, 0x0165
    2128:	40 91 66 01 	lds	r20, 0x0166
    212c:	50 91 67 01 	lds	r21, 0x0167
    2130:	80 91 ca 01 	lds	r24, 0x01CA
    2134:	90 91 cb 01 	lds	r25, 0x01CB
    2138:	a0 91 cc 01 	lds	r26, 0x01CC
    213c:	b0 91 cd 01 	lds	r27, 0x01CD
    2140:	82 17       	cp	r24, r18
    2142:	93 07       	cpc	r25, r19
    2144:	a4 07       	cpc	r26, r20
    2146:	b5 07       	cpc	r27, r21
    2148:	18 f4       	brcc	.+6      	; 0x2150 <main+0xc12>
				{
					cur_state = IDLE;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	80 93 c0 01 	sts	0x01C0, r24
				}

				sleep_timer = cur_timer + SLEEP_DELAY;
    2150:	80 91 64 01 	lds	r24, 0x0164
    2154:	90 91 65 01 	lds	r25, 0x0165
    2158:	a0 91 66 01 	lds	r26, 0x0166
    215c:	b0 91 67 01 	lds	r27, 0x0167
    2160:	88 57       	subi	r24, 0x78	; 120
    2162:	9c 4e       	sbci	r25, 0xEC	; 236
    2164:	af 4f       	sbci	r26, 0xFF	; 255
    2166:	bf 4f       	sbci	r27, 0xFF	; 255
    2168:	80 93 c5 01 	sts	0x01C5, r24
    216c:	90 93 c6 01 	sts	0x01C6, r25
    2170:	a0 93 c7 01 	sts	0x01C7, r26
    2174:	b0 93 c8 01 	sts	0x01C8, r27
				break;
    2178:	07 c0       	rjmp	.+14     	; 0x2188 <main+0xc4a>
				}

				if((dah_active == TRUE) && (next_state == IDLE))
					next_state = DAH;

				break;
    217a:	00 00       	nop
    217c:	05 c0       	rjmp	.+10     	; 0x2188 <main+0xc4a>
    217e:	00 00       	nop
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <main+0xc4a>
				}

				if((dit_active == TRUE) && (next_state == IDLE))
					next_state = DIT;

				break;
    2182:	00 00       	nop
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <main+0xc4a>
    2186:	00 00       	nop
			default:
				break;
			}

			// Go to sleep
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2188:	83 e5       	ldi	r24, 0x53	; 83
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	23 e5       	ldi	r18, 0x53	; 83
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	f9 01       	movw	r30, r18
    2192:	20 81       	ld	r18, Z
    2194:	21 7f       	andi	r18, 0xF1	; 241
    2196:	24 60       	ori	r18, 0x04	; 4
    2198:	fc 01       	movw	r30, r24
    219a:	20 83       	st	Z, r18
			cli();
    219c:	f8 94       	cli
			if((cur_mode == KEYER) && (cur_state == IDLE) && (cur_timer > sleep_timer))
    219e:	80 91 9e 01 	lds	r24, 0x019E
    21a2:	88 23       	and	r24, r24
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <main+0xc6a>
    21a6:	3b c0       	rjmp	.+118    	; 0x221e <main+0xce0>
    21a8:	80 91 c0 01 	lds	r24, 0x01C0
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	b9 f5       	brne	.+110    	; 0x221e <main+0xce0>
    21b0:	20 91 64 01 	lds	r18, 0x0164
    21b4:	30 91 65 01 	lds	r19, 0x0165
    21b8:	40 91 66 01 	lds	r20, 0x0166
    21bc:	50 91 67 01 	lds	r21, 0x0167
    21c0:	80 91 c5 01 	lds	r24, 0x01C5
    21c4:	90 91 c6 01 	lds	r25, 0x01C6
    21c8:	a0 91 c7 01 	lds	r26, 0x01C7
    21cc:	b0 91 c8 01 	lds	r27, 0x01C8
    21d0:	82 17       	cp	r24, r18
    21d2:	93 07       	cpc	r25, r19
    21d4:	a4 07       	cpc	r26, r20
    21d6:	b5 07       	cpc	r27, r21
    21d8:	10 f5       	brcc	.+68     	; 0x221e <main+0xce0>
			{
				MUTE_PORT &= ~(_BV(MUTE));
    21da:	88 e2       	ldi	r24, 0x28	; 40
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	28 e2       	ldi	r18, 0x28	; 40
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	f9 01       	movw	r30, r18
    21e4:	20 81       	ld	r18, Z
    21e6:	2f 7d       	andi	r18, 0xDF	; 223
    21e8:	fc 01       	movw	r30, r24
    21ea:	20 83       	st	Z, r18
				PCICR = _BV(PCIE2);
    21ec:	88 e6       	ldi	r24, 0x68	; 104
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	24 e0       	ldi	r18, 0x04	; 4
    21f2:	fc 01       	movw	r30, r24
    21f4:	20 83       	st	Z, r18
				sleep_enable();
    21f6:	83 e5       	ldi	r24, 0x53	; 83
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	23 e5       	ldi	r18, 0x53	; 83
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	f9 01       	movw	r30, r18
    2200:	20 81       	ld	r18, Z
    2202:	21 60       	ori	r18, 0x01	; 1
    2204:	fc 01       	movw	r30, r24
    2206:	20 83       	st	Z, r18
				sei();
    2208:	78 94       	sei
				sleep_cpu();
    220a:	88 95       	sleep
				sleep_disable();
    220c:	83 e5       	ldi	r24, 0x53	; 83
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	23 e5       	ldi	r18, 0x53	; 83
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	f9 01       	movw	r30, r18
    2216:	20 81       	ld	r18, Z
    2218:	2e 7f       	andi	r18, 0xFE	; 254
    221a:	fc 01       	movw	r30, r24
    221c:	20 83       	st	Z, r18
			}
			sei();
    221e:	78 94       	sei

			break;
    2220:	4d c7       	rjmp	.+3738   	; 0x30bc <main+0x1b7e>

		case ANNOUNCE:
			switch(cur_state)
    2222:	80 91 c0 01 	lds	r24, 0x01C0
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	84 30       	cpi	r24, 0x04	; 4
    222c:	91 05       	cpc	r25, r1
    222e:	44 f4       	brge	.+16     	; 0x2240 <main+0xd02>
    2230:	82 30       	cpi	r24, 0x02	; 2
    2232:	91 05       	cpc	r25, r1
    2234:	0c f0       	brlt	.+2      	; 0x2238 <main+0xcfa>
    2236:	49 c1       	rjmp	.+658    	; 0x24ca <main+0xf8c>
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	91 05       	cpc	r25, r1
    223c:	31 f0       	breq	.+12     	; 0x224a <main+0xd0c>
    223e:	a1 c1       	rjmp	.+834    	; 0x2582 <main+0x1044>
    2240:	87 30       	cpi	r24, 0x07	; 7
    2242:	91 05       	cpc	r25, r1
    2244:	0c f0       	brlt	.+2      	; 0x2248 <main+0xd0a>
    2246:	9d c1       	rjmp	.+826    	; 0x2582 <main+0x1044>
    2248:	7c c1       	rjmp	.+760    	; 0x2542 <main+0x1004>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    224a:	20 91 3a 01 	lds	r18, 0x013A
    224e:	30 91 3b 01 	lds	r19, 0x013B
    2252:	80 91 dd 01 	lds	r24, 0x01DD
    2256:	90 91 de 01 	lds	r25, 0x01DE
    225a:	28 17       	cp	r18, r24
    225c:	39 07       	cpc	r19, r25
    225e:	c9 f4       	brne	.+50     	; 0x2292 <main+0xd54>
    2260:	80 91 3e 01 	lds	r24, 0x013E
    2264:	88 23       	and	r24, r24
    2266:	a9 f4       	brne	.+42     	; 0x2292 <main+0xd54>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2268:	80 91 3a 01 	lds	r24, 0x013A
    226c:	90 91 3b 01 	lds	r25, 0x013B
    2270:	fc 01       	movw	r30, r24
    2272:	80 81       	ld	r24, Z
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	80 97       	sbiw	r24, 0x20	; 32
    227a:	88 59       	subi	r24, 0x98	; 152
    227c:	9f 4f       	sbci	r25, 0xFF	; 255
    227e:	9b 83       	std	Y+3, r25	; 0x03
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	9b 81       	ldd	r25, Y+3	; 0x03
    2286:	fc 01       	movw	r30, r24
    2288:	14 91       	lpm	r17, Z+
    228a:	1c 83       	std	Y+4, r17	; 0x04
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	80 93 3e 01 	sts	0x013E, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2292:	80 91 3e 01 	lds	r24, 0x013E
    2296:	88 23       	and	r24, r24
    2298:	09 f4       	brne	.+2      	; 0x229c <main+0xd5e>
    229a:	ce c0       	rjmp	.+412    	; 0x2438 <main+0xefa>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    229c:	80 91 3e 01 	lds	r24, 0x013E
    22a0:	80 38       	cpi	r24, 0x80	; 128
    22a2:	29 f0       	breq	.+10     	; 0x22ae <main+0xd70>
    22a4:	80 91 3e 01 	lds	r24, 0x013E
    22a8:	8f 3f       	cpi	r24, 0xFF	; 255
    22aa:	09 f0       	breq	.+2      	; 0x22ae <main+0xd70>
    22ac:	79 c0       	rjmp	.+242    	; 0x23a0 <main+0xe62>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    22ae:	80 91 3e 01 	lds	r24, 0x013E
    22b2:	80 38       	cpi	r24, 0x80	; 128
    22b4:	21 f5       	brne	.+72     	; 0x22fe <main+0xdc0>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    22b6:	20 91 6f 01 	lds	r18, 0x016F
    22ba:	30 91 70 01 	lds	r19, 0x0170
    22be:	c9 01       	movw	r24, r18
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	82 0f       	add	r24, r18
    22c6:	93 1f       	adc	r25, r19
    22c8:	9c 01       	movw	r18, r24
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	80 91 64 01 	lds	r24, 0x0164
    22d2:	90 91 65 01 	lds	r25, 0x0165
    22d6:	a0 91 66 01 	lds	r26, 0x0166
    22da:	b0 91 67 01 	lds	r27, 0x0167
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	a4 1f       	adc	r26, r20
    22e4:	b5 1f       	adc	r27, r21
    22e6:	80 93 ca 01 	sts	0x01CA, r24
    22ea:	90 93 cb 01 	sts	0x01CB, r25
    22ee:	a0 93 cc 01 	sts	0x01CC, r26
    22f2:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAHDELAY;
    22f6:	85 e0       	ldi	r24, 0x05	; 5
    22f8:	80 93 c0 01 	sts	0x01C0, r24
    22fc:	27 c0       	rjmp	.+78     	; 0x234c <main+0xe0e>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    22fe:	20 91 6f 01 	lds	r18, 0x016F
    2302:	30 91 70 01 	lds	r19, 0x0170
    2306:	c9 01       	movw	r24, r18
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	82 1b       	sub	r24, r18
    2316:	93 0b       	sbc	r25, r19
    2318:	9c 01       	movw	r18, r24
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	80 91 64 01 	lds	r24, 0x0164
    2322:	90 91 65 01 	lds	r25, 0x0165
    2326:	a0 91 66 01 	lds	r26, 0x0166
    232a:	b0 91 67 01 	lds	r27, 0x0167
    232e:	82 0f       	add	r24, r18
    2330:	93 1f       	adc	r25, r19
    2332:	a4 1f       	adc	r26, r20
    2334:	b5 1f       	adc	r27, r21
    2336:	80 93 ca 01 	sts	0x01CA, r24
    233a:	90 93 cb 01 	sts	0x01CB, r25
    233e:	a0 93 cc 01 	sts	0x01CC, r26
    2342:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAHDELAY;
    2346:	85 e0       	ldi	r24, 0x05	; 5
    2348:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    234c:	80 91 3a 01 	lds	r24, 0x013A
    2350:	90 91 3b 01 	lds	r25, 0x013B
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	90 93 3b 01 	sts	0x013B, r25
    235a:	80 93 3a 01 	sts	0x013A, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    235e:	80 91 3a 01 	lds	r24, 0x013A
    2362:	90 91 3b 01 	lds	r25, 0x013B
    2366:	fc 01       	movw	r30, r24
    2368:	80 81       	ld	r24, Z
    236a:	88 23       	and	r24, r24
    236c:	19 f4       	brne	.+6      	; 0x2374 <main+0xe36>
							cur_character = '\0';
    236e:	10 92 3e 01 	sts	0x013E, r1
    2372:	15 c0       	rjmp	.+42     	; 0x239e <main+0xe60>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2374:	80 91 3a 01 	lds	r24, 0x013A
    2378:	90 91 3b 01 	lds	r25, 0x013B
    237c:	fc 01       	movw	r30, r24
    237e:	80 81       	ld	r24, Z
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	80 97       	sbiw	r24, 0x20	; 32
    2386:	88 59       	subi	r24, 0x98	; 152
    2388:	9f 4f       	sbci	r25, 0xFF	; 255
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	fc 01       	movw	r30, r24
    2394:	14 91       	lpm	r17, Z+
    2396:	1f 83       	std	Y+7, r17	; 0x07
    2398:	8f 81       	ldd	r24, Y+7	; 0x07
    239a:	80 93 3e 01 	sts	0x013E, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    239e:	4b c0       	rjmp	.+150    	; 0x2436 <main+0xef8>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    23a0:	80 91 3e 01 	lds	r24, 0x013E
    23a4:	88 23       	and	r24, r24
    23a6:	24 f5       	brge	.+72     	; 0x23f0 <main+0xeb2>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    23a8:	20 91 6f 01 	lds	r18, 0x016F
    23ac:	30 91 70 01 	lds	r19, 0x0170
    23b0:	c9 01       	movw	r24, r18
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	82 0f       	add	r24, r18
    23b8:	93 1f       	adc	r25, r19
    23ba:	9c 01       	movw	r18, r24
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	80 91 64 01 	lds	r24, 0x0164
    23c4:	90 91 65 01 	lds	r25, 0x0165
    23c8:	a0 91 66 01 	lds	r26, 0x0166
    23cc:	b0 91 67 01 	lds	r27, 0x0167
    23d0:	82 0f       	add	r24, r18
    23d2:	93 1f       	adc	r25, r19
    23d4:	a4 1f       	adc	r26, r20
    23d6:	b5 1f       	adc	r27, r21
    23d8:	80 93 ca 01 	sts	0x01CA, r24
    23dc:	90 93 cb 01 	sts	0x01CB, r25
    23e0:	a0 93 cc 01 	sts	0x01CC, r26
    23e4:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAH;
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	80 93 c0 01 	sts	0x01C0, r24
    23ee:	1e c0       	rjmp	.+60     	; 0x242c <main+0xeee>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    23f0:	80 91 6f 01 	lds	r24, 0x016F
    23f4:	90 91 70 01 	lds	r25, 0x0170
    23f8:	9c 01       	movw	r18, r24
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	80 91 64 01 	lds	r24, 0x0164
    2402:	90 91 65 01 	lds	r25, 0x0165
    2406:	a0 91 66 01 	lds	r26, 0x0166
    240a:	b0 91 67 01 	lds	r27, 0x0167
    240e:	82 0f       	add	r24, r18
    2410:	93 1f       	adc	r25, r19
    2412:	a4 1f       	adc	r26, r20
    2414:	b5 1f       	adc	r27, r21
    2416:	80 93 ca 01 	sts	0x01CA, r24
    241a:	90 93 cb 01 	sts	0x01CB, r25
    241e:	a0 93 cc 01 	sts	0x01CC, r26
    2422:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DIT;
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    242c:	80 91 3e 01 	lds	r24, 0x013E
    2430:	88 0f       	add	r24, r24
    2432:	80 93 3e 01 	sts	0x013E, r24
    2436:	48 c0       	rjmp	.+144    	; 0x24c8 <main+0xf8a>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2438:	80 91 dd 01 	lds	r24, 0x01DD
    243c:	90 91 de 01 	lds	r25, 0x01DE
    2440:	24 e2       	ldi	r18, 0x24	; 36
    2442:	31 e0       	ldi	r19, 0x01	; 1
    2444:	b9 01       	movw	r22, r18
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <memcpy>
					cur_char_p = announce_buffer;
    244e:	80 91 dd 01 	lds	r24, 0x01DD
    2452:	90 91 de 01 	lds	r25, 0x01DE
    2456:	90 93 3b 01 	sts	0x013B, r25
    245a:	80 93 3a 01 	sts	0x013A, r24
					cur_character = '\0';
    245e:	10 92 3e 01 	sts	0x013E, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    2462:	80 91 c3 01 	lds	r24, 0x01C3
    2466:	90 91 c4 01 	lds	r25, 0x01C4
    246a:	90 93 b7 01 	sts	0x01B7, r25
    246e:	80 93 b6 01 	sts	0x01B6, r24
					set_st_freq(st_freq);
    2472:	80 91 b6 01 	lds	r24, 0x01B6
    2476:	90 91 b7 01 	lds	r25, 0x01B7
    247a:	cc 01       	movw	r24, r24
    247c:	a0 e0       	ldi	r26, 0x00	; 0
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <set_st_freq>

					wpm = prev_wpm;
    2488:	80 91 e5 01 	lds	r24, 0x01E5
    248c:	80 93 d8 01 	sts	0x01D8, r24
					set_wpm(wpm);
    2490:	80 91 d8 01 	lds	r24, 0x01D8
    2494:	0e 94 ed 03 	call	0x7da	; 0x7da <set_wpm>

					cur_mode = prev_mode;
    2498:	80 91 b4 01 	lds	r24, 0x01B4
    249c:	80 93 9e 01 	sts	0x019E, r24
					cur_state = prev_state;
    24a0:	80 91 6e 01 	lds	r24, 0x016E
    24a4:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = prev_state_end;
    24a8:	80 91 b0 01 	lds	r24, 0x01B0
    24ac:	90 91 b1 01 	lds	r25, 0x01B1
    24b0:	a0 91 b2 01 	lds	r26, 0x01B2
    24b4:	b0 91 b3 01 	lds	r27, 0x01B3
    24b8:	80 93 ca 01 	sts	0x01CA, r24
    24bc:	90 93 cb 01 	sts	0x01CB, r25
    24c0:	a0 93 cc 01 	sts	0x01CC, r26
    24c4:	b0 93 cd 01 	sts	0x01CD, r27
				}
				break;
    24c8:	5d c0       	rjmp	.+186    	; 0x2584 <main+0x1046>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    24ca:	20 91 64 01 	lds	r18, 0x0164
    24ce:	30 91 65 01 	lds	r19, 0x0165
    24d2:	40 91 66 01 	lds	r20, 0x0166
    24d6:	50 91 67 01 	lds	r21, 0x0167
    24da:	80 91 ca 01 	lds	r24, 0x01CA
    24de:	90 91 cb 01 	lds	r25, 0x01CB
    24e2:	a0 91 cc 01 	lds	r26, 0x01CC
    24e6:	b0 91 cd 01 	lds	r27, 0x01CD
    24ea:	82 17       	cp	r24, r18
    24ec:	93 07       	cpc	r25, r19
    24ee:	a4 07       	cpc	r26, r20
    24f0:	b5 07       	cpc	r27, r21
    24f2:	f0 f4       	brcc	.+60     	; 0x2530 <main+0xff2>
				{
					cur_state_end = cur_timer + dit_length;
    24f4:	80 91 6f 01 	lds	r24, 0x016F
    24f8:	90 91 70 01 	lds	r25, 0x0170
    24fc:	9c 01       	movw	r18, r24
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	80 91 64 01 	lds	r24, 0x0164
    2506:	90 91 65 01 	lds	r25, 0x0165
    250a:	a0 91 66 01 	lds	r26, 0x0166
    250e:	b0 91 67 01 	lds	r27, 0x0167
    2512:	82 0f       	add	r24, r18
    2514:	93 1f       	adc	r25, r19
    2516:	a4 1f       	adc	r26, r20
    2518:	b5 1f       	adc	r27, r21
    251a:	80 93 ca 01 	sts	0x01CA, r24
    251e:	90 93 cb 01 	sts	0x01CB, r25
    2522:	a0 93 cc 01 	sts	0x01CC, r26
    2526:	b0 93 cd 01 	sts	0x01CD, r27
					cur_state = DITDELAY;
    252a:	84 e0       	ldi	r24, 0x04	; 4
    252c:	80 93 c0 01 	sts	0x01C0, r24
				}

				key_down = FALSE;
    2530:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = TRUE;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	80 93 37 01 	sts	0x0137, r24
				break;
    2540:	21 c0       	rjmp	.+66     	; 0x2584 <main+0x1046>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    2542:	20 91 64 01 	lds	r18, 0x0164
    2546:	30 91 65 01 	lds	r19, 0x0165
    254a:	40 91 66 01 	lds	r20, 0x0166
    254e:	50 91 67 01 	lds	r21, 0x0167
    2552:	80 91 ca 01 	lds	r24, 0x01CA
    2556:	90 91 cb 01 	lds	r25, 0x01CB
    255a:	a0 91 cc 01 	lds	r26, 0x01CC
    255e:	b0 91 cd 01 	lds	r27, 0x01CD
    2562:	82 17       	cp	r24, r18
    2564:	93 07       	cpc	r25, r19
    2566:	a4 07       	cpc	r26, r20
    2568:	b5 07       	cpc	r27, r21
    256a:	18 f4       	brcc	.+6      	; 0x2572 <main+0x1034>
					cur_state = IDLE;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	80 93 c0 01 	sts	0x01C0, r24

				key_down = FALSE;
    2572:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    2576:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	80 93 37 01 	sts	0x0137, r24
				break;
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <main+0x1046>

			default:
				break;
    2582:	00 00       	nop
			}
			break;
    2584:	9b c5       	rjmp	.+2870   	; 0x30bc <main+0x1b7e>

		case TUNE:
			switch(cur_state)
    2586:	80 91 c0 01 	lds	r24, 0x01C0
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	87 30       	cpi	r24, 0x07	; 7
    2590:	91 05       	cpc	r25, r1
    2592:	09 f4       	brne	.+2      	; 0x2596 <main+0x1058>
    2594:	50 c0       	rjmp	.+160    	; 0x2636 <main+0x10f8>
    2596:	88 30       	cpi	r24, 0x08	; 8
    2598:	91 05       	cpc	r25, r1
    259a:	09 f4       	brne	.+2      	; 0x259e <main+0x1060>
    259c:	8d c0       	rjmp	.+282    	; 0x26b8 <main+0x117a>
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	91 05       	cpc	r25, r1
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <main+0x1068>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    25a4:	af c0       	rjmp	.+350    	; 0x2704 <main+0x11c6>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    25a6:	80 91 64 01 	lds	r24, 0x0164
    25aa:	90 91 65 01 	lds	r25, 0x0165
    25ae:	a0 91 66 01 	lds	r26, 0x0166
    25b2:	b0 91 67 01 	lds	r27, 0x0167
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	a1 1d       	adc	r26, r1
    25ba:	b1 1d       	adc	r27, r1
    25bc:	80 93 a4 01 	sts	0x01A4, r24
    25c0:	90 93 a5 01 	sts	0x01A5, r25
    25c4:	a0 93 a6 01 	sts	0x01A6, r26
    25c8:	b0 93 a7 01 	sts	0x01A7, r27
				tx_end = UINT32_MAX;
    25cc:	8f ef       	ldi	r24, 0xFF	; 255
    25ce:	9f ef       	ldi	r25, 0xFF	; 255
    25d0:	dc 01       	movw	r26, r24
    25d2:	80 93 df 01 	sts	0x01DF, r24
    25d6:	90 93 e0 01 	sts	0x01E0, r25
    25da:	a0 93 e1 01 	sts	0x01E1, r26
    25de:	b0 93 e2 01 	sts	0x01E2, r27
				cur_state_end = UINT32_MAX;
    25e2:	8f ef       	ldi	r24, 0xFF	; 255
    25e4:	9f ef       	ldi	r25, 0xFF	; 255
    25e6:	dc 01       	movw	r26, r24
    25e8:	80 93 ca 01 	sts	0x01CA, r24
    25ec:	90 93 cb 01 	sts	0x01CB, r25
    25f0:	a0 93 cc 01 	sts	0x01CC, r26
    25f4:	b0 93 cd 01 	sts	0x01CD, r27
				mute_start = cur_timer;
    25f8:	80 91 64 01 	lds	r24, 0x0164
    25fc:	90 91 65 01 	lds	r25, 0x0165
    2600:	a0 91 66 01 	lds	r26, 0x0166
    2604:	b0 91 67 01 	lds	r27, 0x0167
    2608:	80 93 d9 01 	sts	0x01D9, r24
    260c:	90 93 da 01 	sts	0x01DA, r25
    2610:	a0 93 db 01 	sts	0x01DB, r26
    2614:	b0 93 dc 01 	sts	0x01DC, r27
				mute_end = UINT32_MAX;
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	9f ef       	ldi	r25, 0xFF	; 255
    261c:	dc 01       	movw	r26, r24
    261e:	80 93 ce 01 	sts	0x01CE, r24
    2622:	90 93 cf 01 	sts	0x01CF, r25
    2626:	a0 93 d0 01 	sts	0x01D0, r26
    262a:	b0 93 d1 01 	sts	0x01D1, r27

				cur_state = KEYDOWN;
    262e:	87 e0       	ldi	r24, 0x07	; 7
    2630:	80 93 c0 01 	sts	0x01C0, r24
				break;
    2634:	67 c0       	rjmp	.+206    	; 0x2704 <main+0x11c6>

			case KEYDOWN:
				key_down = TRUE;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	80 93 38 01 	sts	0x0138, r24
				sidetone_on = TRUE;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	80 93 37 01 	sts	0x0137, r24

				if(ANYBUTTON)
    2648:	80 91 d2 01 	lds	r24, 0x01D2
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	61 f0       	breq	.+24     	; 0x2668 <main+0x112a>
    2650:	80 91 bc 01 	lds	r24, 0x01BC
    2654:	81 30       	cpi	r24, 0x01	; 1
    2656:	41 f0       	breq	.+16     	; 0x2668 <main+0x112a>
    2658:	80 91 bf 01 	lds	r24, 0x01BF
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	21 f0       	breq	.+8      	; 0x2668 <main+0x112a>
    2660:	80 91 bd 01 	lds	r24, 0x01BD
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	39 f5       	brne	.+78     	; 0x26b6 <main+0x1178>
				{
					cur_state = ENDKEYDOWN;
    2668:	88 e0       	ldi	r24, 0x08	; 8
    266a:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    266e:	80 91 64 01 	lds	r24, 0x0164
    2672:	90 91 65 01 	lds	r25, 0x0165
    2676:	a0 91 66 01 	lds	r26, 0x0166
    267a:	b0 91 67 01 	lds	r27, 0x0167
    267e:	8c 59       	subi	r24, 0x9C	; 156
    2680:	9f 4f       	sbci	r25, 0xFF	; 255
    2682:	af 4f       	sbci	r26, 0xFF	; 255
    2684:	bf 4f       	sbci	r27, 0xFF	; 255
    2686:	80 93 ca 01 	sts	0x01CA, r24
    268a:	90 93 cb 01 	sts	0x01CB, r25
    268e:	a0 93 cc 01 	sts	0x01CC, r26
    2692:	b0 93 cd 01 	sts	0x01CD, r27
					tx_end = cur_timer;
    2696:	80 91 64 01 	lds	r24, 0x0164
    269a:	90 91 65 01 	lds	r25, 0x0165
    269e:	a0 91 66 01 	lds	r26, 0x0166
    26a2:	b0 91 67 01 	lds	r27, 0x0167
    26a6:	80 93 df 01 	sts	0x01DF, r24
    26aa:	90 93 e0 01 	sts	0x01E0, r25
    26ae:	a0 93 e1 01 	sts	0x01E1, r26
    26b2:	b0 93 e2 01 	sts	0x01E2, r27
				}
				break;
    26b6:	26 c0       	rjmp	.+76     	; 0x2704 <main+0x11c6>

			case ENDKEYDOWN:
				key_down = FALSE;
    26b8:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    26bc:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	80 93 37 01 	sts	0x0137, r24

				if(cur_timer >= cur_state_end)
    26c6:	20 91 64 01 	lds	r18, 0x0164
    26ca:	30 91 65 01 	lds	r19, 0x0165
    26ce:	40 91 66 01 	lds	r20, 0x0166
    26d2:	50 91 67 01 	lds	r21, 0x0167
    26d6:	80 91 ca 01 	lds	r24, 0x01CA
    26da:	90 91 cb 01 	lds	r25, 0x01CB
    26de:	a0 91 cc 01 	lds	r26, 0x01CC
    26e2:	b0 91 cd 01 	lds	r27, 0x01CD
    26e6:	28 17       	cp	r18, r24
    26e8:	39 07       	cpc	r19, r25
    26ea:	4a 07       	cpc	r20, r26
    26ec:	5b 07       	cpc	r21, r27
    26ee:	48 f0       	brcs	.+18     	; 0x2702 <main+0x11c4>
				{
					mute_on = FALSE;
    26f0:	10 92 37 01 	sts	0x0137, r1
					cur_state = IDLE;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	80 93 c0 01 	sts	0x01C0, r24
					cur_mode = default_mode;
    26fa:	80 91 69 01 	lds	r24, 0x0169
    26fe:	80 93 9e 01 	sts	0x019E, r24
				}
				break;
    2702:	00 00       	nop

			default:
				break;
			}
			break;
    2704:	db c4       	rjmp	.+2486   	; 0x30bc <main+0x1b7e>

		case MENU:
			switch(cur_state)
    2706:	80 91 c0 01 	lds	r24, 0x01C0
    270a:	88 2f       	mov	r24, r24
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	89 30       	cpi	r24, 0x09	; 9
    2710:	91 05       	cpc	r25, r1
    2712:	91 f0       	breq	.+36     	; 0x2738 <main+0x11fa>
    2714:	8a 30       	cpi	r24, 0x0A	; 10
    2716:	91 05       	cpc	r25, r1
    2718:	09 f4       	brne	.+2      	; 0x271c <main+0x11de>
    271a:	58 c0       	rjmp	.+176    	; 0x27cc <main+0x128e>
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	91 05       	cpc	r25, r1
    2720:	09 f0       	breq	.+2      	; 0x2724 <main+0x11e6>
    2722:	98 c1       	rjmp	.+816    	; 0x2a54 <main+0x1516>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	90 93 40 01 	sts	0x0140, r25
    272c:	80 93 3f 01 	sts	0x013F, r24
				cur_state = MENUANNOUNCE;
    2730:	89 e0       	ldi	r24, 0x09	; 9
    2732:	80 93 c0 01 	sts	0x01C0, r24
				break;
    2736:	96 c1       	rjmp	.+812    	; 0x2a64 <main+0x1526>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    2738:	82 e0       	ldi	r24, 0x02	; 2
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 c8 18 	call	0x3190	; 0x3190 <malloc>
    2740:	90 93 42 01 	sts	0x0142, r25
    2744:	80 93 41 01 	sts	0x0141, r24
				memset(cur_menu, '\0', 2);
    2748:	80 91 41 01 	lds	r24, 0x0141
    274c:	90 91 42 01 	lds	r25, 0x0142
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	42 e0       	ldi	r20, 0x02	; 2
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	0e 94 04 1a 	call	0x3408	; 0x3408 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    275c:	80 91 41 01 	lds	r24, 0x0141
    2760:	90 91 42 01 	lds	r25, 0x0142
    2764:	20 91 3f 01 	lds	r18, 0x013F
    2768:	30 91 40 01 	lds	r19, 0x0140
    276c:	b9 01       	movw	r22, r18
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    2776:	80 91 64 01 	lds	r24, 0x0164
    277a:	90 91 65 01 	lds	r25, 0x0165
    277e:	a0 91 66 01 	lds	r26, 0x0166
    2782:	b0 91 67 01 	lds	r27, 0x0167
    2786:	80 56       	subi	r24, 0x60	; 96
    2788:	90 4f       	sbci	r25, 0xF0	; 240
    278a:	af 4f       	sbci	r26, 0xFF	; 255
    278c:	bf 4f       	sbci	r27, 0xFF	; 255
    278e:	80 93 ca 01 	sts	0x01CA, r24
    2792:	90 93 cb 01 	sts	0x01CB, r25
    2796:	a0 93 cc 01 	sts	0x01CC, r26
    279a:	b0 93 cd 01 	sts	0x01CD, r27

				// Set next state
				cur_state = MENUINPUT;
    279e:	8a e0       	ldi	r24, 0x0A	; 10
    27a0:	80 93 c0 01 	sts	0x01C0, r24

				// Announce the menu item
				announce(cur_menu, st_freq, wpm);
    27a4:	80 91 41 01 	lds	r24, 0x0141
    27a8:	90 91 42 01 	lds	r25, 0x0142
    27ac:	20 91 b6 01 	lds	r18, 0x01B6
    27b0:	30 91 b7 01 	lds	r19, 0x01B7
    27b4:	40 91 d8 01 	lds	r20, 0x01D8
    27b8:	b9 01       	movw	r22, r18
    27ba:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>

				free(cur_menu);
    27be:	80 91 41 01 	lds	r24, 0x0141
    27c2:	90 91 42 01 	lds	r25, 0x0142
    27c6:	0e 94 62 19 	call	0x32c4	; 0x32c4 <free>
				break;
    27ca:	4c c1       	rjmp	.+664    	; 0x2a64 <main+0x1526>

			case MENUINPUT:
				text_buffer = malloc(20);
    27cc:	84 e1       	ldi	r24, 0x14	; 20
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 c8 18 	call	0x3190	; 0x3190 <malloc>
    27d4:	90 93 3d 01 	sts	0x013D, r25
    27d8:	80 93 3c 01 	sts	0x013C, r24
				memset(text_buffer, '\0', 20);
    27dc:	80 91 3c 01 	lds	r24, 0x013C
    27e0:	90 91 3d 01 	lds	r25, 0x013D
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	44 e1       	ldi	r20, 0x14	; 20
    27ea:	50 e0       	ldi	r21, 0x00	; 0
    27ec:	0e 94 04 1a 	call	0x3408	; 0x3408 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    27f0:	20 91 64 01 	lds	r18, 0x0164
    27f4:	30 91 65 01 	lds	r19, 0x0165
    27f8:	40 91 66 01 	lds	r20, 0x0166
    27fc:	50 91 67 01 	lds	r21, 0x0167
    2800:	80 91 ca 01 	lds	r24, 0x01CA
    2804:	90 91 cb 01 	lds	r25, 0x01CB
    2808:	a0 91 cc 01 	lds	r26, 0x01CC
    280c:	b0 91 cd 01 	lds	r27, 0x01CD
    2810:	28 17       	cp	r18, r24
    2812:	39 07       	cpc	r19, r25
    2814:	4a 07       	cpc	r20, r26
    2816:	5b 07       	cpc	r21, r27
    2818:	08 f0       	brcs	.+2      	; 0x281c <main+0x12de>
    281a:	03 c1       	rjmp	.+518    	; 0x2a22 <main+0x14e4>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    281c:	80 91 bf 01 	lds	r24, 0x01BF
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	49 f5       	brne	.+82     	; 0x2876 <main+0x1338>
					{
						debounce(TRUE);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>
						cur_menu_p++;
    282a:	80 91 3f 01 	lds	r24, 0x013F
    282e:	90 91 40 01 	lds	r25, 0x0140
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	90 93 40 01 	sts	0x0140, r25
    2838:	80 93 3f 01 	sts	0x013F, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    283c:	80 91 3f 01 	lds	r24, 0x013F
    2840:	90 91 40 01 	lds	r25, 0x0140
    2844:	fc 01       	movw	r30, r24
    2846:	80 81       	ld	r24, Z
    2848:	88 23       	and	r24, r24
    284a:	89 f4       	brne	.+34     	; 0x286e <main+0x1330>
						{
							cur_state = IDLE;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    2852:	80 91 69 01 	lds	r24, 0x0169
    2856:	80 93 9e 01 	sts	0x019E, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
    285a:	20 91 d8 01 	lds	r18, 0x01D8
    285e:	85 e2       	ldi	r24, 0x25	; 37
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	60 e9       	ldi	r22, 0x90	; 144
    2864:	71 e0       	ldi	r23, 0x01	; 1
    2866:	42 2f       	mov	r20, r18
    2868:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    286c:	ec c0       	rjmp	.+472    	; 0x2a46 <main+0x1508>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
						}
						else
							cur_state = MENUANNOUNCE;
    286e:	89 e0       	ldi	r24, 0x09	; 9
    2870:	80 93 c0 01 	sts	0x01C0, r24
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2874:	e8 c0       	rjmp	.+464    	; 0x2a46 <main+0x1508>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    2876:	80 91 bd 01 	lds	r24, 0x01BD
    287a:	81 30       	cpi	r24, 0x01	; 1
    287c:	09 f0       	breq	.+2      	; 0x2880 <main+0x1342>
    287e:	e2 c0       	rjmp	.+452    	; 0x2a44 <main+0x1506>
					{
						// need to clear the button buffer
						debounce(TRUE);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	0e 94 05 04 	call	0x80a	; 0x80a <debounce>

						switch(*cur_menu_p)
    2886:	80 91 3f 01 	lds	r24, 0x013F
    288a:	90 91 40 01 	lds	r25, 0x0140
    288e:	fc 01       	movw	r30, r24
    2890:	80 81       	ld	r24, Z
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	83 35       	cpi	r24, 0x53	; 83
    2898:	91 05       	cpc	r25, r1
    289a:	a1 f0       	breq	.+40     	; 0x28c4 <main+0x1386>
    289c:	84 35       	cpi	r24, 0x54	; 84
    289e:	91 05       	cpc	r25, r1
    28a0:	4c f4       	brge	.+18     	; 0x28b4 <main+0x1376>
    28a2:	8b 34       	cpi	r24, 0x4B	; 75
    28a4:	91 05       	cpc	r25, r1
    28a6:	09 f4       	brne	.+2      	; 0x28aa <main+0x136c>
    28a8:	83 c0       	rjmp	.+262    	; 0x29b0 <main+0x1472>
    28aa:	82 35       	cpi	r24, 0x52	; 82
    28ac:	91 05       	cpc	r25, r1
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <main+0x1374>
    28b0:	64 c0       	rjmp	.+200    	; 0x297a <main+0x143c>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    28b2:	c9 c0       	rjmp	.+402    	; 0x2a46 <main+0x1508>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    28b4:	86 35       	cpi	r24, 0x56	; 86
    28b6:	91 05       	cpc	r25, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <main+0x137e>
    28ba:	70 c0       	rjmp	.+224    	; 0x299c <main+0x145e>
    28bc:	87 35       	cpi	r24, 0x57	; 87
    28be:	91 05       	cpc	r25, r1
    28c0:	21 f1       	breq	.+72     	; 0x290a <main+0x13cc>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    28c2:	c1 c0       	rjmp	.+386    	; 0x2a46 <main+0x1508>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    28c4:	80 91 64 01 	lds	r24, 0x0164
    28c8:	90 91 65 01 	lds	r25, 0x0165
    28cc:	a0 91 66 01 	lds	r26, 0x0166
    28d0:	b0 91 67 01 	lds	r27, 0x0167
    28d4:	80 56       	subi	r24, 0x60	; 96
    28d6:	90 4f       	sbci	r25, 0xF0	; 240
    28d8:	af 4f       	sbci	r26, 0xFF	; 255
    28da:	bf 4f       	sbci	r27, 0xFF	; 255
    28dc:	80 93 ca 01 	sts	0x01CA, r24
    28e0:	90 93 cb 01 	sts	0x01CB, r25
    28e4:	a0 93 cc 01 	sts	0x01CC, r26
    28e8:	b0 93 cd 01 	sts	0x01CD, r27
							cur_mode = SETWPM;
    28ec:	85 e0       	ldi	r24, 0x05	; 5
    28ee:	80 93 9e 01 	sts	0x019E, r24

							announce("R", st_freq, wpm);
    28f2:	20 91 b6 01 	lds	r18, 0x01B6
    28f6:	30 91 b7 01 	lds	r19, 0x01B7
    28fa:	40 91 d8 01 	lds	r20, 0x01D8
    28fe:	87 e2       	ldi	r24, 0x27	; 39
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	b9 01       	movw	r22, r18
    2904:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
							break;
    2908:	9e c0       	rjmp	.+316    	; 0x2a46 <main+0x1508>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    2910:	80 91 69 01 	lds	r24, 0x0169
    2914:	80 93 9e 01 	sts	0x019E, r24

							sprintf(text_buffer, "%d", wpm);
    2918:	40 91 3c 01 	lds	r20, 0x013C
    291c:	50 91 3d 01 	lds	r21, 0x013D
    2920:	80 91 d8 01 	lds	r24, 0x01D8
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	00 d0       	rcall	.+0      	; 0x292a <main+0x13ec>
    292a:	00 d0       	rcall	.+0      	; 0x292c <main+0x13ee>
    292c:	00 d0       	rcall	.+0      	; 0x292e <main+0x13f0>
    292e:	8d b7       	in	r24, 0x3d	; 61
    2930:	9e b7       	in	r25, 0x3e	; 62
    2932:	01 96       	adiw	r24, 0x01	; 1
    2934:	fc 01       	movw	r30, r24
    2936:	51 83       	std	Z+1, r21	; 0x01
    2938:	40 83       	st	Z, r20
    293a:	49 e2       	ldi	r20, 0x29	; 41
    293c:	51 e0       	ldi	r21, 0x01	; 1
    293e:	fc 01       	movw	r30, r24
    2940:	53 83       	std	Z+3, r21	; 0x03
    2942:	42 83       	std	Z+2, r20	; 0x02
    2944:	fc 01       	movw	r30, r24
    2946:	35 83       	std	Z+5, r19	; 0x05
    2948:	24 83       	std	Z+4, r18	; 0x04
    294a:	0e 94 1c 1a 	call	0x3438	; 0x3438 <sprintf>
    294e:	8d b7       	in	r24, 0x3d	; 61
    2950:	9e b7       	in	r25, 0x3e	; 62
    2952:	06 96       	adiw	r24, 0x06	; 6
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	9e bf       	out	0x3e, r25	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq, wpm);
    295e:	80 91 3c 01 	lds	r24, 0x013C
    2962:	90 91 3d 01 	lds	r25, 0x013D
    2966:	20 91 b6 01 	lds	r18, 0x01B6
    296a:	30 91 b7 01 	lds	r19, 0x01B7
    296e:	40 91 d8 01 	lds	r20, 0x01D8
    2972:	b9 01       	movw	r22, r18
    2974:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
							break;
    2978:	66 c0       	rjmp	.+204    	; 0x2a46 <main+0x1508>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    297a:	10 92 c0 01 	sts	0x01C0, r1
							cur_mode = RECORD;
    297e:	87 e0       	ldi	r24, 0x07	; 7
    2980:	80 93 9e 01 	sts	0x019E, r24

							announce("R", st_freq, wpm);
    2984:	20 91 b6 01 	lds	r18, 0x01B6
    2988:	30 91 b7 01 	lds	r19, 0x01B7
    298c:	40 91 d8 01 	lds	r20, 0x01D8
    2990:	87 e2       	ldi	r24, 0x27	; 39
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	b9 01       	movw	r22, r18
    2996:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
							break;
    299a:	55 c0       	rjmp	.+170    	; 0x2a46 <main+0x1508>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    29a2:	80 91 69 01 	lds	r24, 0x0169
    29a6:	80 93 9e 01 	sts	0x019E, r24

							read_voltage();
    29aa:	0e 94 c3 06 	call	0xd86	; 0xd86 <read_voltage>
							break;
    29ae:	4b c0       	rjmp	.+150    	; 0x2a46 <main+0x1508>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    29b0:	80 91 69 01 	lds	r24, 0x0169
    29b4:	88 23       	and	r24, r24
    29b6:	d9 f4       	brne	.+54     	; 0x29ee <main+0x14b0>
							{
								default_mode = SK;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	80 93 69 01 	sts	0x0169, r24
								cur_state = IDLE;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	80 93 c0 01 	sts	0x01C0, r24
								cur_mode = default_mode;
    29c4:	80 91 69 01 	lds	r24, 0x0169
    29c8:	80 93 9e 01 	sts	0x019E, r24
								eeprom_write_byte(&ee_keyer, FALSE);
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	0e 94 3e 1c 	call	0x387c	; 0x387c <__eewr_byte_m168>

								announce("S", st_freq, wpm);
    29d6:	20 91 b6 01 	lds	r18, 0x01B6
    29da:	30 91 b7 01 	lds	r19, 0x01B7
    29de:	40 91 d8 01 	lds	r20, 0x01D8
    29e2:	8b e1       	ldi	r24, 0x1B	; 27
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	b9 01       	movw	r22, r18
    29e8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
								cur_mode = default_mode;
								eeprom_write_byte(&ee_keyer, TRUE);

								announce("K", st_freq, wpm);
							}
							break;
    29ec:	2c c0       	rjmp	.+88     	; 0x2a46 <main+0x1508>

								announce("S", st_freq, wpm);
							}
							else
							{
								default_mode = KEYER;
    29ee:	10 92 69 01 	sts	0x0169, r1
								cur_state = IDLE;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 c0 01 	sts	0x01C0, r24
								cur_mode = default_mode;
    29f8:	80 91 69 01 	lds	r24, 0x0169
    29fc:	80 93 9e 01 	sts	0x019E, r24
								eeprom_write_byte(&ee_keyer, TRUE);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	0e 94 3e 1c 	call	0x387c	; 0x387c <__eewr_byte_m168>

								announce("K", st_freq, wpm);
    2a0a:	20 91 b6 01 	lds	r18, 0x01B6
    2a0e:	30 91 b7 01 	lds	r19, 0x01B7
    2a12:	40 91 d8 01 	lds	r20, 0x01D8
    2a16:	8c e2       	ldi	r24, 0x2C	; 44
    2a18:	91 e0       	ldi	r25, 0x01	; 1
    2a1a:	b9 01       	movw	r22, r18
    2a1c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
							}
							break;
    2a20:	12 c0       	rjmp	.+36     	; 0x2a46 <main+0x1508>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	80 93 c0 01 	sts	0x01C0, r24
					cur_mode = default_mode;
    2a28:	80 91 69 01 	lds	r24, 0x0169
    2a2c:	80 93 9e 01 	sts	0x019E, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    2a30:	20 91 d8 01 	lds	r18, 0x01D8
    2a34:	85 e2       	ldi	r24, 0x25	; 37
    2a36:	91 e0       	ldi	r25, 0x01	; 1
    2a38:	60 e9       	ldi	r22, 0x90	; 144
    2a3a:	71 e0       	ldi	r23, 0x01	; 1
    2a3c:	42 2f       	mov	r20, r18
    2a3e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <main+0x1508>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2a44:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
				}

				free(text_buffer);
    2a46:	80 91 3c 01 	lds	r24, 0x013C
    2a4a:	90 91 3d 01 	lds	r25, 0x013D
    2a4e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <free>
				break;
    2a52:	08 c0       	rjmp	.+16     	; 0x2a64 <main+0x1526>

			default:
				cur_state = IDLE;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	80 93 c0 01 	sts	0x01C0, r24
				cur_mode = default_mode;
    2a5a:	80 91 69 01 	lds	r24, 0x0169
    2a5e:	80 93 9e 01 	sts	0x019E, r24
				break;
    2a62:	00 00       	nop
			}
			break;
    2a64:	2b c3       	rjmp	.+1622   	; 0x30bc <main+0x1b7e>

		case SETWPM:
			if(cur_timer < cur_state_end)
    2a66:	20 91 64 01 	lds	r18, 0x0164
    2a6a:	30 91 65 01 	lds	r19, 0x0165
    2a6e:	40 91 66 01 	lds	r20, 0x0166
    2a72:	50 91 67 01 	lds	r21, 0x0167
    2a76:	80 91 ca 01 	lds	r24, 0x01CA
    2a7a:	90 91 cb 01 	lds	r25, 0x01CB
    2a7e:	a0 91 cc 01 	lds	r26, 0x01CC
    2a82:	b0 91 cd 01 	lds	r27, 0x01CD
    2a86:	28 17       	cp	r18, r24
    2a88:	39 07       	cpc	r19, r25
    2a8a:	4a 07       	cpc	r20, r26
    2a8c:	5b 07       	cpc	r21, r27
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <main+0x1554>
    2a90:	63 c0       	rjmp	.+198    	; 0x2b58 <main+0x161a>
			{
				if(cmd_btn == PRESS)
    2a92:	80 91 bf 01 	lds	r24, 0x01BF
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	69 f5       	brne	.+90     	; 0x2af4 <main+0x15b6>
				{
					if(wpm < MAX_WPM)
    2a9a:	80 91 d8 01 	lds	r24, 0x01D8
    2a9e:	88 32       	cpi	r24, 0x28	; 40
    2aa0:	28 f4       	brcc	.+10     	; 0x2aac <main+0x156e>
						wpm++;
    2aa2:	80 91 d8 01 	lds	r24, 0x01D8
    2aa6:	8f 5f       	subi	r24, 0xFF	; 255
    2aa8:	80 93 d8 01 	sts	0x01D8, r24
					set_wpm(wpm);
    2aac:	80 91 d8 01 	lds	r24, 0x01D8
    2ab0:	0e 94 ed 03 	call	0x7da	; 0x7da <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2ab4:	80 91 64 01 	lds	r24, 0x0164
    2ab8:	90 91 65 01 	lds	r25, 0x0165
    2abc:	a0 91 66 01 	lds	r26, 0x0166
    2ac0:	b0 91 67 01 	lds	r27, 0x0167
    2ac4:	80 56       	subi	r24, 0x60	; 96
    2ac6:	90 4f       	sbci	r25, 0xF0	; 240
    2ac8:	af 4f       	sbci	r26, 0xFF	; 255
    2aca:	bf 4f       	sbci	r27, 0xFF	; 255
    2acc:	80 93 ca 01 	sts	0x01CA, r24
    2ad0:	90 93 cb 01 	sts	0x01CB, r25
    2ad4:	a0 93 cc 01 	sts	0x01CC, r26
    2ad8:	b0 93 cd 01 	sts	0x01CD, r27
					announce("I", st_freq, wpm);
    2adc:	20 91 b6 01 	lds	r18, 0x01B6
    2ae0:	30 91 b7 01 	lds	r19, 0x01B7
    2ae4:	40 91 d8 01 	lds	r20, 0x01D8
    2ae8:	8e e2       	ldi	r24, 0x2E	; 46
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	b9 01       	movw	r22, r18
    2aee:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    2af2:	70 c0       	rjmp	.+224    	; 0x2bd4 <main+0x1696>
				}
				else if(msg_btn == PRESS)
    2af4:	80 91 bd 01 	lds	r24, 0x01BD
    2af8:	81 30       	cpi	r24, 0x01	; 1
    2afa:	09 f0       	breq	.+2      	; 0x2afe <main+0x15c0>
    2afc:	6b c0       	rjmp	.+214    	; 0x2bd4 <main+0x1696>
				{
					if(wpm > MIN_WPM)
    2afe:	80 91 d8 01 	lds	r24, 0x01D8
    2b02:	86 30       	cpi	r24, 0x06	; 6
    2b04:	28 f0       	brcs	.+10     	; 0x2b10 <main+0x15d2>
						wpm--;
    2b06:	80 91 d8 01 	lds	r24, 0x01D8
    2b0a:	81 50       	subi	r24, 0x01	; 1
    2b0c:	80 93 d8 01 	sts	0x01D8, r24
					set_wpm(wpm);
    2b10:	80 91 d8 01 	lds	r24, 0x01D8
    2b14:	0e 94 ed 03 	call	0x7da	; 0x7da <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2b18:	80 91 64 01 	lds	r24, 0x0164
    2b1c:	90 91 65 01 	lds	r25, 0x0165
    2b20:	a0 91 66 01 	lds	r26, 0x0166
    2b24:	b0 91 67 01 	lds	r27, 0x0167
    2b28:	80 56       	subi	r24, 0x60	; 96
    2b2a:	90 4f       	sbci	r25, 0xF0	; 240
    2b2c:	af 4f       	sbci	r26, 0xFF	; 255
    2b2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b30:	80 93 ca 01 	sts	0x01CA, r24
    2b34:	90 93 cb 01 	sts	0x01CB, r25
    2b38:	a0 93 cc 01 	sts	0x01CC, r26
    2b3c:	b0 93 cd 01 	sts	0x01CD, r27
					announce("I", st_freq, wpm);
    2b40:	20 91 b6 01 	lds	r18, 0x01B6
    2b44:	30 91 b7 01 	lds	r19, 0x01B7
    2b48:	40 91 d8 01 	lds	r20, 0x01D8
    2b4c:	8e e2       	ldi	r24, 0x2E	; 46
    2b4e:	91 e0       	ldi	r25, 0x01	; 1
    2b50:	b9 01       	movw	r22, r18
    2b52:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    2b56:	3e c0       	rjmp	.+124    	; 0x2bd4 <main+0x1696>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_write_byte(&ee_wpm, wpm);
    2b58:	20 91 d8 01 	lds	r18, 0x01D8
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	62 2f       	mov	r22, r18
    2b62:	0e 94 3e 1c 	call	0x387c	; 0x387c <__eewr_byte_m168>

				cur_state = IDLE;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	80 93 c0 01 	sts	0x01C0, r24
				cur_mode = default_mode;
    2b6c:	80 91 69 01 	lds	r24, 0x0169
    2b70:	80 93 9e 01 	sts	0x019E, r24

				sprintf(text_buffer, "%d", wpm);
    2b74:	40 91 3c 01 	lds	r20, 0x013C
    2b78:	50 91 3d 01 	lds	r21, 0x013D
    2b7c:	80 91 d8 01 	lds	r24, 0x01D8
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <main+0x1648>
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <main+0x164a>
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <main+0x164c>
    2b8a:	8d b7       	in	r24, 0x3d	; 61
    2b8c:	9e b7       	in	r25, 0x3e	; 62
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	fc 01       	movw	r30, r24
    2b92:	51 83       	std	Z+1, r21	; 0x01
    2b94:	40 83       	st	Z, r20
    2b96:	49 e2       	ldi	r20, 0x29	; 41
    2b98:	51 e0       	ldi	r21, 0x01	; 1
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	53 83       	std	Z+3, r21	; 0x03
    2b9e:	42 83       	std	Z+2, r20	; 0x02
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	35 83       	std	Z+5, r19	; 0x05
    2ba4:	24 83       	std	Z+4, r18	; 0x04
    2ba6:	0e 94 1c 1a 	call	0x3438	; 0x3438 <sprintf>
    2baa:	8d b7       	in	r24, 0x3d	; 61
    2bac:	9e b7       	in	r25, 0x3e	; 62
    2bae:	06 96       	adiw	r24, 0x06	; 6
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	9e bf       	out	0x3e, r25	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq, wpm);
    2bba:	80 91 3c 01 	lds	r24, 0x013C
    2bbe:	90 91 3d 01 	lds	r25, 0x013D
    2bc2:	20 91 b6 01 	lds	r18, 0x01B6
    2bc6:	30 91 b7 01 	lds	r19, 0x01B7
    2bca:	40 91 d8 01 	lds	r20, 0x01D8
    2bce:	b9 01       	movw	r22, r18
    2bd0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
			}
			break;
    2bd4:	73 c2       	rjmp	.+1254   	; 0x30bc <main+0x1b7e>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    2bd6:	80 91 d2 01 	lds	r24, 0x01D2
    2bda:	81 30       	cpi	r24, 0x01	; 1
    2bdc:	61 f0       	breq	.+24     	; 0x2bf6 <main+0x16b8>
    2bde:	80 91 bc 01 	lds	r24, 0x01BC
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	41 f0       	breq	.+16     	; 0x2bf6 <main+0x16b8>
    2be6:	80 91 bf 01 	lds	r24, 0x01BF
    2bea:	81 30       	cpi	r24, 0x01	; 1
    2bec:	21 f0       	breq	.+8      	; 0x2bf6 <main+0x16b8>
    2bee:	80 91 bd 01 	lds	r24, 0x01BD
    2bf2:	81 30       	cpi	r24, 0x01	; 1
    2bf4:	e9 f5       	brne	.+122    	; 0x2c70 <main+0x1732>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    2bf6:	80 91 dd 01 	lds	r24, 0x01DD
    2bfa:	90 91 de 01 	lds	r25, 0x01DE
    2bfe:	24 e2       	ldi	r18, 0x24	; 36
    2c00:	31 e0       	ldi	r19, 0x01	; 1
    2c02:	b9 01       	movw	r22, r18
    2c04:	41 e0       	ldi	r20, 0x01	; 1
    2c06:	50 e0       	ldi	r21, 0x00	; 0
    2c08:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <memcpy>
				cur_char_p = announce_buffer;
    2c0c:	80 91 dd 01 	lds	r24, 0x01DD
    2c10:	90 91 de 01 	lds	r25, 0x01DE
    2c14:	90 93 3b 01 	sts	0x013B, r25
    2c18:	80 93 3a 01 	sts	0x013A, r24
				cur_character = '\0';
    2c1c:	10 92 3e 01 	sts	0x013E, r1

				// Set back into previous mode
				mute_end = cur_timer;
    2c20:	80 91 64 01 	lds	r24, 0x0164
    2c24:	90 91 65 01 	lds	r25, 0x0165
    2c28:	a0 91 66 01 	lds	r26, 0x0166
    2c2c:	b0 91 67 01 	lds	r27, 0x0167
    2c30:	80 93 ce 01 	sts	0x01CE, r24
    2c34:	90 93 cf 01 	sts	0x01CF, r25
    2c38:	a0 93 d0 01 	sts	0x01D0, r26
    2c3c:	b0 93 d1 01 	sts	0x01D1, r27
				cur_mode = prev_mode;
    2c40:	80 91 b4 01 	lds	r24, 0x01B4
    2c44:	80 93 9e 01 	sts	0x019E, r24
				cur_state = prev_state;
    2c48:	80 91 6e 01 	lds	r24, 0x016E
    2c4c:	80 93 c0 01 	sts	0x01C0, r24
				cur_state_end = prev_state_end;
    2c50:	80 91 b0 01 	lds	r24, 0x01B0
    2c54:	90 91 b1 01 	lds	r25, 0x01B1
    2c58:	a0 91 b2 01 	lds	r26, 0x01B2
    2c5c:	b0 91 b3 01 	lds	r27, 0x01B3
    2c60:	80 93 ca 01 	sts	0x01CA, r24
    2c64:	90 93 cb 01 	sts	0x01CB, r25
    2c68:	a0 93 cc 01 	sts	0x01CC, r26
    2c6c:	b0 93 cd 01 	sts	0x01CD, r27
			}

			switch(cur_state)
    2c70:	80 91 c0 01 	lds	r24, 0x01C0
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	84 30       	cpi	r24, 0x04	; 4
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	44 f4       	brge	.+16     	; 0x2c8e <main+0x1750>
    2c7e:	82 30       	cpi	r24, 0x02	; 2
    2c80:	91 05       	cpc	r25, r1
    2c82:	0c f0       	brlt	.+2      	; 0x2c86 <main+0x1748>
    2c84:	bb c1       	rjmp	.+886    	; 0x2ffc <main+0x1abe>
    2c86:	81 30       	cpi	r24, 0x01	; 1
    2c88:	91 05       	cpc	r25, r1
    2c8a:	31 f0       	breq	.+12     	; 0x2c98 <main+0x175a>
    2c8c:	14 c2       	rjmp	.+1064   	; 0x30b6 <main+0x1b78>
    2c8e:	87 30       	cpi	r24, 0x07	; 7
    2c90:	91 05       	cpc	r25, r1
    2c92:	0c f0       	brlt	.+2      	; 0x2c96 <main+0x1758>
    2c94:	10 c2       	rjmp	.+1056   	; 0x30b6 <main+0x1b78>
    2c96:	ef c1       	rjmp	.+990    	; 0x3076 <main+0x1b38>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2c98:	20 91 3a 01 	lds	r18, 0x013A
    2c9c:	30 91 3b 01 	lds	r19, 0x013B
    2ca0:	80 91 dd 01 	lds	r24, 0x01DD
    2ca4:	90 91 de 01 	lds	r25, 0x01DE
    2ca8:	28 17       	cp	r18, r24
    2caa:	39 07       	cpc	r19, r25
    2cac:	c9 f4       	brne	.+50     	; 0x2ce0 <main+0x17a2>
    2cae:	80 91 3e 01 	lds	r24, 0x013E
    2cb2:	88 23       	and	r24, r24
    2cb4:	a9 f4       	brne	.+42     	; 0x2ce0 <main+0x17a2>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2cb6:	80 91 3a 01 	lds	r24, 0x013A
    2cba:	90 91 3b 01 	lds	r25, 0x013B
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	80 81       	ld	r24, Z
    2cc2:	88 2f       	mov	r24, r24
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	80 97       	sbiw	r24, 0x20	; 32
    2cc8:	88 59       	subi	r24, 0x98	; 152
    2cca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ccc:	99 87       	std	Y+9, r25	; 0x09
    2cce:	88 87       	std	Y+8, r24	; 0x08
    2cd0:	88 85       	ldd	r24, Y+8	; 0x08
    2cd2:	99 85       	ldd	r25, Y+9	; 0x09
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	14 91       	lpm	r17, Z+
    2cd8:	1a 87       	std	Y+10, r17	; 0x0a
    2cda:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cdc:	80 93 3e 01 	sts	0x013E, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2ce0:	80 91 3e 01 	lds	r24, 0x013E
    2ce4:	88 23       	and	r24, r24
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <main+0x17ac>
    2ce8:	4b c1       	rjmp	.+662    	; 0x2f80 <main+0x1a42>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2cea:	80 91 3e 01 	lds	r24, 0x013E
    2cee:	80 38       	cpi	r24, 0x80	; 128
    2cf0:	29 f0       	breq	.+10     	; 0x2cfc <main+0x17be>
    2cf2:	80 91 3e 01 	lds	r24, 0x013E
    2cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <main+0x17be>
    2cfa:	79 c0       	rjmp	.+242    	; 0x2dee <main+0x18b0>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    2cfc:	80 91 3e 01 	lds	r24, 0x013E
    2d00:	80 38       	cpi	r24, 0x80	; 128
    2d02:	21 f5       	brne	.+72     	; 0x2d4c <main+0x180e>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2d04:	20 91 6f 01 	lds	r18, 0x016F
    2d08:	30 91 70 01 	lds	r19, 0x0170
    2d0c:	c9 01       	movw	r24, r18
    2d0e:	88 0f       	add	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	82 0f       	add	r24, r18
    2d14:	93 1f       	adc	r25, r19
    2d16:	9c 01       	movw	r18, r24
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	80 91 64 01 	lds	r24, 0x0164
    2d20:	90 91 65 01 	lds	r25, 0x0165
    2d24:	a0 91 66 01 	lds	r26, 0x0166
    2d28:	b0 91 67 01 	lds	r27, 0x0167
    2d2c:	82 0f       	add	r24, r18
    2d2e:	93 1f       	adc	r25, r19
    2d30:	a4 1f       	adc	r26, r20
    2d32:	b5 1f       	adc	r27, r21
    2d34:	80 93 ca 01 	sts	0x01CA, r24
    2d38:	90 93 cb 01 	sts	0x01CB, r25
    2d3c:	a0 93 cc 01 	sts	0x01CC, r26
    2d40:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAHDELAY;
    2d44:	85 e0       	ldi	r24, 0x05	; 5
    2d46:	80 93 c0 01 	sts	0x01C0, r24
    2d4a:	27 c0       	rjmp	.+78     	; 0x2d9a <main+0x185c>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2d4c:	20 91 6f 01 	lds	r18, 0x016F
    2d50:	30 91 70 01 	lds	r19, 0x0170
    2d54:	c9 01       	movw	r24, r18
    2d56:	88 0f       	add	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	88 0f       	add	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	82 1b       	sub	r24, r18
    2d64:	93 0b       	sbc	r25, r19
    2d66:	9c 01       	movw	r18, r24
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	80 91 64 01 	lds	r24, 0x0164
    2d70:	90 91 65 01 	lds	r25, 0x0165
    2d74:	a0 91 66 01 	lds	r26, 0x0166
    2d78:	b0 91 67 01 	lds	r27, 0x0167
    2d7c:	82 0f       	add	r24, r18
    2d7e:	93 1f       	adc	r25, r19
    2d80:	a4 1f       	adc	r26, r20
    2d82:	b5 1f       	adc	r27, r21
    2d84:	80 93 ca 01 	sts	0x01CA, r24
    2d88:	90 93 cb 01 	sts	0x01CB, r25
    2d8c:	a0 93 cc 01 	sts	0x01CC, r26
    2d90:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAHDELAY;
    2d94:	85 e0       	ldi	r24, 0x05	; 5
    2d96:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    2d9a:	80 91 3a 01 	lds	r24, 0x013A
    2d9e:	90 91 3b 01 	lds	r25, 0x013B
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	90 93 3b 01 	sts	0x013B, r25
    2da8:	80 93 3a 01 	sts	0x013A, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2dac:	80 91 3a 01 	lds	r24, 0x013A
    2db0:	90 91 3b 01 	lds	r25, 0x013B
    2db4:	fc 01       	movw	r30, r24
    2db6:	80 81       	ld	r24, Z
    2db8:	88 23       	and	r24, r24
    2dba:	19 f4       	brne	.+6      	; 0x2dc2 <main+0x1884>
							cur_character = '\0';
    2dbc:	10 92 3e 01 	sts	0x013E, r1
    2dc0:	15 c0       	rjmp	.+42     	; 0x2dec <main+0x18ae>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2dc2:	80 91 3a 01 	lds	r24, 0x013A
    2dc6:	90 91 3b 01 	lds	r25, 0x013B
    2dca:	fc 01       	movw	r30, r24
    2dcc:	80 81       	ld	r24, Z
    2dce:	88 2f       	mov	r24, r24
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	80 97       	sbiw	r24, 0x20	; 32
    2dd4:	88 59       	subi	r24, 0x98	; 152
    2dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd8:	9c 87       	std	Y+12, r25	; 0x0c
    2dda:	8b 87       	std	Y+11, r24	; 0x0b
    2ddc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dde:	9c 85       	ldd	r25, Y+12	; 0x0c
    2de0:	fc 01       	movw	r30, r24
    2de2:	14 91       	lpm	r17, Z+
    2de4:	1d 87       	std	Y+13, r17	; 0x0d
    2de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de8:	80 93 3e 01 	sts	0x013E, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2dec:	c8 c0       	rjmp	.+400    	; 0x2f7e <main+0x1a40>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    2dee:	80 91 3e 01 	lds	r24, 0x013E
    2df2:	88 23       	and	r24, r24
    2df4:	0c f0       	brlt	.+2      	; 0x2df8 <main+0x18ba>
    2df6:	62 c0       	rjmp	.+196    	; 0x2ebc <main+0x197e>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2df8:	20 91 6f 01 	lds	r18, 0x016F
    2dfc:	30 91 70 01 	lds	r19, 0x0170
    2e00:	c9 01       	movw	r24, r18
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	82 0f       	add	r24, r18
    2e08:	93 1f       	adc	r25, r19
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	80 91 64 01 	lds	r24, 0x0164
    2e14:	90 91 65 01 	lds	r25, 0x0165
    2e18:	a0 91 66 01 	lds	r26, 0x0166
    2e1c:	b0 91 67 01 	lds	r27, 0x0167
    2e20:	82 0f       	add	r24, r18
    2e22:	93 1f       	adc	r25, r19
    2e24:	a4 1f       	adc	r26, r20
    2e26:	b5 1f       	adc	r27, r21
    2e28:	80 93 ca 01 	sts	0x01CA, r24
    2e2c:	90 93 cb 01 	sts	0x01CB, r25
    2e30:	a0 93 cc 01 	sts	0x01CC, r26
    2e34:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAH;
    2e38:	83 e0       	ldi	r24, 0x03	; 3
    2e3a:	80 93 c0 01 	sts	0x01C0, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2e3e:	80 91 64 01 	lds	r24, 0x0164
    2e42:	90 91 65 01 	lds	r25, 0x0165
    2e46:	a0 91 66 01 	lds	r26, 0x0166
    2e4a:	b0 91 67 01 	lds	r27, 0x0167
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	a1 1d       	adc	r26, r1
    2e52:	b1 1d       	adc	r27, r1
    2e54:	80 93 a4 01 	sts	0x01A4, r24
    2e58:	90 93 a5 01 	sts	0x01A5, r25
    2e5c:	a0 93 a6 01 	sts	0x01A6, r26
    2e60:	b0 93 a7 01 	sts	0x01A7, r27
							tx_end = cur_state_end;
    2e64:	80 91 ca 01 	lds	r24, 0x01CA
    2e68:	90 91 cb 01 	lds	r25, 0x01CB
    2e6c:	a0 91 cc 01 	lds	r26, 0x01CC
    2e70:	b0 91 cd 01 	lds	r27, 0x01CD
    2e74:	80 93 df 01 	sts	0x01DF, r24
    2e78:	90 93 e0 01 	sts	0x01E0, r25
    2e7c:	a0 93 e1 01 	sts	0x01E1, r26
    2e80:	b0 93 e2 01 	sts	0x01E2, r27
							mute_start = cur_timer;
    2e84:	80 91 64 01 	lds	r24, 0x0164
    2e88:	90 91 65 01 	lds	r25, 0x0165
    2e8c:	a0 91 66 01 	lds	r26, 0x0166
    2e90:	b0 91 67 01 	lds	r27, 0x0167
    2e94:	80 93 d9 01 	sts	0x01D9, r24
    2e98:	90 93 da 01 	sts	0x01DA, r25
    2e9c:	a0 93 db 01 	sts	0x01DB, r26
    2ea0:	b0 93 dc 01 	sts	0x01DC, r27
							mute_end = UINT32_MAX;
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
    2ea6:	9f ef       	ldi	r25, 0xFF	; 255
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	80 93 ce 01 	sts	0x01CE, r24
    2eae:	90 93 cf 01 	sts	0x01CF, r25
    2eb2:	a0 93 d0 01 	sts	0x01D0, r26
    2eb6:	b0 93 d1 01 	sts	0x01D1, r27
    2eba:	5c c0       	rjmp	.+184    	; 0x2f74 <main+0x1a36>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    2ebc:	80 91 6f 01 	lds	r24, 0x016F
    2ec0:	90 91 70 01 	lds	r25, 0x0170
    2ec4:	9c 01       	movw	r18, r24
    2ec6:	40 e0       	ldi	r20, 0x00	; 0
    2ec8:	50 e0       	ldi	r21, 0x00	; 0
    2eca:	80 91 64 01 	lds	r24, 0x0164
    2ece:	90 91 65 01 	lds	r25, 0x0165
    2ed2:	a0 91 66 01 	lds	r26, 0x0166
    2ed6:	b0 91 67 01 	lds	r27, 0x0167
    2eda:	82 0f       	add	r24, r18
    2edc:	93 1f       	adc	r25, r19
    2ede:	a4 1f       	adc	r26, r20
    2ee0:	b5 1f       	adc	r27, r21
    2ee2:	80 93 ca 01 	sts	0x01CA, r24
    2ee6:	90 93 cb 01 	sts	0x01CB, r25
    2eea:	a0 93 cc 01 	sts	0x01CC, r26
    2eee:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DIT;
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	80 93 c0 01 	sts	0x01C0, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2ef8:	80 91 64 01 	lds	r24, 0x0164
    2efc:	90 91 65 01 	lds	r25, 0x0165
    2f00:	a0 91 66 01 	lds	r26, 0x0166
    2f04:	b0 91 67 01 	lds	r27, 0x0167
    2f08:	01 96       	adiw	r24, 0x01	; 1
    2f0a:	a1 1d       	adc	r26, r1
    2f0c:	b1 1d       	adc	r27, r1
    2f0e:	80 93 a4 01 	sts	0x01A4, r24
    2f12:	90 93 a5 01 	sts	0x01A5, r25
    2f16:	a0 93 a6 01 	sts	0x01A6, r26
    2f1a:	b0 93 a7 01 	sts	0x01A7, r27
							tx_end = cur_state_end;
    2f1e:	80 91 ca 01 	lds	r24, 0x01CA
    2f22:	90 91 cb 01 	lds	r25, 0x01CB
    2f26:	a0 91 cc 01 	lds	r26, 0x01CC
    2f2a:	b0 91 cd 01 	lds	r27, 0x01CD
    2f2e:	80 93 df 01 	sts	0x01DF, r24
    2f32:	90 93 e0 01 	sts	0x01E0, r25
    2f36:	a0 93 e1 01 	sts	0x01E1, r26
    2f3a:	b0 93 e2 01 	sts	0x01E2, r27
							mute_start = cur_timer;
    2f3e:	80 91 64 01 	lds	r24, 0x0164
    2f42:	90 91 65 01 	lds	r25, 0x0165
    2f46:	a0 91 66 01 	lds	r26, 0x0166
    2f4a:	b0 91 67 01 	lds	r27, 0x0167
    2f4e:	80 93 d9 01 	sts	0x01D9, r24
    2f52:	90 93 da 01 	sts	0x01DA, r25
    2f56:	a0 93 db 01 	sts	0x01DB, r26
    2f5a:	b0 93 dc 01 	sts	0x01DC, r27
							mute_end = UINT32_MAX;
    2f5e:	8f ef       	ldi	r24, 0xFF	; 255
    2f60:	9f ef       	ldi	r25, 0xFF	; 255
    2f62:	dc 01       	movw	r26, r24
    2f64:	80 93 ce 01 	sts	0x01CE, r24
    2f68:	90 93 cf 01 	sts	0x01CF, r25
    2f6c:	a0 93 d0 01 	sts	0x01D0, r26
    2f70:	b0 93 d1 01 	sts	0x01D1, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    2f74:	80 91 3e 01 	lds	r24, 0x013E
    2f78:	88 0f       	add	r24, r24
    2f7a:	80 93 3e 01 	sts	0x013E, r24
    2f7e:	3d c0       	rjmp	.+122    	; 0x2ffa <main+0x1abc>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2f80:	80 91 dd 01 	lds	r24, 0x01DD
    2f84:	90 91 de 01 	lds	r25, 0x01DE
    2f88:	24 e2       	ldi	r18, 0x24	; 36
    2f8a:	31 e0       	ldi	r19, 0x01	; 1
    2f8c:	b9 01       	movw	r22, r18
    2f8e:	41 e0       	ldi	r20, 0x01	; 1
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <memcpy>
					cur_char_p = announce_buffer;
    2f96:	80 91 dd 01 	lds	r24, 0x01DD
    2f9a:	90 91 de 01 	lds	r25, 0x01DE
    2f9e:	90 93 3b 01 	sts	0x013B, r25
    2fa2:	80 93 3a 01 	sts	0x013A, r24
					cur_character = '\0';
    2fa6:	10 92 3e 01 	sts	0x013E, r1

					// Set back into previous mode
					mute_end = cur_timer;
    2faa:	80 91 64 01 	lds	r24, 0x0164
    2fae:	90 91 65 01 	lds	r25, 0x0165
    2fb2:	a0 91 66 01 	lds	r26, 0x0166
    2fb6:	b0 91 67 01 	lds	r27, 0x0167
    2fba:	80 93 ce 01 	sts	0x01CE, r24
    2fbe:	90 93 cf 01 	sts	0x01CF, r25
    2fc2:	a0 93 d0 01 	sts	0x01D0, r26
    2fc6:	b0 93 d1 01 	sts	0x01D1, r27
					cur_mode = prev_mode;
    2fca:	80 91 b4 01 	lds	r24, 0x01B4
    2fce:	80 93 9e 01 	sts	0x019E, r24
					cur_state = prev_state;
    2fd2:	80 91 6e 01 	lds	r24, 0x016E
    2fd6:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = prev_state_end;
    2fda:	80 91 b0 01 	lds	r24, 0x01B0
    2fde:	90 91 b1 01 	lds	r25, 0x01B1
    2fe2:	a0 91 b2 01 	lds	r26, 0x01B2
    2fe6:	b0 91 b3 01 	lds	r27, 0x01B3
    2fea:	80 93 ca 01 	sts	0x01CA, r24
    2fee:	90 93 cb 01 	sts	0x01CB, r25
    2ff2:	a0 93 cc 01 	sts	0x01CC, r26
    2ff6:	b0 93 cd 01 	sts	0x01CD, r27
				}
				break;
    2ffa:	5e c0       	rjmp	.+188    	; 0x30b8 <main+0x1b7a>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2ffc:	20 91 64 01 	lds	r18, 0x0164
    3000:	30 91 65 01 	lds	r19, 0x0165
    3004:	40 91 66 01 	lds	r20, 0x0166
    3008:	50 91 67 01 	lds	r21, 0x0167
    300c:	80 91 ca 01 	lds	r24, 0x01CA
    3010:	90 91 cb 01 	lds	r25, 0x01CB
    3014:	a0 91 cc 01 	lds	r26, 0x01CC
    3018:	b0 91 cd 01 	lds	r27, 0x01CD
    301c:	82 17       	cp	r24, r18
    301e:	93 07       	cpc	r25, r19
    3020:	a4 07       	cpc	r26, r20
    3022:	b5 07       	cpc	r27, r21
    3024:	f0 f4       	brcc	.+60     	; 0x3062 <main+0x1b24>
				{
					cur_state_end = cur_timer + dit_length;
    3026:	80 91 6f 01 	lds	r24, 0x016F
    302a:	90 91 70 01 	lds	r25, 0x0170
    302e:	9c 01       	movw	r18, r24
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	80 91 64 01 	lds	r24, 0x0164
    3038:	90 91 65 01 	lds	r25, 0x0165
    303c:	a0 91 66 01 	lds	r26, 0x0166
    3040:	b0 91 67 01 	lds	r27, 0x0167
    3044:	82 0f       	add	r24, r18
    3046:	93 1f       	adc	r25, r19
    3048:	a4 1f       	adc	r26, r20
    304a:	b5 1f       	adc	r27, r21
    304c:	80 93 ca 01 	sts	0x01CA, r24
    3050:	90 93 cb 01 	sts	0x01CB, r25
    3054:	a0 93 cc 01 	sts	0x01CC, r26
    3058:	b0 93 cd 01 	sts	0x01CD, r27
					cur_state = DITDELAY;
    305c:	84 e0       	ldi	r24, 0x04	; 4
    305e:	80 93 c0 01 	sts	0x01C0, r24
				}

				key_down = TRUE;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	80 93 38 01 	sts	0x0138, r24
				sidetone_on = TRUE;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	80 93 37 01 	sts	0x0137, r24
				break;
    3074:	21 c0       	rjmp	.+66     	; 0x30b8 <main+0x1b7a>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    3076:	20 91 64 01 	lds	r18, 0x0164
    307a:	30 91 65 01 	lds	r19, 0x0165
    307e:	40 91 66 01 	lds	r20, 0x0166
    3082:	50 91 67 01 	lds	r21, 0x0167
    3086:	80 91 ca 01 	lds	r24, 0x01CA
    308a:	90 91 cb 01 	lds	r25, 0x01CB
    308e:	a0 91 cc 01 	lds	r26, 0x01CC
    3092:	b0 91 cd 01 	lds	r27, 0x01CD
    3096:	82 17       	cp	r24, r18
    3098:	93 07       	cpc	r25, r19
    309a:	a4 07       	cpc	r26, r20
    309c:	b5 07       	cpc	r27, r21
    309e:	18 f4       	brcc	.+6      	; 0x30a6 <main+0x1b68>
					cur_state = IDLE;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	80 93 c0 01 	sts	0x01C0, r24

				key_down = FALSE;
    30a6:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    30aa:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	80 93 37 01 	sts	0x0137, r24
				break;
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <main+0x1b7a>

			default:
				break;
    30b6:	00 00       	nop
			}
			break;
    30b8:	01 c0       	rjmp	.+2      	; 0x30bc <main+0x1b7e>
				break;
			}
			break;
		*/
		default:
			break;
    30ba:	00 00       	nop
		} // END switch(cur_mode)

	}
    30bc:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <main+0xca>

000030c0 <__mulsi3>:
    30c0:	62 9f       	mul	r22, r18
    30c2:	d0 01       	movw	r26, r0
    30c4:	73 9f       	mul	r23, r19
    30c6:	f0 01       	movw	r30, r0
    30c8:	82 9f       	mul	r24, r18
    30ca:	e0 0d       	add	r30, r0
    30cc:	f1 1d       	adc	r31, r1
    30ce:	64 9f       	mul	r22, r20
    30d0:	e0 0d       	add	r30, r0
    30d2:	f1 1d       	adc	r31, r1
    30d4:	92 9f       	mul	r25, r18
    30d6:	f0 0d       	add	r31, r0
    30d8:	83 9f       	mul	r24, r19
    30da:	f0 0d       	add	r31, r0
    30dc:	74 9f       	mul	r23, r20
    30de:	f0 0d       	add	r31, r0
    30e0:	65 9f       	mul	r22, r21
    30e2:	f0 0d       	add	r31, r0
    30e4:	99 27       	eor	r25, r25
    30e6:	72 9f       	mul	r23, r18
    30e8:	b0 0d       	add	r27, r0
    30ea:	e1 1d       	adc	r30, r1
    30ec:	f9 1f       	adc	r31, r25
    30ee:	63 9f       	mul	r22, r19
    30f0:	b0 0d       	add	r27, r0
    30f2:	e1 1d       	adc	r30, r1
    30f4:	f9 1f       	adc	r31, r25
    30f6:	bd 01       	movw	r22, r26
    30f8:	cf 01       	movw	r24, r30
    30fa:	11 24       	eor	r1, r1
    30fc:	08 95       	ret

000030fe <__udivmodhi4>:
    30fe:	aa 1b       	sub	r26, r26
    3100:	bb 1b       	sub	r27, r27
    3102:	51 e1       	ldi	r21, 0x11	; 17
    3104:	07 c0       	rjmp	.+14     	; 0x3114 <__udivmodhi4_ep>

00003106 <__udivmodhi4_loop>:
    3106:	aa 1f       	adc	r26, r26
    3108:	bb 1f       	adc	r27, r27
    310a:	a6 17       	cp	r26, r22
    310c:	b7 07       	cpc	r27, r23
    310e:	10 f0       	brcs	.+4      	; 0x3114 <__udivmodhi4_ep>
    3110:	a6 1b       	sub	r26, r22
    3112:	b7 0b       	sbc	r27, r23

00003114 <__udivmodhi4_ep>:
    3114:	88 1f       	adc	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	5a 95       	dec	r21
    311a:	a9 f7       	brne	.-22     	; 0x3106 <__udivmodhi4_loop>
    311c:	80 95       	com	r24
    311e:	90 95       	com	r25
    3120:	bc 01       	movw	r22, r24
    3122:	cd 01       	movw	r24, r26
    3124:	08 95       	ret

00003126 <__divmodhi4>:
    3126:	97 fb       	bst	r25, 7
    3128:	09 2e       	mov	r0, r25
    312a:	07 26       	eor	r0, r23
    312c:	0a d0       	rcall	.+20     	; 0x3142 <__divmodhi4_neg1>
    312e:	77 fd       	sbrc	r23, 7
    3130:	04 d0       	rcall	.+8      	; 0x313a <__divmodhi4_neg2>
    3132:	e5 df       	rcall	.-54     	; 0x30fe <__udivmodhi4>
    3134:	06 d0       	rcall	.+12     	; 0x3142 <__divmodhi4_neg1>
    3136:	00 20       	and	r0, r0
    3138:	1a f4       	brpl	.+6      	; 0x3140 <__divmodhi4_exit>

0000313a <__divmodhi4_neg2>:
    313a:	70 95       	com	r23
    313c:	61 95       	neg	r22
    313e:	7f 4f       	sbci	r23, 0xFF	; 255

00003140 <__divmodhi4_exit>:
    3140:	08 95       	ret

00003142 <__divmodhi4_neg1>:
    3142:	f6 f7       	brtc	.-4      	; 0x3140 <__divmodhi4_exit>
    3144:	90 95       	com	r25
    3146:	81 95       	neg	r24
    3148:	9f 4f       	sbci	r25, 0xFF	; 255
    314a:	08 95       	ret

0000314c <__udivmodsi4>:
    314c:	a1 e2       	ldi	r26, 0x21	; 33
    314e:	1a 2e       	mov	r1, r26
    3150:	aa 1b       	sub	r26, r26
    3152:	bb 1b       	sub	r27, r27
    3154:	fd 01       	movw	r30, r26
    3156:	0d c0       	rjmp	.+26     	; 0x3172 <__udivmodsi4_ep>

00003158 <__udivmodsi4_loop>:
    3158:	aa 1f       	adc	r26, r26
    315a:	bb 1f       	adc	r27, r27
    315c:	ee 1f       	adc	r30, r30
    315e:	ff 1f       	adc	r31, r31
    3160:	a2 17       	cp	r26, r18
    3162:	b3 07       	cpc	r27, r19
    3164:	e4 07       	cpc	r30, r20
    3166:	f5 07       	cpc	r31, r21
    3168:	20 f0       	brcs	.+8      	; 0x3172 <__udivmodsi4_ep>
    316a:	a2 1b       	sub	r26, r18
    316c:	b3 0b       	sbc	r27, r19
    316e:	e4 0b       	sbc	r30, r20
    3170:	f5 0b       	sbc	r31, r21

00003172 <__udivmodsi4_ep>:
    3172:	66 1f       	adc	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	88 1f       	adc	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	1a 94       	dec	r1
    317c:	69 f7       	brne	.-38     	; 0x3158 <__udivmodsi4_loop>
    317e:	60 95       	com	r22
    3180:	70 95       	com	r23
    3182:	80 95       	com	r24
    3184:	90 95       	com	r25
    3186:	9b 01       	movw	r18, r22
    3188:	ac 01       	movw	r20, r24
    318a:	bd 01       	movw	r22, r26
    318c:	cf 01       	movw	r24, r30
    318e:	08 95       	ret

00003190 <malloc>:
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	82 30       	cpi	r24, 0x02	; 2
    3196:	91 05       	cpc	r25, r1
    3198:	10 f4       	brcc	.+4      	; 0x319e <malloc+0xe>
    319a:	82 e0       	ldi	r24, 0x02	; 2
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	e0 91 e8 01 	lds	r30, 0x01E8
    31a2:	f0 91 e9 01 	lds	r31, 0x01E9
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	26 c0       	rjmp	.+76     	; 0x31fc <malloc+0x6c>
    31b0:	60 81       	ld	r22, Z
    31b2:	71 81       	ldd	r23, Z+1	; 0x01
    31b4:	68 17       	cp	r22, r24
    31b6:	79 07       	cpc	r23, r25
    31b8:	e0 f0       	brcs	.+56     	; 0x31f2 <malloc+0x62>
    31ba:	68 17       	cp	r22, r24
    31bc:	79 07       	cpc	r23, r25
    31be:	81 f4       	brne	.+32     	; 0x31e0 <malloc+0x50>
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	21 15       	cp	r18, r1
    31c6:	31 05       	cpc	r19, r1
    31c8:	31 f0       	breq	.+12     	; 0x31d6 <malloc+0x46>
    31ca:	d9 01       	movw	r26, r18
    31cc:	13 96       	adiw	r26, 0x03	; 3
    31ce:	9c 93       	st	X, r25
    31d0:	8e 93       	st	-X, r24
    31d2:	12 97       	sbiw	r26, 0x02	; 2
    31d4:	2b c0       	rjmp	.+86     	; 0x322c <malloc+0x9c>
    31d6:	90 93 e9 01 	sts	0x01E9, r25
    31da:	80 93 e8 01 	sts	0x01E8, r24
    31de:	26 c0       	rjmp	.+76     	; 0x322c <malloc+0x9c>
    31e0:	41 15       	cp	r20, r1
    31e2:	51 05       	cpc	r21, r1
    31e4:	19 f0       	breq	.+6      	; 0x31ec <malloc+0x5c>
    31e6:	64 17       	cp	r22, r20
    31e8:	75 07       	cpc	r23, r21
    31ea:	18 f4       	brcc	.+6      	; 0x31f2 <malloc+0x62>
    31ec:	ab 01       	movw	r20, r22
    31ee:	e9 01       	movw	r28, r18
    31f0:	df 01       	movw	r26, r30
    31f2:	9f 01       	movw	r18, r30
    31f4:	72 81       	ldd	r23, Z+2	; 0x02
    31f6:	63 81       	ldd	r22, Z+3	; 0x03
    31f8:	e7 2f       	mov	r30, r23
    31fa:	f6 2f       	mov	r31, r22
    31fc:	30 97       	sbiw	r30, 0x00	; 0
    31fe:	c1 f6       	brne	.-80     	; 0x31b0 <malloc+0x20>
    3200:	41 15       	cp	r20, r1
    3202:	51 05       	cpc	r21, r1
    3204:	01 f1       	breq	.+64     	; 0x3246 <malloc+0xb6>
    3206:	48 1b       	sub	r20, r24
    3208:	59 0b       	sbc	r21, r25
    320a:	44 30       	cpi	r20, 0x04	; 4
    320c:	51 05       	cpc	r21, r1
    320e:	80 f4       	brcc	.+32     	; 0x3230 <malloc+0xa0>
    3210:	12 96       	adiw	r26, 0x02	; 2
    3212:	8d 91       	ld	r24, X+
    3214:	9c 91       	ld	r25, X
    3216:	13 97       	sbiw	r26, 0x03	; 3
    3218:	20 97       	sbiw	r28, 0x00	; 0
    321a:	19 f0       	breq	.+6      	; 0x3222 <malloc+0x92>
    321c:	9b 83       	std	Y+3, r25	; 0x03
    321e:	8a 83       	std	Y+2, r24	; 0x02
    3220:	04 c0       	rjmp	.+8      	; 0x322a <malloc+0x9a>
    3222:	90 93 e9 01 	sts	0x01E9, r25
    3226:	80 93 e8 01 	sts	0x01E8, r24
    322a:	fd 01       	movw	r30, r26
    322c:	32 96       	adiw	r30, 0x02	; 2
    322e:	46 c0       	rjmp	.+140    	; 0x32bc <malloc+0x12c>
    3230:	fd 01       	movw	r30, r26
    3232:	e4 0f       	add	r30, r20
    3234:	f5 1f       	adc	r31, r21
    3236:	81 93       	st	Z+, r24
    3238:	91 93       	st	Z+, r25
    323a:	42 50       	subi	r20, 0x02	; 2
    323c:	50 40       	sbci	r21, 0x00	; 0
    323e:	11 96       	adiw	r26, 0x01	; 1
    3240:	5c 93       	st	X, r21
    3242:	4e 93       	st	-X, r20
    3244:	3b c0       	rjmp	.+118    	; 0x32bc <malloc+0x12c>
    3246:	20 91 e6 01 	lds	r18, 0x01E6
    324a:	30 91 e7 01 	lds	r19, 0x01E7
    324e:	21 15       	cp	r18, r1
    3250:	31 05       	cpc	r19, r1
    3252:	41 f4       	brne	.+16     	; 0x3264 <malloc+0xd4>
    3254:	20 91 32 01 	lds	r18, 0x0132
    3258:	30 91 33 01 	lds	r19, 0x0133
    325c:	30 93 e7 01 	sts	0x01E7, r19
    3260:	20 93 e6 01 	sts	0x01E6, r18
    3264:	20 91 34 01 	lds	r18, 0x0134
    3268:	30 91 35 01 	lds	r19, 0x0135
    326c:	21 15       	cp	r18, r1
    326e:	31 05       	cpc	r19, r1
    3270:	41 f4       	brne	.+16     	; 0x3282 <malloc+0xf2>
    3272:	2d b7       	in	r18, 0x3d	; 61
    3274:	3e b7       	in	r19, 0x3e	; 62
    3276:	40 91 30 01 	lds	r20, 0x0130
    327a:	50 91 31 01 	lds	r21, 0x0131
    327e:	24 1b       	sub	r18, r20
    3280:	35 0b       	sbc	r19, r21
    3282:	e0 91 e6 01 	lds	r30, 0x01E6
    3286:	f0 91 e7 01 	lds	r31, 0x01E7
    328a:	e2 17       	cp	r30, r18
    328c:	f3 07       	cpc	r31, r19
    328e:	a0 f4       	brcc	.+40     	; 0x32b8 <malloc+0x128>
    3290:	2e 1b       	sub	r18, r30
    3292:	3f 0b       	sbc	r19, r31
    3294:	28 17       	cp	r18, r24
    3296:	39 07       	cpc	r19, r25
    3298:	78 f0       	brcs	.+30     	; 0x32b8 <malloc+0x128>
    329a:	ac 01       	movw	r20, r24
    329c:	4e 5f       	subi	r20, 0xFE	; 254
    329e:	5f 4f       	sbci	r21, 0xFF	; 255
    32a0:	24 17       	cp	r18, r20
    32a2:	35 07       	cpc	r19, r21
    32a4:	48 f0       	brcs	.+18     	; 0x32b8 <malloc+0x128>
    32a6:	4e 0f       	add	r20, r30
    32a8:	5f 1f       	adc	r21, r31
    32aa:	50 93 e7 01 	sts	0x01E7, r21
    32ae:	40 93 e6 01 	sts	0x01E6, r20
    32b2:	81 93       	st	Z+, r24
    32b4:	91 93       	st	Z+, r25
    32b6:	02 c0       	rjmp	.+4      	; 0x32bc <malloc+0x12c>
    32b8:	e0 e0       	ldi	r30, 0x00	; 0
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	cf 01       	movw	r24, r30
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	08 95       	ret

000032c4 <free>:
    32c4:	cf 93       	push	r28
    32c6:	df 93       	push	r29
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	09 f4       	brne	.+2      	; 0x32ce <free+0xa>
    32cc:	91 c0       	rjmp	.+290    	; 0x33f0 <free+0x12c>
    32ce:	fc 01       	movw	r30, r24
    32d0:	32 97       	sbiw	r30, 0x02	; 2
    32d2:	13 82       	std	Z+3, r1	; 0x03
    32d4:	12 82       	std	Z+2, r1	; 0x02
    32d6:	60 91 e8 01 	lds	r22, 0x01E8
    32da:	70 91 e9 01 	lds	r23, 0x01E9
    32de:	61 15       	cp	r22, r1
    32e0:	71 05       	cpc	r23, r1
    32e2:	81 f4       	brne	.+32     	; 0x3304 <free+0x40>
    32e4:	20 81       	ld	r18, Z
    32e6:	31 81       	ldd	r19, Z+1	; 0x01
    32e8:	28 0f       	add	r18, r24
    32ea:	39 1f       	adc	r19, r25
    32ec:	80 91 e6 01 	lds	r24, 0x01E6
    32f0:	90 91 e7 01 	lds	r25, 0x01E7
    32f4:	82 17       	cp	r24, r18
    32f6:	93 07       	cpc	r25, r19
    32f8:	99 f5       	brne	.+102    	; 0x3360 <free+0x9c>
    32fa:	f0 93 e7 01 	sts	0x01E7, r31
    32fe:	e0 93 e6 01 	sts	0x01E6, r30
    3302:	76 c0       	rjmp	.+236    	; 0x33f0 <free+0x12c>
    3304:	db 01       	movw	r26, r22
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <free+0x4c>
    330c:	cd 01       	movw	r24, r26
    330e:	d9 01       	movw	r26, r18
    3310:	ae 17       	cp	r26, r30
    3312:	bf 07       	cpc	r27, r31
    3314:	48 f4       	brcc	.+18     	; 0x3328 <free+0x64>
    3316:	12 96       	adiw	r26, 0x02	; 2
    3318:	2d 91       	ld	r18, X+
    331a:	3c 91       	ld	r19, X
    331c:	13 97       	sbiw	r26, 0x03	; 3
    331e:	21 15       	cp	r18, r1
    3320:	31 05       	cpc	r19, r1
    3322:	a1 f7       	brne	.-24     	; 0x330c <free+0x48>
    3324:	cd 01       	movw	r24, r26
    3326:	21 c0       	rjmp	.+66     	; 0x336a <free+0xa6>
    3328:	b3 83       	std	Z+3, r27	; 0x03
    332a:	a2 83       	std	Z+2, r26	; 0x02
    332c:	ef 01       	movw	r28, r30
    332e:	49 91       	ld	r20, Y+
    3330:	59 91       	ld	r21, Y+
    3332:	9e 01       	movw	r18, r28
    3334:	24 0f       	add	r18, r20
    3336:	35 1f       	adc	r19, r21
    3338:	a2 17       	cp	r26, r18
    333a:	b3 07       	cpc	r27, r19
    333c:	79 f4       	brne	.+30     	; 0x335c <free+0x98>
    333e:	2d 91       	ld	r18, X+
    3340:	3c 91       	ld	r19, X
    3342:	11 97       	sbiw	r26, 0x01	; 1
    3344:	24 0f       	add	r18, r20
    3346:	35 1f       	adc	r19, r21
    3348:	2e 5f       	subi	r18, 0xFE	; 254
    334a:	3f 4f       	sbci	r19, 0xFF	; 255
    334c:	31 83       	std	Z+1, r19	; 0x01
    334e:	20 83       	st	Z, r18
    3350:	12 96       	adiw	r26, 0x02	; 2
    3352:	2d 91       	ld	r18, X+
    3354:	3c 91       	ld	r19, X
    3356:	13 97       	sbiw	r26, 0x03	; 3
    3358:	33 83       	std	Z+3, r19	; 0x03
    335a:	22 83       	std	Z+2, r18	; 0x02
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	29 f4       	brne	.+10     	; 0x336a <free+0xa6>
    3360:	f0 93 e9 01 	sts	0x01E9, r31
    3364:	e0 93 e8 01 	sts	0x01E8, r30
    3368:	43 c0       	rjmp	.+134    	; 0x33f0 <free+0x12c>
    336a:	dc 01       	movw	r26, r24
    336c:	13 96       	adiw	r26, 0x03	; 3
    336e:	fc 93       	st	X, r31
    3370:	ee 93       	st	-X, r30
    3372:	12 97       	sbiw	r26, 0x02	; 2
    3374:	4d 91       	ld	r20, X+
    3376:	5d 91       	ld	r21, X+
    3378:	a4 0f       	add	r26, r20
    337a:	b5 1f       	adc	r27, r21
    337c:	ea 17       	cp	r30, r26
    337e:	fb 07       	cpc	r31, r27
    3380:	69 f4       	brne	.+26     	; 0x339c <free+0xd8>
    3382:	20 81       	ld	r18, Z
    3384:	31 81       	ldd	r19, Z+1	; 0x01
    3386:	24 0f       	add	r18, r20
    3388:	35 1f       	adc	r19, r21
    338a:	2e 5f       	subi	r18, 0xFE	; 254
    338c:	3f 4f       	sbci	r19, 0xFF	; 255
    338e:	ec 01       	movw	r28, r24
    3390:	39 83       	std	Y+1, r19	; 0x01
    3392:	28 83       	st	Y, r18
    3394:	22 81       	ldd	r18, Z+2	; 0x02
    3396:	33 81       	ldd	r19, Z+3	; 0x03
    3398:	3b 83       	std	Y+3, r19	; 0x03
    339a:	2a 83       	std	Y+2, r18	; 0x02
    339c:	e0 e0       	ldi	r30, 0x00	; 0
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <free+0xe2>
    33a2:	fb 01       	movw	r30, r22
    33a4:	bc 01       	movw	r22, r24
    33a6:	db 01       	movw	r26, r22
    33a8:	12 96       	adiw	r26, 0x02	; 2
    33aa:	8d 91       	ld	r24, X+
    33ac:	9c 91       	ld	r25, X
    33ae:	13 97       	sbiw	r26, 0x03	; 3
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	b9 f7       	brne	.-18     	; 0x33a2 <free+0xde>
    33b4:	9b 01       	movw	r18, r22
    33b6:	2e 5f       	subi	r18, 0xFE	; 254
    33b8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ba:	8d 91       	ld	r24, X+
    33bc:	9c 91       	ld	r25, X
    33be:	11 97       	sbiw	r26, 0x01	; 1
    33c0:	82 0f       	add	r24, r18
    33c2:	93 1f       	adc	r25, r19
    33c4:	40 91 e6 01 	lds	r20, 0x01E6
    33c8:	50 91 e7 01 	lds	r21, 0x01E7
    33cc:	48 17       	cp	r20, r24
    33ce:	59 07       	cpc	r21, r25
    33d0:	79 f4       	brne	.+30     	; 0x33f0 <free+0x12c>
    33d2:	30 97       	sbiw	r30, 0x00	; 0
    33d4:	29 f4       	brne	.+10     	; 0x33e0 <free+0x11c>
    33d6:	10 92 e9 01 	sts	0x01E9, r1
    33da:	10 92 e8 01 	sts	0x01E8, r1
    33de:	02 c0       	rjmp	.+4      	; 0x33e4 <free+0x120>
    33e0:	13 82       	std	Z+3, r1	; 0x03
    33e2:	12 82       	std	Z+2, r1	; 0x02
    33e4:	22 50       	subi	r18, 0x02	; 2
    33e6:	30 40       	sbci	r19, 0x00	; 0
    33e8:	30 93 e7 01 	sts	0x01E7, r19
    33ec:	20 93 e6 01 	sts	0x01E6, r18
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	08 95       	ret

000033f6 <memcpy>:
    33f6:	fb 01       	movw	r30, r22
    33f8:	dc 01       	movw	r26, r24
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <memcpy+0xa>
    33fc:	01 90       	ld	r0, Z+
    33fe:	0d 92       	st	X+, r0
    3400:	41 50       	subi	r20, 0x01	; 1
    3402:	50 40       	sbci	r21, 0x00	; 0
    3404:	d8 f7       	brcc	.-10     	; 0x33fc <memcpy+0x6>
    3406:	08 95       	ret

00003408 <memset>:
    3408:	dc 01       	movw	r26, r24
    340a:	01 c0       	rjmp	.+2      	; 0x340e <memset+0x6>
    340c:	6d 93       	st	X+, r22
    340e:	41 50       	subi	r20, 0x01	; 1
    3410:	50 40       	sbci	r21, 0x00	; 0
    3412:	e0 f7       	brcc	.-8      	; 0x340c <memset+0x4>
    3414:	08 95       	ret

00003416 <strcpy>:
    3416:	fb 01       	movw	r30, r22
    3418:	dc 01       	movw	r26, r24
    341a:	01 90       	ld	r0, Z+
    341c:	0d 92       	st	X+, r0
    341e:	00 20       	and	r0, r0
    3420:	e1 f7       	brne	.-8      	; 0x341a <strcpy+0x4>
    3422:	08 95       	ret

00003424 <strupr>:
    3424:	dc 01       	movw	r26, r24
    3426:	6c 91       	ld	r22, X
    3428:	61 56       	subi	r22, 0x61	; 97
    342a:	6a 31       	cpi	r22, 0x1A	; 26
    342c:	08 f0       	brcs	.+2      	; 0x3430 <strupr+0xc>
    342e:	60 5e       	subi	r22, 0xE0	; 224
    3430:	6f 5b       	subi	r22, 0xBF	; 191
    3432:	6d 93       	st	X+, r22
    3434:	c1 f7       	brne	.-16     	; 0x3426 <strupr+0x2>
    3436:	08 95       	ret

00003438 <sprintf>:
    3438:	ae e0       	ldi	r26, 0x0E	; 14
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e2 e2       	ldi	r30, 0x22	; 34
    343e:	fa e1       	ldi	r31, 0x1A	; 26
    3440:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__prologue_saves__+0x1c>
    3444:	0d 89       	ldd	r16, Y+21	; 0x15
    3446:	1e 89       	ldd	r17, Y+22	; 0x16
    3448:	86 e0       	ldi	r24, 0x06	; 6
    344a:	8c 83       	std	Y+4, r24	; 0x04
    344c:	1a 83       	std	Y+2, r17	; 0x02
    344e:	09 83       	std	Y+1, r16	; 0x01
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	9f e7       	ldi	r25, 0x7F	; 127
    3454:	9e 83       	std	Y+6, r25	; 0x06
    3456:	8d 83       	std	Y+5, r24	; 0x05
    3458:	9e 01       	movw	r18, r28
    345a:	27 5e       	subi	r18, 0xE7	; 231
    345c:	3f 4f       	sbci	r19, 0xFF	; 255
    345e:	ce 01       	movw	r24, r28
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	6f 89       	ldd	r22, Y+23	; 0x17
    3464:	78 8d       	ldd	r23, Y+24	; 0x18
    3466:	a9 01       	movw	r20, r18
    3468:	0e 94 3f 1a 	call	0x347e	; 0x347e <vfprintf>
    346c:	ef 81       	ldd	r30, Y+7	; 0x07
    346e:	f8 85       	ldd	r31, Y+8	; 0x08
    3470:	e0 0f       	add	r30, r16
    3472:	f1 1f       	adc	r31, r17
    3474:	10 82       	st	Z, r1
    3476:	2e 96       	adiw	r28, 0x0e	; 14
    3478:	e4 e0       	ldi	r30, 0x04	; 4
    347a:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <__epilogue_restores__+0x1c>

0000347e <vfprintf>:
    347e:	ac e0       	ldi	r26, 0x0C	; 12
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e5 e4       	ldi	r30, 0x45	; 69
    3484:	fa e1       	ldi	r31, 0x1A	; 26
    3486:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <__prologue_saves__>
    348a:	6c 01       	movw	r12, r24
    348c:	1b 01       	movw	r2, r22
    348e:	8a 01       	movw	r16, r20
    3490:	fc 01       	movw	r30, r24
    3492:	17 82       	std	Z+7, r1	; 0x07
    3494:	16 82       	std	Z+6, r1	; 0x06
    3496:	83 81       	ldd	r24, Z+3	; 0x03
    3498:	81 ff       	sbrs	r24, 1
    349a:	d1 c1       	rjmp	.+930    	; 0x383e <vfprintf+0x3c0>
    349c:	2e 01       	movw	r4, r28
    349e:	08 94       	sec
    34a0:	41 1c       	adc	r4, r1
    34a2:	51 1c       	adc	r5, r1
    34a4:	f6 01       	movw	r30, r12
    34a6:	93 81       	ldd	r25, Z+3	; 0x03
    34a8:	f1 01       	movw	r30, r2
    34aa:	93 fd       	sbrc	r25, 3
    34ac:	85 91       	lpm	r24, Z+
    34ae:	93 ff       	sbrs	r25, 3
    34b0:	81 91       	ld	r24, Z+
    34b2:	1f 01       	movw	r2, r30
    34b4:	88 23       	and	r24, r24
    34b6:	09 f4       	brne	.+2      	; 0x34ba <vfprintf+0x3c>
    34b8:	be c1       	rjmp	.+892    	; 0x3836 <vfprintf+0x3b8>
    34ba:	85 32       	cpi	r24, 0x25	; 37
    34bc:	39 f4       	brne	.+14     	; 0x34cc <vfprintf+0x4e>
    34be:	93 fd       	sbrc	r25, 3
    34c0:	85 91       	lpm	r24, Z+
    34c2:	93 ff       	sbrs	r25, 3
    34c4:	81 91       	ld	r24, Z+
    34c6:	1f 01       	movw	r2, r30
    34c8:	85 32       	cpi	r24, 0x25	; 37
    34ca:	29 f4       	brne	.+10     	; 0x34d6 <vfprintf+0x58>
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	b6 01       	movw	r22, r12
    34d0:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    34d4:	e7 cf       	rjmp	.-50     	; 0x34a4 <vfprintf+0x26>
    34d6:	ee 24       	eor	r14, r14
    34d8:	ff 24       	eor	r15, r15
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	20 32       	cpi	r18, 0x20	; 32
    34de:	b0 f4       	brcc	.+44     	; 0x350c <vfprintf+0x8e>
    34e0:	8b 32       	cpi	r24, 0x2B	; 43
    34e2:	69 f0       	breq	.+26     	; 0x34fe <vfprintf+0x80>
    34e4:	8c 32       	cpi	r24, 0x2C	; 44
    34e6:	28 f4       	brcc	.+10     	; 0x34f2 <vfprintf+0x74>
    34e8:	80 32       	cpi	r24, 0x20	; 32
    34ea:	51 f0       	breq	.+20     	; 0x3500 <vfprintf+0x82>
    34ec:	83 32       	cpi	r24, 0x23	; 35
    34ee:	71 f4       	brne	.+28     	; 0x350c <vfprintf+0x8e>
    34f0:	0b c0       	rjmp	.+22     	; 0x3508 <vfprintf+0x8a>
    34f2:	8d 32       	cpi	r24, 0x2D	; 45
    34f4:	39 f0       	breq	.+14     	; 0x3504 <vfprintf+0x86>
    34f6:	80 33       	cpi	r24, 0x30	; 48
    34f8:	49 f4       	brne	.+18     	; 0x350c <vfprintf+0x8e>
    34fa:	21 60       	ori	r18, 0x01	; 1
    34fc:	2c c0       	rjmp	.+88     	; 0x3556 <vfprintf+0xd8>
    34fe:	22 60       	ori	r18, 0x02	; 2
    3500:	24 60       	ori	r18, 0x04	; 4
    3502:	29 c0       	rjmp	.+82     	; 0x3556 <vfprintf+0xd8>
    3504:	28 60       	ori	r18, 0x08	; 8
    3506:	27 c0       	rjmp	.+78     	; 0x3556 <vfprintf+0xd8>
    3508:	20 61       	ori	r18, 0x10	; 16
    350a:	25 c0       	rjmp	.+74     	; 0x3556 <vfprintf+0xd8>
    350c:	27 fd       	sbrc	r18, 7
    350e:	2c c0       	rjmp	.+88     	; 0x3568 <vfprintf+0xea>
    3510:	38 2f       	mov	r19, r24
    3512:	30 53       	subi	r19, 0x30	; 48
    3514:	3a 30       	cpi	r19, 0x0A	; 10
    3516:	98 f4       	brcc	.+38     	; 0x353e <vfprintf+0xc0>
    3518:	26 ff       	sbrs	r18, 6
    351a:	08 c0       	rjmp	.+16     	; 0x352c <vfprintf+0xae>
    351c:	8e 2d       	mov	r24, r14
    351e:	88 0f       	add	r24, r24
    3520:	e8 2e       	mov	r14, r24
    3522:	ee 0c       	add	r14, r14
    3524:	ee 0c       	add	r14, r14
    3526:	e8 0e       	add	r14, r24
    3528:	e3 0e       	add	r14, r19
    352a:	15 c0       	rjmp	.+42     	; 0x3556 <vfprintf+0xd8>
    352c:	8f 2d       	mov	r24, r15
    352e:	88 0f       	add	r24, r24
    3530:	f8 2e       	mov	r15, r24
    3532:	ff 0c       	add	r15, r15
    3534:	ff 0c       	add	r15, r15
    3536:	f8 0e       	add	r15, r24
    3538:	f3 0e       	add	r15, r19
    353a:	20 62       	ori	r18, 0x20	; 32
    353c:	0c c0       	rjmp	.+24     	; 0x3556 <vfprintf+0xd8>
    353e:	8e 32       	cpi	r24, 0x2E	; 46
    3540:	21 f4       	brne	.+8      	; 0x354a <vfprintf+0xcc>
    3542:	26 fd       	sbrc	r18, 6
    3544:	78 c1       	rjmp	.+752    	; 0x3836 <vfprintf+0x3b8>
    3546:	20 64       	ori	r18, 0x40	; 64
    3548:	06 c0       	rjmp	.+12     	; 0x3556 <vfprintf+0xd8>
    354a:	8c 36       	cpi	r24, 0x6C	; 108
    354c:	11 f4       	brne	.+4      	; 0x3552 <vfprintf+0xd4>
    354e:	20 68       	ori	r18, 0x80	; 128
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <vfprintf+0xd8>
    3552:	88 36       	cpi	r24, 0x68	; 104
    3554:	49 f4       	brne	.+18     	; 0x3568 <vfprintf+0xea>
    3556:	f1 01       	movw	r30, r2
    3558:	93 fd       	sbrc	r25, 3
    355a:	85 91       	lpm	r24, Z+
    355c:	93 ff       	sbrs	r25, 3
    355e:	81 91       	ld	r24, Z+
    3560:	1f 01       	movw	r2, r30
    3562:	88 23       	and	r24, r24
    3564:	09 f0       	breq	.+2      	; 0x3568 <vfprintf+0xea>
    3566:	ba cf       	rjmp	.-140    	; 0x34dc <vfprintf+0x5e>
    3568:	98 2f       	mov	r25, r24
    356a:	95 54       	subi	r25, 0x45	; 69
    356c:	93 30       	cpi	r25, 0x03	; 3
    356e:	18 f0       	brcs	.+6      	; 0x3576 <vfprintf+0xf8>
    3570:	90 52       	subi	r25, 0x20	; 32
    3572:	93 30       	cpi	r25, 0x03	; 3
    3574:	28 f4       	brcc	.+10     	; 0x3580 <vfprintf+0x102>
    3576:	0c 5f       	subi	r16, 0xFC	; 252
    3578:	1f 4f       	sbci	r17, 0xFF	; 255
    357a:	ff e3       	ldi	r31, 0x3F	; 63
    357c:	f9 83       	std	Y+1, r31	; 0x01
    357e:	0d c0       	rjmp	.+26     	; 0x359a <vfprintf+0x11c>
    3580:	83 36       	cpi	r24, 0x63	; 99
    3582:	31 f0       	breq	.+12     	; 0x3590 <vfprintf+0x112>
    3584:	83 37       	cpi	r24, 0x73	; 115
    3586:	71 f0       	breq	.+28     	; 0x35a4 <vfprintf+0x126>
    3588:	83 35       	cpi	r24, 0x53	; 83
    358a:	09 f0       	breq	.+2      	; 0x358e <vfprintf+0x110>
    358c:	60 c0       	rjmp	.+192    	; 0x364e <vfprintf+0x1d0>
    358e:	22 c0       	rjmp	.+68     	; 0x35d4 <vfprintf+0x156>
    3590:	f8 01       	movw	r30, r16
    3592:	80 81       	ld	r24, Z
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	0e 5f       	subi	r16, 0xFE	; 254
    3598:	1f 4f       	sbci	r17, 0xFF	; 255
    359a:	42 01       	movw	r8, r4
    359c:	71 e0       	ldi	r23, 0x01	; 1
    359e:	a7 2e       	mov	r10, r23
    35a0:	b1 2c       	mov	r11, r1
    35a2:	16 c0       	rjmp	.+44     	; 0x35d0 <vfprintf+0x152>
    35a4:	62 e0       	ldi	r22, 0x02	; 2
    35a6:	66 2e       	mov	r6, r22
    35a8:	71 2c       	mov	r7, r1
    35aa:	60 0e       	add	r6, r16
    35ac:	71 1e       	adc	r7, r17
    35ae:	f8 01       	movw	r30, r16
    35b0:	80 80       	ld	r8, Z
    35b2:	91 80       	ldd	r9, Z+1	; 0x01
    35b4:	26 ff       	sbrs	r18, 6
    35b6:	03 c0       	rjmp	.+6      	; 0x35be <vfprintf+0x140>
    35b8:	6e 2d       	mov	r22, r14
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	02 c0       	rjmp	.+4      	; 0x35c2 <vfprintf+0x144>
    35be:	6f ef       	ldi	r22, 0xFF	; 255
    35c0:	7f ef       	ldi	r23, 0xFF	; 255
    35c2:	c4 01       	movw	r24, r8
    35c4:	2c 87       	std	Y+12, r18	; 0x0c
    35c6:	0e 94 57 1c 	call	0x38ae	; 0x38ae <strnlen>
    35ca:	5c 01       	movw	r10, r24
    35cc:	83 01       	movw	r16, r6
    35ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    35d0:	2f 77       	andi	r18, 0x7F	; 127
    35d2:	17 c0       	rjmp	.+46     	; 0x3602 <vfprintf+0x184>
    35d4:	52 e0       	ldi	r21, 0x02	; 2
    35d6:	65 2e       	mov	r6, r21
    35d8:	71 2c       	mov	r7, r1
    35da:	60 0e       	add	r6, r16
    35dc:	71 1e       	adc	r7, r17
    35de:	f8 01       	movw	r30, r16
    35e0:	80 80       	ld	r8, Z
    35e2:	91 80       	ldd	r9, Z+1	; 0x01
    35e4:	26 ff       	sbrs	r18, 6
    35e6:	03 c0       	rjmp	.+6      	; 0x35ee <vfprintf+0x170>
    35e8:	6e 2d       	mov	r22, r14
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <vfprintf+0x174>
    35ee:	6f ef       	ldi	r22, 0xFF	; 255
    35f0:	7f ef       	ldi	r23, 0xFF	; 255
    35f2:	c4 01       	movw	r24, r8
    35f4:	2c 87       	std	Y+12, r18	; 0x0c
    35f6:	0e 94 4c 1c 	call	0x3898	; 0x3898 <strnlen_P>
    35fa:	5c 01       	movw	r10, r24
    35fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    35fe:	20 68       	ori	r18, 0x80	; 128
    3600:	83 01       	movw	r16, r6
    3602:	23 fd       	sbrc	r18, 3
    3604:	20 c0       	rjmp	.+64     	; 0x3646 <vfprintf+0x1c8>
    3606:	08 c0       	rjmp	.+16     	; 0x3618 <vfprintf+0x19a>
    3608:	80 e2       	ldi	r24, 0x20	; 32
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	b6 01       	movw	r22, r12
    360e:	2c 87       	std	Y+12, r18	; 0x0c
    3610:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    3614:	fa 94       	dec	r15
    3616:	2c 85       	ldd	r18, Y+12	; 0x0c
    3618:	8f 2d       	mov	r24, r15
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a8 16       	cp	r10, r24
    361e:	b9 06       	cpc	r11, r25
    3620:	98 f3       	brcs	.-26     	; 0x3608 <vfprintf+0x18a>
    3622:	11 c0       	rjmp	.+34     	; 0x3646 <vfprintf+0x1c8>
    3624:	f4 01       	movw	r30, r8
    3626:	27 fd       	sbrc	r18, 7
    3628:	85 91       	lpm	r24, Z+
    362a:	27 ff       	sbrs	r18, 7
    362c:	81 91       	ld	r24, Z+
    362e:	4f 01       	movw	r8, r30
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	b6 01       	movw	r22, r12
    3634:	2c 87       	std	Y+12, r18	; 0x0c
    3636:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    363a:	2c 85       	ldd	r18, Y+12	; 0x0c
    363c:	f1 10       	cpse	r15, r1
    363e:	fa 94       	dec	r15
    3640:	08 94       	sec
    3642:	a1 08       	sbc	r10, r1
    3644:	b1 08       	sbc	r11, r1
    3646:	a1 14       	cp	r10, r1
    3648:	b1 04       	cpc	r11, r1
    364a:	61 f7       	brne	.-40     	; 0x3624 <vfprintf+0x1a6>
    364c:	f1 c0       	rjmp	.+482    	; 0x3830 <vfprintf+0x3b2>
    364e:	84 36       	cpi	r24, 0x64	; 100
    3650:	11 f0       	breq	.+4      	; 0x3656 <vfprintf+0x1d8>
    3652:	89 36       	cpi	r24, 0x69	; 105
    3654:	49 f5       	brne	.+82     	; 0x36a8 <vfprintf+0x22a>
    3656:	27 ff       	sbrs	r18, 7
    3658:	08 c0       	rjmp	.+16     	; 0x366a <vfprintf+0x1ec>
    365a:	f8 01       	movw	r30, r16
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	0c 5f       	subi	r16, 0xFC	; 252
    3666:	1f 4f       	sbci	r17, 0xFF	; 255
    3668:	09 c0       	rjmp	.+18     	; 0x367c <vfprintf+0x1fe>
    366a:	f8 01       	movw	r30, r16
    366c:	60 81       	ld	r22, Z
    366e:	71 81       	ldd	r23, Z+1	; 0x01
    3670:	88 27       	eor	r24, r24
    3672:	77 fd       	sbrc	r23, 7
    3674:	80 95       	com	r24
    3676:	98 2f       	mov	r25, r24
    3678:	0e 5f       	subi	r16, 0xFE	; 254
    367a:	1f 4f       	sbci	r17, 0xFF	; 255
    367c:	4f e6       	ldi	r20, 0x6F	; 111
    367e:	b4 2e       	mov	r11, r20
    3680:	b2 22       	and	r11, r18
    3682:	97 ff       	sbrs	r25, 7
    3684:	09 c0       	rjmp	.+18     	; 0x3698 <vfprintf+0x21a>
    3686:	90 95       	com	r25
    3688:	80 95       	com	r24
    368a:	70 95       	com	r23
    368c:	61 95       	neg	r22
    368e:	7f 4f       	sbci	r23, 0xFF	; 255
    3690:	8f 4f       	sbci	r24, 0xFF	; 255
    3692:	9f 4f       	sbci	r25, 0xFF	; 255
    3694:	f0 e8       	ldi	r31, 0x80	; 128
    3696:	bf 2a       	or	r11, r31
    3698:	a2 01       	movw	r20, r4
    369a:	2a e0       	ldi	r18, 0x0A	; 10
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	0e 94 8e 1c 	call	0x391c	; 0x391c <__ultoa_invert>
    36a2:	78 2e       	mov	r7, r24
    36a4:	74 18       	sub	r7, r4
    36a6:	45 c0       	rjmp	.+138    	; 0x3732 <vfprintf+0x2b4>
    36a8:	85 37       	cpi	r24, 0x75	; 117
    36aa:	31 f4       	brne	.+12     	; 0x36b8 <vfprintf+0x23a>
    36ac:	3f ee       	ldi	r19, 0xEF	; 239
    36ae:	b3 2e       	mov	r11, r19
    36b0:	b2 22       	and	r11, r18
    36b2:	2a e0       	ldi	r18, 0x0A	; 10
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	25 c0       	rjmp	.+74     	; 0x3702 <vfprintf+0x284>
    36b8:	99 ef       	ldi	r25, 0xF9	; 249
    36ba:	b9 2e       	mov	r11, r25
    36bc:	b2 22       	and	r11, r18
    36be:	8f 36       	cpi	r24, 0x6F	; 111
    36c0:	c1 f0       	breq	.+48     	; 0x36f2 <vfprintf+0x274>
    36c2:	80 37       	cpi	r24, 0x70	; 112
    36c4:	20 f4       	brcc	.+8      	; 0x36ce <vfprintf+0x250>
    36c6:	88 35       	cpi	r24, 0x58	; 88
    36c8:	09 f0       	breq	.+2      	; 0x36cc <vfprintf+0x24e>
    36ca:	b5 c0       	rjmp	.+362    	; 0x3836 <vfprintf+0x3b8>
    36cc:	0d c0       	rjmp	.+26     	; 0x36e8 <vfprintf+0x26a>
    36ce:	80 37       	cpi	r24, 0x70	; 112
    36d0:	21 f0       	breq	.+8      	; 0x36da <vfprintf+0x25c>
    36d2:	88 37       	cpi	r24, 0x78	; 120
    36d4:	09 f0       	breq	.+2      	; 0x36d8 <vfprintf+0x25a>
    36d6:	af c0       	rjmp	.+350    	; 0x3836 <vfprintf+0x3b8>
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <vfprintf+0x260>
    36da:	20 e1       	ldi	r18, 0x10	; 16
    36dc:	b2 2a       	or	r11, r18
    36de:	b4 fe       	sbrs	r11, 4
    36e0:	0b c0       	rjmp	.+22     	; 0x36f8 <vfprintf+0x27a>
    36e2:	84 e0       	ldi	r24, 0x04	; 4
    36e4:	b8 2a       	or	r11, r24
    36e6:	08 c0       	rjmp	.+16     	; 0x36f8 <vfprintf+0x27a>
    36e8:	b4 fe       	sbrs	r11, 4
    36ea:	09 c0       	rjmp	.+18     	; 0x36fe <vfprintf+0x280>
    36ec:	e6 e0       	ldi	r30, 0x06	; 6
    36ee:	be 2a       	or	r11, r30
    36f0:	06 c0       	rjmp	.+12     	; 0x36fe <vfprintf+0x280>
    36f2:	28 e0       	ldi	r18, 0x08	; 8
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	05 c0       	rjmp	.+10     	; 0x3702 <vfprintf+0x284>
    36f8:	20 e1       	ldi	r18, 0x10	; 16
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <vfprintf+0x284>
    36fe:	20 e1       	ldi	r18, 0x10	; 16
    3700:	32 e0       	ldi	r19, 0x02	; 2
    3702:	b7 fe       	sbrs	r11, 7
    3704:	08 c0       	rjmp	.+16     	; 0x3716 <vfprintf+0x298>
    3706:	f8 01       	movw	r30, r16
    3708:	60 81       	ld	r22, Z
    370a:	71 81       	ldd	r23, Z+1	; 0x01
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	93 81       	ldd	r25, Z+3	; 0x03
    3710:	0c 5f       	subi	r16, 0xFC	; 252
    3712:	1f 4f       	sbci	r17, 0xFF	; 255
    3714:	07 c0       	rjmp	.+14     	; 0x3724 <vfprintf+0x2a6>
    3716:	f8 01       	movw	r30, r16
    3718:	60 81       	ld	r22, Z
    371a:	71 81       	ldd	r23, Z+1	; 0x01
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 5f       	subi	r16, 0xFE	; 254
    3722:	1f 4f       	sbci	r17, 0xFF	; 255
    3724:	a2 01       	movw	r20, r4
    3726:	0e 94 8e 1c 	call	0x391c	; 0x391c <__ultoa_invert>
    372a:	78 2e       	mov	r7, r24
    372c:	74 18       	sub	r7, r4
    372e:	ff e7       	ldi	r31, 0x7F	; 127
    3730:	bf 22       	and	r11, r31
    3732:	b6 fe       	sbrs	r11, 6
    3734:	0b c0       	rjmp	.+22     	; 0x374c <vfprintf+0x2ce>
    3736:	2e ef       	ldi	r18, 0xFE	; 254
    3738:	b2 22       	and	r11, r18
    373a:	7e 14       	cp	r7, r14
    373c:	38 f4       	brcc	.+14     	; 0x374c <vfprintf+0x2ce>
    373e:	b4 fe       	sbrs	r11, 4
    3740:	07 c0       	rjmp	.+14     	; 0x3750 <vfprintf+0x2d2>
    3742:	b2 fc       	sbrc	r11, 2
    3744:	05 c0       	rjmp	.+10     	; 0x3750 <vfprintf+0x2d2>
    3746:	8f ee       	ldi	r24, 0xEF	; 239
    3748:	b8 22       	and	r11, r24
    374a:	02 c0       	rjmp	.+4      	; 0x3750 <vfprintf+0x2d2>
    374c:	a7 2c       	mov	r10, r7
    374e:	01 c0       	rjmp	.+2      	; 0x3752 <vfprintf+0x2d4>
    3750:	ae 2c       	mov	r10, r14
    3752:	8b 2d       	mov	r24, r11
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	b4 fe       	sbrs	r11, 4
    3758:	0d c0       	rjmp	.+26     	; 0x3774 <vfprintf+0x2f6>
    375a:	fe 01       	movw	r30, r28
    375c:	e7 0d       	add	r30, r7
    375e:	f1 1d       	adc	r31, r1
    3760:	20 81       	ld	r18, Z
    3762:	20 33       	cpi	r18, 0x30	; 48
    3764:	19 f4       	brne	.+6      	; 0x376c <vfprintf+0x2ee>
    3766:	e9 ee       	ldi	r30, 0xE9	; 233
    3768:	be 22       	and	r11, r30
    376a:	09 c0       	rjmp	.+18     	; 0x377e <vfprintf+0x300>
    376c:	a3 94       	inc	r10
    376e:	b2 fe       	sbrs	r11, 2
    3770:	06 c0       	rjmp	.+12     	; 0x377e <vfprintf+0x300>
    3772:	04 c0       	rjmp	.+8      	; 0x377c <vfprintf+0x2fe>
    3774:	86 78       	andi	r24, 0x86	; 134
    3776:	90 70       	andi	r25, 0x00	; 0
    3778:	00 97       	sbiw	r24, 0x00	; 0
    377a:	09 f0       	breq	.+2      	; 0x377e <vfprintf+0x300>
    377c:	a3 94       	inc	r10
    377e:	8b 2c       	mov	r8, r11
    3780:	99 24       	eor	r9, r9
    3782:	b3 fc       	sbrc	r11, 3
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <vfprintf+0x330>
    3786:	b0 fe       	sbrs	r11, 0
    3788:	0f c0       	rjmp	.+30     	; 0x37a8 <vfprintf+0x32a>
    378a:	af 14       	cp	r10, r15
    378c:	28 f4       	brcc	.+10     	; 0x3798 <vfprintf+0x31a>
    378e:	e7 2c       	mov	r14, r7
    3790:	ef 0c       	add	r14, r15
    3792:	ea 18       	sub	r14, r10
    3794:	af 2c       	mov	r10, r15
    3796:	08 c0       	rjmp	.+16     	; 0x37a8 <vfprintf+0x32a>
    3798:	e7 2c       	mov	r14, r7
    379a:	06 c0       	rjmp	.+12     	; 0x37a8 <vfprintf+0x32a>
    379c:	80 e2       	ldi	r24, 0x20	; 32
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	b6 01       	movw	r22, r12
    37a2:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    37a6:	a3 94       	inc	r10
    37a8:	af 14       	cp	r10, r15
    37aa:	c0 f3       	brcs	.-16     	; 0x379c <vfprintf+0x31e>
    37ac:	04 c0       	rjmp	.+8      	; 0x37b6 <vfprintf+0x338>
    37ae:	af 14       	cp	r10, r15
    37b0:	10 f4       	brcc	.+4      	; 0x37b6 <vfprintf+0x338>
    37b2:	fa 18       	sub	r15, r10
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <vfprintf+0x33a>
    37b6:	ff 24       	eor	r15, r15
    37b8:	84 fe       	sbrs	r8, 4
    37ba:	0f c0       	rjmp	.+30     	; 0x37da <vfprintf+0x35c>
    37bc:	80 e3       	ldi	r24, 0x30	; 48
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	b6 01       	movw	r22, r12
    37c2:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    37c6:	82 fe       	sbrs	r8, 2
    37c8:	1f c0       	rjmp	.+62     	; 0x3808 <vfprintf+0x38a>
    37ca:	81 fe       	sbrs	r8, 1
    37cc:	03 c0       	rjmp	.+6      	; 0x37d4 <vfprintf+0x356>
    37ce:	88 e5       	ldi	r24, 0x58	; 88
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	10 c0       	rjmp	.+32     	; 0x37f4 <vfprintf+0x376>
    37d4:	88 e7       	ldi	r24, 0x78	; 120
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0d c0       	rjmp	.+26     	; 0x37f4 <vfprintf+0x376>
    37da:	c4 01       	movw	r24, r8
    37dc:	86 78       	andi	r24, 0x86	; 134
    37de:	90 70       	andi	r25, 0x00	; 0
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	91 f0       	breq	.+36     	; 0x3808 <vfprintf+0x38a>
    37e4:	81 fc       	sbrc	r8, 1
    37e6:	02 c0       	rjmp	.+4      	; 0x37ec <vfprintf+0x36e>
    37e8:	80 e2       	ldi	r24, 0x20	; 32
    37ea:	01 c0       	rjmp	.+2      	; 0x37ee <vfprintf+0x370>
    37ec:	8b e2       	ldi	r24, 0x2B	; 43
    37ee:	b7 fc       	sbrc	r11, 7
    37f0:	8d e2       	ldi	r24, 0x2D	; 45
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	b6 01       	movw	r22, r12
    37f6:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    37fa:	06 c0       	rjmp	.+12     	; 0x3808 <vfprintf+0x38a>
    37fc:	80 e3       	ldi	r24, 0x30	; 48
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	b6 01       	movw	r22, r12
    3802:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    3806:	ea 94       	dec	r14
    3808:	7e 14       	cp	r7, r14
    380a:	c0 f3       	brcs	.-16     	; 0x37fc <vfprintf+0x37e>
    380c:	7a 94       	dec	r7
    380e:	f2 01       	movw	r30, r4
    3810:	e7 0d       	add	r30, r7
    3812:	f1 1d       	adc	r31, r1
    3814:	80 81       	ld	r24, Z
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	b6 01       	movw	r22, r12
    381a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    381e:	77 20       	and	r7, r7
    3820:	a9 f7       	brne	.-22     	; 0x380c <vfprintf+0x38e>
    3822:	06 c0       	rjmp	.+12     	; 0x3830 <vfprintf+0x3b2>
    3824:	80 e2       	ldi	r24, 0x20	; 32
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	b6 01       	movw	r22, r12
    382a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <fputc>
    382e:	fa 94       	dec	r15
    3830:	ff 20       	and	r15, r15
    3832:	c1 f7       	brne	.-16     	; 0x3824 <vfprintf+0x3a6>
    3834:	37 ce       	rjmp	.-914    	; 0x34a4 <vfprintf+0x26>
    3836:	f6 01       	movw	r30, r12
    3838:	26 81       	ldd	r18, Z+6	; 0x06
    383a:	37 81       	ldd	r19, Z+7	; 0x07
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <vfprintf+0x3c4>
    383e:	2f ef       	ldi	r18, 0xFF	; 255
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	c9 01       	movw	r24, r18
    3844:	2c 96       	adiw	r28, 0x0c	; 12
    3846:	e2 e1       	ldi	r30, 0x12	; 18
    3848:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__epilogue_restores__>

0000384c <__eerd_block_m168>:
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22

00003850 <__eerd_blraw_m168>:
    3850:	fc 01       	movw	r30, r24
    3852:	f9 99       	sbic	0x1f, 1	; 31
    3854:	fe cf       	rjmp	.-4      	; 0x3852 <__eerd_blraw_m168+0x2>
    3856:	06 c0       	rjmp	.+12     	; 0x3864 <__eerd_blraw_m168+0x14>
    3858:	f2 bd       	out	0x22, r31	; 34
    385a:	e1 bd       	out	0x21, r30	; 33
    385c:	f8 9a       	sbi	0x1f, 0	; 31
    385e:	31 96       	adiw	r30, 0x01	; 1
    3860:	00 b4       	in	r0, 0x20	; 32
    3862:	0d 92       	st	X+, r0
    3864:	41 50       	subi	r20, 0x01	; 1
    3866:	50 40       	sbci	r21, 0x00	; 0
    3868:	b8 f7       	brcc	.-18     	; 0x3858 <__eerd_blraw_m168+0x8>
    386a:	08 95       	ret

0000386c <__eerd_byte_m168>:
    386c:	f9 99       	sbic	0x1f, 1	; 31
    386e:	fe cf       	rjmp	.-4      	; 0x386c <__eerd_byte_m168>
    3870:	92 bd       	out	0x22, r25	; 34
    3872:	81 bd       	out	0x21, r24	; 33
    3874:	f8 9a       	sbi	0x1f, 0	; 31
    3876:	99 27       	eor	r25, r25
    3878:	80 b5       	in	r24, 0x20	; 32
    387a:	08 95       	ret

0000387c <__eewr_byte_m168>:
    387c:	26 2f       	mov	r18, r22

0000387e <__eewr_r18_m168>:
    387e:	f9 99       	sbic	0x1f, 1	; 31
    3880:	fe cf       	rjmp	.-4      	; 0x387e <__eewr_r18_m168>
    3882:	1f ba       	out	0x1f, r1	; 31
    3884:	92 bd       	out	0x22, r25	; 34
    3886:	81 bd       	out	0x21, r24	; 33
    3888:	20 bd       	out	0x20, r18	; 32
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	fa 9a       	sbi	0x1f, 2	; 31
    3890:	f9 9a       	sbi	0x1f, 1	; 31
    3892:	0f be       	out	0x3f, r0	; 63
    3894:	01 96       	adiw	r24, 0x01	; 1
    3896:	08 95       	ret

00003898 <strnlen_P>:
    3898:	fc 01       	movw	r30, r24
    389a:	05 90       	lpm	r0, Z+
    389c:	61 50       	subi	r22, 0x01	; 1
    389e:	70 40       	sbci	r23, 0x00	; 0
    38a0:	01 10       	cpse	r0, r1
    38a2:	d8 f7       	brcc	.-10     	; 0x389a <strnlen_P+0x2>
    38a4:	80 95       	com	r24
    38a6:	90 95       	com	r25
    38a8:	8e 0f       	add	r24, r30
    38aa:	9f 1f       	adc	r25, r31
    38ac:	08 95       	ret

000038ae <strnlen>:
    38ae:	fc 01       	movw	r30, r24
    38b0:	61 50       	subi	r22, 0x01	; 1
    38b2:	70 40       	sbci	r23, 0x00	; 0
    38b4:	01 90       	ld	r0, Z+
    38b6:	01 10       	cpse	r0, r1
    38b8:	d8 f7       	brcc	.-10     	; 0x38b0 <strnlen+0x2>
    38ba:	80 95       	com	r24
    38bc:	90 95       	com	r25
    38be:	8e 0f       	add	r24, r30
    38c0:	9f 1f       	adc	r25, r31
    38c2:	08 95       	ret

000038c4 <fputc>:
    38c4:	0f 93       	push	r16
    38c6:	1f 93       	push	r17
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	8c 01       	movw	r16, r24
    38ce:	eb 01       	movw	r28, r22
    38d0:	8b 81       	ldd	r24, Y+3	; 0x03
    38d2:	81 ff       	sbrs	r24, 1
    38d4:	1b c0       	rjmp	.+54     	; 0x390c <fputc+0x48>
    38d6:	82 ff       	sbrs	r24, 2
    38d8:	0d c0       	rjmp	.+26     	; 0x38f4 <fputc+0x30>
    38da:	2e 81       	ldd	r18, Y+6	; 0x06
    38dc:	3f 81       	ldd	r19, Y+7	; 0x07
    38de:	8c 81       	ldd	r24, Y+4	; 0x04
    38e0:	9d 81       	ldd	r25, Y+5	; 0x05
    38e2:	28 17       	cp	r18, r24
    38e4:	39 07       	cpc	r19, r25
    38e6:	64 f4       	brge	.+24     	; 0x3900 <fputc+0x3c>
    38e8:	e8 81       	ld	r30, Y
    38ea:	f9 81       	ldd	r31, Y+1	; 0x01
    38ec:	01 93       	st	Z+, r16
    38ee:	f9 83       	std	Y+1, r31	; 0x01
    38f0:	e8 83       	st	Y, r30
    38f2:	06 c0       	rjmp	.+12     	; 0x3900 <fputc+0x3c>
    38f4:	e8 85       	ldd	r30, Y+8	; 0x08
    38f6:	f9 85       	ldd	r31, Y+9	; 0x09
    38f8:	80 2f       	mov	r24, r16
    38fa:	09 95       	icall
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	31 f4       	brne	.+12     	; 0x390c <fputc+0x48>
    3900:	8e 81       	ldd	r24, Y+6	; 0x06
    3902:	9f 81       	ldd	r25, Y+7	; 0x07
    3904:	01 96       	adiw	r24, 0x01	; 1
    3906:	9f 83       	std	Y+7, r25	; 0x07
    3908:	8e 83       	std	Y+6, r24	; 0x06
    390a:	02 c0       	rjmp	.+4      	; 0x3910 <fputc+0x4c>
    390c:	0f ef       	ldi	r16, 0xFF	; 255
    390e:	1f ef       	ldi	r17, 0xFF	; 255
    3910:	c8 01       	movw	r24, r16
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	08 95       	ret

0000391c <__ultoa_invert>:
    391c:	fa 01       	movw	r30, r20
    391e:	aa 27       	eor	r26, r26
    3920:	28 30       	cpi	r18, 0x08	; 8
    3922:	51 f1       	breq	.+84     	; 0x3978 <__ultoa_invert+0x5c>
    3924:	20 31       	cpi	r18, 0x10	; 16
    3926:	81 f1       	breq	.+96     	; 0x3988 <__ultoa_invert+0x6c>
    3928:	e8 94       	clt
    392a:	6f 93       	push	r22
    392c:	6e 7f       	andi	r22, 0xFE	; 254
    392e:	6e 5f       	subi	r22, 0xFE	; 254
    3930:	7f 4f       	sbci	r23, 0xFF	; 255
    3932:	8f 4f       	sbci	r24, 0xFF	; 255
    3934:	9f 4f       	sbci	r25, 0xFF	; 255
    3936:	af 4f       	sbci	r26, 0xFF	; 255
    3938:	b1 e0       	ldi	r27, 0x01	; 1
    393a:	3e d0       	rcall	.+124    	; 0x39b8 <__ultoa_invert+0x9c>
    393c:	b4 e0       	ldi	r27, 0x04	; 4
    393e:	3c d0       	rcall	.+120    	; 0x39b8 <__ultoa_invert+0x9c>
    3940:	67 0f       	add	r22, r23
    3942:	78 1f       	adc	r23, r24
    3944:	89 1f       	adc	r24, r25
    3946:	9a 1f       	adc	r25, r26
    3948:	a1 1d       	adc	r26, r1
    394a:	68 0f       	add	r22, r24
    394c:	79 1f       	adc	r23, r25
    394e:	8a 1f       	adc	r24, r26
    3950:	91 1d       	adc	r25, r1
    3952:	a1 1d       	adc	r26, r1
    3954:	6a 0f       	add	r22, r26
    3956:	71 1d       	adc	r23, r1
    3958:	81 1d       	adc	r24, r1
    395a:	91 1d       	adc	r25, r1
    395c:	a1 1d       	adc	r26, r1
    395e:	20 d0       	rcall	.+64     	; 0x39a0 <__ultoa_invert+0x84>
    3960:	09 f4       	brne	.+2      	; 0x3964 <__ultoa_invert+0x48>
    3962:	68 94       	set
    3964:	3f 91       	pop	r19
    3966:	2a e0       	ldi	r18, 0x0A	; 10
    3968:	26 9f       	mul	r18, r22
    396a:	11 24       	eor	r1, r1
    396c:	30 19       	sub	r19, r0
    396e:	30 5d       	subi	r19, 0xD0	; 208
    3970:	31 93       	st	Z+, r19
    3972:	de f6       	brtc	.-74     	; 0x392a <__ultoa_invert+0xe>
    3974:	cf 01       	movw	r24, r30
    3976:	08 95       	ret
    3978:	46 2f       	mov	r20, r22
    397a:	47 70       	andi	r20, 0x07	; 7
    397c:	40 5d       	subi	r20, 0xD0	; 208
    397e:	41 93       	st	Z+, r20
    3980:	b3 e0       	ldi	r27, 0x03	; 3
    3982:	0f d0       	rcall	.+30     	; 0x39a2 <__ultoa_invert+0x86>
    3984:	c9 f7       	brne	.-14     	; 0x3978 <__ultoa_invert+0x5c>
    3986:	f6 cf       	rjmp	.-20     	; 0x3974 <__ultoa_invert+0x58>
    3988:	46 2f       	mov	r20, r22
    398a:	4f 70       	andi	r20, 0x0F	; 15
    398c:	40 5d       	subi	r20, 0xD0	; 208
    398e:	4a 33       	cpi	r20, 0x3A	; 58
    3990:	18 f0       	brcs	.+6      	; 0x3998 <__ultoa_invert+0x7c>
    3992:	49 5d       	subi	r20, 0xD9	; 217
    3994:	31 fd       	sbrc	r19, 1
    3996:	40 52       	subi	r20, 0x20	; 32
    3998:	41 93       	st	Z+, r20
    399a:	02 d0       	rcall	.+4      	; 0x39a0 <__ultoa_invert+0x84>
    399c:	a9 f7       	brne	.-22     	; 0x3988 <__ultoa_invert+0x6c>
    399e:	ea cf       	rjmp	.-44     	; 0x3974 <__ultoa_invert+0x58>
    39a0:	b4 e0       	ldi	r27, 0x04	; 4
    39a2:	a6 95       	lsr	r26
    39a4:	97 95       	ror	r25
    39a6:	87 95       	ror	r24
    39a8:	77 95       	ror	r23
    39aa:	67 95       	ror	r22
    39ac:	ba 95       	dec	r27
    39ae:	c9 f7       	brne	.-14     	; 0x39a2 <__ultoa_invert+0x86>
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	61 05       	cpc	r22, r1
    39b4:	71 05       	cpc	r23, r1
    39b6:	08 95       	ret
    39b8:	9b 01       	movw	r18, r22
    39ba:	ac 01       	movw	r20, r24
    39bc:	0a 2e       	mov	r0, r26
    39be:	06 94       	lsr	r0
    39c0:	57 95       	ror	r21
    39c2:	47 95       	ror	r20
    39c4:	37 95       	ror	r19
    39c6:	27 95       	ror	r18
    39c8:	ba 95       	dec	r27
    39ca:	c9 f7       	brne	.-14     	; 0x39be <__ultoa_invert+0xa2>
    39cc:	62 0f       	add	r22, r18
    39ce:	73 1f       	adc	r23, r19
    39d0:	84 1f       	adc	r24, r20
    39d2:	95 1f       	adc	r25, r21
    39d4:	a0 1d       	adc	r26, r0
    39d6:	08 95       	ret

000039d8 <__prologue_saves__>:
    39d8:	2f 92       	push	r2
    39da:	3f 92       	push	r3
    39dc:	4f 92       	push	r4
    39de:	5f 92       	push	r5
    39e0:	6f 92       	push	r6
    39e2:	7f 92       	push	r7
    39e4:	8f 92       	push	r8
    39e6:	9f 92       	push	r9
    39e8:	af 92       	push	r10
    39ea:	bf 92       	push	r11
    39ec:	cf 92       	push	r12
    39ee:	df 92       	push	r13
    39f0:	ef 92       	push	r14
    39f2:	ff 92       	push	r15
    39f4:	0f 93       	push	r16
    39f6:	1f 93       	push	r17
    39f8:	cf 93       	push	r28
    39fa:	df 93       	push	r29
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	ca 1b       	sub	r28, r26
    3a02:	db 0b       	sbc	r29, r27
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	cd bf       	out	0x3d, r28	; 61
    3a0e:	09 94       	ijmp

00003a10 <__epilogue_restores__>:
    3a10:	2a 88       	ldd	r2, Y+18	; 0x12
    3a12:	39 88       	ldd	r3, Y+17	; 0x11
    3a14:	48 88       	ldd	r4, Y+16	; 0x10
    3a16:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a18:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a20:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a22:	b9 84       	ldd	r11, Y+9	; 0x09
    3a24:	c8 84       	ldd	r12, Y+8	; 0x08
    3a26:	df 80       	ldd	r13, Y+7	; 0x07
    3a28:	ee 80       	ldd	r14, Y+6	; 0x06
    3a2a:	fd 80       	ldd	r15, Y+5	; 0x05
    3a2c:	0c 81       	ldd	r16, Y+4	; 0x04
    3a2e:	1b 81       	ldd	r17, Y+3	; 0x03
    3a30:	aa 81       	ldd	r26, Y+2	; 0x02
    3a32:	b9 81       	ldd	r27, Y+1	; 0x01
    3a34:	ce 0f       	add	r28, r30
    3a36:	d1 1d       	adc	r29, r1
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	ed 01       	movw	r28, r26
    3a44:	08 95       	ret

00003a46 <_exit>:
    3a46:	f8 94       	cli

00003a48 <__stop_program>:
    3a48:	ff cf       	rjmp	.-2      	; 0x3a48 <__stop_program>
