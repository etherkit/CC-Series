
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00003bb8  00003c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003bb8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800136  00800136  00003ca2  2**0
                  ALLOC
  3 .eeprom       0000002a  00810000  00810000  00003ca2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000567c  00000000  00000000  00003ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000022f0  00000000  00000000  00009348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e8 eb       	ldi	r30, 0xB8	; 184
     1b8:	fb e3       	ldi	r31, 0x3B	; 59
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a6 33       	cpi	r26, 0x36	; 54
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	a6 e3       	ldi	r26, 0x36	; 54
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	aa 3e       	cpi	r26, 0xEA	; 234
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 56 0b 	call	0x16ac	; 0x16ac <main>
     1da:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_11>:

// Timer1 ISR
//
// Timer1 is the sinewave generator.
ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_11+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 36 01 	lds	r24, 0x0136
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_11+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_11+0xae>
	{
		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 9a 01 	lds	r18, 0x019A
     21c:	30 91 9b 01 	lds	r19, 0x019B
     220:	40 91 9c 01 	lds	r20, 0x019C
     224:	50 91 9d 01 	lds	r21, 0x019D
     228:	80 91 ac 01 	lds	r24, 0x01AC
     22c:	90 91 ad 01 	lds	r25, 0x01AD
     230:	a0 91 ae 01 	lds	r26, 0x01AE
     234:	b0 91 af 01 	lds	r27, 0x01AF
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 9a 01 	sts	0x019A, r24
     244:	90 93 9b 01 	sts	0x019B, r25
     248:	a0 93 9c 01 	sts	0x019C, r26
     24c:	b0 93 9d 01 	sts	0x019D, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 9a 01 	lds	r24, 0x019A
     254:	90 91 9b 01 	lds	r25, 0x019B
     258:	a0 91 9c 01 	lds	r26, 0x019C
     25c:	b0 91 9d 01 	lds	r27, 0x019D
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 68 01 	sts	0x0168, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 68 01 	lds	r18, 0x0168
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
	}
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(/*((timer > mute_start) && (timer < mute_end)) || */(mute_on == TRUE))
     2e4:	80 91 37 01 	lds	r24, 0x0137
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	51 f4       	brne	.+20     	; 0x300 <__vector_7+0x46>
		MUTE_PORT |= _BV(MUTE);
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	28 e2       	ldi	r18, 0x28	; 40
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	20 62       	ori	r18, 0x20	; 32
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_7+0x58>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     300:	88 e2       	ldi	r24, 0x28	; 40
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	28 e2       	ldi	r18, 0x28	; 40
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7d       	andi	r18, 0xDF	; 223
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     312:	80 91 38 01 	lds	r24, 0x0138
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	d9 f5       	brne	.+118    	; 0x390 <__vector_7+0xd6>
     31a:	20 91 6a 01 	lds	r18, 0x016A
     31e:	30 91 6b 01 	lds	r19, 0x016B
     322:	40 91 6c 01 	lds	r20, 0x016C
     326:	50 91 6d 01 	lds	r21, 0x016D
     32a:	80 91 df 01 	lds	r24, 0x01DF
     32e:	90 91 e0 01 	lds	r25, 0x01E0
     332:	a0 91 e1 01 	lds	r26, 0x01E1
     336:	b0 91 e2 01 	lds	r27, 0x01E2
     33a:	28 17       	cp	r18, r24
     33c:	39 07       	cpc	r19, r25
     33e:	4a 07       	cpc	r20, r26
     340:	5b 07       	cpc	r21, r27
     342:	30 f5       	brcc	.+76     	; 0x390 <__vector_7+0xd6>
     344:	20 91 6a 01 	lds	r18, 0x016A
     348:	30 91 6b 01 	lds	r19, 0x016B
     34c:	40 91 6c 01 	lds	r20, 0x016C
     350:	50 91 6d 01 	lds	r21, 0x016D
     354:	80 91 a4 01 	lds	r24, 0x01A4
     358:	90 91 a5 01 	lds	r25, 0x01A5
     35c:	a0 91 a6 01 	lds	r26, 0x01A6
     360:	b0 91 a7 01 	lds	r27, 0x01A7
     364:	82 17       	cp	r24, r18
     366:	93 07       	cpc	r25, r19
     368:	a4 07       	cpc	r26, r20
     36a:	b5 07       	cpc	r27, r21
     36c:	88 f4       	brcc	.+34     	; 0x390 <__vector_7+0xd6>
	{
		if(rit_enable == TRUE)
     36e:	80 91 e4 01 	lds	r24, 0x01E4
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	19 f4       	brne	.+6      	; 0x37c <__vector_7+0xc2>
			set_dds_freq_reg(REG_1);
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 19 0b 	call	0x1632	; 0x1632 <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     37c:	88 e2       	ldi	r24, 0x28	; 40
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	28 e2       	ldi	r18, 0x28	; 40
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	20 61       	ori	r18, 0x10	; 16
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
     38e:	0c c0       	rjmp	.+24     	; 0x3a8 <__vector_7+0xee>
	}
	else
	{
		set_dds_freq_reg(REG_0);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 19 0b 	call	0x1632	; 0x1632 <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     396:	88 e2       	ldi	r24, 0x28	; 40
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	28 e2       	ldi	r18, 0x28	; 40
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	2f 7e       	andi	r18, 0xEF	; 239
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
	}

	debounce(FALSE);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>

	// Need to consider timer overflow?
	timer++;
     3ae:	80 91 6a 01 	lds	r24, 0x016A
     3b2:	90 91 6b 01 	lds	r25, 0x016B
     3b6:	a0 91 6c 01 	lds	r26, 0x016C
     3ba:	b0 91 6d 01 	lds	r27, 0x016D
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	a1 1d       	adc	r26, r1
     3c2:	b1 1d       	adc	r27, r1
     3c4:	80 93 6a 01 	sts	0x016A, r24
     3c8:	90 93 6b 01 	sts	0x016B, r25
     3cc:	a0 93 6c 01 	sts	0x016C, r26
     3d0:	b0 93 6d 01 	sts	0x016D, r27
}
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     418:	88 e6       	ldi	r24, 0x68	; 104
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	10 82       	st	Z, r1

	cur_mode = default_mode;
     420:	80 91 69 01 	lds	r24, 0x0169
     424:	80 93 9e 01 	sts	0x019E, r24
	cur_state = IDLE;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 c0 01 	sts	0x01C0, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 100;
     42e:	80 91 64 01 	lds	r24, 0x0164
     432:	90 91 65 01 	lds	r25, 0x0165
     436:	a0 91 66 01 	lds	r26, 0x0166
     43a:	b0 91 67 01 	lds	r27, 0x0167
     43e:	8c 59       	subi	r24, 0x9C	; 156
     440:	9f 4f       	sbci	r25, 0xFF	; 255
     442:	af 4f       	sbci	r26, 0xFF	; 255
     444:	bf 4f       	sbci	r27, 0xFF	; 255
     446:	80 93 ca 01 	sts	0x01CA, r24
     44a:	90 93 cb 01 	sts	0x01CB, r25
     44e:	a0 93 cc 01 	sts	0x01CC, r26
     452:	b0 93 cd 01 	sts	0x01CD, r27
	sleep_timer = cur_timer + SLEEP_DELAY;
     456:	80 91 64 01 	lds	r24, 0x0164
     45a:	90 91 65 01 	lds	r25, 0x0165
     45e:	a0 91 66 01 	lds	r26, 0x0166
     462:	b0 91 67 01 	lds	r27, 0x0167
     466:	80 57       	subi	r24, 0x70	; 112
     468:	9e 4f       	sbci	r25, 0xFE	; 254
     46a:	af 4f       	sbci	r26, 0xFF	; 255
     46c:	bf 4f       	sbci	r27, 0xFF	; 255
     46e:	80 93 c5 01 	sts	0x01C5, r24
     472:	90 93 c6 01 	sts	0x01C6, r25
     476:	a0 93 c7 01 	sts	0x01C7, r26
     47a:	b0 93 c8 01 	sts	0x01C8, r27
}
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	bf 91       	pop	r27
     488:	af 91       	pop	r26
     48a:	9f 91       	pop	r25
     48c:	8f 91       	pop	r24
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <init>:

void init(void)
{
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	0f 92       	push	r0
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     4a2:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     4a4:	81 e6       	ldi	r24, 0x61	; 97
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	20 e8       	ldi	r18, 0x80	; 128
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18
	CLKPR = 0;
     4ae:	81 e6       	ldi	r24, 0x61	; 97
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	fc 01       	movw	r30, r24
     4b4:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     4b6:	84 e4       	ldi	r24, 0x44	; 68
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	21 e8       	ldi	r18, 0x81	; 129
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     4c0:	85 e4       	ldi	r24, 0x45	; 69
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
	//TCCR0B = _BV(CS01);
	//TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt

	// Setup Timer1 as sample rate generator for sidetone
	TCCR1B = _BV(WGM12) | _BV(CS10); // Set for CTC mode, Prescaler /1
     4ca:	81 e8       	ldi	r24, 0x81	; 129
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	29 e0       	ldi	r18, 0x09	; 9
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
	TCCR1A = 0;
     4d4:	80 e8       	ldi	r24, 0x80	; 128
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	fc 01       	movw	r30, r24
     4da:	10 82       	st	Z, r1
	OCR1A = 1000; // 16 MHz clock / 16 kHz sample rate = 1000
     4dc:	88 e8       	ldi	r24, 0x88	; 136
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	28 ee       	ldi	r18, 0xE8	; 232
     4e2:	33 e0       	ldi	r19, 0x03	; 3
     4e4:	fc 01       	movw	r30, r24
     4e6:	31 83       	std	Z+1, r19	; 0x01
     4e8:	20 83       	st	Z, r18
	TIMSK1 = _BV(OCIE1A);
     4ea:	8f e6       	ldi	r24, 0x6F	; 111
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	22 e0       	ldi	r18, 0x02	; 2
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     4f4:	80 eb       	ldi	r24, 0xB0	; 176
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	22 e0       	ldi	r18, 0x02	; 2
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     4fe:	81 eb       	ldi	r24, 0xB1	; 177
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	24 e0       	ldi	r18, 0x04	; 4
     504:	fc 01       	movw	r30, r24
     506:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     508:	80 e7       	ldi	r24, 0x70	; 112
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	20 e7       	ldi	r18, 0x70	; 112
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	22 60       	ori	r18, 0x02	; 2
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     51a:	83 eb       	ldi	r24, 0xB3	; 179
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	29 ef       	ldi	r18, 0xF9	; 249
     520:	fc 01       	movw	r30, r24
     522:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     524:	8a e7       	ldi	r24, 0x7A	; 122
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	2a e7       	ldi	r18, 0x7A	; 122
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	f9 01       	movw	r30, r18
     52e:	20 81       	ld	r18, Z
     530:	24 68       	ori	r18, 0x84	; 132
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     536:	8c e7       	ldi	r24, 0x7C	; 124
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	20 e6       	ldi	r18, 0x60	; 96
     53c:	fc 01       	movw	r30, r24
     53e:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     540:	8b e6       	ldi	r24, 0x6B	; 107
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	fc 01       	movw	r30, r24
     548:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) |_BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     54a:	8d e6       	ldi	r24, 0x6D	; 109
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	2f e9       	ldi	r18, 0x9F	; 159
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     554:	8a e2       	ldi	r24, 0x2A	; 42
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	2a e2       	ldi	r18, 0x2A	; 42
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	f9 01       	movw	r30, r18
     55e:	20 81       	ld	r18, Z
     560:	20 64       	ori	r18, 0x40	; 64
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     566:	87 e2       	ldi	r24, 0x27	; 39
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	27 e2       	ldi	r18, 0x27	; 39
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	20 62       	ori	r18, 0x20	; 32
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     578:	87 e2       	ldi	r24, 0x27	; 39
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	27 e2       	ldi	r18, 0x27	; 39
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	f9 01       	movw	r30, r18
     582:	20 81       	ld	r18, Z
     584:	20 61       	ori	r18, 0x10	; 16
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     58a:	87 e2       	ldi	r24, 0x27	; 39
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	27 e2       	ldi	r18, 0x27	; 39
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	f9 01       	movw	r30, r18
     594:	20 81       	ld	r18, Z
     596:	2d 7f       	andi	r18, 0xFD	; 253
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     59c:	88 e2       	ldi	r24, 0x28	; 40
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	28 e2       	ldi	r18, 0x28	; 40
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	f9 01       	movw	r30, r18
     5a6:	20 81       	ld	r18, Z
     5a8:	2d 7f       	andi	r18, 0xFD	; 253
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     5ae:	8a e2       	ldi	r24, 0x2A	; 42
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	2a e2       	ldi	r18, 0x2A	; 42
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	27 7f       	andi	r18, 0xF7	; 247
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     5c0:	8b e2       	ldi	r24, 0x2B	; 43
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	2b e2       	ldi	r18, 0x2B	; 43
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	20 81       	ld	r18, Z
     5cc:	28 60       	ori	r18, 0x08	; 8
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     5d2:	8a e2       	ldi	r24, 0x2A	; 42
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	2a e2       	ldi	r18, 0x2A	; 42
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	f9 01       	movw	r30, r18
     5dc:	20 81       	ld	r18, Z
     5de:	2f 7e       	andi	r18, 0xEF	; 239
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     5e4:	8b e2       	ldi	r24, 0x2B	; 43
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	2b e2       	ldi	r18, 0x2B	; 43
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	f9 01       	movw	r30, r18
     5ee:	20 81       	ld	r18, Z
     5f0:	20 61       	ori	r18, 0x10	; 16
     5f2:	fc 01       	movw	r30, r24
     5f4:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     5f6:	8a e2       	ldi	r24, 0x2A	; 42
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	2a e2       	ldi	r18, 0x2A	; 42
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	f9 01       	movw	r30, r18
     600:	20 81       	ld	r18, Z
     602:	2b 7f       	andi	r18, 0xFB	; 251
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     608:	8b e2       	ldi	r24, 0x2B	; 43
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	2b e2       	ldi	r18, 0x2B	; 43
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	f9 01       	movw	r30, r18
     612:	20 81       	ld	r18, Z
     614:	24 60       	ori	r18, 0x04	; 4
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     61a:	8a e2       	ldi	r24, 0x2A	; 42
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	2a e2       	ldi	r18, 0x2A	; 42
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	f9 01       	movw	r30, r18
     624:	20 81       	ld	r18, Z
     626:	2d 7f       	andi	r18, 0xFD	; 253
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     62c:	8b e2       	ldi	r24, 0x2B	; 43
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	2b e2       	ldi	r18, 0x2B	; 43
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	22 60       	ori	r18, 0x02	; 2
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     63e:	84 e2       	ldi	r24, 0x24	; 36
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	24 e2       	ldi	r18, 0x24	; 36
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	f9 01       	movw	r30, r18
     648:	20 81       	ld	r18, Z
     64a:	2e 7f       	andi	r18, 0xFE	; 254
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     650:	85 e2       	ldi	r24, 0x25	; 37
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	25 e2       	ldi	r18, 0x25	; 37
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	21 60       	ori	r18, 0x01	; 1
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     662:	8a e2       	ldi	r24, 0x2A	; 42
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	2a e2       	ldi	r18, 0x2A	; 42
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	f9 01       	movw	r30, r18
     66c:	20 81       	ld	r18, Z
     66e:	2f 77       	andi	r18, 0x7F	; 127
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     674:	8b e2       	ldi	r24, 0x2B	; 43
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	2b e2       	ldi	r18, 0x2B	; 43
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	20 81       	ld	r18, Z
     680:	20 68       	ori	r18, 0x80	; 128
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     686:	8a e2       	ldi	r24, 0x2A	; 42
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	2a e2       	ldi	r18, 0x2A	; 42
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	2e 7f       	andi	r18, 0xFE	; 254
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     698:	8b e2       	ldi	r24, 0x2B	; 43
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	2b e2       	ldi	r18, 0x2B	; 43
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	21 60       	ori	r18, 0x01	; 1
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     6aa:	84 e2       	ldi	r24, 0x24	; 36
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	24 e2       	ldi	r18, 0x24	; 36
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	2e 62       	ori	r18, 0x2E	; 46
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     6bc:	8c e4       	ldi	r24, 0x4C	; 76
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	29 e5       	ldi	r18, 0x59	; 89
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     6c6:	8d e4       	ldi	r24, 0x4D	; 77
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	89 83       	std	Y+1, r24	; 0x01
	spi_data = SPDR;
     6d0:	8e e4       	ldi	r24, 0x4E	; 78
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	89 83       	std	Y+1, r24	; 0x01

	// Power saving
	power_twi_disable();
     6da:	84 e6       	ldi	r24, 0x64	; 100
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	24 e6       	ldi	r18, 0x64	; 100
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	f9 01       	movw	r30, r18
     6e4:	20 81       	ld	r18, Z
     6e6:	20 68       	ori	r18, 0x80	; 128
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
	power_usart0_disable();
     6ec:	84 e6       	ldi	r24, 0x64	; 100
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	24 e6       	ldi	r18, 0x64	; 100
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	20 81       	ld	r18, Z
     6f8:	22 60       	ori	r18, 0x02	; 2
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	80 93 6e 01 	sts	0x016E, r24
	cur_state = IDLE;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	80 93 c0 01 	sts	0x01C0, r24
	next_state = IDLE;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 a3 01 	sts	0x01A3, r24

	timer = 0;
     710:	10 92 6a 01 	sts	0x016A, r1
     714:	10 92 6b 01 	sts	0x016B, r1
     718:	10 92 6c 01 	sts	0x016C, r1
     71c:	10 92 6d 01 	sts	0x016D, r1

	eeprom_busy_wait();
     720:	8f e3       	ldi	r24, 0x3F	; 63
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fc 01       	movw	r30, r24
     726:	80 81       	ld	r24, Z
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	82 70       	andi	r24, 0x02	; 2
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	00 97       	sbiw	r24, 0x00	; 0
     732:	b1 f7       	brne	.-20     	; 0x720 <__stack+0x221>
	wpm = eeprom_read_byte(&ee_wpm);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 ed 1c 	call	0x39da	; 0x39da <__eerd_byte_m168>
     73c:	80 93 d8 01 	sts	0x01D8, r24
	set_wpm(wpm);
     740:	80 91 d8 01 	lds	r24, 0x01D8
     744:	0e 94 ee 03 	call	0x7dc	; 0x7dc <set_wpm>

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = DDS_INIT;
     748:	8c e0       	ldi	r24, 0x0C	; 12
     74a:	9f e1       	ldi	r25, 0x1F	; 31
     74c:	a1 e1       	ldi	r26, 0x11	; 17
     74e:	b5 e0       	ldi	r27, 0x05	; 5
     750:	80 93 a8 01 	sts	0x01A8, r24
     754:	90 93 a9 01 	sts	0x01A9, r25
     758:	a0 93 aa 01 	sts	0x01AA, r26
     75c:	b0 93 ab 01 	sts	0x01AB, r27
	tune_freq = FREQ_INIT;
     760:	80 ee       	ldi	r24, 0xE0	; 224
     762:	99 e8       	ldi	r25, 0x89	; 137
     764:	a6 ed       	ldi	r26, 0xD6	; 214
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	80 93 d4 01 	sts	0x01D4, r24
     76c:	90 93 d5 01 	sts	0x01D5, r25
     770:	a0 93 d6 01 	sts	0x01D6, r26
     774:	b0 93 d7 01 	sts	0x01D7, r27
	tune_dds(dds_freq_word, REG_0, TRUE);
     778:	80 91 a8 01 	lds	r24, 0x01A8
     77c:	90 91 a9 01 	lds	r25, 0x01A9
     780:	a0 91 aa 01 	lds	r26, 0x01AA
     784:	b0 91 ab 01 	lds	r27, 0x01AB
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <tune_dds>
	tune_dds(dds_freq_word, REG_1, FALSE);
     794:	80 91 a8 01 	lds	r24, 0x01A8
     798:	90 91 a9 01 	lds	r25, 0x01A9
     79c:	a0 91 aa 01 	lds	r26, 0x01AA
     7a0:	b0 91 ab 01 	lds	r27, 0x01AB
     7a4:	bc 01       	movw	r22, r24
     7a6:	cd 01       	movw	r24, r26
     7a8:	41 e0       	ldi	r20, 0x01	; 1
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <tune_dds>

	st_freq = ST_DEFAULT;
     7b0:	84 ef       	ldi	r24, 0xF4	; 244
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	90 93 b7 01 	sts	0x01B7, r25
     7b8:	80 93 b6 01 	sts	0x01B6, r24
	set_st_freq(st_freq);
     7bc:	80 91 b6 01 	lds	r24, 0x01B6
     7c0:	90 91 b7 01 	lds	r25, 0x01B7
     7c4:	cc 01       	movw	r24, r24
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	bc 01       	movw	r22, r24
     7cc:	cd 01       	movw	r24, r26
     7ce:	0e 94 2f 0b 	call	0x165e	; 0x165e <set_st_freq>

	// Enable interrupts
	sei();
     7d2:	78 94       	sei
}
     7d4:	0f 90       	pop	r0
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	0f 92       	push	r0
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 100 us per timer tick (dividing by 0.1 ms, so multiply by 10)
	dit_length = (1200 / new_wpm);
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	28 2f       	mov	r18, r24
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	80 eb       	ldi	r24, 0xB0	; 176
     7f0:	94 e0       	ldi	r25, 0x04	; 4
     7f2:	b9 01       	movw	r22, r18
     7f4:	0e 94 4a 19 	call	0x3294	; 0x3294 <__divmodhi4>
     7f8:	9b 01       	movw	r18, r22
     7fa:	c9 01       	movw	r24, r18
     7fc:	90 93 70 01 	sts	0x0170, r25
     800:	80 93 6f 01 	sts	0x016F, r24
}
     804:	0f 90       	pop	r0
     806:	cf 91       	pop	r28
     808:	df 91       	pop	r29
     80a:	08 95       	ret

0000080c <debounce>:

void debounce(enum BOOL flush)
{
     80c:	df 93       	push	r29
     80e:	cf 93       	push	r28
     810:	0f 92       	push	r0
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	41 f5       	brne	.+80     	; 0x86e <debounce+0x62>
	{
		dit_on_count = 0;
     81e:	10 92 4c 01 	sts	0x014C, r1
     822:	10 92 4b 01 	sts	0x014B, r1
		dah_on_count = 0;
     826:	10 92 4e 01 	sts	0x014E, r1
     82a:	10 92 4d 01 	sts	0x014D, r1
		dit_off_count = 0;
     82e:	10 92 50 01 	sts	0x0150, r1
     832:	10 92 4f 01 	sts	0x014F, r1
		dah_off_count = 0;
     836:	10 92 52 01 	sts	0x0152, r1
     83a:	10 92 51 01 	sts	0x0151, r1
		cmd_on_count = 0;
     83e:	10 92 54 01 	sts	0x0154, r1
     842:	10 92 53 01 	sts	0x0153, r1
		msg_on_count = 0;
     846:	10 92 56 01 	sts	0x0156, r1
     84a:	10 92 55 01 	sts	0x0155, r1
		both_on_count = 0;
     84e:	10 92 58 01 	sts	0x0158, r1
     852:	10 92 57 01 	sts	0x0157, r1
		enc_on_count = 0;
     856:	10 92 5a 01 	sts	0x015A, r1
     85a:	10 92 59 01 	sts	0x0159, r1
		enca_on_count = 0;
     85e:	10 92 5c 01 	sts	0x015C, r1
     862:	10 92 5b 01 	sts	0x015B, r1
		encb_on_count = 0;
     866:	10 92 5e 01 	sts	0x015E, r1
     86a:	10 92 5d 01 	sts	0x015D, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     86e:	89 e2       	ldi	r24, 0x29	; 41
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	fc 01       	movw	r30, r24
     874:	80 81       	ld	r24, Z
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	88 70       	andi	r24, 0x08	; 8
     87c:	90 70       	andi	r25, 0x00	; 0
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	a9 f4       	brne	.+42     	; 0x8ac <debounce+0xa0>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     882:	80 91 4b 01 	lds	r24, 0x014B
     886:	90 91 4c 01 	lds	r25, 0x014C
     88a:	85 30       	cpi	r24, 0x05	; 5
     88c:	91 05       	cpc	r25, r1
     88e:	48 f4       	brcc	.+18     	; 0x8a2 <debounce+0x96>
			dit_on_count++;
     890:	80 91 4b 01 	lds	r24, 0x014B
     894:	90 91 4c 01 	lds	r25, 0x014C
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	90 93 4c 01 	sts	0x014C, r25
     89e:	80 93 4b 01 	sts	0x014B, r24
		dit_off_count = 0;
     8a2:	10 92 50 01 	sts	0x0150, r1
     8a6:	10 92 4f 01 	sts	0x014F, r1
     8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <debounce+0xc8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     8ac:	80 91 4f 01 	lds	r24, 0x014F
     8b0:	90 91 50 01 	lds	r25, 0x0150
     8b4:	85 30       	cpi	r24, 0x05	; 5
     8b6:	91 05       	cpc	r25, r1
     8b8:	48 f4       	brcc	.+18     	; 0x8cc <debounce+0xc0>
			dit_off_count++;
     8ba:	80 91 4f 01 	lds	r24, 0x014F
     8be:	90 91 50 01 	lds	r25, 0x0150
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	90 93 50 01 	sts	0x0150, r25
     8c8:	80 93 4f 01 	sts	0x014F, r24
		dit_on_count = 0;
     8cc:	10 92 4c 01 	sts	0x014C, r1
     8d0:	10 92 4b 01 	sts	0x014B, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     8d4:	89 e2       	ldi	r24, 0x29	; 41
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	fc 01       	movw	r30, r24
     8da:	80 81       	ld	r24, Z
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	80 71       	andi	r24, 0x10	; 16
     8e2:	90 70       	andi	r25, 0x00	; 0
     8e4:	00 97       	sbiw	r24, 0x00	; 0
     8e6:	a9 f4       	brne	.+42     	; 0x912 <debounce+0x106>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     8e8:	80 91 4d 01 	lds	r24, 0x014D
     8ec:	90 91 4e 01 	lds	r25, 0x014E
     8f0:	85 30       	cpi	r24, 0x05	; 5
     8f2:	91 05       	cpc	r25, r1
     8f4:	48 f4       	brcc	.+18     	; 0x908 <debounce+0xfc>
			dah_on_count++;
     8f6:	80 91 4d 01 	lds	r24, 0x014D
     8fa:	90 91 4e 01 	lds	r25, 0x014E
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	90 93 4e 01 	sts	0x014E, r25
     904:	80 93 4d 01 	sts	0x014D, r24
		dah_off_count = 0;
     908:	10 92 52 01 	sts	0x0152, r1
     90c:	10 92 51 01 	sts	0x0151, r1
     910:	14 c0       	rjmp	.+40     	; 0x93a <debounce+0x12e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     912:	80 91 51 01 	lds	r24, 0x0151
     916:	90 91 52 01 	lds	r25, 0x0152
     91a:	85 30       	cpi	r24, 0x05	; 5
     91c:	91 05       	cpc	r25, r1
     91e:	48 f4       	brcc	.+18     	; 0x932 <debounce+0x126>
			dah_off_count++;
     920:	80 91 51 01 	lds	r24, 0x0151
     924:	90 91 52 01 	lds	r25, 0x0152
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	90 93 52 01 	sts	0x0152, r25
     92e:	80 93 51 01 	sts	0x0151, r24
		dah_on_count = 0;
     932:	10 92 4e 01 	sts	0x014E, r1
     936:	10 92 4d 01 	sts	0x014D, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     93a:	80 91 4b 01 	lds	r24, 0x014B
     93e:	90 91 4c 01 	lds	r25, 0x014C
     942:	85 30       	cpi	r24, 0x05	; 5
     944:	91 05       	cpc	r25, r1
     946:	18 f0       	brcs	.+6      	; 0x94e <debounce+0x142>
		dit_active = TRUE;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 d2 01 	sts	0x01D2, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     94e:	80 91 4f 01 	lds	r24, 0x014F
     952:	90 91 50 01 	lds	r25, 0x0150
     956:	85 30       	cpi	r24, 0x05	; 5
     958:	91 05       	cpc	r25, r1
     95a:	10 f0       	brcs	.+4      	; 0x960 <debounce+0x154>
		dit_active = FALSE;
     95c:	10 92 d2 01 	sts	0x01D2, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     960:	80 91 4d 01 	lds	r24, 0x014D
     964:	90 91 4e 01 	lds	r25, 0x014E
     968:	85 30       	cpi	r24, 0x05	; 5
     96a:	91 05       	cpc	r25, r1
     96c:	18 f0       	brcs	.+6      	; 0x974 <debounce+0x168>
		dah_active = TRUE;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 bc 01 	sts	0x01BC, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     974:	80 91 51 01 	lds	r24, 0x0151
     978:	90 91 52 01 	lds	r25, 0x0152
     97c:	85 30       	cpi	r24, 0x05	; 5
     97e:	91 05       	cpc	r25, r1
     980:	10 f0       	brcs	.+4      	; 0x986 <debounce+0x17a>
		dah_active = FALSE;
     982:	10 92 bc 01 	sts	0x01BC, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     986:	89 e2       	ldi	r24, 0x29	; 41
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	80 81       	ld	r24, Z
     98e:	88 2f       	mov	r24, r24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	84 70       	andi	r24, 0x04	; 4
     994:	90 70       	andi	r25, 0x00	; 0
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	a1 f4       	brne	.+40     	; 0x9c2 <debounce+0x1b6>
     99a:	89 e2       	ldi	r24, 0x29	; 41
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	fc 01       	movw	r30, r24
     9a0:	80 81       	ld	r24, Z
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	82 70       	andi	r24, 0x02	; 2
     9a8:	90 70       	andi	r25, 0x00	; 0
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	51 f4       	brne	.+20     	; 0x9c2 <debounce+0x1b6>
		both_on_count++;
     9ae:	80 91 57 01 	lds	r24, 0x0157
     9b2:	90 91 58 01 	lds	r25, 0x0158
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	90 93 58 01 	sts	0x0158, r25
     9bc:	80 93 57 01 	sts	0x0157, r24
     9c0:	25 c0       	rjmp	.+74     	; 0xa0c <debounce+0x200>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     9c2:	80 91 57 01 	lds	r24, 0x0157
     9c6:	90 91 58 01 	lds	r25, 0x0158
     9ca:	85 30       	cpi	r24, 0x05	; 5
     9cc:	91 05       	cpc	r25, r1
     9ce:	60 f0       	brcs	.+24     	; 0x9e8 <debounce+0x1dc>
     9d0:	80 91 57 01 	lds	r24, 0x0157
     9d4:	90 91 58 01 	lds	r25, 0x0158
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
     9da:	84 3f       	cpi	r24, 0xF4	; 244
     9dc:	9f 07       	cpc	r25, r31
     9de:	20 f4       	brcc	.+8      	; 0x9e8 <debounce+0x1dc>
			both_btn = PRESS;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 be 01 	sts	0x01BE, r24
     9e6:	0e c0       	rjmp	.+28     	; 0xa04 <debounce+0x1f8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     9e8:	80 91 57 01 	lds	r24, 0x0157
     9ec:	90 91 58 01 	lds	r25, 0x0158
     9f0:	21 e0       	ldi	r18, 0x01	; 1
     9f2:	84 3f       	cpi	r24, 0xF4	; 244
     9f4:	92 07       	cpc	r25, r18
     9f6:	20 f0       	brcs	.+8      	; 0xa00 <debounce+0x1f4>
			both_btn = HOLD;
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	80 93 be 01 	sts	0x01BE, r24
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <debounce+0x1f8>
		else
			both_btn = OFF;
     a00:	10 92 be 01 	sts	0x01BE, r1

		both_on_count = 0;
     a04:	10 92 58 01 	sts	0x0158, r1
     a08:	10 92 57 01 	sts	0x0157, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     a0c:	89 e2       	ldi	r24, 0x29	; 41
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	84 70       	andi	r24, 0x04	; 4
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	51 f4       	brne	.+20     	; 0xa34 <debounce+0x228>
	{
		cmd_on_count++;
     a20:	80 91 53 01 	lds	r24, 0x0153
     a24:	90 91 54 01 	lds	r25, 0x0154
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	90 93 54 01 	sts	0x0154, r25
     a2e:	80 93 53 01 	sts	0x0153, r24
     a32:	25 c0       	rjmp	.+74     	; 0xa7e <debounce+0x272>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     a34:	80 91 53 01 	lds	r24, 0x0153
     a38:	90 91 54 01 	lds	r25, 0x0154
     a3c:	85 30       	cpi	r24, 0x05	; 5
     a3e:	91 05       	cpc	r25, r1
     a40:	60 f0       	brcs	.+24     	; 0xa5a <debounce+0x24e>
     a42:	80 91 53 01 	lds	r24, 0x0153
     a46:	90 91 54 01 	lds	r25, 0x0154
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	84 3f       	cpi	r24, 0xF4	; 244
     a4e:	9f 07       	cpc	r25, r31
     a50:	20 f4       	brcc	.+8      	; 0xa5a <debounce+0x24e>
			cmd_btn = PRESS;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 bf 01 	sts	0x01BF, r24
     a58:	0e c0       	rjmp	.+28     	; 0xa76 <debounce+0x26a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     a5a:	80 91 53 01 	lds	r24, 0x0153
     a5e:	90 91 54 01 	lds	r25, 0x0154
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	84 3f       	cpi	r24, 0xF4	; 244
     a66:	92 07       	cpc	r25, r18
     a68:	20 f0       	brcs	.+8      	; 0xa72 <debounce+0x266>
			cmd_btn = HOLD;
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	80 93 bf 01 	sts	0x01BF, r24
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <debounce+0x26a>
		else
			cmd_btn = OFF;
     a72:	10 92 bf 01 	sts	0x01BF, r1

		cmd_on_count = 0;
     a76:	10 92 54 01 	sts	0x0154, r1
     a7a:	10 92 53 01 	sts	0x0153, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     a7e:	89 e2       	ldi	r24, 0x29	; 41
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	82 70       	andi	r24, 0x02	; 2
     a8c:	90 70       	andi	r25, 0x00	; 0
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	51 f4       	brne	.+20     	; 0xaa6 <debounce+0x29a>
		msg_on_count++;
     a92:	80 91 55 01 	lds	r24, 0x0155
     a96:	90 91 56 01 	lds	r25, 0x0156
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	90 93 56 01 	sts	0x0156, r25
     aa0:	80 93 55 01 	sts	0x0155, r24
     aa4:	25 c0       	rjmp	.+74     	; 0xaf0 <debounce+0x2e4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     aa6:	80 91 55 01 	lds	r24, 0x0155
     aaa:	90 91 56 01 	lds	r25, 0x0156
     aae:	85 30       	cpi	r24, 0x05	; 5
     ab0:	91 05       	cpc	r25, r1
     ab2:	60 f0       	brcs	.+24     	; 0xacc <debounce+0x2c0>
     ab4:	80 91 55 01 	lds	r24, 0x0155
     ab8:	90 91 56 01 	lds	r25, 0x0156
     abc:	f1 e0       	ldi	r31, 0x01	; 1
     abe:	84 3f       	cpi	r24, 0xF4	; 244
     ac0:	9f 07       	cpc	r25, r31
     ac2:	20 f4       	brcc	.+8      	; 0xacc <debounce+0x2c0>
			msg_btn = PRESS;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 bd 01 	sts	0x01BD, r24
     aca:	0e c0       	rjmp	.+28     	; 0xae8 <debounce+0x2dc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     acc:	80 91 55 01 	lds	r24, 0x0155
     ad0:	90 91 56 01 	lds	r25, 0x0156
     ad4:	21 e0       	ldi	r18, 0x01	; 1
     ad6:	84 3f       	cpi	r24, 0xF4	; 244
     ad8:	92 07       	cpc	r25, r18
     ada:	20 f0       	brcs	.+8      	; 0xae4 <debounce+0x2d8>
			msg_btn = HOLD;
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	80 93 bd 01 	sts	0x01BD, r24
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <debounce+0x2dc>
		else
			msg_btn = OFF;
     ae4:	10 92 bd 01 	sts	0x01BD, r1

		msg_on_count = 0;
     ae8:	10 92 56 01 	sts	0x0156, r1
     aec:	10 92 55 01 	sts	0x0155, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     af0:	89 e2       	ldi	r24, 0x29	; 41
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	fc 01       	movw	r30, r24
     af6:	80 81       	ld	r24, Z
     af8:	88 2f       	mov	r24, r24
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	81 70       	andi	r24, 0x01	; 1
     afe:	90 70       	andi	r25, 0x00	; 0
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	51 f4       	brne	.+20     	; 0xb18 <debounce+0x30c>
		enc_on_count++;
     b04:	80 91 59 01 	lds	r24, 0x0159
     b08:	90 91 5a 01 	lds	r25, 0x015A
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	90 93 5a 01 	sts	0x015A, r25
     b12:	80 93 59 01 	sts	0x0159, r24
     b16:	25 c0       	rjmp	.+74     	; 0xb62 <debounce+0x356>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     b18:	80 91 59 01 	lds	r24, 0x0159
     b1c:	90 91 5a 01 	lds	r25, 0x015A
     b20:	85 30       	cpi	r24, 0x05	; 5
     b22:	91 05       	cpc	r25, r1
     b24:	60 f0       	brcs	.+24     	; 0xb3e <debounce+0x332>
     b26:	80 91 59 01 	lds	r24, 0x0159
     b2a:	90 91 5a 01 	lds	r25, 0x015A
     b2e:	f1 e0       	ldi	r31, 0x01	; 1
     b30:	84 3f       	cpi	r24, 0xF4	; 244
     b32:	9f 07       	cpc	r25, r31
     b34:	20 f4       	brcc	.+8      	; 0xb3e <debounce+0x332>
			enc_btn = PRESS;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 c9 01 	sts	0x01C9, r24
     b3c:	0e c0       	rjmp	.+28     	; 0xb5a <debounce+0x34e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     b3e:	80 91 59 01 	lds	r24, 0x0159
     b42:	90 91 5a 01 	lds	r25, 0x015A
     b46:	21 e0       	ldi	r18, 0x01	; 1
     b48:	84 3f       	cpi	r24, 0xF4	; 244
     b4a:	92 07       	cpc	r25, r18
     b4c:	20 f0       	brcs	.+8      	; 0xb56 <debounce+0x34a>
			enc_btn = HOLD;
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	80 93 c9 01 	sts	0x01C9, r24
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <debounce+0x34e>
		else
			enc_btn = OFF;
     b56:	10 92 c9 01 	sts	0x01C9, r1

		enc_on_count = 0;
     b5a:	10 92 5a 01 	sts	0x015A, r1
     b5e:	10 92 59 01 	sts	0x0159, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     b62:	83 e2       	ldi	r24, 0x23	; 35
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	80 81       	ld	r24, Z
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	81 70       	andi	r24, 0x01	; 1
     b70:	90 70       	andi	r25, 0x00	; 0
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	a9 f4       	brne	.+42     	; 0xba0 <debounce+0x394>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     b76:	80 91 5b 01 	lds	r24, 0x015B
     b7a:	90 91 5c 01 	lds	r25, 0x015C
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	91 05       	cpc	r25, r1
     b82:	48 f4       	brcc	.+18     	; 0xb96 <debounce+0x38a>
			enca_on_count++;
     b84:	80 91 5b 01 	lds	r24, 0x015B
     b88:	90 91 5c 01 	lds	r25, 0x015C
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	90 93 5c 01 	sts	0x015C, r25
     b92:	80 93 5b 01 	sts	0x015B, r24
		enca_off_count = 0;
     b96:	10 92 60 01 	sts	0x0160, r1
     b9a:	10 92 5f 01 	sts	0x015F, r1
     b9e:	14 c0       	rjmp	.+40     	; 0xbc8 <debounce+0x3bc>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     ba0:	80 91 5f 01 	lds	r24, 0x015F
     ba4:	90 91 60 01 	lds	r25, 0x0160
     ba8:	85 30       	cpi	r24, 0x05	; 5
     baa:	91 05       	cpc	r25, r1
     bac:	48 f4       	brcc	.+18     	; 0xbc0 <debounce+0x3b4>
			enca_off_count++;
     bae:	80 91 5f 01 	lds	r24, 0x015F
     bb2:	90 91 60 01 	lds	r25, 0x0160
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	90 93 60 01 	sts	0x0160, r25
     bbc:	80 93 5f 01 	sts	0x015F, r24
		enca_on_count = 0;
     bc0:	10 92 5c 01 	sts	0x015C, r1
     bc4:	10 92 5b 01 	sts	0x015B, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     bc8:	89 e2       	ldi	r24, 0x29	; 41
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	fc 01       	movw	r30, r24
     bce:	80 81       	ld	r24, Z
     bd0:	88 23       	and	r24, r24
     bd2:	ac f0       	brlt	.+42     	; 0xbfe <debounce+0x3f2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     bd4:	80 91 5d 01 	lds	r24, 0x015D
     bd8:	90 91 5e 01 	lds	r25, 0x015E
     bdc:	85 30       	cpi	r24, 0x05	; 5
     bde:	91 05       	cpc	r25, r1
     be0:	48 f4       	brcc	.+18     	; 0xbf4 <debounce+0x3e8>
			encb_on_count++;
     be2:	80 91 5d 01 	lds	r24, 0x015D
     be6:	90 91 5e 01 	lds	r25, 0x015E
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	90 93 5e 01 	sts	0x015E, r25
     bf0:	80 93 5d 01 	sts	0x015D, r24
		encb_off_count = 0;
     bf4:	10 92 62 01 	sts	0x0162, r1
     bf8:	10 92 61 01 	sts	0x0161, r1
     bfc:	14 c0       	rjmp	.+40     	; 0xc26 <debounce+0x41a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     bfe:	80 91 61 01 	lds	r24, 0x0161
     c02:	90 91 62 01 	lds	r25, 0x0162
     c06:	85 30       	cpi	r24, 0x05	; 5
     c08:	91 05       	cpc	r25, r1
     c0a:	48 f4       	brcc	.+18     	; 0xc1e <debounce+0x412>
			encb_off_count++;
     c0c:	80 91 61 01 	lds	r24, 0x0161
     c10:	90 91 62 01 	lds	r25, 0x0162
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	90 93 62 01 	sts	0x0162, r25
     c1a:	80 93 61 01 	sts	0x0161, r24
		encb_on_count = 0;
     c1e:	10 92 5e 01 	sts	0x015E, r1
     c22:	10 92 5d 01 	sts	0x015D, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     c26:	80 91 5b 01 	lds	r24, 0x015B
     c2a:	90 91 5c 01 	lds	r25, 0x015C
     c2e:	85 30       	cpi	r24, 0x05	; 5
     c30:	91 05       	cpc	r25, r1
     c32:	18 f0       	brcs	.+6      	; 0xc3a <debounce+0x42e>
		enc_a = TRUE;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 63 01 	sts	0x0163, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     c3a:	80 91 5f 01 	lds	r24, 0x015F
     c3e:	90 91 60 01 	lds	r25, 0x0160
     c42:	85 30       	cpi	r24, 0x05	; 5
     c44:	91 05       	cpc	r25, r1
     c46:	10 f0       	brcs	.+4      	; 0xc4c <debounce+0x440>
		enc_a = FALSE;
     c48:	10 92 63 01 	sts	0x0163, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     c4c:	80 91 5d 01 	lds	r24, 0x015D
     c50:	90 91 5e 01 	lds	r25, 0x015E
     c54:	85 30       	cpi	r24, 0x05	; 5
     c56:	91 05       	cpc	r25, r1
     c58:	18 f0       	brcs	.+6      	; 0xc60 <debounce+0x454>
		enc_b = TRUE;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	80 93 e3 01 	sts	0x01E3, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     c60:	80 91 61 01 	lds	r24, 0x0161
     c64:	90 91 62 01 	lds	r25, 0x0162
     c68:	85 30       	cpi	r24, 0x05	; 5
     c6a:	91 05       	cpc	r25, r1
     c6c:	10 f0       	brcs	.+4      	; 0xc72 <debounce+0x466>
		enc_b = FALSE;
     c6e:	10 92 e3 01 	sts	0x01E3, r1

	// Don't go to sleep if there are any paddle or button presses
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
     c72:	80 91 4b 01 	lds	r24, 0x014B
     c76:	90 91 4c 01 	lds	r25, 0x014C
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	c1 f4       	brne	.+48     	; 0xcae <debounce+0x4a2>
     c7e:	80 91 4d 01 	lds	r24, 0x014D
     c82:	90 91 4e 01 	lds	r25, 0x014E
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	91 f4       	brne	.+36     	; 0xcae <debounce+0x4a2>
     c8a:	80 91 53 01 	lds	r24, 0x0153
     c8e:	90 91 54 01 	lds	r25, 0x0154
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	61 f4       	brne	.+24     	; 0xcae <debounce+0x4a2>
     c96:	80 91 55 01 	lds	r24, 0x0155
     c9a:	90 91 56 01 	lds	r25, 0x0156
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	31 f4       	brne	.+12     	; 0xcae <debounce+0x4a2>
     ca2:	80 91 57 01 	lds	r24, 0x0157
     ca6:	90 91 58 01 	lds	r25, 0x0158
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	19 f0       	breq	.+6      	; 0xcb4 <debounce+0x4a8>
		allow_sleep = FALSE;
     cae:	10 92 0a 01 	sts	0x010A, r1
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <debounce+0x4ae>
	else
		allow_sleep = TRUE;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	80 93 0a 01 	sts	0x010A, r24
}
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <announce>:

void announce(char * msg, uint16_t freq, uint8_t speed)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <announce+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <announce+0x8>
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	7c 83       	std	Y+4, r23	; 0x04
     cd6:	6b 83       	std	Y+3, r22	; 0x03
     cd8:	4d 83       	std	Y+5, r20	; 0x05
	// Convert to uppercase
	strupr(msg);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	0e 94 c9 1a 	call	0x3592	; 0x3592 <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     ce2:	80 91 dd 01 	lds	r24, 0x01DD
     ce6:	90 91 de 01 	lds	r25, 0x01DE
     cea:	29 81       	ldd	r18, Y+1	; 0x01
     cec:	3a 81       	ldd	r19, Y+2	; 0x02
     cee:	b9 01       	movw	r22, r18
     cf0:	0e 94 c2 1a 	call	0x3584	; 0x3584 <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     cf4:	80 91 c0 01 	lds	r24, 0x01C0
     cf8:	80 93 6e 01 	sts	0x016E, r24
	prev_state_end = cur_state_end;
     cfc:	80 91 ca 01 	lds	r24, 0x01CA
     d00:	90 91 cb 01 	lds	r25, 0x01CB
     d04:	a0 91 cc 01 	lds	r26, 0x01CC
     d08:	b0 91 cd 01 	lds	r27, 0x01CD
     d0c:	80 93 b0 01 	sts	0x01B0, r24
     d10:	90 93 b1 01 	sts	0x01B1, r25
     d14:	a0 93 b2 01 	sts	0x01B2, r26
     d18:	b0 93 b3 01 	sts	0x01B3, r27
	prev_mode = cur_mode;
     d1c:	80 91 9e 01 	lds	r24, 0x019E
     d20:	80 93 b4 01 	sts	0x01B4, r24
	prev_st_freq = st_freq;
     d24:	80 91 b6 01 	lds	r24, 0x01B6
     d28:	90 91 b7 01 	lds	r25, 0x01B7
     d2c:	90 93 c4 01 	sts	0x01C4, r25
     d30:	80 93 c3 01 	sts	0x01C3, r24
	st_freq = freq;
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	9c 81       	ldd	r25, Y+4	; 0x04
     d38:	90 93 b7 01 	sts	0x01B7, r25
     d3c:	80 93 b6 01 	sts	0x01B6, r24
	prev_wpm = wpm;
     d40:	80 91 d8 01 	lds	r24, 0x01D8
     d44:	80 93 e5 01 	sts	0x01E5, r24
	wpm = speed;
     d48:	8d 81       	ldd	r24, Y+5	; 0x05
     d4a:	80 93 d8 01 	sts	0x01D8, r24

	set_st_freq(st_freq);
     d4e:	80 91 b6 01 	lds	r24, 0x01B6
     d52:	90 91 b7 01 	lds	r25, 0x01B7
     d56:	cc 01       	movw	r24, r24
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 2f 0b 	call	0x165e	; 0x165e <set_st_freq>
	set_wpm(wpm);
     d64:	80 91 d8 01 	lds	r24, 0x01D8
     d68:	0e 94 ee 03 	call	0x7dc	; 0x7dc <set_wpm>

	// Set into announce mode
	cur_state = IDLE;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 c0 01 	sts	0x01C0, r24
	cur_mode = ANNOUNCE;
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	80 93 9e 01 	sts	0x019E, r24
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <read_voltage>:

void read_voltage(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <read_voltage+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <read_voltage+0x8>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <read_voltage+0xa>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <malloc>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     da2:	8a e7       	ldi	r24, 0x7A	; 122
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	2a e7       	ldi	r18, 0x7A	; 122
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	d9 01       	movw	r26, r18
     dac:	2c 91       	ld	r18, X
     dae:	20 64       	ori	r18, 0x40	; 64
     db0:	fc 01       	movw	r30, r24
     db2:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     db4:	8a e7       	ldi	r24, 0x7A	; 122
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	dc 01       	movw	r26, r24
     dba:	8c 91       	ld	r24, X
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	80 74       	andi	r24, 0x40	; 64
     dc2:	90 70       	andi	r25, 0x00	; 0
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	b1 f7       	brne	.-20     	; 0xdb4 <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     dc8:	89 e7       	ldi	r24, 0x79	; 121
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	fc 01       	movw	r30, r24
     dce:	80 81       	ld	r24, Z
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9c 83       	std	Y+4, r25	; 0x04
     dd6:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 16.1 V
	// We'll use fixed point numbers, so full scale is 161 * 0.1 V
	vcc = (vcc_mon * 161) / 256;
     dd8:	4b 81       	ldd	r20, Y+3	; 0x03
     dda:	5c 81       	ldd	r21, Y+4	; 0x04
     ddc:	21 ea       	ldi	r18, 0xA1	; 161
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	42 9f       	mul	r20, r18
     de2:	c0 01       	movw	r24, r0
     de4:	43 9f       	mul	r20, r19
     de6:	90 0d       	add	r25, r0
     de8:	52 9f       	mul	r21, r18
     dea:	90 0d       	add	r25, r0
     dec:	11 24       	eor	r1, r1
     dee:	89 2f       	mov	r24, r25
     df0:	99 27       	eor	r25, r25
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	2a e0       	ldi	r18, 0x0A	; 10
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	0e 94 36 19 	call	0x326c	; 0x326c <__udivmodhi4>
     e04:	9b 01       	movw	r18, r22
     e06:	f9 01       	movw	r30, r18
     e08:	8d 81       	ldd	r24, Y+5	; 0x05
     e0a:	9e 81       	ldd	r25, Y+6	; 0x06
     e0c:	2a e0       	ldi	r18, 0x0A	; 10
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	b9 01       	movw	r22, r18
     e12:	0e 94 36 19 	call	0x326c	; 0x326c <__udivmodhi4>
     e16:	9c 01       	movw	r18, r24
     e18:	8d b7       	in	r24, 0x3d	; 61
     e1a:	9e b7       	in	r25, 0x3e	; 62
     e1c:	08 97       	sbiw	r24, 0x08	; 8
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	9e bf       	out	0x3e, r25	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	8d bf       	out	0x3d, r24	; 61
     e28:	8d b7       	in	r24, 0x3d	; 61
     e2a:	9e b7       	in	r25, 0x3e	; 62
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	49 81       	ldd	r20, Y+1	; 0x01
     e30:	5a 81       	ldd	r21, Y+2	; 0x02
     e32:	dc 01       	movw	r26, r24
     e34:	4d 93       	st	X+, r20
     e36:	5c 93       	st	X, r21
     e38:	4b e0       	ldi	r20, 0x0B	; 11
     e3a:	51 e0       	ldi	r21, 0x01	; 1
     e3c:	dc 01       	movw	r26, r24
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	5c 93       	st	X, r21
     e42:	4e 93       	st	-X, r20
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	dc 01       	movw	r26, r24
     e48:	15 96       	adiw	r26, 0x05	; 5
     e4a:	fc 93       	st	X, r31
     e4c:	ee 93       	st	-X, r30
     e4e:	14 97       	sbiw	r26, 0x04	; 4
     e50:	fc 01       	movw	r30, r24
     e52:	37 83       	std	Z+7, r19	; 0x07
     e54:	26 83       	std	Z+6, r18	; 0x06
     e56:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sprintf>
     e5a:	8d b7       	in	r24, 0x3d	; 61
     e5c:	9e b7       	in	r25, 0x3e	; 62
     e5e:	08 96       	adiw	r24, 0x08	; 8
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	9e bf       	out	0x3e, r25	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq, wpm);
     e6a:	20 91 b6 01 	lds	r18, 0x01B6
     e6e:	30 91 b7 01 	lds	r19, 0x01B7
     e72:	40 91 d8 01 	lds	r20, 0x01D8
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	b9 01       	movw	r22, r18
     e7c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>

	free(vcc_out);
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	0e 94 19 1a 	call	0x3432	; 0x3432 <free>
}
     e88:	26 96       	adiw	r28, 0x06	; 6
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <count_frequency>:

void count_frequency(void)
{
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <count_frequency+0xa>
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     ea8:	8f e0       	ldi	r24, 0x0F	; 15
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 7f 19 	call	0x32fe	; 0x32fe <malloc>
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     eb4:	80 91 d4 01 	lds	r24, 0x01D4
     eb8:	90 91 d5 01 	lds	r25, 0x01D5
     ebc:	a0 91 d6 01 	lds	r26, 0x01D6
     ec0:	b0 91 d7 01 	lds	r27, 0x01D7
     ec4:	28 ee       	ldi	r18, 0xE8	; 232
     ec6:	33 e0       	ldi	r19, 0x03	; 3
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	bc 01       	movw	r22, r24
     ece:	cd 01       	movw	r24, r26
     ed0:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__udivmodsi4>
     ed4:	da 01       	movw	r26, r20
     ed6:	c9 01       	movw	r24, r18
     ed8:	24 e6       	ldi	r18, 0x64	; 100
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__udivmodsi4>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	8c 01       	movw	r16, r24
     eee:	80 91 d4 01 	lds	r24, 0x01D4
     ef2:	90 91 d5 01 	lds	r25, 0x01D5
     ef6:	a0 91 d6 01 	lds	r26, 0x01D6
     efa:	b0 91 d7 01 	lds	r27, 0x01D7
     efe:	28 ee       	ldi	r18, 0xE8	; 232
     f00:	33 e0       	ldi	r19, 0x03	; 3
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__udivmodsi4>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	2a e0       	ldi	r18, 0x0A	; 10
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__udivmodsi4>
     f22:	da 01       	movw	r26, r20
     f24:	c9 01       	movw	r24, r18
     f26:	9c 01       	movw	r18, r24
     f28:	8d b7       	in	r24, 0x3d	; 61
     f2a:	9e b7       	in	r25, 0x3e	; 62
     f2c:	08 97       	sbiw	r24, 0x08	; 8
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	9e bf       	out	0x3e, r25	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	8d bf       	out	0x3d, r24	; 61
     f38:	8d b7       	in	r24, 0x3d	; 61
     f3a:	9e b7       	in	r25, 0x3e	; 62
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	49 81       	ldd	r20, Y+1	; 0x01
     f40:	5a 81       	ldd	r21, Y+2	; 0x02
     f42:	fc 01       	movw	r30, r24
     f44:	51 83       	std	Z+1, r21	; 0x01
     f46:	40 83       	st	Z, r20
     f48:	41 e1       	ldi	r20, 0x11	; 17
     f4a:	51 e0       	ldi	r21, 0x01	; 1
     f4c:	fc 01       	movw	r30, r24
     f4e:	53 83       	std	Z+3, r21	; 0x03
     f50:	42 83       	std	Z+2, r20	; 0x02
     f52:	fc 01       	movw	r30, r24
     f54:	15 83       	std	Z+5, r17	; 0x05
     f56:	04 83       	std	Z+4, r16	; 0x04
     f58:	fc 01       	movw	r30, r24
     f5a:	37 83       	std	Z+7, r19	; 0x07
     f5c:	26 83       	std	Z+6, r18	; 0x06
     f5e:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sprintf>
     f62:	8d b7       	in	r24, 0x3d	; 61
     f64:	9e b7       	in	r25, 0x3e	; 62
     f66:	08 96       	adiw	r24, 0x08	; 8
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	9e bf       	out	0x3e, r25	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out, st_freq, wpm);
     f72:	20 91 b6 01 	lds	r18, 0x01B6
     f76:	30 91 b7 01 	lds	r19, 0x01B7
     f7a:	40 91 d8 01 	lds	r20, 0x01D8
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	b9 01       	movw	r22, r18
     f84:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>

	free(freq_out);
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	0e 94 19 1a 	call	0x3432	; 0x3432 <free>
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <poll_buttons>:

void poll_buttons(void)
{
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
     fb0:	80 91 be 01 	lds	r24, 0x01BE
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	f9 f4       	brne	.+62     	; 0xff6 <poll_buttons+0x58>
	{
		cur_state = IDLE;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 c0 01 	sts	0x01C0, r24
		prev_mode = cur_mode;
     fbe:	80 91 9e 01 	lds	r24, 0x019E
     fc2:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = TUNE;
     fc6:	83 e0       	ldi	r24, 0x03	; 3
     fc8:	80 93 9e 01 	sts	0x019E, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
     fcc:	80 91 64 01 	lds	r24, 0x0164
     fd0:	90 91 65 01 	lds	r25, 0x0165
     fd4:	a0 91 66 01 	lds	r26, 0x0166
     fd8:	b0 91 67 01 	lds	r27, 0x0167
     fdc:	80 57       	subi	r24, 0x70	; 112
     fde:	9e 4f       	sbci	r25, 0xFE	; 254
     fe0:	af 4f       	sbci	r26, 0xFF	; 255
     fe2:	bf 4f       	sbci	r27, 0xFF	; 255
     fe4:	80 93 c5 01 	sts	0x01C5, r24
     fe8:	90 93 c6 01 	sts	0x01C6, r25
     fec:	a0 93 c7 01 	sts	0x01C7, r26
     ff0:	b0 93 c8 01 	sts	0x01C8, r27
     ff4:	72 c0       	rjmp	.+228    	; 0x10da <poll_buttons+0x13c>
	}
	else if(cmd_btn == PRESS)
     ff6:	80 91 bf 01 	lds	r24, 0x01BF
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	f9 f4       	brne	.+62     	; 0x103c <poll_buttons+0x9e>
	{
		prev_mode = cur_mode;
     ffe:	80 91 9e 01 	lds	r24, 0x019E
    1002:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = MENU;
    1006:	84 e0       	ldi	r24, 0x04	; 4
    1008:	80 93 9e 01 	sts	0x019E, r24
		cur_state = IDLE;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 c0 01 	sts	0x01C0, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1012:	80 91 64 01 	lds	r24, 0x0164
    1016:	90 91 65 01 	lds	r25, 0x0165
    101a:	a0 91 66 01 	lds	r26, 0x0166
    101e:	b0 91 67 01 	lds	r27, 0x0167
    1022:	80 57       	subi	r24, 0x70	; 112
    1024:	9e 4f       	sbci	r25, 0xFE	; 254
    1026:	af 4f       	sbci	r26, 0xFF	; 255
    1028:	bf 4f       	sbci	r27, 0xFF	; 255
    102a:	80 93 c5 01 	sts	0x01C5, r24
    102e:	90 93 c6 01 	sts	0x01C6, r25
    1032:	a0 93 c7 01 	sts	0x01C7, r26
    1036:	b0 93 c8 01 	sts	0x01C8, r27
    103a:	4f c0       	rjmp	.+158    	; 0x10da <poll_buttons+0x13c>
	}
	else if(msg_btn == PRESS)
    103c:	80 91 bd 01 	lds	r24, 0x01BD
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	b9 f4       	brne	.+46     	; 0x1072 <poll_buttons+0xd4>
	{
		count_frequency();
    1044:	0e 94 4d 07 	call	0xe9a	; 0xe9a <count_frequency>
		sleep_timer = cur_timer + SLEEP_DELAY;
    1048:	80 91 64 01 	lds	r24, 0x0164
    104c:	90 91 65 01 	lds	r25, 0x0165
    1050:	a0 91 66 01 	lds	r26, 0x0166
    1054:	b0 91 67 01 	lds	r27, 0x0167
    1058:	80 57       	subi	r24, 0x70	; 112
    105a:	9e 4f       	sbci	r25, 0xFE	; 254
    105c:	af 4f       	sbci	r26, 0xFF	; 255
    105e:	bf 4f       	sbci	r27, 0xFF	; 255
    1060:	80 93 c5 01 	sts	0x01C5, r24
    1064:	90 93 c6 01 	sts	0x01C6, r25
    1068:	a0 93 c7 01 	sts	0x01C7, r26
    106c:	b0 93 c8 01 	sts	0x01C8, r27
    1070:	34 c0       	rjmp	.+104    	; 0x10da <poll_buttons+0x13c>
	}
	else if(msg_btn == HOLD)
    1072:	80 91 bd 01 	lds	r24, 0x01BD
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	81 f5       	brne	.+96     	; 0x10da <poll_buttons+0x13c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
    107a:	81 e7       	ldi	r24, 0x71	; 113
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	22 e0       	ldi	r18, 0x02	; 2
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	b9 01       	movw	r22, r18
    1084:	48 e2       	ldi	r20, 0x28	; 40
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
    108c:	80 91 dd 01 	lds	r24, 0x01DD
    1090:	90 91 de 01 	lds	r25, 0x01DE
    1094:	21 e7       	ldi	r18, 0x71	; 113
    1096:	31 e0       	ldi	r19, 0x01	; 1
    1098:	b9 01       	movw	r22, r18
    109a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <strcpy>
		cur_state = IDLE;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 c0 01 	sts	0x01C0, r24
		prev_mode = cur_mode;
    10a4:	80 91 9e 01 	lds	r24, 0x019E
    10a8:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = PLAYBACK;
    10ac:	86 e0       	ldi	r24, 0x06	; 6
    10ae:	80 93 9e 01 	sts	0x019E, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    10b2:	80 91 64 01 	lds	r24, 0x0164
    10b6:	90 91 65 01 	lds	r25, 0x0165
    10ba:	a0 91 66 01 	lds	r26, 0x0166
    10be:	b0 91 67 01 	lds	r27, 0x0167
    10c2:	80 57       	subi	r24, 0x70	; 112
    10c4:	9e 4f       	sbci	r25, 0xFE	; 254
    10c6:	af 4f       	sbci	r26, 0xFF	; 255
    10c8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ca:	80 93 c5 01 	sts	0x01C5, r24
    10ce:	90 93 c6 01 	sts	0x01C6, r25
    10d2:	a0 93 c7 01 	sts	0x01C7, r26
    10d6:	b0 93 c8 01 	sts	0x01C8, r27
	}

	if(enc_btn == PRESS)
    10da:	80 91 c9 01 	lds	r24, 0x01C9
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <poll_buttons+0x146>
    10e2:	59 c0       	rjmp	.+178    	; 0x1196 <poll_buttons+0x1f8>
	{
		if(tune_rate == FAST)
    10e4:	80 91 06 01 	lds	r24, 0x0106
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	51 f5       	brne	.+84     	; 0x1140 <poll_buttons+0x1a2>
		{
			tune_rate = SLOW;
    10ec:	10 92 06 01 	sts	0x0106, r1
			tune_step = DDS_20HZ;
    10f0:	84 e3       	ldi	r24, 0x34	; 52
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	90 93 08 01 	sts	0x0108, r25
    10f8:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 5;
    10fc:	85 e0       	ldi	r24, 0x05	; 5
    10fe:	80 93 09 01 	sts	0x0109, r24
			sleep_timer = cur_timer + SLEEP_DELAY;
    1102:	80 91 64 01 	lds	r24, 0x0164
    1106:	90 91 65 01 	lds	r25, 0x0165
    110a:	a0 91 66 01 	lds	r26, 0x0166
    110e:	b0 91 67 01 	lds	r27, 0x0167
    1112:	80 57       	subi	r24, 0x70	; 112
    1114:	9e 4f       	sbci	r25, 0xFE	; 254
    1116:	af 4f       	sbci	r26, 0xFF	; 255
    1118:	bf 4f       	sbci	r27, 0xFF	; 255
    111a:	80 93 c5 01 	sts	0x01C5, r24
    111e:	90 93 c6 01 	sts	0x01C6, r25
    1122:	a0 93 c7 01 	sts	0x01C7, r26
    1126:	b0 93 c8 01 	sts	0x01C8, r27
			debounce(TRUE);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>
			announce("S", ST_LOW, 25);
    1130:	8b e1       	ldi	r24, 0x1B	; 27
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	60 e9       	ldi	r22, 0x90	; 144
    1136:	71 e0       	ldi	r23, 0x01	; 1
    1138:	49 e1       	ldi	r20, 0x19	; 25
    113a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
    113e:	c9 c0       	rjmp	.+402    	; 0x12d2 <poll_buttons+0x334>
		}
		else
		{
			tune_rate = FAST;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 06 01 	sts	0x0106, r24
			tune_step = DDS_100HZ;
    1146:	8c e0       	ldi	r24, 0x0C	; 12
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	90 93 08 01 	sts	0x0108, r25
    114e:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 25;
    1152:	89 e1       	ldi	r24, 0x19	; 25
    1154:	80 93 09 01 	sts	0x0109, r24
			sleep_timer = cur_timer + SLEEP_DELAY;
    1158:	80 91 64 01 	lds	r24, 0x0164
    115c:	90 91 65 01 	lds	r25, 0x0165
    1160:	a0 91 66 01 	lds	r26, 0x0166
    1164:	b0 91 67 01 	lds	r27, 0x0167
    1168:	80 57       	subi	r24, 0x70	; 112
    116a:	9e 4f       	sbci	r25, 0xFE	; 254
    116c:	af 4f       	sbci	r26, 0xFF	; 255
    116e:	bf 4f       	sbci	r27, 0xFF	; 255
    1170:	80 93 c5 01 	sts	0x01C5, r24
    1174:	90 93 c6 01 	sts	0x01C6, r25
    1178:	a0 93 c7 01 	sts	0x01C7, r26
    117c:	b0 93 c8 01 	sts	0x01C8, r27
			debounce(TRUE);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>
			announce("S", ST_HIGH, 25);
    1186:	8b e1       	ldi	r24, 0x1B	; 27
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	64 e8       	ldi	r22, 0x84	; 132
    118c:	73 e0       	ldi	r23, 0x03	; 3
    118e:	49 e1       	ldi	r20, 0x19	; 25
    1190:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
    1194:	9e c0       	rjmp	.+316    	; 0x12d2 <poll_buttons+0x334>
		}
	}
	else if(enc_btn == HOLD)
    1196:	80 91 c9 01 	lds	r24, 0x01C9
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	09 f0       	breq	.+2      	; 0x11a0 <poll_buttons+0x202>
    119e:	99 c0       	rjmp	.+306    	; 0x12d2 <poll_buttons+0x334>
	{
		if(rit_enable == FALSE)
    11a0:	80 91 e4 01 	lds	r24, 0x01E4
    11a4:	88 23       	and	r24, r24
    11a6:	09 f0       	breq	.+2      	; 0x11aa <poll_buttons+0x20c>
    11a8:	4b c0       	rjmp	.+150    	; 0x1240 <poll_buttons+0x2a2>
		{
			RIT_LED_DDR |= _BV(RIT_LED);
    11aa:	87 e2       	ldi	r24, 0x27	; 39
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	27 e2       	ldi	r18, 0x27	; 39
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	f9 01       	movw	r30, r18
    11b4:	20 81       	ld	r18, Z
    11b6:	22 60       	ori	r18, 0x02	; 2
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
			RIT_LED_PORT |= _BV(RIT_LED);
    11bc:	88 e2       	ldi	r24, 0x28	; 40
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	28 e2       	ldi	r18, 0x28	; 40
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	f9 01       	movw	r30, r18
    11c6:	20 81       	ld	r18, Z
    11c8:	22 60       	ori	r18, 0x02	; 2
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 83       	st	Z, r18
			rit_enable = TRUE;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 e4 01 	sts	0x01E4, r24
			dds_rit_freq_word = dds_freq_word;
    11d4:	80 91 a8 01 	lds	r24, 0x01A8
    11d8:	90 91 a9 01 	lds	r25, 0x01A9
    11dc:	a0 91 aa 01 	lds	r26, 0x01AA
    11e0:	b0 91 ab 01 	lds	r27, 0x01AB
    11e4:	80 93 b8 01 	sts	0x01B8, r24
    11e8:	90 93 b9 01 	sts	0x01B9, r25
    11ec:	a0 93 ba 01 	sts	0x01BA, r26
    11f0:	b0 93 bb 01 	sts	0x01BB, r27
			tune_dds(dds_rit_freq_word, REG_1, FALSE);
    11f4:	80 91 b8 01 	lds	r24, 0x01B8
    11f8:	90 91 b9 01 	lds	r25, 0x01B9
    11fc:	a0 91 ba 01 	lds	r26, 0x01BA
    1200:	b0 91 bb 01 	lds	r27, 0x01BB
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <tune_dds>
			debounce(TRUE);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>
			sleep_timer = cur_timer + SLEEP_DELAY;
    1216:	80 91 64 01 	lds	r24, 0x0164
    121a:	90 91 65 01 	lds	r25, 0x0165
    121e:	a0 91 66 01 	lds	r26, 0x0166
    1222:	b0 91 67 01 	lds	r27, 0x0167
    1226:	80 57       	subi	r24, 0x70	; 112
    1228:	9e 4f       	sbci	r25, 0xFE	; 254
    122a:	af 4f       	sbci	r26, 0xFF	; 255
    122c:	bf 4f       	sbci	r27, 0xFF	; 255
    122e:	80 93 c5 01 	sts	0x01C5, r24
    1232:	90 93 c6 01 	sts	0x01C6, r25
    1236:	a0 93 c7 01 	sts	0x01C7, r26
    123a:	b0 93 c8 01 	sts	0x01C8, r27
    123e:	49 c0       	rjmp	.+146    	; 0x12d2 <poll_buttons+0x334>
		}
		else
		{

			RIT_LED_DDR &= ~(_BV(RIT_LED));
    1240:	87 e2       	ldi	r24, 0x27	; 39
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	27 e2       	ldi	r18, 0x27	; 39
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	2d 7f       	andi	r18, 0xFD	; 253
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
			RIT_LED_PORT &= ~(_BV(RIT_LED));
    1252:	88 e2       	ldi	r24, 0x28	; 40
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	28 e2       	ldi	r18, 0x28	; 40
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	f9 01       	movw	r30, r18
    125c:	20 81       	ld	r18, Z
    125e:	2d 7f       	andi	r18, 0xFD	; 253
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18
			rit_enable = FALSE;
    1264:	10 92 e4 01 	sts	0x01E4, r1
			dds_freq_word = dds_rit_freq_word;
    1268:	80 91 b8 01 	lds	r24, 0x01B8
    126c:	90 91 b9 01 	lds	r25, 0x01B9
    1270:	a0 91 ba 01 	lds	r26, 0x01BA
    1274:	b0 91 bb 01 	lds	r27, 0x01BB
    1278:	80 93 a8 01 	sts	0x01A8, r24
    127c:	90 93 a9 01 	sts	0x01A9, r25
    1280:	a0 93 aa 01 	sts	0x01AA, r26
    1284:	b0 93 ab 01 	sts	0x01AB, r27
			tune_dds(dds_freq_word, REG_0, FALSE);
    1288:	80 91 a8 01 	lds	r24, 0x01A8
    128c:	90 91 a9 01 	lds	r25, 0x01A9
    1290:	a0 91 aa 01 	lds	r26, 0x01AA
    1294:	b0 91 ab 01 	lds	r27, 0x01AB
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <tune_dds>
			debounce(TRUE);
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>
			sleep_timer = cur_timer + SLEEP_DELAY;
    12aa:	80 91 64 01 	lds	r24, 0x0164
    12ae:	90 91 65 01 	lds	r25, 0x0165
    12b2:	a0 91 66 01 	lds	r26, 0x0166
    12b6:	b0 91 67 01 	lds	r27, 0x0167
    12ba:	80 57       	subi	r24, 0x70	; 112
    12bc:	9e 4f       	sbci	r25, 0xFE	; 254
    12be:	af 4f       	sbci	r26, 0xFF	; 255
    12c0:	bf 4f       	sbci	r27, 0xFF	; 255
    12c2:	80 93 c5 01 	sts	0x01C5, r24
    12c6:	90 93 c6 01 	sts	0x01C6, r25
    12ca:	a0 93 c7 01 	sts	0x01C7, r26
    12ce:	b0 93 c8 01 	sts	0x01C8, r27
		}
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    12d2:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    12d4:	80 91 63 01 	lds	r24, 0x0163
    12d8:	88 23       	and	r24, r24
    12da:	19 f0       	breq	.+6      	; 0x12e2 <poll_buttons+0x344>
		cur_enc_state += 0x02;
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	8e 5f       	subi	r24, 0xFE	; 254
    12e0:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    12e2:	80 91 e3 01 	lds	r24, 0x01E3
    12e6:	88 23       	and	r24, r24
    12e8:	19 f0       	breq	.+6      	; 0x12f0 <poll_buttons+0x352>
		cur_enc_state += 0x01;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    12f0:	80 91 4a 01 	lds	r24, 0x014A
    12f4:	99 81       	ldd	r25, Y+1	; 0x01
    12f6:	98 17       	cp	r25, r24
    12f8:	09 f4       	brne	.+2      	; 0x12fc <poll_buttons+0x35e>
    12fa:	f0 c0       	rjmp	.+480    	; 0x14dc <poll_buttons+0x53e>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    12fc:	80 91 4a 01 	lds	r24, 0x014A
    1300:	86 95       	lsr	r24
    1302:	81 70       	andi	r24, 0x01	; 1
    1304:	80 93 4a 01 	sts	0x014A, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1308:	80 91 64 01 	lds	r24, 0x0164
    130c:	90 91 65 01 	lds	r25, 0x0165
    1310:	a0 91 66 01 	lds	r26, 0x0166
    1314:	b0 91 67 01 	lds	r27, 0x0167
    1318:	80 57       	subi	r24, 0x70	; 112
    131a:	9e 4f       	sbci	r25, 0xFE	; 254
    131c:	af 4f       	sbci	r26, 0xFF	; 255
    131e:	bf 4f       	sbci	r27, 0xFF	; 255
    1320:	80 93 c5 01 	sts	0x01C5, r24
    1324:	90 93 c6 01 	sts	0x01C6, r25
    1328:	a0 93 c7 01 	sts	0x01C7, r26
    132c:	b0 93 c8 01 	sts	0x01C8, r27

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    1330:	80 91 4a 01 	lds	r24, 0x014A
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	81 70       	andi	r24, 0x01	; 1
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	82 27       	eor	r24, r18
    1344:	93 27       	eor	r25, r19
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	09 f0       	breq	.+2      	; 0x134e <poll_buttons+0x3b0>
    134c:	68 c0       	rjmp	.+208    	; 0x141e <poll_buttons+0x480>
		{
			if(tune_freq > LOWER_FREQ_LIMIT)
    134e:	80 91 d4 01 	lds	r24, 0x01D4
    1352:	90 91 d5 01 	lds	r25, 0x01D5
    1356:	a0 91 d6 01 	lds	r26, 0x01D6
    135a:	b0 91 d7 01 	lds	r27, 0x01D7
    135e:	81 38       	cpi	r24, 0x81	; 129
    1360:	ff e9       	ldi	r31, 0x9F	; 159
    1362:	9f 07       	cpc	r25, r31
    1364:	f5 ed       	ldi	r31, 0xD5	; 213
    1366:	af 07       	cpc	r26, r31
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	bf 07       	cpc	r27, r31
    136c:	08 f4       	brcc	.+2      	; 0x1370 <poll_buttons+0x3d2>
    136e:	4c c0       	rjmp	.+152    	; 0x1408 <poll_buttons+0x46a>
			{
				dds_freq_word -= tune_step;
    1370:	20 91 a8 01 	lds	r18, 0x01A8
    1374:	30 91 a9 01 	lds	r19, 0x01A9
    1378:	40 91 aa 01 	lds	r20, 0x01AA
    137c:	50 91 ab 01 	lds	r21, 0x01AB
    1380:	80 91 07 01 	lds	r24, 0x0107
    1384:	90 91 08 01 	lds	r25, 0x0108
    1388:	cc 01       	movw	r24, r24
    138a:	a0 e0       	ldi	r26, 0x00	; 0
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	79 01       	movw	r14, r18
    1390:	8a 01       	movw	r16, r20
    1392:	e8 1a       	sub	r14, r24
    1394:	f9 0a       	sbc	r15, r25
    1396:	0a 0b       	sbc	r16, r26
    1398:	1b 0b       	sbc	r17, r27
    139a:	d8 01       	movw	r26, r16
    139c:	c7 01       	movw	r24, r14
    139e:	80 93 a8 01 	sts	0x01A8, r24
    13a2:	90 93 a9 01 	sts	0x01A9, r25
    13a6:	a0 93 aa 01 	sts	0x01AA, r26
    13aa:	b0 93 ab 01 	sts	0x01AB, r27
				tune_freq -= tune_freq_step;
    13ae:	20 91 d4 01 	lds	r18, 0x01D4
    13b2:	30 91 d5 01 	lds	r19, 0x01D5
    13b6:	40 91 d6 01 	lds	r20, 0x01D6
    13ba:	50 91 d7 01 	lds	r21, 0x01D7
    13be:	80 91 09 01 	lds	r24, 0x0109
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	79 01       	movw	r14, r18
    13cc:	8a 01       	movw	r16, r20
    13ce:	e8 1a       	sub	r14, r24
    13d0:	f9 0a       	sbc	r15, r25
    13d2:	0a 0b       	sbc	r16, r26
    13d4:	1b 0b       	sbc	r17, r27
    13d6:	d8 01       	movw	r26, r16
    13d8:	c7 01       	movw	r24, r14
    13da:	80 93 d4 01 	sts	0x01D4, r24
    13de:	90 93 d5 01 	sts	0x01D5, r25
    13e2:	a0 93 d6 01 	sts	0x01D6, r26
    13e6:	b0 93 d7 01 	sts	0x01D7, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    13ea:	80 91 a8 01 	lds	r24, 0x01A8
    13ee:	90 91 a9 01 	lds	r25, 0x01A9
    13f2:	a0 91 aa 01 	lds	r26, 0x01AA
    13f6:	b0 91 ab 01 	lds	r27, 0x01AB
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <tune_dds>
    1406:	6a c0       	rjmp	.+212    	; 0x14dc <poll_buttons+0x53e>
			}
			else
			{
				announce("L", ST_HIGH, 23);
    1408:	8d e1       	ldi	r24, 0x1D	; 29
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	64 e8       	ldi	r22, 0x84	; 132
    140e:	73 e0       	ldi	r23, 0x03	; 3
    1410:	47 e1       	ldi	r20, 0x17	; 23
    1412:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
				debounce(TRUE);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>
    141c:	5f c0       	rjmp	.+190    	; 0x14dc <poll_buttons+0x53e>
			}
		}
		else
		{
			if(tune_freq < UPPER_FREQ_LIMIT)
    141e:	80 91 d4 01 	lds	r24, 0x01D4
    1422:	90 91 d5 01 	lds	r25, 0x01D5
    1426:	a0 91 d6 01 	lds	r26, 0x01D6
    142a:	b0 91 d7 01 	lds	r27, 0x01D7
    142e:	80 3b       	cpi	r24, 0xB0	; 176
    1430:	06 ef       	ldi	r16, 0xF6	; 246
    1432:	90 07       	cpc	r25, r16
    1434:	0a ed       	ldi	r16, 0xDA	; 218
    1436:	a0 07       	cpc	r26, r16
    1438:	00 e0       	ldi	r16, 0x00	; 0
    143a:	b0 07       	cpc	r27, r16
    143c:	08 f0       	brcs	.+2      	; 0x1440 <poll_buttons+0x4a2>
    143e:	44 c0       	rjmp	.+136    	; 0x14c8 <poll_buttons+0x52a>
			{
				dds_freq_word += tune_step;
    1440:	80 91 07 01 	lds	r24, 0x0107
    1444:	90 91 08 01 	lds	r25, 0x0108
    1448:	9c 01       	movw	r18, r24
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	80 91 a8 01 	lds	r24, 0x01A8
    1452:	90 91 a9 01 	lds	r25, 0x01A9
    1456:	a0 91 aa 01 	lds	r26, 0x01AA
    145a:	b0 91 ab 01 	lds	r27, 0x01AB
    145e:	82 0f       	add	r24, r18
    1460:	93 1f       	adc	r25, r19
    1462:	a4 1f       	adc	r26, r20
    1464:	b5 1f       	adc	r27, r21
    1466:	80 93 a8 01 	sts	0x01A8, r24
    146a:	90 93 a9 01 	sts	0x01A9, r25
    146e:	a0 93 aa 01 	sts	0x01AA, r26
    1472:	b0 93 ab 01 	sts	0x01AB, r27
				tune_freq += tune_freq_step;
    1476:	80 91 09 01 	lds	r24, 0x0109
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	80 91 d4 01 	lds	r24, 0x01D4
    1486:	90 91 d5 01 	lds	r25, 0x01D5
    148a:	a0 91 d6 01 	lds	r26, 0x01D6
    148e:	b0 91 d7 01 	lds	r27, 0x01D7
    1492:	82 0f       	add	r24, r18
    1494:	93 1f       	adc	r25, r19
    1496:	a4 1f       	adc	r26, r20
    1498:	b5 1f       	adc	r27, r21
    149a:	80 93 d4 01 	sts	0x01D4, r24
    149e:	90 93 d5 01 	sts	0x01D5, r25
    14a2:	a0 93 d6 01 	sts	0x01D6, r26
    14a6:	b0 93 d7 01 	sts	0x01D7, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    14aa:	80 91 a8 01 	lds	r24, 0x01A8
    14ae:	90 91 a9 01 	lds	r25, 0x01A9
    14b2:	a0 91 aa 01 	lds	r26, 0x01AA
    14b6:	b0 91 ab 01 	lds	r27, 0x01AB
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <tune_dds>
    14c6:	0a c0       	rjmp	.+20     	; 0x14dc <poll_buttons+0x53e>
			}
			else
			{
				announce("U", ST_HIGH, 23);
    14c8:	8f e1       	ldi	r24, 0x1F	; 31
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	64 e8       	ldi	r22, 0x84	; 132
    14ce:	73 e0       	ldi	r23, 0x03	; 3
    14d0:	47 e1       	ldi	r20, 0x17	; 23
    14d2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
				debounce(TRUE);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>
				announce("U", ST_HIGH, 23);
				*/
		}
	}

	prev_enc_state = cur_enc_state;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	80 93 4a 01 	sts	0x014A, r24
}
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	08 95       	ret

000014f2 <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg, enum BOOL init)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2c 97       	sbiw	r28, 0x0c	; 12
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	6f 83       	std	Y+7, r22	; 0x07
    1508:	78 87       	std	Y+8, r23	; 0x08
    150a:	89 87       	std	Y+9, r24	; 0x09
    150c:	9a 87       	std	Y+10, r25	; 0x0a
    150e:	4b 87       	std	Y+11, r20	; 0x0b
    1510:	2c 87       	std	Y+12, r18	; 0x0c
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    1512:	8b 85       	ldd	r24, Y+11	; 0x0b
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	29 f4       	brne	.+10     	; 0x1522 <tune_dds+0x30>
		freq_reg = 0x8000;
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e8       	ldi	r25, 0x80	; 128
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	04 c0       	rjmp	.+8      	; 0x152a <tune_dds+0x38>
	else
		freq_reg = 0x4000;
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e4       	ldi	r25, 0x40	; 64
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    152a:	8f 81       	ldd	r24, Y+7	; 0x07
    152c:	98 85       	ldd	r25, Y+8	; 0x08
    152e:	9c 01       	movw	r18, r24
    1530:	3f 73       	andi	r19, 0x3F	; 63
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	82 0f       	add	r24, r18
    1538:	93 1f       	adc	r25, r19
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    153e:	8f 81       	ldd	r24, Y+7	; 0x07
    1540:	98 85       	ldd	r25, Y+8	; 0x08
    1542:	a9 85       	ldd	r26, Y+9	; 0x09
    1544:	ba 85       	ldd	r27, Y+10	; 0x0a
    1546:	07 2e       	mov	r0, r23
    1548:	7e e0       	ldi	r23, 0x0E	; 14
    154a:	b6 95       	lsr	r27
    154c:	a7 95       	ror	r26
    154e:	97 95       	ror	r25
    1550:	87 95       	ror	r24
    1552:	7a 95       	dec	r23
    1554:	d1 f7       	brne	.-12     	; 0x154a <tune_dds+0x58>
    1556:	70 2d       	mov	r23, r0
    1558:	9c 01       	movw	r18, r24
    155a:	3f 73       	andi	r19, 0x3F	; 63
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05

	if(init == TRUE)
    1568:	8c 85       	ldd	r24, Y+12	; 0x0c
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	21 f4       	brne	.+8      	; 0x1576 <tune_dds+0x84>
		send_dds_word(0x2100);
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	91 e2       	ldi	r25, 0x21	; 33
    1572:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <send_dds_word>

	if(init == TRUE)
    1586:	8c 85       	ldd	r24, Y+12	; 0x0c
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	41 f4       	brne	.+16     	; 0x159c <tune_dds+0xaa>
	{
		// Send phase
		send_dds_word(0xC000);
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 ec       	ldi	r25, 0xC0	; 192
    1590:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <send_dds_word>

		// Exit reset
		send_dds_word(0x2000);
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e2       	ldi	r25, 0x20	; 32
    1598:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <send_dds_word>
	}
}
    159c:	2c 96       	adiw	r28, 0x0c	; 12
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <send_dds_word>:
	send_dds_word(0x2000);
}
*/

void send_dds_word(uint16_t dds_word)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <send_dds_word+0x6>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9a 83       	std	Y+2, r25	; 0x02
    15ba:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    15bc:	85 e2       	ldi	r24, 0x25	; 37
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	25 e2       	ldi	r18, 0x25	; 37
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	f9 01       	movw	r30, r18
    15c6:	20 81       	ld	r18, Z
    15c8:	20 62       	ori	r18, 0x20	; 32
    15ca:	fc 01       	movw	r30, r24
    15cc:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    15ce:	85 e2       	ldi	r24, 0x25	; 37
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	25 e2       	ldi	r18, 0x25	; 37
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	f9 01       	movw	r30, r18
    15d8:	20 81       	ld	r18, Z
    15da:	2d 7f       	andi	r18, 0xFD	; 253
    15dc:	fc 01       	movw	r30, r24
    15de:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    15e0:	8e e4       	ldi	r24, 0x4E	; 78
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	29 81       	ldd	r18, Y+1	; 0x01
    15e6:	3a 81       	ldd	r19, Y+2	; 0x02
    15e8:	23 2f       	mov	r18, r19
    15ea:	33 27       	eor	r19, r19
    15ec:	fc 01       	movw	r30, r24
    15ee:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    15f0:	00 00       	nop
    15f2:	8d e4       	ldi	r24, 0x4D	; 77
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	fc 01       	movw	r30, r24
    15f8:	80 81       	ld	r24, Z
    15fa:	88 23       	and	r24, r24
    15fc:	d4 f7       	brge	.-12     	; 0x15f2 <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    15fe:	8e e4       	ldi	r24, 0x4E	; 78
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	29 81       	ldd	r18, Y+1	; 0x01
    1604:	fc 01       	movw	r30, r24
    1606:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1608:	00 00       	nop
    160a:	8d e4       	ldi	r24, 0x4D	; 77
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	fc 01       	movw	r30, r24
    1610:	80 81       	ld	r24, Z
    1612:	88 23       	and	r24, r24
    1614:	d4 f7       	brge	.-12     	; 0x160a <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    1616:	85 e2       	ldi	r24, 0x25	; 37
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	25 e2       	ldi	r18, 0x25	; 37
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	f9 01       	movw	r30, r18
    1620:	20 81       	ld	r18, Z
    1622:	22 60       	ori	r18, 0x02	; 2
    1624:	fc 01       	movw	r30, r24
    1626:	20 83       	st	Z, r18
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	29 f4       	brne	.+10     	; 0x164e <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	98 e2       	ldi	r25, 0x28	; 40
    1648:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <send_dds_word>
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e2       	ldi	r25, 0x20	; 32
    1652:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <send_dds_word>
}
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <set_st_freq+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <set_st_freq+0x8>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	69 83       	std	Y+1, r22	; 0x01
    166c:	7a 83       	std	Y+2, r23	; 0x02
    166e:	8b 83       	std	Y+3, r24	; 0x03
    1670:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	9a 81       	ldd	r25, Y+2	; 0x02
    1676:	ab 81       	ldd	r26, Y+3	; 0x03
    1678:	bc 81       	ldd	r27, Y+4	; 0x04
    167a:	23 e9       	ldi	r18, 0x93	; 147
    167c:	38 e1       	ldi	r19, 0x18	; 24
    167e:	44 e0       	ldi	r20, 0x04	; 4
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 17 19 	call	0x322e	; 0x322e <__mulsi3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	80 93 ac 01 	sts	0x01AC, r24
    1692:	90 93 ad 01 	sts	0x01AD, r25
    1696:	a0 93 ae 01 	sts	0x01AE, r26
    169a:	b0 93 af 01 	sts	0x01AF, r27
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <main>:

int main(void)
{
    16ac:	1f 93       	push	r17
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	2d 97       	sbiw	r28, 0x0d	; 13
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    16c2:	89 e2       	ldi	r24, 0x29	; 41
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 7f 19 	call	0x32fe	; 0x32fe <malloc>
    16ca:	90 93 de 01 	sts	0x01DE, r25
    16ce:	80 93 dd 01 	sts	0x01DD, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    16d2:	80 91 dd 01 	lds	r24, 0x01DD
    16d6:	90 91 de 01 	lds	r25, 0x01DE
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	49 e2       	ldi	r20, 0x29	; 41
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 bb 1a 	call	0x3576	; 0x3576 <memset>
	cur_char_p = announce_buffer;
    16e6:	80 91 dd 01 	lds	r24, 0x01DD
    16ea:	90 91 de 01 	lds	r25, 0x01DE
    16ee:	90 93 3b 01 	sts	0x013B, r25
    16f2:	80 93 3a 01 	sts	0x013A, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    16f6:	89 e2       	ldi	r24, 0x29	; 41
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 7f 19 	call	0x32fe	; 0x32fe <malloc>
    16fe:	90 93 3d 01 	sts	0x013D, r25
    1702:	80 93 3c 01 	sts	0x013C, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    1706:	80 91 3c 01 	lds	r24, 0x013C
    170a:	90 91 3d 01 	lds	r25, 0x013D
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	49 e2       	ldi	r20, 0x29	; 41
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	0e 94 bb 1a 	call	0x3576	; 0x3576 <memset>

	init();
    171a:	0e 94 4c 02 	call	0x498	; 0x498 <init>

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    171e:	19 82       	std	Y+1, r1	; 0x01
    1720:	06 c0       	rjmp	.+12     	; 0x172e <main+0x82>
		debounce(FALSE);
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);

	init();

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	8f 30       	cpi	r24, 0x0F	; 15
    1732:	b8 f3       	brcs	.-18     	; 0x1722 <main+0x76>
		debounce(FALSE);
	if(eeprom_read_byte(&ee_keyer) == FALSE)
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 ed 1c 	call	0x39da	; 0x39da <__eerd_byte_m168>
    173c:	88 23       	and	r24, r24
    173e:	21 f4       	brne	.+8      	; 0x1748 <main+0x9c>
		cur_mode = SK;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 9e 01 	sts	0x019E, r24
    1746:	02 c0       	rjmp	.+4      	; 0x174c <main+0xa0>
	else
		cur_mode = KEYER;
    1748:	10 92 9e 01 	sts	0x019E, r1

	if((dah_active == TRUE) && (dit_active == FALSE))
    174c:	80 91 bc 01 	lds	r24, 0x01BC
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	39 f4       	brne	.+14     	; 0x1762 <main+0xb6>
    1754:	80 91 d2 01 	lds	r24, 0x01D2
    1758:	88 23       	and	r24, r24
    175a:	19 f4       	brne	.+6      	; 0x1762 <main+0xb6>
		cur_mode = SK;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	80 93 9e 01 	sts	0x019E, r24

	announce("CC", st_freq, 15);
    1762:	20 91 b6 01 	lds	r18, 0x01B6
    1766:	30 91 b7 01 	lds	r19, 0x01B7
    176a:	81 e2       	ldi	r24, 0x21	; 33
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	b9 01       	movw	r22, r18
    1770:	4f e0       	ldi	r20, 0x0F	; 15
    1772:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    1776:	f8 94       	cli
		cur_timer = timer;
    1778:	80 91 6a 01 	lds	r24, 0x016A
    177c:	90 91 6b 01 	lds	r25, 0x016B
    1780:	a0 91 6c 01 	lds	r26, 0x016C
    1784:	b0 91 6d 01 	lds	r27, 0x016D
    1788:	80 93 64 01 	sts	0x0164, r24
    178c:	90 93 65 01 	sts	0x0165, r25
    1790:	a0 93 66 01 	sts	0x0166, r26
    1794:	b0 93 67 01 	sts	0x0167, r27
		sei();
    1798:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    179a:	80 91 9e 01 	lds	r24, 0x019E
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	83 30       	cpi	r24, 0x03	; 3
    17a4:	91 05       	cpc	r25, r1
    17a6:	09 f4       	brne	.+2      	; 0x17aa <main+0xfe>
    17a8:	a5 c7       	rjmp	.+3914   	; 0x26f4 <main+0x1048>
    17aa:	84 30       	cpi	r24, 0x04	; 4
    17ac:	91 05       	cpc	r25, r1
    17ae:	64 f4       	brge	.+24     	; 0x17c8 <main+0x11c>
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	d1 f0       	breq	.+52     	; 0x17ea <main+0x13e>
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	91 05       	cpc	r25, r1
    17ba:	0c f0       	brlt	.+2      	; 0x17be <main+0x112>
    17bc:	e9 c5       	rjmp	.+3026   	; 0x2390 <main+0xce4>
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <main+0x118>
    17c2:	5f c1       	rjmp	.+702    	; 0x1a82 <main+0x3d6>
    17c4:	0c 94 14 19 	jmp	0x3228	; 0x3228 <main+0x1b7c>
    17c8:	85 30       	cpi	r24, 0x05	; 5
    17ca:	91 05       	cpc	r25, r1
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <main+0x126>
    17ce:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <main+0x1528>
    17d2:	85 30       	cpi	r24, 0x05	; 5
    17d4:	91 05       	cpc	r25, r1
    17d6:	14 f4       	brge	.+4      	; 0x17dc <main+0x130>
    17d8:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <main+0x11c8>
    17dc:	86 30       	cpi	r24, 0x06	; 6
    17de:	91 05       	cpc	r25, r1
    17e0:	11 f4       	brne	.+4      	; 0x17e6 <main+0x13a>
    17e2:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <main+0x1698>
    17e6:	0c 94 14 19 	jmp	0x3228	; 0x3228 <main+0x1b7c>
		{
		case SK:
			default_mode = SK;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 69 01 	sts	0x0169, r24
			poll_buttons();
    17f0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <poll_buttons>

			switch(cur_state)
    17f4:	80 91 c0 01 	lds	r24, 0x01C0
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	87 30       	cpi	r24, 0x07	; 7
    17fe:	91 05       	cpc	r25, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <main+0x158>
    1802:	43 c0       	rjmp	.+134    	; 0x188a <main+0x1de>
    1804:	8c 30       	cpi	r24, 0x0C	; 12
    1806:	91 05       	cpc	r25, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <main+0x160>
    180a:	a7 c0       	rjmp	.+334    	; 0x195a <main+0x2ae>
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	91 05       	cpc	r25, r1
    1810:	09 f0       	breq	.+2      	; 0x1814 <main+0x168>
    1812:	e6 c0       	rjmp	.+460    	; 0x19e0 <main+0x334>
			{
			case IDLE:
				key_down = FALSE;
    1814:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    1818:	10 92 36 01 	sts	0x0136, r1
				mute_on = FALSE;
    181c:	10 92 37 01 	sts	0x0137, r1
					mute_on = FALSE;
				else
					mute_on = TRUE;
					*/

				if(dit_active == TRUE)
    1820:	80 91 d2 01 	lds	r24, 0x01D2
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	69 f5       	brne	.+90     	; 0x1882 <main+0x1d6>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    1828:	80 91 64 01 	lds	r24, 0x0164
    182c:	90 91 65 01 	lds	r25, 0x0165
    1830:	a0 91 66 01 	lds	r26, 0x0166
    1834:	b0 91 67 01 	lds	r27, 0x0167
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	a1 1d       	adc	r26, r1
    183c:	b1 1d       	adc	r27, r1
    183e:	80 93 a4 01 	sts	0x01A4, r24
    1842:	90 93 a5 01 	sts	0x01A5, r25
    1846:	a0 93 a6 01 	sts	0x01A6, r26
    184a:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = UINT32_MAX;
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	9f ef       	ldi	r25, 0xFF	; 255
    1852:	dc 01       	movw	r26, r24
    1854:	80 93 df 01 	sts	0x01DF, r24
    1858:	90 93 e0 01 	sts	0x01E0, r25
    185c:	a0 93 e1 01 	sts	0x01E1, r26
    1860:	b0 93 e2 01 	sts	0x01E2, r27
					cur_state_end = UINT32_MAX;
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	9f ef       	ldi	r25, 0xFF	; 255
    1868:	dc 01       	movw	r26, r24
    186a:	80 93 ca 01 	sts	0x01CA, r24
    186e:	90 93 cb 01 	sts	0x01CB, r25
    1872:	a0 93 cc 01 	sts	0x01CC, r26
    1876:	b0 93 cd 01 	sts	0x01CD, r27
					cur_state = KEYDOWN;
    187a:	87 e0       	ldi	r24, 0x07	; 7
    187c:	80 93 c0 01 	sts	0x01C0, r24
				}
				else
				{
					cur_state = IDLE;
				}
				break;
    1880:	b2 c0       	rjmp	.+356    	; 0x19e6 <main+0x33a>
					cur_state_end = UINT32_MAX;
					cur_state = KEYDOWN;
				}
				else
				{
					cur_state = IDLE;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	80 93 c0 01 	sts	0x01C0, r24
				}
				break;
    1888:	ae c0       	rjmp	.+348    	; 0x19e6 <main+0x33a>

			case KEYDOWN:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    188a:	80 91 d4 01 	lds	r24, 0x01D4
    188e:	90 91 d5 01 	lds	r25, 0x01D5
    1892:	a0 91 d6 01 	lds	r26, 0x01D6
    1896:	b0 91 d7 01 	lds	r27, 0x01D7
    189a:	81 3b       	cpi	r24, 0xB1	; 177
    189c:	26 ef       	ldi	r18, 0xF6	; 246
    189e:	92 07       	cpc	r25, r18
    18a0:	2a ed       	ldi	r18, 0xDA	; 218
    18a2:	a2 07       	cpc	r26, r18
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	b2 07       	cpc	r27, r18
    18a8:	80 f4       	brcc	.+32     	; 0x18ca <main+0x21e>
    18aa:	80 91 d4 01 	lds	r24, 0x01D4
    18ae:	90 91 d5 01 	lds	r25, 0x01D5
    18b2:	a0 91 d6 01 	lds	r26, 0x01D6
    18b6:	b0 91 d7 01 	lds	r27, 0x01D7
    18ba:	80 38       	cpi	r24, 0x80	; 128
    18bc:	ef e9       	ldi	r30, 0x9F	; 159
    18be:	9e 07       	cpc	r25, r30
    18c0:	e5 ed       	ldi	r30, 0xD5	; 213
    18c2:	ae 07       	cpc	r26, r30
    18c4:	e0 e0       	ldi	r30, 0x00	; 0
    18c6:	be 07       	cpc	r27, r30
    18c8:	38 f4       	brcc	.+14     	; 0x18d8 <main+0x22c>
				{
					key_down = FALSE;
    18ca:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    18ce:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    18d2:	10 92 37 01 	sts	0x0137, r1
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <main+0x23e>
				}
				else
				{
					key_down = TRUE;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	80 93 37 01 	sts	0x0137, r24
				}

				if(dit_active == FALSE)
    18ea:	80 91 d2 01 	lds	r24, 0x01D2
    18ee:	88 23       	and	r24, r24
    18f0:	41 f5       	brne	.+80     	; 0x1942 <main+0x296>
				{
					cur_state = EXIT;
    18f2:	8c e0       	ldi	r24, 0x0C	; 12
    18f4:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    18f8:	80 91 64 01 	lds	r24, 0x0164
    18fc:	90 91 65 01 	lds	r25, 0x0165
    1900:	a0 91 66 01 	lds	r26, 0x0166
    1904:	b0 91 67 01 	lds	r27, 0x0167
    1908:	8c 59       	subi	r24, 0x9C	; 156
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	af 4f       	sbci	r26, 0xFF	; 255
    190e:	bf 4f       	sbci	r27, 0xFF	; 255
    1910:	80 93 ca 01 	sts	0x01CA, r24
    1914:	90 93 cb 01 	sts	0x01CB, r25
    1918:	a0 93 cc 01 	sts	0x01CC, r26
    191c:	b0 93 cd 01 	sts	0x01CD, r27
					tx_end = cur_timer;
    1920:	80 91 64 01 	lds	r24, 0x0164
    1924:	90 91 65 01 	lds	r25, 0x0165
    1928:	a0 91 66 01 	lds	r26, 0x0166
    192c:	b0 91 67 01 	lds	r27, 0x0167
    1930:	80 93 df 01 	sts	0x01DF, r24
    1934:	90 93 e0 01 	sts	0x01E0, r25
    1938:	a0 93 e1 01 	sts	0x01E1, r26
    193c:	b0 93 e2 01 	sts	0x01E2, r27
				}
				else
					tx_end = UINT32_MAX;
				break;
    1940:	52 c0       	rjmp	.+164    	; 0x19e6 <main+0x33a>
					cur_state = EXIT;
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
					tx_end = cur_timer;
				}
				else
					tx_end = UINT32_MAX;
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	9f ef       	ldi	r25, 0xFF	; 255
    1946:	dc 01       	movw	r26, r24
    1948:	80 93 df 01 	sts	0x01DF, r24
    194c:	90 93 e0 01 	sts	0x01E0, r25
    1950:	a0 93 e1 01 	sts	0x01E1, r26
    1954:	b0 93 e2 01 	sts	0x01E2, r27
				break;
    1958:	46 c0       	rjmp	.+140    	; 0x19e6 <main+0x33a>

			case EXIT:
				key_down = FALSE;
    195a:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    195e:	10 92 36 01 	sts	0x0136, r1

				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1962:	80 91 d4 01 	lds	r24, 0x01D4
    1966:	90 91 d5 01 	lds	r25, 0x01D5
    196a:	a0 91 d6 01 	lds	r26, 0x01D6
    196e:	b0 91 d7 01 	lds	r27, 0x01D7
    1972:	81 3b       	cpi	r24, 0xB1	; 177
    1974:	f6 ef       	ldi	r31, 0xF6	; 246
    1976:	9f 07       	cpc	r25, r31
    1978:	fa ed       	ldi	r31, 0xDA	; 218
    197a:	af 07       	cpc	r26, r31
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	bf 07       	cpc	r27, r31
    1980:	80 f4       	brcc	.+32     	; 0x19a2 <main+0x2f6>
    1982:	80 91 d4 01 	lds	r24, 0x01D4
    1986:	90 91 d5 01 	lds	r25, 0x01D5
    198a:	a0 91 d6 01 	lds	r26, 0x01D6
    198e:	b0 91 d7 01 	lds	r27, 0x01D7
    1992:	80 38       	cpi	r24, 0x80	; 128
    1994:	2f e9       	ldi	r18, 0x9F	; 159
    1996:	92 07       	cpc	r25, r18
    1998:	25 ed       	ldi	r18, 0xD5	; 213
    199a:	a2 07       	cpc	r26, r18
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	b2 07       	cpc	r27, r18
    19a0:	18 f4       	brcc	.+6      	; 0x19a8 <main+0x2fc>
					mute_on = FALSE;
    19a2:	10 92 37 01 	sts	0x0137, r1
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <main+0x302>
				else
					mute_on = TRUE;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	80 93 37 01 	sts	0x0137, r24

				if(cur_timer >= cur_state_end)
    19ae:	20 91 64 01 	lds	r18, 0x0164
    19b2:	30 91 65 01 	lds	r19, 0x0165
    19b6:	40 91 66 01 	lds	r20, 0x0166
    19ba:	50 91 67 01 	lds	r21, 0x0167
    19be:	80 91 ca 01 	lds	r24, 0x01CA
    19c2:	90 91 cb 01 	lds	r25, 0x01CB
    19c6:	a0 91 cc 01 	lds	r26, 0x01CC
    19ca:	b0 91 cd 01 	lds	r27, 0x01CD
    19ce:	28 17       	cp	r18, r24
    19d0:	39 07       	cpc	r19, r25
    19d2:	4a 07       	cpc	r20, r26
    19d4:	5b 07       	cpc	r21, r27
    19d6:	30 f0       	brcs	.+12     	; 0x19e4 <main+0x338>
					cur_state = IDLE;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	80 93 c0 01 	sts	0x01C0, r24
				break;
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <main+0x33a>

			default:
				break;
    19e0:	00 00       	nop
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <main+0x33a>
				else
					mute_on = TRUE;

				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;
    19e4:	00 00       	nop
			default:
				break;
			}

			// Go to sleep
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    19e6:	83 e5       	ldi	r24, 0x53	; 83
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	23 e5       	ldi	r18, 0x53	; 83
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	f9 01       	movw	r30, r18
    19f0:	20 81       	ld	r18, Z
    19f2:	21 7f       	andi	r18, 0xF1	; 241
    19f4:	24 60       	ori	r18, 0x04	; 4
    19f6:	fc 01       	movw	r30, r24
    19f8:	20 83       	st	Z, r18
			cli();
    19fa:	f8 94       	cli
			if((cur_mode == KEYER) && (cur_state == IDLE) && (cur_timer > sleep_timer))
    19fc:	80 91 9e 01 	lds	r24, 0x019E
    1a00:	88 23       	and	r24, r24
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <main+0x35a>
    1a04:	3b c0       	rjmp	.+118    	; 0x1a7c <main+0x3d0>
    1a06:	80 91 c0 01 	lds	r24, 0x01C0
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	b9 f5       	brne	.+110    	; 0x1a7c <main+0x3d0>
    1a0e:	20 91 64 01 	lds	r18, 0x0164
    1a12:	30 91 65 01 	lds	r19, 0x0165
    1a16:	40 91 66 01 	lds	r20, 0x0166
    1a1a:	50 91 67 01 	lds	r21, 0x0167
    1a1e:	80 91 c5 01 	lds	r24, 0x01C5
    1a22:	90 91 c6 01 	lds	r25, 0x01C6
    1a26:	a0 91 c7 01 	lds	r26, 0x01C7
    1a2a:	b0 91 c8 01 	lds	r27, 0x01C8
    1a2e:	82 17       	cp	r24, r18
    1a30:	93 07       	cpc	r25, r19
    1a32:	a4 07       	cpc	r26, r20
    1a34:	b5 07       	cpc	r27, r21
    1a36:	10 f5       	brcc	.+68     	; 0x1a7c <main+0x3d0>
			{
				MUTE_PORT &= ~(_BV(MUTE));
    1a38:	88 e2       	ldi	r24, 0x28	; 40
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	28 e2       	ldi	r18, 0x28	; 40
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	f9 01       	movw	r30, r18
    1a42:	20 81       	ld	r18, Z
    1a44:	2f 7d       	andi	r18, 0xDF	; 223
    1a46:	fc 01       	movw	r30, r24
    1a48:	20 83       	st	Z, r18
				PCICR = _BV(PCIE2);
    1a4a:	88 e6       	ldi	r24, 0x68	; 104
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	24 e0       	ldi	r18, 0x04	; 4
    1a50:	fc 01       	movw	r30, r24
    1a52:	20 83       	st	Z, r18
				sleep_enable();
    1a54:	83 e5       	ldi	r24, 0x53	; 83
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	23 e5       	ldi	r18, 0x53	; 83
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	f9 01       	movw	r30, r18
    1a5e:	20 81       	ld	r18, Z
    1a60:	21 60       	ori	r18, 0x01	; 1
    1a62:	fc 01       	movw	r30, r24
    1a64:	20 83       	st	Z, r18
				sei();
    1a66:	78 94       	sei
				sleep_cpu();
    1a68:	88 95       	sleep
				sleep_disable();
    1a6a:	83 e5       	ldi	r24, 0x53	; 83
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	23 e5       	ldi	r18, 0x53	; 83
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	f9 01       	movw	r30, r18
    1a74:	20 81       	ld	r18, Z
    1a76:	2e 7f       	andi	r18, 0xFE	; 254
    1a78:	fc 01       	movw	r30, r24
    1a7a:	20 83       	st	Z, r18
			}
			sei();
    1a7c:	78 94       	sei

			break;
    1a7e:	0c 94 15 19 	jmp	0x322a	; 0x322a <main+0x1b7e>

		case KEYER:
			default_mode = KEYER;
    1a82:	10 92 69 01 	sts	0x0169, r1
			poll_buttons();
    1a86:	0e 94 cf 07 	call	0xf9e	; 0xf9e <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    1a8a:	80 91 c0 01 	lds	r24, 0x01C0
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	83 30       	cpi	r24, 0x03	; 3
    1a94:	91 05       	cpc	r25, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <main+0x3ee>
    1a98:	19 c2       	rjmp	.+1074   	; 0x1ecc <main+0x820>
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	44 f4       	brge	.+16     	; 0x1ab0 <main+0x404>
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	71 f0       	breq	.+28     	; 0x1ac2 <main+0x416>
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <main+0x402>
    1aac:	76 c1       	rjmp	.+748    	; 0x1d9a <main+0x6ee>

				sleep_timer = cur_timer + SLEEP_DELAY;
				break;

			default:
				break;
    1aae:	23 c4       	rjmp	.+2118   	; 0x22f6 <main+0xc4a>
		case KEYER:
			default_mode = KEYER;
			poll_buttons();

			// Handle KEYER state conditions
			switch(cur_state)
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <main+0x40c>
    1ab6:	a3 c2       	rjmp	.+1350   	; 0x1ffe <main+0x952>
    1ab8:	8c 30       	cpi	r24, 0x0C	; 12
    1aba:	91 05       	cpc	r25, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <main+0x414>
    1abe:	e1 c3       	rjmp	.+1986   	; 0x2282 <main+0xbd6>

				sleep_timer = cur_timer + SLEEP_DELAY;
				break;

			default:
				break;
    1ac0:	1a c4       	rjmp	.+2100   	; 0x22f6 <main+0xc4a>

			// Handle KEYER state conditions
			switch(cur_state)
			{
			case IDLE:
				key_down = FALSE;
    1ac2:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    1ac6:	10 92 36 01 	sts	0x0136, r1
				mute_on = FALSE;
    1aca:	10 92 37 01 	sts	0x0137, r1
				mute_end = cur_timer;
    1ace:	80 91 64 01 	lds	r24, 0x0164
    1ad2:	90 91 65 01 	lds	r25, 0x0165
    1ad6:	a0 91 66 01 	lds	r26, 0x0166
    1ada:	b0 91 67 01 	lds	r27, 0x0167
    1ade:	80 93 ce 01 	sts	0x01CE, r24
    1ae2:	90 93 cf 01 	sts	0x01CF, r25
    1ae6:	a0 93 d0 01 	sts	0x01D0, r26
    1aea:	b0 93 d1 01 	sts	0x01D1, r27

				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    1aee:	80 91 d2 01 	lds	r24, 0x01D2
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <main+0x44c>
    1af6:	68 c0       	rjmp	.+208    	; 0x1bc8 <main+0x51c>
    1af8:	80 91 bc 01 	lds	r24, 0x01BC
    1afc:	88 23       	and	r24, r24
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <main+0x456>
    1b00:	63 c0       	rjmp	.+198    	; 0x1bc8 <main+0x51c>
				{
					prev_state = IDLE;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DIT;
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	80 93 c0 01 	sts	0x01C0, r24
					next_state = IDLE;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + dit_length;
    1b14:	80 91 6f 01 	lds	r24, 0x016F
    1b18:	90 91 70 01 	lds	r25, 0x0170
    1b1c:	9c 01       	movw	r18, r24
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	80 91 64 01 	lds	r24, 0x0164
    1b26:	90 91 65 01 	lds	r25, 0x0165
    1b2a:	a0 91 66 01 	lds	r26, 0x0166
    1b2e:	b0 91 67 01 	lds	r27, 0x0167
    1b32:	82 0f       	add	r24, r18
    1b34:	93 1f       	adc	r25, r19
    1b36:	a4 1f       	adc	r26, r20
    1b38:	b5 1f       	adc	r27, r21
    1b3a:	80 93 ca 01 	sts	0x01CA, r24
    1b3e:	90 93 cb 01 	sts	0x01CB, r25
    1b42:	a0 93 cc 01 	sts	0x01CC, r26
    1b46:	b0 93 cd 01 	sts	0x01CD, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1b4a:	80 91 64 01 	lds	r24, 0x0164
    1b4e:	90 91 65 01 	lds	r25, 0x0165
    1b52:	a0 91 66 01 	lds	r26, 0x0166
    1b56:	b0 91 67 01 	lds	r27, 0x0167
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	b1 1d       	adc	r27, r1
    1b60:	80 93 a4 01 	sts	0x01A4, r24
    1b64:	90 93 a5 01 	sts	0x01A5, r25
    1b68:	a0 93 a6 01 	sts	0x01A6, r26
    1b6c:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1b70:	80 91 ca 01 	lds	r24, 0x01CA
    1b74:	90 91 cb 01 	lds	r25, 0x01CB
    1b78:	a0 91 cc 01 	lds	r26, 0x01CC
    1b7c:	b0 91 cd 01 	lds	r27, 0x01CD
    1b80:	80 93 df 01 	sts	0x01DF, r24
    1b84:	90 93 e0 01 	sts	0x01E0, r25
    1b88:	a0 93 e1 01 	sts	0x01E1, r26
    1b8c:	b0 93 e2 01 	sts	0x01E2, r27
					mute_start = cur_timer;
    1b90:	80 91 64 01 	lds	r24, 0x0164
    1b94:	90 91 65 01 	lds	r25, 0x0165
    1b98:	a0 91 66 01 	lds	r26, 0x0166
    1b9c:	b0 91 67 01 	lds	r27, 0x0167
    1ba0:	80 93 d9 01 	sts	0x01D9, r24
    1ba4:	90 93 da 01 	sts	0x01DA, r25
    1ba8:	a0 93 db 01 	sts	0x01DB, r26
    1bac:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = UINT32_MAX;
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	9f ef       	ldi	r25, 0xFF	; 255
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	80 93 ce 01 	sts	0x01CE, r24
    1bba:	90 93 cf 01 	sts	0x01CF, r25
    1bbe:	a0 93 d0 01 	sts	0x01D0, r26
    1bc2:	b0 93 d1 01 	sts	0x01D1, r27
    1bc6:	e8 c0       	rjmp	.+464    	; 0x1d98 <main+0x6ec>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    1bc8:	80 91 bc 01 	lds	r24, 0x01BC
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <main+0x526>
    1bd0:	6d c0       	rjmp	.+218    	; 0x1cac <main+0x600>
    1bd2:	80 91 d2 01 	lds	r24, 0x01D2
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <main+0x530>
    1bda:	68 c0       	rjmp	.+208    	; 0x1cac <main+0x600>
				{
					prev_state = IDLE;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DAH;
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	80 93 c0 01 	sts	0x01C0, r24
					next_state = IDLE;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + (dit_length * 3);
    1bee:	20 91 6f 01 	lds	r18, 0x016F
    1bf2:	30 91 70 01 	lds	r19, 0x0170
    1bf6:	c9 01       	movw	r24, r18
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	82 0f       	add	r24, r18
    1bfe:	93 1f       	adc	r25, r19
    1c00:	9c 01       	movw	r18, r24
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	80 91 64 01 	lds	r24, 0x0164
    1c0a:	90 91 65 01 	lds	r25, 0x0165
    1c0e:	a0 91 66 01 	lds	r26, 0x0166
    1c12:	b0 91 67 01 	lds	r27, 0x0167
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	a4 1f       	adc	r26, r20
    1c1c:	b5 1f       	adc	r27, r21
    1c1e:	80 93 ca 01 	sts	0x01CA, r24
    1c22:	90 93 cb 01 	sts	0x01CB, r25
    1c26:	a0 93 cc 01 	sts	0x01CC, r26
    1c2a:	b0 93 cd 01 	sts	0x01CD, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1c2e:	80 91 64 01 	lds	r24, 0x0164
    1c32:	90 91 65 01 	lds	r25, 0x0165
    1c36:	a0 91 66 01 	lds	r26, 0x0166
    1c3a:	b0 91 67 01 	lds	r27, 0x0167
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	a1 1d       	adc	r26, r1
    1c42:	b1 1d       	adc	r27, r1
    1c44:	80 93 a4 01 	sts	0x01A4, r24
    1c48:	90 93 a5 01 	sts	0x01A5, r25
    1c4c:	a0 93 a6 01 	sts	0x01A6, r26
    1c50:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1c54:	80 91 ca 01 	lds	r24, 0x01CA
    1c58:	90 91 cb 01 	lds	r25, 0x01CB
    1c5c:	a0 91 cc 01 	lds	r26, 0x01CC
    1c60:	b0 91 cd 01 	lds	r27, 0x01CD
    1c64:	80 93 df 01 	sts	0x01DF, r24
    1c68:	90 93 e0 01 	sts	0x01E0, r25
    1c6c:	a0 93 e1 01 	sts	0x01E1, r26
    1c70:	b0 93 e2 01 	sts	0x01E2, r27
					mute_start = cur_timer;
    1c74:	80 91 64 01 	lds	r24, 0x0164
    1c78:	90 91 65 01 	lds	r25, 0x0165
    1c7c:	a0 91 66 01 	lds	r26, 0x0166
    1c80:	b0 91 67 01 	lds	r27, 0x0167
    1c84:	80 93 d9 01 	sts	0x01D9, r24
    1c88:	90 93 da 01 	sts	0x01DA, r25
    1c8c:	a0 93 db 01 	sts	0x01DB, r26
    1c90:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = UINT32_MAX;
    1c94:	8f ef       	ldi	r24, 0xFF	; 255
    1c96:	9f ef       	ldi	r25, 0xFF	; 255
    1c98:	dc 01       	movw	r26, r24
    1c9a:	80 93 ce 01 	sts	0x01CE, r24
    1c9e:	90 93 cf 01 	sts	0x01CF, r25
    1ca2:	a0 93 d0 01 	sts	0x01D0, r26
    1ca6:	b0 93 d1 01 	sts	0x01D1, r27
    1caa:	76 c0       	rjmp	.+236    	; 0x1d98 <main+0x6ec>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    1cac:	80 91 d2 01 	lds	r24, 0x01D2
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <main+0x60a>
    1cb4:	6d c0       	rjmp	.+218    	; 0x1d90 <main+0x6e4>
    1cb6:	80 91 bc 01 	lds	r24, 0x01BC
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <main+0x614>
    1cbe:	68 c0       	rjmp	.+208    	; 0x1d90 <main+0x6e4>
    1cc0:	80 91 a3 01 	lds	r24, 0x01A3
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <main+0x61e>
    1cc8:	63 c0       	rjmp	.+198    	; 0x1d90 <main+0x6e4>
				{
					prev_state = IDLE;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DIT;
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	80 93 c0 01 	sts	0x01C0, r24
					next_state = DAH;
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + dit_length;
    1cdc:	80 91 6f 01 	lds	r24, 0x016F
    1ce0:	90 91 70 01 	lds	r25, 0x0170
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	80 91 64 01 	lds	r24, 0x0164
    1cee:	90 91 65 01 	lds	r25, 0x0165
    1cf2:	a0 91 66 01 	lds	r26, 0x0166
    1cf6:	b0 91 67 01 	lds	r27, 0x0167
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	a4 1f       	adc	r26, r20
    1d00:	b5 1f       	adc	r27, r21
    1d02:	80 93 ca 01 	sts	0x01CA, r24
    1d06:	90 93 cb 01 	sts	0x01CB, r25
    1d0a:	a0 93 cc 01 	sts	0x01CC, r26
    1d0e:	b0 93 cd 01 	sts	0x01CD, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1d12:	80 91 64 01 	lds	r24, 0x0164
    1d16:	90 91 65 01 	lds	r25, 0x0165
    1d1a:	a0 91 66 01 	lds	r26, 0x0166
    1d1e:	b0 91 67 01 	lds	r27, 0x0167
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	a1 1d       	adc	r26, r1
    1d26:	b1 1d       	adc	r27, r1
    1d28:	80 93 a4 01 	sts	0x01A4, r24
    1d2c:	90 93 a5 01 	sts	0x01A5, r25
    1d30:	a0 93 a6 01 	sts	0x01A6, r26
    1d34:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1d38:	80 91 ca 01 	lds	r24, 0x01CA
    1d3c:	90 91 cb 01 	lds	r25, 0x01CB
    1d40:	a0 91 cc 01 	lds	r26, 0x01CC
    1d44:	b0 91 cd 01 	lds	r27, 0x01CD
    1d48:	80 93 df 01 	sts	0x01DF, r24
    1d4c:	90 93 e0 01 	sts	0x01E0, r25
    1d50:	a0 93 e1 01 	sts	0x01E1, r26
    1d54:	b0 93 e2 01 	sts	0x01E2, r27
					mute_start = cur_timer;
    1d58:	80 91 64 01 	lds	r24, 0x0164
    1d5c:	90 91 65 01 	lds	r25, 0x0165
    1d60:	a0 91 66 01 	lds	r26, 0x0166
    1d64:	b0 91 67 01 	lds	r27, 0x0167
    1d68:	80 93 d9 01 	sts	0x01D9, r24
    1d6c:	90 93 da 01 	sts	0x01DA, r25
    1d70:	a0 93 db 01 	sts	0x01DB, r26
    1d74:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = UINT32_MAX;
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f ef       	ldi	r25, 0xFF	; 255
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	80 93 ce 01 	sts	0x01CE, r24
    1d82:	90 93 cf 01 	sts	0x01CF, r25
    1d86:	a0 93 d0 01 	sts	0x01D0, r26
    1d8a:	b0 93 d1 01 	sts	0x01D1, r27
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <main+0x6ec>
				}
				else
				{
					cur_state = IDLE;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	80 93 c0 01 	sts	0x01C0, r24
				}

				break;
    1d96:	af c2       	rjmp	.+1374   	; 0x22f6 <main+0xc4a>
    1d98:	ae c2       	rjmp	.+1372   	; 0x22f6 <main+0xc4a>

			case DIT:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1d9a:	80 91 d4 01 	lds	r24, 0x01D4
    1d9e:	90 91 d5 01 	lds	r25, 0x01D5
    1da2:	a0 91 d6 01 	lds	r26, 0x01D6
    1da6:	b0 91 d7 01 	lds	r27, 0x01D7
    1daa:	81 3b       	cpi	r24, 0xB1	; 177
    1dac:	f6 ef       	ldi	r31, 0xF6	; 246
    1dae:	9f 07       	cpc	r25, r31
    1db0:	fa ed       	ldi	r31, 0xDA	; 218
    1db2:	af 07       	cpc	r26, r31
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	bf 07       	cpc	r27, r31
    1db8:	80 f4       	brcc	.+32     	; 0x1dda <main+0x72e>
    1dba:	80 91 d4 01 	lds	r24, 0x01D4
    1dbe:	90 91 d5 01 	lds	r25, 0x01D5
    1dc2:	a0 91 d6 01 	lds	r26, 0x01D6
    1dc6:	b0 91 d7 01 	lds	r27, 0x01D7
    1dca:	80 38       	cpi	r24, 0x80	; 128
    1dcc:	2f e9       	ldi	r18, 0x9F	; 159
    1dce:	92 07       	cpc	r25, r18
    1dd0:	25 ed       	ldi	r18, 0xD5	; 213
    1dd2:	a2 07       	cpc	r26, r18
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	b2 07       	cpc	r27, r18
    1dd8:	38 f4       	brcc	.+14     	; 0x1de8 <main+0x73c>
				{
					key_down = FALSE;
    1dda:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    1dde:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    1de2:	10 92 37 01 	sts	0x0137, r1
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <main+0x74e>
				}
				else
				{
					key_down = TRUE;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 93 37 01 	sts	0x0137, r24
				}

				if(cur_timer > cur_state_end)
    1dfa:	20 91 64 01 	lds	r18, 0x0164
    1dfe:	30 91 65 01 	lds	r19, 0x0165
    1e02:	40 91 66 01 	lds	r20, 0x0166
    1e06:	50 91 67 01 	lds	r21, 0x0167
    1e0a:	80 91 ca 01 	lds	r24, 0x01CA
    1e0e:	90 91 cb 01 	lds	r25, 0x01CB
    1e12:	a0 91 cc 01 	lds	r26, 0x01CC
    1e16:	b0 91 cd 01 	lds	r27, 0x01CD
    1e1a:	82 17       	cp	r24, r18
    1e1c:	93 07       	cpc	r25, r19
    1e1e:	a4 07       	cpc	r26, r20
    1e20:	b5 07       	cpc	r27, r21
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <main+0x77a>
    1e24:	45 c0       	rjmp	.+138    	; 0x1eb0 <main+0x804>
				{
					prev_state = DIT;
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DITDELAY;
    1e2c:	84 e0       	ldi	r24, 0x04	; 4
    1e2e:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + dit_length;
    1e32:	80 91 6f 01 	lds	r24, 0x016F
    1e36:	90 91 70 01 	lds	r25, 0x0170
    1e3a:	9c 01       	movw	r18, r24
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	80 91 64 01 	lds	r24, 0x0164
    1e44:	90 91 65 01 	lds	r25, 0x0165
    1e48:	a0 91 66 01 	lds	r26, 0x0166
    1e4c:	b0 91 67 01 	lds	r27, 0x0167
    1e50:	82 0f       	add	r24, r18
    1e52:	93 1f       	adc	r25, r19
    1e54:	a4 1f       	adc	r26, r20
    1e56:	b5 1f       	adc	r27, r21
    1e58:	80 93 ca 01 	sts	0x01CA, r24
    1e5c:	90 93 cb 01 	sts	0x01CB, r25
    1e60:	a0 93 cc 01 	sts	0x01CC, r26
    1e64:	b0 93 cd 01 	sts	0x01CD, r27
					mute_start = cur_timer;
    1e68:	80 91 64 01 	lds	r24, 0x0164
    1e6c:	90 91 65 01 	lds	r25, 0x0165
    1e70:	a0 91 66 01 	lds	r26, 0x0166
    1e74:	b0 91 67 01 	lds	r27, 0x0167
    1e78:	80 93 d9 01 	sts	0x01D9, r24
    1e7c:	90 93 da 01 	sts	0x01DA, r25
    1e80:	a0 93 db 01 	sts	0x01DB, r26
    1e84:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1e88:	80 91 ca 01 	lds	r24, 0x01CA
    1e8c:	90 91 cb 01 	lds	r25, 0x01CB
    1e90:	a0 91 cc 01 	lds	r26, 0x01CC
    1e94:	b0 91 cd 01 	lds	r27, 0x01CD
    1e98:	8c 59       	subi	r24, 0x9C	; 156
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	af 4f       	sbci	r26, 0xFF	; 255
    1e9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea0:	80 93 ce 01 	sts	0x01CE, r24
    1ea4:	90 93 cf 01 	sts	0x01CF, r25
    1ea8:	a0 93 d0 01 	sts	0x01D0, r26
    1eac:	b0 93 d1 01 	sts	0x01D1, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    1eb0:	80 91 bc 01 	lds	r24, 0x01BC
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <main+0x80e>
    1eb8:	17 c2       	rjmp	.+1070   	; 0x22e8 <main+0xc3c>
    1eba:	80 91 a3 01 	lds	r24, 0x01A3
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <main+0x818>
    1ec2:	14 c2       	rjmp	.+1064   	; 0x22ec <main+0xc40>
					next_state = DAH;
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	80 93 a3 01 	sts	0x01A3, r24

				break;
    1eca:	15 c2       	rjmp	.+1066   	; 0x22f6 <main+0xc4a>

			case DAH:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1ecc:	80 91 d4 01 	lds	r24, 0x01D4
    1ed0:	90 91 d5 01 	lds	r25, 0x01D5
    1ed4:	a0 91 d6 01 	lds	r26, 0x01D6
    1ed8:	b0 91 d7 01 	lds	r27, 0x01D7
    1edc:	81 3b       	cpi	r24, 0xB1	; 177
    1ede:	e6 ef       	ldi	r30, 0xF6	; 246
    1ee0:	9e 07       	cpc	r25, r30
    1ee2:	ea ed       	ldi	r30, 0xDA	; 218
    1ee4:	ae 07       	cpc	r26, r30
    1ee6:	e0 e0       	ldi	r30, 0x00	; 0
    1ee8:	be 07       	cpc	r27, r30
    1eea:	80 f4       	brcc	.+32     	; 0x1f0c <main+0x860>
    1eec:	80 91 d4 01 	lds	r24, 0x01D4
    1ef0:	90 91 d5 01 	lds	r25, 0x01D5
    1ef4:	a0 91 d6 01 	lds	r26, 0x01D6
    1ef8:	b0 91 d7 01 	lds	r27, 0x01D7
    1efc:	80 38       	cpi	r24, 0x80	; 128
    1efe:	ff e9       	ldi	r31, 0x9F	; 159
    1f00:	9f 07       	cpc	r25, r31
    1f02:	f5 ed       	ldi	r31, 0xD5	; 213
    1f04:	af 07       	cpc	r26, r31
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	bf 07       	cpc	r27, r31
    1f0a:	38 f4       	brcc	.+14     	; 0x1f1a <main+0x86e>
				{
					key_down = FALSE;
    1f0c:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    1f10:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    1f14:	10 92 37 01 	sts	0x0137, r1
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <main+0x880>
				}
				else
				{
					key_down = TRUE;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	80 93 37 01 	sts	0x0137, r24
				}

				if(cur_timer > cur_state_end)
    1f2c:	20 91 64 01 	lds	r18, 0x0164
    1f30:	30 91 65 01 	lds	r19, 0x0165
    1f34:	40 91 66 01 	lds	r20, 0x0166
    1f38:	50 91 67 01 	lds	r21, 0x0167
    1f3c:	80 91 ca 01 	lds	r24, 0x01CA
    1f40:	90 91 cb 01 	lds	r25, 0x01CB
    1f44:	a0 91 cc 01 	lds	r26, 0x01CC
    1f48:	b0 91 cd 01 	lds	r27, 0x01CD
    1f4c:	82 17       	cp	r24, r18
    1f4e:	93 07       	cpc	r25, r19
    1f50:	a4 07       	cpc	r26, r20
    1f52:	b5 07       	cpc	r27, r21
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <main+0x8ac>
    1f56:	45 c0       	rjmp	.+138    	; 0x1fe2 <main+0x936>
				{
					prev_state = DAH;
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DITDELAY;
    1f5e:	84 e0       	ldi	r24, 0x04	; 4
    1f60:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + dit_length;
    1f64:	80 91 6f 01 	lds	r24, 0x016F
    1f68:	90 91 70 01 	lds	r25, 0x0170
    1f6c:	9c 01       	movw	r18, r24
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	80 91 64 01 	lds	r24, 0x0164
    1f76:	90 91 65 01 	lds	r25, 0x0165
    1f7a:	a0 91 66 01 	lds	r26, 0x0166
    1f7e:	b0 91 67 01 	lds	r27, 0x0167
    1f82:	82 0f       	add	r24, r18
    1f84:	93 1f       	adc	r25, r19
    1f86:	a4 1f       	adc	r26, r20
    1f88:	b5 1f       	adc	r27, r21
    1f8a:	80 93 ca 01 	sts	0x01CA, r24
    1f8e:	90 93 cb 01 	sts	0x01CB, r25
    1f92:	a0 93 cc 01 	sts	0x01CC, r26
    1f96:	b0 93 cd 01 	sts	0x01CD, r27
					mute_start = cur_timer;
    1f9a:	80 91 64 01 	lds	r24, 0x0164
    1f9e:	90 91 65 01 	lds	r25, 0x0165
    1fa2:	a0 91 66 01 	lds	r26, 0x0166
    1fa6:	b0 91 67 01 	lds	r27, 0x0167
    1faa:	80 93 d9 01 	sts	0x01D9, r24
    1fae:	90 93 da 01 	sts	0x01DA, r25
    1fb2:	a0 93 db 01 	sts	0x01DB, r26
    1fb6:	b0 93 dc 01 	sts	0x01DC, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1fba:	80 91 ca 01 	lds	r24, 0x01CA
    1fbe:	90 91 cb 01 	lds	r25, 0x01CB
    1fc2:	a0 91 cc 01 	lds	r26, 0x01CC
    1fc6:	b0 91 cd 01 	lds	r27, 0x01CD
    1fca:	8c 59       	subi	r24, 0x9C	; 156
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	af 4f       	sbci	r26, 0xFF	; 255
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	80 93 ce 01 	sts	0x01CE, r24
    1fd6:	90 93 cf 01 	sts	0x01CF, r25
    1fda:	a0 93 d0 01 	sts	0x01D0, r26
    1fde:	b0 93 d1 01 	sts	0x01D1, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    1fe2:	80 91 d2 01 	lds	r24, 0x01D2
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <main+0x940>
    1fea:	82 c1       	rjmp	.+772    	; 0x22f0 <main+0xc44>
    1fec:	80 91 a3 01 	lds	r24, 0x01A3
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <main+0x94a>
    1ff4:	7f c1       	rjmp	.+766    	; 0x22f4 <main+0xc48>
					next_state = DIT;
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	80 93 a3 01 	sts	0x01A3, r24

				break;
    1ffc:	7c c1       	rjmp	.+760    	; 0x22f6 <main+0xc4a>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    1ffe:	20 91 64 01 	lds	r18, 0x0164
    2002:	30 91 65 01 	lds	r19, 0x0165
    2006:	40 91 66 01 	lds	r20, 0x0166
    200a:	50 91 67 01 	lds	r21, 0x0167
    200e:	80 91 ca 01 	lds	r24, 0x01CA
    2012:	90 91 cb 01 	lds	r25, 0x01CB
    2016:	a0 91 cc 01 	lds	r26, 0x01CC
    201a:	b0 91 cd 01 	lds	r27, 0x01CD
    201e:	82 17       	cp	r24, r18
    2020:	93 07       	cpc	r25, r19
    2022:	a4 07       	cpc	r26, r20
    2024:	b5 07       	cpc	r27, r21
    2026:	08 f0       	brcs	.+2      	; 0x202a <main+0x97e>
    2028:	e2 c0       	rjmp	.+452    	; 0x21ee <main+0xb42>
				{
					if(next_state == DIT)
    202a:	80 91 a3 01 	lds	r24, 0x01A3
    202e:	82 30       	cpi	r24, 0x02	; 2
    2030:	09 f0       	breq	.+2      	; 0x2034 <main+0x988>
    2032:	5d c0       	rjmp	.+186    	; 0x20ee <main+0xa42>
					{
						cur_state = DIT;
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer + dit_length;
    203a:	80 91 6f 01 	lds	r24, 0x016F
    203e:	90 91 70 01 	lds	r25, 0x0170
    2042:	9c 01       	movw	r18, r24
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	80 91 64 01 	lds	r24, 0x0164
    204c:	90 91 65 01 	lds	r25, 0x0165
    2050:	a0 91 66 01 	lds	r26, 0x0166
    2054:	b0 91 67 01 	lds	r27, 0x0167
    2058:	82 0f       	add	r24, r18
    205a:	93 1f       	adc	r25, r19
    205c:	a4 1f       	adc	r26, r20
    205e:	b5 1f       	adc	r27, r21
    2060:	80 93 ca 01 	sts	0x01CA, r24
    2064:	90 93 cb 01 	sts	0x01CB, r25
    2068:	a0 93 cc 01 	sts	0x01CC, r26
    206c:	b0 93 cd 01 	sts	0x01CD, r27
						tx_start = cur_timer + TX_ON_DELAY;
    2070:	80 91 64 01 	lds	r24, 0x0164
    2074:	90 91 65 01 	lds	r25, 0x0165
    2078:	a0 91 66 01 	lds	r26, 0x0166
    207c:	b0 91 67 01 	lds	r27, 0x0167
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	a1 1d       	adc	r26, r1
    2084:	b1 1d       	adc	r27, r1
    2086:	80 93 a4 01 	sts	0x01A4, r24
    208a:	90 93 a5 01 	sts	0x01A5, r25
    208e:	a0 93 a6 01 	sts	0x01A6, r26
    2092:	b0 93 a7 01 	sts	0x01A7, r27
						tx_end = cur_state_end;
    2096:	80 91 ca 01 	lds	r24, 0x01CA
    209a:	90 91 cb 01 	lds	r25, 0x01CB
    209e:	a0 91 cc 01 	lds	r26, 0x01CC
    20a2:	b0 91 cd 01 	lds	r27, 0x01CD
    20a6:	80 93 df 01 	sts	0x01DF, r24
    20aa:	90 93 e0 01 	sts	0x01E0, r25
    20ae:	a0 93 e1 01 	sts	0x01E1, r26
    20b2:	b0 93 e2 01 	sts	0x01E2, r27
						mute_start = cur_timer;
    20b6:	80 91 64 01 	lds	r24, 0x0164
    20ba:	90 91 65 01 	lds	r25, 0x0165
    20be:	a0 91 66 01 	lds	r26, 0x0166
    20c2:	b0 91 67 01 	lds	r27, 0x0167
    20c6:	80 93 d9 01 	sts	0x01D9, r24
    20ca:	90 93 da 01 	sts	0x01DA, r25
    20ce:	a0 93 db 01 	sts	0x01DB, r26
    20d2:	b0 93 dc 01 	sts	0x01DC, r27
						mute_end = UINT32_MAX;
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	9f ef       	ldi	r25, 0xFF	; 255
    20da:	dc 01       	movw	r26, r24
    20dc:	80 93 ce 01 	sts	0x01CE, r24
    20e0:	90 93 cf 01 	sts	0x01CF, r25
    20e4:	a0 93 d0 01 	sts	0x01D0, r26
    20e8:	b0 93 d1 01 	sts	0x01D1, r27
    20ec:	7a c0       	rjmp	.+244    	; 0x21e2 <main+0xb36>
					}
					else if(next_state == DAH)
    20ee:	80 91 a3 01 	lds	r24, 0x01A3
    20f2:	83 30       	cpi	r24, 0x03	; 3
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <main+0xa4c>
    20f6:	62 c0       	rjmp	.+196    	; 0x21bc <main+0xb10>
					{
						cur_state = DAH;
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer + (dit_length * 3);
    20fe:	20 91 6f 01 	lds	r18, 0x016F
    2102:	30 91 70 01 	lds	r19, 0x0170
    2106:	c9 01       	movw	r24, r18
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	82 0f       	add	r24, r18
    210e:	93 1f       	adc	r25, r19
    2110:	9c 01       	movw	r18, r24
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	80 91 64 01 	lds	r24, 0x0164
    211a:	90 91 65 01 	lds	r25, 0x0165
    211e:	a0 91 66 01 	lds	r26, 0x0166
    2122:	b0 91 67 01 	lds	r27, 0x0167
    2126:	82 0f       	add	r24, r18
    2128:	93 1f       	adc	r25, r19
    212a:	a4 1f       	adc	r26, r20
    212c:	b5 1f       	adc	r27, r21
    212e:	80 93 ca 01 	sts	0x01CA, r24
    2132:	90 93 cb 01 	sts	0x01CB, r25
    2136:	a0 93 cc 01 	sts	0x01CC, r26
    213a:	b0 93 cd 01 	sts	0x01CD, r27
						tx_start = cur_timer + TX_ON_DELAY;
    213e:	80 91 64 01 	lds	r24, 0x0164
    2142:	90 91 65 01 	lds	r25, 0x0165
    2146:	a0 91 66 01 	lds	r26, 0x0166
    214a:	b0 91 67 01 	lds	r27, 0x0167
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	a1 1d       	adc	r26, r1
    2152:	b1 1d       	adc	r27, r1
    2154:	80 93 a4 01 	sts	0x01A4, r24
    2158:	90 93 a5 01 	sts	0x01A5, r25
    215c:	a0 93 a6 01 	sts	0x01A6, r26
    2160:	b0 93 a7 01 	sts	0x01A7, r27
						tx_end = cur_state_end;
    2164:	80 91 ca 01 	lds	r24, 0x01CA
    2168:	90 91 cb 01 	lds	r25, 0x01CB
    216c:	a0 91 cc 01 	lds	r26, 0x01CC
    2170:	b0 91 cd 01 	lds	r27, 0x01CD
    2174:	80 93 df 01 	sts	0x01DF, r24
    2178:	90 93 e0 01 	sts	0x01E0, r25
    217c:	a0 93 e1 01 	sts	0x01E1, r26
    2180:	b0 93 e2 01 	sts	0x01E2, r27
						mute_start = cur_timer;
    2184:	80 91 64 01 	lds	r24, 0x0164
    2188:	90 91 65 01 	lds	r25, 0x0165
    218c:	a0 91 66 01 	lds	r26, 0x0166
    2190:	b0 91 67 01 	lds	r27, 0x0167
    2194:	80 93 d9 01 	sts	0x01D9, r24
    2198:	90 93 da 01 	sts	0x01DA, r25
    219c:	a0 93 db 01 	sts	0x01DB, r26
    21a0:	b0 93 dc 01 	sts	0x01DC, r27
						mute_end = UINT32_MAX;
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	9f ef       	ldi	r25, 0xFF	; 255
    21a8:	dc 01       	movw	r26, r24
    21aa:	80 93 ce 01 	sts	0x01CE, r24
    21ae:	90 93 cf 01 	sts	0x01CF, r25
    21b2:	a0 93 d0 01 	sts	0x01D0, r26
    21b6:	b0 93 d1 01 	sts	0x01D1, r27
    21ba:	13 c0       	rjmp	.+38     	; 0x21e2 <main+0xb36>
					}
					else
					{
						cur_state = IDLE;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer;
    21c2:	80 91 64 01 	lds	r24, 0x0164
    21c6:	90 91 65 01 	lds	r25, 0x0165
    21ca:	a0 91 66 01 	lds	r26, 0x0166
    21ce:	b0 91 67 01 	lds	r27, 0x0167
    21d2:	80 93 ca 01 	sts	0x01CA, r24
    21d6:	90 93 cb 01 	sts	0x01CB, r25
    21da:	a0 93 cc 01 	sts	0x01CC, r26
    21de:	b0 93 cd 01 	sts	0x01CD, r27
					}

					prev_state = DITDELAY;
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	80 93 6e 01 	sts	0x016E, r24
					next_state = IDLE;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	80 93 a3 01 	sts	0x01A3, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    21ee:	80 91 d2 01 	lds	r24, 0x01D2
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	61 f4       	brne	.+24     	; 0x220e <main+0xb62>
    21f6:	80 91 6e 01 	lds	r24, 0x016E
    21fa:	83 30       	cpi	r24, 0x03	; 3
    21fc:	41 f4       	brne	.+16     	; 0x220e <main+0xb62>
    21fe:	80 91 a3 01 	lds	r24, 0x01A3
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	21 f4       	brne	.+8      	; 0x220e <main+0xb62>
					next_state = DIT;
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	80 93 a3 01 	sts	0x01A3, r24
    220c:	0f c0       	rjmp	.+30     	; 0x222c <main+0xb80>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    220e:	80 91 bc 01 	lds	r24, 0x01BC
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	59 f4       	brne	.+22     	; 0x222c <main+0xb80>
    2216:	80 91 6e 01 	lds	r24, 0x016E
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	39 f4       	brne	.+14     	; 0x222c <main+0xb80>
    221e:	80 91 a3 01 	lds	r24, 0x01A3
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	19 f4       	brne	.+6      	; 0x222c <main+0xb80>
					next_state = DAH;
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	80 93 a3 01 	sts	0x01A3, r24

				key_down = FALSE;
    222c:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    2230:	10 92 36 01 	sts	0x0136, r1
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    2234:	80 91 d4 01 	lds	r24, 0x01D4
    2238:	90 91 d5 01 	lds	r25, 0x01D5
    223c:	a0 91 d6 01 	lds	r26, 0x01D6
    2240:	b0 91 d7 01 	lds	r27, 0x01D7
    2244:	81 3b       	cpi	r24, 0xB1	; 177
    2246:	26 ef       	ldi	r18, 0xF6	; 246
    2248:	92 07       	cpc	r25, r18
    224a:	2a ed       	ldi	r18, 0xDA	; 218
    224c:	a2 07       	cpc	r26, r18
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	b2 07       	cpc	r27, r18
    2252:	80 f4       	brcc	.+32     	; 0x2274 <main+0xbc8>
    2254:	80 91 d4 01 	lds	r24, 0x01D4
    2258:	90 91 d5 01 	lds	r25, 0x01D5
    225c:	a0 91 d6 01 	lds	r26, 0x01D6
    2260:	b0 91 d7 01 	lds	r27, 0x01D7
    2264:	80 38       	cpi	r24, 0x80	; 128
    2266:	ef e9       	ldi	r30, 0x9F	; 159
    2268:	9e 07       	cpc	r25, r30
    226a:	e5 ed       	ldi	r30, 0xD5	; 213
    226c:	ae 07       	cpc	r26, r30
    226e:	e0 e0       	ldi	r30, 0x00	; 0
    2270:	be 07       	cpc	r27, r30
    2272:	18 f4       	brcc	.+6      	; 0x227a <main+0xbce>
					mute_on = FALSE;
    2274:	10 92 37 01 	sts	0x0137, r1
				else
					mute_on = TRUE;
				break;
    2278:	3e c0       	rjmp	.+124    	; 0x22f6 <main+0xc4a>
				key_down = FALSE;
				sidetone_on = FALSE;
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
					mute_on = FALSE;
				else
					mute_on = TRUE;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 37 01 	sts	0x0137, r24
				break;
    2280:	3a c0       	rjmp	.+116    	; 0x22f6 <main+0xc4a>

			case EXIT:
				key_down = FALSE;
    2282:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    2286:	10 92 36 01 	sts	0x0136, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    228a:	10 92 37 01 	sts	0x0137, r1

				if(cur_timer > cur_state_end)
    228e:	20 91 64 01 	lds	r18, 0x0164
    2292:	30 91 65 01 	lds	r19, 0x0165
    2296:	40 91 66 01 	lds	r20, 0x0166
    229a:	50 91 67 01 	lds	r21, 0x0167
    229e:	80 91 ca 01 	lds	r24, 0x01CA
    22a2:	90 91 cb 01 	lds	r25, 0x01CB
    22a6:	a0 91 cc 01 	lds	r26, 0x01CC
    22aa:	b0 91 cd 01 	lds	r27, 0x01CD
    22ae:	82 17       	cp	r24, r18
    22b0:	93 07       	cpc	r25, r19
    22b2:	a4 07       	cpc	r26, r20
    22b4:	b5 07       	cpc	r27, r21
    22b6:	18 f4       	brcc	.+6      	; 0x22be <main+0xc12>
				{
					cur_state = IDLE;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	80 93 c0 01 	sts	0x01C0, r24
				}

				sleep_timer = cur_timer + SLEEP_DELAY;
    22be:	80 91 64 01 	lds	r24, 0x0164
    22c2:	90 91 65 01 	lds	r25, 0x0165
    22c6:	a0 91 66 01 	lds	r26, 0x0166
    22ca:	b0 91 67 01 	lds	r27, 0x0167
    22ce:	80 57       	subi	r24, 0x70	; 112
    22d0:	9e 4f       	sbci	r25, 0xFE	; 254
    22d2:	af 4f       	sbci	r26, 0xFF	; 255
    22d4:	bf 4f       	sbci	r27, 0xFF	; 255
    22d6:	80 93 c5 01 	sts	0x01C5, r24
    22da:	90 93 c6 01 	sts	0x01C6, r25
    22de:	a0 93 c7 01 	sts	0x01C7, r26
    22e2:	b0 93 c8 01 	sts	0x01C8, r27
				break;
    22e6:	07 c0       	rjmp	.+14     	; 0x22f6 <main+0xc4a>
				}

				if((dah_active == TRUE) && (next_state == IDLE))
					next_state = DAH;

				break;
    22e8:	00 00       	nop
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <main+0xc4a>
    22ec:	00 00       	nop
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <main+0xc4a>
				}

				if((dit_active == TRUE) && (next_state == IDLE))
					next_state = DIT;

				break;
    22f0:	00 00       	nop
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <main+0xc4a>
    22f4:	00 00       	nop
			default:
				break;
			}

			// Go to sleep
			set_sleep_mode(SLEEP_MODE_STANDBY);
    22f6:	83 e5       	ldi	r24, 0x53	; 83
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	23 e5       	ldi	r18, 0x53	; 83
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	f9 01       	movw	r30, r18
    2300:	20 81       	ld	r18, Z
    2302:	21 7f       	andi	r18, 0xF1	; 241
    2304:	2c 60       	ori	r18, 0x0C	; 12
    2306:	fc 01       	movw	r30, r24
    2308:	20 83       	st	Z, r18
			cli();
    230a:	f8 94       	cli
			if((cur_mode == KEYER) && (cur_state == IDLE) && (cur_timer > sleep_timer))
    230c:	80 91 9e 01 	lds	r24, 0x019E
    2310:	88 23       	and	r24, r24
    2312:	09 f0       	breq	.+2      	; 0x2316 <main+0xc6a>
    2314:	3b c0       	rjmp	.+118    	; 0x238c <main+0xce0>
    2316:	80 91 c0 01 	lds	r24, 0x01C0
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	b9 f5       	brne	.+110    	; 0x238c <main+0xce0>
    231e:	20 91 64 01 	lds	r18, 0x0164
    2322:	30 91 65 01 	lds	r19, 0x0165
    2326:	40 91 66 01 	lds	r20, 0x0166
    232a:	50 91 67 01 	lds	r21, 0x0167
    232e:	80 91 c5 01 	lds	r24, 0x01C5
    2332:	90 91 c6 01 	lds	r25, 0x01C6
    2336:	a0 91 c7 01 	lds	r26, 0x01C7
    233a:	b0 91 c8 01 	lds	r27, 0x01C8
    233e:	82 17       	cp	r24, r18
    2340:	93 07       	cpc	r25, r19
    2342:	a4 07       	cpc	r26, r20
    2344:	b5 07       	cpc	r27, r21
    2346:	10 f5       	brcc	.+68     	; 0x238c <main+0xce0>
			{
				MUTE_PORT &= ~(_BV(MUTE));
    2348:	88 e2       	ldi	r24, 0x28	; 40
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	28 e2       	ldi	r18, 0x28	; 40
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	f9 01       	movw	r30, r18
    2352:	20 81       	ld	r18, Z
    2354:	2f 7d       	andi	r18, 0xDF	; 223
    2356:	fc 01       	movw	r30, r24
    2358:	20 83       	st	Z, r18
				PCICR = _BV(PCIE2);
    235a:	88 e6       	ldi	r24, 0x68	; 104
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	24 e0       	ldi	r18, 0x04	; 4
    2360:	fc 01       	movw	r30, r24
    2362:	20 83       	st	Z, r18
				sleep_enable();
    2364:	83 e5       	ldi	r24, 0x53	; 83
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	23 e5       	ldi	r18, 0x53	; 83
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	f9 01       	movw	r30, r18
    236e:	20 81       	ld	r18, Z
    2370:	21 60       	ori	r18, 0x01	; 1
    2372:	fc 01       	movw	r30, r24
    2374:	20 83       	st	Z, r18
				sei();
    2376:	78 94       	sei
				sleep_cpu();
    2378:	88 95       	sleep
				sleep_disable();
    237a:	83 e5       	ldi	r24, 0x53	; 83
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	23 e5       	ldi	r18, 0x53	; 83
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	f9 01       	movw	r30, r18
    2384:	20 81       	ld	r18, Z
    2386:	2e 7f       	andi	r18, 0xFE	; 254
    2388:	fc 01       	movw	r30, r24
    238a:	20 83       	st	Z, r18
			}
			sei();
    238c:	78 94       	sei

			break;
    238e:	4d c7       	rjmp	.+3738   	; 0x322a <main+0x1b7e>

		case ANNOUNCE:
			switch(cur_state)
    2390:	80 91 c0 01 	lds	r24, 0x01C0
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	84 30       	cpi	r24, 0x04	; 4
    239a:	91 05       	cpc	r25, r1
    239c:	44 f4       	brge	.+16     	; 0x23ae <main+0xd02>
    239e:	82 30       	cpi	r24, 0x02	; 2
    23a0:	91 05       	cpc	r25, r1
    23a2:	0c f0       	brlt	.+2      	; 0x23a6 <main+0xcfa>
    23a4:	49 c1       	rjmp	.+658    	; 0x2638 <main+0xf8c>
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	91 05       	cpc	r25, r1
    23aa:	31 f0       	breq	.+12     	; 0x23b8 <main+0xd0c>
    23ac:	a1 c1       	rjmp	.+834    	; 0x26f0 <main+0x1044>
    23ae:	87 30       	cpi	r24, 0x07	; 7
    23b0:	91 05       	cpc	r25, r1
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <main+0xd0a>
    23b4:	9d c1       	rjmp	.+826    	; 0x26f0 <main+0x1044>
    23b6:	7c c1       	rjmp	.+760    	; 0x26b0 <main+0x1004>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    23b8:	20 91 3a 01 	lds	r18, 0x013A
    23bc:	30 91 3b 01 	lds	r19, 0x013B
    23c0:	80 91 dd 01 	lds	r24, 0x01DD
    23c4:	90 91 de 01 	lds	r25, 0x01DE
    23c8:	28 17       	cp	r18, r24
    23ca:	39 07       	cpc	r19, r25
    23cc:	c9 f4       	brne	.+50     	; 0x2400 <main+0xd54>
    23ce:	80 91 3e 01 	lds	r24, 0x013E
    23d2:	88 23       	and	r24, r24
    23d4:	a9 f4       	brne	.+42     	; 0x2400 <main+0xd54>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    23d6:	80 91 3a 01 	lds	r24, 0x013A
    23da:	90 91 3b 01 	lds	r25, 0x013B
    23de:	fc 01       	movw	r30, r24
    23e0:	80 81       	ld	r24, Z
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	80 97       	sbiw	r24, 0x20	; 32
    23e8:	88 59       	subi	r24, 0x98	; 152
    23ea:	9f 4f       	sbci	r25, 0xFF	; 255
    23ec:	9b 83       	std	Y+3, r25	; 0x03
    23ee:	8a 83       	std	Y+2, r24	; 0x02
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	9b 81       	ldd	r25, Y+3	; 0x03
    23f4:	fc 01       	movw	r30, r24
    23f6:	14 91       	lpm	r17, Z+
    23f8:	1c 83       	std	Y+4, r17	; 0x04
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	80 93 3e 01 	sts	0x013E, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2400:	80 91 3e 01 	lds	r24, 0x013E
    2404:	88 23       	and	r24, r24
    2406:	09 f4       	brne	.+2      	; 0x240a <main+0xd5e>
    2408:	ce c0       	rjmp	.+412    	; 0x25a6 <main+0xefa>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    240a:	80 91 3e 01 	lds	r24, 0x013E
    240e:	80 38       	cpi	r24, 0x80	; 128
    2410:	29 f0       	breq	.+10     	; 0x241c <main+0xd70>
    2412:	80 91 3e 01 	lds	r24, 0x013E
    2416:	8f 3f       	cpi	r24, 0xFF	; 255
    2418:	09 f0       	breq	.+2      	; 0x241c <main+0xd70>
    241a:	79 c0       	rjmp	.+242    	; 0x250e <main+0xe62>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    241c:	80 91 3e 01 	lds	r24, 0x013E
    2420:	80 38       	cpi	r24, 0x80	; 128
    2422:	21 f5       	brne	.+72     	; 0x246c <main+0xdc0>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2424:	20 91 6f 01 	lds	r18, 0x016F
    2428:	30 91 70 01 	lds	r19, 0x0170
    242c:	c9 01       	movw	r24, r18
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	82 0f       	add	r24, r18
    2434:	93 1f       	adc	r25, r19
    2436:	9c 01       	movw	r18, r24
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	80 91 64 01 	lds	r24, 0x0164
    2440:	90 91 65 01 	lds	r25, 0x0165
    2444:	a0 91 66 01 	lds	r26, 0x0166
    2448:	b0 91 67 01 	lds	r27, 0x0167
    244c:	82 0f       	add	r24, r18
    244e:	93 1f       	adc	r25, r19
    2450:	a4 1f       	adc	r26, r20
    2452:	b5 1f       	adc	r27, r21
    2454:	80 93 ca 01 	sts	0x01CA, r24
    2458:	90 93 cb 01 	sts	0x01CB, r25
    245c:	a0 93 cc 01 	sts	0x01CC, r26
    2460:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAHDELAY;
    2464:	85 e0       	ldi	r24, 0x05	; 5
    2466:	80 93 c0 01 	sts	0x01C0, r24
    246a:	27 c0       	rjmp	.+78     	; 0x24ba <main+0xe0e>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    246c:	20 91 6f 01 	lds	r18, 0x016F
    2470:	30 91 70 01 	lds	r19, 0x0170
    2474:	c9 01       	movw	r24, r18
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	82 1b       	sub	r24, r18
    2484:	93 0b       	sbc	r25, r19
    2486:	9c 01       	movw	r18, r24
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	80 91 64 01 	lds	r24, 0x0164
    2490:	90 91 65 01 	lds	r25, 0x0165
    2494:	a0 91 66 01 	lds	r26, 0x0166
    2498:	b0 91 67 01 	lds	r27, 0x0167
    249c:	82 0f       	add	r24, r18
    249e:	93 1f       	adc	r25, r19
    24a0:	a4 1f       	adc	r26, r20
    24a2:	b5 1f       	adc	r27, r21
    24a4:	80 93 ca 01 	sts	0x01CA, r24
    24a8:	90 93 cb 01 	sts	0x01CB, r25
    24ac:	a0 93 cc 01 	sts	0x01CC, r26
    24b0:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAHDELAY;
    24b4:	85 e0       	ldi	r24, 0x05	; 5
    24b6:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    24ba:	80 91 3a 01 	lds	r24, 0x013A
    24be:	90 91 3b 01 	lds	r25, 0x013B
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	90 93 3b 01 	sts	0x013B, r25
    24c8:	80 93 3a 01 	sts	0x013A, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    24cc:	80 91 3a 01 	lds	r24, 0x013A
    24d0:	90 91 3b 01 	lds	r25, 0x013B
    24d4:	fc 01       	movw	r30, r24
    24d6:	80 81       	ld	r24, Z
    24d8:	88 23       	and	r24, r24
    24da:	19 f4       	brne	.+6      	; 0x24e2 <main+0xe36>
							cur_character = '\0';
    24dc:	10 92 3e 01 	sts	0x013E, r1
    24e0:	15 c0       	rjmp	.+42     	; 0x250c <main+0xe60>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    24e2:	80 91 3a 01 	lds	r24, 0x013A
    24e6:	90 91 3b 01 	lds	r25, 0x013B
    24ea:	fc 01       	movw	r30, r24
    24ec:	80 81       	ld	r24, Z
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	80 97       	sbiw	r24, 0x20	; 32
    24f4:	88 59       	subi	r24, 0x98	; 152
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	fc 01       	movw	r30, r24
    2502:	14 91       	lpm	r17, Z+
    2504:	1f 83       	std	Y+7, r17	; 0x07
    2506:	8f 81       	ldd	r24, Y+7	; 0x07
    2508:	80 93 3e 01 	sts	0x013E, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    250c:	4b c0       	rjmp	.+150    	; 0x25a4 <main+0xef8>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    250e:	80 91 3e 01 	lds	r24, 0x013E
    2512:	88 23       	and	r24, r24
    2514:	24 f5       	brge	.+72     	; 0x255e <main+0xeb2>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2516:	20 91 6f 01 	lds	r18, 0x016F
    251a:	30 91 70 01 	lds	r19, 0x0170
    251e:	c9 01       	movw	r24, r18
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	82 0f       	add	r24, r18
    2526:	93 1f       	adc	r25, r19
    2528:	9c 01       	movw	r18, r24
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	80 91 64 01 	lds	r24, 0x0164
    2532:	90 91 65 01 	lds	r25, 0x0165
    2536:	a0 91 66 01 	lds	r26, 0x0166
    253a:	b0 91 67 01 	lds	r27, 0x0167
    253e:	82 0f       	add	r24, r18
    2540:	93 1f       	adc	r25, r19
    2542:	a4 1f       	adc	r26, r20
    2544:	b5 1f       	adc	r27, r21
    2546:	80 93 ca 01 	sts	0x01CA, r24
    254a:	90 93 cb 01 	sts	0x01CB, r25
    254e:	a0 93 cc 01 	sts	0x01CC, r26
    2552:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAH;
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	80 93 c0 01 	sts	0x01C0, r24
    255c:	1e c0       	rjmp	.+60     	; 0x259a <main+0xeee>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    255e:	80 91 6f 01 	lds	r24, 0x016F
    2562:	90 91 70 01 	lds	r25, 0x0170
    2566:	9c 01       	movw	r18, r24
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	80 91 64 01 	lds	r24, 0x0164
    2570:	90 91 65 01 	lds	r25, 0x0165
    2574:	a0 91 66 01 	lds	r26, 0x0166
    2578:	b0 91 67 01 	lds	r27, 0x0167
    257c:	82 0f       	add	r24, r18
    257e:	93 1f       	adc	r25, r19
    2580:	a4 1f       	adc	r26, r20
    2582:	b5 1f       	adc	r27, r21
    2584:	80 93 ca 01 	sts	0x01CA, r24
    2588:	90 93 cb 01 	sts	0x01CB, r25
    258c:	a0 93 cc 01 	sts	0x01CC, r26
    2590:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DIT;
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    259a:	80 91 3e 01 	lds	r24, 0x013E
    259e:	88 0f       	add	r24, r24
    25a0:	80 93 3e 01 	sts	0x013E, r24
    25a4:	48 c0       	rjmp	.+144    	; 0x2636 <main+0xf8a>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    25a6:	80 91 dd 01 	lds	r24, 0x01DD
    25aa:	90 91 de 01 	lds	r25, 0x01DE
    25ae:	24 e2       	ldi	r18, 0x24	; 36
    25b0:	31 e0       	ldi	r19, 0x01	; 1
    25b2:	b9 01       	movw	r22, r18
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	0e 94 b2 1a 	call	0x3564	; 0x3564 <memcpy>
					cur_char_p = announce_buffer;
    25bc:	80 91 dd 01 	lds	r24, 0x01DD
    25c0:	90 91 de 01 	lds	r25, 0x01DE
    25c4:	90 93 3b 01 	sts	0x013B, r25
    25c8:	80 93 3a 01 	sts	0x013A, r24
					cur_character = '\0';
    25cc:	10 92 3e 01 	sts	0x013E, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    25d0:	80 91 c3 01 	lds	r24, 0x01C3
    25d4:	90 91 c4 01 	lds	r25, 0x01C4
    25d8:	90 93 b7 01 	sts	0x01B7, r25
    25dc:	80 93 b6 01 	sts	0x01B6, r24
					set_st_freq(st_freq);
    25e0:	80 91 b6 01 	lds	r24, 0x01B6
    25e4:	90 91 b7 01 	lds	r25, 0x01B7
    25e8:	cc 01       	movw	r24, r24
    25ea:	a0 e0       	ldi	r26, 0x00	; 0
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 2f 0b 	call	0x165e	; 0x165e <set_st_freq>

					wpm = prev_wpm;
    25f6:	80 91 e5 01 	lds	r24, 0x01E5
    25fa:	80 93 d8 01 	sts	0x01D8, r24
					set_wpm(wpm);
    25fe:	80 91 d8 01 	lds	r24, 0x01D8
    2602:	0e 94 ee 03 	call	0x7dc	; 0x7dc <set_wpm>

					cur_mode = prev_mode;
    2606:	80 91 b4 01 	lds	r24, 0x01B4
    260a:	80 93 9e 01 	sts	0x019E, r24
					cur_state = prev_state;
    260e:	80 91 6e 01 	lds	r24, 0x016E
    2612:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = prev_state_end;
    2616:	80 91 b0 01 	lds	r24, 0x01B0
    261a:	90 91 b1 01 	lds	r25, 0x01B1
    261e:	a0 91 b2 01 	lds	r26, 0x01B2
    2622:	b0 91 b3 01 	lds	r27, 0x01B3
    2626:	80 93 ca 01 	sts	0x01CA, r24
    262a:	90 93 cb 01 	sts	0x01CB, r25
    262e:	a0 93 cc 01 	sts	0x01CC, r26
    2632:	b0 93 cd 01 	sts	0x01CD, r27
				}
				break;
    2636:	5d c0       	rjmp	.+186    	; 0x26f2 <main+0x1046>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2638:	20 91 64 01 	lds	r18, 0x0164
    263c:	30 91 65 01 	lds	r19, 0x0165
    2640:	40 91 66 01 	lds	r20, 0x0166
    2644:	50 91 67 01 	lds	r21, 0x0167
    2648:	80 91 ca 01 	lds	r24, 0x01CA
    264c:	90 91 cb 01 	lds	r25, 0x01CB
    2650:	a0 91 cc 01 	lds	r26, 0x01CC
    2654:	b0 91 cd 01 	lds	r27, 0x01CD
    2658:	82 17       	cp	r24, r18
    265a:	93 07       	cpc	r25, r19
    265c:	a4 07       	cpc	r26, r20
    265e:	b5 07       	cpc	r27, r21
    2660:	f0 f4       	brcc	.+60     	; 0x269e <main+0xff2>
				{
					cur_state_end = cur_timer + dit_length;
    2662:	80 91 6f 01 	lds	r24, 0x016F
    2666:	90 91 70 01 	lds	r25, 0x0170
    266a:	9c 01       	movw	r18, r24
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	80 91 64 01 	lds	r24, 0x0164
    2674:	90 91 65 01 	lds	r25, 0x0165
    2678:	a0 91 66 01 	lds	r26, 0x0166
    267c:	b0 91 67 01 	lds	r27, 0x0167
    2680:	82 0f       	add	r24, r18
    2682:	93 1f       	adc	r25, r19
    2684:	a4 1f       	adc	r26, r20
    2686:	b5 1f       	adc	r27, r21
    2688:	80 93 ca 01 	sts	0x01CA, r24
    268c:	90 93 cb 01 	sts	0x01CB, r25
    2690:	a0 93 cc 01 	sts	0x01CC, r26
    2694:	b0 93 cd 01 	sts	0x01CD, r27
					cur_state = DITDELAY;
    2698:	84 e0       	ldi	r24, 0x04	; 4
    269a:	80 93 c0 01 	sts	0x01C0, r24
				}

				key_down = FALSE;
    269e:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = TRUE;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 37 01 	sts	0x0137, r24
				break;
    26ae:	21 c0       	rjmp	.+66     	; 0x26f2 <main+0x1046>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    26b0:	20 91 64 01 	lds	r18, 0x0164
    26b4:	30 91 65 01 	lds	r19, 0x0165
    26b8:	40 91 66 01 	lds	r20, 0x0166
    26bc:	50 91 67 01 	lds	r21, 0x0167
    26c0:	80 91 ca 01 	lds	r24, 0x01CA
    26c4:	90 91 cb 01 	lds	r25, 0x01CB
    26c8:	a0 91 cc 01 	lds	r26, 0x01CC
    26cc:	b0 91 cd 01 	lds	r27, 0x01CD
    26d0:	82 17       	cp	r24, r18
    26d2:	93 07       	cpc	r25, r19
    26d4:	a4 07       	cpc	r26, r20
    26d6:	b5 07       	cpc	r27, r21
    26d8:	18 f4       	brcc	.+6      	; 0x26e0 <main+0x1034>
					cur_state = IDLE;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	80 93 c0 01 	sts	0x01C0, r24

				key_down = FALSE;
    26e0:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    26e4:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	80 93 37 01 	sts	0x0137, r24
				break;
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <main+0x1046>

			default:
				break;
    26f0:	00 00       	nop
			}
			break;
    26f2:	9b c5       	rjmp	.+2870   	; 0x322a <main+0x1b7e>

		case TUNE:
			switch(cur_state)
    26f4:	80 91 c0 01 	lds	r24, 0x01C0
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	87 30       	cpi	r24, 0x07	; 7
    26fe:	91 05       	cpc	r25, r1
    2700:	09 f4       	brne	.+2      	; 0x2704 <main+0x1058>
    2702:	50 c0       	rjmp	.+160    	; 0x27a4 <main+0x10f8>
    2704:	88 30       	cpi	r24, 0x08	; 8
    2706:	91 05       	cpc	r25, r1
    2708:	09 f4       	brne	.+2      	; 0x270c <main+0x1060>
    270a:	8d c0       	rjmp	.+282    	; 0x2826 <main+0x117a>
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	91 05       	cpc	r25, r1
    2710:	09 f0       	breq	.+2      	; 0x2714 <main+0x1068>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    2712:	af c0       	rjmp	.+350    	; 0x2872 <main+0x11c6>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    2714:	80 91 64 01 	lds	r24, 0x0164
    2718:	90 91 65 01 	lds	r25, 0x0165
    271c:	a0 91 66 01 	lds	r26, 0x0166
    2720:	b0 91 67 01 	lds	r27, 0x0167
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	a1 1d       	adc	r26, r1
    2728:	b1 1d       	adc	r27, r1
    272a:	80 93 a4 01 	sts	0x01A4, r24
    272e:	90 93 a5 01 	sts	0x01A5, r25
    2732:	a0 93 a6 01 	sts	0x01A6, r26
    2736:	b0 93 a7 01 	sts	0x01A7, r27
				tx_end = UINT32_MAX;
    273a:	8f ef       	ldi	r24, 0xFF	; 255
    273c:	9f ef       	ldi	r25, 0xFF	; 255
    273e:	dc 01       	movw	r26, r24
    2740:	80 93 df 01 	sts	0x01DF, r24
    2744:	90 93 e0 01 	sts	0x01E0, r25
    2748:	a0 93 e1 01 	sts	0x01E1, r26
    274c:	b0 93 e2 01 	sts	0x01E2, r27
				cur_state_end = UINT32_MAX;
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	9f ef       	ldi	r25, 0xFF	; 255
    2754:	dc 01       	movw	r26, r24
    2756:	80 93 ca 01 	sts	0x01CA, r24
    275a:	90 93 cb 01 	sts	0x01CB, r25
    275e:	a0 93 cc 01 	sts	0x01CC, r26
    2762:	b0 93 cd 01 	sts	0x01CD, r27
				mute_start = cur_timer;
    2766:	80 91 64 01 	lds	r24, 0x0164
    276a:	90 91 65 01 	lds	r25, 0x0165
    276e:	a0 91 66 01 	lds	r26, 0x0166
    2772:	b0 91 67 01 	lds	r27, 0x0167
    2776:	80 93 d9 01 	sts	0x01D9, r24
    277a:	90 93 da 01 	sts	0x01DA, r25
    277e:	a0 93 db 01 	sts	0x01DB, r26
    2782:	b0 93 dc 01 	sts	0x01DC, r27
				mute_end = UINT32_MAX;
    2786:	8f ef       	ldi	r24, 0xFF	; 255
    2788:	9f ef       	ldi	r25, 0xFF	; 255
    278a:	dc 01       	movw	r26, r24
    278c:	80 93 ce 01 	sts	0x01CE, r24
    2790:	90 93 cf 01 	sts	0x01CF, r25
    2794:	a0 93 d0 01 	sts	0x01D0, r26
    2798:	b0 93 d1 01 	sts	0x01D1, r27

				cur_state = KEYDOWN;
    279c:	87 e0       	ldi	r24, 0x07	; 7
    279e:	80 93 c0 01 	sts	0x01C0, r24
				break;
    27a2:	67 c0       	rjmp	.+206    	; 0x2872 <main+0x11c6>

			case KEYDOWN:
				key_down = TRUE;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	80 93 38 01 	sts	0x0138, r24
				sidetone_on = TRUE;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	80 93 37 01 	sts	0x0137, r24

				if(ANYBUTTON)
    27b6:	80 91 d2 01 	lds	r24, 0x01D2
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	61 f0       	breq	.+24     	; 0x27d6 <main+0x112a>
    27be:	80 91 bc 01 	lds	r24, 0x01BC
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	41 f0       	breq	.+16     	; 0x27d6 <main+0x112a>
    27c6:	80 91 bf 01 	lds	r24, 0x01BF
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	21 f0       	breq	.+8      	; 0x27d6 <main+0x112a>
    27ce:	80 91 bd 01 	lds	r24, 0x01BD
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	39 f5       	brne	.+78     	; 0x2824 <main+0x1178>
				{
					cur_state = ENDKEYDOWN;
    27d6:	88 e0       	ldi	r24, 0x08	; 8
    27d8:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    27dc:	80 91 64 01 	lds	r24, 0x0164
    27e0:	90 91 65 01 	lds	r25, 0x0165
    27e4:	a0 91 66 01 	lds	r26, 0x0166
    27e8:	b0 91 67 01 	lds	r27, 0x0167
    27ec:	8c 59       	subi	r24, 0x9C	; 156
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	af 4f       	sbci	r26, 0xFF	; 255
    27f2:	bf 4f       	sbci	r27, 0xFF	; 255
    27f4:	80 93 ca 01 	sts	0x01CA, r24
    27f8:	90 93 cb 01 	sts	0x01CB, r25
    27fc:	a0 93 cc 01 	sts	0x01CC, r26
    2800:	b0 93 cd 01 	sts	0x01CD, r27
					tx_end = cur_timer;
    2804:	80 91 64 01 	lds	r24, 0x0164
    2808:	90 91 65 01 	lds	r25, 0x0165
    280c:	a0 91 66 01 	lds	r26, 0x0166
    2810:	b0 91 67 01 	lds	r27, 0x0167
    2814:	80 93 df 01 	sts	0x01DF, r24
    2818:	90 93 e0 01 	sts	0x01E0, r25
    281c:	a0 93 e1 01 	sts	0x01E1, r26
    2820:	b0 93 e2 01 	sts	0x01E2, r27
				}
				break;
    2824:	26 c0       	rjmp	.+76     	; 0x2872 <main+0x11c6>

			case ENDKEYDOWN:
				key_down = FALSE;
    2826:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    282a:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	80 93 37 01 	sts	0x0137, r24

				if(cur_timer >= cur_state_end)
    2834:	20 91 64 01 	lds	r18, 0x0164
    2838:	30 91 65 01 	lds	r19, 0x0165
    283c:	40 91 66 01 	lds	r20, 0x0166
    2840:	50 91 67 01 	lds	r21, 0x0167
    2844:	80 91 ca 01 	lds	r24, 0x01CA
    2848:	90 91 cb 01 	lds	r25, 0x01CB
    284c:	a0 91 cc 01 	lds	r26, 0x01CC
    2850:	b0 91 cd 01 	lds	r27, 0x01CD
    2854:	28 17       	cp	r18, r24
    2856:	39 07       	cpc	r19, r25
    2858:	4a 07       	cpc	r20, r26
    285a:	5b 07       	cpc	r21, r27
    285c:	48 f0       	brcs	.+18     	; 0x2870 <main+0x11c4>
				{
					mute_on = FALSE;
    285e:	10 92 37 01 	sts	0x0137, r1
					cur_state = IDLE;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	80 93 c0 01 	sts	0x01C0, r24
					cur_mode = default_mode;
    2868:	80 91 69 01 	lds	r24, 0x0169
    286c:	80 93 9e 01 	sts	0x019E, r24
				}
				break;
    2870:	00 00       	nop

			default:
				break;
			}
			break;
    2872:	db c4       	rjmp	.+2486   	; 0x322a <main+0x1b7e>

		case MENU:
			switch(cur_state)
    2874:	80 91 c0 01 	lds	r24, 0x01C0
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	89 30       	cpi	r24, 0x09	; 9
    287e:	91 05       	cpc	r25, r1
    2880:	91 f0       	breq	.+36     	; 0x28a6 <main+0x11fa>
    2882:	8a 30       	cpi	r24, 0x0A	; 10
    2884:	91 05       	cpc	r25, r1
    2886:	09 f4       	brne	.+2      	; 0x288a <main+0x11de>
    2888:	58 c0       	rjmp	.+176    	; 0x293a <main+0x128e>
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	91 05       	cpc	r25, r1
    288e:	09 f0       	breq	.+2      	; 0x2892 <main+0x11e6>
    2890:	98 c1       	rjmp	.+816    	; 0x2bc2 <main+0x1516>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	90 93 40 01 	sts	0x0140, r25
    289a:	80 93 3f 01 	sts	0x013F, r24
				cur_state = MENUANNOUNCE;
    289e:	89 e0       	ldi	r24, 0x09	; 9
    28a0:	80 93 c0 01 	sts	0x01C0, r24
				break;
    28a4:	96 c1       	rjmp	.+812    	; 0x2bd2 <main+0x1526>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 7f 19 	call	0x32fe	; 0x32fe <malloc>
    28ae:	90 93 42 01 	sts	0x0142, r25
    28b2:	80 93 41 01 	sts	0x0141, r24
				memset(cur_menu, '\0', 2);
    28b6:	80 91 41 01 	lds	r24, 0x0141
    28ba:	90 91 42 01 	lds	r25, 0x0142
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	42 e0       	ldi	r20, 0x02	; 2
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	0e 94 bb 1a 	call	0x3576	; 0x3576 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    28ca:	80 91 41 01 	lds	r24, 0x0141
    28ce:	90 91 42 01 	lds	r25, 0x0142
    28d2:	20 91 3f 01 	lds	r18, 0x013F
    28d6:	30 91 40 01 	lds	r19, 0x0140
    28da:	b9 01       	movw	r22, r18
    28dc:	41 e0       	ldi	r20, 0x01	; 1
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	0e 94 b2 1a 	call	0x3564	; 0x3564 <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    28e4:	80 91 64 01 	lds	r24, 0x0164
    28e8:	90 91 65 01 	lds	r25, 0x0165
    28ec:	a0 91 66 01 	lds	r26, 0x0166
    28f0:	b0 91 67 01 	lds	r27, 0x0167
    28f4:	80 56       	subi	r24, 0x60	; 96
    28f6:	90 4f       	sbci	r25, 0xF0	; 240
    28f8:	af 4f       	sbci	r26, 0xFF	; 255
    28fa:	bf 4f       	sbci	r27, 0xFF	; 255
    28fc:	80 93 ca 01 	sts	0x01CA, r24
    2900:	90 93 cb 01 	sts	0x01CB, r25
    2904:	a0 93 cc 01 	sts	0x01CC, r26
    2908:	b0 93 cd 01 	sts	0x01CD, r27

				// Set next state
				cur_state = MENUINPUT;
    290c:	8a e0       	ldi	r24, 0x0A	; 10
    290e:	80 93 c0 01 	sts	0x01C0, r24

				// Announce the menu item
				announce(cur_menu, st_freq, wpm);
    2912:	80 91 41 01 	lds	r24, 0x0141
    2916:	90 91 42 01 	lds	r25, 0x0142
    291a:	20 91 b6 01 	lds	r18, 0x01B6
    291e:	30 91 b7 01 	lds	r19, 0x01B7
    2922:	40 91 d8 01 	lds	r20, 0x01D8
    2926:	b9 01       	movw	r22, r18
    2928:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>

				free(cur_menu);
    292c:	80 91 41 01 	lds	r24, 0x0141
    2930:	90 91 42 01 	lds	r25, 0x0142
    2934:	0e 94 19 1a 	call	0x3432	; 0x3432 <free>
				break;
    2938:	4c c1       	rjmp	.+664    	; 0x2bd2 <main+0x1526>

			case MENUINPUT:
				text_buffer = malloc(20);
    293a:	84 e1       	ldi	r24, 0x14	; 20
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <malloc>
    2942:	90 93 3d 01 	sts	0x013D, r25
    2946:	80 93 3c 01 	sts	0x013C, r24
				memset(text_buffer, '\0', 20);
    294a:	80 91 3c 01 	lds	r24, 0x013C
    294e:	90 91 3d 01 	lds	r25, 0x013D
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	44 e1       	ldi	r20, 0x14	; 20
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    295e:	20 91 64 01 	lds	r18, 0x0164
    2962:	30 91 65 01 	lds	r19, 0x0165
    2966:	40 91 66 01 	lds	r20, 0x0166
    296a:	50 91 67 01 	lds	r21, 0x0167
    296e:	80 91 ca 01 	lds	r24, 0x01CA
    2972:	90 91 cb 01 	lds	r25, 0x01CB
    2976:	a0 91 cc 01 	lds	r26, 0x01CC
    297a:	b0 91 cd 01 	lds	r27, 0x01CD
    297e:	28 17       	cp	r18, r24
    2980:	39 07       	cpc	r19, r25
    2982:	4a 07       	cpc	r20, r26
    2984:	5b 07       	cpc	r21, r27
    2986:	08 f0       	brcs	.+2      	; 0x298a <main+0x12de>
    2988:	03 c1       	rjmp	.+518    	; 0x2b90 <main+0x14e4>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    298a:	80 91 bf 01 	lds	r24, 0x01BF
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	49 f5       	brne	.+82     	; 0x29e4 <main+0x1338>
					{
						debounce(TRUE);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>
						cur_menu_p++;
    2998:	80 91 3f 01 	lds	r24, 0x013F
    299c:	90 91 40 01 	lds	r25, 0x0140
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	90 93 40 01 	sts	0x0140, r25
    29a6:	80 93 3f 01 	sts	0x013F, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    29aa:	80 91 3f 01 	lds	r24, 0x013F
    29ae:	90 91 40 01 	lds	r25, 0x0140
    29b2:	fc 01       	movw	r30, r24
    29b4:	80 81       	ld	r24, Z
    29b6:	88 23       	and	r24, r24
    29b8:	89 f4       	brne	.+34     	; 0x29dc <main+0x1330>
						{
							cur_state = IDLE;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    29c0:	80 91 69 01 	lds	r24, 0x0169
    29c4:	80 93 9e 01 	sts	0x019E, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
    29c8:	20 91 d8 01 	lds	r18, 0x01D8
    29cc:	85 e2       	ldi	r24, 0x25	; 37
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	60 e9       	ldi	r22, 0x90	; 144
    29d2:	71 e0       	ldi	r23, 0x01	; 1
    29d4:	42 2f       	mov	r20, r18
    29d6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    29da:	ec c0       	rjmp	.+472    	; 0x2bb4 <main+0x1508>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
						}
						else
							cur_state = MENUANNOUNCE;
    29dc:	89 e0       	ldi	r24, 0x09	; 9
    29de:	80 93 c0 01 	sts	0x01C0, r24
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    29e2:	e8 c0       	rjmp	.+464    	; 0x2bb4 <main+0x1508>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    29e4:	80 91 bd 01 	lds	r24, 0x01BD
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	09 f0       	breq	.+2      	; 0x29ee <main+0x1342>
    29ec:	e2 c0       	rjmp	.+452    	; 0x2bb2 <main+0x1506>
					{
						// need to clear the button buffer
						debounce(TRUE);
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	0e 94 06 04 	call	0x80c	; 0x80c <debounce>

						switch(*cur_menu_p)
    29f4:	80 91 3f 01 	lds	r24, 0x013F
    29f8:	90 91 40 01 	lds	r25, 0x0140
    29fc:	fc 01       	movw	r30, r24
    29fe:	80 81       	ld	r24, Z
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	83 35       	cpi	r24, 0x53	; 83
    2a06:	91 05       	cpc	r25, r1
    2a08:	a1 f0       	breq	.+40     	; 0x2a32 <main+0x1386>
    2a0a:	84 35       	cpi	r24, 0x54	; 84
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	4c f4       	brge	.+18     	; 0x2a22 <main+0x1376>
    2a10:	8b 34       	cpi	r24, 0x4B	; 75
    2a12:	91 05       	cpc	r25, r1
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <main+0x136c>
    2a16:	83 c0       	rjmp	.+262    	; 0x2b1e <main+0x1472>
    2a18:	82 35       	cpi	r24, 0x52	; 82
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <main+0x1374>
    2a1e:	64 c0       	rjmp	.+200    	; 0x2ae8 <main+0x143c>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2a20:	c9 c0       	rjmp	.+402    	; 0x2bb4 <main+0x1508>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    2a22:	86 35       	cpi	r24, 0x56	; 86
    2a24:	91 05       	cpc	r25, r1
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <main+0x137e>
    2a28:	70 c0       	rjmp	.+224    	; 0x2b0a <main+0x145e>
    2a2a:	87 35       	cpi	r24, 0x57	; 87
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	21 f1       	breq	.+72     	; 0x2a78 <main+0x13cc>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2a30:	c1 c0       	rjmp	.+386    	; 0x2bb4 <main+0x1508>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    2a32:	80 91 64 01 	lds	r24, 0x0164
    2a36:	90 91 65 01 	lds	r25, 0x0165
    2a3a:	a0 91 66 01 	lds	r26, 0x0166
    2a3e:	b0 91 67 01 	lds	r27, 0x0167
    2a42:	80 56       	subi	r24, 0x60	; 96
    2a44:	90 4f       	sbci	r25, 0xF0	; 240
    2a46:	af 4f       	sbci	r26, 0xFF	; 255
    2a48:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4a:	80 93 ca 01 	sts	0x01CA, r24
    2a4e:	90 93 cb 01 	sts	0x01CB, r25
    2a52:	a0 93 cc 01 	sts	0x01CC, r26
    2a56:	b0 93 cd 01 	sts	0x01CD, r27
							cur_mode = SETWPM;
    2a5a:	85 e0       	ldi	r24, 0x05	; 5
    2a5c:	80 93 9e 01 	sts	0x019E, r24

							announce("R", st_freq, wpm);
    2a60:	20 91 b6 01 	lds	r18, 0x01B6
    2a64:	30 91 b7 01 	lds	r19, 0x01B7
    2a68:	40 91 d8 01 	lds	r20, 0x01D8
    2a6c:	87 e2       	ldi	r24, 0x27	; 39
    2a6e:	91 e0       	ldi	r25, 0x01	; 1
    2a70:	b9 01       	movw	r22, r18
    2a72:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
							break;
    2a76:	9e c0       	rjmp	.+316    	; 0x2bb4 <main+0x1508>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    2a7e:	80 91 69 01 	lds	r24, 0x0169
    2a82:	80 93 9e 01 	sts	0x019E, r24

							sprintf(text_buffer, "%d", wpm);
    2a86:	40 91 3c 01 	lds	r20, 0x013C
    2a8a:	50 91 3d 01 	lds	r21, 0x013D
    2a8e:	80 91 d8 01 	lds	r24, 0x01D8
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <main+0x13ec>
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <main+0x13ee>
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <main+0x13f0>
    2a9c:	8d b7       	in	r24, 0x3d	; 61
    2a9e:	9e b7       	in	r25, 0x3e	; 62
    2aa0:	01 96       	adiw	r24, 0x01	; 1
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	51 83       	std	Z+1, r21	; 0x01
    2aa6:	40 83       	st	Z, r20
    2aa8:	49 e2       	ldi	r20, 0x29	; 41
    2aaa:	51 e0       	ldi	r21, 0x01	; 1
    2aac:	fc 01       	movw	r30, r24
    2aae:	53 83       	std	Z+3, r21	; 0x03
    2ab0:	42 83       	std	Z+2, r20	; 0x02
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	35 83       	std	Z+5, r19	; 0x05
    2ab6:	24 83       	std	Z+4, r18	; 0x04
    2ab8:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sprintf>
    2abc:	8d b7       	in	r24, 0x3d	; 61
    2abe:	9e b7       	in	r25, 0x3e	; 62
    2ac0:	06 96       	adiw	r24, 0x06	; 6
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	9e bf       	out	0x3e, r25	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq, wpm);
    2acc:	80 91 3c 01 	lds	r24, 0x013C
    2ad0:	90 91 3d 01 	lds	r25, 0x013D
    2ad4:	20 91 b6 01 	lds	r18, 0x01B6
    2ad8:	30 91 b7 01 	lds	r19, 0x01B7
    2adc:	40 91 d8 01 	lds	r20, 0x01D8
    2ae0:	b9 01       	movw	r22, r18
    2ae2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
							break;
    2ae6:	66 c0       	rjmp	.+204    	; 0x2bb4 <main+0x1508>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    2ae8:	10 92 c0 01 	sts	0x01C0, r1
							cur_mode = RECORD;
    2aec:	87 e0       	ldi	r24, 0x07	; 7
    2aee:	80 93 9e 01 	sts	0x019E, r24

							announce("R", st_freq, wpm);
    2af2:	20 91 b6 01 	lds	r18, 0x01B6
    2af6:	30 91 b7 01 	lds	r19, 0x01B7
    2afa:	40 91 d8 01 	lds	r20, 0x01D8
    2afe:	87 e2       	ldi	r24, 0x27	; 39
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	b9 01       	movw	r22, r18
    2b04:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
							break;
    2b08:	55 c0       	rjmp	.+170    	; 0x2bb4 <main+0x1508>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    2b10:	80 91 69 01 	lds	r24, 0x0169
    2b14:	80 93 9e 01 	sts	0x019E, r24

							read_voltage();
    2b18:	0e 94 c4 06 	call	0xd88	; 0xd88 <read_voltage>
							break;
    2b1c:	4b c0       	rjmp	.+150    	; 0x2bb4 <main+0x1508>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    2b1e:	80 91 69 01 	lds	r24, 0x0169
    2b22:	88 23       	and	r24, r24
    2b24:	d9 f4       	brne	.+54     	; 0x2b5c <main+0x14b0>
							{
								default_mode = SK;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	80 93 69 01 	sts	0x0169, r24
								cur_state = IDLE;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	80 93 c0 01 	sts	0x01C0, r24
								cur_mode = default_mode;
    2b32:	80 91 69 01 	lds	r24, 0x0169
    2b36:	80 93 9e 01 	sts	0x019E, r24
								eeprom_write_byte(&ee_keyer, FALSE);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <__eewr_byte_m168>

								announce("S", st_freq, wpm);
    2b44:	20 91 b6 01 	lds	r18, 0x01B6
    2b48:	30 91 b7 01 	lds	r19, 0x01B7
    2b4c:	40 91 d8 01 	lds	r20, 0x01D8
    2b50:	8b e1       	ldi	r24, 0x1B	; 27
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	b9 01       	movw	r22, r18
    2b56:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
								cur_mode = default_mode;
								eeprom_write_byte(&ee_keyer, TRUE);

								announce("K", st_freq, wpm);
							}
							break;
    2b5a:	2c c0       	rjmp	.+88     	; 0x2bb4 <main+0x1508>

								announce("S", st_freq, wpm);
							}
							else
							{
								default_mode = KEYER;
    2b5c:	10 92 69 01 	sts	0x0169, r1
								cur_state = IDLE;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	80 93 c0 01 	sts	0x01C0, r24
								cur_mode = default_mode;
    2b66:	80 91 69 01 	lds	r24, 0x0169
    2b6a:	80 93 9e 01 	sts	0x019E, r24
								eeprom_write_byte(&ee_keyer, TRUE);
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <__eewr_byte_m168>

								announce("K", st_freq, wpm);
    2b78:	20 91 b6 01 	lds	r18, 0x01B6
    2b7c:	30 91 b7 01 	lds	r19, 0x01B7
    2b80:	40 91 d8 01 	lds	r20, 0x01D8
    2b84:	8c e2       	ldi	r24, 0x2C	; 44
    2b86:	91 e0       	ldi	r25, 0x01	; 1
    2b88:	b9 01       	movw	r22, r18
    2b8a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
							}
							break;
    2b8e:	12 c0       	rjmp	.+36     	; 0x2bb4 <main+0x1508>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	80 93 c0 01 	sts	0x01C0, r24
					cur_mode = default_mode;
    2b96:	80 91 69 01 	lds	r24, 0x0169
    2b9a:	80 93 9e 01 	sts	0x019E, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    2b9e:	20 91 d8 01 	lds	r18, 0x01D8
    2ba2:	85 e2       	ldi	r24, 0x25	; 37
    2ba4:	91 e0       	ldi	r25, 0x01	; 1
    2ba6:	60 e9       	ldi	r22, 0x90	; 144
    2ba8:	71 e0       	ldi	r23, 0x01	; 1
    2baa:	42 2f       	mov	r20, r18
    2bac:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
    2bb0:	01 c0       	rjmp	.+2      	; 0x2bb4 <main+0x1508>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2bb2:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
				}

				free(text_buffer);
    2bb4:	80 91 3c 01 	lds	r24, 0x013C
    2bb8:	90 91 3d 01 	lds	r25, 0x013D
    2bbc:	0e 94 19 1a 	call	0x3432	; 0x3432 <free>
				break;
    2bc0:	08 c0       	rjmp	.+16     	; 0x2bd2 <main+0x1526>

			default:
				cur_state = IDLE;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	80 93 c0 01 	sts	0x01C0, r24
				cur_mode = default_mode;
    2bc8:	80 91 69 01 	lds	r24, 0x0169
    2bcc:	80 93 9e 01 	sts	0x019E, r24
				break;
    2bd0:	00 00       	nop
			}
			break;
    2bd2:	2b c3       	rjmp	.+1622   	; 0x322a <main+0x1b7e>

		case SETWPM:
			if(cur_timer < cur_state_end)
    2bd4:	20 91 64 01 	lds	r18, 0x0164
    2bd8:	30 91 65 01 	lds	r19, 0x0165
    2bdc:	40 91 66 01 	lds	r20, 0x0166
    2be0:	50 91 67 01 	lds	r21, 0x0167
    2be4:	80 91 ca 01 	lds	r24, 0x01CA
    2be8:	90 91 cb 01 	lds	r25, 0x01CB
    2bec:	a0 91 cc 01 	lds	r26, 0x01CC
    2bf0:	b0 91 cd 01 	lds	r27, 0x01CD
    2bf4:	28 17       	cp	r18, r24
    2bf6:	39 07       	cpc	r19, r25
    2bf8:	4a 07       	cpc	r20, r26
    2bfa:	5b 07       	cpc	r21, r27
    2bfc:	08 f0       	brcs	.+2      	; 0x2c00 <main+0x1554>
    2bfe:	63 c0       	rjmp	.+198    	; 0x2cc6 <main+0x161a>
			{
				if(cmd_btn == PRESS)
    2c00:	80 91 bf 01 	lds	r24, 0x01BF
    2c04:	81 30       	cpi	r24, 0x01	; 1
    2c06:	69 f5       	brne	.+90     	; 0x2c62 <main+0x15b6>
				{
					if(wpm < MAX_WPM)
    2c08:	80 91 d8 01 	lds	r24, 0x01D8
    2c0c:	88 32       	cpi	r24, 0x28	; 40
    2c0e:	28 f4       	brcc	.+10     	; 0x2c1a <main+0x156e>
						wpm++;
    2c10:	80 91 d8 01 	lds	r24, 0x01D8
    2c14:	8f 5f       	subi	r24, 0xFF	; 255
    2c16:	80 93 d8 01 	sts	0x01D8, r24
					set_wpm(wpm);
    2c1a:	80 91 d8 01 	lds	r24, 0x01D8
    2c1e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2c22:	80 91 64 01 	lds	r24, 0x0164
    2c26:	90 91 65 01 	lds	r25, 0x0165
    2c2a:	a0 91 66 01 	lds	r26, 0x0166
    2c2e:	b0 91 67 01 	lds	r27, 0x0167
    2c32:	80 56       	subi	r24, 0x60	; 96
    2c34:	90 4f       	sbci	r25, 0xF0	; 240
    2c36:	af 4f       	sbci	r26, 0xFF	; 255
    2c38:	bf 4f       	sbci	r27, 0xFF	; 255
    2c3a:	80 93 ca 01 	sts	0x01CA, r24
    2c3e:	90 93 cb 01 	sts	0x01CB, r25
    2c42:	a0 93 cc 01 	sts	0x01CC, r26
    2c46:	b0 93 cd 01 	sts	0x01CD, r27
					announce("I", st_freq, wpm);
    2c4a:	20 91 b6 01 	lds	r18, 0x01B6
    2c4e:	30 91 b7 01 	lds	r19, 0x01B7
    2c52:	40 91 d8 01 	lds	r20, 0x01D8
    2c56:	8e e2       	ldi	r24, 0x2E	; 46
    2c58:	91 e0       	ldi	r25, 0x01	; 1
    2c5a:	b9 01       	movw	r22, r18
    2c5c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
    2c60:	70 c0       	rjmp	.+224    	; 0x2d42 <main+0x1696>
				}
				else if(msg_btn == PRESS)
    2c62:	80 91 bd 01 	lds	r24, 0x01BD
    2c66:	81 30       	cpi	r24, 0x01	; 1
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <main+0x15c0>
    2c6a:	6b c0       	rjmp	.+214    	; 0x2d42 <main+0x1696>
				{
					if(wpm > MIN_WPM)
    2c6c:	80 91 d8 01 	lds	r24, 0x01D8
    2c70:	86 30       	cpi	r24, 0x06	; 6
    2c72:	28 f0       	brcs	.+10     	; 0x2c7e <main+0x15d2>
						wpm--;
    2c74:	80 91 d8 01 	lds	r24, 0x01D8
    2c78:	81 50       	subi	r24, 0x01	; 1
    2c7a:	80 93 d8 01 	sts	0x01D8, r24
					set_wpm(wpm);
    2c7e:	80 91 d8 01 	lds	r24, 0x01D8
    2c82:	0e 94 ee 03 	call	0x7dc	; 0x7dc <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2c86:	80 91 64 01 	lds	r24, 0x0164
    2c8a:	90 91 65 01 	lds	r25, 0x0165
    2c8e:	a0 91 66 01 	lds	r26, 0x0166
    2c92:	b0 91 67 01 	lds	r27, 0x0167
    2c96:	80 56       	subi	r24, 0x60	; 96
    2c98:	90 4f       	sbci	r25, 0xF0	; 240
    2c9a:	af 4f       	sbci	r26, 0xFF	; 255
    2c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9e:	80 93 ca 01 	sts	0x01CA, r24
    2ca2:	90 93 cb 01 	sts	0x01CB, r25
    2ca6:	a0 93 cc 01 	sts	0x01CC, r26
    2caa:	b0 93 cd 01 	sts	0x01CD, r27
					announce("I", st_freq, wpm);
    2cae:	20 91 b6 01 	lds	r18, 0x01B6
    2cb2:	30 91 b7 01 	lds	r19, 0x01B7
    2cb6:	40 91 d8 01 	lds	r20, 0x01D8
    2cba:	8e e2       	ldi	r24, 0x2E	; 46
    2cbc:	91 e0       	ldi	r25, 0x01	; 1
    2cbe:	b9 01       	movw	r22, r18
    2cc0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
    2cc4:	3e c0       	rjmp	.+124    	; 0x2d42 <main+0x1696>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_write_byte(&ee_wpm, wpm);
    2cc6:	20 91 d8 01 	lds	r18, 0x01D8
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	62 2f       	mov	r22, r18
    2cd0:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <__eewr_byte_m168>

				cur_state = IDLE;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	80 93 c0 01 	sts	0x01C0, r24
				cur_mode = default_mode;
    2cda:	80 91 69 01 	lds	r24, 0x0169
    2cde:	80 93 9e 01 	sts	0x019E, r24

				sprintf(text_buffer, "%d", wpm);
    2ce2:	40 91 3c 01 	lds	r20, 0x013C
    2ce6:	50 91 3d 01 	lds	r21, 0x013D
    2cea:	80 91 d8 01 	lds	r24, 0x01D8
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <main+0x1648>
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <main+0x164a>
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <main+0x164c>
    2cf8:	8d b7       	in	r24, 0x3d	; 61
    2cfa:	9e b7       	in	r25, 0x3e	; 62
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	fc 01       	movw	r30, r24
    2d00:	51 83       	std	Z+1, r21	; 0x01
    2d02:	40 83       	st	Z, r20
    2d04:	49 e2       	ldi	r20, 0x29	; 41
    2d06:	51 e0       	ldi	r21, 0x01	; 1
    2d08:	fc 01       	movw	r30, r24
    2d0a:	53 83       	std	Z+3, r21	; 0x03
    2d0c:	42 83       	std	Z+2, r20	; 0x02
    2d0e:	fc 01       	movw	r30, r24
    2d10:	35 83       	std	Z+5, r19	; 0x05
    2d12:	24 83       	std	Z+4, r18	; 0x04
    2d14:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <sprintf>
    2d18:	8d b7       	in	r24, 0x3d	; 61
    2d1a:	9e b7       	in	r25, 0x3e	; 62
    2d1c:	06 96       	adiw	r24, 0x06	; 6
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	9e bf       	out	0x3e, r25	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq, wpm);
    2d28:	80 91 3c 01 	lds	r24, 0x013C
    2d2c:	90 91 3d 01 	lds	r25, 0x013D
    2d30:	20 91 b6 01 	lds	r18, 0x01B6
    2d34:	30 91 b7 01 	lds	r19, 0x01B7
    2d38:	40 91 d8 01 	lds	r20, 0x01D8
    2d3c:	b9 01       	movw	r22, r18
    2d3e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <announce>
			}
			break;
    2d42:	73 c2       	rjmp	.+1254   	; 0x322a <main+0x1b7e>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    2d44:	80 91 d2 01 	lds	r24, 0x01D2
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	61 f0       	breq	.+24     	; 0x2d64 <main+0x16b8>
    2d4c:	80 91 bc 01 	lds	r24, 0x01BC
    2d50:	81 30       	cpi	r24, 0x01	; 1
    2d52:	41 f0       	breq	.+16     	; 0x2d64 <main+0x16b8>
    2d54:	80 91 bf 01 	lds	r24, 0x01BF
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	21 f0       	breq	.+8      	; 0x2d64 <main+0x16b8>
    2d5c:	80 91 bd 01 	lds	r24, 0x01BD
    2d60:	81 30       	cpi	r24, 0x01	; 1
    2d62:	e9 f5       	brne	.+122    	; 0x2dde <main+0x1732>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    2d64:	80 91 dd 01 	lds	r24, 0x01DD
    2d68:	90 91 de 01 	lds	r25, 0x01DE
    2d6c:	24 e2       	ldi	r18, 0x24	; 36
    2d6e:	31 e0       	ldi	r19, 0x01	; 1
    2d70:	b9 01       	movw	r22, r18
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	0e 94 b2 1a 	call	0x3564	; 0x3564 <memcpy>
				cur_char_p = announce_buffer;
    2d7a:	80 91 dd 01 	lds	r24, 0x01DD
    2d7e:	90 91 de 01 	lds	r25, 0x01DE
    2d82:	90 93 3b 01 	sts	0x013B, r25
    2d86:	80 93 3a 01 	sts	0x013A, r24
				cur_character = '\0';
    2d8a:	10 92 3e 01 	sts	0x013E, r1

				// Set back into previous mode
				mute_end = cur_timer;
    2d8e:	80 91 64 01 	lds	r24, 0x0164
    2d92:	90 91 65 01 	lds	r25, 0x0165
    2d96:	a0 91 66 01 	lds	r26, 0x0166
    2d9a:	b0 91 67 01 	lds	r27, 0x0167
    2d9e:	80 93 ce 01 	sts	0x01CE, r24
    2da2:	90 93 cf 01 	sts	0x01CF, r25
    2da6:	a0 93 d0 01 	sts	0x01D0, r26
    2daa:	b0 93 d1 01 	sts	0x01D1, r27
				cur_mode = prev_mode;
    2dae:	80 91 b4 01 	lds	r24, 0x01B4
    2db2:	80 93 9e 01 	sts	0x019E, r24
				cur_state = prev_state;
    2db6:	80 91 6e 01 	lds	r24, 0x016E
    2dba:	80 93 c0 01 	sts	0x01C0, r24
				cur_state_end = prev_state_end;
    2dbe:	80 91 b0 01 	lds	r24, 0x01B0
    2dc2:	90 91 b1 01 	lds	r25, 0x01B1
    2dc6:	a0 91 b2 01 	lds	r26, 0x01B2
    2dca:	b0 91 b3 01 	lds	r27, 0x01B3
    2dce:	80 93 ca 01 	sts	0x01CA, r24
    2dd2:	90 93 cb 01 	sts	0x01CB, r25
    2dd6:	a0 93 cc 01 	sts	0x01CC, r26
    2dda:	b0 93 cd 01 	sts	0x01CD, r27
			}

			switch(cur_state)
    2dde:	80 91 c0 01 	lds	r24, 0x01C0
    2de2:	88 2f       	mov	r24, r24
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	84 30       	cpi	r24, 0x04	; 4
    2de8:	91 05       	cpc	r25, r1
    2dea:	44 f4       	brge	.+16     	; 0x2dfc <main+0x1750>
    2dec:	82 30       	cpi	r24, 0x02	; 2
    2dee:	91 05       	cpc	r25, r1
    2df0:	0c f0       	brlt	.+2      	; 0x2df4 <main+0x1748>
    2df2:	bb c1       	rjmp	.+886    	; 0x316a <main+0x1abe>
    2df4:	81 30       	cpi	r24, 0x01	; 1
    2df6:	91 05       	cpc	r25, r1
    2df8:	31 f0       	breq	.+12     	; 0x2e06 <main+0x175a>
    2dfa:	14 c2       	rjmp	.+1064   	; 0x3224 <main+0x1b78>
    2dfc:	87 30       	cpi	r24, 0x07	; 7
    2dfe:	91 05       	cpc	r25, r1
    2e00:	0c f0       	brlt	.+2      	; 0x2e04 <main+0x1758>
    2e02:	10 c2       	rjmp	.+1056   	; 0x3224 <main+0x1b78>
    2e04:	ef c1       	rjmp	.+990    	; 0x31e4 <main+0x1b38>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2e06:	20 91 3a 01 	lds	r18, 0x013A
    2e0a:	30 91 3b 01 	lds	r19, 0x013B
    2e0e:	80 91 dd 01 	lds	r24, 0x01DD
    2e12:	90 91 de 01 	lds	r25, 0x01DE
    2e16:	28 17       	cp	r18, r24
    2e18:	39 07       	cpc	r19, r25
    2e1a:	c9 f4       	brne	.+50     	; 0x2e4e <main+0x17a2>
    2e1c:	80 91 3e 01 	lds	r24, 0x013E
    2e20:	88 23       	and	r24, r24
    2e22:	a9 f4       	brne	.+42     	; 0x2e4e <main+0x17a2>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2e24:	80 91 3a 01 	lds	r24, 0x013A
    2e28:	90 91 3b 01 	lds	r25, 0x013B
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	80 81       	ld	r24, Z
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	80 97       	sbiw	r24, 0x20	; 32
    2e36:	88 59       	subi	r24, 0x98	; 152
    2e38:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3a:	99 87       	std	Y+9, r25	; 0x09
    2e3c:	88 87       	std	Y+8, r24	; 0x08
    2e3e:	88 85       	ldd	r24, Y+8	; 0x08
    2e40:	99 85       	ldd	r25, Y+9	; 0x09
    2e42:	fc 01       	movw	r30, r24
    2e44:	14 91       	lpm	r17, Z+
    2e46:	1a 87       	std	Y+10, r17	; 0x0a
    2e48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e4a:	80 93 3e 01 	sts	0x013E, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2e4e:	80 91 3e 01 	lds	r24, 0x013E
    2e52:	88 23       	and	r24, r24
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <main+0x17ac>
    2e56:	4b c1       	rjmp	.+662    	; 0x30ee <main+0x1a42>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2e58:	80 91 3e 01 	lds	r24, 0x013E
    2e5c:	80 38       	cpi	r24, 0x80	; 128
    2e5e:	29 f0       	breq	.+10     	; 0x2e6a <main+0x17be>
    2e60:	80 91 3e 01 	lds	r24, 0x013E
    2e64:	8f 3f       	cpi	r24, 0xFF	; 255
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <main+0x17be>
    2e68:	79 c0       	rjmp	.+242    	; 0x2f5c <main+0x18b0>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    2e6a:	80 91 3e 01 	lds	r24, 0x013E
    2e6e:	80 38       	cpi	r24, 0x80	; 128
    2e70:	21 f5       	brne	.+72     	; 0x2eba <main+0x180e>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2e72:	20 91 6f 01 	lds	r18, 0x016F
    2e76:	30 91 70 01 	lds	r19, 0x0170
    2e7a:	c9 01       	movw	r24, r18
    2e7c:	88 0f       	add	r24, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	82 0f       	add	r24, r18
    2e82:	93 1f       	adc	r25, r19
    2e84:	9c 01       	movw	r18, r24
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	80 91 64 01 	lds	r24, 0x0164
    2e8e:	90 91 65 01 	lds	r25, 0x0165
    2e92:	a0 91 66 01 	lds	r26, 0x0166
    2e96:	b0 91 67 01 	lds	r27, 0x0167
    2e9a:	82 0f       	add	r24, r18
    2e9c:	93 1f       	adc	r25, r19
    2e9e:	a4 1f       	adc	r26, r20
    2ea0:	b5 1f       	adc	r27, r21
    2ea2:	80 93 ca 01 	sts	0x01CA, r24
    2ea6:	90 93 cb 01 	sts	0x01CB, r25
    2eaa:	a0 93 cc 01 	sts	0x01CC, r26
    2eae:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAHDELAY;
    2eb2:	85 e0       	ldi	r24, 0x05	; 5
    2eb4:	80 93 c0 01 	sts	0x01C0, r24
    2eb8:	27 c0       	rjmp	.+78     	; 0x2f08 <main+0x185c>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2eba:	20 91 6f 01 	lds	r18, 0x016F
    2ebe:	30 91 70 01 	lds	r19, 0x0170
    2ec2:	c9 01       	movw	r24, r18
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	88 0f       	add	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	82 1b       	sub	r24, r18
    2ed2:	93 0b       	sbc	r25, r19
    2ed4:	9c 01       	movw	r18, r24
    2ed6:	40 e0       	ldi	r20, 0x00	; 0
    2ed8:	50 e0       	ldi	r21, 0x00	; 0
    2eda:	80 91 64 01 	lds	r24, 0x0164
    2ede:	90 91 65 01 	lds	r25, 0x0165
    2ee2:	a0 91 66 01 	lds	r26, 0x0166
    2ee6:	b0 91 67 01 	lds	r27, 0x0167
    2eea:	82 0f       	add	r24, r18
    2eec:	93 1f       	adc	r25, r19
    2eee:	a4 1f       	adc	r26, r20
    2ef0:	b5 1f       	adc	r27, r21
    2ef2:	80 93 ca 01 	sts	0x01CA, r24
    2ef6:	90 93 cb 01 	sts	0x01CB, r25
    2efa:	a0 93 cc 01 	sts	0x01CC, r26
    2efe:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAHDELAY;
    2f02:	85 e0       	ldi	r24, 0x05	; 5
    2f04:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    2f08:	80 91 3a 01 	lds	r24, 0x013A
    2f0c:	90 91 3b 01 	lds	r25, 0x013B
    2f10:	01 96       	adiw	r24, 0x01	; 1
    2f12:	90 93 3b 01 	sts	0x013B, r25
    2f16:	80 93 3a 01 	sts	0x013A, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2f1a:	80 91 3a 01 	lds	r24, 0x013A
    2f1e:	90 91 3b 01 	lds	r25, 0x013B
    2f22:	fc 01       	movw	r30, r24
    2f24:	80 81       	ld	r24, Z
    2f26:	88 23       	and	r24, r24
    2f28:	19 f4       	brne	.+6      	; 0x2f30 <main+0x1884>
							cur_character = '\0';
    2f2a:	10 92 3e 01 	sts	0x013E, r1
    2f2e:	15 c0       	rjmp	.+42     	; 0x2f5a <main+0x18ae>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2f30:	80 91 3a 01 	lds	r24, 0x013A
    2f34:	90 91 3b 01 	lds	r25, 0x013B
    2f38:	fc 01       	movw	r30, r24
    2f3a:	80 81       	ld	r24, Z
    2f3c:	88 2f       	mov	r24, r24
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	80 97       	sbiw	r24, 0x20	; 32
    2f42:	88 59       	subi	r24, 0x98	; 152
    2f44:	9f 4f       	sbci	r25, 0xFF	; 255
    2f46:	9c 87       	std	Y+12, r25	; 0x0c
    2f48:	8b 87       	std	Y+11, r24	; 0x0b
    2f4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f4e:	fc 01       	movw	r30, r24
    2f50:	14 91       	lpm	r17, Z+
    2f52:	1d 87       	std	Y+13, r17	; 0x0d
    2f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f56:	80 93 3e 01 	sts	0x013E, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2f5a:	c8 c0       	rjmp	.+400    	; 0x30ec <main+0x1a40>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    2f5c:	80 91 3e 01 	lds	r24, 0x013E
    2f60:	88 23       	and	r24, r24
    2f62:	0c f0       	brlt	.+2      	; 0x2f66 <main+0x18ba>
    2f64:	62 c0       	rjmp	.+196    	; 0x302a <main+0x197e>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2f66:	20 91 6f 01 	lds	r18, 0x016F
    2f6a:	30 91 70 01 	lds	r19, 0x0170
    2f6e:	c9 01       	movw	r24, r18
    2f70:	88 0f       	add	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	82 0f       	add	r24, r18
    2f76:	93 1f       	adc	r25, r19
    2f78:	9c 01       	movw	r18, r24
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	80 91 64 01 	lds	r24, 0x0164
    2f82:	90 91 65 01 	lds	r25, 0x0165
    2f86:	a0 91 66 01 	lds	r26, 0x0166
    2f8a:	b0 91 67 01 	lds	r27, 0x0167
    2f8e:	82 0f       	add	r24, r18
    2f90:	93 1f       	adc	r25, r19
    2f92:	a4 1f       	adc	r26, r20
    2f94:	b5 1f       	adc	r27, r21
    2f96:	80 93 ca 01 	sts	0x01CA, r24
    2f9a:	90 93 cb 01 	sts	0x01CB, r25
    2f9e:	a0 93 cc 01 	sts	0x01CC, r26
    2fa2:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DAH;
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	80 93 c0 01 	sts	0x01C0, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2fac:	80 91 64 01 	lds	r24, 0x0164
    2fb0:	90 91 65 01 	lds	r25, 0x0165
    2fb4:	a0 91 66 01 	lds	r26, 0x0166
    2fb8:	b0 91 67 01 	lds	r27, 0x0167
    2fbc:	01 96       	adiw	r24, 0x01	; 1
    2fbe:	a1 1d       	adc	r26, r1
    2fc0:	b1 1d       	adc	r27, r1
    2fc2:	80 93 a4 01 	sts	0x01A4, r24
    2fc6:	90 93 a5 01 	sts	0x01A5, r25
    2fca:	a0 93 a6 01 	sts	0x01A6, r26
    2fce:	b0 93 a7 01 	sts	0x01A7, r27
							tx_end = cur_state_end;
    2fd2:	80 91 ca 01 	lds	r24, 0x01CA
    2fd6:	90 91 cb 01 	lds	r25, 0x01CB
    2fda:	a0 91 cc 01 	lds	r26, 0x01CC
    2fde:	b0 91 cd 01 	lds	r27, 0x01CD
    2fe2:	80 93 df 01 	sts	0x01DF, r24
    2fe6:	90 93 e0 01 	sts	0x01E0, r25
    2fea:	a0 93 e1 01 	sts	0x01E1, r26
    2fee:	b0 93 e2 01 	sts	0x01E2, r27
							mute_start = cur_timer;
    2ff2:	80 91 64 01 	lds	r24, 0x0164
    2ff6:	90 91 65 01 	lds	r25, 0x0165
    2ffa:	a0 91 66 01 	lds	r26, 0x0166
    2ffe:	b0 91 67 01 	lds	r27, 0x0167
    3002:	80 93 d9 01 	sts	0x01D9, r24
    3006:	90 93 da 01 	sts	0x01DA, r25
    300a:	a0 93 db 01 	sts	0x01DB, r26
    300e:	b0 93 dc 01 	sts	0x01DC, r27
							mute_end = UINT32_MAX;
    3012:	8f ef       	ldi	r24, 0xFF	; 255
    3014:	9f ef       	ldi	r25, 0xFF	; 255
    3016:	dc 01       	movw	r26, r24
    3018:	80 93 ce 01 	sts	0x01CE, r24
    301c:	90 93 cf 01 	sts	0x01CF, r25
    3020:	a0 93 d0 01 	sts	0x01D0, r26
    3024:	b0 93 d1 01 	sts	0x01D1, r27
    3028:	5c c0       	rjmp	.+184    	; 0x30e2 <main+0x1a36>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    302a:	80 91 6f 01 	lds	r24, 0x016F
    302e:	90 91 70 01 	lds	r25, 0x0170
    3032:	9c 01       	movw	r18, r24
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	50 e0       	ldi	r21, 0x00	; 0
    3038:	80 91 64 01 	lds	r24, 0x0164
    303c:	90 91 65 01 	lds	r25, 0x0165
    3040:	a0 91 66 01 	lds	r26, 0x0166
    3044:	b0 91 67 01 	lds	r27, 0x0167
    3048:	82 0f       	add	r24, r18
    304a:	93 1f       	adc	r25, r19
    304c:	a4 1f       	adc	r26, r20
    304e:	b5 1f       	adc	r27, r21
    3050:	80 93 ca 01 	sts	0x01CA, r24
    3054:	90 93 cb 01 	sts	0x01CB, r25
    3058:	a0 93 cc 01 	sts	0x01CC, r26
    305c:	b0 93 cd 01 	sts	0x01CD, r27
							cur_state = DIT;
    3060:	82 e0       	ldi	r24, 0x02	; 2
    3062:	80 93 c0 01 	sts	0x01C0, r24
							tx_start = cur_timer + TX_ON_DELAY;
    3066:	80 91 64 01 	lds	r24, 0x0164
    306a:	90 91 65 01 	lds	r25, 0x0165
    306e:	a0 91 66 01 	lds	r26, 0x0166
    3072:	b0 91 67 01 	lds	r27, 0x0167
    3076:	01 96       	adiw	r24, 0x01	; 1
    3078:	a1 1d       	adc	r26, r1
    307a:	b1 1d       	adc	r27, r1
    307c:	80 93 a4 01 	sts	0x01A4, r24
    3080:	90 93 a5 01 	sts	0x01A5, r25
    3084:	a0 93 a6 01 	sts	0x01A6, r26
    3088:	b0 93 a7 01 	sts	0x01A7, r27
							tx_end = cur_state_end;
    308c:	80 91 ca 01 	lds	r24, 0x01CA
    3090:	90 91 cb 01 	lds	r25, 0x01CB
    3094:	a0 91 cc 01 	lds	r26, 0x01CC
    3098:	b0 91 cd 01 	lds	r27, 0x01CD
    309c:	80 93 df 01 	sts	0x01DF, r24
    30a0:	90 93 e0 01 	sts	0x01E0, r25
    30a4:	a0 93 e1 01 	sts	0x01E1, r26
    30a8:	b0 93 e2 01 	sts	0x01E2, r27
							mute_start = cur_timer;
    30ac:	80 91 64 01 	lds	r24, 0x0164
    30b0:	90 91 65 01 	lds	r25, 0x0165
    30b4:	a0 91 66 01 	lds	r26, 0x0166
    30b8:	b0 91 67 01 	lds	r27, 0x0167
    30bc:	80 93 d9 01 	sts	0x01D9, r24
    30c0:	90 93 da 01 	sts	0x01DA, r25
    30c4:	a0 93 db 01 	sts	0x01DB, r26
    30c8:	b0 93 dc 01 	sts	0x01DC, r27
							mute_end = UINT32_MAX;
    30cc:	8f ef       	ldi	r24, 0xFF	; 255
    30ce:	9f ef       	ldi	r25, 0xFF	; 255
    30d0:	dc 01       	movw	r26, r24
    30d2:	80 93 ce 01 	sts	0x01CE, r24
    30d6:	90 93 cf 01 	sts	0x01CF, r25
    30da:	a0 93 d0 01 	sts	0x01D0, r26
    30de:	b0 93 d1 01 	sts	0x01D1, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    30e2:	80 91 3e 01 	lds	r24, 0x013E
    30e6:	88 0f       	add	r24, r24
    30e8:	80 93 3e 01 	sts	0x013E, r24
    30ec:	3d c0       	rjmp	.+122    	; 0x3168 <main+0x1abc>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    30ee:	80 91 dd 01 	lds	r24, 0x01DD
    30f2:	90 91 de 01 	lds	r25, 0x01DE
    30f6:	24 e2       	ldi	r18, 0x24	; 36
    30f8:	31 e0       	ldi	r19, 0x01	; 1
    30fa:	b9 01       	movw	r22, r18
    30fc:	41 e0       	ldi	r20, 0x01	; 1
    30fe:	50 e0       	ldi	r21, 0x00	; 0
    3100:	0e 94 b2 1a 	call	0x3564	; 0x3564 <memcpy>
					cur_char_p = announce_buffer;
    3104:	80 91 dd 01 	lds	r24, 0x01DD
    3108:	90 91 de 01 	lds	r25, 0x01DE
    310c:	90 93 3b 01 	sts	0x013B, r25
    3110:	80 93 3a 01 	sts	0x013A, r24
					cur_character = '\0';
    3114:	10 92 3e 01 	sts	0x013E, r1

					// Set back into previous mode
					mute_end = cur_timer;
    3118:	80 91 64 01 	lds	r24, 0x0164
    311c:	90 91 65 01 	lds	r25, 0x0165
    3120:	a0 91 66 01 	lds	r26, 0x0166
    3124:	b0 91 67 01 	lds	r27, 0x0167
    3128:	80 93 ce 01 	sts	0x01CE, r24
    312c:	90 93 cf 01 	sts	0x01CF, r25
    3130:	a0 93 d0 01 	sts	0x01D0, r26
    3134:	b0 93 d1 01 	sts	0x01D1, r27
					cur_mode = prev_mode;
    3138:	80 91 b4 01 	lds	r24, 0x01B4
    313c:	80 93 9e 01 	sts	0x019E, r24
					cur_state = prev_state;
    3140:	80 91 6e 01 	lds	r24, 0x016E
    3144:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = prev_state_end;
    3148:	80 91 b0 01 	lds	r24, 0x01B0
    314c:	90 91 b1 01 	lds	r25, 0x01B1
    3150:	a0 91 b2 01 	lds	r26, 0x01B2
    3154:	b0 91 b3 01 	lds	r27, 0x01B3
    3158:	80 93 ca 01 	sts	0x01CA, r24
    315c:	90 93 cb 01 	sts	0x01CB, r25
    3160:	a0 93 cc 01 	sts	0x01CC, r26
    3164:	b0 93 cd 01 	sts	0x01CD, r27
				}
				break;
    3168:	5e c0       	rjmp	.+188    	; 0x3226 <main+0x1b7a>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    316a:	20 91 64 01 	lds	r18, 0x0164
    316e:	30 91 65 01 	lds	r19, 0x0165
    3172:	40 91 66 01 	lds	r20, 0x0166
    3176:	50 91 67 01 	lds	r21, 0x0167
    317a:	80 91 ca 01 	lds	r24, 0x01CA
    317e:	90 91 cb 01 	lds	r25, 0x01CB
    3182:	a0 91 cc 01 	lds	r26, 0x01CC
    3186:	b0 91 cd 01 	lds	r27, 0x01CD
    318a:	82 17       	cp	r24, r18
    318c:	93 07       	cpc	r25, r19
    318e:	a4 07       	cpc	r26, r20
    3190:	b5 07       	cpc	r27, r21
    3192:	f0 f4       	brcc	.+60     	; 0x31d0 <main+0x1b24>
				{
					cur_state_end = cur_timer + dit_length;
    3194:	80 91 6f 01 	lds	r24, 0x016F
    3198:	90 91 70 01 	lds	r25, 0x0170
    319c:	9c 01       	movw	r18, r24
    319e:	40 e0       	ldi	r20, 0x00	; 0
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	80 91 64 01 	lds	r24, 0x0164
    31a6:	90 91 65 01 	lds	r25, 0x0165
    31aa:	a0 91 66 01 	lds	r26, 0x0166
    31ae:	b0 91 67 01 	lds	r27, 0x0167
    31b2:	82 0f       	add	r24, r18
    31b4:	93 1f       	adc	r25, r19
    31b6:	a4 1f       	adc	r26, r20
    31b8:	b5 1f       	adc	r27, r21
    31ba:	80 93 ca 01 	sts	0x01CA, r24
    31be:	90 93 cb 01 	sts	0x01CB, r25
    31c2:	a0 93 cc 01 	sts	0x01CC, r26
    31c6:	b0 93 cd 01 	sts	0x01CD, r27
					cur_state = DITDELAY;
    31ca:	84 e0       	ldi	r24, 0x04	; 4
    31cc:	80 93 c0 01 	sts	0x01C0, r24
				}

				key_down = TRUE;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	80 93 38 01 	sts	0x0138, r24
				sidetone_on = TRUE;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	80 93 37 01 	sts	0x0137, r24
				break;
    31e2:	21 c0       	rjmp	.+66     	; 0x3226 <main+0x1b7a>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    31e4:	20 91 64 01 	lds	r18, 0x0164
    31e8:	30 91 65 01 	lds	r19, 0x0165
    31ec:	40 91 66 01 	lds	r20, 0x0166
    31f0:	50 91 67 01 	lds	r21, 0x0167
    31f4:	80 91 ca 01 	lds	r24, 0x01CA
    31f8:	90 91 cb 01 	lds	r25, 0x01CB
    31fc:	a0 91 cc 01 	lds	r26, 0x01CC
    3200:	b0 91 cd 01 	lds	r27, 0x01CD
    3204:	82 17       	cp	r24, r18
    3206:	93 07       	cpc	r25, r19
    3208:	a4 07       	cpc	r26, r20
    320a:	b5 07       	cpc	r27, r21
    320c:	18 f4       	brcc	.+6      	; 0x3214 <main+0x1b68>
					cur_state = IDLE;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	80 93 c0 01 	sts	0x01C0, r24

				key_down = FALSE;
    3214:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    3218:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	80 93 37 01 	sts	0x0137, r24
				break;
    3222:	01 c0       	rjmp	.+2      	; 0x3226 <main+0x1b7a>

			default:
				break;
    3224:	00 00       	nop
			}
			break;
    3226:	01 c0       	rjmp	.+2      	; 0x322a <main+0x1b7e>
				break;
			}
			break;
		*/
		default:
			break;
    3228:	00 00       	nop
		} // END switch(cur_mode)

	}
    322a:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <main+0xca>

0000322e <__mulsi3>:
    322e:	62 9f       	mul	r22, r18
    3230:	d0 01       	movw	r26, r0
    3232:	73 9f       	mul	r23, r19
    3234:	f0 01       	movw	r30, r0
    3236:	82 9f       	mul	r24, r18
    3238:	e0 0d       	add	r30, r0
    323a:	f1 1d       	adc	r31, r1
    323c:	64 9f       	mul	r22, r20
    323e:	e0 0d       	add	r30, r0
    3240:	f1 1d       	adc	r31, r1
    3242:	92 9f       	mul	r25, r18
    3244:	f0 0d       	add	r31, r0
    3246:	83 9f       	mul	r24, r19
    3248:	f0 0d       	add	r31, r0
    324a:	74 9f       	mul	r23, r20
    324c:	f0 0d       	add	r31, r0
    324e:	65 9f       	mul	r22, r21
    3250:	f0 0d       	add	r31, r0
    3252:	99 27       	eor	r25, r25
    3254:	72 9f       	mul	r23, r18
    3256:	b0 0d       	add	r27, r0
    3258:	e1 1d       	adc	r30, r1
    325a:	f9 1f       	adc	r31, r25
    325c:	63 9f       	mul	r22, r19
    325e:	b0 0d       	add	r27, r0
    3260:	e1 1d       	adc	r30, r1
    3262:	f9 1f       	adc	r31, r25
    3264:	bd 01       	movw	r22, r26
    3266:	cf 01       	movw	r24, r30
    3268:	11 24       	eor	r1, r1
    326a:	08 95       	ret

0000326c <__udivmodhi4>:
    326c:	aa 1b       	sub	r26, r26
    326e:	bb 1b       	sub	r27, r27
    3270:	51 e1       	ldi	r21, 0x11	; 17
    3272:	07 c0       	rjmp	.+14     	; 0x3282 <__udivmodhi4_ep>

00003274 <__udivmodhi4_loop>:
    3274:	aa 1f       	adc	r26, r26
    3276:	bb 1f       	adc	r27, r27
    3278:	a6 17       	cp	r26, r22
    327a:	b7 07       	cpc	r27, r23
    327c:	10 f0       	brcs	.+4      	; 0x3282 <__udivmodhi4_ep>
    327e:	a6 1b       	sub	r26, r22
    3280:	b7 0b       	sbc	r27, r23

00003282 <__udivmodhi4_ep>:
    3282:	88 1f       	adc	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	5a 95       	dec	r21
    3288:	a9 f7       	brne	.-22     	; 0x3274 <__udivmodhi4_loop>
    328a:	80 95       	com	r24
    328c:	90 95       	com	r25
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	08 95       	ret

00003294 <__divmodhi4>:
    3294:	97 fb       	bst	r25, 7
    3296:	09 2e       	mov	r0, r25
    3298:	07 26       	eor	r0, r23
    329a:	0a d0       	rcall	.+20     	; 0x32b0 <__divmodhi4_neg1>
    329c:	77 fd       	sbrc	r23, 7
    329e:	04 d0       	rcall	.+8      	; 0x32a8 <__divmodhi4_neg2>
    32a0:	e5 df       	rcall	.-54     	; 0x326c <__udivmodhi4>
    32a2:	06 d0       	rcall	.+12     	; 0x32b0 <__divmodhi4_neg1>
    32a4:	00 20       	and	r0, r0
    32a6:	1a f4       	brpl	.+6      	; 0x32ae <__divmodhi4_exit>

000032a8 <__divmodhi4_neg2>:
    32a8:	70 95       	com	r23
    32aa:	61 95       	neg	r22
    32ac:	7f 4f       	sbci	r23, 0xFF	; 255

000032ae <__divmodhi4_exit>:
    32ae:	08 95       	ret

000032b0 <__divmodhi4_neg1>:
    32b0:	f6 f7       	brtc	.-4      	; 0x32ae <__divmodhi4_exit>
    32b2:	90 95       	com	r25
    32b4:	81 95       	neg	r24
    32b6:	9f 4f       	sbci	r25, 0xFF	; 255
    32b8:	08 95       	ret

000032ba <__udivmodsi4>:
    32ba:	a1 e2       	ldi	r26, 0x21	; 33
    32bc:	1a 2e       	mov	r1, r26
    32be:	aa 1b       	sub	r26, r26
    32c0:	bb 1b       	sub	r27, r27
    32c2:	fd 01       	movw	r30, r26
    32c4:	0d c0       	rjmp	.+26     	; 0x32e0 <__udivmodsi4_ep>

000032c6 <__udivmodsi4_loop>:
    32c6:	aa 1f       	adc	r26, r26
    32c8:	bb 1f       	adc	r27, r27
    32ca:	ee 1f       	adc	r30, r30
    32cc:	ff 1f       	adc	r31, r31
    32ce:	a2 17       	cp	r26, r18
    32d0:	b3 07       	cpc	r27, r19
    32d2:	e4 07       	cpc	r30, r20
    32d4:	f5 07       	cpc	r31, r21
    32d6:	20 f0       	brcs	.+8      	; 0x32e0 <__udivmodsi4_ep>
    32d8:	a2 1b       	sub	r26, r18
    32da:	b3 0b       	sbc	r27, r19
    32dc:	e4 0b       	sbc	r30, r20
    32de:	f5 0b       	sbc	r31, r21

000032e0 <__udivmodsi4_ep>:
    32e0:	66 1f       	adc	r22, r22
    32e2:	77 1f       	adc	r23, r23
    32e4:	88 1f       	adc	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	1a 94       	dec	r1
    32ea:	69 f7       	brne	.-38     	; 0x32c6 <__udivmodsi4_loop>
    32ec:	60 95       	com	r22
    32ee:	70 95       	com	r23
    32f0:	80 95       	com	r24
    32f2:	90 95       	com	r25
    32f4:	9b 01       	movw	r18, r22
    32f6:	ac 01       	movw	r20, r24
    32f8:	bd 01       	movw	r22, r26
    32fa:	cf 01       	movw	r24, r30
    32fc:	08 95       	ret

000032fe <malloc>:
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	82 30       	cpi	r24, 0x02	; 2
    3304:	91 05       	cpc	r25, r1
    3306:	10 f4       	brcc	.+4      	; 0x330c <malloc+0xe>
    3308:	82 e0       	ldi	r24, 0x02	; 2
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	e0 91 e8 01 	lds	r30, 0x01E8
    3310:	f0 91 e9 01 	lds	r31, 0x01E9
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	26 c0       	rjmp	.+76     	; 0x336a <malloc+0x6c>
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	68 17       	cp	r22, r24
    3324:	79 07       	cpc	r23, r25
    3326:	e0 f0       	brcs	.+56     	; 0x3360 <malloc+0x62>
    3328:	68 17       	cp	r22, r24
    332a:	79 07       	cpc	r23, r25
    332c:	81 f4       	brne	.+32     	; 0x334e <malloc+0x50>
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	21 15       	cp	r18, r1
    3334:	31 05       	cpc	r19, r1
    3336:	31 f0       	breq	.+12     	; 0x3344 <malloc+0x46>
    3338:	d9 01       	movw	r26, r18
    333a:	13 96       	adiw	r26, 0x03	; 3
    333c:	9c 93       	st	X, r25
    333e:	8e 93       	st	-X, r24
    3340:	12 97       	sbiw	r26, 0x02	; 2
    3342:	2b c0       	rjmp	.+86     	; 0x339a <malloc+0x9c>
    3344:	90 93 e9 01 	sts	0x01E9, r25
    3348:	80 93 e8 01 	sts	0x01E8, r24
    334c:	26 c0       	rjmp	.+76     	; 0x339a <malloc+0x9c>
    334e:	41 15       	cp	r20, r1
    3350:	51 05       	cpc	r21, r1
    3352:	19 f0       	breq	.+6      	; 0x335a <malloc+0x5c>
    3354:	64 17       	cp	r22, r20
    3356:	75 07       	cpc	r23, r21
    3358:	18 f4       	brcc	.+6      	; 0x3360 <malloc+0x62>
    335a:	ab 01       	movw	r20, r22
    335c:	e9 01       	movw	r28, r18
    335e:	df 01       	movw	r26, r30
    3360:	9f 01       	movw	r18, r30
    3362:	72 81       	ldd	r23, Z+2	; 0x02
    3364:	63 81       	ldd	r22, Z+3	; 0x03
    3366:	e7 2f       	mov	r30, r23
    3368:	f6 2f       	mov	r31, r22
    336a:	30 97       	sbiw	r30, 0x00	; 0
    336c:	c1 f6       	brne	.-80     	; 0x331e <malloc+0x20>
    336e:	41 15       	cp	r20, r1
    3370:	51 05       	cpc	r21, r1
    3372:	01 f1       	breq	.+64     	; 0x33b4 <malloc+0xb6>
    3374:	48 1b       	sub	r20, r24
    3376:	59 0b       	sbc	r21, r25
    3378:	44 30       	cpi	r20, 0x04	; 4
    337a:	51 05       	cpc	r21, r1
    337c:	80 f4       	brcc	.+32     	; 0x339e <malloc+0xa0>
    337e:	12 96       	adiw	r26, 0x02	; 2
    3380:	8d 91       	ld	r24, X+
    3382:	9c 91       	ld	r25, X
    3384:	13 97       	sbiw	r26, 0x03	; 3
    3386:	20 97       	sbiw	r28, 0x00	; 0
    3388:	19 f0       	breq	.+6      	; 0x3390 <malloc+0x92>
    338a:	9b 83       	std	Y+3, r25	; 0x03
    338c:	8a 83       	std	Y+2, r24	; 0x02
    338e:	04 c0       	rjmp	.+8      	; 0x3398 <malloc+0x9a>
    3390:	90 93 e9 01 	sts	0x01E9, r25
    3394:	80 93 e8 01 	sts	0x01E8, r24
    3398:	fd 01       	movw	r30, r26
    339a:	32 96       	adiw	r30, 0x02	; 2
    339c:	46 c0       	rjmp	.+140    	; 0x342a <malloc+0x12c>
    339e:	fd 01       	movw	r30, r26
    33a0:	e4 0f       	add	r30, r20
    33a2:	f5 1f       	adc	r31, r21
    33a4:	81 93       	st	Z+, r24
    33a6:	91 93       	st	Z+, r25
    33a8:	42 50       	subi	r20, 0x02	; 2
    33aa:	50 40       	sbci	r21, 0x00	; 0
    33ac:	11 96       	adiw	r26, 0x01	; 1
    33ae:	5c 93       	st	X, r21
    33b0:	4e 93       	st	-X, r20
    33b2:	3b c0       	rjmp	.+118    	; 0x342a <malloc+0x12c>
    33b4:	20 91 e6 01 	lds	r18, 0x01E6
    33b8:	30 91 e7 01 	lds	r19, 0x01E7
    33bc:	21 15       	cp	r18, r1
    33be:	31 05       	cpc	r19, r1
    33c0:	41 f4       	brne	.+16     	; 0x33d2 <malloc+0xd4>
    33c2:	20 91 32 01 	lds	r18, 0x0132
    33c6:	30 91 33 01 	lds	r19, 0x0133
    33ca:	30 93 e7 01 	sts	0x01E7, r19
    33ce:	20 93 e6 01 	sts	0x01E6, r18
    33d2:	20 91 34 01 	lds	r18, 0x0134
    33d6:	30 91 35 01 	lds	r19, 0x0135
    33da:	21 15       	cp	r18, r1
    33dc:	31 05       	cpc	r19, r1
    33de:	41 f4       	brne	.+16     	; 0x33f0 <malloc+0xf2>
    33e0:	2d b7       	in	r18, 0x3d	; 61
    33e2:	3e b7       	in	r19, 0x3e	; 62
    33e4:	40 91 30 01 	lds	r20, 0x0130
    33e8:	50 91 31 01 	lds	r21, 0x0131
    33ec:	24 1b       	sub	r18, r20
    33ee:	35 0b       	sbc	r19, r21
    33f0:	e0 91 e6 01 	lds	r30, 0x01E6
    33f4:	f0 91 e7 01 	lds	r31, 0x01E7
    33f8:	e2 17       	cp	r30, r18
    33fa:	f3 07       	cpc	r31, r19
    33fc:	a0 f4       	brcc	.+40     	; 0x3426 <malloc+0x128>
    33fe:	2e 1b       	sub	r18, r30
    3400:	3f 0b       	sbc	r19, r31
    3402:	28 17       	cp	r18, r24
    3404:	39 07       	cpc	r19, r25
    3406:	78 f0       	brcs	.+30     	; 0x3426 <malloc+0x128>
    3408:	ac 01       	movw	r20, r24
    340a:	4e 5f       	subi	r20, 0xFE	; 254
    340c:	5f 4f       	sbci	r21, 0xFF	; 255
    340e:	24 17       	cp	r18, r20
    3410:	35 07       	cpc	r19, r21
    3412:	48 f0       	brcs	.+18     	; 0x3426 <malloc+0x128>
    3414:	4e 0f       	add	r20, r30
    3416:	5f 1f       	adc	r21, r31
    3418:	50 93 e7 01 	sts	0x01E7, r21
    341c:	40 93 e6 01 	sts	0x01E6, r20
    3420:	81 93       	st	Z+, r24
    3422:	91 93       	st	Z+, r25
    3424:	02 c0       	rjmp	.+4      	; 0x342a <malloc+0x12c>
    3426:	e0 e0       	ldi	r30, 0x00	; 0
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	cf 01       	movw	r24, r30
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	08 95       	ret

00003432 <free>:
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	09 f4       	brne	.+2      	; 0x343c <free+0xa>
    343a:	91 c0       	rjmp	.+290    	; 0x355e <free+0x12c>
    343c:	fc 01       	movw	r30, r24
    343e:	32 97       	sbiw	r30, 0x02	; 2
    3440:	13 82       	std	Z+3, r1	; 0x03
    3442:	12 82       	std	Z+2, r1	; 0x02
    3444:	60 91 e8 01 	lds	r22, 0x01E8
    3448:	70 91 e9 01 	lds	r23, 0x01E9
    344c:	61 15       	cp	r22, r1
    344e:	71 05       	cpc	r23, r1
    3450:	81 f4       	brne	.+32     	; 0x3472 <free+0x40>
    3452:	20 81       	ld	r18, Z
    3454:	31 81       	ldd	r19, Z+1	; 0x01
    3456:	28 0f       	add	r18, r24
    3458:	39 1f       	adc	r19, r25
    345a:	80 91 e6 01 	lds	r24, 0x01E6
    345e:	90 91 e7 01 	lds	r25, 0x01E7
    3462:	82 17       	cp	r24, r18
    3464:	93 07       	cpc	r25, r19
    3466:	99 f5       	brne	.+102    	; 0x34ce <free+0x9c>
    3468:	f0 93 e7 01 	sts	0x01E7, r31
    346c:	e0 93 e6 01 	sts	0x01E6, r30
    3470:	76 c0       	rjmp	.+236    	; 0x355e <free+0x12c>
    3472:	db 01       	movw	r26, r22
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	02 c0       	rjmp	.+4      	; 0x347e <free+0x4c>
    347a:	cd 01       	movw	r24, r26
    347c:	d9 01       	movw	r26, r18
    347e:	ae 17       	cp	r26, r30
    3480:	bf 07       	cpc	r27, r31
    3482:	48 f4       	brcc	.+18     	; 0x3496 <free+0x64>
    3484:	12 96       	adiw	r26, 0x02	; 2
    3486:	2d 91       	ld	r18, X+
    3488:	3c 91       	ld	r19, X
    348a:	13 97       	sbiw	r26, 0x03	; 3
    348c:	21 15       	cp	r18, r1
    348e:	31 05       	cpc	r19, r1
    3490:	a1 f7       	brne	.-24     	; 0x347a <free+0x48>
    3492:	cd 01       	movw	r24, r26
    3494:	21 c0       	rjmp	.+66     	; 0x34d8 <free+0xa6>
    3496:	b3 83       	std	Z+3, r27	; 0x03
    3498:	a2 83       	std	Z+2, r26	; 0x02
    349a:	ef 01       	movw	r28, r30
    349c:	49 91       	ld	r20, Y+
    349e:	59 91       	ld	r21, Y+
    34a0:	9e 01       	movw	r18, r28
    34a2:	24 0f       	add	r18, r20
    34a4:	35 1f       	adc	r19, r21
    34a6:	a2 17       	cp	r26, r18
    34a8:	b3 07       	cpc	r27, r19
    34aa:	79 f4       	brne	.+30     	; 0x34ca <free+0x98>
    34ac:	2d 91       	ld	r18, X+
    34ae:	3c 91       	ld	r19, X
    34b0:	11 97       	sbiw	r26, 0x01	; 1
    34b2:	24 0f       	add	r18, r20
    34b4:	35 1f       	adc	r19, r21
    34b6:	2e 5f       	subi	r18, 0xFE	; 254
    34b8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ba:	31 83       	std	Z+1, r19	; 0x01
    34bc:	20 83       	st	Z, r18
    34be:	12 96       	adiw	r26, 0x02	; 2
    34c0:	2d 91       	ld	r18, X+
    34c2:	3c 91       	ld	r19, X
    34c4:	13 97       	sbiw	r26, 0x03	; 3
    34c6:	33 83       	std	Z+3, r19	; 0x03
    34c8:	22 83       	std	Z+2, r18	; 0x02
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	29 f4       	brne	.+10     	; 0x34d8 <free+0xa6>
    34ce:	f0 93 e9 01 	sts	0x01E9, r31
    34d2:	e0 93 e8 01 	sts	0x01E8, r30
    34d6:	43 c0       	rjmp	.+134    	; 0x355e <free+0x12c>
    34d8:	dc 01       	movw	r26, r24
    34da:	13 96       	adiw	r26, 0x03	; 3
    34dc:	fc 93       	st	X, r31
    34de:	ee 93       	st	-X, r30
    34e0:	12 97       	sbiw	r26, 0x02	; 2
    34e2:	4d 91       	ld	r20, X+
    34e4:	5d 91       	ld	r21, X+
    34e6:	a4 0f       	add	r26, r20
    34e8:	b5 1f       	adc	r27, r21
    34ea:	ea 17       	cp	r30, r26
    34ec:	fb 07       	cpc	r31, r27
    34ee:	69 f4       	brne	.+26     	; 0x350a <free+0xd8>
    34f0:	20 81       	ld	r18, Z
    34f2:	31 81       	ldd	r19, Z+1	; 0x01
    34f4:	24 0f       	add	r18, r20
    34f6:	35 1f       	adc	r19, r21
    34f8:	2e 5f       	subi	r18, 0xFE	; 254
    34fa:	3f 4f       	sbci	r19, 0xFF	; 255
    34fc:	ec 01       	movw	r28, r24
    34fe:	39 83       	std	Y+1, r19	; 0x01
    3500:	28 83       	st	Y, r18
    3502:	22 81       	ldd	r18, Z+2	; 0x02
    3504:	33 81       	ldd	r19, Z+3	; 0x03
    3506:	3b 83       	std	Y+3, r19	; 0x03
    3508:	2a 83       	std	Y+2, r18	; 0x02
    350a:	e0 e0       	ldi	r30, 0x00	; 0
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <free+0xe2>
    3510:	fb 01       	movw	r30, r22
    3512:	bc 01       	movw	r22, r24
    3514:	db 01       	movw	r26, r22
    3516:	12 96       	adiw	r26, 0x02	; 2
    3518:	8d 91       	ld	r24, X+
    351a:	9c 91       	ld	r25, X
    351c:	13 97       	sbiw	r26, 0x03	; 3
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	b9 f7       	brne	.-18     	; 0x3510 <free+0xde>
    3522:	9b 01       	movw	r18, r22
    3524:	2e 5f       	subi	r18, 0xFE	; 254
    3526:	3f 4f       	sbci	r19, 0xFF	; 255
    3528:	8d 91       	ld	r24, X+
    352a:	9c 91       	ld	r25, X
    352c:	11 97       	sbiw	r26, 0x01	; 1
    352e:	82 0f       	add	r24, r18
    3530:	93 1f       	adc	r25, r19
    3532:	40 91 e6 01 	lds	r20, 0x01E6
    3536:	50 91 e7 01 	lds	r21, 0x01E7
    353a:	48 17       	cp	r20, r24
    353c:	59 07       	cpc	r21, r25
    353e:	79 f4       	brne	.+30     	; 0x355e <free+0x12c>
    3540:	30 97       	sbiw	r30, 0x00	; 0
    3542:	29 f4       	brne	.+10     	; 0x354e <free+0x11c>
    3544:	10 92 e9 01 	sts	0x01E9, r1
    3548:	10 92 e8 01 	sts	0x01E8, r1
    354c:	02 c0       	rjmp	.+4      	; 0x3552 <free+0x120>
    354e:	13 82       	std	Z+3, r1	; 0x03
    3550:	12 82       	std	Z+2, r1	; 0x02
    3552:	22 50       	subi	r18, 0x02	; 2
    3554:	30 40       	sbci	r19, 0x00	; 0
    3556:	30 93 e7 01 	sts	0x01E7, r19
    355a:	20 93 e6 01 	sts	0x01E6, r18
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	08 95       	ret

00003564 <memcpy>:
    3564:	fb 01       	movw	r30, r22
    3566:	dc 01       	movw	r26, r24
    3568:	02 c0       	rjmp	.+4      	; 0x356e <memcpy+0xa>
    356a:	01 90       	ld	r0, Z+
    356c:	0d 92       	st	X+, r0
    356e:	41 50       	subi	r20, 0x01	; 1
    3570:	50 40       	sbci	r21, 0x00	; 0
    3572:	d8 f7       	brcc	.-10     	; 0x356a <memcpy+0x6>
    3574:	08 95       	ret

00003576 <memset>:
    3576:	dc 01       	movw	r26, r24
    3578:	01 c0       	rjmp	.+2      	; 0x357c <memset+0x6>
    357a:	6d 93       	st	X+, r22
    357c:	41 50       	subi	r20, 0x01	; 1
    357e:	50 40       	sbci	r21, 0x00	; 0
    3580:	e0 f7       	brcc	.-8      	; 0x357a <memset+0x4>
    3582:	08 95       	ret

00003584 <strcpy>:
    3584:	fb 01       	movw	r30, r22
    3586:	dc 01       	movw	r26, r24
    3588:	01 90       	ld	r0, Z+
    358a:	0d 92       	st	X+, r0
    358c:	00 20       	and	r0, r0
    358e:	e1 f7       	brne	.-8      	; 0x3588 <strcpy+0x4>
    3590:	08 95       	ret

00003592 <strupr>:
    3592:	dc 01       	movw	r26, r24
    3594:	6c 91       	ld	r22, X
    3596:	61 56       	subi	r22, 0x61	; 97
    3598:	6a 31       	cpi	r22, 0x1A	; 26
    359a:	08 f0       	brcs	.+2      	; 0x359e <strupr+0xc>
    359c:	60 5e       	subi	r22, 0xE0	; 224
    359e:	6f 5b       	subi	r22, 0xBF	; 191
    35a0:	6d 93       	st	X+, r22
    35a2:	c1 f7       	brne	.-16     	; 0x3594 <strupr+0x2>
    35a4:	08 95       	ret

000035a6 <sprintf>:
    35a6:	ae e0       	ldi	r26, 0x0E	; 14
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	e9 ed       	ldi	r30, 0xD9	; 217
    35ac:	fa e1       	ldi	r31, 0x1A	; 26
    35ae:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__prologue_saves__+0x1c>
    35b2:	0d 89       	ldd	r16, Y+21	; 0x15
    35b4:	1e 89       	ldd	r17, Y+22	; 0x16
    35b6:	86 e0       	ldi	r24, 0x06	; 6
    35b8:	8c 83       	std	Y+4, r24	; 0x04
    35ba:	1a 83       	std	Y+2, r17	; 0x02
    35bc:	09 83       	std	Y+1, r16	; 0x01
    35be:	8f ef       	ldi	r24, 0xFF	; 255
    35c0:	9f e7       	ldi	r25, 0x7F	; 127
    35c2:	9e 83       	std	Y+6, r25	; 0x06
    35c4:	8d 83       	std	Y+5, r24	; 0x05
    35c6:	9e 01       	movw	r18, r28
    35c8:	27 5e       	subi	r18, 0xE7	; 231
    35ca:	3f 4f       	sbci	r19, 0xFF	; 255
    35cc:	ce 01       	movw	r24, r28
    35ce:	01 96       	adiw	r24, 0x01	; 1
    35d0:	6f 89       	ldd	r22, Y+23	; 0x17
    35d2:	78 8d       	ldd	r23, Y+24	; 0x18
    35d4:	a9 01       	movw	r20, r18
    35d6:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <vfprintf>
    35da:	ef 81       	ldd	r30, Y+7	; 0x07
    35dc:	f8 85       	ldd	r31, Y+8	; 0x08
    35de:	e0 0f       	add	r30, r16
    35e0:	f1 1f       	adc	r31, r17
    35e2:	10 82       	st	Z, r1
    35e4:	2e 96       	adiw	r28, 0x0e	; 14
    35e6:	e4 e0       	ldi	r30, 0x04	; 4
    35e8:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <__epilogue_restores__+0x1c>

000035ec <vfprintf>:
    35ec:	ac e0       	ldi	r26, 0x0C	; 12
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	ec ef       	ldi	r30, 0xFC	; 252
    35f2:	fa e1       	ldi	r31, 0x1A	; 26
    35f4:	0c 94 a3 1d 	jmp	0x3b46	; 0x3b46 <__prologue_saves__>
    35f8:	6c 01       	movw	r12, r24
    35fa:	1b 01       	movw	r2, r22
    35fc:	8a 01       	movw	r16, r20
    35fe:	fc 01       	movw	r30, r24
    3600:	17 82       	std	Z+7, r1	; 0x07
    3602:	16 82       	std	Z+6, r1	; 0x06
    3604:	83 81       	ldd	r24, Z+3	; 0x03
    3606:	81 ff       	sbrs	r24, 1
    3608:	d1 c1       	rjmp	.+930    	; 0x39ac <vfprintf+0x3c0>
    360a:	2e 01       	movw	r4, r28
    360c:	08 94       	sec
    360e:	41 1c       	adc	r4, r1
    3610:	51 1c       	adc	r5, r1
    3612:	f6 01       	movw	r30, r12
    3614:	93 81       	ldd	r25, Z+3	; 0x03
    3616:	f1 01       	movw	r30, r2
    3618:	93 fd       	sbrc	r25, 3
    361a:	85 91       	lpm	r24, Z+
    361c:	93 ff       	sbrs	r25, 3
    361e:	81 91       	ld	r24, Z+
    3620:	1f 01       	movw	r2, r30
    3622:	88 23       	and	r24, r24
    3624:	09 f4       	brne	.+2      	; 0x3628 <vfprintf+0x3c>
    3626:	be c1       	rjmp	.+892    	; 0x39a4 <vfprintf+0x3b8>
    3628:	85 32       	cpi	r24, 0x25	; 37
    362a:	39 f4       	brne	.+14     	; 0x363a <vfprintf+0x4e>
    362c:	93 fd       	sbrc	r25, 3
    362e:	85 91       	lpm	r24, Z+
    3630:	93 ff       	sbrs	r25, 3
    3632:	81 91       	ld	r24, Z+
    3634:	1f 01       	movw	r2, r30
    3636:	85 32       	cpi	r24, 0x25	; 37
    3638:	29 f4       	brne	.+10     	; 0x3644 <vfprintf+0x58>
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	b6 01       	movw	r22, r12
    363e:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    3642:	e7 cf       	rjmp	.-50     	; 0x3612 <vfprintf+0x26>
    3644:	ee 24       	eor	r14, r14
    3646:	ff 24       	eor	r15, r15
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	20 32       	cpi	r18, 0x20	; 32
    364c:	b0 f4       	brcc	.+44     	; 0x367a <vfprintf+0x8e>
    364e:	8b 32       	cpi	r24, 0x2B	; 43
    3650:	69 f0       	breq	.+26     	; 0x366c <vfprintf+0x80>
    3652:	8c 32       	cpi	r24, 0x2C	; 44
    3654:	28 f4       	brcc	.+10     	; 0x3660 <vfprintf+0x74>
    3656:	80 32       	cpi	r24, 0x20	; 32
    3658:	51 f0       	breq	.+20     	; 0x366e <vfprintf+0x82>
    365a:	83 32       	cpi	r24, 0x23	; 35
    365c:	71 f4       	brne	.+28     	; 0x367a <vfprintf+0x8e>
    365e:	0b c0       	rjmp	.+22     	; 0x3676 <vfprintf+0x8a>
    3660:	8d 32       	cpi	r24, 0x2D	; 45
    3662:	39 f0       	breq	.+14     	; 0x3672 <vfprintf+0x86>
    3664:	80 33       	cpi	r24, 0x30	; 48
    3666:	49 f4       	brne	.+18     	; 0x367a <vfprintf+0x8e>
    3668:	21 60       	ori	r18, 0x01	; 1
    366a:	2c c0       	rjmp	.+88     	; 0x36c4 <vfprintf+0xd8>
    366c:	22 60       	ori	r18, 0x02	; 2
    366e:	24 60       	ori	r18, 0x04	; 4
    3670:	29 c0       	rjmp	.+82     	; 0x36c4 <vfprintf+0xd8>
    3672:	28 60       	ori	r18, 0x08	; 8
    3674:	27 c0       	rjmp	.+78     	; 0x36c4 <vfprintf+0xd8>
    3676:	20 61       	ori	r18, 0x10	; 16
    3678:	25 c0       	rjmp	.+74     	; 0x36c4 <vfprintf+0xd8>
    367a:	27 fd       	sbrc	r18, 7
    367c:	2c c0       	rjmp	.+88     	; 0x36d6 <vfprintf+0xea>
    367e:	38 2f       	mov	r19, r24
    3680:	30 53       	subi	r19, 0x30	; 48
    3682:	3a 30       	cpi	r19, 0x0A	; 10
    3684:	98 f4       	brcc	.+38     	; 0x36ac <vfprintf+0xc0>
    3686:	26 ff       	sbrs	r18, 6
    3688:	08 c0       	rjmp	.+16     	; 0x369a <vfprintf+0xae>
    368a:	8e 2d       	mov	r24, r14
    368c:	88 0f       	add	r24, r24
    368e:	e8 2e       	mov	r14, r24
    3690:	ee 0c       	add	r14, r14
    3692:	ee 0c       	add	r14, r14
    3694:	e8 0e       	add	r14, r24
    3696:	e3 0e       	add	r14, r19
    3698:	15 c0       	rjmp	.+42     	; 0x36c4 <vfprintf+0xd8>
    369a:	8f 2d       	mov	r24, r15
    369c:	88 0f       	add	r24, r24
    369e:	f8 2e       	mov	r15, r24
    36a0:	ff 0c       	add	r15, r15
    36a2:	ff 0c       	add	r15, r15
    36a4:	f8 0e       	add	r15, r24
    36a6:	f3 0e       	add	r15, r19
    36a8:	20 62       	ori	r18, 0x20	; 32
    36aa:	0c c0       	rjmp	.+24     	; 0x36c4 <vfprintf+0xd8>
    36ac:	8e 32       	cpi	r24, 0x2E	; 46
    36ae:	21 f4       	brne	.+8      	; 0x36b8 <vfprintf+0xcc>
    36b0:	26 fd       	sbrc	r18, 6
    36b2:	78 c1       	rjmp	.+752    	; 0x39a4 <vfprintf+0x3b8>
    36b4:	20 64       	ori	r18, 0x40	; 64
    36b6:	06 c0       	rjmp	.+12     	; 0x36c4 <vfprintf+0xd8>
    36b8:	8c 36       	cpi	r24, 0x6C	; 108
    36ba:	11 f4       	brne	.+4      	; 0x36c0 <vfprintf+0xd4>
    36bc:	20 68       	ori	r18, 0x80	; 128
    36be:	02 c0       	rjmp	.+4      	; 0x36c4 <vfprintf+0xd8>
    36c0:	88 36       	cpi	r24, 0x68	; 104
    36c2:	49 f4       	brne	.+18     	; 0x36d6 <vfprintf+0xea>
    36c4:	f1 01       	movw	r30, r2
    36c6:	93 fd       	sbrc	r25, 3
    36c8:	85 91       	lpm	r24, Z+
    36ca:	93 ff       	sbrs	r25, 3
    36cc:	81 91       	ld	r24, Z+
    36ce:	1f 01       	movw	r2, r30
    36d0:	88 23       	and	r24, r24
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <vfprintf+0xea>
    36d4:	ba cf       	rjmp	.-140    	; 0x364a <vfprintf+0x5e>
    36d6:	98 2f       	mov	r25, r24
    36d8:	95 54       	subi	r25, 0x45	; 69
    36da:	93 30       	cpi	r25, 0x03	; 3
    36dc:	18 f0       	brcs	.+6      	; 0x36e4 <vfprintf+0xf8>
    36de:	90 52       	subi	r25, 0x20	; 32
    36e0:	93 30       	cpi	r25, 0x03	; 3
    36e2:	28 f4       	brcc	.+10     	; 0x36ee <vfprintf+0x102>
    36e4:	0c 5f       	subi	r16, 0xFC	; 252
    36e6:	1f 4f       	sbci	r17, 0xFF	; 255
    36e8:	ff e3       	ldi	r31, 0x3F	; 63
    36ea:	f9 83       	std	Y+1, r31	; 0x01
    36ec:	0d c0       	rjmp	.+26     	; 0x3708 <vfprintf+0x11c>
    36ee:	83 36       	cpi	r24, 0x63	; 99
    36f0:	31 f0       	breq	.+12     	; 0x36fe <vfprintf+0x112>
    36f2:	83 37       	cpi	r24, 0x73	; 115
    36f4:	71 f0       	breq	.+28     	; 0x3712 <vfprintf+0x126>
    36f6:	83 35       	cpi	r24, 0x53	; 83
    36f8:	09 f0       	breq	.+2      	; 0x36fc <vfprintf+0x110>
    36fa:	60 c0       	rjmp	.+192    	; 0x37bc <vfprintf+0x1d0>
    36fc:	22 c0       	rjmp	.+68     	; 0x3742 <vfprintf+0x156>
    36fe:	f8 01       	movw	r30, r16
    3700:	80 81       	ld	r24, Z
    3702:	89 83       	std	Y+1, r24	; 0x01
    3704:	0e 5f       	subi	r16, 0xFE	; 254
    3706:	1f 4f       	sbci	r17, 0xFF	; 255
    3708:	42 01       	movw	r8, r4
    370a:	71 e0       	ldi	r23, 0x01	; 1
    370c:	a7 2e       	mov	r10, r23
    370e:	b1 2c       	mov	r11, r1
    3710:	16 c0       	rjmp	.+44     	; 0x373e <vfprintf+0x152>
    3712:	62 e0       	ldi	r22, 0x02	; 2
    3714:	66 2e       	mov	r6, r22
    3716:	71 2c       	mov	r7, r1
    3718:	60 0e       	add	r6, r16
    371a:	71 1e       	adc	r7, r17
    371c:	f8 01       	movw	r30, r16
    371e:	80 80       	ld	r8, Z
    3720:	91 80       	ldd	r9, Z+1	; 0x01
    3722:	26 ff       	sbrs	r18, 6
    3724:	03 c0       	rjmp	.+6      	; 0x372c <vfprintf+0x140>
    3726:	6e 2d       	mov	r22, r14
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <vfprintf+0x144>
    372c:	6f ef       	ldi	r22, 0xFF	; 255
    372e:	7f ef       	ldi	r23, 0xFF	; 255
    3730:	c4 01       	movw	r24, r8
    3732:	2c 87       	std	Y+12, r18	; 0x0c
    3734:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <strnlen>
    3738:	5c 01       	movw	r10, r24
    373a:	83 01       	movw	r16, r6
    373c:	2c 85       	ldd	r18, Y+12	; 0x0c
    373e:	2f 77       	andi	r18, 0x7F	; 127
    3740:	17 c0       	rjmp	.+46     	; 0x3770 <vfprintf+0x184>
    3742:	52 e0       	ldi	r21, 0x02	; 2
    3744:	65 2e       	mov	r6, r21
    3746:	71 2c       	mov	r7, r1
    3748:	60 0e       	add	r6, r16
    374a:	71 1e       	adc	r7, r17
    374c:	f8 01       	movw	r30, r16
    374e:	80 80       	ld	r8, Z
    3750:	91 80       	ldd	r9, Z+1	; 0x01
    3752:	26 ff       	sbrs	r18, 6
    3754:	03 c0       	rjmp	.+6      	; 0x375c <vfprintf+0x170>
    3756:	6e 2d       	mov	r22, r14
    3758:	70 e0       	ldi	r23, 0x00	; 0
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <vfprintf+0x174>
    375c:	6f ef       	ldi	r22, 0xFF	; 255
    375e:	7f ef       	ldi	r23, 0xFF	; 255
    3760:	c4 01       	movw	r24, r8
    3762:	2c 87       	std	Y+12, r18	; 0x0c
    3764:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <strnlen_P>
    3768:	5c 01       	movw	r10, r24
    376a:	2c 85       	ldd	r18, Y+12	; 0x0c
    376c:	20 68       	ori	r18, 0x80	; 128
    376e:	83 01       	movw	r16, r6
    3770:	23 fd       	sbrc	r18, 3
    3772:	20 c0       	rjmp	.+64     	; 0x37b4 <vfprintf+0x1c8>
    3774:	08 c0       	rjmp	.+16     	; 0x3786 <vfprintf+0x19a>
    3776:	80 e2       	ldi	r24, 0x20	; 32
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	b6 01       	movw	r22, r12
    377c:	2c 87       	std	Y+12, r18	; 0x0c
    377e:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    3782:	fa 94       	dec	r15
    3784:	2c 85       	ldd	r18, Y+12	; 0x0c
    3786:	8f 2d       	mov	r24, r15
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	a8 16       	cp	r10, r24
    378c:	b9 06       	cpc	r11, r25
    378e:	98 f3       	brcs	.-26     	; 0x3776 <vfprintf+0x18a>
    3790:	11 c0       	rjmp	.+34     	; 0x37b4 <vfprintf+0x1c8>
    3792:	f4 01       	movw	r30, r8
    3794:	27 fd       	sbrc	r18, 7
    3796:	85 91       	lpm	r24, Z+
    3798:	27 ff       	sbrs	r18, 7
    379a:	81 91       	ld	r24, Z+
    379c:	4f 01       	movw	r8, r30
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	b6 01       	movw	r22, r12
    37a2:	2c 87       	std	Y+12, r18	; 0x0c
    37a4:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    37a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    37aa:	f1 10       	cpse	r15, r1
    37ac:	fa 94       	dec	r15
    37ae:	08 94       	sec
    37b0:	a1 08       	sbc	r10, r1
    37b2:	b1 08       	sbc	r11, r1
    37b4:	a1 14       	cp	r10, r1
    37b6:	b1 04       	cpc	r11, r1
    37b8:	61 f7       	brne	.-40     	; 0x3792 <vfprintf+0x1a6>
    37ba:	f1 c0       	rjmp	.+482    	; 0x399e <vfprintf+0x3b2>
    37bc:	84 36       	cpi	r24, 0x64	; 100
    37be:	11 f0       	breq	.+4      	; 0x37c4 <vfprintf+0x1d8>
    37c0:	89 36       	cpi	r24, 0x69	; 105
    37c2:	49 f5       	brne	.+82     	; 0x3816 <vfprintf+0x22a>
    37c4:	27 ff       	sbrs	r18, 7
    37c6:	08 c0       	rjmp	.+16     	; 0x37d8 <vfprintf+0x1ec>
    37c8:	f8 01       	movw	r30, r16
    37ca:	60 81       	ld	r22, Z
    37cc:	71 81       	ldd	r23, Z+1	; 0x01
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	93 81       	ldd	r25, Z+3	; 0x03
    37d2:	0c 5f       	subi	r16, 0xFC	; 252
    37d4:	1f 4f       	sbci	r17, 0xFF	; 255
    37d6:	09 c0       	rjmp	.+18     	; 0x37ea <vfprintf+0x1fe>
    37d8:	f8 01       	movw	r30, r16
    37da:	60 81       	ld	r22, Z
    37dc:	71 81       	ldd	r23, Z+1	; 0x01
    37de:	88 27       	eor	r24, r24
    37e0:	77 fd       	sbrc	r23, 7
    37e2:	80 95       	com	r24
    37e4:	98 2f       	mov	r25, r24
    37e6:	0e 5f       	subi	r16, 0xFE	; 254
    37e8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ea:	4f e6       	ldi	r20, 0x6F	; 111
    37ec:	b4 2e       	mov	r11, r20
    37ee:	b2 22       	and	r11, r18
    37f0:	97 ff       	sbrs	r25, 7
    37f2:	09 c0       	rjmp	.+18     	; 0x3806 <vfprintf+0x21a>
    37f4:	90 95       	com	r25
    37f6:	80 95       	com	r24
    37f8:	70 95       	com	r23
    37fa:	61 95       	neg	r22
    37fc:	7f 4f       	sbci	r23, 0xFF	; 255
    37fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3800:	9f 4f       	sbci	r25, 0xFF	; 255
    3802:	f0 e8       	ldi	r31, 0x80	; 128
    3804:	bf 2a       	or	r11, r31
    3806:	a2 01       	movw	r20, r4
    3808:	2a e0       	ldi	r18, 0x0A	; 10
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__ultoa_invert>
    3810:	78 2e       	mov	r7, r24
    3812:	74 18       	sub	r7, r4
    3814:	45 c0       	rjmp	.+138    	; 0x38a0 <vfprintf+0x2b4>
    3816:	85 37       	cpi	r24, 0x75	; 117
    3818:	31 f4       	brne	.+12     	; 0x3826 <vfprintf+0x23a>
    381a:	3f ee       	ldi	r19, 0xEF	; 239
    381c:	b3 2e       	mov	r11, r19
    381e:	b2 22       	and	r11, r18
    3820:	2a e0       	ldi	r18, 0x0A	; 10
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	25 c0       	rjmp	.+74     	; 0x3870 <vfprintf+0x284>
    3826:	99 ef       	ldi	r25, 0xF9	; 249
    3828:	b9 2e       	mov	r11, r25
    382a:	b2 22       	and	r11, r18
    382c:	8f 36       	cpi	r24, 0x6F	; 111
    382e:	c1 f0       	breq	.+48     	; 0x3860 <vfprintf+0x274>
    3830:	80 37       	cpi	r24, 0x70	; 112
    3832:	20 f4       	brcc	.+8      	; 0x383c <vfprintf+0x250>
    3834:	88 35       	cpi	r24, 0x58	; 88
    3836:	09 f0       	breq	.+2      	; 0x383a <vfprintf+0x24e>
    3838:	b5 c0       	rjmp	.+362    	; 0x39a4 <vfprintf+0x3b8>
    383a:	0d c0       	rjmp	.+26     	; 0x3856 <vfprintf+0x26a>
    383c:	80 37       	cpi	r24, 0x70	; 112
    383e:	21 f0       	breq	.+8      	; 0x3848 <vfprintf+0x25c>
    3840:	88 37       	cpi	r24, 0x78	; 120
    3842:	09 f0       	breq	.+2      	; 0x3846 <vfprintf+0x25a>
    3844:	af c0       	rjmp	.+350    	; 0x39a4 <vfprintf+0x3b8>
    3846:	02 c0       	rjmp	.+4      	; 0x384c <vfprintf+0x260>
    3848:	20 e1       	ldi	r18, 0x10	; 16
    384a:	b2 2a       	or	r11, r18
    384c:	b4 fe       	sbrs	r11, 4
    384e:	0b c0       	rjmp	.+22     	; 0x3866 <vfprintf+0x27a>
    3850:	84 e0       	ldi	r24, 0x04	; 4
    3852:	b8 2a       	or	r11, r24
    3854:	08 c0       	rjmp	.+16     	; 0x3866 <vfprintf+0x27a>
    3856:	b4 fe       	sbrs	r11, 4
    3858:	09 c0       	rjmp	.+18     	; 0x386c <vfprintf+0x280>
    385a:	e6 e0       	ldi	r30, 0x06	; 6
    385c:	be 2a       	or	r11, r30
    385e:	06 c0       	rjmp	.+12     	; 0x386c <vfprintf+0x280>
    3860:	28 e0       	ldi	r18, 0x08	; 8
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	05 c0       	rjmp	.+10     	; 0x3870 <vfprintf+0x284>
    3866:	20 e1       	ldi	r18, 0x10	; 16
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <vfprintf+0x284>
    386c:	20 e1       	ldi	r18, 0x10	; 16
    386e:	32 e0       	ldi	r19, 0x02	; 2
    3870:	b7 fe       	sbrs	r11, 7
    3872:	08 c0       	rjmp	.+16     	; 0x3884 <vfprintf+0x298>
    3874:	f8 01       	movw	r30, r16
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	0c 5f       	subi	r16, 0xFC	; 252
    3880:	1f 4f       	sbci	r17, 0xFF	; 255
    3882:	07 c0       	rjmp	.+14     	; 0x3892 <vfprintf+0x2a6>
    3884:	f8 01       	movw	r30, r16
    3886:	60 81       	ld	r22, Z
    3888:	71 81       	ldd	r23, Z+1	; 0x01
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	0e 5f       	subi	r16, 0xFE	; 254
    3890:	1f 4f       	sbci	r17, 0xFF	; 255
    3892:	a2 01       	movw	r20, r4
    3894:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__ultoa_invert>
    3898:	78 2e       	mov	r7, r24
    389a:	74 18       	sub	r7, r4
    389c:	ff e7       	ldi	r31, 0x7F	; 127
    389e:	bf 22       	and	r11, r31
    38a0:	b6 fe       	sbrs	r11, 6
    38a2:	0b c0       	rjmp	.+22     	; 0x38ba <vfprintf+0x2ce>
    38a4:	2e ef       	ldi	r18, 0xFE	; 254
    38a6:	b2 22       	and	r11, r18
    38a8:	7e 14       	cp	r7, r14
    38aa:	38 f4       	brcc	.+14     	; 0x38ba <vfprintf+0x2ce>
    38ac:	b4 fe       	sbrs	r11, 4
    38ae:	07 c0       	rjmp	.+14     	; 0x38be <vfprintf+0x2d2>
    38b0:	b2 fc       	sbrc	r11, 2
    38b2:	05 c0       	rjmp	.+10     	; 0x38be <vfprintf+0x2d2>
    38b4:	8f ee       	ldi	r24, 0xEF	; 239
    38b6:	b8 22       	and	r11, r24
    38b8:	02 c0       	rjmp	.+4      	; 0x38be <vfprintf+0x2d2>
    38ba:	a7 2c       	mov	r10, r7
    38bc:	01 c0       	rjmp	.+2      	; 0x38c0 <vfprintf+0x2d4>
    38be:	ae 2c       	mov	r10, r14
    38c0:	8b 2d       	mov	r24, r11
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	b4 fe       	sbrs	r11, 4
    38c6:	0d c0       	rjmp	.+26     	; 0x38e2 <vfprintf+0x2f6>
    38c8:	fe 01       	movw	r30, r28
    38ca:	e7 0d       	add	r30, r7
    38cc:	f1 1d       	adc	r31, r1
    38ce:	20 81       	ld	r18, Z
    38d0:	20 33       	cpi	r18, 0x30	; 48
    38d2:	19 f4       	brne	.+6      	; 0x38da <vfprintf+0x2ee>
    38d4:	e9 ee       	ldi	r30, 0xE9	; 233
    38d6:	be 22       	and	r11, r30
    38d8:	09 c0       	rjmp	.+18     	; 0x38ec <vfprintf+0x300>
    38da:	a3 94       	inc	r10
    38dc:	b2 fe       	sbrs	r11, 2
    38de:	06 c0       	rjmp	.+12     	; 0x38ec <vfprintf+0x300>
    38e0:	04 c0       	rjmp	.+8      	; 0x38ea <vfprintf+0x2fe>
    38e2:	86 78       	andi	r24, 0x86	; 134
    38e4:	90 70       	andi	r25, 0x00	; 0
    38e6:	00 97       	sbiw	r24, 0x00	; 0
    38e8:	09 f0       	breq	.+2      	; 0x38ec <vfprintf+0x300>
    38ea:	a3 94       	inc	r10
    38ec:	8b 2c       	mov	r8, r11
    38ee:	99 24       	eor	r9, r9
    38f0:	b3 fc       	sbrc	r11, 3
    38f2:	14 c0       	rjmp	.+40     	; 0x391c <vfprintf+0x330>
    38f4:	b0 fe       	sbrs	r11, 0
    38f6:	0f c0       	rjmp	.+30     	; 0x3916 <vfprintf+0x32a>
    38f8:	af 14       	cp	r10, r15
    38fa:	28 f4       	brcc	.+10     	; 0x3906 <vfprintf+0x31a>
    38fc:	e7 2c       	mov	r14, r7
    38fe:	ef 0c       	add	r14, r15
    3900:	ea 18       	sub	r14, r10
    3902:	af 2c       	mov	r10, r15
    3904:	08 c0       	rjmp	.+16     	; 0x3916 <vfprintf+0x32a>
    3906:	e7 2c       	mov	r14, r7
    3908:	06 c0       	rjmp	.+12     	; 0x3916 <vfprintf+0x32a>
    390a:	80 e2       	ldi	r24, 0x20	; 32
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	b6 01       	movw	r22, r12
    3910:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    3914:	a3 94       	inc	r10
    3916:	af 14       	cp	r10, r15
    3918:	c0 f3       	brcs	.-16     	; 0x390a <vfprintf+0x31e>
    391a:	04 c0       	rjmp	.+8      	; 0x3924 <vfprintf+0x338>
    391c:	af 14       	cp	r10, r15
    391e:	10 f4       	brcc	.+4      	; 0x3924 <vfprintf+0x338>
    3920:	fa 18       	sub	r15, r10
    3922:	01 c0       	rjmp	.+2      	; 0x3926 <vfprintf+0x33a>
    3924:	ff 24       	eor	r15, r15
    3926:	84 fe       	sbrs	r8, 4
    3928:	0f c0       	rjmp	.+30     	; 0x3948 <vfprintf+0x35c>
    392a:	80 e3       	ldi	r24, 0x30	; 48
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	b6 01       	movw	r22, r12
    3930:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    3934:	82 fe       	sbrs	r8, 2
    3936:	1f c0       	rjmp	.+62     	; 0x3976 <vfprintf+0x38a>
    3938:	81 fe       	sbrs	r8, 1
    393a:	03 c0       	rjmp	.+6      	; 0x3942 <vfprintf+0x356>
    393c:	88 e5       	ldi	r24, 0x58	; 88
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	10 c0       	rjmp	.+32     	; 0x3962 <vfprintf+0x376>
    3942:	88 e7       	ldi	r24, 0x78	; 120
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0d c0       	rjmp	.+26     	; 0x3962 <vfprintf+0x376>
    3948:	c4 01       	movw	r24, r8
    394a:	86 78       	andi	r24, 0x86	; 134
    394c:	90 70       	andi	r25, 0x00	; 0
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	91 f0       	breq	.+36     	; 0x3976 <vfprintf+0x38a>
    3952:	81 fc       	sbrc	r8, 1
    3954:	02 c0       	rjmp	.+4      	; 0x395a <vfprintf+0x36e>
    3956:	80 e2       	ldi	r24, 0x20	; 32
    3958:	01 c0       	rjmp	.+2      	; 0x395c <vfprintf+0x370>
    395a:	8b e2       	ldi	r24, 0x2B	; 43
    395c:	b7 fc       	sbrc	r11, 7
    395e:	8d e2       	ldi	r24, 0x2D	; 45
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	b6 01       	movw	r22, r12
    3964:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    3968:	06 c0       	rjmp	.+12     	; 0x3976 <vfprintf+0x38a>
    396a:	80 e3       	ldi	r24, 0x30	; 48
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	b6 01       	movw	r22, r12
    3970:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    3974:	ea 94       	dec	r14
    3976:	7e 14       	cp	r7, r14
    3978:	c0 f3       	brcs	.-16     	; 0x396a <vfprintf+0x37e>
    397a:	7a 94       	dec	r7
    397c:	f2 01       	movw	r30, r4
    397e:	e7 0d       	add	r30, r7
    3980:	f1 1d       	adc	r31, r1
    3982:	80 81       	ld	r24, Z
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	b6 01       	movw	r22, r12
    3988:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    398c:	77 20       	and	r7, r7
    398e:	a9 f7       	brne	.-22     	; 0x397a <vfprintf+0x38e>
    3990:	06 c0       	rjmp	.+12     	; 0x399e <vfprintf+0x3b2>
    3992:	80 e2       	ldi	r24, 0x20	; 32
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	b6 01       	movw	r22, r12
    3998:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <fputc>
    399c:	fa 94       	dec	r15
    399e:	ff 20       	and	r15, r15
    39a0:	c1 f7       	brne	.-16     	; 0x3992 <vfprintf+0x3a6>
    39a2:	37 ce       	rjmp	.-914    	; 0x3612 <vfprintf+0x26>
    39a4:	f6 01       	movw	r30, r12
    39a6:	26 81       	ldd	r18, Z+6	; 0x06
    39a8:	37 81       	ldd	r19, Z+7	; 0x07
    39aa:	02 c0       	rjmp	.+4      	; 0x39b0 <vfprintf+0x3c4>
    39ac:	2f ef       	ldi	r18, 0xFF	; 255
    39ae:	3f ef       	ldi	r19, 0xFF	; 255
    39b0:	c9 01       	movw	r24, r18
    39b2:	2c 96       	adiw	r28, 0x0c	; 12
    39b4:	e2 e1       	ldi	r30, 0x12	; 18
    39b6:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__epilogue_restores__>

000039ba <__eerd_block_m168>:
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22

000039be <__eerd_blraw_m168>:
    39be:	fc 01       	movw	r30, r24
    39c0:	f9 99       	sbic	0x1f, 1	; 31
    39c2:	fe cf       	rjmp	.-4      	; 0x39c0 <__eerd_blraw_m168+0x2>
    39c4:	06 c0       	rjmp	.+12     	; 0x39d2 <__eerd_blraw_m168+0x14>
    39c6:	f2 bd       	out	0x22, r31	; 34
    39c8:	e1 bd       	out	0x21, r30	; 33
    39ca:	f8 9a       	sbi	0x1f, 0	; 31
    39cc:	31 96       	adiw	r30, 0x01	; 1
    39ce:	00 b4       	in	r0, 0x20	; 32
    39d0:	0d 92       	st	X+, r0
    39d2:	41 50       	subi	r20, 0x01	; 1
    39d4:	50 40       	sbci	r21, 0x00	; 0
    39d6:	b8 f7       	brcc	.-18     	; 0x39c6 <__eerd_blraw_m168+0x8>
    39d8:	08 95       	ret

000039da <__eerd_byte_m168>:
    39da:	f9 99       	sbic	0x1f, 1	; 31
    39dc:	fe cf       	rjmp	.-4      	; 0x39da <__eerd_byte_m168>
    39de:	92 bd       	out	0x22, r25	; 34
    39e0:	81 bd       	out	0x21, r24	; 33
    39e2:	f8 9a       	sbi	0x1f, 0	; 31
    39e4:	99 27       	eor	r25, r25
    39e6:	80 b5       	in	r24, 0x20	; 32
    39e8:	08 95       	ret

000039ea <__eewr_byte_m168>:
    39ea:	26 2f       	mov	r18, r22

000039ec <__eewr_r18_m168>:
    39ec:	f9 99       	sbic	0x1f, 1	; 31
    39ee:	fe cf       	rjmp	.-4      	; 0x39ec <__eewr_r18_m168>
    39f0:	1f ba       	out	0x1f, r1	; 31
    39f2:	92 bd       	out	0x22, r25	; 34
    39f4:	81 bd       	out	0x21, r24	; 33
    39f6:	20 bd       	out	0x20, r18	; 32
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	f8 94       	cli
    39fc:	fa 9a       	sbi	0x1f, 2	; 31
    39fe:	f9 9a       	sbi	0x1f, 1	; 31
    3a00:	0f be       	out	0x3f, r0	; 63
    3a02:	01 96       	adiw	r24, 0x01	; 1
    3a04:	08 95       	ret

00003a06 <strnlen_P>:
    3a06:	fc 01       	movw	r30, r24
    3a08:	05 90       	lpm	r0, Z+
    3a0a:	61 50       	subi	r22, 0x01	; 1
    3a0c:	70 40       	sbci	r23, 0x00	; 0
    3a0e:	01 10       	cpse	r0, r1
    3a10:	d8 f7       	brcc	.-10     	; 0x3a08 <strnlen_P+0x2>
    3a12:	80 95       	com	r24
    3a14:	90 95       	com	r25
    3a16:	8e 0f       	add	r24, r30
    3a18:	9f 1f       	adc	r25, r31
    3a1a:	08 95       	ret

00003a1c <strnlen>:
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	61 50       	subi	r22, 0x01	; 1
    3a20:	70 40       	sbci	r23, 0x00	; 0
    3a22:	01 90       	ld	r0, Z+
    3a24:	01 10       	cpse	r0, r1
    3a26:	d8 f7       	brcc	.-10     	; 0x3a1e <strnlen+0x2>
    3a28:	80 95       	com	r24
    3a2a:	90 95       	com	r25
    3a2c:	8e 0f       	add	r24, r30
    3a2e:	9f 1f       	adc	r25, r31
    3a30:	08 95       	ret

00003a32 <fputc>:
    3a32:	0f 93       	push	r16
    3a34:	1f 93       	push	r17
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	8c 01       	movw	r16, r24
    3a3c:	eb 01       	movw	r28, r22
    3a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a40:	81 ff       	sbrs	r24, 1
    3a42:	1b c0       	rjmp	.+54     	; 0x3a7a <fputc+0x48>
    3a44:	82 ff       	sbrs	r24, 2
    3a46:	0d c0       	rjmp	.+26     	; 0x3a62 <fputc+0x30>
    3a48:	2e 81       	ldd	r18, Y+6	; 0x06
    3a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    3a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a50:	28 17       	cp	r18, r24
    3a52:	39 07       	cpc	r19, r25
    3a54:	64 f4       	brge	.+24     	; 0x3a6e <fputc+0x3c>
    3a56:	e8 81       	ld	r30, Y
    3a58:	f9 81       	ldd	r31, Y+1	; 0x01
    3a5a:	01 93       	st	Z+, r16
    3a5c:	f9 83       	std	Y+1, r31	; 0x01
    3a5e:	e8 83       	st	Y, r30
    3a60:	06 c0       	rjmp	.+12     	; 0x3a6e <fputc+0x3c>
    3a62:	e8 85       	ldd	r30, Y+8	; 0x08
    3a64:	f9 85       	ldd	r31, Y+9	; 0x09
    3a66:	80 2f       	mov	r24, r16
    3a68:	09 95       	icall
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	31 f4       	brne	.+12     	; 0x3a7a <fputc+0x48>
    3a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a70:	9f 81       	ldd	r25, Y+7	; 0x07
    3a72:	01 96       	adiw	r24, 0x01	; 1
    3a74:	9f 83       	std	Y+7, r25	; 0x07
    3a76:	8e 83       	std	Y+6, r24	; 0x06
    3a78:	02 c0       	rjmp	.+4      	; 0x3a7e <fputc+0x4c>
    3a7a:	0f ef       	ldi	r16, 0xFF	; 255
    3a7c:	1f ef       	ldi	r17, 0xFF	; 255
    3a7e:	c8 01       	movw	r24, r16
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	08 95       	ret

00003a8a <__ultoa_invert>:
    3a8a:	fa 01       	movw	r30, r20
    3a8c:	aa 27       	eor	r26, r26
    3a8e:	28 30       	cpi	r18, 0x08	; 8
    3a90:	51 f1       	breq	.+84     	; 0x3ae6 <__ultoa_invert+0x5c>
    3a92:	20 31       	cpi	r18, 0x10	; 16
    3a94:	81 f1       	breq	.+96     	; 0x3af6 <__ultoa_invert+0x6c>
    3a96:	e8 94       	clt
    3a98:	6f 93       	push	r22
    3a9a:	6e 7f       	andi	r22, 0xFE	; 254
    3a9c:	6e 5f       	subi	r22, 0xFE	; 254
    3a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    3aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa4:	af 4f       	sbci	r26, 0xFF	; 255
    3aa6:	b1 e0       	ldi	r27, 0x01	; 1
    3aa8:	3e d0       	rcall	.+124    	; 0x3b26 <__ultoa_invert+0x9c>
    3aaa:	b4 e0       	ldi	r27, 0x04	; 4
    3aac:	3c d0       	rcall	.+120    	; 0x3b26 <__ultoa_invert+0x9c>
    3aae:	67 0f       	add	r22, r23
    3ab0:	78 1f       	adc	r23, r24
    3ab2:	89 1f       	adc	r24, r25
    3ab4:	9a 1f       	adc	r25, r26
    3ab6:	a1 1d       	adc	r26, r1
    3ab8:	68 0f       	add	r22, r24
    3aba:	79 1f       	adc	r23, r25
    3abc:	8a 1f       	adc	r24, r26
    3abe:	91 1d       	adc	r25, r1
    3ac0:	a1 1d       	adc	r26, r1
    3ac2:	6a 0f       	add	r22, r26
    3ac4:	71 1d       	adc	r23, r1
    3ac6:	81 1d       	adc	r24, r1
    3ac8:	91 1d       	adc	r25, r1
    3aca:	a1 1d       	adc	r26, r1
    3acc:	20 d0       	rcall	.+64     	; 0x3b0e <__ultoa_invert+0x84>
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <__ultoa_invert+0x48>
    3ad0:	68 94       	set
    3ad2:	3f 91       	pop	r19
    3ad4:	2a e0       	ldi	r18, 0x0A	; 10
    3ad6:	26 9f       	mul	r18, r22
    3ad8:	11 24       	eor	r1, r1
    3ada:	30 19       	sub	r19, r0
    3adc:	30 5d       	subi	r19, 0xD0	; 208
    3ade:	31 93       	st	Z+, r19
    3ae0:	de f6       	brtc	.-74     	; 0x3a98 <__ultoa_invert+0xe>
    3ae2:	cf 01       	movw	r24, r30
    3ae4:	08 95       	ret
    3ae6:	46 2f       	mov	r20, r22
    3ae8:	47 70       	andi	r20, 0x07	; 7
    3aea:	40 5d       	subi	r20, 0xD0	; 208
    3aec:	41 93       	st	Z+, r20
    3aee:	b3 e0       	ldi	r27, 0x03	; 3
    3af0:	0f d0       	rcall	.+30     	; 0x3b10 <__ultoa_invert+0x86>
    3af2:	c9 f7       	brne	.-14     	; 0x3ae6 <__ultoa_invert+0x5c>
    3af4:	f6 cf       	rjmp	.-20     	; 0x3ae2 <__ultoa_invert+0x58>
    3af6:	46 2f       	mov	r20, r22
    3af8:	4f 70       	andi	r20, 0x0F	; 15
    3afa:	40 5d       	subi	r20, 0xD0	; 208
    3afc:	4a 33       	cpi	r20, 0x3A	; 58
    3afe:	18 f0       	brcs	.+6      	; 0x3b06 <__ultoa_invert+0x7c>
    3b00:	49 5d       	subi	r20, 0xD9	; 217
    3b02:	31 fd       	sbrc	r19, 1
    3b04:	40 52       	subi	r20, 0x20	; 32
    3b06:	41 93       	st	Z+, r20
    3b08:	02 d0       	rcall	.+4      	; 0x3b0e <__ultoa_invert+0x84>
    3b0a:	a9 f7       	brne	.-22     	; 0x3af6 <__ultoa_invert+0x6c>
    3b0c:	ea cf       	rjmp	.-44     	; 0x3ae2 <__ultoa_invert+0x58>
    3b0e:	b4 e0       	ldi	r27, 0x04	; 4
    3b10:	a6 95       	lsr	r26
    3b12:	97 95       	ror	r25
    3b14:	87 95       	ror	r24
    3b16:	77 95       	ror	r23
    3b18:	67 95       	ror	r22
    3b1a:	ba 95       	dec	r27
    3b1c:	c9 f7       	brne	.-14     	; 0x3b10 <__ultoa_invert+0x86>
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	61 05       	cpc	r22, r1
    3b22:	71 05       	cpc	r23, r1
    3b24:	08 95       	ret
    3b26:	9b 01       	movw	r18, r22
    3b28:	ac 01       	movw	r20, r24
    3b2a:	0a 2e       	mov	r0, r26
    3b2c:	06 94       	lsr	r0
    3b2e:	57 95       	ror	r21
    3b30:	47 95       	ror	r20
    3b32:	37 95       	ror	r19
    3b34:	27 95       	ror	r18
    3b36:	ba 95       	dec	r27
    3b38:	c9 f7       	brne	.-14     	; 0x3b2c <__ultoa_invert+0xa2>
    3b3a:	62 0f       	add	r22, r18
    3b3c:	73 1f       	adc	r23, r19
    3b3e:	84 1f       	adc	r24, r20
    3b40:	95 1f       	adc	r25, r21
    3b42:	a0 1d       	adc	r26, r0
    3b44:	08 95       	ret

00003b46 <__prologue_saves__>:
    3b46:	2f 92       	push	r2
    3b48:	3f 92       	push	r3
    3b4a:	4f 92       	push	r4
    3b4c:	5f 92       	push	r5
    3b4e:	6f 92       	push	r6
    3b50:	7f 92       	push	r7
    3b52:	8f 92       	push	r8
    3b54:	9f 92       	push	r9
    3b56:	af 92       	push	r10
    3b58:	bf 92       	push	r11
    3b5a:	cf 92       	push	r12
    3b5c:	df 92       	push	r13
    3b5e:	ef 92       	push	r14
    3b60:	ff 92       	push	r15
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	ca 1b       	sub	r28, r26
    3b70:	db 0b       	sbc	r29, r27
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	09 94       	ijmp

00003b7e <__epilogue_restores__>:
    3b7e:	2a 88       	ldd	r2, Y+18	; 0x12
    3b80:	39 88       	ldd	r3, Y+17	; 0x11
    3b82:	48 88       	ldd	r4, Y+16	; 0x10
    3b84:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b86:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b88:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b90:	b9 84       	ldd	r11, Y+9	; 0x09
    3b92:	c8 84       	ldd	r12, Y+8	; 0x08
    3b94:	df 80       	ldd	r13, Y+7	; 0x07
    3b96:	ee 80       	ldd	r14, Y+6	; 0x06
    3b98:	fd 80       	ldd	r15, Y+5	; 0x05
    3b9a:	0c 81       	ldd	r16, Y+4	; 0x04
    3b9c:	1b 81       	ldd	r17, Y+3	; 0x03
    3b9e:	aa 81       	ldd	r26, Y+2	; 0x02
    3ba0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ba2:	ce 0f       	add	r28, r30
    3ba4:	d1 1d       	adc	r29, r1
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61
    3bb0:	ed 01       	movw	r28, r26
    3bb2:	08 95       	ret

00003bb4 <_exit>:
    3bb4:	f8 94       	cli

00003bb6 <__stop_program>:
    3bb6:	ff cf       	rjmp	.-2      	; 0x3bb6 <__stop_program>
