
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00003e9a  00003f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e9a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800132  00800132  00003f80  2**0
                  ALLOC
  3 .eeprom       00000029  00810000  00810000  00003f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005cac  00000000  00000000  00003fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000023c8  00000000  00000000  00009c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	ea e9       	ldi	r30, 0x9A	; 154
     1b8:	fe e3       	ldi	r31, 0x3E	; 62
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a2 33       	cpi	r26, 0x32	; 50
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	a2 e3       	ldi	r26, 0x32	; 50
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a2 3e       	cpi	r26, 0xE2	; 226
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <main>
     1da:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_11>:

// Timer1 ISR
//
// Timer1 is the sinewave generator.
ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_11+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 32 01 	lds	r24, 0x0132
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_11+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_11+0xae>
	{
		//SIDETONE_DDR |= _BV(SIDETONE);

		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 96 01 	lds	r18, 0x0196
     21c:	30 91 97 01 	lds	r19, 0x0197
     220:	40 91 98 01 	lds	r20, 0x0198
     224:	50 91 99 01 	lds	r21, 0x0199
     228:	80 91 a8 01 	lds	r24, 0x01A8
     22c:	90 91 a9 01 	lds	r25, 0x01A9
     230:	a0 91 aa 01 	lds	r26, 0x01AA
     234:	b0 91 ab 01 	lds	r27, 0x01AB
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 96 01 	sts	0x0196, r24
     244:	90 93 97 01 	sts	0x0197, r25
     248:	a0 93 98 01 	sts	0x0198, r26
     24c:	b0 93 99 01 	sts	0x0199, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 96 01 	lds	r24, 0x0196
     254:	90 91 97 01 	lds	r25, 0x0197
     258:	a0 91 98 01 	lds	r26, 0x0198
     25c:	b0 91 99 01 	lds	r27, 0x0199
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 64 01 	sts	0x0164, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 64 01 	lds	r18, 0x0164
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
		// Hi-Z the port when not using
		SIDETONE_DDR &= ~(_BV(SIDETONE));
		OCR0A = 0;
	}
	*/
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(((timer > mute_start) && (timer < mute_end)) || (mute_on == TRUE))
     2e4:	20 91 66 01 	lds	r18, 0x0166
     2e8:	30 91 67 01 	lds	r19, 0x0167
     2ec:	40 91 68 01 	lds	r20, 0x0168
     2f0:	50 91 69 01 	lds	r21, 0x0169
     2f4:	80 91 d1 01 	lds	r24, 0x01D1
     2f8:	90 91 d2 01 	lds	r25, 0x01D2
     2fc:	a0 91 d3 01 	lds	r26, 0x01D3
     300:	b0 91 d4 01 	lds	r27, 0x01D4
     304:	82 17       	cp	r24, r18
     306:	93 07       	cpc	r25, r19
     308:	a4 07       	cpc	r26, r20
     30a:	b5 07       	cpc	r27, r21
     30c:	a8 f4       	brcc	.+42     	; 0x338 <__vector_7+0x7e>
     30e:	20 91 66 01 	lds	r18, 0x0166
     312:	30 91 67 01 	lds	r19, 0x0167
     316:	40 91 68 01 	lds	r20, 0x0168
     31a:	50 91 69 01 	lds	r21, 0x0169
     31e:	80 91 c6 01 	lds	r24, 0x01C6
     322:	90 91 c7 01 	lds	r25, 0x01C7
     326:	a0 91 c8 01 	lds	r26, 0x01C8
     32a:	b0 91 c9 01 	lds	r27, 0x01C9
     32e:	28 17       	cp	r18, r24
     330:	39 07       	cpc	r19, r25
     332:	4a 07       	cpc	r20, r26
     334:	5b 07       	cpc	r21, r27
     336:	20 f0       	brcs	.+8      	; 0x340 <__vector_7+0x86>
     338:	80 91 33 01 	lds	r24, 0x0133
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	51 f4       	brne	.+20     	; 0x354 <__vector_7+0x9a>
		MUTE_PORT |= _BV(MUTE);
     340:	88 e2       	ldi	r24, 0x28	; 40
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	28 e2       	ldi	r18, 0x28	; 40
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	f9 01       	movw	r30, r18
     34a:	20 81       	ld	r18, Z
     34c:	20 62       	ori	r18, 0x20	; 32
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
     352:	09 c0       	rjmp	.+18     	; 0x366 <__vector_7+0xac>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     354:	88 e2       	ldi	r24, 0x28	; 40
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	28 e2       	ldi	r18, 0x28	; 40
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	f9 01       	movw	r30, r18
     35e:	20 81       	ld	r18, Z
     360:	2f 7d       	andi	r18, 0xDF	; 223
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     366:	80 91 34 01 	lds	r24, 0x0134
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	d9 f5       	brne	.+118    	; 0x3e4 <__vector_7+0x12a>
     36e:	20 91 66 01 	lds	r18, 0x0166
     372:	30 91 67 01 	lds	r19, 0x0167
     376:	40 91 68 01 	lds	r20, 0x0168
     37a:	50 91 69 01 	lds	r21, 0x0169
     37e:	80 91 d7 01 	lds	r24, 0x01D7
     382:	90 91 d8 01 	lds	r25, 0x01D8
     386:	a0 91 d9 01 	lds	r26, 0x01D9
     38a:	b0 91 da 01 	lds	r27, 0x01DA
     38e:	28 17       	cp	r18, r24
     390:	39 07       	cpc	r19, r25
     392:	4a 07       	cpc	r20, r26
     394:	5b 07       	cpc	r21, r27
     396:	30 f5       	brcc	.+76     	; 0x3e4 <__vector_7+0x12a>
     398:	20 91 66 01 	lds	r18, 0x0166
     39c:	30 91 67 01 	lds	r19, 0x0167
     3a0:	40 91 68 01 	lds	r20, 0x0168
     3a4:	50 91 69 01 	lds	r21, 0x0169
     3a8:	80 91 a0 01 	lds	r24, 0x01A0
     3ac:	90 91 a1 01 	lds	r25, 0x01A1
     3b0:	a0 91 a2 01 	lds	r26, 0x01A2
     3b4:	b0 91 a3 01 	lds	r27, 0x01A3
     3b8:	82 17       	cp	r24, r18
     3ba:	93 07       	cpc	r25, r19
     3bc:	a4 07       	cpc	r26, r20
     3be:	b5 07       	cpc	r27, r21
     3c0:	88 f4       	brcc	.+34     	; 0x3e4 <__vector_7+0x12a>
	{
		if(rit_enable == TRUE)
     3c2:	80 91 dc 01 	lds	r24, 0x01DC
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	19 f4       	brne	.+6      	; 0x3d0 <__vector_7+0x116>
			set_dds_freq_reg(REG_1);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 76 0a 	call	0x14ec	; 0x14ec <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     3d0:	88 e2       	ldi	r24, 0x28	; 40
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	28 e2       	ldi	r18, 0x28	; 40
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	20 61       	ori	r18, 0x10	; 16
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
     3e2:	0c c0       	rjmp	.+24     	; 0x3fc <__vector_7+0x142>
	}
	else
	{
		set_dds_freq_reg(REG_0);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     3ea:	88 e2       	ldi	r24, 0x28	; 40
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	28 e2       	ldi	r18, 0x28	; 40
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	f9 01       	movw	r30, r18
     3f4:	20 81       	ld	r18, Z
     3f6:	2f 7e       	andi	r18, 0xEF	; 239
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
	}

	debounce(FALSE);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 19 04 	call	0x832	; 0x832 <debounce>

	// Need to consider timer overflow?
	timer++;
     402:	80 91 66 01 	lds	r24, 0x0166
     406:	90 91 67 01 	lds	r25, 0x0167
     40a:	a0 91 68 01 	lds	r26, 0x0168
     40e:	b0 91 69 01 	lds	r27, 0x0169
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	80 93 66 01 	sts	0x0166, r24
     41c:	90 93 67 01 	sts	0x0167, r25
     420:	a0 93 68 01 	sts	0x0168, r26
     424:	b0 93 69 01 	sts	0x0169, r27
}
     428:	cf 91       	pop	r28
     42a:	df 91       	pop	r29
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     46c:	88 e6       	ldi	r24, 0x68	; 104
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	fc 01       	movw	r30, r24
     472:	10 82       	st	Z, r1

	cur_mode = default_mode;
     474:	80 91 65 01 	lds	r24, 0x0165
     478:	80 93 9a 01 	sts	0x019A, r24
	cur_state = IDLE;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 bc 01 	sts	0x01BC, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 20;
     482:	80 91 60 01 	lds	r24, 0x0160
     486:	90 91 61 01 	lds	r25, 0x0161
     48a:	a0 91 62 01 	lds	r26, 0x0162
     48e:	b0 91 63 01 	lds	r27, 0x0163
     492:	44 96       	adiw	r24, 0x14	; 20
     494:	a1 1d       	adc	r26, r1
     496:	b1 1d       	adc	r27, r1
     498:	80 93 c2 01 	sts	0x01C2, r24
     49c:	90 93 c3 01 	sts	0x01C3, r25
     4a0:	a0 93 c4 01 	sts	0x01C4, r26
     4a4:	b0 93 c5 01 	sts	0x01C5, r27
	//mute_on = TRUE;
}
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <init>:

void init(void)
{
     4c2:	df 93       	push	r29
     4c4:	cf 93       	push	r28
     4c6:	0f 92       	push	r0
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     4cc:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     4ce:	81 e6       	ldi	r24, 0x61	; 97
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	20 e8       	ldi	r18, 0x80	; 128
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
	CLKPR = 0;
     4d8:	81 e6       	ldi	r24, 0x61	; 97
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     4e0:	84 e4       	ldi	r24, 0x44	; 68
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	21 e8       	ldi	r18, 0x81	; 129
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     4ea:	85 e4       	ldi	r24, 0x45	; 69
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
	//TCCR0B = _BV(CS01);
	//TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt

	// Setup Timer1 as sample rate generator for sidetone
	TCCR1B = _BV(WGM12) | _BV(CS10); // Set for CTC mode, Prescaler /1
     4f4:	81 e8       	ldi	r24, 0x81	; 129
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	29 e0       	ldi	r18, 0x09	; 9
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
	TCCR1A = 0;
     4fe:	80 e8       	ldi	r24, 0x80	; 128
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	fc 01       	movw	r30, r24
     504:	10 82       	st	Z, r1
	OCR1A = 1000; // 16 MHz clock / 16 kHz sample rate = 1000
     506:	88 e8       	ldi	r24, 0x88	; 136
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	28 ee       	ldi	r18, 0xE8	; 232
     50c:	33 e0       	ldi	r19, 0x03	; 3
     50e:	fc 01       	movw	r30, r24
     510:	31 83       	std	Z+1, r19	; 0x01
     512:	20 83       	st	Z, r18
	TIMSK1 = _BV(OCIE1A);
     514:	8f e6       	ldi	r24, 0x6F	; 111
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	22 e0       	ldi	r18, 0x02	; 2
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     51e:	80 eb       	ldi	r24, 0xB0	; 176
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	22 e0       	ldi	r18, 0x02	; 2
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     528:	81 eb       	ldi	r24, 0xB1	; 177
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	24 e0       	ldi	r18, 0x04	; 4
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     532:	80 e7       	ldi	r24, 0x70	; 112
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	20 e7       	ldi	r18, 0x70	; 112
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	22 60       	ori	r18, 0x02	; 2
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     544:	83 eb       	ldi	r24, 0xB3	; 179
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	29 ef       	ldi	r18, 0xF9	; 249
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     54e:	8a e7       	ldi	r24, 0x7A	; 122
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	2a e7       	ldi	r18, 0x7A	; 122
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	24 68       	ori	r18, 0x84	; 132
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     560:	8c e7       	ldi	r24, 0x7C	; 124
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	20 e6       	ldi	r18, 0x60	; 96
     566:	fc 01       	movw	r30, r24
     568:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     56a:	8b e6       	ldi	r24, 0x6B	; 107
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	21 e0       	ldi	r18, 0x01	; 1
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) | _BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     574:	8d e6       	ldi	r24, 0x6D	; 109
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	2f e9       	ldi	r18, 0x9F	; 159
     57a:	fc 01       	movw	r30, r24
     57c:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     57e:	8a e2       	ldi	r24, 0x2A	; 42
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	2a e2       	ldi	r18, 0x2A	; 42
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	f9 01       	movw	r30, r18
     588:	20 81       	ld	r18, Z
     58a:	20 64       	ori	r18, 0x40	; 64
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     590:	87 e2       	ldi	r24, 0x27	; 39
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	27 e2       	ldi	r18, 0x27	; 39
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	20 62       	ori	r18, 0x20	; 32
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     5a2:	87 e2       	ldi	r24, 0x27	; 39
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	27 e2       	ldi	r18, 0x27	; 39
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	f9 01       	movw	r30, r18
     5ac:	20 81       	ld	r18, Z
     5ae:	20 61       	ori	r18, 0x10	; 16
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     5b4:	87 e2       	ldi	r24, 0x27	; 39
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	27 e2       	ldi	r18, 0x27	; 39
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	2d 7f       	andi	r18, 0xFD	; 253
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     5c6:	88 e2       	ldi	r24, 0x28	; 40
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	28 e2       	ldi	r18, 0x28	; 40
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	f9 01       	movw	r30, r18
     5d0:	20 81       	ld	r18, Z
     5d2:	2d 7f       	andi	r18, 0xFD	; 253
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     5d8:	8a e2       	ldi	r24, 0x2A	; 42
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	2a e2       	ldi	r18, 0x2A	; 42
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	27 7f       	andi	r18, 0xF7	; 247
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     5ea:	8b e2       	ldi	r24, 0x2B	; 43
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	2b e2       	ldi	r18, 0x2B	; 43
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	28 60       	ori	r18, 0x08	; 8
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     5fc:	8a e2       	ldi	r24, 0x2A	; 42
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2a e2       	ldi	r18, 0x2A	; 42
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	2f 7e       	andi	r18, 0xEF	; 239
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     60e:	8b e2       	ldi	r24, 0x2B	; 43
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2b e2       	ldi	r18, 0x2B	; 43
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	f9 01       	movw	r30, r18
     618:	20 81       	ld	r18, Z
     61a:	20 61       	ori	r18, 0x10	; 16
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     620:	8a e2       	ldi	r24, 0x2A	; 42
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	2a e2       	ldi	r18, 0x2A	; 42
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	f9 01       	movw	r30, r18
     62a:	20 81       	ld	r18, Z
     62c:	2b 7f       	andi	r18, 0xFB	; 251
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     632:	8b e2       	ldi	r24, 0x2B	; 43
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	2b e2       	ldi	r18, 0x2B	; 43
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f9 01       	movw	r30, r18
     63c:	20 81       	ld	r18, Z
     63e:	24 60       	ori	r18, 0x04	; 4
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     644:	8a e2       	ldi	r24, 0x2A	; 42
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	2a e2       	ldi	r18, 0x2A	; 42
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	2d 7f       	andi	r18, 0xFD	; 253
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     656:	8b e2       	ldi	r24, 0x2B	; 43
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	2b e2       	ldi	r18, 0x2B	; 43
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	f9 01       	movw	r30, r18
     660:	20 81       	ld	r18, Z
     662:	22 60       	ori	r18, 0x02	; 2
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     668:	84 e2       	ldi	r24, 0x24	; 36
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	24 e2       	ldi	r18, 0x24	; 36
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	2e 7f       	andi	r18, 0xFE	; 254
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     67a:	85 e2       	ldi	r24, 0x25	; 37
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	25 e2       	ldi	r18, 0x25	; 37
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	21 60       	ori	r18, 0x01	; 1
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     68c:	8a e2       	ldi	r24, 0x2A	; 42
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	2a e2       	ldi	r18, 0x2A	; 42
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	2f 77       	andi	r18, 0x7F	; 127
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     69e:	8b e2       	ldi	r24, 0x2B	; 43
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	2b e2       	ldi	r18, 0x2B	; 43
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	20 81       	ld	r18, Z
     6aa:	20 68       	ori	r18, 0x80	; 128
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     6b0:	8a e2       	ldi	r24, 0x2A	; 42
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	2a e2       	ldi	r18, 0x2A	; 42
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	20 81       	ld	r18, Z
     6bc:	2e 7f       	andi	r18, 0xFE	; 254
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     6c2:	8b e2       	ldi	r24, 0x2B	; 43
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2b e2       	ldi	r18, 0x2B	; 43
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	21 60       	ori	r18, 0x01	; 1
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     6d4:	84 e2       	ldi	r24, 0x24	; 36
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	24 e2       	ldi	r18, 0x24	; 36
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	2e 62       	ori	r18, 0x2E	; 46
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     6e6:	8c e4       	ldi	r24, 0x4C	; 76
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	29 e5       	ldi	r18, 0x59	; 89
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     6f0:	8d e4       	ldi	r24, 0x4D	; 77
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	89 83       	std	Y+1, r24	; 0x01
	spi_data = SPDR;
     6fa:	8e e4       	ldi	r24, 0x4E	; 78
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	89 83       	std	Y+1, r24	; 0x01

	// Power saving
	power_twi_disable();
     704:	84 e6       	ldi	r24, 0x64	; 100
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	24 e6       	ldi	r18, 0x64	; 100
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	f9 01       	movw	r30, r18
     70e:	20 81       	ld	r18, Z
     710:	20 68       	ori	r18, 0x80	; 128
     712:	fc 01       	movw	r30, r24
     714:	20 83       	st	Z, r18
	power_usart0_disable();
     716:	84 e6       	ldi	r24, 0x64	; 100
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	24 e6       	ldi	r18, 0x64	; 100
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	22 60       	ori	r18, 0x02	; 2
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 6a 01 	sts	0x016A, r24
	cur_state = IDLE;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 bc 01 	sts	0x01BC, r24
	next_state = IDLE;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 9f 01 	sts	0x019F, r24

	timer = 0;
     73a:	10 92 66 01 	sts	0x0166, r1
     73e:	10 92 67 01 	sts	0x0167, r1
     742:	10 92 68 01 	sts	0x0168, r1
     746:	10 92 69 01 	sts	0x0169, r1

	eeprom_busy_wait();
     74a:	8f e3       	ldi	r24, 0x3F	; 63
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	fc 01       	movw	r30, r24
     750:	80 81       	ld	r24, Z
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	82 70       	andi	r24, 0x02	; 2
     758:	90 70       	andi	r25, 0x00	; 0
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	b1 f7       	brne	.-20     	; 0x74a <__stack+0x24b>
	wpm = eeprom_read_byte(&ee_wpm);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <__eerd_byte_m168>
     766:	80 93 d0 01 	sts	0x01D0, r24
	set_wpm(wpm);
     76a:	80 91 d0 01 	lds	r24, 0x01D0
     76e:	0e 94 01 04 	call	0x802	; 0x802 <set_wpm>

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = 0x05111F0C;
     772:	8c e0       	ldi	r24, 0x0C	; 12
     774:	9f e1       	ldi	r25, 0x1F	; 31
     776:	a1 e1       	ldi	r26, 0x11	; 17
     778:	b5 e0       	ldi	r27, 0x05	; 5
     77a:	80 93 a4 01 	sts	0x01A4, r24
     77e:	90 93 a5 01 	sts	0x01A5, r25
     782:	a0 93 a6 01 	sts	0x01A6, r26
     786:	b0 93 a7 01 	sts	0x01A7, r27
	tune_freq = 14060000;
     78a:	80 ee       	ldi	r24, 0xE0	; 224
     78c:	99 e8       	ldi	r25, 0x89	; 137
     78e:	a6 ed       	ldi	r26, 0xD6	; 214
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	80 93 cc 01 	sts	0x01CC, r24
     796:	90 93 cd 01 	sts	0x01CD, r25
     79a:	a0 93 ce 01 	sts	0x01CE, r26
     79e:	b0 93 cf 01 	sts	0x01CF, r27
	init_dds(dds_freq_word, REG_0);
     7a2:	80 91 a4 01 	lds	r24, 0x01A4
     7a6:	90 91 a5 01 	lds	r25, 0x01A5
     7aa:	a0 91 a6 01 	lds	r26, 0x01A6
     7ae:	b0 91 a7 01 	lds	r27, 0x01A7
     7b2:	bc 01       	movw	r22, r24
     7b4:	cd 01       	movw	r24, r26
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <init_dds>
	tune_dds(dds_freq_word, REG_1);
     7bc:	80 91 a4 01 	lds	r24, 0x01A4
     7c0:	90 91 a5 01 	lds	r25, 0x01A5
     7c4:	a0 91 a6 01 	lds	r26, 0x01A6
     7c8:	b0 91 a7 01 	lds	r27, 0x01A7
     7cc:	bc 01       	movw	r22, r24
     7ce:	cd 01       	movw	r24, r26
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	0e 94 92 09 	call	0x1324	; 0x1324 <tune_dds>

	st_freq = ST_DEFAULT;
     7d6:	88 e5       	ldi	r24, 0x58	; 88
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	90 93 b3 01 	sts	0x01B3, r25
     7de:	80 93 b2 01 	sts	0x01B2, r24
	set_st_freq(st_freq);
     7e2:	80 91 b2 01 	lds	r24, 0x01B2
     7e6:	90 91 b3 01 	lds	r25, 0x01B3
     7ea:	cc 01       	movw	r24, r24
     7ec:	a0 e0       	ldi	r26, 0x00	; 0
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	bc 01       	movw	r22, r24
     7f2:	cd 01       	movw	r24, r26
     7f4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <set_st_freq>

	// Enable interrupts
	sei();
     7f8:	78 94       	sei
}
     7fa:	0f 90       	pop	r0
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	0f 92       	push	r0
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 100 us per timer tick (dividing by 0.1 ms, so multiply by 10)
	dit_length = (1200 / new_wpm);
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	28 2f       	mov	r18, r24
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	80 eb       	ldi	r24, 0xB0	; 176
     816:	94 e0       	ldi	r25, 0x04	; 4
     818:	b9 01       	movw	r22, r18
     81a:	0e 94 8e 1a 	call	0x351c	; 0x351c <__divmodhi4>
     81e:	9b 01       	movw	r18, r22
     820:	c9 01       	movw	r24, r18
     822:	90 93 6c 01 	sts	0x016C, r25
     826:	80 93 6b 01 	sts	0x016B, r24
}
     82a:	0f 90       	pop	r0
     82c:	cf 91       	pop	r28
     82e:	df 91       	pop	r29
     830:	08 95       	ret

00000832 <debounce>:

void debounce(enum BOOL flush)
{
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	0f 92       	push	r0
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	01 f5       	brne	.+64     	; 0x884 <debounce+0x52>
	{
		dit_on_count = 0;
     844:	10 92 48 01 	sts	0x0148, r1
     848:	10 92 47 01 	sts	0x0147, r1
		dah_on_count = 0;
     84c:	10 92 4a 01 	sts	0x014A, r1
     850:	10 92 49 01 	sts	0x0149, r1
		dit_off_count = 0;
     854:	10 92 4c 01 	sts	0x014C, r1
     858:	10 92 4b 01 	sts	0x014B, r1
		dah_off_count = 0;
     85c:	10 92 4e 01 	sts	0x014E, r1
     860:	10 92 4d 01 	sts	0x014D, r1
		cmd_on_count = 0;
     864:	10 92 50 01 	sts	0x0150, r1
     868:	10 92 4f 01 	sts	0x014F, r1
		msg_on_count = 0;
     86c:	10 92 52 01 	sts	0x0152, r1
     870:	10 92 51 01 	sts	0x0151, r1
		both_on_count = 0;
     874:	10 92 54 01 	sts	0x0154, r1
     878:	10 92 53 01 	sts	0x0153, r1
		enc_on_count = 0;
     87c:	10 92 56 01 	sts	0x0156, r1
     880:	10 92 55 01 	sts	0x0155, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     884:	89 e2       	ldi	r24, 0x29	; 41
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	88 70       	andi	r24, 0x08	; 8
     892:	90 70       	andi	r25, 0x00	; 0
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	a9 f4       	brne	.+42     	; 0x8c2 <debounce+0x90>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     898:	80 91 47 01 	lds	r24, 0x0147
     89c:	90 91 48 01 	lds	r25, 0x0148
     8a0:	85 30       	cpi	r24, 0x05	; 5
     8a2:	91 05       	cpc	r25, r1
     8a4:	48 f4       	brcc	.+18     	; 0x8b8 <debounce+0x86>
			dit_on_count++;
     8a6:	80 91 47 01 	lds	r24, 0x0147
     8aa:	90 91 48 01 	lds	r25, 0x0148
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	90 93 48 01 	sts	0x0148, r25
     8b4:	80 93 47 01 	sts	0x0147, r24
		dit_off_count = 0;
     8b8:	10 92 4c 01 	sts	0x014C, r1
     8bc:	10 92 4b 01 	sts	0x014B, r1
     8c0:	14 c0       	rjmp	.+40     	; 0x8ea <debounce+0xb8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     8c2:	80 91 4b 01 	lds	r24, 0x014B
     8c6:	90 91 4c 01 	lds	r25, 0x014C
     8ca:	85 30       	cpi	r24, 0x05	; 5
     8cc:	91 05       	cpc	r25, r1
     8ce:	48 f4       	brcc	.+18     	; 0x8e2 <debounce+0xb0>
			dit_off_count++;
     8d0:	80 91 4b 01 	lds	r24, 0x014B
     8d4:	90 91 4c 01 	lds	r25, 0x014C
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	90 93 4c 01 	sts	0x014C, r25
     8de:	80 93 4b 01 	sts	0x014B, r24
		dit_on_count = 0;
     8e2:	10 92 48 01 	sts	0x0148, r1
     8e6:	10 92 47 01 	sts	0x0147, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     8ea:	89 e2       	ldi	r24, 0x29	; 41
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	fc 01       	movw	r30, r24
     8f0:	80 81       	ld	r24, Z
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	80 71       	andi	r24, 0x10	; 16
     8f8:	90 70       	andi	r25, 0x00	; 0
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	a9 f4       	brne	.+42     	; 0x928 <debounce+0xf6>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     8fe:	80 91 49 01 	lds	r24, 0x0149
     902:	90 91 4a 01 	lds	r25, 0x014A
     906:	85 30       	cpi	r24, 0x05	; 5
     908:	91 05       	cpc	r25, r1
     90a:	48 f4       	brcc	.+18     	; 0x91e <debounce+0xec>
			dah_on_count++;
     90c:	80 91 49 01 	lds	r24, 0x0149
     910:	90 91 4a 01 	lds	r25, 0x014A
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	90 93 4a 01 	sts	0x014A, r25
     91a:	80 93 49 01 	sts	0x0149, r24
		dah_off_count = 0;
     91e:	10 92 4e 01 	sts	0x014E, r1
     922:	10 92 4d 01 	sts	0x014D, r1
     926:	14 c0       	rjmp	.+40     	; 0x950 <debounce+0x11e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     928:	80 91 4d 01 	lds	r24, 0x014D
     92c:	90 91 4e 01 	lds	r25, 0x014E
     930:	85 30       	cpi	r24, 0x05	; 5
     932:	91 05       	cpc	r25, r1
     934:	48 f4       	brcc	.+18     	; 0x948 <debounce+0x116>
			dah_off_count++;
     936:	80 91 4d 01 	lds	r24, 0x014D
     93a:	90 91 4e 01 	lds	r25, 0x014E
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	90 93 4e 01 	sts	0x014E, r25
     944:	80 93 4d 01 	sts	0x014D, r24
		dah_on_count = 0;
     948:	10 92 4a 01 	sts	0x014A, r1
     94c:	10 92 49 01 	sts	0x0149, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     950:	80 91 47 01 	lds	r24, 0x0147
     954:	90 91 48 01 	lds	r25, 0x0148
     958:	85 30       	cpi	r24, 0x05	; 5
     95a:	91 05       	cpc	r25, r1
     95c:	18 f0       	brcs	.+6      	; 0x964 <debounce+0x132>
		dit_active = TRUE;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 ca 01 	sts	0x01CA, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     964:	80 91 4b 01 	lds	r24, 0x014B
     968:	90 91 4c 01 	lds	r25, 0x014C
     96c:	85 30       	cpi	r24, 0x05	; 5
     96e:	91 05       	cpc	r25, r1
     970:	10 f0       	brcs	.+4      	; 0x976 <debounce+0x144>
		dit_active = FALSE;
     972:	10 92 ca 01 	sts	0x01CA, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     976:	80 91 49 01 	lds	r24, 0x0149
     97a:	90 91 4a 01 	lds	r25, 0x014A
     97e:	85 30       	cpi	r24, 0x05	; 5
     980:	91 05       	cpc	r25, r1
     982:	18 f0       	brcs	.+6      	; 0x98a <debounce+0x158>
		dah_active = TRUE;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 b8 01 	sts	0x01B8, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     98a:	80 91 4d 01 	lds	r24, 0x014D
     98e:	90 91 4e 01 	lds	r25, 0x014E
     992:	85 30       	cpi	r24, 0x05	; 5
     994:	91 05       	cpc	r25, r1
     996:	10 f0       	brcs	.+4      	; 0x99c <debounce+0x16a>
		dah_active = FALSE;
     998:	10 92 b8 01 	sts	0x01B8, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     99c:	89 e2       	ldi	r24, 0x29	; 41
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	84 70       	andi	r24, 0x04	; 4
     9aa:	90 70       	andi	r25, 0x00	; 0
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	a1 f4       	brne	.+40     	; 0x9d8 <debounce+0x1a6>
     9b0:	89 e2       	ldi	r24, 0x29	; 41
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	fc 01       	movw	r30, r24
     9b6:	80 81       	ld	r24, Z
     9b8:	88 2f       	mov	r24, r24
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 70       	andi	r24, 0x02	; 2
     9be:	90 70       	andi	r25, 0x00	; 0
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	51 f4       	brne	.+20     	; 0x9d8 <debounce+0x1a6>
		both_on_count++;
     9c4:	80 91 53 01 	lds	r24, 0x0153
     9c8:	90 91 54 01 	lds	r25, 0x0154
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	90 93 54 01 	sts	0x0154, r25
     9d2:	80 93 53 01 	sts	0x0153, r24
     9d6:	25 c0       	rjmp	.+74     	; 0xa22 <debounce+0x1f0>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     9d8:	80 91 53 01 	lds	r24, 0x0153
     9dc:	90 91 54 01 	lds	r25, 0x0154
     9e0:	85 30       	cpi	r24, 0x05	; 5
     9e2:	91 05       	cpc	r25, r1
     9e4:	60 f0       	brcs	.+24     	; 0x9fe <debounce+0x1cc>
     9e6:	80 91 53 01 	lds	r24, 0x0153
     9ea:	90 91 54 01 	lds	r25, 0x0154
     9ee:	f1 e0       	ldi	r31, 0x01	; 1
     9f0:	84 3f       	cpi	r24, 0xF4	; 244
     9f2:	9f 07       	cpc	r25, r31
     9f4:	20 f4       	brcc	.+8      	; 0x9fe <debounce+0x1cc>
			both_btn = PRESS;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 ba 01 	sts	0x01BA, r24
     9fc:	0e c0       	rjmp	.+28     	; 0xa1a <debounce+0x1e8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     9fe:	80 91 53 01 	lds	r24, 0x0153
     a02:	90 91 54 01 	lds	r25, 0x0154
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	84 3f       	cpi	r24, 0xF4	; 244
     a0a:	92 07       	cpc	r25, r18
     a0c:	20 f0       	brcs	.+8      	; 0xa16 <debounce+0x1e4>
			both_btn = HOLD;
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	80 93 ba 01 	sts	0x01BA, r24
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <debounce+0x1e8>
		else
			both_btn = OFF;
     a16:	10 92 ba 01 	sts	0x01BA, r1

		both_on_count = 0;
     a1a:	10 92 54 01 	sts	0x0154, r1
     a1e:	10 92 53 01 	sts	0x0153, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     a22:	89 e2       	ldi	r24, 0x29	; 41
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	fc 01       	movw	r30, r24
     a28:	80 81       	ld	r24, Z
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	84 70       	andi	r24, 0x04	; 4
     a30:	90 70       	andi	r25, 0x00	; 0
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	51 f4       	brne	.+20     	; 0xa4a <debounce+0x218>
	{
		cmd_on_count++;
     a36:	80 91 4f 01 	lds	r24, 0x014F
     a3a:	90 91 50 01 	lds	r25, 0x0150
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	90 93 50 01 	sts	0x0150, r25
     a44:	80 93 4f 01 	sts	0x014F, r24
     a48:	25 c0       	rjmp	.+74     	; 0xa94 <debounce+0x262>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     a4a:	80 91 4f 01 	lds	r24, 0x014F
     a4e:	90 91 50 01 	lds	r25, 0x0150
     a52:	85 30       	cpi	r24, 0x05	; 5
     a54:	91 05       	cpc	r25, r1
     a56:	60 f0       	brcs	.+24     	; 0xa70 <debounce+0x23e>
     a58:	80 91 4f 01 	lds	r24, 0x014F
     a5c:	90 91 50 01 	lds	r25, 0x0150
     a60:	f1 e0       	ldi	r31, 0x01	; 1
     a62:	84 3f       	cpi	r24, 0xF4	; 244
     a64:	9f 07       	cpc	r25, r31
     a66:	20 f4       	brcc	.+8      	; 0xa70 <debounce+0x23e>
			cmd_btn = PRESS;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 bb 01 	sts	0x01BB, r24
     a6e:	0e c0       	rjmp	.+28     	; 0xa8c <debounce+0x25a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     a70:	80 91 4f 01 	lds	r24, 0x014F
     a74:	90 91 50 01 	lds	r25, 0x0150
     a78:	21 e0       	ldi	r18, 0x01	; 1
     a7a:	84 3f       	cpi	r24, 0xF4	; 244
     a7c:	92 07       	cpc	r25, r18
     a7e:	20 f0       	brcs	.+8      	; 0xa88 <debounce+0x256>
			cmd_btn = HOLD;
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	80 93 bb 01 	sts	0x01BB, r24
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <debounce+0x25a>
		else
			cmd_btn = OFF;
     a88:	10 92 bb 01 	sts	0x01BB, r1

		cmd_on_count = 0;
     a8c:	10 92 50 01 	sts	0x0150, r1
     a90:	10 92 4f 01 	sts	0x014F, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     a94:	89 e2       	ldi	r24, 0x29	; 41
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	fc 01       	movw	r30, r24
     a9a:	80 81       	ld	r24, Z
     a9c:	88 2f       	mov	r24, r24
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	82 70       	andi	r24, 0x02	; 2
     aa2:	90 70       	andi	r25, 0x00	; 0
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	51 f4       	brne	.+20     	; 0xabc <debounce+0x28a>
		msg_on_count++;
     aa8:	80 91 51 01 	lds	r24, 0x0151
     aac:	90 91 52 01 	lds	r25, 0x0152
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	90 93 52 01 	sts	0x0152, r25
     ab6:	80 93 51 01 	sts	0x0151, r24
     aba:	25 c0       	rjmp	.+74     	; 0xb06 <debounce+0x2d4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     abc:	80 91 51 01 	lds	r24, 0x0151
     ac0:	90 91 52 01 	lds	r25, 0x0152
     ac4:	85 30       	cpi	r24, 0x05	; 5
     ac6:	91 05       	cpc	r25, r1
     ac8:	60 f0       	brcs	.+24     	; 0xae2 <debounce+0x2b0>
     aca:	80 91 51 01 	lds	r24, 0x0151
     ace:	90 91 52 01 	lds	r25, 0x0152
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	84 3f       	cpi	r24, 0xF4	; 244
     ad6:	9f 07       	cpc	r25, r31
     ad8:	20 f4       	brcc	.+8      	; 0xae2 <debounce+0x2b0>
			msg_btn = PRESS;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 b9 01 	sts	0x01B9, r24
     ae0:	0e c0       	rjmp	.+28     	; 0xafe <debounce+0x2cc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     ae2:	80 91 51 01 	lds	r24, 0x0151
     ae6:	90 91 52 01 	lds	r25, 0x0152
     aea:	21 e0       	ldi	r18, 0x01	; 1
     aec:	84 3f       	cpi	r24, 0xF4	; 244
     aee:	92 07       	cpc	r25, r18
     af0:	20 f0       	brcs	.+8      	; 0xafa <debounce+0x2c8>
			msg_btn = HOLD;
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	80 93 b9 01 	sts	0x01B9, r24
     af8:	02 c0       	rjmp	.+4      	; 0xafe <debounce+0x2cc>
		else
			msg_btn = OFF;
     afa:	10 92 b9 01 	sts	0x01B9, r1

		msg_on_count = 0;
     afe:	10 92 52 01 	sts	0x0152, r1
     b02:	10 92 51 01 	sts	0x0151, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     b06:	89 e2       	ldi	r24, 0x29	; 41
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	81 70       	andi	r24, 0x01	; 1
     b14:	90 70       	andi	r25, 0x00	; 0
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	51 f4       	brne	.+20     	; 0xb2e <debounce+0x2fc>
		enc_on_count++;
     b1a:	80 91 55 01 	lds	r24, 0x0155
     b1e:	90 91 56 01 	lds	r25, 0x0156
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	90 93 56 01 	sts	0x0156, r25
     b28:	80 93 55 01 	sts	0x0155, r24
     b2c:	25 c0       	rjmp	.+74     	; 0xb78 <debounce+0x346>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     b2e:	80 91 55 01 	lds	r24, 0x0155
     b32:	90 91 56 01 	lds	r25, 0x0156
     b36:	85 30       	cpi	r24, 0x05	; 5
     b38:	91 05       	cpc	r25, r1
     b3a:	60 f0       	brcs	.+24     	; 0xb54 <debounce+0x322>
     b3c:	80 91 55 01 	lds	r24, 0x0155
     b40:	90 91 56 01 	lds	r25, 0x0156
     b44:	f1 e0       	ldi	r31, 0x01	; 1
     b46:	84 3f       	cpi	r24, 0xF4	; 244
     b48:	9f 07       	cpc	r25, r31
     b4a:	20 f4       	brcc	.+8      	; 0xb54 <debounce+0x322>
			enc_btn = PRESS;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	80 93 c1 01 	sts	0x01C1, r24
     b52:	0e c0       	rjmp	.+28     	; 0xb70 <debounce+0x33e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     b54:	80 91 55 01 	lds	r24, 0x0155
     b58:	90 91 56 01 	lds	r25, 0x0156
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	84 3f       	cpi	r24, 0xF4	; 244
     b60:	92 07       	cpc	r25, r18
     b62:	20 f0       	brcs	.+8      	; 0xb6c <debounce+0x33a>
			enc_btn = HOLD;
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 93 c1 01 	sts	0x01C1, r24
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <debounce+0x33e>
		else
			enc_btn = OFF;
     b6c:	10 92 c1 01 	sts	0x01C1, r1

		enc_on_count = 0;
     b70:	10 92 56 01 	sts	0x0156, r1
     b74:	10 92 55 01 	sts	0x0155, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     b78:	83 e2       	ldi	r24, 0x23	; 35
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	fc 01       	movw	r30, r24
     b7e:	80 81       	ld	r24, Z
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	81 70       	andi	r24, 0x01	; 1
     b86:	90 70       	andi	r25, 0x00	; 0
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	a9 f4       	brne	.+42     	; 0xbb6 <debounce+0x384>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     b8c:	80 91 57 01 	lds	r24, 0x0157
     b90:	90 91 58 01 	lds	r25, 0x0158
     b94:	85 30       	cpi	r24, 0x05	; 5
     b96:	91 05       	cpc	r25, r1
     b98:	48 f4       	brcc	.+18     	; 0xbac <debounce+0x37a>
			enca_on_count++;
     b9a:	80 91 57 01 	lds	r24, 0x0157
     b9e:	90 91 58 01 	lds	r25, 0x0158
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	90 93 58 01 	sts	0x0158, r25
     ba8:	80 93 57 01 	sts	0x0157, r24
		enca_off_count = 0;
     bac:	10 92 5a 01 	sts	0x015A, r1
     bb0:	10 92 59 01 	sts	0x0159, r1
     bb4:	14 c0       	rjmp	.+40     	; 0xbde <debounce+0x3ac>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     bb6:	80 91 59 01 	lds	r24, 0x0159
     bba:	90 91 5a 01 	lds	r25, 0x015A
     bbe:	85 30       	cpi	r24, 0x05	; 5
     bc0:	91 05       	cpc	r25, r1
     bc2:	48 f4       	brcc	.+18     	; 0xbd6 <debounce+0x3a4>
			enca_off_count++;
     bc4:	80 91 59 01 	lds	r24, 0x0159
     bc8:	90 91 5a 01 	lds	r25, 0x015A
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	90 93 5a 01 	sts	0x015A, r25
     bd2:	80 93 59 01 	sts	0x0159, r24
		enca_on_count = 0;
     bd6:	10 92 58 01 	sts	0x0158, r1
     bda:	10 92 57 01 	sts	0x0157, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     bde:	89 e2       	ldi	r24, 0x29	; 41
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	88 23       	and	r24, r24
     be8:	ac f0       	brlt	.+42     	; 0xc14 <debounce+0x3e2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     bea:	80 91 5b 01 	lds	r24, 0x015B
     bee:	90 91 5c 01 	lds	r25, 0x015C
     bf2:	85 30       	cpi	r24, 0x05	; 5
     bf4:	91 05       	cpc	r25, r1
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <debounce+0x3d8>
			encb_on_count++;
     bf8:	80 91 5b 01 	lds	r24, 0x015B
     bfc:	90 91 5c 01 	lds	r25, 0x015C
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	90 93 5c 01 	sts	0x015C, r25
     c06:	80 93 5b 01 	sts	0x015B, r24
		encb_off_count = 0;
     c0a:	10 92 5e 01 	sts	0x015E, r1
     c0e:	10 92 5d 01 	sts	0x015D, r1
     c12:	14 c0       	rjmp	.+40     	; 0xc3c <debounce+0x40a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     c14:	80 91 5d 01 	lds	r24, 0x015D
     c18:	90 91 5e 01 	lds	r25, 0x015E
     c1c:	85 30       	cpi	r24, 0x05	; 5
     c1e:	91 05       	cpc	r25, r1
     c20:	48 f4       	brcc	.+18     	; 0xc34 <debounce+0x402>
			encb_off_count++;
     c22:	80 91 5d 01 	lds	r24, 0x015D
     c26:	90 91 5e 01 	lds	r25, 0x015E
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	90 93 5e 01 	sts	0x015E, r25
     c30:	80 93 5d 01 	sts	0x015D, r24
		encb_on_count = 0;
     c34:	10 92 5c 01 	sts	0x015C, r1
     c38:	10 92 5b 01 	sts	0x015B, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     c3c:	80 91 57 01 	lds	r24, 0x0157
     c40:	90 91 58 01 	lds	r25, 0x0158
     c44:	85 30       	cpi	r24, 0x05	; 5
     c46:	91 05       	cpc	r25, r1
     c48:	18 f0       	brcs	.+6      	; 0xc50 <debounce+0x41e>
		enc_a = TRUE;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 5f 01 	sts	0x015F, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     c50:	80 91 59 01 	lds	r24, 0x0159
     c54:	90 91 5a 01 	lds	r25, 0x015A
     c58:	85 30       	cpi	r24, 0x05	; 5
     c5a:	91 05       	cpc	r25, r1
     c5c:	10 f0       	brcs	.+4      	; 0xc62 <debounce+0x430>
		enc_a = FALSE;
     c5e:	10 92 5f 01 	sts	0x015F, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     c62:	80 91 5b 01 	lds	r24, 0x015B
     c66:	90 91 5c 01 	lds	r25, 0x015C
     c6a:	85 30       	cpi	r24, 0x05	; 5
     c6c:	91 05       	cpc	r25, r1
     c6e:	18 f0       	brcs	.+6      	; 0xc76 <debounce+0x444>
		enc_b = TRUE;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 db 01 	sts	0x01DB, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     c76:	80 91 5d 01 	lds	r24, 0x015D
     c7a:	90 91 5e 01 	lds	r25, 0x015E
     c7e:	85 30       	cpi	r24, 0x05	; 5
     c80:	91 05       	cpc	r25, r1
     c82:	10 f0       	brcs	.+4      	; 0xc88 <debounce+0x456>
		enc_b = FALSE;
     c84:	10 92 db 01 	sts	0x01DB, r1

	// Don't go to sleep if there are any paddle or button presses
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
     c88:	80 91 47 01 	lds	r24, 0x0147
     c8c:	90 91 48 01 	lds	r25, 0x0148
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	c1 f4       	brne	.+48     	; 0xcc4 <debounce+0x492>
     c94:	80 91 49 01 	lds	r24, 0x0149
     c98:	90 91 4a 01 	lds	r25, 0x014A
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	91 f4       	brne	.+36     	; 0xcc4 <debounce+0x492>
     ca0:	80 91 4f 01 	lds	r24, 0x014F
     ca4:	90 91 50 01 	lds	r25, 0x0150
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	61 f4       	brne	.+24     	; 0xcc4 <debounce+0x492>
     cac:	80 91 51 01 	lds	r24, 0x0151
     cb0:	90 91 52 01 	lds	r25, 0x0152
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	31 f4       	brne	.+12     	; 0xcc4 <debounce+0x492>
     cb8:	80 91 53 01 	lds	r24, 0x0153
     cbc:	90 91 54 01 	lds	r25, 0x0154
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	19 f0       	breq	.+6      	; 0xcca <debounce+0x498>
		allow_sleep = FALSE;
     cc4:	10 92 0a 01 	sts	0x010A, r1
     cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <debounce+0x49e>
	else
		allow_sleep = TRUE;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 0a 01 	sts	0x010A, r24
}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <announce>:

void announce(char * msg, uint16_t freq, uint8_t speed)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <announce+0x6>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <announce+0x8>
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	7c 83       	std	Y+4, r23	; 0x04
     cec:	6b 83       	std	Y+3, r22	; 0x03
     cee:	4d 83       	std	Y+5, r20	; 0x05
	// Convert to uppercase
	strupr(msg);
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	0e 94 18 1c 	call	0x3830	; 0x3830 <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     cf8:	80 91 d5 01 	lds	r24, 0x01D5
     cfc:	90 91 d6 01 	lds	r25, 0x01D6
     d00:	29 81       	ldd	r18, Y+1	; 0x01
     d02:	3a 81       	ldd	r19, Y+2	; 0x02
     d04:	b9 01       	movw	r22, r18
     d06:	0e 94 11 1c 	call	0x3822	; 0x3822 <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     d0a:	80 91 bc 01 	lds	r24, 0x01BC
     d0e:	80 93 6a 01 	sts	0x016A, r24
	prev_state_end = cur_state_end;
     d12:	80 91 c2 01 	lds	r24, 0x01C2
     d16:	90 91 c3 01 	lds	r25, 0x01C3
     d1a:	a0 91 c4 01 	lds	r26, 0x01C4
     d1e:	b0 91 c5 01 	lds	r27, 0x01C5
     d22:	80 93 ac 01 	sts	0x01AC, r24
     d26:	90 93 ad 01 	sts	0x01AD, r25
     d2a:	a0 93 ae 01 	sts	0x01AE, r26
     d2e:	b0 93 af 01 	sts	0x01AF, r27
	prev_mode = cur_mode;
     d32:	80 91 9a 01 	lds	r24, 0x019A
     d36:	80 93 b0 01 	sts	0x01B0, r24
	prev_st_freq = st_freq;
     d3a:	80 91 b2 01 	lds	r24, 0x01B2
     d3e:	90 91 b3 01 	lds	r25, 0x01B3
     d42:	90 93 c0 01 	sts	0x01C0, r25
     d46:	80 93 bf 01 	sts	0x01BF, r24
	st_freq = freq;
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	90 93 b3 01 	sts	0x01B3, r25
     d52:	80 93 b2 01 	sts	0x01B2, r24
	prev_wpm = wpm;
     d56:	80 91 d0 01 	lds	r24, 0x01D0
     d5a:	80 93 dd 01 	sts	0x01DD, r24
	wpm = speed;
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	80 93 d0 01 	sts	0x01D0, r24

	set_st_freq(st_freq);
     d64:	80 91 b2 01 	lds	r24, 0x01B2
     d68:	90 91 b3 01 	lds	r25, 0x01B3
     d6c:	cc 01       	movw	r24, r24
     d6e:	a0 e0       	ldi	r26, 0x00	; 0
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	0e 94 8c 0a 	call	0x1518	; 0x1518 <set_st_freq>
	set_wpm(wpm);
     d7a:	80 91 d0 01 	lds	r24, 0x01D0
     d7e:	0e 94 01 04 	call	0x802	; 0x802 <set_wpm>

	// Set into announce mode
	cur_state = IDLE;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 bc 01 	sts	0x01BC, r24
	cur_mode = ANNOUNCE;
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	80 93 9a 01 	sts	0x019A, r24
}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <read_voltage>:

void read_voltage(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	00 d0       	rcall	.+0      	; 0xda4 <read_voltage+0x6>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <read_voltage+0x8>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <read_voltage+0xa>
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 c3 1a 	call	0x3586	; 0x3586 <malloc>
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     db8:	8a e7       	ldi	r24, 0x7A	; 122
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	2a e7       	ldi	r18, 0x7A	; 122
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	d9 01       	movw	r26, r18
     dc2:	2c 91       	ld	r18, X
     dc4:	20 64       	ori	r18, 0x40	; 64
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     dca:	8a e7       	ldi	r24, 0x7A	; 122
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	dc 01       	movw	r26, r24
     dd0:	8c 91       	ld	r24, X
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	80 74       	andi	r24, 0x40	; 64
     dd8:	90 70       	andi	r25, 0x00	; 0
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	b1 f7       	brne	.-20     	; 0xdca <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     dde:	89 e7       	ldi	r24, 0x79	; 121
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	fc 01       	movw	r30, r24
     de4:	80 81       	ld	r24, Z
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 15.7 V
	// Well use fixed point numbers, so full scale is 157 * 0.1 V
	vcc = (vcc_mon * 157) / 256;
     dee:	4b 81       	ldd	r20, Y+3	; 0x03
     df0:	5c 81       	ldd	r21, Y+4	; 0x04
     df2:	2d e9       	ldi	r18, 0x9D	; 157
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	42 9f       	mul	r20, r18
     df8:	c0 01       	movw	r24, r0
     dfa:	43 9f       	mul	r20, r19
     dfc:	90 0d       	add	r25, r0
     dfe:	52 9f       	mul	r21, r18
     e00:	90 0d       	add	r25, r0
     e02:	11 24       	eor	r1, r1
     e04:	89 2f       	mov	r24, r25
     e06:	99 27       	eor	r25, r25
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	9e 81       	ldd	r25, Y+6	; 0x06
     e10:	2a e0       	ldi	r18, 0x0A	; 10
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	b9 01       	movw	r22, r18
     e16:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__udivmodhi4>
     e1a:	9b 01       	movw	r18, r22
     e1c:	f9 01       	movw	r30, r18
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	2a e0       	ldi	r18, 0x0A	; 10
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	b9 01       	movw	r22, r18
     e28:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__udivmodhi4>
     e2c:	9c 01       	movw	r18, r24
     e2e:	8d b7       	in	r24, 0x3d	; 61
     e30:	9e b7       	in	r25, 0x3e	; 62
     e32:	08 97       	sbiw	r24, 0x08	; 8
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	9e bf       	out	0x3e, r25	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	8d bf       	out	0x3d, r24	; 61
     e3e:	8d b7       	in	r24, 0x3d	; 61
     e40:	9e b7       	in	r25, 0x3e	; 62
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	49 81       	ldd	r20, Y+1	; 0x01
     e46:	5a 81       	ldd	r21, Y+2	; 0x02
     e48:	dc 01       	movw	r26, r24
     e4a:	4d 93       	st	X+, r20
     e4c:	5c 93       	st	X, r21
     e4e:	4b e0       	ldi	r20, 0x0B	; 11
     e50:	51 e0       	ldi	r21, 0x01	; 1
     e52:	dc 01       	movw	r26, r24
     e54:	13 96       	adiw	r26, 0x03	; 3
     e56:	5c 93       	st	X, r21
     e58:	4e 93       	st	-X, r20
     e5a:	12 97       	sbiw	r26, 0x02	; 2
     e5c:	dc 01       	movw	r26, r24
     e5e:	15 96       	adiw	r26, 0x05	; 5
     e60:	fc 93       	st	X, r31
     e62:	ee 93       	st	-X, r30
     e64:	14 97       	sbiw	r26, 0x04	; 4
     e66:	fc 01       	movw	r30, r24
     e68:	37 83       	std	Z+7, r19	; 0x07
     e6a:	26 83       	std	Z+6, r18	; 0x06
     e6c:	0e 94 22 1c 	call	0x3844	; 0x3844 <sprintf>
     e70:	8d b7       	in	r24, 0x3d	; 61
     e72:	9e b7       	in	r25, 0x3e	; 62
     e74:	08 96       	adiw	r24, 0x08	; 8
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	9e bf       	out	0x3e, r25	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq, wpm);
     e80:	20 91 b2 01 	lds	r18, 0x01B2
     e84:	30 91 b3 01 	lds	r19, 0x01B3
     e88:	40 91 d0 01 	lds	r20, 0x01D0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	b9 01       	movw	r22, r18
     e92:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>

	free(vcc_out);
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <free>
}
     e9e:	26 96       	adiw	r28, 0x06	; 6
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <count_frequency>:

void count_frequency(void)
{
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <count_frequency+0xa>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     ebe:	8f e0       	ldi	r24, 0x0F	; 15
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 c3 1a 	call	0x3586	; 0x3586 <malloc>
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     eca:	80 91 cc 01 	lds	r24, 0x01CC
     ece:	90 91 cd 01 	lds	r25, 0x01CD
     ed2:	a0 91 ce 01 	lds	r26, 0x01CE
     ed6:	b0 91 cf 01 	lds	r27, 0x01CF
     eda:	28 ee       	ldi	r18, 0xE8	; 232
     edc:	33 e0       	ldi	r19, 0x03	; 3
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__udivmodsi4>
     eea:	da 01       	movw	r26, r20
     eec:	c9 01       	movw	r24, r18
     eee:	24 e6       	ldi	r18, 0x64	; 100
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__udivmodsi4>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	8c 01       	movw	r16, r24
     f04:	80 91 cc 01 	lds	r24, 0x01CC
     f08:	90 91 cd 01 	lds	r25, 0x01CD
     f0c:	a0 91 ce 01 	lds	r26, 0x01CE
     f10:	b0 91 cf 01 	lds	r27, 0x01CF
     f14:	28 ee       	ldi	r18, 0xE8	; 232
     f16:	33 e0       	ldi	r19, 0x03	; 3
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__udivmodsi4>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	2a e0       	ldi	r18, 0x0A	; 10
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__udivmodsi4>
     f38:	da 01       	movw	r26, r20
     f3a:	c9 01       	movw	r24, r18
     f3c:	9c 01       	movw	r18, r24
     f3e:	8d b7       	in	r24, 0x3d	; 61
     f40:	9e b7       	in	r25, 0x3e	; 62
     f42:	08 97       	sbiw	r24, 0x08	; 8
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	9e bf       	out	0x3e, r25	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	8d bf       	out	0x3d, r24	; 61
     f4e:	8d b7       	in	r24, 0x3d	; 61
     f50:	9e b7       	in	r25, 0x3e	; 62
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	49 81       	ldd	r20, Y+1	; 0x01
     f56:	5a 81       	ldd	r21, Y+2	; 0x02
     f58:	fc 01       	movw	r30, r24
     f5a:	51 83       	std	Z+1, r21	; 0x01
     f5c:	40 83       	st	Z, r20
     f5e:	41 e1       	ldi	r20, 0x11	; 17
     f60:	51 e0       	ldi	r21, 0x01	; 1
     f62:	fc 01       	movw	r30, r24
     f64:	53 83       	std	Z+3, r21	; 0x03
     f66:	42 83       	std	Z+2, r20	; 0x02
     f68:	fc 01       	movw	r30, r24
     f6a:	15 83       	std	Z+5, r17	; 0x05
     f6c:	04 83       	std	Z+4, r16	; 0x04
     f6e:	fc 01       	movw	r30, r24
     f70:	37 83       	std	Z+7, r19	; 0x07
     f72:	26 83       	std	Z+6, r18	; 0x06
     f74:	0e 94 22 1c 	call	0x3844	; 0x3844 <sprintf>
     f78:	8d b7       	in	r24, 0x3d	; 61
     f7a:	9e b7       	in	r25, 0x3e	; 62
     f7c:	08 96       	adiw	r24, 0x08	; 8
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	9e bf       	out	0x3e, r25	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out, st_freq, wpm);
     f88:	20 91 b2 01 	lds	r18, 0x01B2
     f8c:	30 91 b3 01 	lds	r19, 0x01B3
     f90:	40 91 d0 01 	lds	r20, 0x01D0
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	b9 01       	movw	r22, r18
     f9a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>

	free(freq_out);
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <free>
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <poll_buttons>:

void poll_buttons(void)
{
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
     fc6:	80 91 ba 01 	lds	r24, 0x01BA
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	59 f4       	brne	.+22     	; 0xfe4 <poll_buttons+0x30>
	{
		cur_state = IDLE;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	80 93 bc 01 	sts	0x01BC, r24
		prev_mode = cur_mode;
     fd4:	80 91 9a 01 	lds	r24, 0x019A
     fd8:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = TUNE;
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	80 93 9a 01 	sts	0x019A, r24
     fe2:	36 c0       	rjmp	.+108    	; 0x1050 <poll_buttons+0x9c>
	}
	else if(cmd_btn == PRESS)
     fe4:	80 91 bb 01 	lds	r24, 0x01BB
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	59 f4       	brne	.+22     	; 0x1002 <poll_buttons+0x4e>
	{
		prev_mode = cur_mode;
     fec:	80 91 9a 01 	lds	r24, 0x019A
     ff0:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = MENU;
     ff4:	84 e0       	ldi	r24, 0x04	; 4
     ff6:	80 93 9a 01 	sts	0x019A, r24
		cur_state = IDLE;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	80 93 bc 01 	sts	0x01BC, r24
    1000:	27 c0       	rjmp	.+78     	; 0x1050 <poll_buttons+0x9c>
	}
	else if(msg_btn == PRESS)
    1002:	80 91 b9 01 	lds	r24, 0x01B9
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	19 f4       	brne	.+6      	; 0x1010 <poll_buttons+0x5c>
		count_frequency();
    100a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <count_frequency>
    100e:	20 c0       	rjmp	.+64     	; 0x1050 <poll_buttons+0x9c>
	else if(msg_btn == HOLD)
    1010:	80 91 b9 01 	lds	r24, 0x01B9
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	e1 f4       	brne	.+56     	; 0x1050 <poll_buttons+0x9c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
    1018:	8d e6       	ldi	r24, 0x6D	; 109
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	b9 01       	movw	r22, r18
    1022:	48 e2       	ldi	r20, 0x28	; 40
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
    102a:	80 91 d5 01 	lds	r24, 0x01D5
    102e:	90 91 d6 01 	lds	r25, 0x01D6
    1032:	2d e6       	ldi	r18, 0x6D	; 109
    1034:	31 e0       	ldi	r19, 0x01	; 1
    1036:	b9 01       	movw	r22, r18
    1038:	0e 94 11 1c 	call	0x3822	; 0x3822 <strcpy>
		cur_state = IDLE;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	80 93 bc 01 	sts	0x01BC, r24
		prev_mode = cur_mode;
    1042:	80 91 9a 01 	lds	r24, 0x019A
    1046:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = PLAYBACK;
    104a:	86 e0       	ldi	r24, 0x06	; 6
    104c:	80 93 9a 01 	sts	0x019A, r24
	}

	if(enc_btn == PRESS)
    1050:	80 91 c1 01 	lds	r24, 0x01C1
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	89 f5       	brne	.+98     	; 0x10ba <poll_buttons+0x106>
	{
		if(tune_rate == FAST)
    1058:	80 91 06 01 	lds	r24, 0x0106
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	b1 f4       	brne	.+44     	; 0x108c <poll_buttons+0xd8>
		{
			tune_rate = SLOW;
    1060:	10 92 06 01 	sts	0x0106, r1
			tune_step = DDS_20HZ;
    1064:	84 e3       	ldi	r24, 0x34	; 52
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	90 93 08 01 	sts	0x0108, r25
    106c:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 5;
    1070:	85 e0       	ldi	r24, 0x05	; 5
    1072:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	0e 94 19 04 	call	0x832	; 0x832 <debounce>
			announce("S", ST_LOW, 25);
    107c:	8b e1       	ldi	r24, 0x1B	; 27
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	60 e9       	ldi	r22, 0x90	; 144
    1082:	71 e0       	ldi	r23, 0x01	; 1
    1084:	49 e1       	ldi	r20, 0x19	; 25
    1086:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
    108a:	8a c0       	rjmp	.+276    	; 0x11a0 <poll_buttons+0x1ec>
		}
		else
		{
			tune_rate = FAST;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 93 06 01 	sts	0x0106, r24
			tune_step = DDS_100HZ;
    1092:	8c e0       	ldi	r24, 0x0C	; 12
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	90 93 08 01 	sts	0x0108, r25
    109a:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 25;
    109e:	89 e1       	ldi	r24, 0x19	; 25
    10a0:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 19 04 	call	0x832	; 0x832 <debounce>
			announce("S", ST_HIGH, 25);
    10aa:	8b e1       	ldi	r24, 0x1B	; 27
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	64 e8       	ldi	r22, 0x84	; 132
    10b0:	73 e0       	ldi	r23, 0x03	; 3
    10b2:	49 e1       	ldi	r20, 0x19	; 25
    10b4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
    10b8:	73 c0       	rjmp	.+230    	; 0x11a0 <poll_buttons+0x1ec>
		}
	}
	else if(enc_btn == HOLD)
    10ba:	80 91 c1 01 	lds	r24, 0x01C1
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <poll_buttons+0x110>
    10c2:	6e c0       	rjmp	.+220    	; 0x11a0 <poll_buttons+0x1ec>
	{
		if(rit_enable == FALSE)
    10c4:	80 91 dc 01 	lds	r24, 0x01DC
    10c8:	88 23       	and	r24, r24
    10ca:	b1 f5       	brne	.+108    	; 0x1138 <poll_buttons+0x184>
		{
			RIT_LED_DDR |= _BV(RIT_LED);
    10cc:	87 e2       	ldi	r24, 0x27	; 39
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	27 e2       	ldi	r18, 0x27	; 39
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	22 60       	ori	r18, 0x02	; 2
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18
			RIT_LED_PORT |= _BV(RIT_LED);
    10de:	88 e2       	ldi	r24, 0x28	; 40
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	28 e2       	ldi	r18, 0x28	; 40
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	f9 01       	movw	r30, r18
    10e8:	20 81       	ld	r18, Z
    10ea:	22 60       	ori	r18, 0x02	; 2
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
			rit_enable = TRUE;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 dc 01 	sts	0x01DC, r24
			dds_rit_freq_word = dds_freq_word;
    10f6:	80 91 a4 01 	lds	r24, 0x01A4
    10fa:	90 91 a5 01 	lds	r25, 0x01A5
    10fe:	a0 91 a6 01 	lds	r26, 0x01A6
    1102:	b0 91 a7 01 	lds	r27, 0x01A7
    1106:	80 93 b4 01 	sts	0x01B4, r24
    110a:	90 93 b5 01 	sts	0x01B5, r25
    110e:	a0 93 b6 01 	sts	0x01B6, r26
    1112:	b0 93 b7 01 	sts	0x01B7, r27
			tune_dds(dds_rit_freq_word, REG_1);
    1116:	80 91 b4 01 	lds	r24, 0x01B4
    111a:	90 91 b5 01 	lds	r25, 0x01B5
    111e:	a0 91 b6 01 	lds	r26, 0x01B6
    1122:	b0 91 b7 01 	lds	r27, 0x01B7
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	41 e0       	ldi	r20, 0x01	; 1
    112c:	0e 94 92 09 	call	0x1324	; 0x1324 <tune_dds>
			debounce(TRUE);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 19 04 	call	0x832	; 0x832 <debounce>
    1136:	34 c0       	rjmp	.+104    	; 0x11a0 <poll_buttons+0x1ec>
		}
		else
		{

			RIT_LED_DDR &= ~(_BV(RIT_LED));
    1138:	87 e2       	ldi	r24, 0x27	; 39
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	27 e2       	ldi	r18, 0x27	; 39
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	20 81       	ld	r18, Z
    1144:	2d 7f       	andi	r18, 0xFD	; 253
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
			RIT_LED_PORT &= ~(_BV(RIT_LED));
    114a:	88 e2       	ldi	r24, 0x28	; 40
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	28 e2       	ldi	r18, 0x28	; 40
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	2d 7f       	andi	r18, 0xFD	; 253
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
			rit_enable = FALSE;
    115c:	10 92 dc 01 	sts	0x01DC, r1
			dds_freq_word = dds_rit_freq_word;
    1160:	80 91 b4 01 	lds	r24, 0x01B4
    1164:	90 91 b5 01 	lds	r25, 0x01B5
    1168:	a0 91 b6 01 	lds	r26, 0x01B6
    116c:	b0 91 b7 01 	lds	r27, 0x01B7
    1170:	80 93 a4 01 	sts	0x01A4, r24
    1174:	90 93 a5 01 	sts	0x01A5, r25
    1178:	a0 93 a6 01 	sts	0x01A6, r26
    117c:	b0 93 a7 01 	sts	0x01A7, r27
			tune_dds(dds_freq_word, REG_0);
    1180:	80 91 a4 01 	lds	r24, 0x01A4
    1184:	90 91 a5 01 	lds	r25, 0x01A5
    1188:	a0 91 a6 01 	lds	r26, 0x01A6
    118c:	b0 91 a7 01 	lds	r27, 0x01A7
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	0e 94 92 09 	call	0x1324	; 0x1324 <tune_dds>
			debounce(TRUE);
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	0e 94 19 04 	call	0x832	; 0x832 <debounce>
		}
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    11a0:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    11a2:	80 91 5f 01 	lds	r24, 0x015F
    11a6:	88 23       	and	r24, r24
    11a8:	19 f0       	breq	.+6      	; 0x11b0 <poll_buttons+0x1fc>
		cur_enc_state += 0x02;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	8e 5f       	subi	r24, 0xFE	; 254
    11ae:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    11b0:	80 91 db 01 	lds	r24, 0x01DB
    11b4:	88 23       	and	r24, r24
    11b6:	19 f0       	breq	.+6      	; 0x11be <poll_buttons+0x20a>
		cur_enc_state += 0x01;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    11be:	80 91 46 01 	lds	r24, 0x0146
    11c2:	99 81       	ldd	r25, Y+1	; 0x01
    11c4:	98 17       	cp	r25, r24
    11c6:	09 f4       	brne	.+2      	; 0x11ca <poll_buttons+0x216>
    11c8:	a2 c0       	rjmp	.+324    	; 0x130e <poll_buttons+0x35a>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    11ca:	80 91 46 01 	lds	r24, 0x0146
    11ce:	86 95       	lsr	r24
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	80 93 46 01 	sts	0x0146, r24

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    11d6:	80 91 46 01 	lds	r24, 0x0146
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	81 70       	andi	r24, 0x01	; 1
    11e6:	90 70       	andi	r25, 0x00	; 0
    11e8:	82 27       	eor	r24, r18
    11ea:	93 27       	eor	r25, r19
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <poll_buttons+0x240>
    11f2:	4b c0       	rjmp	.+150    	; 0x128a <poll_buttons+0x2d6>
		{

			dds_freq_word -= tune_step;
    11f4:	20 91 a4 01 	lds	r18, 0x01A4
    11f8:	30 91 a5 01 	lds	r19, 0x01A5
    11fc:	40 91 a6 01 	lds	r20, 0x01A6
    1200:	50 91 a7 01 	lds	r21, 0x01A7
    1204:	80 91 07 01 	lds	r24, 0x0107
    1208:	90 91 08 01 	lds	r25, 0x0108
    120c:	cc 01       	movw	r24, r24
    120e:	a0 e0       	ldi	r26, 0x00	; 0
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	79 01       	movw	r14, r18
    1214:	8a 01       	movw	r16, r20
    1216:	e8 1a       	sub	r14, r24
    1218:	f9 0a       	sbc	r15, r25
    121a:	0a 0b       	sbc	r16, r26
    121c:	1b 0b       	sbc	r17, r27
    121e:	d8 01       	movw	r26, r16
    1220:	c7 01       	movw	r24, r14
    1222:	80 93 a4 01 	sts	0x01A4, r24
    1226:	90 93 a5 01 	sts	0x01A5, r25
    122a:	a0 93 a6 01 	sts	0x01A6, r26
    122e:	b0 93 a7 01 	sts	0x01A7, r27
			tune_freq -= tune_freq_step;
    1232:	20 91 cc 01 	lds	r18, 0x01CC
    1236:	30 91 cd 01 	lds	r19, 0x01CD
    123a:	40 91 ce 01 	lds	r20, 0x01CE
    123e:	50 91 cf 01 	lds	r21, 0x01CF
    1242:	80 91 09 01 	lds	r24, 0x0109
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a0 e0       	ldi	r26, 0x00	; 0
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	79 01       	movw	r14, r18
    1250:	8a 01       	movw	r16, r20
    1252:	e8 1a       	sub	r14, r24
    1254:	f9 0a       	sbc	r15, r25
    1256:	0a 0b       	sbc	r16, r26
    1258:	1b 0b       	sbc	r17, r27
    125a:	d8 01       	movw	r26, r16
    125c:	c7 01       	movw	r24, r14
    125e:	80 93 cc 01 	sts	0x01CC, r24
    1262:	90 93 cd 01 	sts	0x01CD, r25
    1266:	a0 93 ce 01 	sts	0x01CE, r26
    126a:	b0 93 cf 01 	sts	0x01CF, r27
			tune_dds(dds_freq_word, REG_0);
    126e:	80 91 a4 01 	lds	r24, 0x01A4
    1272:	90 91 a5 01 	lds	r25, 0x01A5
    1276:	a0 91 a6 01 	lds	r26, 0x01A6
    127a:	b0 91 a7 01 	lds	r27, 0x01A7
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	0e 94 92 09 	call	0x1324	; 0x1324 <tune_dds>
    1288:	42 c0       	rjmp	.+132    	; 0x130e <poll_buttons+0x35a>
		}
		else
		{
			dds_freq_word += tune_step;
    128a:	80 91 07 01 	lds	r24, 0x0107
    128e:	90 91 08 01 	lds	r25, 0x0108
    1292:	9c 01       	movw	r18, r24
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	80 91 a4 01 	lds	r24, 0x01A4
    129c:	90 91 a5 01 	lds	r25, 0x01A5
    12a0:	a0 91 a6 01 	lds	r26, 0x01A6
    12a4:	b0 91 a7 01 	lds	r27, 0x01A7
    12a8:	82 0f       	add	r24, r18
    12aa:	93 1f       	adc	r25, r19
    12ac:	a4 1f       	adc	r26, r20
    12ae:	b5 1f       	adc	r27, r21
    12b0:	80 93 a4 01 	sts	0x01A4, r24
    12b4:	90 93 a5 01 	sts	0x01A5, r25
    12b8:	a0 93 a6 01 	sts	0x01A6, r26
    12bc:	b0 93 a7 01 	sts	0x01A7, r27
			tune_freq += tune_freq_step;
    12c0:	80 91 09 01 	lds	r24, 0x0109
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	80 91 cc 01 	lds	r24, 0x01CC
    12d0:	90 91 cd 01 	lds	r25, 0x01CD
    12d4:	a0 91 ce 01 	lds	r26, 0x01CE
    12d8:	b0 91 cf 01 	lds	r27, 0x01CF
    12dc:	82 0f       	add	r24, r18
    12de:	93 1f       	adc	r25, r19
    12e0:	a4 1f       	adc	r26, r20
    12e2:	b5 1f       	adc	r27, r21
    12e4:	80 93 cc 01 	sts	0x01CC, r24
    12e8:	90 93 cd 01 	sts	0x01CD, r25
    12ec:	a0 93 ce 01 	sts	0x01CE, r26
    12f0:	b0 93 cf 01 	sts	0x01CF, r27
			tune_dds(dds_freq_word, REG_0);
    12f4:	80 91 a4 01 	lds	r24, 0x01A4
    12f8:	90 91 a5 01 	lds	r25, 0x01A5
    12fc:	a0 91 a6 01 	lds	r26, 0x01A6
    1300:	b0 91 a7 01 	lds	r27, 0x01A7
    1304:	bc 01       	movw	r22, r24
    1306:	cd 01       	movw	r24, r26
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	0e 94 92 09 	call	0x1324	; 0x1324 <tune_dds>
		}
	}

	prev_enc_state = cur_enc_state;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	80 93 46 01 	sts	0x0146, r24
}
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	08 95       	ret

00001324 <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	2b 97       	sbiw	r28, 0x0b	; 11
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	6f 83       	std	Y+7, r22	; 0x07
    133a:	78 87       	std	Y+8, r23	; 0x08
    133c:	89 87       	std	Y+9, r24	; 0x09
    133e:	9a 87       	std	Y+10, r25	; 0x0a
    1340:	4b 87       	std	Y+11, r20	; 0x0b
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    1342:	8b 85       	ldd	r24, Y+11	; 0x0b
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	29 f4       	brne	.+10     	; 0x1352 <tune_dds+0x2e>
		freq_reg = 0x8000;
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e8       	ldi	r25, 0x80	; 128
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	04 c0       	rjmp	.+8      	; 0x135a <tune_dds+0x36>
	else
		freq_reg = 0x4000;
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e4       	ldi	r25, 0x40	; 64
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    135a:	8f 81       	ldd	r24, Y+7	; 0x07
    135c:	98 85       	ldd	r25, Y+8	; 0x08
    135e:	9c 01       	movw	r18, r24
    1360:	3f 73       	andi	r19, 0x3F	; 63
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	9c 83       	std	Y+4, r25	; 0x04
    136c:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    136e:	8f 81       	ldd	r24, Y+7	; 0x07
    1370:	98 85       	ldd	r25, Y+8	; 0x08
    1372:	a9 85       	ldd	r26, Y+9	; 0x09
    1374:	ba 85       	ldd	r27, Y+10	; 0x0a
    1376:	07 2e       	mov	r0, r23
    1378:	7e e0       	ldi	r23, 0x0E	; 14
    137a:	b6 95       	lsr	r27
    137c:	a7 95       	ror	r26
    137e:	97 95       	ror	r25
    1380:	87 95       	ror	r24
    1382:	7a 95       	dec	r23
    1384:	d1 f7       	brne	.-12     	; 0x137a <tune_dds+0x56>
    1386:	70 2d       	mov	r23, r0
    1388:	9c 01       	movw	r18, r24
    138a:	3f 73       	andi	r19, 0x3F	; 63
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	82 0f       	add	r24, r18
    1392:	93 1f       	adc	r25, r19
    1394:	9e 83       	std	Y+6, r25	; 0x06
    1396:	8d 83       	std	Y+5, r24	; 0x05
		//send_dds_word(0x2800);
	//else
		//send_dds_word(0x2000);

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>
}
    13a8:	2b 96       	adiw	r28, 0x0b	; 11
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <init_dds>:

void init_dds(uint32_t dds_word, enum FREQREG reg)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	2b 97       	sbiw	r28, 0x0b	; 11
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	6f 83       	std	Y+7, r22	; 0x07
    13d0:	78 87       	std	Y+8, r23	; 0x08
    13d2:	89 87       	std	Y+9, r24	; 0x09
    13d4:	9a 87       	std	Y+10, r25	; 0x0a
    13d6:	4b 87       	std	Y+11, r20	; 0x0b
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    13d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <init_dds+0x2e>
		freq_reg = 0x8000;
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e8       	ldi	r25, 0x80	; 128
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <init_dds+0x36>
	else
		freq_reg = 0x4000;
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e4       	ldi	r25, 0x40	; 64
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    13f0:	8f 81       	ldd	r24, Y+7	; 0x07
    13f2:	98 85       	ldd	r25, Y+8	; 0x08
    13f4:	9c 01       	movw	r18, r24
    13f6:	3f 73       	andi	r19, 0x3F	; 63
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    1404:	8f 81       	ldd	r24, Y+7	; 0x07
    1406:	98 85       	ldd	r25, Y+8	; 0x08
    1408:	a9 85       	ldd	r26, Y+9	; 0x09
    140a:	ba 85       	ldd	r27, Y+10	; 0x0a
    140c:	07 2e       	mov	r0, r23
    140e:	7e e0       	ldi	r23, 0x0E	; 14
    1410:	b6 95       	lsr	r27
    1412:	a7 95       	ror	r26
    1414:	97 95       	ror	r25
    1416:	87 95       	ror	r24
    1418:	7a 95       	dec	r23
    141a:	d1 f7       	brne	.-12     	; 0x1410 <init_dds+0x56>
    141c:	70 2d       	mov	r23, r0
    141e:	9c 01       	movw	r18, r24
    1420:	3f 73       	andi	r19, 0x3F	; 63
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	82 0f       	add	r24, r18
    1428:	93 1f       	adc	r25, r19
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05

	// Control register
	//if(reg == REG_1)
		//send_dds_word(0x2900);
	//else
		send_dds_word(0x2100);
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	91 e2       	ldi	r25, 0x21	; 33
    1432:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>

	// Send phase
	send_dds_word(0xC000);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 ec       	ldi	r25, 0xC0	; 192
    144a:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>

	// Exit reset
	send_dds_word(0x2000);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e2       	ldi	r25, 0x20	; 32
    1452:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>
}
    1456:	2b 96       	adiw	r28, 0x0b	; 11
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <send_dds_word>:

void send_dds_word(uint16_t dds_word)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <send_dds_word+0x6>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    1476:	85 e2       	ldi	r24, 0x25	; 37
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	25 e2       	ldi	r18, 0x25	; 37
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	f9 01       	movw	r30, r18
    1480:	20 81       	ld	r18, Z
    1482:	20 62       	ori	r18, 0x20	; 32
    1484:	fc 01       	movw	r30, r24
    1486:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    1488:	85 e2       	ldi	r24, 0x25	; 37
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	25 e2       	ldi	r18, 0x25	; 37
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	f9 01       	movw	r30, r18
    1492:	20 81       	ld	r18, Z
    1494:	2d 7f       	andi	r18, 0xFD	; 253
    1496:	fc 01       	movw	r30, r24
    1498:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    149a:	8e e4       	ldi	r24, 0x4E	; 78
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	29 81       	ldd	r18, Y+1	; 0x01
    14a0:	3a 81       	ldd	r19, Y+2	; 0x02
    14a2:	23 2f       	mov	r18, r19
    14a4:	33 27       	eor	r19, r19
    14a6:	fc 01       	movw	r30, r24
    14a8:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    14aa:	00 00       	nop
    14ac:	8d e4       	ldi	r24, 0x4D	; 77
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	fc 01       	movw	r30, r24
    14b2:	80 81       	ld	r24, Z
    14b4:	88 23       	and	r24, r24
    14b6:	d4 f7       	brge	.-12     	; 0x14ac <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    14b8:	8e e4       	ldi	r24, 0x4E	; 78
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	29 81       	ldd	r18, Y+1	; 0x01
    14be:	fc 01       	movw	r30, r24
    14c0:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    14c2:	00 00       	nop
    14c4:	8d e4       	ldi	r24, 0x4D	; 77
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	fc 01       	movw	r30, r24
    14ca:	80 81       	ld	r24, Z
    14cc:	88 23       	and	r24, r24
    14ce:	d4 f7       	brge	.-12     	; 0x14c4 <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    14d0:	85 e2       	ldi	r24, 0x25	; 37
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	25 e2       	ldi	r18, 0x25	; 37
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	f9 01       	movw	r30, r18
    14da:	20 81       	ld	r18, Z
    14dc:	22 60       	ori	r18, 0x02	; 2
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	0f 92       	push	r0
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	29 f4       	brne	.+10     	; 0x1508 <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	98 e2       	ldi	r25, 0x28	; 40
    1502:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e2       	ldi	r25, 0x20	; 32
    150c:	0e 94 34 0a 	call	0x1468	; 0x1468 <send_dds_word>
}
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <set_st_freq+0x6>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <set_st_freq+0x8>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	69 83       	std	Y+1, r22	; 0x01
    1526:	7a 83       	std	Y+2, r23	; 0x02
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	ab 81       	ldd	r26, Y+3	; 0x03
    1532:	bc 81       	ldd	r27, Y+4	; 0x04
    1534:	23 e9       	ldi	r18, 0x93	; 147
    1536:	38 e1       	ldi	r19, 0x18	; 24
    1538:	44 e0       	ldi	r20, 0x04	; 4
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__mulsi3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	80 93 a8 01 	sts	0x01A8, r24
    154c:	90 93 a9 01 	sts	0x01A9, r25
    1550:	a0 93 aa 01 	sts	0x01AA, r26
    1554:	b0 93 ab 01 	sts	0x01AB, r27
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <main>:

int main(void)
{
    1566:	1f 93       	push	r17
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	62 97       	sbiw	r28, 0x12	; 18
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    157c:	89 e2       	ldi	r24, 0x29	; 41
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 c3 1a 	call	0x3586	; 0x3586 <malloc>
    1584:	90 93 d6 01 	sts	0x01D6, r25
    1588:	80 93 d5 01 	sts	0x01D5, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    158c:	80 91 d5 01 	lds	r24, 0x01D5
    1590:	90 91 d6 01 	lds	r25, 0x01D6
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	49 e2       	ldi	r20, 0x29	; 41
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <memset>
	cur_char_p = announce_buffer;
    15a0:	80 91 d5 01 	lds	r24, 0x01D5
    15a4:	90 91 d6 01 	lds	r25, 0x01D6
    15a8:	90 93 37 01 	sts	0x0137, r25
    15ac:	80 93 36 01 	sts	0x0136, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    15b0:	89 e2       	ldi	r24, 0x29	; 41
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 c3 1a 	call	0x3586	; 0x3586 <malloc>
    15b8:	90 93 39 01 	sts	0x0139, r25
    15bc:	80 93 38 01 	sts	0x0138, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    15c0:	80 91 38 01 	lds	r24, 0x0138
    15c4:	90 91 39 01 	lds	r25, 0x0139
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	49 e2       	ldi	r20, 0x29	; 41
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <memset>

	init();
    15d4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <init>

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    15d8:	19 82       	std	Y+1, r1	; 0x01
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <main+0x82>
		debounce(FALSE);
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	0e 94 19 04 	call	0x832	; 0x832 <debounce>
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);

	init();

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	8f 30       	cpi	r24, 0x0F	; 15
    15ec:	b8 f3       	brcs	.-18     	; 0x15dc <main+0x76>
		debounce(FALSE);

	if((dah_active == TRUE) && (dit_active == FALSE))
    15ee:	80 91 b8 01 	lds	r24, 0x01B8
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	41 f4       	brne	.+16     	; 0x1606 <main+0xa0>
    15f6:	80 91 ca 01 	lds	r24, 0x01CA
    15fa:	88 23       	and	r24, r24
    15fc:	21 f4       	brne	.+8      	; 0x1606 <main+0xa0>
		cur_mode = SK;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 9a 01 	sts	0x019A, r24
    1604:	02 c0       	rjmp	.+4      	; 0x160a <main+0xa4>
	else
		cur_mode = KEYER;
    1606:	10 92 9a 01 	sts	0x019A, r1

	announce("CC", st_freq, 15);
    160a:	20 91 b2 01 	lds	r18, 0x01B2
    160e:	30 91 b3 01 	lds	r19, 0x01B3
    1612:	8d e1       	ldi	r24, 0x1D	; 29
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	b9 01       	movw	r22, r18
    1618:	4f e0       	ldi	r20, 0x0F	; 15
    161a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    161e:	f8 94       	cli
		cur_timer = timer;
    1620:	80 91 66 01 	lds	r24, 0x0166
    1624:	90 91 67 01 	lds	r25, 0x0167
    1628:	a0 91 68 01 	lds	r26, 0x0168
    162c:	b0 91 69 01 	lds	r27, 0x0169
    1630:	80 93 60 01 	sts	0x0160, r24
    1634:	90 93 61 01 	sts	0x0161, r25
    1638:	a0 93 62 01 	sts	0x0162, r26
    163c:	b0 93 63 01 	sts	0x0163, r27
		sei();
    1640:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    1642:	80 91 9a 01 	lds	r24, 0x019A
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	09 f4       	brne	.+2      	; 0x1652 <main+0xec>
    1650:	41 c6       	rjmp	.+3202   	; 0x22d4 <main+0xd6e>
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	91 05       	cpc	r25, r1
    1656:	64 f4       	brge	.+24     	; 0x1670 <main+0x10a>
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	f1 f0       	breq	.+60     	; 0x169a <main+0x134>
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	91 05       	cpc	r25, r1
    1662:	0c f0       	brlt	.+2      	; 0x1666 <main+0x100>
    1664:	84 c4       	rjmp	.+2312   	; 0x1f6e <main+0xa08>
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	09 f4       	brne	.+2      	; 0x166c <main+0x106>
    166a:	d5 c0       	rjmp	.+426    	; 0x1816 <main+0x2b0>
    166c:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <main+0x1f4a>
    1670:	85 30       	cpi	r24, 0x05	; 5
    1672:	91 05       	cpc	r25, r1
    1674:	11 f4       	brne	.+4      	; 0x167a <main+0x114>
    1676:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <main+0x123c>
    167a:	85 30       	cpi	r24, 0x05	; 5
    167c:	91 05       	cpc	r25, r1
    167e:	0c f4       	brge	.+2      	; 0x1682 <main+0x11c>
    1680:	ea c6       	rjmp	.+3540   	; 0x2456 <main+0xef0>
    1682:	86 30       	cpi	r24, 0x06	; 6
    1684:	91 05       	cpc	r25, r1
    1686:	11 f4       	brne	.+4      	; 0x168c <main+0x126>
    1688:	0c 94 89 14 	jmp	0x2912	; 0x2912 <main+0x13ac>
    168c:	87 30       	cpi	r24, 0x07	; 7
    168e:	91 05       	cpc	r25, r1
    1690:	11 f4       	brne	.+4      	; 0x1696 <main+0x130>
    1692:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <main+0x1890>
    1696:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <main+0x1f4a>
		{
		case SK:
			default_mode = SK;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 65 01 	sts	0x0165, r24
			switch(cur_state)
    16a0:	80 91 bc 01 	lds	r24, 0x01BC
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	87 30       	cpi	r24, 0x07	; 7
    16aa:	91 05       	cpc	r25, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <main+0x14a>
    16ae:	4b c0       	rjmp	.+150    	; 0x1746 <main+0x1e0>
    16b0:	8c 30       	cpi	r24, 0x0C	; 12
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <main+0x152>
    16b6:	88 c0       	rjmp	.+272    	; 0x17c8 <main+0x262>
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <main+0x15a>
    16be:	a4 c0       	rjmp	.+328    	; 0x1808 <main+0x2a2>
			{
			case IDLE:
				key_down = FALSE;
    16c0:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    16c4:	10 92 32 01 	sts	0x0132, r1
				if(allow_sleep == TRUE)
    16c8:	80 91 0a 01 	lds	r24, 0x010A
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <main+0x170>
					mute_on = FALSE;
    16d0:	10 92 33 01 	sts	0x0133, r1
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <main+0x176>
				else
					mute_on = TRUE;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 93 33 01 	sts	0x0133, r24

				if(dit_active == TRUE)
    16dc:	80 91 ca 01 	lds	r24, 0x01CA
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	69 f5       	brne	.+90     	; 0x173e <main+0x1d8>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    16e4:	80 91 60 01 	lds	r24, 0x0160
    16e8:	90 91 61 01 	lds	r25, 0x0161
    16ec:	a0 91 62 01 	lds	r26, 0x0162
    16f0:	b0 91 63 01 	lds	r27, 0x0163
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	a1 1d       	adc	r26, r1
    16f8:	b1 1d       	adc	r27, r1
    16fa:	80 93 a0 01 	sts	0x01A0, r24
    16fe:	90 93 a1 01 	sts	0x01A1, r25
    1702:	a0 93 a2 01 	sts	0x01A2, r26
    1706:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = UINT32_MAX;
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	9f ef       	ldi	r25, 0xFF	; 255
    170e:	dc 01       	movw	r26, r24
    1710:	80 93 d7 01 	sts	0x01D7, r24
    1714:	90 93 d8 01 	sts	0x01D8, r25
    1718:	a0 93 d9 01 	sts	0x01D9, r26
    171c:	b0 93 da 01 	sts	0x01DA, r27
					cur_state_end = UINT32_MAX;
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	9f ef       	ldi	r25, 0xFF	; 255
    1724:	dc 01       	movw	r26, r24
    1726:	80 93 c2 01 	sts	0x01C2, r24
    172a:	90 93 c3 01 	sts	0x01C3, r25
    172e:	a0 93 c4 01 	sts	0x01C4, r26
    1732:	b0 93 c5 01 	sts	0x01C5, r27
					cur_state = KEYDOWN;
    1736:	87 e0       	ldi	r24, 0x07	; 7
    1738:	80 93 bc 01 	sts	0x01BC, r24
				}
				else
				{
					cur_state = IDLE;
				}
				break;
    173c:	68 c0       	rjmp	.+208    	; 0x180e <main+0x2a8>
					cur_state_end = UINT32_MAX;
					cur_state = KEYDOWN;
				}
				else
				{
					cur_state = IDLE;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	80 93 bc 01 	sts	0x01BC, r24
				}
				break;
    1744:	64 c0       	rjmp	.+200    	; 0x180e <main+0x2a8>

			case KEYDOWN:
				key_down = TRUE;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 33 01 	sts	0x0133, r24

				if(dit_active == FALSE)
    1758:	80 91 ca 01 	lds	r24, 0x01CA
    175c:	88 23       	and	r24, r24
    175e:	41 f5       	brne	.+80     	; 0x17b0 <main+0x24a>
				{
					cur_state = EXIT;
    1760:	8c e0       	ldi	r24, 0x0C	; 12
    1762:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    1766:	80 91 60 01 	lds	r24, 0x0160
    176a:	90 91 61 01 	lds	r25, 0x0161
    176e:	a0 91 62 01 	lds	r26, 0x0162
    1772:	b0 91 63 01 	lds	r27, 0x0163
    1776:	8c 59       	subi	r24, 0x9C	; 156
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	af 4f       	sbci	r26, 0xFF	; 255
    177c:	bf 4f       	sbci	r27, 0xFF	; 255
    177e:	80 93 c2 01 	sts	0x01C2, r24
    1782:	90 93 c3 01 	sts	0x01C3, r25
    1786:	a0 93 c4 01 	sts	0x01C4, r26
    178a:	b0 93 c5 01 	sts	0x01C5, r27
					tx_end = cur_timer;
    178e:	80 91 60 01 	lds	r24, 0x0160
    1792:	90 91 61 01 	lds	r25, 0x0161
    1796:	a0 91 62 01 	lds	r26, 0x0162
    179a:	b0 91 63 01 	lds	r27, 0x0163
    179e:	80 93 d7 01 	sts	0x01D7, r24
    17a2:	90 93 d8 01 	sts	0x01D8, r25
    17a6:	a0 93 d9 01 	sts	0x01D9, r26
    17aa:	b0 93 da 01 	sts	0x01DA, r27
				}
				else
					tx_end = UINT32_MAX;
				break;
    17ae:	2f c0       	rjmp	.+94     	; 0x180e <main+0x2a8>
					cur_state = EXIT;
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
					tx_end = cur_timer;
				}
				else
					tx_end = UINT32_MAX;
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	9f ef       	ldi	r25, 0xFF	; 255
    17b4:	dc 01       	movw	r26, r24
    17b6:	80 93 d7 01 	sts	0x01D7, r24
    17ba:	90 93 d8 01 	sts	0x01D8, r25
    17be:	a0 93 d9 01 	sts	0x01D9, r26
    17c2:	b0 93 da 01 	sts	0x01DA, r27
				break;
    17c6:	23 c0       	rjmp	.+70     	; 0x180e <main+0x2a8>

			case EXIT:
				key_down = FALSE;
    17c8:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    17cc:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer >= cur_state_end)
    17d6:	20 91 60 01 	lds	r18, 0x0160
    17da:	30 91 61 01 	lds	r19, 0x0161
    17de:	40 91 62 01 	lds	r20, 0x0162
    17e2:	50 91 63 01 	lds	r21, 0x0163
    17e6:	80 91 c2 01 	lds	r24, 0x01C2
    17ea:	90 91 c3 01 	lds	r25, 0x01C3
    17ee:	a0 91 c4 01 	lds	r26, 0x01C4
    17f2:	b0 91 c5 01 	lds	r27, 0x01C5
    17f6:	28 17       	cp	r18, r24
    17f8:	39 07       	cpc	r19, r25
    17fa:	4a 07       	cpc	r20, r26
    17fc:	5b 07       	cpc	r21, r27
    17fe:	30 f0       	brcs	.+12     	; 0x180c <main+0x2a6>
					cur_state = IDLE;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	80 93 bc 01 	sts	0x01BC, r24
				break;
    1806:	03 c0       	rjmp	.+6      	; 0x180e <main+0x2a8>

			default:
				break;
    1808:	00 00       	nop
    180a:	01 c0       	rjmp	.+2      	; 0x180e <main+0x2a8>
				sidetone_on = FALSE;
				mute_on = TRUE;

				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;
    180c:	00 00       	nop

			default:
				break;
			}

			poll_buttons();
    180e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <poll_buttons>
				sleep_disable();
			}
			sei();
			*/

			break;
    1812:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <main+0x1f4c>

		case KEYER:
			default_mode = KEYER;
    1816:	10 92 65 01 	sts	0x0165, r1
			poll_buttons();
    181a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    181e:	80 91 bc 01 	lds	r24, 0x01BC
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <main+0x2c8>
    182c:	ef c1       	rjmp	.+990    	; 0x1c0c <main+0x6a6>
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	91 05       	cpc	r25, r1
    1832:	44 f4       	brge	.+16     	; 0x1844 <main+0x2de>
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	71 f0       	breq	.+28     	; 0x1856 <main+0x2f0>
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <main+0x2dc>
    1840:	75 c1       	rjmp	.+746    	; 0x1b2c <main+0x5c6>
    1842:	92 c3       	rjmp	.+1828   	; 0x1f68 <main+0xa02>
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <main+0x2e6>
    184a:	50 c2       	rjmp	.+1184   	; 0x1cec <main+0x786>
    184c:	8c 30       	cpi	r24, 0x0C	; 12
    184e:	91 05       	cpc	r25, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <main+0x2ee>
    1852:	6b c3       	rjmp	.+1750   	; 0x1f2a <main+0x9c4>
    1854:	89 c3       	rjmp	.+1810   	; 0x1f68 <main+0xa02>
			{
			case IDLE:
				key_down = FALSE;
    1856:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    185a:	10 92 32 01 	sts	0x0132, r1
				mute_on = FALSE;
    185e:	10 92 33 01 	sts	0x0133, r1
				mute_end = cur_timer;
    1862:	80 91 60 01 	lds	r24, 0x0160
    1866:	90 91 61 01 	lds	r25, 0x0161
    186a:	a0 91 62 01 	lds	r26, 0x0162
    186e:	b0 91 63 01 	lds	r27, 0x0163
    1872:	80 93 c6 01 	sts	0x01C6, r24
    1876:	90 93 c7 01 	sts	0x01C7, r25
    187a:	a0 93 c8 01 	sts	0x01C8, r26
    187e:	b0 93 c9 01 	sts	0x01C9, r27
					mute_on = FALSE;
				else
					mute_on = TRUE;
				*/
				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    1882:	80 91 ca 01 	lds	r24, 0x01CA
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	09 f0       	breq	.+2      	; 0x188c <main+0x326>
    188a:	68 c0       	rjmp	.+208    	; 0x195c <main+0x3f6>
    188c:	80 91 b8 01 	lds	r24, 0x01B8
    1890:	88 23       	and	r24, r24
    1892:	09 f0       	breq	.+2      	; 0x1896 <main+0x330>
    1894:	63 c0       	rjmp	.+198    	; 0x195c <main+0x3f6>
				{
					prev_state = IDLE;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	80 93 bc 01 	sts	0x01BC, r24
					next_state = IDLE;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    18a8:	80 91 6b 01 	lds	r24, 0x016B
    18ac:	90 91 6c 01 	lds	r25, 0x016C
    18b0:	9c 01       	movw	r18, r24
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	80 91 60 01 	lds	r24, 0x0160
    18ba:	90 91 61 01 	lds	r25, 0x0161
    18be:	a0 91 62 01 	lds	r26, 0x0162
    18c2:	b0 91 63 01 	lds	r27, 0x0163
    18c6:	82 0f       	add	r24, r18
    18c8:	93 1f       	adc	r25, r19
    18ca:	a4 1f       	adc	r26, r20
    18cc:	b5 1f       	adc	r27, r21
    18ce:	80 93 c2 01 	sts	0x01C2, r24
    18d2:	90 93 c3 01 	sts	0x01C3, r25
    18d6:	a0 93 c4 01 	sts	0x01C4, r26
    18da:	b0 93 c5 01 	sts	0x01C5, r27
					tx_start = cur_timer + TX_ON_DELAY;
    18de:	80 91 60 01 	lds	r24, 0x0160
    18e2:	90 91 61 01 	lds	r25, 0x0161
    18e6:	a0 91 62 01 	lds	r26, 0x0162
    18ea:	b0 91 63 01 	lds	r27, 0x0163
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	a1 1d       	adc	r26, r1
    18f2:	b1 1d       	adc	r27, r1
    18f4:	80 93 a0 01 	sts	0x01A0, r24
    18f8:	90 93 a1 01 	sts	0x01A1, r25
    18fc:	a0 93 a2 01 	sts	0x01A2, r26
    1900:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    1904:	80 91 c2 01 	lds	r24, 0x01C2
    1908:	90 91 c3 01 	lds	r25, 0x01C3
    190c:	a0 91 c4 01 	lds	r26, 0x01C4
    1910:	b0 91 c5 01 	lds	r27, 0x01C5
    1914:	80 93 d7 01 	sts	0x01D7, r24
    1918:	90 93 d8 01 	sts	0x01D8, r25
    191c:	a0 93 d9 01 	sts	0x01D9, r26
    1920:	b0 93 da 01 	sts	0x01DA, r27
					mute_start = cur_timer;
    1924:	80 91 60 01 	lds	r24, 0x0160
    1928:	90 91 61 01 	lds	r25, 0x0161
    192c:	a0 91 62 01 	lds	r26, 0x0162
    1930:	b0 91 63 01 	lds	r27, 0x0163
    1934:	80 93 d1 01 	sts	0x01D1, r24
    1938:	90 93 d2 01 	sts	0x01D2, r25
    193c:	a0 93 d3 01 	sts	0x01D3, r26
    1940:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = UINT32_MAX;
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	9f ef       	ldi	r25, 0xFF	; 255
    1948:	dc 01       	movw	r26, r24
    194a:	80 93 c6 01 	sts	0x01C6, r24
    194e:	90 93 c7 01 	sts	0x01C7, r25
    1952:	a0 93 c8 01 	sts	0x01C8, r26
    1956:	b0 93 c9 01 	sts	0x01C9, r27
    195a:	e7 c0       	rjmp	.+462    	; 0x1b2a <main+0x5c4>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    195c:	80 91 b8 01 	lds	r24, 0x01B8
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	09 f0       	breq	.+2      	; 0x1966 <main+0x400>
    1964:	6d c0       	rjmp	.+218    	; 0x1a40 <main+0x4da>
    1966:	80 91 ca 01 	lds	r24, 0x01CA
    196a:	88 23       	and	r24, r24
    196c:	09 f0       	breq	.+2      	; 0x1970 <main+0x40a>
    196e:	68 c0       	rjmp	.+208    	; 0x1a40 <main+0x4da>
				{
					prev_state = IDLE;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DAH;
    1976:	83 e0       	ldi	r24, 0x03	; 3
    1978:	80 93 bc 01 	sts	0x01BC, r24
					next_state = IDLE;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + (dit_length * 3);
    1982:	20 91 6b 01 	lds	r18, 0x016B
    1986:	30 91 6c 01 	lds	r19, 0x016C
    198a:	c9 01       	movw	r24, r18
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	82 0f       	add	r24, r18
    1992:	93 1f       	adc	r25, r19
    1994:	9c 01       	movw	r18, r24
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	80 91 60 01 	lds	r24, 0x0160
    199e:	90 91 61 01 	lds	r25, 0x0161
    19a2:	a0 91 62 01 	lds	r26, 0x0162
    19a6:	b0 91 63 01 	lds	r27, 0x0163
    19aa:	82 0f       	add	r24, r18
    19ac:	93 1f       	adc	r25, r19
    19ae:	a4 1f       	adc	r26, r20
    19b0:	b5 1f       	adc	r27, r21
    19b2:	80 93 c2 01 	sts	0x01C2, r24
    19b6:	90 93 c3 01 	sts	0x01C3, r25
    19ba:	a0 93 c4 01 	sts	0x01C4, r26
    19be:	b0 93 c5 01 	sts	0x01C5, r27
					tx_start = cur_timer + TX_ON_DELAY;
    19c2:	80 91 60 01 	lds	r24, 0x0160
    19c6:	90 91 61 01 	lds	r25, 0x0161
    19ca:	a0 91 62 01 	lds	r26, 0x0162
    19ce:	b0 91 63 01 	lds	r27, 0x0163
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	a1 1d       	adc	r26, r1
    19d6:	b1 1d       	adc	r27, r1
    19d8:	80 93 a0 01 	sts	0x01A0, r24
    19dc:	90 93 a1 01 	sts	0x01A1, r25
    19e0:	a0 93 a2 01 	sts	0x01A2, r26
    19e4:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    19e8:	80 91 c2 01 	lds	r24, 0x01C2
    19ec:	90 91 c3 01 	lds	r25, 0x01C3
    19f0:	a0 91 c4 01 	lds	r26, 0x01C4
    19f4:	b0 91 c5 01 	lds	r27, 0x01C5
    19f8:	80 93 d7 01 	sts	0x01D7, r24
    19fc:	90 93 d8 01 	sts	0x01D8, r25
    1a00:	a0 93 d9 01 	sts	0x01D9, r26
    1a04:	b0 93 da 01 	sts	0x01DA, r27
					mute_start = cur_timer;
    1a08:	80 91 60 01 	lds	r24, 0x0160
    1a0c:	90 91 61 01 	lds	r25, 0x0161
    1a10:	a0 91 62 01 	lds	r26, 0x0162
    1a14:	b0 91 63 01 	lds	r27, 0x0163
    1a18:	80 93 d1 01 	sts	0x01D1, r24
    1a1c:	90 93 d2 01 	sts	0x01D2, r25
    1a20:	a0 93 d3 01 	sts	0x01D3, r26
    1a24:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = UINT32_MAX;
    1a28:	8f ef       	ldi	r24, 0xFF	; 255
    1a2a:	9f ef       	ldi	r25, 0xFF	; 255
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	80 93 c6 01 	sts	0x01C6, r24
    1a32:	90 93 c7 01 	sts	0x01C7, r25
    1a36:	a0 93 c8 01 	sts	0x01C8, r26
    1a3a:	b0 93 c9 01 	sts	0x01C9, r27
    1a3e:	75 c0       	rjmp	.+234    	; 0x1b2a <main+0x5c4>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    1a40:	80 91 ca 01 	lds	r24, 0x01CA
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <main+0x4e4>
    1a48:	6d c0       	rjmp	.+218    	; 0x1b24 <main+0x5be>
    1a4a:	80 91 b8 01 	lds	r24, 0x01B8
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <main+0x4ee>
    1a52:	68 c0       	rjmp	.+208    	; 0x1b24 <main+0x5be>
    1a54:	80 91 9f 01 	lds	r24, 0x019F
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <main+0x4f8>
    1a5c:	63 c0       	rjmp	.+198    	; 0x1b24 <main+0x5be>
				{
					prev_state = IDLE;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	80 93 bc 01 	sts	0x01BC, r24
					next_state = DAH;
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    1a70:	80 91 6b 01 	lds	r24, 0x016B
    1a74:	90 91 6c 01 	lds	r25, 0x016C
    1a78:	9c 01       	movw	r18, r24
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	80 91 60 01 	lds	r24, 0x0160
    1a82:	90 91 61 01 	lds	r25, 0x0161
    1a86:	a0 91 62 01 	lds	r26, 0x0162
    1a8a:	b0 91 63 01 	lds	r27, 0x0163
    1a8e:	82 0f       	add	r24, r18
    1a90:	93 1f       	adc	r25, r19
    1a92:	a4 1f       	adc	r26, r20
    1a94:	b5 1f       	adc	r27, r21
    1a96:	80 93 c2 01 	sts	0x01C2, r24
    1a9a:	90 93 c3 01 	sts	0x01C3, r25
    1a9e:	a0 93 c4 01 	sts	0x01C4, r26
    1aa2:	b0 93 c5 01 	sts	0x01C5, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1aa6:	80 91 60 01 	lds	r24, 0x0160
    1aaa:	90 91 61 01 	lds	r25, 0x0161
    1aae:	a0 91 62 01 	lds	r26, 0x0162
    1ab2:	b0 91 63 01 	lds	r27, 0x0163
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	b1 1d       	adc	r27, r1
    1abc:	80 93 a0 01 	sts	0x01A0, r24
    1ac0:	90 93 a1 01 	sts	0x01A1, r25
    1ac4:	a0 93 a2 01 	sts	0x01A2, r26
    1ac8:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    1acc:	80 91 c2 01 	lds	r24, 0x01C2
    1ad0:	90 91 c3 01 	lds	r25, 0x01C3
    1ad4:	a0 91 c4 01 	lds	r26, 0x01C4
    1ad8:	b0 91 c5 01 	lds	r27, 0x01C5
    1adc:	80 93 d7 01 	sts	0x01D7, r24
    1ae0:	90 93 d8 01 	sts	0x01D8, r25
    1ae4:	a0 93 d9 01 	sts	0x01D9, r26
    1ae8:	b0 93 da 01 	sts	0x01DA, r27
					mute_start = cur_timer;
    1aec:	80 91 60 01 	lds	r24, 0x0160
    1af0:	90 91 61 01 	lds	r25, 0x0161
    1af4:	a0 91 62 01 	lds	r26, 0x0162
    1af8:	b0 91 63 01 	lds	r27, 0x0163
    1afc:	80 93 d1 01 	sts	0x01D1, r24
    1b00:	90 93 d2 01 	sts	0x01D2, r25
    1b04:	a0 93 d3 01 	sts	0x01D3, r26
    1b08:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = UINT32_MAX;
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	9f ef       	ldi	r25, 0xFF	; 255
    1b10:	dc 01       	movw	r26, r24
    1b12:	80 93 c6 01 	sts	0x01C6, r24
    1b16:	90 93 c7 01 	sts	0x01C7, r25
    1b1a:	a0 93 c8 01 	sts	0x01C8, r26
    1b1e:	b0 93 c9 01 	sts	0x01C9, r27
    1b22:	03 c0       	rjmp	.+6      	; 0x1b2a <main+0x5c4>
				}
				else
				{
					cur_state = IDLE;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	80 93 bc 01 	sts	0x01BC, r24
				}

				break;
    1b2a:	1f c2       	rjmp	.+1086   	; 0x1f6a <main+0xa04>

			case DIT:
				key_down = TRUE;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer > cur_state_end)
    1b3e:	20 91 60 01 	lds	r18, 0x0160
    1b42:	30 91 61 01 	lds	r19, 0x0161
    1b46:	40 91 62 01 	lds	r20, 0x0162
    1b4a:	50 91 63 01 	lds	r21, 0x0163
    1b4e:	80 91 c2 01 	lds	r24, 0x01C2
    1b52:	90 91 c3 01 	lds	r25, 0x01C3
    1b56:	a0 91 c4 01 	lds	r26, 0x01C4
    1b5a:	b0 91 c5 01 	lds	r27, 0x01C5
    1b5e:	82 17       	cp	r24, r18
    1b60:	93 07       	cpc	r25, r19
    1b62:	a4 07       	cpc	r26, r20
    1b64:	b5 07       	cpc	r27, r21
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <main+0x604>
    1b68:	45 c0       	rjmp	.+138    	; 0x1bf4 <main+0x68e>
				{
					prev_state = DIT;
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    1b70:	84 e0       	ldi	r24, 0x04	; 4
    1b72:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + dit_length;
    1b76:	80 91 6b 01 	lds	r24, 0x016B
    1b7a:	90 91 6c 01 	lds	r25, 0x016C
    1b7e:	9c 01       	movw	r18, r24
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	80 91 60 01 	lds	r24, 0x0160
    1b88:	90 91 61 01 	lds	r25, 0x0161
    1b8c:	a0 91 62 01 	lds	r26, 0x0162
    1b90:	b0 91 63 01 	lds	r27, 0x0163
    1b94:	82 0f       	add	r24, r18
    1b96:	93 1f       	adc	r25, r19
    1b98:	a4 1f       	adc	r26, r20
    1b9a:	b5 1f       	adc	r27, r21
    1b9c:	80 93 c2 01 	sts	0x01C2, r24
    1ba0:	90 93 c3 01 	sts	0x01C3, r25
    1ba4:	a0 93 c4 01 	sts	0x01C4, r26
    1ba8:	b0 93 c5 01 	sts	0x01C5, r27
					mute_start = cur_timer;
    1bac:	80 91 60 01 	lds	r24, 0x0160
    1bb0:	90 91 61 01 	lds	r25, 0x0161
    1bb4:	a0 91 62 01 	lds	r26, 0x0162
    1bb8:	b0 91 63 01 	lds	r27, 0x0163
    1bbc:	80 93 d1 01 	sts	0x01D1, r24
    1bc0:	90 93 d2 01 	sts	0x01D2, r25
    1bc4:	a0 93 d3 01 	sts	0x01D3, r26
    1bc8:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1bcc:	80 91 c2 01 	lds	r24, 0x01C2
    1bd0:	90 91 c3 01 	lds	r25, 0x01C3
    1bd4:	a0 91 c4 01 	lds	r26, 0x01C4
    1bd8:	b0 91 c5 01 	lds	r27, 0x01C5
    1bdc:	8c 59       	subi	r24, 0x9C	; 156
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	af 4f       	sbci	r26, 0xFF	; 255
    1be2:	bf 4f       	sbci	r27, 0xFF	; 255
    1be4:	80 93 c6 01 	sts	0x01C6, r24
    1be8:	90 93 c7 01 	sts	0x01C7, r25
    1bec:	a0 93 c8 01 	sts	0x01C8, r26
    1bf0:	b0 93 c9 01 	sts	0x01C9, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    1bf4:	80 91 b8 01 	lds	r24, 0x01B8
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	39 f4       	brne	.+14     	; 0x1c0a <main+0x6a4>
    1bfc:	80 91 9f 01 	lds	r24, 0x019F
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	19 f4       	brne	.+6      	; 0x1c0a <main+0x6a4>
					next_state = DAH;
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	80 93 9f 01 	sts	0x019F, r24

				break;
    1c0a:	af c1       	rjmp	.+862    	; 0x1f6a <main+0xa04>

			case DAH:
				if(cur_timer > cur_state_end)
    1c0c:	20 91 60 01 	lds	r18, 0x0160
    1c10:	30 91 61 01 	lds	r19, 0x0161
    1c14:	40 91 62 01 	lds	r20, 0x0162
    1c18:	50 91 63 01 	lds	r21, 0x0163
    1c1c:	80 91 c2 01 	lds	r24, 0x01C2
    1c20:	90 91 c3 01 	lds	r25, 0x01C3
    1c24:	a0 91 c4 01 	lds	r26, 0x01C4
    1c28:	b0 91 c5 01 	lds	r27, 0x01C5
    1c2c:	82 17       	cp	r24, r18
    1c2e:	93 07       	cpc	r25, r19
    1c30:	a4 07       	cpc	r26, r20
    1c32:	b5 07       	cpc	r27, r21
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <main+0x6d2>
    1c36:	45 c0       	rjmp	.+138    	; 0x1cc2 <main+0x75c>
				{
					prev_state = DAH;
    1c38:	83 e0       	ldi	r24, 0x03	; 3
    1c3a:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    1c3e:	84 e0       	ldi	r24, 0x04	; 4
    1c40:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + dit_length;
    1c44:	80 91 6b 01 	lds	r24, 0x016B
    1c48:	90 91 6c 01 	lds	r25, 0x016C
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	80 91 60 01 	lds	r24, 0x0160
    1c56:	90 91 61 01 	lds	r25, 0x0161
    1c5a:	a0 91 62 01 	lds	r26, 0x0162
    1c5e:	b0 91 63 01 	lds	r27, 0x0163
    1c62:	82 0f       	add	r24, r18
    1c64:	93 1f       	adc	r25, r19
    1c66:	a4 1f       	adc	r26, r20
    1c68:	b5 1f       	adc	r27, r21
    1c6a:	80 93 c2 01 	sts	0x01C2, r24
    1c6e:	90 93 c3 01 	sts	0x01C3, r25
    1c72:	a0 93 c4 01 	sts	0x01C4, r26
    1c76:	b0 93 c5 01 	sts	0x01C5, r27
					mute_start = cur_timer;
    1c7a:	80 91 60 01 	lds	r24, 0x0160
    1c7e:	90 91 61 01 	lds	r25, 0x0161
    1c82:	a0 91 62 01 	lds	r26, 0x0162
    1c86:	b0 91 63 01 	lds	r27, 0x0163
    1c8a:	80 93 d1 01 	sts	0x01D1, r24
    1c8e:	90 93 d2 01 	sts	0x01D2, r25
    1c92:	a0 93 d3 01 	sts	0x01D3, r26
    1c96:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1c9a:	80 91 c2 01 	lds	r24, 0x01C2
    1c9e:	90 91 c3 01 	lds	r25, 0x01C3
    1ca2:	a0 91 c4 01 	lds	r26, 0x01C4
    1ca6:	b0 91 c5 01 	lds	r27, 0x01C5
    1caa:	8c 59       	subi	r24, 0x9C	; 156
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	af 4f       	sbci	r26, 0xFF	; 255
    1cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb2:	80 93 c6 01 	sts	0x01C6, r24
    1cb6:	90 93 c7 01 	sts	0x01C7, r25
    1cba:	a0 93 c8 01 	sts	0x01C8, r26
    1cbe:	b0 93 c9 01 	sts	0x01C9, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    1cc2:	80 91 ca 01 	lds	r24, 0x01CA
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	39 f4       	brne	.+14     	; 0x1cd8 <main+0x772>
    1cca:	80 91 9f 01 	lds	r24, 0x019F
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	19 f4       	brne	.+6      	; 0x1cd8 <main+0x772>
					next_state = DIT;
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	80 93 9f 01 	sts	0x019F, r24

				key_down = TRUE;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	80 93 33 01 	sts	0x0133, r24
				break;
    1cea:	3f c1       	rjmp	.+638    	; 0x1f6a <main+0xa04>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    1cec:	20 91 60 01 	lds	r18, 0x0160
    1cf0:	30 91 61 01 	lds	r19, 0x0161
    1cf4:	40 91 62 01 	lds	r20, 0x0162
    1cf8:	50 91 63 01 	lds	r21, 0x0163
    1cfc:	80 91 c2 01 	lds	r24, 0x01C2
    1d00:	90 91 c3 01 	lds	r25, 0x01C3
    1d04:	a0 91 c4 01 	lds	r26, 0x01C4
    1d08:	b0 91 c5 01 	lds	r27, 0x01C5
    1d0c:	82 17       	cp	r24, r18
    1d0e:	93 07       	cpc	r25, r19
    1d10:	a4 07       	cpc	r26, r20
    1d12:	b5 07       	cpc	r27, r21
    1d14:	08 f0       	brcs	.+2      	; 0x1d18 <main+0x7b2>
    1d16:	e2 c0       	rjmp	.+452    	; 0x1edc <main+0x976>
				{
					if(next_state == DIT)
    1d18:	80 91 9f 01 	lds	r24, 0x019F
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <main+0x7bc>
    1d20:	5d c0       	rjmp	.+186    	; 0x1ddc <main+0x876>
					{
						cur_state = DIT;
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer + dit_length;
    1d28:	80 91 6b 01 	lds	r24, 0x016B
    1d2c:	90 91 6c 01 	lds	r25, 0x016C
    1d30:	9c 01       	movw	r18, r24
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	80 91 60 01 	lds	r24, 0x0160
    1d3a:	90 91 61 01 	lds	r25, 0x0161
    1d3e:	a0 91 62 01 	lds	r26, 0x0162
    1d42:	b0 91 63 01 	lds	r27, 0x0163
    1d46:	82 0f       	add	r24, r18
    1d48:	93 1f       	adc	r25, r19
    1d4a:	a4 1f       	adc	r26, r20
    1d4c:	b5 1f       	adc	r27, r21
    1d4e:	80 93 c2 01 	sts	0x01C2, r24
    1d52:	90 93 c3 01 	sts	0x01C3, r25
    1d56:	a0 93 c4 01 	sts	0x01C4, r26
    1d5a:	b0 93 c5 01 	sts	0x01C5, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1d5e:	80 91 60 01 	lds	r24, 0x0160
    1d62:	90 91 61 01 	lds	r25, 0x0161
    1d66:	a0 91 62 01 	lds	r26, 0x0162
    1d6a:	b0 91 63 01 	lds	r27, 0x0163
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	a1 1d       	adc	r26, r1
    1d72:	b1 1d       	adc	r27, r1
    1d74:	80 93 a0 01 	sts	0x01A0, r24
    1d78:	90 93 a1 01 	sts	0x01A1, r25
    1d7c:	a0 93 a2 01 	sts	0x01A2, r26
    1d80:	b0 93 a3 01 	sts	0x01A3, r27
						tx_end = cur_state_end;
    1d84:	80 91 c2 01 	lds	r24, 0x01C2
    1d88:	90 91 c3 01 	lds	r25, 0x01C3
    1d8c:	a0 91 c4 01 	lds	r26, 0x01C4
    1d90:	b0 91 c5 01 	lds	r27, 0x01C5
    1d94:	80 93 d7 01 	sts	0x01D7, r24
    1d98:	90 93 d8 01 	sts	0x01D8, r25
    1d9c:	a0 93 d9 01 	sts	0x01D9, r26
    1da0:	b0 93 da 01 	sts	0x01DA, r27
						mute_start = cur_timer;
    1da4:	80 91 60 01 	lds	r24, 0x0160
    1da8:	90 91 61 01 	lds	r25, 0x0161
    1dac:	a0 91 62 01 	lds	r26, 0x0162
    1db0:	b0 91 63 01 	lds	r27, 0x0163
    1db4:	80 93 d1 01 	sts	0x01D1, r24
    1db8:	90 93 d2 01 	sts	0x01D2, r25
    1dbc:	a0 93 d3 01 	sts	0x01D3, r26
    1dc0:	b0 93 d4 01 	sts	0x01D4, r27
						mute_end = UINT32_MAX;
    1dc4:	8f ef       	ldi	r24, 0xFF	; 255
    1dc6:	9f ef       	ldi	r25, 0xFF	; 255
    1dc8:	dc 01       	movw	r26, r24
    1dca:	80 93 c6 01 	sts	0x01C6, r24
    1dce:	90 93 c7 01 	sts	0x01C7, r25
    1dd2:	a0 93 c8 01 	sts	0x01C8, r26
    1dd6:	b0 93 c9 01 	sts	0x01C9, r27
    1dda:	7a c0       	rjmp	.+244    	; 0x1ed0 <main+0x96a>
					}
					else if(next_state == DAH)
    1ddc:	80 91 9f 01 	lds	r24, 0x019F
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <main+0x880>
    1de4:	62 c0       	rjmp	.+196    	; 0x1eaa <main+0x944>
					{
						cur_state = DAH;
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer + (dit_length * 3);
    1dec:	20 91 6b 01 	lds	r18, 0x016B
    1df0:	30 91 6c 01 	lds	r19, 0x016C
    1df4:	c9 01       	movw	r24, r18
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	82 0f       	add	r24, r18
    1dfc:	93 1f       	adc	r25, r19
    1dfe:	9c 01       	movw	r18, r24
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	80 91 60 01 	lds	r24, 0x0160
    1e08:	90 91 61 01 	lds	r25, 0x0161
    1e0c:	a0 91 62 01 	lds	r26, 0x0162
    1e10:	b0 91 63 01 	lds	r27, 0x0163
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	a4 1f       	adc	r26, r20
    1e1a:	b5 1f       	adc	r27, r21
    1e1c:	80 93 c2 01 	sts	0x01C2, r24
    1e20:	90 93 c3 01 	sts	0x01C3, r25
    1e24:	a0 93 c4 01 	sts	0x01C4, r26
    1e28:	b0 93 c5 01 	sts	0x01C5, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1e2c:	80 91 60 01 	lds	r24, 0x0160
    1e30:	90 91 61 01 	lds	r25, 0x0161
    1e34:	a0 91 62 01 	lds	r26, 0x0162
    1e38:	b0 91 63 01 	lds	r27, 0x0163
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	a1 1d       	adc	r26, r1
    1e40:	b1 1d       	adc	r27, r1
    1e42:	80 93 a0 01 	sts	0x01A0, r24
    1e46:	90 93 a1 01 	sts	0x01A1, r25
    1e4a:	a0 93 a2 01 	sts	0x01A2, r26
    1e4e:	b0 93 a3 01 	sts	0x01A3, r27
						tx_end = cur_state_end;
    1e52:	80 91 c2 01 	lds	r24, 0x01C2
    1e56:	90 91 c3 01 	lds	r25, 0x01C3
    1e5a:	a0 91 c4 01 	lds	r26, 0x01C4
    1e5e:	b0 91 c5 01 	lds	r27, 0x01C5
    1e62:	80 93 d7 01 	sts	0x01D7, r24
    1e66:	90 93 d8 01 	sts	0x01D8, r25
    1e6a:	a0 93 d9 01 	sts	0x01D9, r26
    1e6e:	b0 93 da 01 	sts	0x01DA, r27
						mute_start = cur_timer;
    1e72:	80 91 60 01 	lds	r24, 0x0160
    1e76:	90 91 61 01 	lds	r25, 0x0161
    1e7a:	a0 91 62 01 	lds	r26, 0x0162
    1e7e:	b0 91 63 01 	lds	r27, 0x0163
    1e82:	80 93 d1 01 	sts	0x01D1, r24
    1e86:	90 93 d2 01 	sts	0x01D2, r25
    1e8a:	a0 93 d3 01 	sts	0x01D3, r26
    1e8e:	b0 93 d4 01 	sts	0x01D4, r27
						mute_end = UINT32_MAX;
    1e92:	8f ef       	ldi	r24, 0xFF	; 255
    1e94:	9f ef       	ldi	r25, 0xFF	; 255
    1e96:	dc 01       	movw	r26, r24
    1e98:	80 93 c6 01 	sts	0x01C6, r24
    1e9c:	90 93 c7 01 	sts	0x01C7, r25
    1ea0:	a0 93 c8 01 	sts	0x01C8, r26
    1ea4:	b0 93 c9 01 	sts	0x01C9, r27
    1ea8:	13 c0       	rjmp	.+38     	; 0x1ed0 <main+0x96a>
					}
					else
					{
						cur_state = IDLE;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer;
    1eb0:	80 91 60 01 	lds	r24, 0x0160
    1eb4:	90 91 61 01 	lds	r25, 0x0161
    1eb8:	a0 91 62 01 	lds	r26, 0x0162
    1ebc:	b0 91 63 01 	lds	r27, 0x0163
    1ec0:	80 93 c2 01 	sts	0x01C2, r24
    1ec4:	90 93 c3 01 	sts	0x01C3, r25
    1ec8:	a0 93 c4 01 	sts	0x01C4, r26
    1ecc:	b0 93 c5 01 	sts	0x01C5, r27
					}

					prev_state = DITDELAY;
    1ed0:	84 e0       	ldi	r24, 0x04	; 4
    1ed2:	80 93 6a 01 	sts	0x016A, r24
					next_state = IDLE;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	80 93 9f 01 	sts	0x019F, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    1edc:	80 91 ca 01 	lds	r24, 0x01CA
    1ee0:	81 30       	cpi	r24, 0x01	; 1
    1ee2:	61 f4       	brne	.+24     	; 0x1efc <main+0x996>
    1ee4:	80 91 6a 01 	lds	r24, 0x016A
    1ee8:	83 30       	cpi	r24, 0x03	; 3
    1eea:	41 f4       	brne	.+16     	; 0x1efc <main+0x996>
    1eec:	80 91 9f 01 	lds	r24, 0x019F
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <main+0x996>
					next_state = DIT;
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	80 93 9f 01 	sts	0x019F, r24
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <main+0x9b4>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    1efc:	80 91 b8 01 	lds	r24, 0x01B8
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	59 f4       	brne	.+22     	; 0x1f1a <main+0x9b4>
    1f04:	80 91 6a 01 	lds	r24, 0x016A
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	39 f4       	brne	.+14     	; 0x1f1a <main+0x9b4>
    1f0c:	80 91 9f 01 	lds	r24, 0x019F
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	19 f4       	brne	.+6      	; 0x1f1a <main+0x9b4>
					next_state = DAH;
    1f14:	83 e0       	ldi	r24, 0x03	; 3
    1f16:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    1f1a:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1f1e:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	80 93 33 01 	sts	0x0133, r24
				break;
    1f28:	20 c0       	rjmp	.+64     	; 0x1f6a <main+0xa04>

			case EXIT:
				key_down = FALSE;
    1f2a:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1f2e:	10 92 32 01 	sts	0x0132, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    1f32:	10 92 33 01 	sts	0x0133, r1

				if(cur_timer > cur_state_end)
    1f36:	20 91 60 01 	lds	r18, 0x0160
    1f3a:	30 91 61 01 	lds	r19, 0x0161
    1f3e:	40 91 62 01 	lds	r20, 0x0162
    1f42:	50 91 63 01 	lds	r21, 0x0163
    1f46:	80 91 c2 01 	lds	r24, 0x01C2
    1f4a:	90 91 c3 01 	lds	r25, 0x01C3
    1f4e:	a0 91 c4 01 	lds	r26, 0x01C4
    1f52:	b0 91 c5 01 	lds	r27, 0x01C5
    1f56:	82 17       	cp	r24, r18
    1f58:	93 07       	cpc	r25, r19
    1f5a:	a4 07       	cpc	r26, r20
    1f5c:	b5 07       	cpc	r27, r21
    1f5e:	18 f4       	brcc	.+6      	; 0x1f66 <main+0xa00>
				{
					cur_state = IDLE;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	80 93 bc 01 	sts	0x01BC, r24
				}
				break;
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <main+0xa04>

			default:
				break;
    1f68:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    1f6a:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <main+0x1f4c>

		case ANNOUNCE:
			switch(cur_state)
    1f6e:	80 91 bc 01 	lds	r24, 0x01BC
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	84 30       	cpi	r24, 0x04	; 4
    1f78:	91 05       	cpc	r25, r1
    1f7a:	44 f4       	brge	.+16     	; 0x1f8c <main+0xa26>
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	91 05       	cpc	r25, r1
    1f80:	0c f0       	brlt	.+2      	; 0x1f84 <main+0xa1e>
    1f82:	49 c1       	rjmp	.+658    	; 0x2216 <main+0xcb0>
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	91 05       	cpc	r25, r1
    1f88:	31 f0       	breq	.+12     	; 0x1f96 <main+0xa30>
    1f8a:	a1 c1       	rjmp	.+834    	; 0x22ce <main+0xd68>
    1f8c:	87 30       	cpi	r24, 0x07	; 7
    1f8e:	91 05       	cpc	r25, r1
    1f90:	0c f0       	brlt	.+2      	; 0x1f94 <main+0xa2e>
    1f92:	9d c1       	rjmp	.+826    	; 0x22ce <main+0xd68>
    1f94:	7c c1       	rjmp	.+760    	; 0x228e <main+0xd28>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    1f96:	20 91 36 01 	lds	r18, 0x0136
    1f9a:	30 91 37 01 	lds	r19, 0x0137
    1f9e:	80 91 d5 01 	lds	r24, 0x01D5
    1fa2:	90 91 d6 01 	lds	r25, 0x01D6
    1fa6:	28 17       	cp	r18, r24
    1fa8:	39 07       	cpc	r19, r25
    1faa:	c9 f4       	brne	.+50     	; 0x1fde <main+0xa78>
    1fac:	80 91 3a 01 	lds	r24, 0x013A
    1fb0:	88 23       	and	r24, r24
    1fb2:	a9 f4       	brne	.+42     	; 0x1fde <main+0xa78>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    1fb4:	80 91 36 01 	lds	r24, 0x0136
    1fb8:	90 91 37 01 	lds	r25, 0x0137
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	80 97       	sbiw	r24, 0x20	; 32
    1fc6:	88 59       	subi	r24, 0x98	; 152
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	9b 83       	std	Y+3, r25	; 0x03
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	14 91       	lpm	r17, Z+
    1fd6:	1c 83       	std	Y+4, r17	; 0x04
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	80 93 3a 01 	sts	0x013A, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    1fde:	80 91 3a 01 	lds	r24, 0x013A
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <main+0xa82>
    1fe6:	ce c0       	rjmp	.+412    	; 0x2184 <main+0xc1e>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    1fe8:	80 91 3a 01 	lds	r24, 0x013A
    1fec:	80 38       	cpi	r24, 0x80	; 128
    1fee:	29 f0       	breq	.+10     	; 0x1ffa <main+0xa94>
    1ff0:	80 91 3a 01 	lds	r24, 0x013A
    1ff4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <main+0xa94>
    1ff8:	79 c0       	rjmp	.+242    	; 0x20ec <main+0xb86>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    1ffa:	80 91 3a 01 	lds	r24, 0x013A
    1ffe:	80 38       	cpi	r24, 0x80	; 128
    2000:	21 f5       	brne	.+72     	; 0x204a <main+0xae4>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2002:	20 91 6b 01 	lds	r18, 0x016B
    2006:	30 91 6c 01 	lds	r19, 0x016C
    200a:	c9 01       	movw	r24, r18
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	82 0f       	add	r24, r18
    2012:	93 1f       	adc	r25, r19
    2014:	9c 01       	movw	r18, r24
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	80 91 60 01 	lds	r24, 0x0160
    201e:	90 91 61 01 	lds	r25, 0x0161
    2022:	a0 91 62 01 	lds	r26, 0x0162
    2026:	b0 91 63 01 	lds	r27, 0x0163
    202a:	82 0f       	add	r24, r18
    202c:	93 1f       	adc	r25, r19
    202e:	a4 1f       	adc	r26, r20
    2030:	b5 1f       	adc	r27, r21
    2032:	80 93 c2 01 	sts	0x01C2, r24
    2036:	90 93 c3 01 	sts	0x01C3, r25
    203a:	a0 93 c4 01 	sts	0x01C4, r26
    203e:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAHDELAY;
    2042:	85 e0       	ldi	r24, 0x05	; 5
    2044:	80 93 bc 01 	sts	0x01BC, r24
    2048:	27 c0       	rjmp	.+78     	; 0x2098 <main+0xb32>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    204a:	20 91 6b 01 	lds	r18, 0x016B
    204e:	30 91 6c 01 	lds	r19, 0x016C
    2052:	c9 01       	movw	r24, r18
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	82 1b       	sub	r24, r18
    2062:	93 0b       	sbc	r25, r19
    2064:	9c 01       	movw	r18, r24
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	80 91 60 01 	lds	r24, 0x0160
    206e:	90 91 61 01 	lds	r25, 0x0161
    2072:	a0 91 62 01 	lds	r26, 0x0162
    2076:	b0 91 63 01 	lds	r27, 0x0163
    207a:	82 0f       	add	r24, r18
    207c:	93 1f       	adc	r25, r19
    207e:	a4 1f       	adc	r26, r20
    2080:	b5 1f       	adc	r27, r21
    2082:	80 93 c2 01 	sts	0x01C2, r24
    2086:	90 93 c3 01 	sts	0x01C3, r25
    208a:	a0 93 c4 01 	sts	0x01C4, r26
    208e:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAHDELAY;
    2092:	85 e0       	ldi	r24, 0x05	; 5
    2094:	80 93 bc 01 	sts	0x01BC, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    2098:	80 91 36 01 	lds	r24, 0x0136
    209c:	90 91 37 01 	lds	r25, 0x0137
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	90 93 37 01 	sts	0x0137, r25
    20a6:	80 93 36 01 	sts	0x0136, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    20aa:	80 91 36 01 	lds	r24, 0x0136
    20ae:	90 91 37 01 	lds	r25, 0x0137
    20b2:	fc 01       	movw	r30, r24
    20b4:	80 81       	ld	r24, Z
    20b6:	88 23       	and	r24, r24
    20b8:	19 f4       	brne	.+6      	; 0x20c0 <main+0xb5a>
							cur_character = '\0';
    20ba:	10 92 3a 01 	sts	0x013A, r1
    20be:	15 c0       	rjmp	.+42     	; 0x20ea <main+0xb84>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    20c0:	80 91 36 01 	lds	r24, 0x0136
    20c4:	90 91 37 01 	lds	r25, 0x0137
    20c8:	fc 01       	movw	r30, r24
    20ca:	80 81       	ld	r24, Z
    20cc:	88 2f       	mov	r24, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	80 97       	sbiw	r24, 0x20	; 32
    20d2:	88 59       	subi	r24, 0x98	; 152
    20d4:	9f 4f       	sbci	r25, 0xFF	; 255
    20d6:	9e 83       	std	Y+6, r25	; 0x06
    20d8:	8d 83       	std	Y+5, r24	; 0x05
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	fc 01       	movw	r30, r24
    20e0:	14 91       	lpm	r17, Z+
    20e2:	1f 83       	std	Y+7, r17	; 0x07
    20e4:	8f 81       	ldd	r24, Y+7	; 0x07
    20e6:	80 93 3a 01 	sts	0x013A, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    20ea:	4b c0       	rjmp	.+150    	; 0x2182 <main+0xc1c>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    20ec:	80 91 3a 01 	lds	r24, 0x013A
    20f0:	88 23       	and	r24, r24
    20f2:	24 f5       	brge	.+72     	; 0x213c <main+0xbd6>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    20f4:	20 91 6b 01 	lds	r18, 0x016B
    20f8:	30 91 6c 01 	lds	r19, 0x016C
    20fc:	c9 01       	movw	r24, r18
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	82 0f       	add	r24, r18
    2104:	93 1f       	adc	r25, r19
    2106:	9c 01       	movw	r18, r24
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	80 91 60 01 	lds	r24, 0x0160
    2110:	90 91 61 01 	lds	r25, 0x0161
    2114:	a0 91 62 01 	lds	r26, 0x0162
    2118:	b0 91 63 01 	lds	r27, 0x0163
    211c:	82 0f       	add	r24, r18
    211e:	93 1f       	adc	r25, r19
    2120:	a4 1f       	adc	r26, r20
    2122:	b5 1f       	adc	r27, r21
    2124:	80 93 c2 01 	sts	0x01C2, r24
    2128:	90 93 c3 01 	sts	0x01C3, r25
    212c:	a0 93 c4 01 	sts	0x01C4, r26
    2130:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAH;
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	80 93 bc 01 	sts	0x01BC, r24
    213a:	1e c0       	rjmp	.+60     	; 0x2178 <main+0xc12>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    213c:	80 91 6b 01 	lds	r24, 0x016B
    2140:	90 91 6c 01 	lds	r25, 0x016C
    2144:	9c 01       	movw	r18, r24
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	80 91 60 01 	lds	r24, 0x0160
    214e:	90 91 61 01 	lds	r25, 0x0161
    2152:	a0 91 62 01 	lds	r26, 0x0162
    2156:	b0 91 63 01 	lds	r27, 0x0163
    215a:	82 0f       	add	r24, r18
    215c:	93 1f       	adc	r25, r19
    215e:	a4 1f       	adc	r26, r20
    2160:	b5 1f       	adc	r27, r21
    2162:	80 93 c2 01 	sts	0x01C2, r24
    2166:	90 93 c3 01 	sts	0x01C3, r25
    216a:	a0 93 c4 01 	sts	0x01C4, r26
    216e:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DIT;
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	80 93 bc 01 	sts	0x01BC, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    2178:	80 91 3a 01 	lds	r24, 0x013A
    217c:	88 0f       	add	r24, r24
    217e:	80 93 3a 01 	sts	0x013A, r24
    2182:	48 c0       	rjmp	.+144    	; 0x2214 <main+0xcae>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2184:	80 91 d5 01 	lds	r24, 0x01D5
    2188:	90 91 d6 01 	lds	r25, 0x01D6
    218c:	20 e2       	ldi	r18, 0x20	; 32
    218e:	31 e0       	ldi	r19, 0x01	; 1
    2190:	b9 01       	movw	r22, r18
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <memcpy>
					cur_char_p = announce_buffer;
    219a:	80 91 d5 01 	lds	r24, 0x01D5
    219e:	90 91 d6 01 	lds	r25, 0x01D6
    21a2:	90 93 37 01 	sts	0x0137, r25
    21a6:	80 93 36 01 	sts	0x0136, r24
					cur_character = '\0';
    21aa:	10 92 3a 01 	sts	0x013A, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    21ae:	80 91 bf 01 	lds	r24, 0x01BF
    21b2:	90 91 c0 01 	lds	r25, 0x01C0
    21b6:	90 93 b3 01 	sts	0x01B3, r25
    21ba:	80 93 b2 01 	sts	0x01B2, r24
					set_st_freq(st_freq);
    21be:	80 91 b2 01 	lds	r24, 0x01B2
    21c2:	90 91 b3 01 	lds	r25, 0x01B3
    21c6:	cc 01       	movw	r24, r24
    21c8:	a0 e0       	ldi	r26, 0x00	; 0
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <set_st_freq>

					wpm = prev_wpm;
    21d4:	80 91 dd 01 	lds	r24, 0x01DD
    21d8:	80 93 d0 01 	sts	0x01D0, r24
					set_wpm(wpm);
    21dc:	80 91 d0 01 	lds	r24, 0x01D0
    21e0:	0e 94 01 04 	call	0x802	; 0x802 <set_wpm>

					cur_mode = prev_mode;
    21e4:	80 91 b0 01 	lds	r24, 0x01B0
    21e8:	80 93 9a 01 	sts	0x019A, r24
					cur_state = prev_state;
    21ec:	80 91 6a 01 	lds	r24, 0x016A
    21f0:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = prev_state_end;
    21f4:	80 91 ac 01 	lds	r24, 0x01AC
    21f8:	90 91 ad 01 	lds	r25, 0x01AD
    21fc:	a0 91 ae 01 	lds	r26, 0x01AE
    2200:	b0 91 af 01 	lds	r27, 0x01AF
    2204:	80 93 c2 01 	sts	0x01C2, r24
    2208:	90 93 c3 01 	sts	0x01C3, r25
    220c:	a0 93 c4 01 	sts	0x01C4, r26
    2210:	b0 93 c5 01 	sts	0x01C5, r27
				}
				break;
    2214:	5d c0       	rjmp	.+186    	; 0x22d0 <main+0xd6a>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2216:	20 91 60 01 	lds	r18, 0x0160
    221a:	30 91 61 01 	lds	r19, 0x0161
    221e:	40 91 62 01 	lds	r20, 0x0162
    2222:	50 91 63 01 	lds	r21, 0x0163
    2226:	80 91 c2 01 	lds	r24, 0x01C2
    222a:	90 91 c3 01 	lds	r25, 0x01C3
    222e:	a0 91 c4 01 	lds	r26, 0x01C4
    2232:	b0 91 c5 01 	lds	r27, 0x01C5
    2236:	82 17       	cp	r24, r18
    2238:	93 07       	cpc	r25, r19
    223a:	a4 07       	cpc	r26, r20
    223c:	b5 07       	cpc	r27, r21
    223e:	f0 f4       	brcc	.+60     	; 0x227c <main+0xd16>
				{
					cur_state_end = cur_timer + dit_length;
    2240:	80 91 6b 01 	lds	r24, 0x016B
    2244:	90 91 6c 01 	lds	r25, 0x016C
    2248:	9c 01       	movw	r18, r24
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	80 91 60 01 	lds	r24, 0x0160
    2252:	90 91 61 01 	lds	r25, 0x0161
    2256:	a0 91 62 01 	lds	r26, 0x0162
    225a:	b0 91 63 01 	lds	r27, 0x0163
    225e:	82 0f       	add	r24, r18
    2260:	93 1f       	adc	r25, r19
    2262:	a4 1f       	adc	r26, r20
    2264:	b5 1f       	adc	r27, r21
    2266:	80 93 c2 01 	sts	0x01C2, r24
    226a:	90 93 c3 01 	sts	0x01C3, r25
    226e:	a0 93 c4 01 	sts	0x01C4, r26
    2272:	b0 93 c5 01 	sts	0x01C5, r27
					cur_state = DITDELAY;
    2276:	84 e0       	ldi	r24, 0x04	; 4
    2278:	80 93 bc 01 	sts	0x01BC, r24
				}

				key_down = FALSE;
    227c:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	80 93 33 01 	sts	0x0133, r24
				break;
    228c:	21 c0       	rjmp	.+66     	; 0x22d0 <main+0xd6a>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    228e:	20 91 60 01 	lds	r18, 0x0160
    2292:	30 91 61 01 	lds	r19, 0x0161
    2296:	40 91 62 01 	lds	r20, 0x0162
    229a:	50 91 63 01 	lds	r21, 0x0163
    229e:	80 91 c2 01 	lds	r24, 0x01C2
    22a2:	90 91 c3 01 	lds	r25, 0x01C3
    22a6:	a0 91 c4 01 	lds	r26, 0x01C4
    22aa:	b0 91 c5 01 	lds	r27, 0x01C5
    22ae:	82 17       	cp	r24, r18
    22b0:	93 07       	cpc	r25, r19
    22b2:	a4 07       	cpc	r26, r20
    22b4:	b5 07       	cpc	r27, r21
    22b6:	18 f4       	brcc	.+6      	; 0x22be <main+0xd58>
					cur_state = IDLE;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	80 93 bc 01 	sts	0x01BC, r24

				key_down = FALSE;
    22be:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    22c2:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	80 93 33 01 	sts	0x0133, r24
				break;
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <main+0xd6a>

			default:
				break;
    22ce:	00 00       	nop
			}
			break;
    22d0:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <main+0x1f4c>

		case TUNE:
			switch(cur_state)
    22d4:	80 91 bc 01 	lds	r24, 0x01BC
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	87 30       	cpi	r24, 0x07	; 7
    22de:	91 05       	cpc	r25, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <main+0xd7e>
    22e2:	50 c0       	rjmp	.+160    	; 0x2384 <main+0xe1e>
    22e4:	88 30       	cpi	r24, 0x08	; 8
    22e6:	91 05       	cpc	r25, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <main+0xd86>
    22ea:	8d c0       	rjmp	.+282    	; 0x2406 <main+0xea0>
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	91 05       	cpc	r25, r1
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <main+0xd8e>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    22f2:	af c0       	rjmp	.+350    	; 0x2452 <main+0xeec>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    22f4:	80 91 60 01 	lds	r24, 0x0160
    22f8:	90 91 61 01 	lds	r25, 0x0161
    22fc:	a0 91 62 01 	lds	r26, 0x0162
    2300:	b0 91 63 01 	lds	r27, 0x0163
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	a1 1d       	adc	r26, r1
    2308:	b1 1d       	adc	r27, r1
    230a:	80 93 a0 01 	sts	0x01A0, r24
    230e:	90 93 a1 01 	sts	0x01A1, r25
    2312:	a0 93 a2 01 	sts	0x01A2, r26
    2316:	b0 93 a3 01 	sts	0x01A3, r27
				tx_end = UINT32_MAX;
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	9f ef       	ldi	r25, 0xFF	; 255
    231e:	dc 01       	movw	r26, r24
    2320:	80 93 d7 01 	sts	0x01D7, r24
    2324:	90 93 d8 01 	sts	0x01D8, r25
    2328:	a0 93 d9 01 	sts	0x01D9, r26
    232c:	b0 93 da 01 	sts	0x01DA, r27
				cur_state_end = UINT32_MAX;
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	9f ef       	ldi	r25, 0xFF	; 255
    2334:	dc 01       	movw	r26, r24
    2336:	80 93 c2 01 	sts	0x01C2, r24
    233a:	90 93 c3 01 	sts	0x01C3, r25
    233e:	a0 93 c4 01 	sts	0x01C4, r26
    2342:	b0 93 c5 01 	sts	0x01C5, r27
				mute_start = cur_timer;
    2346:	80 91 60 01 	lds	r24, 0x0160
    234a:	90 91 61 01 	lds	r25, 0x0161
    234e:	a0 91 62 01 	lds	r26, 0x0162
    2352:	b0 91 63 01 	lds	r27, 0x0163
    2356:	80 93 d1 01 	sts	0x01D1, r24
    235a:	90 93 d2 01 	sts	0x01D2, r25
    235e:	a0 93 d3 01 	sts	0x01D3, r26
    2362:	b0 93 d4 01 	sts	0x01D4, r27
				mute_end = UINT32_MAX;
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	9f ef       	ldi	r25, 0xFF	; 255
    236a:	dc 01       	movw	r26, r24
    236c:	80 93 c6 01 	sts	0x01C6, r24
    2370:	90 93 c7 01 	sts	0x01C7, r25
    2374:	a0 93 c8 01 	sts	0x01C8, r26
    2378:	b0 93 c9 01 	sts	0x01C9, r27

				cur_state = KEYDOWN;
    237c:	87 e0       	ldi	r24, 0x07	; 7
    237e:	80 93 bc 01 	sts	0x01BC, r24
				break;
    2382:	67 c0       	rjmp	.+206    	; 0x2452 <main+0xeec>

			case KEYDOWN:
				key_down = TRUE;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	80 93 33 01 	sts	0x0133, r24

				if(ANYBUTTON)
    2396:	80 91 ca 01 	lds	r24, 0x01CA
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	61 f0       	breq	.+24     	; 0x23b6 <main+0xe50>
    239e:	80 91 b8 01 	lds	r24, 0x01B8
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	41 f0       	breq	.+16     	; 0x23b6 <main+0xe50>
    23a6:	80 91 bb 01 	lds	r24, 0x01BB
    23aa:	81 30       	cpi	r24, 0x01	; 1
    23ac:	21 f0       	breq	.+8      	; 0x23b6 <main+0xe50>
    23ae:	80 91 b9 01 	lds	r24, 0x01B9
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	39 f5       	brne	.+78     	; 0x2404 <main+0xe9e>
				{
					cur_state = ENDKEYDOWN;
    23b6:	88 e0       	ldi	r24, 0x08	; 8
    23b8:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    23bc:	80 91 60 01 	lds	r24, 0x0160
    23c0:	90 91 61 01 	lds	r25, 0x0161
    23c4:	a0 91 62 01 	lds	r26, 0x0162
    23c8:	b0 91 63 01 	lds	r27, 0x0163
    23cc:	8c 59       	subi	r24, 0x9C	; 156
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	af 4f       	sbci	r26, 0xFF	; 255
    23d2:	bf 4f       	sbci	r27, 0xFF	; 255
    23d4:	80 93 c2 01 	sts	0x01C2, r24
    23d8:	90 93 c3 01 	sts	0x01C3, r25
    23dc:	a0 93 c4 01 	sts	0x01C4, r26
    23e0:	b0 93 c5 01 	sts	0x01C5, r27
					tx_end = cur_timer;
    23e4:	80 91 60 01 	lds	r24, 0x0160
    23e8:	90 91 61 01 	lds	r25, 0x0161
    23ec:	a0 91 62 01 	lds	r26, 0x0162
    23f0:	b0 91 63 01 	lds	r27, 0x0163
    23f4:	80 93 d7 01 	sts	0x01D7, r24
    23f8:	90 93 d8 01 	sts	0x01D8, r25
    23fc:	a0 93 d9 01 	sts	0x01D9, r26
    2400:	b0 93 da 01 	sts	0x01DA, r27
				}
				break;
    2404:	26 c0       	rjmp	.+76     	; 0x2452 <main+0xeec>

			case ENDKEYDOWN:
				key_down = FALSE;
    2406:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    240a:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer >= cur_state_end)
    2414:	20 91 60 01 	lds	r18, 0x0160
    2418:	30 91 61 01 	lds	r19, 0x0161
    241c:	40 91 62 01 	lds	r20, 0x0162
    2420:	50 91 63 01 	lds	r21, 0x0163
    2424:	80 91 c2 01 	lds	r24, 0x01C2
    2428:	90 91 c3 01 	lds	r25, 0x01C3
    242c:	a0 91 c4 01 	lds	r26, 0x01C4
    2430:	b0 91 c5 01 	lds	r27, 0x01C5
    2434:	28 17       	cp	r18, r24
    2436:	39 07       	cpc	r19, r25
    2438:	4a 07       	cpc	r20, r26
    243a:	5b 07       	cpc	r21, r27
    243c:	48 f0       	brcs	.+18     	; 0x2450 <main+0xeea>
				{
					mute_on = FALSE;
    243e:	10 92 33 01 	sts	0x0133, r1
					cur_state = IDLE;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	80 93 bc 01 	sts	0x01BC, r24
					cur_mode = default_mode;
    2448:	80 91 65 01 	lds	r24, 0x0165
    244c:	80 93 9a 01 	sts	0x019A, r24
				}
				break;
    2450:	00 00       	nop

			default:
				break;
			}
			break;
    2452:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <main+0x1f4c>

		case MENU:
			switch(cur_state)
    2456:	80 91 bc 01 	lds	r24, 0x01BC
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	89 30       	cpi	r24, 0x09	; 9
    2460:	91 05       	cpc	r25, r1
    2462:	91 f0       	breq	.+36     	; 0x2488 <main+0xf22>
    2464:	8a 30       	cpi	r24, 0x0A	; 10
    2466:	91 05       	cpc	r25, r1
    2468:	09 f4       	brne	.+2      	; 0x246c <main+0xf06>
    246a:	58 c0       	rjmp	.+176    	; 0x251c <main+0xfb6>
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	91 05       	cpc	r25, r1
    2470:	09 f0       	breq	.+2      	; 0x2474 <main+0xf0e>
    2472:	8e c1       	rjmp	.+796    	; 0x2790 <main+0x122a>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	90 93 3c 01 	sts	0x013C, r25
    247c:	80 93 3b 01 	sts	0x013B, r24
				cur_state = MENUANNOUNCE;
    2480:	89 e0       	ldi	r24, 0x09	; 9
    2482:	80 93 bc 01 	sts	0x01BC, r24
				break;
    2486:	8c c1       	rjmp	.+792    	; 0x27a0 <main+0x123a>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 94 c3 1a 	call	0x3586	; 0x3586 <malloc>
    2490:	90 93 3e 01 	sts	0x013E, r25
    2494:	80 93 3d 01 	sts	0x013D, r24
				memset(cur_menu, '\0', 2);
    2498:	80 91 3d 01 	lds	r24, 0x013D
    249c:	90 91 3e 01 	lds	r25, 0x013E
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	42 e0       	ldi	r20, 0x02	; 2
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    24ac:	80 91 3d 01 	lds	r24, 0x013D
    24b0:	90 91 3e 01 	lds	r25, 0x013E
    24b4:	20 91 3b 01 	lds	r18, 0x013B
    24b8:	30 91 3c 01 	lds	r19, 0x013C
    24bc:	b9 01       	movw	r22, r18
    24be:	41 e0       	ldi	r20, 0x01	; 1
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    24c6:	80 91 60 01 	lds	r24, 0x0160
    24ca:	90 91 61 01 	lds	r25, 0x0161
    24ce:	a0 91 62 01 	lds	r26, 0x0162
    24d2:	b0 91 63 01 	lds	r27, 0x0163
    24d6:	80 56       	subi	r24, 0x60	; 96
    24d8:	90 4f       	sbci	r25, 0xF0	; 240
    24da:	af 4f       	sbci	r26, 0xFF	; 255
    24dc:	bf 4f       	sbci	r27, 0xFF	; 255
    24de:	80 93 c2 01 	sts	0x01C2, r24
    24e2:	90 93 c3 01 	sts	0x01C3, r25
    24e6:	a0 93 c4 01 	sts	0x01C4, r26
    24ea:	b0 93 c5 01 	sts	0x01C5, r27

				// Set next state
				cur_state = MENUINPUT;
    24ee:	8a e0       	ldi	r24, 0x0A	; 10
    24f0:	80 93 bc 01 	sts	0x01BC, r24

				// Announce the menu item
				announce(cur_menu, st_freq, wpm);
    24f4:	80 91 3d 01 	lds	r24, 0x013D
    24f8:	90 91 3e 01 	lds	r25, 0x013E
    24fc:	20 91 b2 01 	lds	r18, 0x01B2
    2500:	30 91 b3 01 	lds	r19, 0x01B3
    2504:	40 91 d0 01 	lds	r20, 0x01D0
    2508:	b9 01       	movw	r22, r18
    250a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>

				free(cur_menu);
    250e:	80 91 3d 01 	lds	r24, 0x013D
    2512:	90 91 3e 01 	lds	r25, 0x013E
    2516:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <free>
				break;
    251a:	42 c1       	rjmp	.+644    	; 0x27a0 <main+0x123a>

			case MENUINPUT:
				text_buffer = malloc(20);
    251c:	84 e1       	ldi	r24, 0x14	; 20
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0e 94 c3 1a 	call	0x3586	; 0x3586 <malloc>
    2524:	90 93 39 01 	sts	0x0139, r25
    2528:	80 93 38 01 	sts	0x0138, r24
				memset(text_buffer, '\0', 20);
    252c:	80 91 38 01 	lds	r24, 0x0138
    2530:	90 91 39 01 	lds	r25, 0x0139
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	44 e1       	ldi	r20, 0x14	; 20
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    2540:	20 91 60 01 	lds	r18, 0x0160
    2544:	30 91 61 01 	lds	r19, 0x0161
    2548:	40 91 62 01 	lds	r20, 0x0162
    254c:	50 91 63 01 	lds	r21, 0x0163
    2550:	80 91 c2 01 	lds	r24, 0x01C2
    2554:	90 91 c3 01 	lds	r25, 0x01C3
    2558:	a0 91 c4 01 	lds	r26, 0x01C4
    255c:	b0 91 c5 01 	lds	r27, 0x01C5
    2560:	28 17       	cp	r18, r24
    2562:	39 07       	cpc	r19, r25
    2564:	4a 07       	cpc	r20, r26
    2566:	5b 07       	cpc	r21, r27
    2568:	08 f0       	brcs	.+2      	; 0x256c <main+0x1006>
    256a:	f9 c0       	rjmp	.+498    	; 0x275e <main+0x11f8>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    256c:	80 91 bb 01 	lds	r24, 0x01BB
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	49 f5       	brne	.+82     	; 0x25c6 <main+0x1060>
					{
						debounce(TRUE);
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	0e 94 19 04 	call	0x832	; 0x832 <debounce>
						cur_menu_p++;
    257a:	80 91 3b 01 	lds	r24, 0x013B
    257e:	90 91 3c 01 	lds	r25, 0x013C
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	90 93 3c 01 	sts	0x013C, r25
    2588:	80 93 3b 01 	sts	0x013B, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    258c:	80 91 3b 01 	lds	r24, 0x013B
    2590:	90 91 3c 01 	lds	r25, 0x013C
    2594:	fc 01       	movw	r30, r24
    2596:	80 81       	ld	r24, Z
    2598:	88 23       	and	r24, r24
    259a:	89 f4       	brne	.+34     	; 0x25be <main+0x1058>
						{
							cur_state = IDLE;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	80 93 bc 01 	sts	0x01BC, r24
							cur_mode = default_mode;
    25a2:	80 91 65 01 	lds	r24, 0x0165
    25a6:	80 93 9a 01 	sts	0x019A, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
    25aa:	20 91 d0 01 	lds	r18, 0x01D0
    25ae:	81 e2       	ldi	r24, 0x21	; 33
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	60 e9       	ldi	r22, 0x90	; 144
    25b4:	71 e0       	ldi	r23, 0x01	; 1
    25b6:	42 2f       	mov	r20, r18
    25b8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
								announce("P", st_freq, wpm);
							}
							break;

						default:
							break;
    25bc:	e2 c0       	rjmp	.+452    	; 0x2782 <main+0x121c>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
						}
						else
							cur_state = MENUANNOUNCE;
    25be:	89 e0       	ldi	r24, 0x09	; 9
    25c0:	80 93 bc 01 	sts	0x01BC, r24
								announce("P", st_freq, wpm);
							}
							break;

						default:
							break;
    25c4:	de c0       	rjmp	.+444    	; 0x2782 <main+0x121c>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    25c6:	80 91 b9 01 	lds	r24, 0x01B9
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <main+0x106a>
    25ce:	d8 c0       	rjmp	.+432    	; 0x2780 <main+0x121a>
					{
						// need to clear the button buffer
						debounce(TRUE);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	0e 94 19 04 	call	0x832	; 0x832 <debounce>

						switch(*cur_menu_p)
    25d6:	80 91 3b 01 	lds	r24, 0x013B
    25da:	90 91 3c 01 	lds	r25, 0x013C
    25de:	fc 01       	movw	r30, r24
    25e0:	80 81       	ld	r24, Z
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	83 35       	cpi	r24, 0x53	; 83
    25e8:	91 05       	cpc	r25, r1
    25ea:	a1 f0       	breq	.+40     	; 0x2614 <main+0x10ae>
    25ec:	84 35       	cpi	r24, 0x54	; 84
    25ee:	91 05       	cpc	r25, r1
    25f0:	4c f4       	brge	.+18     	; 0x2604 <main+0x109e>
    25f2:	8b 34       	cpi	r24, 0x4B	; 75
    25f4:	91 05       	cpc	r25, r1
    25f6:	09 f4       	brne	.+2      	; 0x25fa <main+0x1094>
    25f8:	83 c0       	rjmp	.+262    	; 0x2700 <main+0x119a>
    25fa:	82 35       	cpi	r24, 0x52	; 82
    25fc:	91 05       	cpc	r25, r1
    25fe:	09 f4       	brne	.+2      	; 0x2602 <main+0x109c>
    2600:	64 c0       	rjmp	.+200    	; 0x26ca <main+0x1164>
								announce("P", st_freq, wpm);
							}
							break;

						default:
							break;
    2602:	bf c0       	rjmp	.+382    	; 0x2782 <main+0x121c>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    2604:	86 35       	cpi	r24, 0x56	; 86
    2606:	91 05       	cpc	r25, r1
    2608:	09 f4       	brne	.+2      	; 0x260c <main+0x10a6>
    260a:	70 c0       	rjmp	.+224    	; 0x26ec <main+0x1186>
    260c:	87 35       	cpi	r24, 0x57	; 87
    260e:	91 05       	cpc	r25, r1
    2610:	21 f1       	breq	.+72     	; 0x265a <main+0x10f4>
								announce("P", st_freq, wpm);
							}
							break;

						default:
							break;
    2612:	b7 c0       	rjmp	.+366    	; 0x2782 <main+0x121c>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    2614:	80 91 60 01 	lds	r24, 0x0160
    2618:	90 91 61 01 	lds	r25, 0x0161
    261c:	a0 91 62 01 	lds	r26, 0x0162
    2620:	b0 91 63 01 	lds	r27, 0x0163
    2624:	80 56       	subi	r24, 0x60	; 96
    2626:	90 4f       	sbci	r25, 0xF0	; 240
    2628:	af 4f       	sbci	r26, 0xFF	; 255
    262a:	bf 4f       	sbci	r27, 0xFF	; 255
    262c:	80 93 c2 01 	sts	0x01C2, r24
    2630:	90 93 c3 01 	sts	0x01C3, r25
    2634:	a0 93 c4 01 	sts	0x01C4, r26
    2638:	b0 93 c5 01 	sts	0x01C5, r27
							cur_mode = SETWPM;
    263c:	85 e0       	ldi	r24, 0x05	; 5
    263e:	80 93 9a 01 	sts	0x019A, r24

							announce("R", st_freq, wpm);
    2642:	20 91 b2 01 	lds	r18, 0x01B2
    2646:	30 91 b3 01 	lds	r19, 0x01B3
    264a:	40 91 d0 01 	lds	r20, 0x01D0
    264e:	83 e2       	ldi	r24, 0x23	; 35
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	b9 01       	movw	r22, r18
    2654:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
							break;
    2658:	94 c0       	rjmp	.+296    	; 0x2782 <main+0x121c>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 93 bc 01 	sts	0x01BC, r24
							cur_mode = default_mode;
    2660:	80 91 65 01 	lds	r24, 0x0165
    2664:	80 93 9a 01 	sts	0x019A, r24

							sprintf(text_buffer, "%d", wpm);
    2668:	40 91 38 01 	lds	r20, 0x0138
    266c:	50 91 39 01 	lds	r21, 0x0139
    2670:	80 91 d0 01 	lds	r24, 0x01D0
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	00 d0       	rcall	.+0      	; 0x267a <main+0x1114>
    267a:	00 d0       	rcall	.+0      	; 0x267c <main+0x1116>
    267c:	00 d0       	rcall	.+0      	; 0x267e <main+0x1118>
    267e:	8d b7       	in	r24, 0x3d	; 61
    2680:	9e b7       	in	r25, 0x3e	; 62
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	fc 01       	movw	r30, r24
    2686:	51 83       	std	Z+1, r21	; 0x01
    2688:	40 83       	st	Z, r20
    268a:	45 e2       	ldi	r20, 0x25	; 37
    268c:	51 e0       	ldi	r21, 0x01	; 1
    268e:	fc 01       	movw	r30, r24
    2690:	53 83       	std	Z+3, r21	; 0x03
    2692:	42 83       	std	Z+2, r20	; 0x02
    2694:	fc 01       	movw	r30, r24
    2696:	35 83       	std	Z+5, r19	; 0x05
    2698:	24 83       	std	Z+4, r18	; 0x04
    269a:	0e 94 22 1c 	call	0x3844	; 0x3844 <sprintf>
    269e:	8d b7       	in	r24, 0x3d	; 61
    26a0:	9e b7       	in	r25, 0x3e	; 62
    26a2:	06 96       	adiw	r24, 0x06	; 6
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	9e bf       	out	0x3e, r25	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq, wpm);
    26ae:	80 91 38 01 	lds	r24, 0x0138
    26b2:	90 91 39 01 	lds	r25, 0x0139
    26b6:	20 91 b2 01 	lds	r18, 0x01B2
    26ba:	30 91 b3 01 	lds	r19, 0x01B3
    26be:	40 91 d0 01 	lds	r20, 0x01D0
    26c2:	b9 01       	movw	r22, r18
    26c4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
							break;
    26c8:	5c c0       	rjmp	.+184    	; 0x2782 <main+0x121c>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    26ca:	10 92 bc 01 	sts	0x01BC, r1
							cur_mode = RECORD;
    26ce:	87 e0       	ldi	r24, 0x07	; 7
    26d0:	80 93 9a 01 	sts	0x019A, r24

							announce("R", st_freq, wpm);
    26d4:	20 91 b2 01 	lds	r18, 0x01B2
    26d8:	30 91 b3 01 	lds	r19, 0x01B3
    26dc:	40 91 d0 01 	lds	r20, 0x01D0
    26e0:	83 e2       	ldi	r24, 0x23	; 35
    26e2:	91 e0       	ldi	r25, 0x01	; 1
    26e4:	b9 01       	movw	r22, r18
    26e6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
							break;
    26ea:	4b c0       	rjmp	.+150    	; 0x2782 <main+0x121c>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	80 93 bc 01 	sts	0x01BC, r24
							cur_mode = default_mode;
    26f2:	80 91 65 01 	lds	r24, 0x0165
    26f6:	80 93 9a 01 	sts	0x019A, r24

							read_voltage();
    26fa:	0e 94 cf 06 	call	0xd9e	; 0xd9e <read_voltage>
							break;
    26fe:	41 c0       	rjmp	.+130    	; 0x2782 <main+0x121c>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    2700:	80 91 65 01 	lds	r24, 0x0165
    2704:	88 23       	and	r24, r24
    2706:	b1 f4       	brne	.+44     	; 0x2734 <main+0x11ce>
							{
								default_mode = SK;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	80 93 65 01 	sts	0x0165, r24
								cur_state = IDLE;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	80 93 bc 01 	sts	0x01BC, r24
								cur_mode = default_mode;
    2714:	80 91 65 01 	lds	r24, 0x0165
    2718:	80 93 9a 01 	sts	0x019A, r24

								announce("S", st_freq, wpm);
    271c:	20 91 b2 01 	lds	r18, 0x01B2
    2720:	30 91 b3 01 	lds	r19, 0x01B3
    2724:	40 91 d0 01 	lds	r20, 0x01D0
    2728:	8b e1       	ldi	r24, 0x1B	; 27
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	b9 01       	movw	r22, r18
    272e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
								cur_state = IDLE;
								cur_mode = default_mode;

								announce("P", st_freq, wpm);
							}
							break;
    2732:	27 c0       	rjmp	.+78     	; 0x2782 <main+0x121c>

								announce("S", st_freq, wpm);
							}
							else
							{
								default_mode = KEYER;
    2734:	10 92 65 01 	sts	0x0165, r1
								cur_state = IDLE;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	80 93 bc 01 	sts	0x01BC, r24
								cur_mode = default_mode;
    273e:	80 91 65 01 	lds	r24, 0x0165
    2742:	80 93 9a 01 	sts	0x019A, r24

								announce("P", st_freq, wpm);
    2746:	20 91 b2 01 	lds	r18, 0x01B2
    274a:	30 91 b3 01 	lds	r19, 0x01B3
    274e:	40 91 d0 01 	lds	r20, 0x01D0
    2752:	88 e2       	ldi	r24, 0x28	; 40
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	b9 01       	movw	r22, r18
    2758:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
							}
							break;
    275c:	12 c0       	rjmp	.+36     	; 0x2782 <main+0x121c>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	80 93 bc 01 	sts	0x01BC, r24
					cur_mode = default_mode;
    2764:	80 91 65 01 	lds	r24, 0x0165
    2768:	80 93 9a 01 	sts	0x019A, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    276c:	20 91 d0 01 	lds	r18, 0x01D0
    2770:	81 e2       	ldi	r24, 0x21	; 33
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	60 e9       	ldi	r22, 0x90	; 144
    2776:	71 e0       	ldi	r23, 0x01	; 1
    2778:	42 2f       	mov	r20, r18
    277a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <main+0x121c>
								announce("P", st_freq, wpm);
							}
							break;

						default:
							break;
    2780:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
				}

				free(text_buffer);
    2782:	80 91 38 01 	lds	r24, 0x0138
    2786:	90 91 39 01 	lds	r25, 0x0139
    278a:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <free>
				break;
    278e:	08 c0       	rjmp	.+16     	; 0x27a0 <main+0x123a>

			default:
				cur_state = IDLE;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	80 93 bc 01 	sts	0x01BC, r24
				cur_mode = default_mode;
    2796:	80 91 65 01 	lds	r24, 0x0165
    279a:	80 93 9a 01 	sts	0x019A, r24
				break;
    279e:	00 00       	nop
			}
			break;
    27a0:	88 c6       	rjmp	.+3344   	; 0x34b2 <main+0x1f4c>

		case SETWPM:
			if(cur_timer < cur_state_end)
    27a2:	20 91 60 01 	lds	r18, 0x0160
    27a6:	30 91 61 01 	lds	r19, 0x0161
    27aa:	40 91 62 01 	lds	r20, 0x0162
    27ae:	50 91 63 01 	lds	r21, 0x0163
    27b2:	80 91 c2 01 	lds	r24, 0x01C2
    27b6:	90 91 c3 01 	lds	r25, 0x01C3
    27ba:	a0 91 c4 01 	lds	r26, 0x01C4
    27be:	b0 91 c5 01 	lds	r27, 0x01C5
    27c2:	28 17       	cp	r18, r24
    27c4:	39 07       	cpc	r19, r25
    27c6:	4a 07       	cpc	r20, r26
    27c8:	5b 07       	cpc	r21, r27
    27ca:	08 f0       	brcs	.+2      	; 0x27ce <main+0x1268>
    27cc:	63 c0       	rjmp	.+198    	; 0x2894 <main+0x132e>
			{
				if(cmd_btn == PRESS)
    27ce:	80 91 bb 01 	lds	r24, 0x01BB
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	69 f5       	brne	.+90     	; 0x2830 <main+0x12ca>
				{
					if(wpm < MAX_WPM)
    27d6:	80 91 d0 01 	lds	r24, 0x01D0
    27da:	88 32       	cpi	r24, 0x28	; 40
    27dc:	28 f4       	brcc	.+10     	; 0x27e8 <main+0x1282>
						wpm++;
    27de:	80 91 d0 01 	lds	r24, 0x01D0
    27e2:	8f 5f       	subi	r24, 0xFF	; 255
    27e4:	80 93 d0 01 	sts	0x01D0, r24
					set_wpm(wpm);
    27e8:	80 91 d0 01 	lds	r24, 0x01D0
    27ec:	0e 94 01 04 	call	0x802	; 0x802 <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    27f0:	80 91 60 01 	lds	r24, 0x0160
    27f4:	90 91 61 01 	lds	r25, 0x0161
    27f8:	a0 91 62 01 	lds	r26, 0x0162
    27fc:	b0 91 63 01 	lds	r27, 0x0163
    2800:	80 56       	subi	r24, 0x60	; 96
    2802:	90 4f       	sbci	r25, 0xF0	; 240
    2804:	af 4f       	sbci	r26, 0xFF	; 255
    2806:	bf 4f       	sbci	r27, 0xFF	; 255
    2808:	80 93 c2 01 	sts	0x01C2, r24
    280c:	90 93 c3 01 	sts	0x01C3, r25
    2810:	a0 93 c4 01 	sts	0x01C4, r26
    2814:	b0 93 c5 01 	sts	0x01C5, r27
					announce("I", st_freq, wpm);
    2818:	20 91 b2 01 	lds	r18, 0x01B2
    281c:	30 91 b3 01 	lds	r19, 0x01B3
    2820:	40 91 d0 01 	lds	r20, 0x01D0
    2824:	8a e2       	ldi	r24, 0x2A	; 42
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	b9 01       	movw	r22, r18
    282a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
    282e:	70 c0       	rjmp	.+224    	; 0x2910 <main+0x13aa>
				}
				else if(msg_btn == PRESS)
    2830:	80 91 b9 01 	lds	r24, 0x01B9
    2834:	81 30       	cpi	r24, 0x01	; 1
    2836:	09 f0       	breq	.+2      	; 0x283a <main+0x12d4>
    2838:	6b c0       	rjmp	.+214    	; 0x2910 <main+0x13aa>
				{
					if(wpm > MIN_WPM)
    283a:	80 91 d0 01 	lds	r24, 0x01D0
    283e:	86 30       	cpi	r24, 0x06	; 6
    2840:	28 f0       	brcs	.+10     	; 0x284c <main+0x12e6>
						wpm--;
    2842:	80 91 d0 01 	lds	r24, 0x01D0
    2846:	81 50       	subi	r24, 0x01	; 1
    2848:	80 93 d0 01 	sts	0x01D0, r24
					set_wpm(wpm);
    284c:	80 91 d0 01 	lds	r24, 0x01D0
    2850:	0e 94 01 04 	call	0x802	; 0x802 <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2854:	80 91 60 01 	lds	r24, 0x0160
    2858:	90 91 61 01 	lds	r25, 0x0161
    285c:	a0 91 62 01 	lds	r26, 0x0162
    2860:	b0 91 63 01 	lds	r27, 0x0163
    2864:	80 56       	subi	r24, 0x60	; 96
    2866:	90 4f       	sbci	r25, 0xF0	; 240
    2868:	af 4f       	sbci	r26, 0xFF	; 255
    286a:	bf 4f       	sbci	r27, 0xFF	; 255
    286c:	80 93 c2 01 	sts	0x01C2, r24
    2870:	90 93 c3 01 	sts	0x01C3, r25
    2874:	a0 93 c4 01 	sts	0x01C4, r26
    2878:	b0 93 c5 01 	sts	0x01C5, r27
					announce("I", st_freq, wpm);
    287c:	20 91 b2 01 	lds	r18, 0x01B2
    2880:	30 91 b3 01 	lds	r19, 0x01B3
    2884:	40 91 d0 01 	lds	r20, 0x01D0
    2888:	8a e2       	ldi	r24, 0x2A	; 42
    288a:	91 e0       	ldi	r25, 0x01	; 1
    288c:	b9 01       	movw	r22, r18
    288e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
    2892:	3e c0       	rjmp	.+124    	; 0x2910 <main+0x13aa>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_write_byte(&ee_wpm, wpm);
    2894:	20 91 d0 01 	lds	r18, 0x01D0
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	62 2f       	mov	r22, r18
    289e:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <__eewr_byte_m168>

				cur_state = IDLE;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	80 93 bc 01 	sts	0x01BC, r24
				cur_mode = default_mode;
    28a8:	80 91 65 01 	lds	r24, 0x0165
    28ac:	80 93 9a 01 	sts	0x019A, r24

				sprintf(text_buffer, "%d", wpm);
    28b0:	40 91 38 01 	lds	r20, 0x0138
    28b4:	50 91 39 01 	lds	r21, 0x0139
    28b8:	80 91 d0 01 	lds	r24, 0x01D0
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <main+0x135c>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <main+0x135e>
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <main+0x1360>
    28c6:	8d b7       	in	r24, 0x3d	; 61
    28c8:	9e b7       	in	r25, 0x3e	; 62
    28ca:	01 96       	adiw	r24, 0x01	; 1
    28cc:	fc 01       	movw	r30, r24
    28ce:	51 83       	std	Z+1, r21	; 0x01
    28d0:	40 83       	st	Z, r20
    28d2:	45 e2       	ldi	r20, 0x25	; 37
    28d4:	51 e0       	ldi	r21, 0x01	; 1
    28d6:	fc 01       	movw	r30, r24
    28d8:	53 83       	std	Z+3, r21	; 0x03
    28da:	42 83       	std	Z+2, r20	; 0x02
    28dc:	fc 01       	movw	r30, r24
    28de:	35 83       	std	Z+5, r19	; 0x05
    28e0:	24 83       	std	Z+4, r18	; 0x04
    28e2:	0e 94 22 1c 	call	0x3844	; 0x3844 <sprintf>
    28e6:	8d b7       	in	r24, 0x3d	; 61
    28e8:	9e b7       	in	r25, 0x3e	; 62
    28ea:	06 96       	adiw	r24, 0x06	; 6
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	9e bf       	out	0x3e, r25	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq, wpm);
    28f6:	80 91 38 01 	lds	r24, 0x0138
    28fa:	90 91 39 01 	lds	r25, 0x0139
    28fe:	20 91 b2 01 	lds	r18, 0x01B2
    2902:	30 91 b3 01 	lds	r19, 0x01B3
    2906:	40 91 d0 01 	lds	r20, 0x01D0
    290a:	b9 01       	movw	r22, r18
    290c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
			}
			break;
    2910:	d0 c5       	rjmp	.+2976   	; 0x34b2 <main+0x1f4c>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    2912:	80 91 ca 01 	lds	r24, 0x01CA
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	61 f0       	breq	.+24     	; 0x2932 <main+0x13cc>
    291a:	80 91 b8 01 	lds	r24, 0x01B8
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	41 f0       	breq	.+16     	; 0x2932 <main+0x13cc>
    2922:	80 91 bb 01 	lds	r24, 0x01BB
    2926:	81 30       	cpi	r24, 0x01	; 1
    2928:	21 f0       	breq	.+8      	; 0x2932 <main+0x13cc>
    292a:	80 91 b9 01 	lds	r24, 0x01B9
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	e9 f5       	brne	.+122    	; 0x29ac <main+0x1446>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    2932:	80 91 d5 01 	lds	r24, 0x01D5
    2936:	90 91 d6 01 	lds	r25, 0x01D6
    293a:	20 e2       	ldi	r18, 0x20	; 32
    293c:	31 e0       	ldi	r19, 0x01	; 1
    293e:	b9 01       	movw	r22, r18
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <memcpy>
				cur_char_p = announce_buffer;
    2948:	80 91 d5 01 	lds	r24, 0x01D5
    294c:	90 91 d6 01 	lds	r25, 0x01D6
    2950:	90 93 37 01 	sts	0x0137, r25
    2954:	80 93 36 01 	sts	0x0136, r24
				cur_character = '\0';
    2958:	10 92 3a 01 	sts	0x013A, r1

				// Set back into previous mode
				mute_end = cur_timer;
    295c:	80 91 60 01 	lds	r24, 0x0160
    2960:	90 91 61 01 	lds	r25, 0x0161
    2964:	a0 91 62 01 	lds	r26, 0x0162
    2968:	b0 91 63 01 	lds	r27, 0x0163
    296c:	80 93 c6 01 	sts	0x01C6, r24
    2970:	90 93 c7 01 	sts	0x01C7, r25
    2974:	a0 93 c8 01 	sts	0x01C8, r26
    2978:	b0 93 c9 01 	sts	0x01C9, r27
				cur_mode = prev_mode;
    297c:	80 91 b0 01 	lds	r24, 0x01B0
    2980:	80 93 9a 01 	sts	0x019A, r24
				cur_state = prev_state;
    2984:	80 91 6a 01 	lds	r24, 0x016A
    2988:	80 93 bc 01 	sts	0x01BC, r24
				cur_state_end = prev_state_end;
    298c:	80 91 ac 01 	lds	r24, 0x01AC
    2990:	90 91 ad 01 	lds	r25, 0x01AD
    2994:	a0 91 ae 01 	lds	r26, 0x01AE
    2998:	b0 91 af 01 	lds	r27, 0x01AF
    299c:	80 93 c2 01 	sts	0x01C2, r24
    29a0:	90 93 c3 01 	sts	0x01C3, r25
    29a4:	a0 93 c4 01 	sts	0x01C4, r26
    29a8:	b0 93 c5 01 	sts	0x01C5, r27
			}

			switch(cur_state)
    29ac:	80 91 bc 01 	lds	r24, 0x01BC
    29b0:	88 2f       	mov	r24, r24
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	84 30       	cpi	r24, 0x04	; 4
    29b6:	91 05       	cpc	r25, r1
    29b8:	44 f4       	brge	.+16     	; 0x29ca <main+0x1464>
    29ba:	82 30       	cpi	r24, 0x02	; 2
    29bc:	91 05       	cpc	r25, r1
    29be:	0c f0       	brlt	.+2      	; 0x29c2 <main+0x145c>
    29c0:	bb c1       	rjmp	.+886    	; 0x2d38 <main+0x17d2>
    29c2:	81 30       	cpi	r24, 0x01	; 1
    29c4:	91 05       	cpc	r25, r1
    29c6:	31 f0       	breq	.+12     	; 0x29d4 <main+0x146e>
    29c8:	14 c2       	rjmp	.+1064   	; 0x2df2 <main+0x188c>
    29ca:	87 30       	cpi	r24, 0x07	; 7
    29cc:	91 05       	cpc	r25, r1
    29ce:	0c f0       	brlt	.+2      	; 0x29d2 <main+0x146c>
    29d0:	10 c2       	rjmp	.+1056   	; 0x2df2 <main+0x188c>
    29d2:	ef c1       	rjmp	.+990    	; 0x2db2 <main+0x184c>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    29d4:	20 91 36 01 	lds	r18, 0x0136
    29d8:	30 91 37 01 	lds	r19, 0x0137
    29dc:	80 91 d5 01 	lds	r24, 0x01D5
    29e0:	90 91 d6 01 	lds	r25, 0x01D6
    29e4:	28 17       	cp	r18, r24
    29e6:	39 07       	cpc	r19, r25
    29e8:	c9 f4       	brne	.+50     	; 0x2a1c <main+0x14b6>
    29ea:	80 91 3a 01 	lds	r24, 0x013A
    29ee:	88 23       	and	r24, r24
    29f0:	a9 f4       	brne	.+42     	; 0x2a1c <main+0x14b6>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    29f2:	80 91 36 01 	lds	r24, 0x0136
    29f6:	90 91 37 01 	lds	r25, 0x0137
    29fa:	fc 01       	movw	r30, r24
    29fc:	80 81       	ld	r24, Z
    29fe:	88 2f       	mov	r24, r24
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	80 97       	sbiw	r24, 0x20	; 32
    2a04:	88 59       	subi	r24, 0x98	; 152
    2a06:	9f 4f       	sbci	r25, 0xFF	; 255
    2a08:	99 87       	std	Y+9, r25	; 0x09
    2a0a:	88 87       	std	Y+8, r24	; 0x08
    2a0c:	88 85       	ldd	r24, Y+8	; 0x08
    2a0e:	99 85       	ldd	r25, Y+9	; 0x09
    2a10:	fc 01       	movw	r30, r24
    2a12:	14 91       	lpm	r17, Z+
    2a14:	1a 87       	std	Y+10, r17	; 0x0a
    2a16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a18:	80 93 3a 01 	sts	0x013A, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2a1c:	80 91 3a 01 	lds	r24, 0x013A
    2a20:	88 23       	and	r24, r24
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <main+0x14c0>
    2a24:	4b c1       	rjmp	.+662    	; 0x2cbc <main+0x1756>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2a26:	80 91 3a 01 	lds	r24, 0x013A
    2a2a:	80 38       	cpi	r24, 0x80	; 128
    2a2c:	29 f0       	breq	.+10     	; 0x2a38 <main+0x14d2>
    2a2e:	80 91 3a 01 	lds	r24, 0x013A
    2a32:	8f 3f       	cpi	r24, 0xFF	; 255
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <main+0x14d2>
    2a36:	79 c0       	rjmp	.+242    	; 0x2b2a <main+0x15c4>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    2a38:	80 91 3a 01 	lds	r24, 0x013A
    2a3c:	80 38       	cpi	r24, 0x80	; 128
    2a3e:	21 f5       	brne	.+72     	; 0x2a88 <main+0x1522>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2a40:	20 91 6b 01 	lds	r18, 0x016B
    2a44:	30 91 6c 01 	lds	r19, 0x016C
    2a48:	c9 01       	movw	r24, r18
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	82 0f       	add	r24, r18
    2a50:	93 1f       	adc	r25, r19
    2a52:	9c 01       	movw	r18, r24
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	50 e0       	ldi	r21, 0x00	; 0
    2a58:	80 91 60 01 	lds	r24, 0x0160
    2a5c:	90 91 61 01 	lds	r25, 0x0161
    2a60:	a0 91 62 01 	lds	r26, 0x0162
    2a64:	b0 91 63 01 	lds	r27, 0x0163
    2a68:	82 0f       	add	r24, r18
    2a6a:	93 1f       	adc	r25, r19
    2a6c:	a4 1f       	adc	r26, r20
    2a6e:	b5 1f       	adc	r27, r21
    2a70:	80 93 c2 01 	sts	0x01C2, r24
    2a74:	90 93 c3 01 	sts	0x01C3, r25
    2a78:	a0 93 c4 01 	sts	0x01C4, r26
    2a7c:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAHDELAY;
    2a80:	85 e0       	ldi	r24, 0x05	; 5
    2a82:	80 93 bc 01 	sts	0x01BC, r24
    2a86:	27 c0       	rjmp	.+78     	; 0x2ad6 <main+0x1570>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2a88:	20 91 6b 01 	lds	r18, 0x016B
    2a8c:	30 91 6c 01 	lds	r19, 0x016C
    2a90:	c9 01       	movw	r24, r18
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	82 1b       	sub	r24, r18
    2aa0:	93 0b       	sbc	r25, r19
    2aa2:	9c 01       	movw	r18, r24
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	80 91 60 01 	lds	r24, 0x0160
    2aac:	90 91 61 01 	lds	r25, 0x0161
    2ab0:	a0 91 62 01 	lds	r26, 0x0162
    2ab4:	b0 91 63 01 	lds	r27, 0x0163
    2ab8:	82 0f       	add	r24, r18
    2aba:	93 1f       	adc	r25, r19
    2abc:	a4 1f       	adc	r26, r20
    2abe:	b5 1f       	adc	r27, r21
    2ac0:	80 93 c2 01 	sts	0x01C2, r24
    2ac4:	90 93 c3 01 	sts	0x01C3, r25
    2ac8:	a0 93 c4 01 	sts	0x01C4, r26
    2acc:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAHDELAY;
    2ad0:	85 e0       	ldi	r24, 0x05	; 5
    2ad2:	80 93 bc 01 	sts	0x01BC, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    2ad6:	80 91 36 01 	lds	r24, 0x0136
    2ada:	90 91 37 01 	lds	r25, 0x0137
    2ade:	01 96       	adiw	r24, 0x01	; 1
    2ae0:	90 93 37 01 	sts	0x0137, r25
    2ae4:	80 93 36 01 	sts	0x0136, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2ae8:	80 91 36 01 	lds	r24, 0x0136
    2aec:	90 91 37 01 	lds	r25, 0x0137
    2af0:	fc 01       	movw	r30, r24
    2af2:	80 81       	ld	r24, Z
    2af4:	88 23       	and	r24, r24
    2af6:	19 f4       	brne	.+6      	; 0x2afe <main+0x1598>
							cur_character = '\0';
    2af8:	10 92 3a 01 	sts	0x013A, r1
    2afc:	15 c0       	rjmp	.+42     	; 0x2b28 <main+0x15c2>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2afe:	80 91 36 01 	lds	r24, 0x0136
    2b02:	90 91 37 01 	lds	r25, 0x0137
    2b06:	fc 01       	movw	r30, r24
    2b08:	80 81       	ld	r24, Z
    2b0a:	88 2f       	mov	r24, r24
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	80 97       	sbiw	r24, 0x20	; 32
    2b10:	88 59       	subi	r24, 0x98	; 152
    2b12:	9f 4f       	sbci	r25, 0xFF	; 255
    2b14:	9c 87       	std	Y+12, r25	; 0x0c
    2b16:	8b 87       	std	Y+11, r24	; 0x0b
    2b18:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	14 91       	lpm	r17, Z+
    2b20:	1d 87       	std	Y+13, r17	; 0x0d
    2b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b24:	80 93 3a 01 	sts	0x013A, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2b28:	c8 c0       	rjmp	.+400    	; 0x2cba <main+0x1754>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    2b2a:	80 91 3a 01 	lds	r24, 0x013A
    2b2e:	88 23       	and	r24, r24
    2b30:	0c f0       	brlt	.+2      	; 0x2b34 <main+0x15ce>
    2b32:	62 c0       	rjmp	.+196    	; 0x2bf8 <main+0x1692>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2b34:	20 91 6b 01 	lds	r18, 0x016B
    2b38:	30 91 6c 01 	lds	r19, 0x016C
    2b3c:	c9 01       	movw	r24, r18
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	82 0f       	add	r24, r18
    2b44:	93 1f       	adc	r25, r19
    2b46:	9c 01       	movw	r18, r24
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	80 91 60 01 	lds	r24, 0x0160
    2b50:	90 91 61 01 	lds	r25, 0x0161
    2b54:	a0 91 62 01 	lds	r26, 0x0162
    2b58:	b0 91 63 01 	lds	r27, 0x0163
    2b5c:	82 0f       	add	r24, r18
    2b5e:	93 1f       	adc	r25, r19
    2b60:	a4 1f       	adc	r26, r20
    2b62:	b5 1f       	adc	r27, r21
    2b64:	80 93 c2 01 	sts	0x01C2, r24
    2b68:	90 93 c3 01 	sts	0x01C3, r25
    2b6c:	a0 93 c4 01 	sts	0x01C4, r26
    2b70:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAH;
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	80 93 bc 01 	sts	0x01BC, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2b7a:	80 91 60 01 	lds	r24, 0x0160
    2b7e:	90 91 61 01 	lds	r25, 0x0161
    2b82:	a0 91 62 01 	lds	r26, 0x0162
    2b86:	b0 91 63 01 	lds	r27, 0x0163
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	a1 1d       	adc	r26, r1
    2b8e:	b1 1d       	adc	r27, r1
    2b90:	80 93 a0 01 	sts	0x01A0, r24
    2b94:	90 93 a1 01 	sts	0x01A1, r25
    2b98:	a0 93 a2 01 	sts	0x01A2, r26
    2b9c:	b0 93 a3 01 	sts	0x01A3, r27
							tx_end = cur_state_end;
    2ba0:	80 91 c2 01 	lds	r24, 0x01C2
    2ba4:	90 91 c3 01 	lds	r25, 0x01C3
    2ba8:	a0 91 c4 01 	lds	r26, 0x01C4
    2bac:	b0 91 c5 01 	lds	r27, 0x01C5
    2bb0:	80 93 d7 01 	sts	0x01D7, r24
    2bb4:	90 93 d8 01 	sts	0x01D8, r25
    2bb8:	a0 93 d9 01 	sts	0x01D9, r26
    2bbc:	b0 93 da 01 	sts	0x01DA, r27
							mute_start = cur_timer;
    2bc0:	80 91 60 01 	lds	r24, 0x0160
    2bc4:	90 91 61 01 	lds	r25, 0x0161
    2bc8:	a0 91 62 01 	lds	r26, 0x0162
    2bcc:	b0 91 63 01 	lds	r27, 0x0163
    2bd0:	80 93 d1 01 	sts	0x01D1, r24
    2bd4:	90 93 d2 01 	sts	0x01D2, r25
    2bd8:	a0 93 d3 01 	sts	0x01D3, r26
    2bdc:	b0 93 d4 01 	sts	0x01D4, r27
							mute_end = UINT32_MAX;
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	9f ef       	ldi	r25, 0xFF	; 255
    2be4:	dc 01       	movw	r26, r24
    2be6:	80 93 c6 01 	sts	0x01C6, r24
    2bea:	90 93 c7 01 	sts	0x01C7, r25
    2bee:	a0 93 c8 01 	sts	0x01C8, r26
    2bf2:	b0 93 c9 01 	sts	0x01C9, r27
    2bf6:	5c c0       	rjmp	.+184    	; 0x2cb0 <main+0x174a>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    2bf8:	80 91 6b 01 	lds	r24, 0x016B
    2bfc:	90 91 6c 01 	lds	r25, 0x016C
    2c00:	9c 01       	movw	r18, r24
    2c02:	40 e0       	ldi	r20, 0x00	; 0
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	80 91 60 01 	lds	r24, 0x0160
    2c0a:	90 91 61 01 	lds	r25, 0x0161
    2c0e:	a0 91 62 01 	lds	r26, 0x0162
    2c12:	b0 91 63 01 	lds	r27, 0x0163
    2c16:	82 0f       	add	r24, r18
    2c18:	93 1f       	adc	r25, r19
    2c1a:	a4 1f       	adc	r26, r20
    2c1c:	b5 1f       	adc	r27, r21
    2c1e:	80 93 c2 01 	sts	0x01C2, r24
    2c22:	90 93 c3 01 	sts	0x01C3, r25
    2c26:	a0 93 c4 01 	sts	0x01C4, r26
    2c2a:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DIT;
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	80 93 bc 01 	sts	0x01BC, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2c34:	80 91 60 01 	lds	r24, 0x0160
    2c38:	90 91 61 01 	lds	r25, 0x0161
    2c3c:	a0 91 62 01 	lds	r26, 0x0162
    2c40:	b0 91 63 01 	lds	r27, 0x0163
    2c44:	01 96       	adiw	r24, 0x01	; 1
    2c46:	a1 1d       	adc	r26, r1
    2c48:	b1 1d       	adc	r27, r1
    2c4a:	80 93 a0 01 	sts	0x01A0, r24
    2c4e:	90 93 a1 01 	sts	0x01A1, r25
    2c52:	a0 93 a2 01 	sts	0x01A2, r26
    2c56:	b0 93 a3 01 	sts	0x01A3, r27
							tx_end = cur_state_end;
    2c5a:	80 91 c2 01 	lds	r24, 0x01C2
    2c5e:	90 91 c3 01 	lds	r25, 0x01C3
    2c62:	a0 91 c4 01 	lds	r26, 0x01C4
    2c66:	b0 91 c5 01 	lds	r27, 0x01C5
    2c6a:	80 93 d7 01 	sts	0x01D7, r24
    2c6e:	90 93 d8 01 	sts	0x01D8, r25
    2c72:	a0 93 d9 01 	sts	0x01D9, r26
    2c76:	b0 93 da 01 	sts	0x01DA, r27
							mute_start = cur_timer;
    2c7a:	80 91 60 01 	lds	r24, 0x0160
    2c7e:	90 91 61 01 	lds	r25, 0x0161
    2c82:	a0 91 62 01 	lds	r26, 0x0162
    2c86:	b0 91 63 01 	lds	r27, 0x0163
    2c8a:	80 93 d1 01 	sts	0x01D1, r24
    2c8e:	90 93 d2 01 	sts	0x01D2, r25
    2c92:	a0 93 d3 01 	sts	0x01D3, r26
    2c96:	b0 93 d4 01 	sts	0x01D4, r27
							mute_end = UINT32_MAX;
    2c9a:	8f ef       	ldi	r24, 0xFF	; 255
    2c9c:	9f ef       	ldi	r25, 0xFF	; 255
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	80 93 c6 01 	sts	0x01C6, r24
    2ca4:	90 93 c7 01 	sts	0x01C7, r25
    2ca8:	a0 93 c8 01 	sts	0x01C8, r26
    2cac:	b0 93 c9 01 	sts	0x01C9, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    2cb0:	80 91 3a 01 	lds	r24, 0x013A
    2cb4:	88 0f       	add	r24, r24
    2cb6:	80 93 3a 01 	sts	0x013A, r24
    2cba:	3d c0       	rjmp	.+122    	; 0x2d36 <main+0x17d0>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2cbc:	80 91 d5 01 	lds	r24, 0x01D5
    2cc0:	90 91 d6 01 	lds	r25, 0x01D6
    2cc4:	20 e2       	ldi	r18, 0x20	; 32
    2cc6:	31 e0       	ldi	r19, 0x01	; 1
    2cc8:	b9 01       	movw	r22, r18
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <memcpy>
					cur_char_p = announce_buffer;
    2cd2:	80 91 d5 01 	lds	r24, 0x01D5
    2cd6:	90 91 d6 01 	lds	r25, 0x01D6
    2cda:	90 93 37 01 	sts	0x0137, r25
    2cde:	80 93 36 01 	sts	0x0136, r24
					cur_character = '\0';
    2ce2:	10 92 3a 01 	sts	0x013A, r1

					// Set back into previous mode
					mute_end = cur_timer;
    2ce6:	80 91 60 01 	lds	r24, 0x0160
    2cea:	90 91 61 01 	lds	r25, 0x0161
    2cee:	a0 91 62 01 	lds	r26, 0x0162
    2cf2:	b0 91 63 01 	lds	r27, 0x0163
    2cf6:	80 93 c6 01 	sts	0x01C6, r24
    2cfa:	90 93 c7 01 	sts	0x01C7, r25
    2cfe:	a0 93 c8 01 	sts	0x01C8, r26
    2d02:	b0 93 c9 01 	sts	0x01C9, r27
					cur_mode = prev_mode;
    2d06:	80 91 b0 01 	lds	r24, 0x01B0
    2d0a:	80 93 9a 01 	sts	0x019A, r24
					cur_state = prev_state;
    2d0e:	80 91 6a 01 	lds	r24, 0x016A
    2d12:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = prev_state_end;
    2d16:	80 91 ac 01 	lds	r24, 0x01AC
    2d1a:	90 91 ad 01 	lds	r25, 0x01AD
    2d1e:	a0 91 ae 01 	lds	r26, 0x01AE
    2d22:	b0 91 af 01 	lds	r27, 0x01AF
    2d26:	80 93 c2 01 	sts	0x01C2, r24
    2d2a:	90 93 c3 01 	sts	0x01C3, r25
    2d2e:	a0 93 c4 01 	sts	0x01C4, r26
    2d32:	b0 93 c5 01 	sts	0x01C5, r27
				}
				break;
    2d36:	5e c0       	rjmp	.+188    	; 0x2df4 <main+0x188e>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2d38:	20 91 60 01 	lds	r18, 0x0160
    2d3c:	30 91 61 01 	lds	r19, 0x0161
    2d40:	40 91 62 01 	lds	r20, 0x0162
    2d44:	50 91 63 01 	lds	r21, 0x0163
    2d48:	80 91 c2 01 	lds	r24, 0x01C2
    2d4c:	90 91 c3 01 	lds	r25, 0x01C3
    2d50:	a0 91 c4 01 	lds	r26, 0x01C4
    2d54:	b0 91 c5 01 	lds	r27, 0x01C5
    2d58:	82 17       	cp	r24, r18
    2d5a:	93 07       	cpc	r25, r19
    2d5c:	a4 07       	cpc	r26, r20
    2d5e:	b5 07       	cpc	r27, r21
    2d60:	f0 f4       	brcc	.+60     	; 0x2d9e <main+0x1838>
				{
					cur_state_end = cur_timer + dit_length;
    2d62:	80 91 6b 01 	lds	r24, 0x016B
    2d66:	90 91 6c 01 	lds	r25, 0x016C
    2d6a:	9c 01       	movw	r18, r24
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	80 91 60 01 	lds	r24, 0x0160
    2d74:	90 91 61 01 	lds	r25, 0x0161
    2d78:	a0 91 62 01 	lds	r26, 0x0162
    2d7c:	b0 91 63 01 	lds	r27, 0x0163
    2d80:	82 0f       	add	r24, r18
    2d82:	93 1f       	adc	r25, r19
    2d84:	a4 1f       	adc	r26, r20
    2d86:	b5 1f       	adc	r27, r21
    2d88:	80 93 c2 01 	sts	0x01C2, r24
    2d8c:	90 93 c3 01 	sts	0x01C3, r25
    2d90:	a0 93 c4 01 	sts	0x01C4, r26
    2d94:	b0 93 c5 01 	sts	0x01C5, r27
					cur_state = DITDELAY;
    2d98:	84 e0       	ldi	r24, 0x04	; 4
    2d9a:	80 93 bc 01 	sts	0x01BC, r24
				}

				key_down = TRUE;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	80 93 33 01 	sts	0x0133, r24
				break;
    2db0:	21 c0       	rjmp	.+66     	; 0x2df4 <main+0x188e>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    2db2:	20 91 60 01 	lds	r18, 0x0160
    2db6:	30 91 61 01 	lds	r19, 0x0161
    2dba:	40 91 62 01 	lds	r20, 0x0162
    2dbe:	50 91 63 01 	lds	r21, 0x0163
    2dc2:	80 91 c2 01 	lds	r24, 0x01C2
    2dc6:	90 91 c3 01 	lds	r25, 0x01C3
    2dca:	a0 91 c4 01 	lds	r26, 0x01C4
    2dce:	b0 91 c5 01 	lds	r27, 0x01C5
    2dd2:	82 17       	cp	r24, r18
    2dd4:	93 07       	cpc	r25, r19
    2dd6:	a4 07       	cpc	r26, r20
    2dd8:	b5 07       	cpc	r27, r21
    2dda:	18 f4       	brcc	.+6      	; 0x2de2 <main+0x187c>
					cur_state = IDLE;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	80 93 bc 01 	sts	0x01BC, r24

				key_down = FALSE;
    2de2:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    2de6:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	80 93 33 01 	sts	0x0133, r24
				break;
    2df0:	01 c0       	rjmp	.+2      	; 0x2df4 <main+0x188e>

			default:
				break;
    2df2:	00 00       	nop
			}
			break;
    2df4:	5e c3       	rjmp	.+1724   	; 0x34b2 <main+0x1f4c>

		case RECORD:
			switch(cur_state)
    2df6:	80 91 bc 01 	lds	r24, 0x01BC
    2dfa:	88 2f       	mov	r24, r24
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	83 30       	cpi	r24, 0x03	; 3
    2e00:	91 05       	cpc	r25, r1
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <main+0x18a0>
    2e04:	e3 c1       	rjmp	.+966    	; 0x31cc <main+0x1c66>
    2e06:	84 30       	cpi	r24, 0x04	; 4
    2e08:	91 05       	cpc	r25, r1
    2e0a:	5c f4       	brge	.+22     	; 0x2e22 <main+0x18bc>
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	91 05       	cpc	r25, r1
    2e10:	09 f4       	brne	.+2      	; 0x2e14 <main+0x18ae>
    2e12:	4c c0       	rjmp	.+152    	; 0x2eac <main+0x1946>
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	91 05       	cpc	r25, r1
    2e18:	0c f0       	brlt	.+2      	; 0x2e1c <main+0x18b6>
    2e1a:	8e c1       	rjmp	.+796    	; 0x3138 <main+0x1bd2>
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	71 f0       	breq	.+28     	; 0x2e3c <main+0x18d6>
    2e20:	45 c3       	rjmp	.+1674   	; 0x34ac <main+0x1f46>
    2e22:	8b 30       	cpi	r24, 0x0B	; 11
    2e24:	91 05       	cpc	r25, r1
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <main+0x18c4>
    2e28:	b4 c2       	rjmp	.+1384   	; 0x3392 <main+0x1e2c>
    2e2a:	8c 30       	cpi	r24, 0x0C	; 12
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <main+0x18cc>
    2e30:	0f c3       	rjmp	.+1566   	; 0x3450 <main+0x1eea>
    2e32:	84 30       	cpi	r24, 0x04	; 4
    2e34:	91 05       	cpc	r25, r1
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <main+0x18d4>
    2e38:	13 c2       	rjmp	.+1062   	; 0x3260 <main+0x1cfa>
    2e3a:	38 c3       	rjmp	.+1648   	; 0x34ac <main+0x1f46>
			{
			case INIT:
				mute_start = cur_timer;
    2e3c:	80 91 60 01 	lds	r24, 0x0160
    2e40:	90 91 61 01 	lds	r25, 0x0161
    2e44:	a0 91 62 01 	lds	r26, 0x0162
    2e48:	b0 91 63 01 	lds	r27, 0x0163
    2e4c:	80 93 d1 01 	sts	0x01D1, r24
    2e50:	90 93 d2 01 	sts	0x01D2, r25
    2e54:	a0 93 d3 01 	sts	0x01D3, r26
    2e58:	b0 93 d4 01 	sts	0x01D4, r27
				mute_end = UINT32_MAX;
    2e5c:	8f ef       	ldi	r24, 0xFF	; 255
    2e5e:	9f ef       	ldi	r25, 0xFF	; 255
    2e60:	dc 01       	movw	r26, r24
    2e62:	80 93 c6 01 	sts	0x01C6, r24
    2e66:	90 93 c7 01 	sts	0x01C7, r25
    2e6a:	a0 93 c8 01 	sts	0x01C8, r26
    2e6e:	b0 93 c9 01 	sts	0x01C9, r27

				// Initialize the current recorded character
				rec_input = 0;
    2e72:	10 92 3f 01 	sts	0x013F, r1
				rec_count = 0;
    2e76:	10 92 40 01 	sts	0x0140, r1
				rec_timeout = UINT32_MAX;
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	9f ef       	ldi	r25, 0xFF	; 255
    2e7e:	dc 01       	movw	r26, r24
    2e80:	80 93 41 01 	sts	0x0141, r24
    2e84:	90 93 42 01 	sts	0x0142, r25
    2e88:	a0 93 43 01 	sts	0x0143, r26
    2e8c:	b0 93 44 01 	sts	0x0144, r27

				memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    2e90:	80 91 38 01 	lds	r24, 0x0138
    2e94:	90 91 39 01 	lds	r25, 0x0139
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	70 e0       	ldi	r23, 0x00	; 0
    2e9c:	49 e2       	ldi	r20, 0x29	; 41
    2e9e:	50 e0       	ldi	r21, 0x00	; 0
    2ea0:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <memset>

				cur_state = IDLE;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	80 93 bc 01 	sts	0x01BC, r24
				break;
    2eaa:	01 c3       	rjmp	.+1538   	; 0x34ae <main+0x1f48>

			case IDLE:
				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    2eac:	80 91 ca 01 	lds	r24, 0x01CA
    2eb0:	81 30       	cpi	r24, 0x01	; 1
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <main+0x1950>
    2eb4:	4b c0       	rjmp	.+150    	; 0x2f4c <main+0x19e6>
    2eb6:	80 91 b8 01 	lds	r24, 0x01B8
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <main+0x195a>
    2ebe:	46 c0       	rjmp	.+140    	; 0x2f4c <main+0x19e6>
				{
					prev_state = IDLE;
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	80 93 bc 01 	sts	0x01BC, r24
					next_state = IDLE;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    2ed2:	80 91 6b 01 	lds	r24, 0x016B
    2ed6:	90 91 6c 01 	lds	r25, 0x016C
    2eda:	9c 01       	movw	r18, r24
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	50 e0       	ldi	r21, 0x00	; 0
    2ee0:	80 91 60 01 	lds	r24, 0x0160
    2ee4:	90 91 61 01 	lds	r25, 0x0161
    2ee8:	a0 91 62 01 	lds	r26, 0x0162
    2eec:	b0 91 63 01 	lds	r27, 0x0163
    2ef0:	82 0f       	add	r24, r18
    2ef2:	93 1f       	adc	r25, r19
    2ef4:	a4 1f       	adc	r26, r20
    2ef6:	b5 1f       	adc	r27, r21
    2ef8:	80 93 c2 01 	sts	0x01C2, r24
    2efc:	90 93 c3 01 	sts	0x01C3, r25
    2f00:	a0 93 c4 01 	sts	0x01C4, r26
    2f04:	b0 93 c5 01 	sts	0x01C5, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    2f08:	80 91 60 01 	lds	r24, 0x0160
    2f0c:	90 91 61 01 	lds	r25, 0x0161
    2f10:	a0 91 62 01 	lds	r26, 0x0162
    2f14:	b0 91 63 01 	lds	r27, 0x0163
    2f18:	88 51       	subi	r24, 0x18	; 24
    2f1a:	9c 4f       	sbci	r25, 0xFC	; 252
    2f1c:	af 4f       	sbci	r26, 0xFF	; 255
    2f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f20:	80 93 41 01 	sts	0x0141, r24
    2f24:	90 93 42 01 	sts	0x0142, r25
    2f28:	a0 93 43 01 	sts	0x0143, r26
    2f2c:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_count++;
    2f30:	80 91 40 01 	lds	r24, 0x0140
    2f34:	8f 5f       	subi	r24, 0xFF	; 255
    2f36:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    2f3a:	80 91 40 01 	lds	r24, 0x0140
    2f3e:	86 30       	cpi	r24, 0x06	; 6
    2f40:	08 f4       	brcc	.+2      	; 0x2f44 <main+0x19de>
    2f42:	d3 c0       	rjmp	.+422    	; 0x30ea <main+0x1b84>
						next_state = VALIDATECHAR;
    2f44:	8b e0       	ldi	r24, 0x0B	; 11
    2f46:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
					rec_timeout = cur_timer + REC_EXPIRATION;

					// Add this element to the recorded character
					rec_count++;
					if(rec_count >= 6)
    2f4a:	cf c0       	rjmp	.+414    	; 0x30ea <main+0x1b84>
						next_state = VALIDATECHAR;

				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    2f4c:	80 91 b8 01 	lds	r24, 0x01B8
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <main+0x19f0>
    2f54:	62 c0       	rjmp	.+196    	; 0x301a <main+0x1ab4>
    2f56:	80 91 ca 01 	lds	r24, 0x01CA
    2f5a:	88 23       	and	r24, r24
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <main+0x19fa>
    2f5e:	5d c0       	rjmp	.+186    	; 0x301a <main+0x1ab4>
				{
					prev_state = IDLE;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DAH;
    2f66:	83 e0       	ldi	r24, 0x03	; 3
    2f68:	80 93 bc 01 	sts	0x01BC, r24
					next_state = IDLE;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + (dit_length * 3);
    2f72:	20 91 6b 01 	lds	r18, 0x016B
    2f76:	30 91 6c 01 	lds	r19, 0x016C
    2f7a:	c9 01       	movw	r24, r18
    2f7c:	88 0f       	add	r24, r24
    2f7e:	99 1f       	adc	r25, r25
    2f80:	82 0f       	add	r24, r18
    2f82:	93 1f       	adc	r25, r19
    2f84:	9c 01       	movw	r18, r24
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	80 91 60 01 	lds	r24, 0x0160
    2f8e:	90 91 61 01 	lds	r25, 0x0161
    2f92:	a0 91 62 01 	lds	r26, 0x0162
    2f96:	b0 91 63 01 	lds	r27, 0x0163
    2f9a:	82 0f       	add	r24, r18
    2f9c:	93 1f       	adc	r25, r19
    2f9e:	a4 1f       	adc	r26, r20
    2fa0:	b5 1f       	adc	r27, r21
    2fa2:	80 93 c2 01 	sts	0x01C2, r24
    2fa6:	90 93 c3 01 	sts	0x01C3, r25
    2faa:	a0 93 c4 01 	sts	0x01C4, r26
    2fae:	b0 93 c5 01 	sts	0x01C5, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    2fb2:	80 91 60 01 	lds	r24, 0x0160
    2fb6:	90 91 61 01 	lds	r25, 0x0161
    2fba:	a0 91 62 01 	lds	r26, 0x0162
    2fbe:	b0 91 63 01 	lds	r27, 0x0163
    2fc2:	88 51       	subi	r24, 0x18	; 24
    2fc4:	9c 4f       	sbci	r25, 0xFC	; 252
    2fc6:	af 4f       	sbci	r26, 0xFF	; 255
    2fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fca:	80 93 41 01 	sts	0x0141, r24
    2fce:	90 93 42 01 	sts	0x0142, r25
    2fd2:	a0 93 43 01 	sts	0x0143, r26
    2fd6:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> rec_count);
    2fda:	80 91 40 01 	lds	r24, 0x0140
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	80 e8       	ldi	r24, 0x80	; 128
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	02 2e       	mov	r0, r18
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <main+0x1a88>
    2fea:	95 95       	asr	r25
    2fec:	87 95       	ror	r24
    2fee:	0a 94       	dec	r0
    2ff0:	e2 f7       	brpl	.-8      	; 0x2fea <main+0x1a84>
    2ff2:	98 2f       	mov	r25, r24
    2ff4:	80 91 3f 01 	lds	r24, 0x013F
    2ff8:	89 0f       	add	r24, r25
    2ffa:	80 93 3f 01 	sts	0x013F, r24
					rec_count++;
    2ffe:	80 91 40 01 	lds	r24, 0x0140
    3002:	8f 5f       	subi	r24, 0xFF	; 255
    3004:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    3008:	80 91 40 01 	lds	r24, 0x0140
    300c:	86 30       	cpi	r24, 0x06	; 6
    300e:	08 f4       	brcc	.+2      	; 0x3012 <main+0x1aac>
    3010:	6c c0       	rjmp	.+216    	; 0x30ea <main+0x1b84>
						next_state = VALIDATECHAR;
    3012:	8b e0       	ldi	r24, 0x0B	; 11
    3014:	80 93 9f 01 	sts	0x019F, r24
					rec_timeout = cur_timer + REC_EXPIRATION;

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> rec_count);
					rec_count++;
					if(rec_count >= 6)
    3018:	68 c0       	rjmp	.+208    	; 0x30ea <main+0x1b84>
						next_state = VALIDATECHAR;
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    301a:	80 91 ca 01 	lds	r24, 0x01CA
    301e:	81 30       	cpi	r24, 0x01	; 1
    3020:	09 f0       	breq	.+2      	; 0x3024 <main+0x1abe>
    3022:	63 c0       	rjmp	.+198    	; 0x30ea <main+0x1b84>
    3024:	80 91 b8 01 	lds	r24, 0x01B8
    3028:	81 30       	cpi	r24, 0x01	; 1
    302a:	09 f0       	breq	.+2      	; 0x302e <main+0x1ac8>
    302c:	5e c0       	rjmp	.+188    	; 0x30ea <main+0x1b84>
    302e:	80 91 9f 01 	lds	r24, 0x019F
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	09 f0       	breq	.+2      	; 0x3038 <main+0x1ad2>
    3036:	59 c0       	rjmp	.+178    	; 0x30ea <main+0x1b84>
				{
					prev_state = IDLE;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	80 93 bc 01 	sts	0x01BC, r24
					next_state = DAH;
    3044:	83 e0       	ldi	r24, 0x03	; 3
    3046:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    304a:	80 91 6b 01 	lds	r24, 0x016B
    304e:	90 91 6c 01 	lds	r25, 0x016C
    3052:	9c 01       	movw	r18, r24
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	80 91 60 01 	lds	r24, 0x0160
    305c:	90 91 61 01 	lds	r25, 0x0161
    3060:	a0 91 62 01 	lds	r26, 0x0162
    3064:	b0 91 63 01 	lds	r27, 0x0163
    3068:	82 0f       	add	r24, r18
    306a:	93 1f       	adc	r25, r19
    306c:	a4 1f       	adc	r26, r20
    306e:	b5 1f       	adc	r27, r21
    3070:	80 93 c2 01 	sts	0x01C2, r24
    3074:	90 93 c3 01 	sts	0x01C3, r25
    3078:	a0 93 c4 01 	sts	0x01C4, r26
    307c:	b0 93 c5 01 	sts	0x01C5, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    3080:	80 91 60 01 	lds	r24, 0x0160
    3084:	90 91 61 01 	lds	r25, 0x0161
    3088:	a0 91 62 01 	lds	r26, 0x0162
    308c:	b0 91 63 01 	lds	r27, 0x0163
    3090:	88 51       	subi	r24, 0x18	; 24
    3092:	9c 4f       	sbci	r25, 0xFC	; 252
    3094:	af 4f       	sbci	r26, 0xFF	; 255
    3096:	bf 4f       	sbci	r27, 0xFF	; 255
    3098:	80 93 41 01 	sts	0x0141, r24
    309c:	90 93 42 01 	sts	0x0142, r25
    30a0:	a0 93 43 01 	sts	0x0143, r26
    30a4:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> (rec_count + 1));
    30a8:	80 91 40 01 	lds	r24, 0x0140
    30ac:	88 2f       	mov	r24, r24
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9c 01       	movw	r18, r24
    30b2:	2f 5f       	subi	r18, 0xFF	; 255
    30b4:	3f 4f       	sbci	r19, 0xFF	; 255
    30b6:	80 e8       	ldi	r24, 0x80	; 128
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	02 2e       	mov	r0, r18
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <main+0x1b5c>
    30be:	95 95       	asr	r25
    30c0:	87 95       	ror	r24
    30c2:	0a 94       	dec	r0
    30c4:	e2 f7       	brpl	.-8      	; 0x30be <main+0x1b58>
    30c6:	98 2f       	mov	r25, r24
    30c8:	80 91 3f 01 	lds	r24, 0x013F
    30cc:	89 0f       	add	r24, r25
    30ce:	80 93 3f 01 	sts	0x013F, r24
					rec_count += 2;
    30d2:	80 91 40 01 	lds	r24, 0x0140
    30d6:	8e 5f       	subi	r24, 0xFE	; 254
    30d8:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    30dc:	80 91 40 01 	lds	r24, 0x0140
    30e0:	86 30       	cpi	r24, 0x06	; 6
    30e2:	18 f0       	brcs	.+6      	; 0x30ea <main+0x1b84>
						next_state = VALIDATECHAR;
    30e4:	8b e0       	ldi	r24, 0x0B	; 11
    30e6:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer;
				}*/

				// Handle character record timeout
				// Need to handle SPACE
				if((cur_timer > rec_timeout)/* && (rec_input > 0)*/)
    30ea:	20 91 60 01 	lds	r18, 0x0160
    30ee:	30 91 61 01 	lds	r19, 0x0161
    30f2:	40 91 62 01 	lds	r20, 0x0162
    30f6:	50 91 63 01 	lds	r21, 0x0163
    30fa:	80 91 41 01 	lds	r24, 0x0141
    30fe:	90 91 42 01 	lds	r25, 0x0142
    3102:	a0 91 43 01 	lds	r26, 0x0143
    3106:	b0 91 44 01 	lds	r27, 0x0144
    310a:	82 17       	cp	r24, r18
    310c:	93 07       	cpc	r25, r19
    310e:	a4 07       	cpc	r26, r20
    3110:	b5 07       	cpc	r27, r21
    3112:	18 f4       	brcc	.+6      	; 0x311a <main+0x1bb4>
					cur_state = VALIDATECHAR;
    3114:	8b e0       	ldi	r24, 0x0B	; 11
    3116:	80 93 bc 01 	sts	0x01BC, r24

				// If CMD is pressed, we are done recording
				if(cmd_btn == PRESS)
    311a:	80 91 bb 01 	lds	r24, 0x01BB
    311e:	81 30       	cpi	r24, 0x01	; 1
    3120:	19 f4       	brne	.+6      	; 0x3128 <main+0x1bc2>
					cur_state = EXIT;
    3122:	8c e0       	ldi	r24, 0x0C	; 12
    3124:	80 93 bc 01 	sts	0x01BC, r24

				key_down = FALSE;
    3128:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    312c:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	80 93 33 01 	sts	0x0133, r24
				break;
    3136:	bb c1       	rjmp	.+886    	; 0x34ae <main+0x1f48>

			case DIT:
				if(cur_timer > cur_state_end)
    3138:	20 91 60 01 	lds	r18, 0x0160
    313c:	30 91 61 01 	lds	r19, 0x0161
    3140:	40 91 62 01 	lds	r20, 0x0162
    3144:	50 91 63 01 	lds	r21, 0x0163
    3148:	80 91 c2 01 	lds	r24, 0x01C2
    314c:	90 91 c3 01 	lds	r25, 0x01C3
    3150:	a0 91 c4 01 	lds	r26, 0x01C4
    3154:	b0 91 c5 01 	lds	r27, 0x01C5
    3158:	82 17       	cp	r24, r18
    315a:	93 07       	cpc	r25, r19
    315c:	a4 07       	cpc	r26, r20
    315e:	b5 07       	cpc	r27, r21
    3160:	08 f5       	brcc	.+66     	; 0x31a4 <main+0x1c3e>
				{
					prev_state = DIT;
    3162:	82 e0       	ldi	r24, 0x02	; 2
    3164:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    3168:	84 e0       	ldi	r24, 0x04	; 4
    316a:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + dit_length;
    316e:	80 91 6b 01 	lds	r24, 0x016B
    3172:	90 91 6c 01 	lds	r25, 0x016C
    3176:	9c 01       	movw	r18, r24
    3178:	40 e0       	ldi	r20, 0x00	; 0
    317a:	50 e0       	ldi	r21, 0x00	; 0
    317c:	80 91 60 01 	lds	r24, 0x0160
    3180:	90 91 61 01 	lds	r25, 0x0161
    3184:	a0 91 62 01 	lds	r26, 0x0162
    3188:	b0 91 63 01 	lds	r27, 0x0163
    318c:	82 0f       	add	r24, r18
    318e:	93 1f       	adc	r25, r19
    3190:	a4 1f       	adc	r26, r20
    3192:	b5 1f       	adc	r27, r21
    3194:	80 93 c2 01 	sts	0x01C2, r24
    3198:	90 93 c3 01 	sts	0x01C3, r25
    319c:	a0 93 c4 01 	sts	0x01C4, r26
    31a0:	b0 93 c5 01 	sts	0x01C5, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    31a4:	80 91 b8 01 	lds	r24, 0x01B8
    31a8:	81 30       	cpi	r24, 0x01	; 1
    31aa:	39 f4       	brne	.+14     	; 0x31ba <main+0x1c54>
    31ac:	80 91 9f 01 	lds	r24, 0x019F
    31b0:	81 30       	cpi	r24, 0x01	; 1
    31b2:	19 f4       	brne	.+6      	; 0x31ba <main+0x1c54>
					next_state = DAH;
    31b4:	83 e0       	ldi	r24, 0x03	; 3
    31b6:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    31ba:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	80 93 33 01 	sts	0x0133, r24
				break;
    31ca:	71 c1       	rjmp	.+738    	; 0x34ae <main+0x1f48>

			case DAH:
				if(cur_timer > cur_state_end)
    31cc:	20 91 60 01 	lds	r18, 0x0160
    31d0:	30 91 61 01 	lds	r19, 0x0161
    31d4:	40 91 62 01 	lds	r20, 0x0162
    31d8:	50 91 63 01 	lds	r21, 0x0163
    31dc:	80 91 c2 01 	lds	r24, 0x01C2
    31e0:	90 91 c3 01 	lds	r25, 0x01C3
    31e4:	a0 91 c4 01 	lds	r26, 0x01C4
    31e8:	b0 91 c5 01 	lds	r27, 0x01C5
    31ec:	82 17       	cp	r24, r18
    31ee:	93 07       	cpc	r25, r19
    31f0:	a4 07       	cpc	r26, r20
    31f2:	b5 07       	cpc	r27, r21
    31f4:	08 f5       	brcc	.+66     	; 0x3238 <main+0x1cd2>
				{
					prev_state = DAH;
    31f6:	83 e0       	ldi	r24, 0x03	; 3
    31f8:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    31fc:	84 e0       	ldi	r24, 0x04	; 4
    31fe:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + dit_length;
    3202:	80 91 6b 01 	lds	r24, 0x016B
    3206:	90 91 6c 01 	lds	r25, 0x016C
    320a:	9c 01       	movw	r18, r24
    320c:	40 e0       	ldi	r20, 0x00	; 0
    320e:	50 e0       	ldi	r21, 0x00	; 0
    3210:	80 91 60 01 	lds	r24, 0x0160
    3214:	90 91 61 01 	lds	r25, 0x0161
    3218:	a0 91 62 01 	lds	r26, 0x0162
    321c:	b0 91 63 01 	lds	r27, 0x0163
    3220:	82 0f       	add	r24, r18
    3222:	93 1f       	adc	r25, r19
    3224:	a4 1f       	adc	r26, r20
    3226:	b5 1f       	adc	r27, r21
    3228:	80 93 c2 01 	sts	0x01C2, r24
    322c:	90 93 c3 01 	sts	0x01C3, r25
    3230:	a0 93 c4 01 	sts	0x01C4, r26
    3234:	b0 93 c5 01 	sts	0x01C5, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    3238:	80 91 ca 01 	lds	r24, 0x01CA
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	39 f4       	brne	.+14     	; 0x324e <main+0x1ce8>
    3240:	80 91 9f 01 	lds	r24, 0x019F
    3244:	81 30       	cpi	r24, 0x01	; 1
    3246:	19 f4       	brne	.+6      	; 0x324e <main+0x1ce8>
					next_state = DIT;
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    324e:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	80 93 33 01 	sts	0x0133, r24
				break;
    325e:	27 c1       	rjmp	.+590    	; 0x34ae <main+0x1f48>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    3260:	20 91 60 01 	lds	r18, 0x0160
    3264:	30 91 61 01 	lds	r19, 0x0161
    3268:	40 91 62 01 	lds	r20, 0x0162
    326c:	50 91 63 01 	lds	r21, 0x0163
    3270:	80 91 c2 01 	lds	r24, 0x01C2
    3274:	90 91 c3 01 	lds	r25, 0x01C3
    3278:	a0 91 c4 01 	lds	r26, 0x01C4
    327c:	b0 91 c5 01 	lds	r27, 0x01C5
    3280:	82 17       	cp	r24, r18
    3282:	93 07       	cpc	r25, r19
    3284:	a4 07       	cpc	r26, r20
    3286:	b5 07       	cpc	r27, r21
    3288:	08 f0       	brcs	.+2      	; 0x328c <main+0x1d26>
    328a:	5c c0       	rjmp	.+184    	; 0x3344 <main+0x1dde>
				{
					if(next_state == DIT)
    328c:	80 91 9f 01 	lds	r24, 0x019F
    3290:	82 30       	cpi	r24, 0x02	; 2
    3292:	f9 f4       	brne	.+62     	; 0x32d2 <main+0x1d6c>
					{
						cur_state = DIT;
    3294:	82 e0       	ldi	r24, 0x02	; 2
    3296:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer + dit_length;
    329a:	80 91 6b 01 	lds	r24, 0x016B
    329e:	90 91 6c 01 	lds	r25, 0x016C
    32a2:	9c 01       	movw	r18, r24
    32a4:	40 e0       	ldi	r20, 0x00	; 0
    32a6:	50 e0       	ldi	r21, 0x00	; 0
    32a8:	80 91 60 01 	lds	r24, 0x0160
    32ac:	90 91 61 01 	lds	r25, 0x0161
    32b0:	a0 91 62 01 	lds	r26, 0x0162
    32b4:	b0 91 63 01 	lds	r27, 0x0163
    32b8:	82 0f       	add	r24, r18
    32ba:	93 1f       	adc	r25, r19
    32bc:	a4 1f       	adc	r26, r20
    32be:	b5 1f       	adc	r27, r21
    32c0:	80 93 c2 01 	sts	0x01C2, r24
    32c4:	90 93 c3 01 	sts	0x01C3, r25
    32c8:	a0 93 c4 01 	sts	0x01C4, r26
    32cc:	b0 93 c5 01 	sts	0x01C5, r27
    32d0:	33 c0       	rjmp	.+102    	; 0x3338 <main+0x1dd2>
					}
					else if(next_state == DAH)
    32d2:	80 91 9f 01 	lds	r24, 0x019F
    32d6:	83 30       	cpi	r24, 0x03	; 3
    32d8:	21 f5       	brne	.+72     	; 0x3322 <main+0x1dbc>
					{
						cur_state = DAH;
    32da:	83 e0       	ldi	r24, 0x03	; 3
    32dc:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer + (dit_length * 3);
    32e0:	20 91 6b 01 	lds	r18, 0x016B
    32e4:	30 91 6c 01 	lds	r19, 0x016C
    32e8:	c9 01       	movw	r24, r18
    32ea:	88 0f       	add	r24, r24
    32ec:	99 1f       	adc	r25, r25
    32ee:	82 0f       	add	r24, r18
    32f0:	93 1f       	adc	r25, r19
    32f2:	9c 01       	movw	r18, r24
    32f4:	40 e0       	ldi	r20, 0x00	; 0
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	80 91 60 01 	lds	r24, 0x0160
    32fc:	90 91 61 01 	lds	r25, 0x0161
    3300:	a0 91 62 01 	lds	r26, 0x0162
    3304:	b0 91 63 01 	lds	r27, 0x0163
    3308:	82 0f       	add	r24, r18
    330a:	93 1f       	adc	r25, r19
    330c:	a4 1f       	adc	r26, r20
    330e:	b5 1f       	adc	r27, r21
    3310:	80 93 c2 01 	sts	0x01C2, r24
    3314:	90 93 c3 01 	sts	0x01C3, r25
    3318:	a0 93 c4 01 	sts	0x01C4, r26
    331c:	b0 93 c5 01 	sts	0x01C5, r27
    3320:	0b c0       	rjmp	.+22     	; 0x3338 <main+0x1dd2>
					}
					else if(next_state == VALIDATECHAR)
    3322:	80 91 9f 01 	lds	r24, 0x019F
    3326:	8b 30       	cpi	r24, 0x0B	; 11
    3328:	21 f4       	brne	.+8      	; 0x3332 <main+0x1dcc>
						cur_state = VALIDATECHAR;
    332a:	8b e0       	ldi	r24, 0x0B	; 11
    332c:	80 93 bc 01 	sts	0x01BC, r24
    3330:	03 c0       	rjmp	.+6      	; 0x3338 <main+0x1dd2>
					else
						cur_state = IDLE;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	80 93 bc 01 	sts	0x01BC, r24

					prev_state = DITDELAY;
    3338:	84 e0       	ldi	r24, 0x04	; 4
    333a:	80 93 6a 01 	sts	0x016A, r24
					next_state = IDLE;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	80 93 9f 01 	sts	0x019F, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    3344:	80 91 ca 01 	lds	r24, 0x01CA
    3348:	81 30       	cpi	r24, 0x01	; 1
    334a:	61 f4       	brne	.+24     	; 0x3364 <main+0x1dfe>
    334c:	80 91 6a 01 	lds	r24, 0x016A
    3350:	83 30       	cpi	r24, 0x03	; 3
    3352:	41 f4       	brne	.+16     	; 0x3364 <main+0x1dfe>
    3354:	80 91 9f 01 	lds	r24, 0x019F
    3358:	81 30       	cpi	r24, 0x01	; 1
    335a:	21 f4       	brne	.+8      	; 0x3364 <main+0x1dfe>
					next_state = DIT;
    335c:	82 e0       	ldi	r24, 0x02	; 2
    335e:	80 93 9f 01 	sts	0x019F, r24
    3362:	0f c0       	rjmp	.+30     	; 0x3382 <main+0x1e1c>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    3364:	80 91 b8 01 	lds	r24, 0x01B8
    3368:	81 30       	cpi	r24, 0x01	; 1
    336a:	59 f4       	brne	.+22     	; 0x3382 <main+0x1e1c>
    336c:	80 91 6a 01 	lds	r24, 0x016A
    3370:	82 30       	cpi	r24, 0x02	; 2
    3372:	39 f4       	brne	.+14     	; 0x3382 <main+0x1e1c>
    3374:	80 91 9f 01 	lds	r24, 0x019F
    3378:	81 30       	cpi	r24, 0x01	; 1
    337a:	19 f4       	brne	.+6      	; 0x3382 <main+0x1e1c>
					next_state = DAH;
    337c:	83 e0       	ldi	r24, 0x03	; 3
    337e:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    3382:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    3386:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	80 93 33 01 	sts	0x0133, r24
				break;
    3390:	8e c0       	rjmp	.+284    	; 0x34ae <main+0x1f48>
				// Compare recorded character with the Morse Code table

				// If rec_input is 0, dump to invalid

				// Tack a trailing "1" onto rec_input to indicate end of character
				rec_input = rec_input + (0b10000000 >> rec_count);
    3392:	80 91 40 01 	lds	r24, 0x0140
    3396:	28 2f       	mov	r18, r24
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	80 e8       	ldi	r24, 0x80	; 128
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	02 2e       	mov	r0, r18
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <main+0x1e40>
    33a2:	95 95       	asr	r25
    33a4:	87 95       	ror	r24
    33a6:	0a 94       	dec	r0
    33a8:	e2 f7       	brpl	.-8      	; 0x33a2 <main+0x1e3c>
    33aa:	98 2f       	mov	r25, r24
    33ac:	80 91 3f 01 	lds	r24, 0x013F
    33b0:	89 0f       	add	r24, r25
    33b2:	80 93 3f 01 	sts	0x013F, r24

				for(val_index = MORSE_CHAR_START; val_index <= 'Z'; val_index++)
    33b6:	80 e2       	ldi	r24, 0x20	; 32
    33b8:	80 93 45 01 	sts	0x0145, r24
    33bc:	2c c0       	rjmp	.+88     	; 0x3416 <main+0x1eb0>
				{
					if(rec_input == pgm_read_byte(&morsechar[val_index]))
    33be:	80 91 45 01 	lds	r24, 0x0145
    33c2:	88 2f       	mov	r24, r24
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	88 59       	subi	r24, 0x98	; 152
    33c8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ca:	9f 87       	std	Y+15, r25	; 0x0f
    33cc:	8e 87       	std	Y+14, r24	; 0x0e
    33ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    33d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    33d2:	fc 01       	movw	r30, r24
    33d4:	14 91       	lpm	r17, Z+
    33d6:	18 8b       	std	Y+16, r17	; 0x10
    33d8:	98 89       	ldd	r25, Y+16	; 0x10
    33da:	80 91 3f 01 	lds	r24, 0x013F
    33de:	98 17       	cp	r25, r24
    33e0:	a9 f4       	brne	.+42     	; 0x340c <main+0x1ea6>
					{
						// Add recorded character to text buffer
						char temp_str[2] = {val_index, '\0'};
    33e2:	80 91 45 01 	lds	r24, 0x0145
    33e6:	89 8b       	std	Y+17, r24	; 0x11
    33e8:	1a 8a       	std	Y+18, r1	; 0x12
						//temp_str[0] = val_index;
						//temp_str[1] = '\0';
						strcat(text_buffer, temp_str);
    33ea:	80 91 38 01 	lds	r24, 0x0138
    33ee:	90 91 39 01 	lds	r25, 0x0139
    33f2:	9e 01       	movw	r18, r28
    33f4:	2f 5e       	subi	r18, 0xEF	; 239
    33f6:	3f 4f       	sbci	r19, 0xFF	; 255
    33f8:	b9 01       	movw	r22, r18
    33fa:	0e 94 06 1c 	call	0x380c	; 0x380c <strcat>

						// Reinitialize the current recorded character
						rec_input = 0;
    33fe:	10 92 3f 01 	sts	0x013F, r1
						rec_count = 0;
    3402:	10 92 40 01 	sts	0x0140, r1
						cur_state = IDLE;
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	80 93 bc 01 	sts	0x01BC, r24
				// If rec_input is 0, dump to invalid

				// Tack a trailing "1" onto rec_input to indicate end of character
				rec_input = rec_input + (0b10000000 >> rec_count);

				for(val_index = MORSE_CHAR_START; val_index <= 'Z'; val_index++)
    340c:	80 91 45 01 	lds	r24, 0x0145
    3410:	8f 5f       	subi	r24, 0xFF	; 255
    3412:	80 93 45 01 	sts	0x0145, r24
    3416:	80 91 45 01 	lds	r24, 0x0145
    341a:	8b 35       	cpi	r24, 0x5B	; 91
    341c:	80 f2       	brcs	.-96     	; 0x33be <main+0x1e58>
					}
				}

				// If no match, the character isn't valid. Toss it out and announce error
				// No match if rec_input is not reset to 0
				if(rec_input != 0)
    341e:	80 91 3f 01 	lds	r24, 0x013F
    3422:	88 23       	and	r24, r24
    3424:	89 f0       	breq	.+34     	; 0x3448 <main+0x1ee2>
				{
					// Reinitialize the current recorded character
					rec_input = 0b10000000;
    3426:	80 e8       	ldi	r24, 0x80	; 128
    3428:	80 93 3f 01 	sts	0x013F, r24
					rec_count = 0;
    342c:	10 92 40 01 	sts	0x0140, r1
					cur_state = IDLE;
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	80 93 bc 01 	sts	0x01BC, r24

					// Indicate an error
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    3436:	20 91 d0 01 	lds	r18, 0x01D0
    343a:	81 e2       	ldi	r24, 0x21	; 33
    343c:	91 e0       	ldi	r25, 0x01	; 1
    343e:	60 e9       	ldi	r22, 0x90	; 144
    3440:	71 e0       	ldi	r23, 0x01	; 1
    3442:	42 2f       	mov	r20, r18
    3444:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
				}

				cur_state = IDLE;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	80 93 bc 01 	sts	0x01BC, r24

				break;
    344e:	2f c0       	rjmp	.+94     	; 0x34ae <main+0x1f48>

			case EXIT:
				// Write the memory to EEPROM
				eeprom_update_block((const void*)&text_buffer, (void*)&ee_msg_mem_1, 40);
    3450:	88 e3       	ldi	r24, 0x38	; 56
    3452:	91 e0       	ldi	r25, 0x01	; 1
    3454:	21 e0       	ldi	r18, 0x01	; 1
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	b9 01       	movw	r22, r18
    345a:	48 e2       	ldi	r20, 0x28	; 40
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__eeupd_block_m168>

				// Unmute and reset back to default mode
				mute_end = cur_timer;
    3462:	80 91 60 01 	lds	r24, 0x0160
    3466:	90 91 61 01 	lds	r25, 0x0161
    346a:	a0 91 62 01 	lds	r26, 0x0162
    346e:	b0 91 63 01 	lds	r27, 0x0163
    3472:	80 93 c6 01 	sts	0x01C6, r24
    3476:	90 93 c7 01 	sts	0x01C7, r25
    347a:	a0 93 c8 01 	sts	0x01C8, r26
    347e:	b0 93 c9 01 	sts	0x01C9, r27
				mute_on = FALSE;
    3482:	10 92 33 01 	sts	0x0133, r1
				cur_state = IDLE;
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	80 93 bc 01 	sts	0x01BC, r24
				cur_mode = default_mode;
    348c:	80 91 65 01 	lds	r24, 0x0165
    3490:	80 93 9a 01 	sts	0x019A, r24

				// Announce successful recording
				announce("R", st_freq, wpm);
    3494:	20 91 b2 01 	lds	r18, 0x01B2
    3498:	30 91 b3 01 	lds	r19, 0x01B3
    349c:	40 91 d0 01 	lds	r20, 0x01D0
    34a0:	83 e2       	ldi	r24, 0x23	; 35
    34a2:	91 e0       	ldi	r25, 0x01	; 1
    34a4:	b9 01       	movw	r22, r18
    34a6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <announce>
				break;
    34aa:	01 c0       	rjmp	.+2      	; 0x34ae <main+0x1f48>

			default:
				break;
    34ac:	00 00       	nop
			}
			break;
    34ae:	01 c0       	rjmp	.+2      	; 0x34b2 <main+0x1f4c>

		default:
			break;
    34b0:	00 00       	nop
		} // END switch(cur_mode)

	}
    34b2:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <main+0xb8>

000034b6 <__mulsi3>:
    34b6:	62 9f       	mul	r22, r18
    34b8:	d0 01       	movw	r26, r0
    34ba:	73 9f       	mul	r23, r19
    34bc:	f0 01       	movw	r30, r0
    34be:	82 9f       	mul	r24, r18
    34c0:	e0 0d       	add	r30, r0
    34c2:	f1 1d       	adc	r31, r1
    34c4:	64 9f       	mul	r22, r20
    34c6:	e0 0d       	add	r30, r0
    34c8:	f1 1d       	adc	r31, r1
    34ca:	92 9f       	mul	r25, r18
    34cc:	f0 0d       	add	r31, r0
    34ce:	83 9f       	mul	r24, r19
    34d0:	f0 0d       	add	r31, r0
    34d2:	74 9f       	mul	r23, r20
    34d4:	f0 0d       	add	r31, r0
    34d6:	65 9f       	mul	r22, r21
    34d8:	f0 0d       	add	r31, r0
    34da:	99 27       	eor	r25, r25
    34dc:	72 9f       	mul	r23, r18
    34de:	b0 0d       	add	r27, r0
    34e0:	e1 1d       	adc	r30, r1
    34e2:	f9 1f       	adc	r31, r25
    34e4:	63 9f       	mul	r22, r19
    34e6:	b0 0d       	add	r27, r0
    34e8:	e1 1d       	adc	r30, r1
    34ea:	f9 1f       	adc	r31, r25
    34ec:	bd 01       	movw	r22, r26
    34ee:	cf 01       	movw	r24, r30
    34f0:	11 24       	eor	r1, r1
    34f2:	08 95       	ret

000034f4 <__udivmodhi4>:
    34f4:	aa 1b       	sub	r26, r26
    34f6:	bb 1b       	sub	r27, r27
    34f8:	51 e1       	ldi	r21, 0x11	; 17
    34fa:	07 c0       	rjmp	.+14     	; 0x350a <__udivmodhi4_ep>

000034fc <__udivmodhi4_loop>:
    34fc:	aa 1f       	adc	r26, r26
    34fe:	bb 1f       	adc	r27, r27
    3500:	a6 17       	cp	r26, r22
    3502:	b7 07       	cpc	r27, r23
    3504:	10 f0       	brcs	.+4      	; 0x350a <__udivmodhi4_ep>
    3506:	a6 1b       	sub	r26, r22
    3508:	b7 0b       	sbc	r27, r23

0000350a <__udivmodhi4_ep>:
    350a:	88 1f       	adc	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	5a 95       	dec	r21
    3510:	a9 f7       	brne	.-22     	; 0x34fc <__udivmodhi4_loop>
    3512:	80 95       	com	r24
    3514:	90 95       	com	r25
    3516:	bc 01       	movw	r22, r24
    3518:	cd 01       	movw	r24, r26
    351a:	08 95       	ret

0000351c <__divmodhi4>:
    351c:	97 fb       	bst	r25, 7
    351e:	09 2e       	mov	r0, r25
    3520:	07 26       	eor	r0, r23
    3522:	0a d0       	rcall	.+20     	; 0x3538 <__divmodhi4_neg1>
    3524:	77 fd       	sbrc	r23, 7
    3526:	04 d0       	rcall	.+8      	; 0x3530 <__divmodhi4_neg2>
    3528:	e5 df       	rcall	.-54     	; 0x34f4 <__udivmodhi4>
    352a:	06 d0       	rcall	.+12     	; 0x3538 <__divmodhi4_neg1>
    352c:	00 20       	and	r0, r0
    352e:	1a f4       	brpl	.+6      	; 0x3536 <__divmodhi4_exit>

00003530 <__divmodhi4_neg2>:
    3530:	70 95       	com	r23
    3532:	61 95       	neg	r22
    3534:	7f 4f       	sbci	r23, 0xFF	; 255

00003536 <__divmodhi4_exit>:
    3536:	08 95       	ret

00003538 <__divmodhi4_neg1>:
    3538:	f6 f7       	brtc	.-4      	; 0x3536 <__divmodhi4_exit>
    353a:	90 95       	com	r25
    353c:	81 95       	neg	r24
    353e:	9f 4f       	sbci	r25, 0xFF	; 255
    3540:	08 95       	ret

00003542 <__udivmodsi4>:
    3542:	a1 e2       	ldi	r26, 0x21	; 33
    3544:	1a 2e       	mov	r1, r26
    3546:	aa 1b       	sub	r26, r26
    3548:	bb 1b       	sub	r27, r27
    354a:	fd 01       	movw	r30, r26
    354c:	0d c0       	rjmp	.+26     	; 0x3568 <__udivmodsi4_ep>

0000354e <__udivmodsi4_loop>:
    354e:	aa 1f       	adc	r26, r26
    3550:	bb 1f       	adc	r27, r27
    3552:	ee 1f       	adc	r30, r30
    3554:	ff 1f       	adc	r31, r31
    3556:	a2 17       	cp	r26, r18
    3558:	b3 07       	cpc	r27, r19
    355a:	e4 07       	cpc	r30, r20
    355c:	f5 07       	cpc	r31, r21
    355e:	20 f0       	brcs	.+8      	; 0x3568 <__udivmodsi4_ep>
    3560:	a2 1b       	sub	r26, r18
    3562:	b3 0b       	sbc	r27, r19
    3564:	e4 0b       	sbc	r30, r20
    3566:	f5 0b       	sbc	r31, r21

00003568 <__udivmodsi4_ep>:
    3568:	66 1f       	adc	r22, r22
    356a:	77 1f       	adc	r23, r23
    356c:	88 1f       	adc	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	1a 94       	dec	r1
    3572:	69 f7       	brne	.-38     	; 0x354e <__udivmodsi4_loop>
    3574:	60 95       	com	r22
    3576:	70 95       	com	r23
    3578:	80 95       	com	r24
    357a:	90 95       	com	r25
    357c:	9b 01       	movw	r18, r22
    357e:	ac 01       	movw	r20, r24
    3580:	bd 01       	movw	r22, r26
    3582:	cf 01       	movw	r24, r30
    3584:	08 95       	ret

00003586 <malloc>:
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	82 30       	cpi	r24, 0x02	; 2
    358c:	91 05       	cpc	r25, r1
    358e:	10 f4       	brcc	.+4      	; 0x3594 <malloc+0xe>
    3590:	82 e0       	ldi	r24, 0x02	; 2
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	e0 91 e0 01 	lds	r30, 0x01E0
    3598:	f0 91 e1 01 	lds	r31, 0x01E1
    359c:	40 e0       	ldi	r20, 0x00	; 0
    359e:	50 e0       	ldi	r21, 0x00	; 0
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	26 c0       	rjmp	.+76     	; 0x35f2 <malloc+0x6c>
    35a6:	60 81       	ld	r22, Z
    35a8:	71 81       	ldd	r23, Z+1	; 0x01
    35aa:	68 17       	cp	r22, r24
    35ac:	79 07       	cpc	r23, r25
    35ae:	e0 f0       	brcs	.+56     	; 0x35e8 <malloc+0x62>
    35b0:	68 17       	cp	r22, r24
    35b2:	79 07       	cpc	r23, r25
    35b4:	81 f4       	brne	.+32     	; 0x35d6 <malloc+0x50>
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	21 15       	cp	r18, r1
    35bc:	31 05       	cpc	r19, r1
    35be:	31 f0       	breq	.+12     	; 0x35cc <malloc+0x46>
    35c0:	d9 01       	movw	r26, r18
    35c2:	13 96       	adiw	r26, 0x03	; 3
    35c4:	9c 93       	st	X, r25
    35c6:	8e 93       	st	-X, r24
    35c8:	12 97       	sbiw	r26, 0x02	; 2
    35ca:	2b c0       	rjmp	.+86     	; 0x3622 <malloc+0x9c>
    35cc:	90 93 e1 01 	sts	0x01E1, r25
    35d0:	80 93 e0 01 	sts	0x01E0, r24
    35d4:	26 c0       	rjmp	.+76     	; 0x3622 <malloc+0x9c>
    35d6:	41 15       	cp	r20, r1
    35d8:	51 05       	cpc	r21, r1
    35da:	19 f0       	breq	.+6      	; 0x35e2 <malloc+0x5c>
    35dc:	64 17       	cp	r22, r20
    35de:	75 07       	cpc	r23, r21
    35e0:	18 f4       	brcc	.+6      	; 0x35e8 <malloc+0x62>
    35e2:	ab 01       	movw	r20, r22
    35e4:	e9 01       	movw	r28, r18
    35e6:	df 01       	movw	r26, r30
    35e8:	9f 01       	movw	r18, r30
    35ea:	72 81       	ldd	r23, Z+2	; 0x02
    35ec:	63 81       	ldd	r22, Z+3	; 0x03
    35ee:	e7 2f       	mov	r30, r23
    35f0:	f6 2f       	mov	r31, r22
    35f2:	30 97       	sbiw	r30, 0x00	; 0
    35f4:	c1 f6       	brne	.-80     	; 0x35a6 <malloc+0x20>
    35f6:	41 15       	cp	r20, r1
    35f8:	51 05       	cpc	r21, r1
    35fa:	01 f1       	breq	.+64     	; 0x363c <malloc+0xb6>
    35fc:	48 1b       	sub	r20, r24
    35fe:	59 0b       	sbc	r21, r25
    3600:	44 30       	cpi	r20, 0x04	; 4
    3602:	51 05       	cpc	r21, r1
    3604:	80 f4       	brcc	.+32     	; 0x3626 <malloc+0xa0>
    3606:	12 96       	adiw	r26, 0x02	; 2
    3608:	8d 91       	ld	r24, X+
    360a:	9c 91       	ld	r25, X
    360c:	13 97       	sbiw	r26, 0x03	; 3
    360e:	20 97       	sbiw	r28, 0x00	; 0
    3610:	19 f0       	breq	.+6      	; 0x3618 <malloc+0x92>
    3612:	9b 83       	std	Y+3, r25	; 0x03
    3614:	8a 83       	std	Y+2, r24	; 0x02
    3616:	04 c0       	rjmp	.+8      	; 0x3620 <malloc+0x9a>
    3618:	90 93 e1 01 	sts	0x01E1, r25
    361c:	80 93 e0 01 	sts	0x01E0, r24
    3620:	fd 01       	movw	r30, r26
    3622:	32 96       	adiw	r30, 0x02	; 2
    3624:	46 c0       	rjmp	.+140    	; 0x36b2 <malloc+0x12c>
    3626:	fd 01       	movw	r30, r26
    3628:	e4 0f       	add	r30, r20
    362a:	f5 1f       	adc	r31, r21
    362c:	81 93       	st	Z+, r24
    362e:	91 93       	st	Z+, r25
    3630:	42 50       	subi	r20, 0x02	; 2
    3632:	50 40       	sbci	r21, 0x00	; 0
    3634:	11 96       	adiw	r26, 0x01	; 1
    3636:	5c 93       	st	X, r21
    3638:	4e 93       	st	-X, r20
    363a:	3b c0       	rjmp	.+118    	; 0x36b2 <malloc+0x12c>
    363c:	20 91 de 01 	lds	r18, 0x01DE
    3640:	30 91 df 01 	lds	r19, 0x01DF
    3644:	21 15       	cp	r18, r1
    3646:	31 05       	cpc	r19, r1
    3648:	41 f4       	brne	.+16     	; 0x365a <malloc+0xd4>
    364a:	20 91 2e 01 	lds	r18, 0x012E
    364e:	30 91 2f 01 	lds	r19, 0x012F
    3652:	30 93 df 01 	sts	0x01DF, r19
    3656:	20 93 de 01 	sts	0x01DE, r18
    365a:	20 91 30 01 	lds	r18, 0x0130
    365e:	30 91 31 01 	lds	r19, 0x0131
    3662:	21 15       	cp	r18, r1
    3664:	31 05       	cpc	r19, r1
    3666:	41 f4       	brne	.+16     	; 0x3678 <malloc+0xf2>
    3668:	2d b7       	in	r18, 0x3d	; 61
    366a:	3e b7       	in	r19, 0x3e	; 62
    366c:	40 91 2c 01 	lds	r20, 0x012C
    3670:	50 91 2d 01 	lds	r21, 0x012D
    3674:	24 1b       	sub	r18, r20
    3676:	35 0b       	sbc	r19, r21
    3678:	e0 91 de 01 	lds	r30, 0x01DE
    367c:	f0 91 df 01 	lds	r31, 0x01DF
    3680:	e2 17       	cp	r30, r18
    3682:	f3 07       	cpc	r31, r19
    3684:	a0 f4       	brcc	.+40     	; 0x36ae <malloc+0x128>
    3686:	2e 1b       	sub	r18, r30
    3688:	3f 0b       	sbc	r19, r31
    368a:	28 17       	cp	r18, r24
    368c:	39 07       	cpc	r19, r25
    368e:	78 f0       	brcs	.+30     	; 0x36ae <malloc+0x128>
    3690:	ac 01       	movw	r20, r24
    3692:	4e 5f       	subi	r20, 0xFE	; 254
    3694:	5f 4f       	sbci	r21, 0xFF	; 255
    3696:	24 17       	cp	r18, r20
    3698:	35 07       	cpc	r19, r21
    369a:	48 f0       	brcs	.+18     	; 0x36ae <malloc+0x128>
    369c:	4e 0f       	add	r20, r30
    369e:	5f 1f       	adc	r21, r31
    36a0:	50 93 df 01 	sts	0x01DF, r21
    36a4:	40 93 de 01 	sts	0x01DE, r20
    36a8:	81 93       	st	Z+, r24
    36aa:	91 93       	st	Z+, r25
    36ac:	02 c0       	rjmp	.+4      	; 0x36b2 <malloc+0x12c>
    36ae:	e0 e0       	ldi	r30, 0x00	; 0
    36b0:	f0 e0       	ldi	r31, 0x00	; 0
    36b2:	cf 01       	movw	r24, r30
    36b4:	df 91       	pop	r29
    36b6:	cf 91       	pop	r28
    36b8:	08 95       	ret

000036ba <free>:
    36ba:	cf 93       	push	r28
    36bc:	df 93       	push	r29
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <free+0xa>
    36c2:	91 c0       	rjmp	.+290    	; 0x37e6 <free+0x12c>
    36c4:	fc 01       	movw	r30, r24
    36c6:	32 97       	sbiw	r30, 0x02	; 2
    36c8:	13 82       	std	Z+3, r1	; 0x03
    36ca:	12 82       	std	Z+2, r1	; 0x02
    36cc:	60 91 e0 01 	lds	r22, 0x01E0
    36d0:	70 91 e1 01 	lds	r23, 0x01E1
    36d4:	61 15       	cp	r22, r1
    36d6:	71 05       	cpc	r23, r1
    36d8:	81 f4       	brne	.+32     	; 0x36fa <free+0x40>
    36da:	20 81       	ld	r18, Z
    36dc:	31 81       	ldd	r19, Z+1	; 0x01
    36de:	28 0f       	add	r18, r24
    36e0:	39 1f       	adc	r19, r25
    36e2:	80 91 de 01 	lds	r24, 0x01DE
    36e6:	90 91 df 01 	lds	r25, 0x01DF
    36ea:	82 17       	cp	r24, r18
    36ec:	93 07       	cpc	r25, r19
    36ee:	99 f5       	brne	.+102    	; 0x3756 <free+0x9c>
    36f0:	f0 93 df 01 	sts	0x01DF, r31
    36f4:	e0 93 de 01 	sts	0x01DE, r30
    36f8:	76 c0       	rjmp	.+236    	; 0x37e6 <free+0x12c>
    36fa:	db 01       	movw	r26, r22
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	02 c0       	rjmp	.+4      	; 0x3706 <free+0x4c>
    3702:	cd 01       	movw	r24, r26
    3704:	d9 01       	movw	r26, r18
    3706:	ae 17       	cp	r26, r30
    3708:	bf 07       	cpc	r27, r31
    370a:	48 f4       	brcc	.+18     	; 0x371e <free+0x64>
    370c:	12 96       	adiw	r26, 0x02	; 2
    370e:	2d 91       	ld	r18, X+
    3710:	3c 91       	ld	r19, X
    3712:	13 97       	sbiw	r26, 0x03	; 3
    3714:	21 15       	cp	r18, r1
    3716:	31 05       	cpc	r19, r1
    3718:	a1 f7       	brne	.-24     	; 0x3702 <free+0x48>
    371a:	cd 01       	movw	r24, r26
    371c:	21 c0       	rjmp	.+66     	; 0x3760 <free+0xa6>
    371e:	b3 83       	std	Z+3, r27	; 0x03
    3720:	a2 83       	std	Z+2, r26	; 0x02
    3722:	ef 01       	movw	r28, r30
    3724:	49 91       	ld	r20, Y+
    3726:	59 91       	ld	r21, Y+
    3728:	9e 01       	movw	r18, r28
    372a:	24 0f       	add	r18, r20
    372c:	35 1f       	adc	r19, r21
    372e:	a2 17       	cp	r26, r18
    3730:	b3 07       	cpc	r27, r19
    3732:	79 f4       	brne	.+30     	; 0x3752 <free+0x98>
    3734:	2d 91       	ld	r18, X+
    3736:	3c 91       	ld	r19, X
    3738:	11 97       	sbiw	r26, 0x01	; 1
    373a:	24 0f       	add	r18, r20
    373c:	35 1f       	adc	r19, r21
    373e:	2e 5f       	subi	r18, 0xFE	; 254
    3740:	3f 4f       	sbci	r19, 0xFF	; 255
    3742:	31 83       	std	Z+1, r19	; 0x01
    3744:	20 83       	st	Z, r18
    3746:	12 96       	adiw	r26, 0x02	; 2
    3748:	2d 91       	ld	r18, X+
    374a:	3c 91       	ld	r19, X
    374c:	13 97       	sbiw	r26, 0x03	; 3
    374e:	33 83       	std	Z+3, r19	; 0x03
    3750:	22 83       	std	Z+2, r18	; 0x02
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	29 f4       	brne	.+10     	; 0x3760 <free+0xa6>
    3756:	f0 93 e1 01 	sts	0x01E1, r31
    375a:	e0 93 e0 01 	sts	0x01E0, r30
    375e:	43 c0       	rjmp	.+134    	; 0x37e6 <free+0x12c>
    3760:	dc 01       	movw	r26, r24
    3762:	13 96       	adiw	r26, 0x03	; 3
    3764:	fc 93       	st	X, r31
    3766:	ee 93       	st	-X, r30
    3768:	12 97       	sbiw	r26, 0x02	; 2
    376a:	4d 91       	ld	r20, X+
    376c:	5d 91       	ld	r21, X+
    376e:	a4 0f       	add	r26, r20
    3770:	b5 1f       	adc	r27, r21
    3772:	ea 17       	cp	r30, r26
    3774:	fb 07       	cpc	r31, r27
    3776:	69 f4       	brne	.+26     	; 0x3792 <free+0xd8>
    3778:	20 81       	ld	r18, Z
    377a:	31 81       	ldd	r19, Z+1	; 0x01
    377c:	24 0f       	add	r18, r20
    377e:	35 1f       	adc	r19, r21
    3780:	2e 5f       	subi	r18, 0xFE	; 254
    3782:	3f 4f       	sbci	r19, 0xFF	; 255
    3784:	ec 01       	movw	r28, r24
    3786:	39 83       	std	Y+1, r19	; 0x01
    3788:	28 83       	st	Y, r18
    378a:	22 81       	ldd	r18, Z+2	; 0x02
    378c:	33 81       	ldd	r19, Z+3	; 0x03
    378e:	3b 83       	std	Y+3, r19	; 0x03
    3790:	2a 83       	std	Y+2, r18	; 0x02
    3792:	e0 e0       	ldi	r30, 0x00	; 0
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	02 c0       	rjmp	.+4      	; 0x379c <free+0xe2>
    3798:	fb 01       	movw	r30, r22
    379a:	bc 01       	movw	r22, r24
    379c:	db 01       	movw	r26, r22
    379e:	12 96       	adiw	r26, 0x02	; 2
    37a0:	8d 91       	ld	r24, X+
    37a2:	9c 91       	ld	r25, X
    37a4:	13 97       	sbiw	r26, 0x03	; 3
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	b9 f7       	brne	.-18     	; 0x3798 <free+0xde>
    37aa:	9b 01       	movw	r18, r22
    37ac:	2e 5f       	subi	r18, 0xFE	; 254
    37ae:	3f 4f       	sbci	r19, 0xFF	; 255
    37b0:	8d 91       	ld	r24, X+
    37b2:	9c 91       	ld	r25, X
    37b4:	11 97       	sbiw	r26, 0x01	; 1
    37b6:	82 0f       	add	r24, r18
    37b8:	93 1f       	adc	r25, r19
    37ba:	40 91 de 01 	lds	r20, 0x01DE
    37be:	50 91 df 01 	lds	r21, 0x01DF
    37c2:	48 17       	cp	r20, r24
    37c4:	59 07       	cpc	r21, r25
    37c6:	79 f4       	brne	.+30     	; 0x37e6 <free+0x12c>
    37c8:	30 97       	sbiw	r30, 0x00	; 0
    37ca:	29 f4       	brne	.+10     	; 0x37d6 <free+0x11c>
    37cc:	10 92 e1 01 	sts	0x01E1, r1
    37d0:	10 92 e0 01 	sts	0x01E0, r1
    37d4:	02 c0       	rjmp	.+4      	; 0x37da <free+0x120>
    37d6:	13 82       	std	Z+3, r1	; 0x03
    37d8:	12 82       	std	Z+2, r1	; 0x02
    37da:	22 50       	subi	r18, 0x02	; 2
    37dc:	30 40       	sbci	r19, 0x00	; 0
    37de:	30 93 df 01 	sts	0x01DF, r19
    37e2:	20 93 de 01 	sts	0x01DE, r18
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	08 95       	ret

000037ec <memcpy>:
    37ec:	fb 01       	movw	r30, r22
    37ee:	dc 01       	movw	r26, r24
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <memcpy+0xa>
    37f2:	01 90       	ld	r0, Z+
    37f4:	0d 92       	st	X+, r0
    37f6:	41 50       	subi	r20, 0x01	; 1
    37f8:	50 40       	sbci	r21, 0x00	; 0
    37fa:	d8 f7       	brcc	.-10     	; 0x37f2 <memcpy+0x6>
    37fc:	08 95       	ret

000037fe <memset>:
    37fe:	dc 01       	movw	r26, r24
    3800:	01 c0       	rjmp	.+2      	; 0x3804 <memset+0x6>
    3802:	6d 93       	st	X+, r22
    3804:	41 50       	subi	r20, 0x01	; 1
    3806:	50 40       	sbci	r21, 0x00	; 0
    3808:	e0 f7       	brcc	.-8      	; 0x3802 <memset+0x4>
    380a:	08 95       	ret

0000380c <strcat>:
    380c:	fb 01       	movw	r30, r22
    380e:	dc 01       	movw	r26, r24
    3810:	0d 90       	ld	r0, X+
    3812:	00 20       	and	r0, r0
    3814:	e9 f7       	brne	.-6      	; 0x3810 <strcat+0x4>
    3816:	11 97       	sbiw	r26, 0x01	; 1
    3818:	01 90       	ld	r0, Z+
    381a:	0d 92       	st	X+, r0
    381c:	00 20       	and	r0, r0
    381e:	e1 f7       	brne	.-8      	; 0x3818 <strcat+0xc>
    3820:	08 95       	ret

00003822 <strcpy>:
    3822:	fb 01       	movw	r30, r22
    3824:	dc 01       	movw	r26, r24
    3826:	01 90       	ld	r0, Z+
    3828:	0d 92       	st	X+, r0
    382a:	00 20       	and	r0, r0
    382c:	e1 f7       	brne	.-8      	; 0x3826 <strcpy+0x4>
    382e:	08 95       	ret

00003830 <strupr>:
    3830:	dc 01       	movw	r26, r24
    3832:	6c 91       	ld	r22, X
    3834:	61 56       	subi	r22, 0x61	; 97
    3836:	6a 31       	cpi	r22, 0x1A	; 26
    3838:	08 f0       	brcs	.+2      	; 0x383c <strupr+0xc>
    383a:	60 5e       	subi	r22, 0xE0	; 224
    383c:	6f 5b       	subi	r22, 0xBF	; 191
    383e:	6d 93       	st	X+, r22
    3840:	c1 f7       	brne	.-16     	; 0x3832 <strupr+0x2>
    3842:	08 95       	ret

00003844 <sprintf>:
    3844:	ae e0       	ldi	r26, 0x0E	; 14
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	e8 e2       	ldi	r30, 0x28	; 40
    384a:	fc e1       	ldi	r31, 0x1C	; 28
    384c:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__prologue_saves__+0x1c>
    3850:	0d 89       	ldd	r16, Y+21	; 0x15
    3852:	1e 89       	ldd	r17, Y+22	; 0x16
    3854:	86 e0       	ldi	r24, 0x06	; 6
    3856:	8c 83       	std	Y+4, r24	; 0x04
    3858:	1a 83       	std	Y+2, r17	; 0x02
    385a:	09 83       	std	Y+1, r16	; 0x01
    385c:	8f ef       	ldi	r24, 0xFF	; 255
    385e:	9f e7       	ldi	r25, 0x7F	; 127
    3860:	9e 83       	std	Y+6, r25	; 0x06
    3862:	8d 83       	std	Y+5, r24	; 0x05
    3864:	9e 01       	movw	r18, r28
    3866:	27 5e       	subi	r18, 0xE7	; 231
    3868:	3f 4f       	sbci	r19, 0xFF	; 255
    386a:	ce 01       	movw	r24, r28
    386c:	01 96       	adiw	r24, 0x01	; 1
    386e:	6f 89       	ldd	r22, Y+23	; 0x17
    3870:	78 8d       	ldd	r23, Y+24	; 0x18
    3872:	a9 01       	movw	r20, r18
    3874:	0e 94 45 1c 	call	0x388a	; 0x388a <vfprintf>
    3878:	ef 81       	ldd	r30, Y+7	; 0x07
    387a:	f8 85       	ldd	r31, Y+8	; 0x08
    387c:	e0 0f       	add	r30, r16
    387e:	f1 1f       	adc	r31, r17
    3880:	10 82       	st	Z, r1
    3882:	2e 96       	adiw	r28, 0x0e	; 14
    3884:	e4 e0       	ldi	r30, 0x04	; 4
    3886:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <__epilogue_restores__+0x1c>

0000388a <vfprintf>:
    388a:	ac e0       	ldi	r26, 0x0C	; 12
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	eb e4       	ldi	r30, 0x4B	; 75
    3890:	fc e1       	ldi	r31, 0x1C	; 28
    3892:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__>
    3896:	6c 01       	movw	r12, r24
    3898:	1b 01       	movw	r2, r22
    389a:	8a 01       	movw	r16, r20
    389c:	fc 01       	movw	r30, r24
    389e:	17 82       	std	Z+7, r1	; 0x07
    38a0:	16 82       	std	Z+6, r1	; 0x06
    38a2:	83 81       	ldd	r24, Z+3	; 0x03
    38a4:	81 ff       	sbrs	r24, 1
    38a6:	d1 c1       	rjmp	.+930    	; 0x3c4a <vfprintf+0x3c0>
    38a8:	2e 01       	movw	r4, r28
    38aa:	08 94       	sec
    38ac:	41 1c       	adc	r4, r1
    38ae:	51 1c       	adc	r5, r1
    38b0:	f6 01       	movw	r30, r12
    38b2:	93 81       	ldd	r25, Z+3	; 0x03
    38b4:	f1 01       	movw	r30, r2
    38b6:	93 fd       	sbrc	r25, 3
    38b8:	85 91       	lpm	r24, Z+
    38ba:	93 ff       	sbrs	r25, 3
    38bc:	81 91       	ld	r24, Z+
    38be:	1f 01       	movw	r2, r30
    38c0:	88 23       	and	r24, r24
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <vfprintf+0x3c>
    38c4:	be c1       	rjmp	.+892    	; 0x3c42 <vfprintf+0x3b8>
    38c6:	85 32       	cpi	r24, 0x25	; 37
    38c8:	39 f4       	brne	.+14     	; 0x38d8 <vfprintf+0x4e>
    38ca:	93 fd       	sbrc	r25, 3
    38cc:	85 91       	lpm	r24, Z+
    38ce:	93 ff       	sbrs	r25, 3
    38d0:	81 91       	ld	r24, Z+
    38d2:	1f 01       	movw	r2, r30
    38d4:	85 32       	cpi	r24, 0x25	; 37
    38d6:	29 f4       	brne	.+10     	; 0x38e2 <vfprintf+0x58>
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	b6 01       	movw	r22, r12
    38dc:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    38e0:	e7 cf       	rjmp	.-50     	; 0x38b0 <vfprintf+0x26>
    38e2:	ee 24       	eor	r14, r14
    38e4:	ff 24       	eor	r15, r15
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	20 32       	cpi	r18, 0x20	; 32
    38ea:	b0 f4       	brcc	.+44     	; 0x3918 <vfprintf+0x8e>
    38ec:	8b 32       	cpi	r24, 0x2B	; 43
    38ee:	69 f0       	breq	.+26     	; 0x390a <vfprintf+0x80>
    38f0:	8c 32       	cpi	r24, 0x2C	; 44
    38f2:	28 f4       	brcc	.+10     	; 0x38fe <vfprintf+0x74>
    38f4:	80 32       	cpi	r24, 0x20	; 32
    38f6:	51 f0       	breq	.+20     	; 0x390c <vfprintf+0x82>
    38f8:	83 32       	cpi	r24, 0x23	; 35
    38fa:	71 f4       	brne	.+28     	; 0x3918 <vfprintf+0x8e>
    38fc:	0b c0       	rjmp	.+22     	; 0x3914 <vfprintf+0x8a>
    38fe:	8d 32       	cpi	r24, 0x2D	; 45
    3900:	39 f0       	breq	.+14     	; 0x3910 <vfprintf+0x86>
    3902:	80 33       	cpi	r24, 0x30	; 48
    3904:	49 f4       	brne	.+18     	; 0x3918 <vfprintf+0x8e>
    3906:	21 60       	ori	r18, 0x01	; 1
    3908:	2c c0       	rjmp	.+88     	; 0x3962 <vfprintf+0xd8>
    390a:	22 60       	ori	r18, 0x02	; 2
    390c:	24 60       	ori	r18, 0x04	; 4
    390e:	29 c0       	rjmp	.+82     	; 0x3962 <vfprintf+0xd8>
    3910:	28 60       	ori	r18, 0x08	; 8
    3912:	27 c0       	rjmp	.+78     	; 0x3962 <vfprintf+0xd8>
    3914:	20 61       	ori	r18, 0x10	; 16
    3916:	25 c0       	rjmp	.+74     	; 0x3962 <vfprintf+0xd8>
    3918:	27 fd       	sbrc	r18, 7
    391a:	2c c0       	rjmp	.+88     	; 0x3974 <vfprintf+0xea>
    391c:	38 2f       	mov	r19, r24
    391e:	30 53       	subi	r19, 0x30	; 48
    3920:	3a 30       	cpi	r19, 0x0A	; 10
    3922:	98 f4       	brcc	.+38     	; 0x394a <vfprintf+0xc0>
    3924:	26 ff       	sbrs	r18, 6
    3926:	08 c0       	rjmp	.+16     	; 0x3938 <vfprintf+0xae>
    3928:	8e 2d       	mov	r24, r14
    392a:	88 0f       	add	r24, r24
    392c:	e8 2e       	mov	r14, r24
    392e:	ee 0c       	add	r14, r14
    3930:	ee 0c       	add	r14, r14
    3932:	e8 0e       	add	r14, r24
    3934:	e3 0e       	add	r14, r19
    3936:	15 c0       	rjmp	.+42     	; 0x3962 <vfprintf+0xd8>
    3938:	8f 2d       	mov	r24, r15
    393a:	88 0f       	add	r24, r24
    393c:	f8 2e       	mov	r15, r24
    393e:	ff 0c       	add	r15, r15
    3940:	ff 0c       	add	r15, r15
    3942:	f8 0e       	add	r15, r24
    3944:	f3 0e       	add	r15, r19
    3946:	20 62       	ori	r18, 0x20	; 32
    3948:	0c c0       	rjmp	.+24     	; 0x3962 <vfprintf+0xd8>
    394a:	8e 32       	cpi	r24, 0x2E	; 46
    394c:	21 f4       	brne	.+8      	; 0x3956 <vfprintf+0xcc>
    394e:	26 fd       	sbrc	r18, 6
    3950:	78 c1       	rjmp	.+752    	; 0x3c42 <vfprintf+0x3b8>
    3952:	20 64       	ori	r18, 0x40	; 64
    3954:	06 c0       	rjmp	.+12     	; 0x3962 <vfprintf+0xd8>
    3956:	8c 36       	cpi	r24, 0x6C	; 108
    3958:	11 f4       	brne	.+4      	; 0x395e <vfprintf+0xd4>
    395a:	20 68       	ori	r18, 0x80	; 128
    395c:	02 c0       	rjmp	.+4      	; 0x3962 <vfprintf+0xd8>
    395e:	88 36       	cpi	r24, 0x68	; 104
    3960:	49 f4       	brne	.+18     	; 0x3974 <vfprintf+0xea>
    3962:	f1 01       	movw	r30, r2
    3964:	93 fd       	sbrc	r25, 3
    3966:	85 91       	lpm	r24, Z+
    3968:	93 ff       	sbrs	r25, 3
    396a:	81 91       	ld	r24, Z+
    396c:	1f 01       	movw	r2, r30
    396e:	88 23       	and	r24, r24
    3970:	09 f0       	breq	.+2      	; 0x3974 <vfprintf+0xea>
    3972:	ba cf       	rjmp	.-140    	; 0x38e8 <vfprintf+0x5e>
    3974:	98 2f       	mov	r25, r24
    3976:	95 54       	subi	r25, 0x45	; 69
    3978:	93 30       	cpi	r25, 0x03	; 3
    397a:	18 f0       	brcs	.+6      	; 0x3982 <vfprintf+0xf8>
    397c:	90 52       	subi	r25, 0x20	; 32
    397e:	93 30       	cpi	r25, 0x03	; 3
    3980:	28 f4       	brcc	.+10     	; 0x398c <vfprintf+0x102>
    3982:	0c 5f       	subi	r16, 0xFC	; 252
    3984:	1f 4f       	sbci	r17, 0xFF	; 255
    3986:	ff e3       	ldi	r31, 0x3F	; 63
    3988:	f9 83       	std	Y+1, r31	; 0x01
    398a:	0d c0       	rjmp	.+26     	; 0x39a6 <vfprintf+0x11c>
    398c:	83 36       	cpi	r24, 0x63	; 99
    398e:	31 f0       	breq	.+12     	; 0x399c <vfprintf+0x112>
    3990:	83 37       	cpi	r24, 0x73	; 115
    3992:	71 f0       	breq	.+28     	; 0x39b0 <vfprintf+0x126>
    3994:	83 35       	cpi	r24, 0x53	; 83
    3996:	09 f0       	breq	.+2      	; 0x399a <vfprintf+0x110>
    3998:	60 c0       	rjmp	.+192    	; 0x3a5a <vfprintf+0x1d0>
    399a:	22 c0       	rjmp	.+68     	; 0x39e0 <vfprintf+0x156>
    399c:	f8 01       	movw	r30, r16
    399e:	80 81       	ld	r24, Z
    39a0:	89 83       	std	Y+1, r24	; 0x01
    39a2:	0e 5f       	subi	r16, 0xFE	; 254
    39a4:	1f 4f       	sbci	r17, 0xFF	; 255
    39a6:	42 01       	movw	r8, r4
    39a8:	71 e0       	ldi	r23, 0x01	; 1
    39aa:	a7 2e       	mov	r10, r23
    39ac:	b1 2c       	mov	r11, r1
    39ae:	16 c0       	rjmp	.+44     	; 0x39dc <vfprintf+0x152>
    39b0:	62 e0       	ldi	r22, 0x02	; 2
    39b2:	66 2e       	mov	r6, r22
    39b4:	71 2c       	mov	r7, r1
    39b6:	60 0e       	add	r6, r16
    39b8:	71 1e       	adc	r7, r17
    39ba:	f8 01       	movw	r30, r16
    39bc:	80 80       	ld	r8, Z
    39be:	91 80       	ldd	r9, Z+1	; 0x01
    39c0:	26 ff       	sbrs	r18, 6
    39c2:	03 c0       	rjmp	.+6      	; 0x39ca <vfprintf+0x140>
    39c4:	6e 2d       	mov	r22, r14
    39c6:	70 e0       	ldi	r23, 0x00	; 0
    39c8:	02 c0       	rjmp	.+4      	; 0x39ce <vfprintf+0x144>
    39ca:	6f ef       	ldi	r22, 0xFF	; 255
    39cc:	7f ef       	ldi	r23, 0xFF	; 255
    39ce:	c4 01       	movw	r24, r8
    39d0:	2c 87       	std	Y+12, r18	; 0x0c
    39d2:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <strnlen>
    39d6:	5c 01       	movw	r10, r24
    39d8:	83 01       	movw	r16, r6
    39da:	2c 85       	ldd	r18, Y+12	; 0x0c
    39dc:	2f 77       	andi	r18, 0x7F	; 127
    39de:	17 c0       	rjmp	.+46     	; 0x3a0e <vfprintf+0x184>
    39e0:	52 e0       	ldi	r21, 0x02	; 2
    39e2:	65 2e       	mov	r6, r21
    39e4:	71 2c       	mov	r7, r1
    39e6:	60 0e       	add	r6, r16
    39e8:	71 1e       	adc	r7, r17
    39ea:	f8 01       	movw	r30, r16
    39ec:	80 80       	ld	r8, Z
    39ee:	91 80       	ldd	r9, Z+1	; 0x01
    39f0:	26 ff       	sbrs	r18, 6
    39f2:	03 c0       	rjmp	.+6      	; 0x39fa <vfprintf+0x170>
    39f4:	6e 2d       	mov	r22, r14
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	02 c0       	rjmp	.+4      	; 0x39fe <vfprintf+0x174>
    39fa:	6f ef       	ldi	r22, 0xFF	; 255
    39fc:	7f ef       	ldi	r23, 0xFF	; 255
    39fe:	c4 01       	movw	r24, r8
    3a00:	2c 87       	std	Y+12, r18	; 0x0c
    3a02:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <strnlen_P>
    3a06:	5c 01       	movw	r10, r24
    3a08:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a0a:	20 68       	ori	r18, 0x80	; 128
    3a0c:	83 01       	movw	r16, r6
    3a0e:	23 fd       	sbrc	r18, 3
    3a10:	20 c0       	rjmp	.+64     	; 0x3a52 <vfprintf+0x1c8>
    3a12:	08 c0       	rjmp	.+16     	; 0x3a24 <vfprintf+0x19a>
    3a14:	80 e2       	ldi	r24, 0x20	; 32
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	b6 01       	movw	r22, r12
    3a1a:	2c 87       	std	Y+12, r18	; 0x0c
    3a1c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    3a20:	fa 94       	dec	r15
    3a22:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a24:	8f 2d       	mov	r24, r15
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	a8 16       	cp	r10, r24
    3a2a:	b9 06       	cpc	r11, r25
    3a2c:	98 f3       	brcs	.-26     	; 0x3a14 <vfprintf+0x18a>
    3a2e:	11 c0       	rjmp	.+34     	; 0x3a52 <vfprintf+0x1c8>
    3a30:	f4 01       	movw	r30, r8
    3a32:	27 fd       	sbrc	r18, 7
    3a34:	85 91       	lpm	r24, Z+
    3a36:	27 ff       	sbrs	r18, 7
    3a38:	81 91       	ld	r24, Z+
    3a3a:	4f 01       	movw	r8, r30
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	b6 01       	movw	r22, r12
    3a40:	2c 87       	std	Y+12, r18	; 0x0c
    3a42:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    3a46:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a48:	f1 10       	cpse	r15, r1
    3a4a:	fa 94       	dec	r15
    3a4c:	08 94       	sec
    3a4e:	a1 08       	sbc	r10, r1
    3a50:	b1 08       	sbc	r11, r1
    3a52:	a1 14       	cp	r10, r1
    3a54:	b1 04       	cpc	r11, r1
    3a56:	61 f7       	brne	.-40     	; 0x3a30 <vfprintf+0x1a6>
    3a58:	f1 c0       	rjmp	.+482    	; 0x3c3c <vfprintf+0x3b2>
    3a5a:	84 36       	cpi	r24, 0x64	; 100
    3a5c:	11 f0       	breq	.+4      	; 0x3a62 <vfprintf+0x1d8>
    3a5e:	89 36       	cpi	r24, 0x69	; 105
    3a60:	49 f5       	brne	.+82     	; 0x3ab4 <vfprintf+0x22a>
    3a62:	27 ff       	sbrs	r18, 7
    3a64:	08 c0       	rjmp	.+16     	; 0x3a76 <vfprintf+0x1ec>
    3a66:	f8 01       	movw	r30, r16
    3a68:	60 81       	ld	r22, Z
    3a6a:	71 81       	ldd	r23, Z+1	; 0x01
    3a6c:	82 81       	ldd	r24, Z+2	; 0x02
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	0c 5f       	subi	r16, 0xFC	; 252
    3a72:	1f 4f       	sbci	r17, 0xFF	; 255
    3a74:	09 c0       	rjmp	.+18     	; 0x3a88 <vfprintf+0x1fe>
    3a76:	f8 01       	movw	r30, r16
    3a78:	60 81       	ld	r22, Z
    3a7a:	71 81       	ldd	r23, Z+1	; 0x01
    3a7c:	88 27       	eor	r24, r24
    3a7e:	77 fd       	sbrc	r23, 7
    3a80:	80 95       	com	r24
    3a82:	98 2f       	mov	r25, r24
    3a84:	0e 5f       	subi	r16, 0xFE	; 254
    3a86:	1f 4f       	sbci	r17, 0xFF	; 255
    3a88:	4f e6       	ldi	r20, 0x6F	; 111
    3a8a:	b4 2e       	mov	r11, r20
    3a8c:	b2 22       	and	r11, r18
    3a8e:	97 ff       	sbrs	r25, 7
    3a90:	09 c0       	rjmp	.+18     	; 0x3aa4 <vfprintf+0x21a>
    3a92:	90 95       	com	r25
    3a94:	80 95       	com	r24
    3a96:	70 95       	com	r23
    3a98:	61 95       	neg	r22
    3a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	f0 e8       	ldi	r31, 0x80	; 128
    3aa2:	bf 2a       	or	r11, r31
    3aa4:	a2 01       	movw	r20, r4
    3aa6:	2a e0       	ldi	r18, 0x0A	; 10
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__ultoa_invert>
    3aae:	78 2e       	mov	r7, r24
    3ab0:	74 18       	sub	r7, r4
    3ab2:	45 c0       	rjmp	.+138    	; 0x3b3e <vfprintf+0x2b4>
    3ab4:	85 37       	cpi	r24, 0x75	; 117
    3ab6:	31 f4       	brne	.+12     	; 0x3ac4 <vfprintf+0x23a>
    3ab8:	3f ee       	ldi	r19, 0xEF	; 239
    3aba:	b3 2e       	mov	r11, r19
    3abc:	b2 22       	and	r11, r18
    3abe:	2a e0       	ldi	r18, 0x0A	; 10
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	25 c0       	rjmp	.+74     	; 0x3b0e <vfprintf+0x284>
    3ac4:	99 ef       	ldi	r25, 0xF9	; 249
    3ac6:	b9 2e       	mov	r11, r25
    3ac8:	b2 22       	and	r11, r18
    3aca:	8f 36       	cpi	r24, 0x6F	; 111
    3acc:	c1 f0       	breq	.+48     	; 0x3afe <vfprintf+0x274>
    3ace:	80 37       	cpi	r24, 0x70	; 112
    3ad0:	20 f4       	brcc	.+8      	; 0x3ada <vfprintf+0x250>
    3ad2:	88 35       	cpi	r24, 0x58	; 88
    3ad4:	09 f0       	breq	.+2      	; 0x3ad8 <vfprintf+0x24e>
    3ad6:	b5 c0       	rjmp	.+362    	; 0x3c42 <vfprintf+0x3b8>
    3ad8:	0d c0       	rjmp	.+26     	; 0x3af4 <vfprintf+0x26a>
    3ada:	80 37       	cpi	r24, 0x70	; 112
    3adc:	21 f0       	breq	.+8      	; 0x3ae6 <vfprintf+0x25c>
    3ade:	88 37       	cpi	r24, 0x78	; 120
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <vfprintf+0x25a>
    3ae2:	af c0       	rjmp	.+350    	; 0x3c42 <vfprintf+0x3b8>
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <vfprintf+0x260>
    3ae6:	20 e1       	ldi	r18, 0x10	; 16
    3ae8:	b2 2a       	or	r11, r18
    3aea:	b4 fe       	sbrs	r11, 4
    3aec:	0b c0       	rjmp	.+22     	; 0x3b04 <vfprintf+0x27a>
    3aee:	84 e0       	ldi	r24, 0x04	; 4
    3af0:	b8 2a       	or	r11, r24
    3af2:	08 c0       	rjmp	.+16     	; 0x3b04 <vfprintf+0x27a>
    3af4:	b4 fe       	sbrs	r11, 4
    3af6:	09 c0       	rjmp	.+18     	; 0x3b0a <vfprintf+0x280>
    3af8:	e6 e0       	ldi	r30, 0x06	; 6
    3afa:	be 2a       	or	r11, r30
    3afc:	06 c0       	rjmp	.+12     	; 0x3b0a <vfprintf+0x280>
    3afe:	28 e0       	ldi	r18, 0x08	; 8
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	05 c0       	rjmp	.+10     	; 0x3b0e <vfprintf+0x284>
    3b04:	20 e1       	ldi	r18, 0x10	; 16
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	02 c0       	rjmp	.+4      	; 0x3b0e <vfprintf+0x284>
    3b0a:	20 e1       	ldi	r18, 0x10	; 16
    3b0c:	32 e0       	ldi	r19, 0x02	; 2
    3b0e:	b7 fe       	sbrs	r11, 7
    3b10:	08 c0       	rjmp	.+16     	; 0x3b22 <vfprintf+0x298>
    3b12:	f8 01       	movw	r30, r16
    3b14:	60 81       	ld	r22, Z
    3b16:	71 81       	ldd	r23, Z+1	; 0x01
    3b18:	82 81       	ldd	r24, Z+2	; 0x02
    3b1a:	93 81       	ldd	r25, Z+3	; 0x03
    3b1c:	0c 5f       	subi	r16, 0xFC	; 252
    3b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b20:	07 c0       	rjmp	.+14     	; 0x3b30 <vfprintf+0x2a6>
    3b22:	f8 01       	movw	r30, r16
    3b24:	60 81       	ld	r22, Z
    3b26:	71 81       	ldd	r23, Z+1	; 0x01
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 5f       	subi	r16, 0xFE	; 254
    3b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b30:	a2 01       	movw	r20, r4
    3b32:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__ultoa_invert>
    3b36:	78 2e       	mov	r7, r24
    3b38:	74 18       	sub	r7, r4
    3b3a:	ff e7       	ldi	r31, 0x7F	; 127
    3b3c:	bf 22       	and	r11, r31
    3b3e:	b6 fe       	sbrs	r11, 6
    3b40:	0b c0       	rjmp	.+22     	; 0x3b58 <vfprintf+0x2ce>
    3b42:	2e ef       	ldi	r18, 0xFE	; 254
    3b44:	b2 22       	and	r11, r18
    3b46:	7e 14       	cp	r7, r14
    3b48:	38 f4       	brcc	.+14     	; 0x3b58 <vfprintf+0x2ce>
    3b4a:	b4 fe       	sbrs	r11, 4
    3b4c:	07 c0       	rjmp	.+14     	; 0x3b5c <vfprintf+0x2d2>
    3b4e:	b2 fc       	sbrc	r11, 2
    3b50:	05 c0       	rjmp	.+10     	; 0x3b5c <vfprintf+0x2d2>
    3b52:	8f ee       	ldi	r24, 0xEF	; 239
    3b54:	b8 22       	and	r11, r24
    3b56:	02 c0       	rjmp	.+4      	; 0x3b5c <vfprintf+0x2d2>
    3b58:	a7 2c       	mov	r10, r7
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <vfprintf+0x2d4>
    3b5c:	ae 2c       	mov	r10, r14
    3b5e:	8b 2d       	mov	r24, r11
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	b4 fe       	sbrs	r11, 4
    3b64:	0d c0       	rjmp	.+26     	; 0x3b80 <vfprintf+0x2f6>
    3b66:	fe 01       	movw	r30, r28
    3b68:	e7 0d       	add	r30, r7
    3b6a:	f1 1d       	adc	r31, r1
    3b6c:	20 81       	ld	r18, Z
    3b6e:	20 33       	cpi	r18, 0x30	; 48
    3b70:	19 f4       	brne	.+6      	; 0x3b78 <vfprintf+0x2ee>
    3b72:	e9 ee       	ldi	r30, 0xE9	; 233
    3b74:	be 22       	and	r11, r30
    3b76:	09 c0       	rjmp	.+18     	; 0x3b8a <vfprintf+0x300>
    3b78:	a3 94       	inc	r10
    3b7a:	b2 fe       	sbrs	r11, 2
    3b7c:	06 c0       	rjmp	.+12     	; 0x3b8a <vfprintf+0x300>
    3b7e:	04 c0       	rjmp	.+8      	; 0x3b88 <vfprintf+0x2fe>
    3b80:	86 78       	andi	r24, 0x86	; 134
    3b82:	90 70       	andi	r25, 0x00	; 0
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	09 f0       	breq	.+2      	; 0x3b8a <vfprintf+0x300>
    3b88:	a3 94       	inc	r10
    3b8a:	8b 2c       	mov	r8, r11
    3b8c:	99 24       	eor	r9, r9
    3b8e:	b3 fc       	sbrc	r11, 3
    3b90:	14 c0       	rjmp	.+40     	; 0x3bba <vfprintf+0x330>
    3b92:	b0 fe       	sbrs	r11, 0
    3b94:	0f c0       	rjmp	.+30     	; 0x3bb4 <vfprintf+0x32a>
    3b96:	af 14       	cp	r10, r15
    3b98:	28 f4       	brcc	.+10     	; 0x3ba4 <vfprintf+0x31a>
    3b9a:	e7 2c       	mov	r14, r7
    3b9c:	ef 0c       	add	r14, r15
    3b9e:	ea 18       	sub	r14, r10
    3ba0:	af 2c       	mov	r10, r15
    3ba2:	08 c0       	rjmp	.+16     	; 0x3bb4 <vfprintf+0x32a>
    3ba4:	e7 2c       	mov	r14, r7
    3ba6:	06 c0       	rjmp	.+12     	; 0x3bb4 <vfprintf+0x32a>
    3ba8:	80 e2       	ldi	r24, 0x20	; 32
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	b6 01       	movw	r22, r12
    3bae:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    3bb2:	a3 94       	inc	r10
    3bb4:	af 14       	cp	r10, r15
    3bb6:	c0 f3       	brcs	.-16     	; 0x3ba8 <vfprintf+0x31e>
    3bb8:	04 c0       	rjmp	.+8      	; 0x3bc2 <vfprintf+0x338>
    3bba:	af 14       	cp	r10, r15
    3bbc:	10 f4       	brcc	.+4      	; 0x3bc2 <vfprintf+0x338>
    3bbe:	fa 18       	sub	r15, r10
    3bc0:	01 c0       	rjmp	.+2      	; 0x3bc4 <vfprintf+0x33a>
    3bc2:	ff 24       	eor	r15, r15
    3bc4:	84 fe       	sbrs	r8, 4
    3bc6:	0f c0       	rjmp	.+30     	; 0x3be6 <vfprintf+0x35c>
    3bc8:	80 e3       	ldi	r24, 0x30	; 48
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	b6 01       	movw	r22, r12
    3bce:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    3bd2:	82 fe       	sbrs	r8, 2
    3bd4:	1f c0       	rjmp	.+62     	; 0x3c14 <vfprintf+0x38a>
    3bd6:	81 fe       	sbrs	r8, 1
    3bd8:	03 c0       	rjmp	.+6      	; 0x3be0 <vfprintf+0x356>
    3bda:	88 e5       	ldi	r24, 0x58	; 88
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	10 c0       	rjmp	.+32     	; 0x3c00 <vfprintf+0x376>
    3be0:	88 e7       	ldi	r24, 0x78	; 120
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0d c0       	rjmp	.+26     	; 0x3c00 <vfprintf+0x376>
    3be6:	c4 01       	movw	r24, r8
    3be8:	86 78       	andi	r24, 0x86	; 134
    3bea:	90 70       	andi	r25, 0x00	; 0
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	91 f0       	breq	.+36     	; 0x3c14 <vfprintf+0x38a>
    3bf0:	81 fc       	sbrc	r8, 1
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <vfprintf+0x36e>
    3bf4:	80 e2       	ldi	r24, 0x20	; 32
    3bf6:	01 c0       	rjmp	.+2      	; 0x3bfa <vfprintf+0x370>
    3bf8:	8b e2       	ldi	r24, 0x2B	; 43
    3bfa:	b7 fc       	sbrc	r11, 7
    3bfc:	8d e2       	ldi	r24, 0x2D	; 45
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	b6 01       	movw	r22, r12
    3c02:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    3c06:	06 c0       	rjmp	.+12     	; 0x3c14 <vfprintf+0x38a>
    3c08:	80 e3       	ldi	r24, 0x30	; 48
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	b6 01       	movw	r22, r12
    3c0e:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    3c12:	ea 94       	dec	r14
    3c14:	7e 14       	cp	r7, r14
    3c16:	c0 f3       	brcs	.-16     	; 0x3c08 <vfprintf+0x37e>
    3c18:	7a 94       	dec	r7
    3c1a:	f2 01       	movw	r30, r4
    3c1c:	e7 0d       	add	r30, r7
    3c1e:	f1 1d       	adc	r31, r1
    3c20:	80 81       	ld	r24, Z
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	b6 01       	movw	r22, r12
    3c26:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    3c2a:	77 20       	and	r7, r7
    3c2c:	a9 f7       	brne	.-22     	; 0x3c18 <vfprintf+0x38e>
    3c2e:	06 c0       	rjmp	.+12     	; 0x3c3c <vfprintf+0x3b2>
    3c30:	80 e2       	ldi	r24, 0x20	; 32
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	b6 01       	movw	r22, r12
    3c36:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <fputc>
    3c3a:	fa 94       	dec	r15
    3c3c:	ff 20       	and	r15, r15
    3c3e:	c1 f7       	brne	.-16     	; 0x3c30 <vfprintf+0x3a6>
    3c40:	37 ce       	rjmp	.-914    	; 0x38b0 <vfprintf+0x26>
    3c42:	f6 01       	movw	r30, r12
    3c44:	26 81       	ldd	r18, Z+6	; 0x06
    3c46:	37 81       	ldd	r19, Z+7	; 0x07
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <vfprintf+0x3c4>
    3c4a:	2f ef       	ldi	r18, 0xFF	; 255
    3c4c:	3f ef       	ldi	r19, 0xFF	; 255
    3c4e:	c9 01       	movw	r24, r18
    3c50:	2c 96       	adiw	r28, 0x0c	; 12
    3c52:	e2 e1       	ldi	r30, 0x12	; 18
    3c54:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__>

00003c58 <__eerd_block_m168>:
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22

00003c5c <__eerd_blraw_m168>:
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	f9 99       	sbic	0x1f, 1	; 31
    3c60:	fe cf       	rjmp	.-4      	; 0x3c5e <__eerd_blraw_m168+0x2>
    3c62:	06 c0       	rjmp	.+12     	; 0x3c70 <__eerd_blraw_m168+0x14>
    3c64:	f2 bd       	out	0x22, r31	; 34
    3c66:	e1 bd       	out	0x21, r30	; 33
    3c68:	f8 9a       	sbi	0x1f, 0	; 31
    3c6a:	31 96       	adiw	r30, 0x01	; 1
    3c6c:	00 b4       	in	r0, 0x20	; 32
    3c6e:	0d 92       	st	X+, r0
    3c70:	41 50       	subi	r20, 0x01	; 1
    3c72:	50 40       	sbci	r21, 0x00	; 0
    3c74:	b8 f7       	brcc	.-18     	; 0x3c64 <__eerd_blraw_m168+0x8>
    3c76:	08 95       	ret

00003c78 <__eerd_byte_m168>:
    3c78:	f9 99       	sbic	0x1f, 1	; 31
    3c7a:	fe cf       	rjmp	.-4      	; 0x3c78 <__eerd_byte_m168>
    3c7c:	92 bd       	out	0x22, r25	; 34
    3c7e:	81 bd       	out	0x21, r24	; 33
    3c80:	f8 9a       	sbi	0x1f, 0	; 31
    3c82:	99 27       	eor	r25, r25
    3c84:	80 b5       	in	r24, 0x20	; 32
    3c86:	08 95       	ret

00003c88 <__eeupd_block_m168>:
    3c88:	dc 01       	movw	r26, r24
    3c8a:	a4 0f       	add	r26, r20
    3c8c:	b5 1f       	adc	r27, r21
    3c8e:	41 50       	subi	r20, 0x01	; 1
    3c90:	50 40       	sbci	r21, 0x00	; 0
    3c92:	48 f0       	brcs	.+18     	; 0x3ca6 <__eeupd_block_m168+0x1e>
    3c94:	cb 01       	movw	r24, r22
    3c96:	84 0f       	add	r24, r20
    3c98:	95 1f       	adc	r25, r21
    3c9a:	2e 91       	ld	r18, -X
    3c9c:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__eeupd_r18_m168>
    3ca0:	41 50       	subi	r20, 0x01	; 1
    3ca2:	50 40       	sbci	r21, 0x00	; 0
    3ca4:	d0 f7       	brcc	.-12     	; 0x3c9a <__eeupd_block_m168+0x12>
    3ca6:	08 95       	ret

00003ca8 <__eeupd_byte_m168>:
    3ca8:	26 2f       	mov	r18, r22

00003caa <__eeupd_r18_m168>:
    3caa:	f9 99       	sbic	0x1f, 1	; 31
    3cac:	fe cf       	rjmp	.-4      	; 0x3caa <__eeupd_r18_m168>
    3cae:	92 bd       	out	0x22, r25	; 34
    3cb0:	81 bd       	out	0x21, r24	; 33
    3cb2:	f8 9a       	sbi	0x1f, 0	; 31
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	00 b4       	in	r0, 0x20	; 32
    3cb8:	02 16       	cp	r0, r18
    3cba:	39 f0       	breq	.+14     	; 0x3cca <__eeupd_r18_m168+0x20>
    3cbc:	1f ba       	out	0x1f, r1	; 31
    3cbe:	20 bd       	out	0x20, r18	; 32
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	fa 9a       	sbi	0x1f, 2	; 31
    3cc6:	f9 9a       	sbi	0x1f, 1	; 31
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	08 95       	ret

00003ccc <__eewr_byte_m168>:
    3ccc:	26 2f       	mov	r18, r22

00003cce <__eewr_r18_m168>:
    3cce:	f9 99       	sbic	0x1f, 1	; 31
    3cd0:	fe cf       	rjmp	.-4      	; 0x3cce <__eewr_r18_m168>
    3cd2:	1f ba       	out	0x1f, r1	; 31
    3cd4:	92 bd       	out	0x22, r25	; 34
    3cd6:	81 bd       	out	0x21, r24	; 33
    3cd8:	20 bd       	out	0x20, r18	; 32
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	fa 9a       	sbi	0x1f, 2	; 31
    3ce0:	f9 9a       	sbi	0x1f, 1	; 31
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	01 96       	adiw	r24, 0x01	; 1
    3ce6:	08 95       	ret

00003ce8 <strnlen_P>:
    3ce8:	fc 01       	movw	r30, r24
    3cea:	05 90       	lpm	r0, Z+
    3cec:	61 50       	subi	r22, 0x01	; 1
    3cee:	70 40       	sbci	r23, 0x00	; 0
    3cf0:	01 10       	cpse	r0, r1
    3cf2:	d8 f7       	brcc	.-10     	; 0x3cea <strnlen_P+0x2>
    3cf4:	80 95       	com	r24
    3cf6:	90 95       	com	r25
    3cf8:	8e 0f       	add	r24, r30
    3cfa:	9f 1f       	adc	r25, r31
    3cfc:	08 95       	ret

00003cfe <strnlen>:
    3cfe:	fc 01       	movw	r30, r24
    3d00:	61 50       	subi	r22, 0x01	; 1
    3d02:	70 40       	sbci	r23, 0x00	; 0
    3d04:	01 90       	ld	r0, Z+
    3d06:	01 10       	cpse	r0, r1
    3d08:	d8 f7       	brcc	.-10     	; 0x3d00 <strnlen+0x2>
    3d0a:	80 95       	com	r24
    3d0c:	90 95       	com	r25
    3d0e:	8e 0f       	add	r24, r30
    3d10:	9f 1f       	adc	r25, r31
    3d12:	08 95       	ret

00003d14 <fputc>:
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
    3d1c:	8c 01       	movw	r16, r24
    3d1e:	eb 01       	movw	r28, r22
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	81 ff       	sbrs	r24, 1
    3d24:	1b c0       	rjmp	.+54     	; 0x3d5c <fputc+0x48>
    3d26:	82 ff       	sbrs	r24, 2
    3d28:	0d c0       	rjmp	.+26     	; 0x3d44 <fputc+0x30>
    3d2a:	2e 81       	ldd	r18, Y+6	; 0x06
    3d2c:	3f 81       	ldd	r19, Y+7	; 0x07
    3d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d30:	9d 81       	ldd	r25, Y+5	; 0x05
    3d32:	28 17       	cp	r18, r24
    3d34:	39 07       	cpc	r19, r25
    3d36:	64 f4       	brge	.+24     	; 0x3d50 <fputc+0x3c>
    3d38:	e8 81       	ld	r30, Y
    3d3a:	f9 81       	ldd	r31, Y+1	; 0x01
    3d3c:	01 93       	st	Z+, r16
    3d3e:	f9 83       	std	Y+1, r31	; 0x01
    3d40:	e8 83       	st	Y, r30
    3d42:	06 c0       	rjmp	.+12     	; 0x3d50 <fputc+0x3c>
    3d44:	e8 85       	ldd	r30, Y+8	; 0x08
    3d46:	f9 85       	ldd	r31, Y+9	; 0x09
    3d48:	80 2f       	mov	r24, r16
    3d4a:	09 95       	icall
    3d4c:	00 97       	sbiw	r24, 0x00	; 0
    3d4e:	31 f4       	brne	.+12     	; 0x3d5c <fputc+0x48>
    3d50:	8e 81       	ldd	r24, Y+6	; 0x06
    3d52:	9f 81       	ldd	r25, Y+7	; 0x07
    3d54:	01 96       	adiw	r24, 0x01	; 1
    3d56:	9f 83       	std	Y+7, r25	; 0x07
    3d58:	8e 83       	std	Y+6, r24	; 0x06
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <fputc+0x4c>
    3d5c:	0f ef       	ldi	r16, 0xFF	; 255
    3d5e:	1f ef       	ldi	r17, 0xFF	; 255
    3d60:	c8 01       	movw	r24, r16
    3d62:	df 91       	pop	r29
    3d64:	cf 91       	pop	r28
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	08 95       	ret

00003d6c <__ultoa_invert>:
    3d6c:	fa 01       	movw	r30, r20
    3d6e:	aa 27       	eor	r26, r26
    3d70:	28 30       	cpi	r18, 0x08	; 8
    3d72:	51 f1       	breq	.+84     	; 0x3dc8 <__ultoa_invert+0x5c>
    3d74:	20 31       	cpi	r18, 0x10	; 16
    3d76:	81 f1       	breq	.+96     	; 0x3dd8 <__ultoa_invert+0x6c>
    3d78:	e8 94       	clt
    3d7a:	6f 93       	push	r22
    3d7c:	6e 7f       	andi	r22, 0xFE	; 254
    3d7e:	6e 5f       	subi	r22, 0xFE	; 254
    3d80:	7f 4f       	sbci	r23, 0xFF	; 255
    3d82:	8f 4f       	sbci	r24, 0xFF	; 255
    3d84:	9f 4f       	sbci	r25, 0xFF	; 255
    3d86:	af 4f       	sbci	r26, 0xFF	; 255
    3d88:	b1 e0       	ldi	r27, 0x01	; 1
    3d8a:	3e d0       	rcall	.+124    	; 0x3e08 <__ultoa_invert+0x9c>
    3d8c:	b4 e0       	ldi	r27, 0x04	; 4
    3d8e:	3c d0       	rcall	.+120    	; 0x3e08 <__ultoa_invert+0x9c>
    3d90:	67 0f       	add	r22, r23
    3d92:	78 1f       	adc	r23, r24
    3d94:	89 1f       	adc	r24, r25
    3d96:	9a 1f       	adc	r25, r26
    3d98:	a1 1d       	adc	r26, r1
    3d9a:	68 0f       	add	r22, r24
    3d9c:	79 1f       	adc	r23, r25
    3d9e:	8a 1f       	adc	r24, r26
    3da0:	91 1d       	adc	r25, r1
    3da2:	a1 1d       	adc	r26, r1
    3da4:	6a 0f       	add	r22, r26
    3da6:	71 1d       	adc	r23, r1
    3da8:	81 1d       	adc	r24, r1
    3daa:	91 1d       	adc	r25, r1
    3dac:	a1 1d       	adc	r26, r1
    3dae:	20 d0       	rcall	.+64     	; 0x3df0 <__ultoa_invert+0x84>
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <__ultoa_invert+0x48>
    3db2:	68 94       	set
    3db4:	3f 91       	pop	r19
    3db6:	2a e0       	ldi	r18, 0x0A	; 10
    3db8:	26 9f       	mul	r18, r22
    3dba:	11 24       	eor	r1, r1
    3dbc:	30 19       	sub	r19, r0
    3dbe:	30 5d       	subi	r19, 0xD0	; 208
    3dc0:	31 93       	st	Z+, r19
    3dc2:	de f6       	brtc	.-74     	; 0x3d7a <__ultoa_invert+0xe>
    3dc4:	cf 01       	movw	r24, r30
    3dc6:	08 95       	ret
    3dc8:	46 2f       	mov	r20, r22
    3dca:	47 70       	andi	r20, 0x07	; 7
    3dcc:	40 5d       	subi	r20, 0xD0	; 208
    3dce:	41 93       	st	Z+, r20
    3dd0:	b3 e0       	ldi	r27, 0x03	; 3
    3dd2:	0f d0       	rcall	.+30     	; 0x3df2 <__ultoa_invert+0x86>
    3dd4:	c9 f7       	brne	.-14     	; 0x3dc8 <__ultoa_invert+0x5c>
    3dd6:	f6 cf       	rjmp	.-20     	; 0x3dc4 <__ultoa_invert+0x58>
    3dd8:	46 2f       	mov	r20, r22
    3dda:	4f 70       	andi	r20, 0x0F	; 15
    3ddc:	40 5d       	subi	r20, 0xD0	; 208
    3dde:	4a 33       	cpi	r20, 0x3A	; 58
    3de0:	18 f0       	brcs	.+6      	; 0x3de8 <__ultoa_invert+0x7c>
    3de2:	49 5d       	subi	r20, 0xD9	; 217
    3de4:	31 fd       	sbrc	r19, 1
    3de6:	40 52       	subi	r20, 0x20	; 32
    3de8:	41 93       	st	Z+, r20
    3dea:	02 d0       	rcall	.+4      	; 0x3df0 <__ultoa_invert+0x84>
    3dec:	a9 f7       	brne	.-22     	; 0x3dd8 <__ultoa_invert+0x6c>
    3dee:	ea cf       	rjmp	.-44     	; 0x3dc4 <__ultoa_invert+0x58>
    3df0:	b4 e0       	ldi	r27, 0x04	; 4
    3df2:	a6 95       	lsr	r26
    3df4:	97 95       	ror	r25
    3df6:	87 95       	ror	r24
    3df8:	77 95       	ror	r23
    3dfa:	67 95       	ror	r22
    3dfc:	ba 95       	dec	r27
    3dfe:	c9 f7       	brne	.-14     	; 0x3df2 <__ultoa_invert+0x86>
    3e00:	00 97       	sbiw	r24, 0x00	; 0
    3e02:	61 05       	cpc	r22, r1
    3e04:	71 05       	cpc	r23, r1
    3e06:	08 95       	ret
    3e08:	9b 01       	movw	r18, r22
    3e0a:	ac 01       	movw	r20, r24
    3e0c:	0a 2e       	mov	r0, r26
    3e0e:	06 94       	lsr	r0
    3e10:	57 95       	ror	r21
    3e12:	47 95       	ror	r20
    3e14:	37 95       	ror	r19
    3e16:	27 95       	ror	r18
    3e18:	ba 95       	dec	r27
    3e1a:	c9 f7       	brne	.-14     	; 0x3e0e <__ultoa_invert+0xa2>
    3e1c:	62 0f       	add	r22, r18
    3e1e:	73 1f       	adc	r23, r19
    3e20:	84 1f       	adc	r24, r20
    3e22:	95 1f       	adc	r25, r21
    3e24:	a0 1d       	adc	r26, r0
    3e26:	08 95       	ret

00003e28 <__prologue_saves__>:
    3e28:	2f 92       	push	r2
    3e2a:	3f 92       	push	r3
    3e2c:	4f 92       	push	r4
    3e2e:	5f 92       	push	r5
    3e30:	6f 92       	push	r6
    3e32:	7f 92       	push	r7
    3e34:	8f 92       	push	r8
    3e36:	9f 92       	push	r9
    3e38:	af 92       	push	r10
    3e3a:	bf 92       	push	r11
    3e3c:	cf 92       	push	r12
    3e3e:	df 92       	push	r13
    3e40:	ef 92       	push	r14
    3e42:	ff 92       	push	r15
    3e44:	0f 93       	push	r16
    3e46:	1f 93       	push	r17
    3e48:	cf 93       	push	r28
    3e4a:	df 93       	push	r29
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	ca 1b       	sub	r28, r26
    3e52:	db 0b       	sbc	r29, r27
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	09 94       	ijmp

00003e60 <__epilogue_restores__>:
    3e60:	2a 88       	ldd	r2, Y+18	; 0x12
    3e62:	39 88       	ldd	r3, Y+17	; 0x11
    3e64:	48 88       	ldd	r4, Y+16	; 0x10
    3e66:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e68:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e70:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e72:	b9 84       	ldd	r11, Y+9	; 0x09
    3e74:	c8 84       	ldd	r12, Y+8	; 0x08
    3e76:	df 80       	ldd	r13, Y+7	; 0x07
    3e78:	ee 80       	ldd	r14, Y+6	; 0x06
    3e7a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e7c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e7e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e80:	aa 81       	ldd	r26, Y+2	; 0x02
    3e82:	b9 81       	ldd	r27, Y+1	; 0x01
    3e84:	ce 0f       	add	r28, r30
    3e86:	d1 1d       	adc	r29, r1
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	ed 01       	movw	r28, r26
    3e94:	08 95       	ret

00003e96 <_exit>:
    3e96:	f8 94       	cli

00003e98 <__stop_program>:
    3e98:	ff cf       	rjmp	.-2      	; 0x3e98 <__stop_program>
