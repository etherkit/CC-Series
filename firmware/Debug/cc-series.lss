
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00003c68  00003d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c68  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  0080013a  0080013a  00003d56  2**0
                  ALLOC
  3 .eeprom       0000002a  00810000  00810000  00003d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005730  00000000  00000000  00003d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002356  00000000  00000000  000094b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e8 e6       	ldi	r30, 0x68	; 104
     1b8:	fc e3       	ldi	r31, 0x3C	; 60
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	aa 33       	cpi	r26, 0x3A	; 58
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	aa e3       	ldi	r26, 0x3A	; 58
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a7 3f       	cpi	r26, 0xF7	; 247
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <main>
     1da:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_11>:

// Timer1 ISR
//
// Timer1 is the sinewave generator.
ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_11+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 3a 01 	lds	r24, 0x013A
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_11+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_11+0xae>
	{
		//SIDETONE_DDR |= _BV(SIDETONE);

		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 9e 01 	lds	r18, 0x019E
     21c:	30 91 9f 01 	lds	r19, 0x019F
     220:	40 91 a0 01 	lds	r20, 0x01A0
     224:	50 91 a1 01 	lds	r21, 0x01A1
     228:	80 91 b0 01 	lds	r24, 0x01B0
     22c:	90 91 b1 01 	lds	r25, 0x01B1
     230:	a0 91 b2 01 	lds	r26, 0x01B2
     234:	b0 91 b3 01 	lds	r27, 0x01B3
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 9e 01 	sts	0x019E, r24
     244:	90 93 9f 01 	sts	0x019F, r25
     248:	a0 93 a0 01 	sts	0x01A0, r26
     24c:	b0 93 a1 01 	sts	0x01A1, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 9e 01 	lds	r24, 0x019E
     254:	90 91 9f 01 	lds	r25, 0x019F
     258:	a0 91 a0 01 	lds	r26, 0x01A0
     25c:	b0 91 a1 01 	lds	r27, 0x01A1
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 6c 01 	sts	0x016C, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 6c 01 	lds	r18, 0x016C
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
	{
		// Hi-Z the port when not using
		SIDETONE_DDR &= ~(_BV(SIDETONE));
		OCR0A = 0;
	} */
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(/*((timer > mute_start) && (timer < mute_end)) || */(mute_on == TRUE))
     2e4:	80 91 3b 01 	lds	r24, 0x013B
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	51 f4       	brne	.+20     	; 0x300 <__vector_7+0x46>
		MUTE_PORT |= _BV(MUTE);
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	28 e2       	ldi	r18, 0x28	; 40
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	20 62       	ori	r18, 0x20	; 32
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_7+0x58>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     300:	88 e2       	ldi	r24, 0x28	; 40
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	28 e2       	ldi	r18, 0x28	; 40
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7d       	andi	r18, 0xDF	; 223
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     312:	80 91 3c 01 	lds	r24, 0x013C
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	09 f0       	breq	.+2      	; 0x31c <__vector_7+0x62>
     31a:	43 c0       	rjmp	.+134    	; 0x3a2 <__vector_7+0xe8>
     31c:	20 91 6e 01 	lds	r18, 0x016E
     320:	30 91 6f 01 	lds	r19, 0x016F
     324:	40 91 70 01 	lds	r20, 0x0170
     328:	50 91 71 01 	lds	r21, 0x0171
     32c:	80 91 ed 01 	lds	r24, 0x01ED
     330:	90 91 ee 01 	lds	r25, 0x01EE
     334:	a0 91 ef 01 	lds	r26, 0x01EF
     338:	b0 91 f0 01 	lds	r27, 0x01F0
     33c:	28 17       	cp	r18, r24
     33e:	39 07       	cpc	r19, r25
     340:	4a 07       	cpc	r20, r26
     342:	5b 07       	cpc	r21, r27
     344:	70 f5       	brcc	.+92     	; 0x3a2 <__vector_7+0xe8>
     346:	20 91 6e 01 	lds	r18, 0x016E
     34a:	30 91 6f 01 	lds	r19, 0x016F
     34e:	40 91 70 01 	lds	r20, 0x0170
     352:	50 91 71 01 	lds	r21, 0x0171
     356:	80 91 a8 01 	lds	r24, 0x01A8
     35a:	90 91 a9 01 	lds	r25, 0x01A9
     35e:	a0 91 aa 01 	lds	r26, 0x01AA
     362:	b0 91 ab 01 	lds	r27, 0x01AB
     366:	82 17       	cp	r24, r18
     368:	93 07       	cpc	r25, r19
     36a:	a4 07       	cpc	r26, r20
     36c:	b5 07       	cpc	r27, r21
     36e:	c8 f4       	brcc	.+50     	; 0x3a2 <__vector_7+0xe8>
	{
		if(inc_tune_state == RIT || inc_tune_state == XIT)
     370:	80 91 d2 01 	lds	r24, 0x01D2
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	21 f0       	breq	.+8      	; 0x380 <__vector_7+0xc6>
     378:	80 91 d2 01 	lds	r24, 0x01D2
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	21 f4       	brne	.+8      	; 0x388 <__vector_7+0xce>
			set_dds_freq_reg(REG_1);
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 18 0c 	call	0x1830	; 0x1830 <set_dds_freq_reg>
     386:	03 c0       	rjmp	.+6      	; 0x38e <__vector_7+0xd4>
		else
			set_dds_freq_reg(REG_0);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 18 0c 	call	0x1830	; 0x1830 <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     38e:	88 e2       	ldi	r24, 0x28	; 40
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	28 e2       	ldi	r18, 0x28	; 40
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	20 61       	ori	r18, 0x10	; 16
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
     3a0:	0c c0       	rjmp	.+24     	; 0x3ba <__vector_7+0x100>
	}
	else
	{
		set_dds_freq_reg(REG_0);
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 18 0c 	call	0x1830	; 0x1830 <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     3a8:	88 e2       	ldi	r24, 0x28	; 40
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	28 e2       	ldi	r18, 0x28	; 40
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	2f 7e       	andi	r18, 0xEF	; 239
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
	}

	// Handle the RIT/XIT LED
	if(inc_tune_state != NONE)
     3ba:	80 91 d2 01 	lds	r24, 0x01D2
     3be:	88 23       	and	r24, r24
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <__vector_7+0x10a>
     3c2:	45 c0       	rjmp	.+138    	; 0x44e <__vector_7+0x194>
	{
		if(inc_tune_state == RIT)
     3c4:	80 91 d2 01 	lds	r24, 0x01D2
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	51 f4       	brne	.+20     	; 0x3e0 <__vector_7+0x126>
		{
			//RIT_LED_DDR |= _BV(RIT_LED);
			RIT_LED_PORT |= _BV(RIT_LED);
     3cc:	88 e2       	ldi	r24, 0x28	; 40
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	28 e2       	ldi	r18, 0x28	; 40
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	f9 01       	movw	r30, r18
     3d6:	20 81       	ld	r18, Z
     3d8:	22 60       	ori	r18, 0x02	; 2
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18
     3de:	37 c0       	rjmp	.+110    	; 0x44e <__vector_7+0x194>
		}
		else if(inc_tune_state == XIT)
     3e0:	80 91 d2 01 	lds	r24, 0x01D2
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	99 f5       	brne	.+102    	; 0x44e <__vector_7+0x194>
		{
			if(cur_timer > led_toggle)
     3e8:	20 91 68 01 	lds	r18, 0x0168
     3ec:	30 91 69 01 	lds	r19, 0x0169
     3f0:	40 91 6a 01 	lds	r20, 0x016A
     3f4:	50 91 6b 01 	lds	r21, 0x016B
     3f8:	80 91 dd 01 	lds	r24, 0x01DD
     3fc:	90 91 de 01 	lds	r25, 0x01DE
     400:	a0 91 df 01 	lds	r26, 0x01DF
     404:	b0 91 e0 01 	lds	r27, 0x01E0
     408:	82 17       	cp	r24, r18
     40a:	93 07       	cpc	r25, r19
     40c:	a4 07       	cpc	r26, r20
     40e:	b5 07       	cpc	r27, r21
     410:	f0 f4       	brcc	.+60     	; 0x44e <__vector_7+0x194>
			{
				RIT_LED_PORT ^= _BV(RIT_LED);
     412:	88 e2       	ldi	r24, 0x28	; 40
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	28 e2       	ldi	r18, 0x28	; 40
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	f9 01       	movw	r30, r18
     41c:	30 81       	ld	r19, Z
     41e:	22 e0       	ldi	r18, 0x02	; 2
     420:	23 27       	eor	r18, r19
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
				led_toggle = cur_timer + XIT_BLINK;
     426:	80 91 68 01 	lds	r24, 0x0168
     42a:	90 91 69 01 	lds	r25, 0x0169
     42e:	a0 91 6a 01 	lds	r26, 0x016A
     432:	b0 91 6b 01 	lds	r27, 0x016B
     436:	8c 50       	subi	r24, 0x0C	; 12
     438:	9e 4f       	sbci	r25, 0xFE	; 254
     43a:	af 4f       	sbci	r26, 0xFF	; 255
     43c:	bf 4f       	sbci	r27, 0xFF	; 255
     43e:	80 93 dd 01 	sts	0x01DD, r24
     442:	90 93 de 01 	sts	0x01DE, r25
     446:	a0 93 df 01 	sts	0x01DF, r26
     44a:	b0 93 e0 01 	sts	0x01E0, r27
			}
		}

	}

	debounce(FALSE);
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>

	// Need to consider timer overflow?
	timer++;
     454:	80 91 6e 01 	lds	r24, 0x016E
     458:	90 91 6f 01 	lds	r25, 0x016F
     45c:	a0 91 70 01 	lds	r26, 0x0170
     460:	b0 91 71 01 	lds	r27, 0x0171
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	a1 1d       	adc	r26, r1
     468:	b1 1d       	adc	r27, r1
     46a:	80 93 6e 01 	sts	0x016E, r24
     46e:	90 93 6f 01 	sts	0x016F, r25
     472:	a0 93 70 01 	sts	0x0170, r26
     476:	b0 93 71 01 	sts	0x0171, r27
}
     47a:	cf 91       	pop	r28
     47c:	df 91       	pop	r29
     47e:	ff 91       	pop	r31
     480:	ef 91       	pop	r30
     482:	bf 91       	pop	r27
     484:	af 91       	pop	r26
     486:	9f 91       	pop	r25
     488:	8f 91       	pop	r24
     48a:	7f 91       	pop	r23
     48c:	6f 91       	pop	r22
     48e:	5f 91       	pop	r21
     490:	4f 91       	pop	r20
     492:	3f 91       	pop	r19
     494:	2f 91       	pop	r18
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     4a0:	1f 92       	push	r1
     4a2:	0f 92       	push	r0
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	0f 92       	push	r0
     4a8:	11 24       	eor	r1, r1
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     4be:	88 e6       	ldi	r24, 0x68	; 104
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	fc 01       	movw	r30, r24
     4c4:	10 82       	st	Z, r1

	cur_mode = default_mode;
     4c6:	80 91 6d 01 	lds	r24, 0x016D
     4ca:	80 93 a2 01 	sts	0x01A2, r24
	cur_state = IDLE;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 c8 01 	sts	0x01C8, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 100;
     4d4:	80 91 68 01 	lds	r24, 0x0168
     4d8:	90 91 69 01 	lds	r25, 0x0169
     4dc:	a0 91 6a 01 	lds	r26, 0x016A
     4e0:	b0 91 6b 01 	lds	r27, 0x016B
     4e4:	8c 59       	subi	r24, 0x9C	; 156
     4e6:	9f 4f       	sbci	r25, 0xFF	; 255
     4e8:	af 4f       	sbci	r26, 0xFF	; 255
     4ea:	bf 4f       	sbci	r27, 0xFF	; 255
     4ec:	80 93 d4 01 	sts	0x01D4, r24
     4f0:	90 93 d5 01 	sts	0x01D5, r25
     4f4:	a0 93 d6 01 	sts	0x01D6, r26
     4f8:	b0 93 d7 01 	sts	0x01D7, r27
	sleep_timer = cur_timer + SLEEP_DELAY;
     4fc:	80 91 68 01 	lds	r24, 0x0168
     500:	90 91 69 01 	lds	r25, 0x0169
     504:	a0 91 6a 01 	lds	r26, 0x016A
     508:	b0 91 6b 01 	lds	r27, 0x016B
     50c:	84 5d       	subi	r24, 0xD4	; 212
     50e:	9e 4f       	sbci	r25, 0xFE	; 254
     510:	af 4f       	sbci	r26, 0xFF	; 255
     512:	bf 4f       	sbci	r27, 0xFF	; 255
     514:	80 93 cd 01 	sts	0x01CD, r24
     518:	90 93 ce 01 	sts	0x01CE, r25
     51c:	a0 93 cf 01 	sts	0x01CF, r26
     520:	b0 93 d0 01 	sts	0x01D0, r27
}
     524:	cf 91       	pop	r28
     526:	df 91       	pop	r29
     528:	ff 91       	pop	r31
     52a:	ef 91       	pop	r30
     52c:	bf 91       	pop	r27
     52e:	af 91       	pop	r26
     530:	9f 91       	pop	r25
     532:	8f 91       	pop	r24
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <init>:

void init(void)
{
     53e:	df 93       	push	r29
     540:	cf 93       	push	r28
     542:	0f 92       	push	r0
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     548:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     54a:	81 e6       	ldi	r24, 0x61	; 97
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	20 e8       	ldi	r18, 0x80	; 128
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
	CLKPR = 0;
     554:	81 e6       	ldi	r24, 0x61	; 97
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	fc 01       	movw	r30, r24
     55a:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     55c:	84 e4       	ldi	r24, 0x44	; 68
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	21 e8       	ldi	r18, 0x81	; 129
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     566:	85 e4       	ldi	r24, 0x45	; 69
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	21 e0       	ldi	r18, 0x01	; 1
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
	//TCCR0B = _BV(CS01);
	//TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt

	// Setup Timer1 as sample rate generator for sidetone
	TCCR1B = _BV(WGM12) | _BV(CS10); // Set for CTC mode, Prescaler /1
     570:	81 e8       	ldi	r24, 0x81	; 129
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	29 e0       	ldi	r18, 0x09	; 9
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
	TCCR1A = 0;
     57a:	80 e8       	ldi	r24, 0x80	; 128
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	fc 01       	movw	r30, r24
     580:	10 82       	st	Z, r1
	OCR1A = 1000; // 16 MHz clock / 16 kHz sample rate = 1000
     582:	88 e8       	ldi	r24, 0x88	; 136
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	28 ee       	ldi	r18, 0xE8	; 232
     588:	33 e0       	ldi	r19, 0x03	; 3
     58a:	fc 01       	movw	r30, r24
     58c:	31 83       	std	Z+1, r19	; 0x01
     58e:	20 83       	st	Z, r18
	TIMSK1 = _BV(OCIE1A);
     590:	8f e6       	ldi	r24, 0x6F	; 111
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	22 e0       	ldi	r18, 0x02	; 2
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     59a:	80 eb       	ldi	r24, 0xB0	; 176
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	22 e0       	ldi	r18, 0x02	; 2
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     5a4:	81 eb       	ldi	r24, 0xB1	; 177
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	24 e0       	ldi	r18, 0x04	; 4
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     5ae:	80 e7       	ldi	r24, 0x70	; 112
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	20 e7       	ldi	r18, 0x70	; 112
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	22 60       	ori	r18, 0x02	; 2
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     5c0:	83 eb       	ldi	r24, 0xB3	; 179
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	29 ef       	ldi	r18, 0xF9	; 249
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     5ca:	8a e7       	ldi	r24, 0x7A	; 122
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	2a e7       	ldi	r18, 0x7A	; 122
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	f9 01       	movw	r30, r18
     5d4:	20 81       	ld	r18, Z
     5d6:	24 68       	ori	r18, 0x84	; 132
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     5dc:	8c e7       	ldi	r24, 0x7C	; 124
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	20 e6       	ldi	r18, 0x60	; 96
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     5e6:	8b e6       	ldi	r24, 0x6B	; 107
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	21 e0       	ldi	r18, 0x01	; 1
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) |_BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     5f0:	8d e6       	ldi	r24, 0x6D	; 109
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	2f e9       	ldi	r18, 0x9F	; 159
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     5fa:	8a e2       	ldi	r24, 0x2A	; 42
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	2a e2       	ldi	r18, 0x2A	; 42
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	f9 01       	movw	r30, r18
     604:	20 81       	ld	r18, Z
     606:	20 64       	ori	r18, 0x40	; 64
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     60c:	87 e2       	ldi	r24, 0x27	; 39
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	27 e2       	ldi	r18, 0x27	; 39
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	f9 01       	movw	r30, r18
     616:	20 81       	ld	r18, Z
     618:	20 62       	ori	r18, 0x20	; 32
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     61e:	87 e2       	ldi	r24, 0x27	; 39
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	27 e2       	ldi	r18, 0x27	; 39
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	20 61       	ori	r18, 0x10	; 16
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     630:	87 e2       	ldi	r24, 0x27	; 39
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	27 e2       	ldi	r18, 0x27	; 39
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	f9 01       	movw	r30, r18
     63a:	20 81       	ld	r18, Z
     63c:	2d 7f       	andi	r18, 0xFD	; 253
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     642:	88 e2       	ldi	r24, 0x28	; 40
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	28 e2       	ldi	r18, 0x28	; 40
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	f9 01       	movw	r30, r18
     64c:	20 81       	ld	r18, Z
     64e:	2d 7f       	andi	r18, 0xFD	; 253
     650:	fc 01       	movw	r30, r24
     652:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     654:	8a e2       	ldi	r24, 0x2A	; 42
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	2a e2       	ldi	r18, 0x2A	; 42
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	f9 01       	movw	r30, r18
     65e:	20 81       	ld	r18, Z
     660:	27 7f       	andi	r18, 0xF7	; 247
     662:	fc 01       	movw	r30, r24
     664:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     666:	8b e2       	ldi	r24, 0x2B	; 43
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	2b e2       	ldi	r18, 0x2B	; 43
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	f9 01       	movw	r30, r18
     670:	20 81       	ld	r18, Z
     672:	28 60       	ori	r18, 0x08	; 8
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     678:	8a e2       	ldi	r24, 0x2A	; 42
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2a e2       	ldi	r18, 0x2A	; 42
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	f9 01       	movw	r30, r18
     682:	20 81       	ld	r18, Z
     684:	2f 7e       	andi	r18, 0xEF	; 239
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     68a:	8b e2       	ldi	r24, 0x2B	; 43
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	2b e2       	ldi	r18, 0x2B	; 43
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	f9 01       	movw	r30, r18
     694:	20 81       	ld	r18, Z
     696:	20 61       	ori	r18, 0x10	; 16
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     69c:	8a e2       	ldi	r24, 0x2A	; 42
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	2a e2       	ldi	r18, 0x2A	; 42
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	f9 01       	movw	r30, r18
     6a6:	20 81       	ld	r18, Z
     6a8:	2b 7f       	andi	r18, 0xFB	; 251
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     6ae:	8b e2       	ldi	r24, 0x2B	; 43
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2b e2       	ldi	r18, 0x2B	; 43
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	24 60       	ori	r18, 0x04	; 4
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     6c0:	8a e2       	ldi	r24, 0x2A	; 42
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	2a e2       	ldi	r18, 0x2A	; 42
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	f9 01       	movw	r30, r18
     6ca:	20 81       	ld	r18, Z
     6cc:	2d 7f       	andi	r18, 0xFD	; 253
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     6d2:	8b e2       	ldi	r24, 0x2B	; 43
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	2b e2       	ldi	r18, 0x2B	; 43
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	f9 01       	movw	r30, r18
     6dc:	20 81       	ld	r18, Z
     6de:	22 60       	ori	r18, 0x02	; 2
     6e0:	fc 01       	movw	r30, r24
     6e2:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     6e4:	84 e2       	ldi	r24, 0x24	; 36
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	24 e2       	ldi	r18, 0x24	; 36
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	2e 7f       	andi	r18, 0xFE	; 254
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     6f6:	85 e2       	ldi	r24, 0x25	; 37
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	25 e2       	ldi	r18, 0x25	; 37
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	f9 01       	movw	r30, r18
     700:	20 81       	ld	r18, Z
     702:	21 60       	ori	r18, 0x01	; 1
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     708:	8a e2       	ldi	r24, 0x2A	; 42
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	2a e2       	ldi	r18, 0x2A	; 42
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	2f 77       	andi	r18, 0x7F	; 127
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     71a:	8b e2       	ldi	r24, 0x2B	; 43
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	2b e2       	ldi	r18, 0x2B	; 43
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	20 68       	ori	r18, 0x80	; 128
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     72c:	8a e2       	ldi	r24, 0x2A	; 42
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	2a e2       	ldi	r18, 0x2A	; 42
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	2e 7f       	andi	r18, 0xFE	; 254
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     73e:	8b e2       	ldi	r24, 0x2B	; 43
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	2b e2       	ldi	r18, 0x2B	; 43
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	f9 01       	movw	r30, r18
     748:	20 81       	ld	r18, Z
     74a:	21 60       	ori	r18, 0x01	; 1
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     750:	84 e2       	ldi	r24, 0x24	; 36
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	24 e2       	ldi	r18, 0x24	; 36
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	f9 01       	movw	r30, r18
     75a:	20 81       	ld	r18, Z
     75c:	2e 62       	ori	r18, 0x2E	; 46
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     762:	8c e4       	ldi	r24, 0x4C	; 76
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	29 e5       	ldi	r18, 0x59	; 89
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     76c:	8d e4       	ldi	r24, 0x4D	; 77
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	fc 01       	movw	r30, r24
     772:	80 81       	ld	r24, Z
     774:	89 83       	std	Y+1, r24	; 0x01
	spi_data = SPDR;
     776:	8e e4       	ldi	r24, 0x4E	; 78
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	fc 01       	movw	r30, r24
     77c:	80 81       	ld	r24, Z
     77e:	89 83       	std	Y+1, r24	; 0x01

	// Power saving
	power_twi_disable();
     780:	84 e6       	ldi	r24, 0x64	; 100
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	24 e6       	ldi	r18, 0x64	; 100
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	20 68       	ori	r18, 0x80	; 128
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
	power_usart0_disable();
     792:	84 e6       	ldi	r24, 0x64	; 100
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	24 e6       	ldi	r18, 0x64	; 100
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	f9 01       	movw	r30, r18
     79c:	20 81       	ld	r18, Z
     79e:	22 60       	ori	r18, 0x02	; 2
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18

	set_sleep_mode(SLEEP_MODE_STANDBY);
     7a4:	83 e5       	ldi	r24, 0x53	; 83
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	23 e5       	ldi	r18, 0x53	; 83
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	f9 01       	movw	r30, r18
     7ae:	20 81       	ld	r18, Z
     7b0:	21 7f       	andi	r18, 0xF1	; 241
     7b2:	2c 60       	ori	r18, 0x0C	; 12
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 72 01 	sts	0x0172, r24
	cur_state = IDLE;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 93 c8 01 	sts	0x01C8, r24
	next_state = IDLE;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 a7 01 	sts	0x01A7, r24

	timer = 0;
     7ca:	10 92 6e 01 	sts	0x016E, r1
     7ce:	10 92 6f 01 	sts	0x016F, r1
     7d2:	10 92 70 01 	sts	0x0170, r1
     7d6:	10 92 71 01 	sts	0x0171, r1

	eeprom_busy_wait();
     7da:	8f e3       	ldi	r24, 0x3F	; 63
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	82 70       	andi	r24, 0x02	; 2
     7e8:	90 70       	andi	r25, 0x00	; 0
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	b1 f7       	brne	.-20     	; 0x7da <init+0x29c>
	wpm = eeprom_read_byte(&ee_wpm);
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__eerd_byte_m168>
     7f6:	80 93 e6 01 	sts	0x01E6, r24
	set_wpm(wpm);
     7fa:	80 91 e6 01 	lds	r24, 0x01E6
     7fe:	0e 94 4f 04 	call	0x89e	; 0x89e <set_wpm>

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = DDS_INIT;
     802:	8c e0       	ldi	r24, 0x0C	; 12
     804:	9f e1       	ldi	r25, 0x1F	; 31
     806:	a1 e1       	ldi	r26, 0x11	; 17
     808:	b5 e0       	ldi	r27, 0x05	; 5
     80a:	80 93 ac 01 	sts	0x01AC, r24
     80e:	90 93 ad 01 	sts	0x01AD, r25
     812:	a0 93 ae 01 	sts	0x01AE, r26
     816:	b0 93 af 01 	sts	0x01AF, r27
	tune_freq = FREQ_INIT;
     81a:	80 ee       	ldi	r24, 0xE0	; 224
     81c:	99 e8       	ldi	r25, 0x89	; 137
     81e:	a6 ed       	ldi	r26, 0xD6	; 214
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	80 93 e2 01 	sts	0x01E2, r24
     826:	90 93 e3 01 	sts	0x01E3, r25
     82a:	a0 93 e4 01 	sts	0x01E4, r26
     82e:	b0 93 e5 01 	sts	0x01E5, r27
	tune_dds(dds_freq_word, REG_0, TRUE);
     832:	80 91 ac 01 	lds	r24, 0x01AC
     836:	90 91 ad 01 	lds	r25, 0x01AD
     83a:	a0 91 ae 01 	lds	r26, 0x01AE
     83e:	b0 91 af 01 	lds	r27, 0x01AF
     842:	bc 01       	movw	r22, r24
     844:	cd 01       	movw	r24, r26
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	21 e0       	ldi	r18, 0x01	; 1
     84a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <tune_dds>
	tune_dds(dds_freq_word, REG_1, FALSE);
     84e:	80 91 ac 01 	lds	r24, 0x01AC
     852:	90 91 ad 01 	lds	r25, 0x01AD
     856:	a0 91 ae 01 	lds	r26, 0x01AE
     85a:	b0 91 af 01 	lds	r27, 0x01AF
     85e:	bc 01       	movw	r22, r24
     860:	cd 01       	movw	r24, r26
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <tune_dds>

	st_freq = ST_DEFAULT;
     86a:	84 ef       	ldi	r24, 0xF4	; 244
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	90 93 bb 01 	sts	0x01BB, r25
     872:	80 93 ba 01 	sts	0x01BA, r24
	set_st_freq(st_freq);
     876:	80 91 ba 01 	lds	r24, 0x01BA
     87a:	90 91 bb 01 	lds	r25, 0x01BB
     87e:	cc 01       	movw	r24, r24
     880:	a0 e0       	ldi	r26, 0x00	; 0
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	bc 01       	movw	r22, r24
     886:	cd 01       	movw	r24, r26
     888:	0e 94 2e 0c 	call	0x185c	; 0x185c <set_st_freq>

	inc_tune_state = OFF;
     88c:	10 92 d2 01 	sts	0x01D2, r1
	tune_reg = REG_0;
     890:	10 92 d1 01 	sts	0x01D1, r1

	// Enable interrupts
	sei();
     894:	78 94       	sei
}
     896:	0f 90       	pop	r0
     898:	cf 91       	pop	r28
     89a:	df 91       	pop	r29
     89c:	08 95       	ret

0000089e <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     89e:	df 93       	push	r29
     8a0:	cf 93       	push	r28
     8a2:	0f 92       	push	r0
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 1 ms per timer tick
	dit_length = (1200 / new_wpm);
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	80 eb       	ldi	r24, 0xB0	; 176
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	b9 01       	movw	r22, r18
     8b6:	0e 94 a2 19 	call	0x3344	; 0x3344 <__divmodhi4>
     8ba:	9b 01       	movw	r18, r22
     8bc:	c9 01       	movw	r24, r18
     8be:	90 93 74 01 	sts	0x0174, r25
     8c2:	80 93 73 01 	sts	0x0173, r24
}
     8c6:	0f 90       	pop	r0
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	08 95       	ret

000008ce <debounce>:

void debounce(enum BOOL flush)
{
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	0f 92       	push	r0
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	41 f5       	brne	.+80     	; 0x930 <debounce+0x62>
	{
		dit_on_count = 0;
     8e0:	10 92 50 01 	sts	0x0150, r1
     8e4:	10 92 4f 01 	sts	0x014F, r1
		dah_on_count = 0;
     8e8:	10 92 52 01 	sts	0x0152, r1
     8ec:	10 92 51 01 	sts	0x0151, r1
		dit_off_count = 0;
     8f0:	10 92 54 01 	sts	0x0154, r1
     8f4:	10 92 53 01 	sts	0x0153, r1
		dah_off_count = 0;
     8f8:	10 92 56 01 	sts	0x0156, r1
     8fc:	10 92 55 01 	sts	0x0155, r1
		cmd_on_count = 0;
     900:	10 92 58 01 	sts	0x0158, r1
     904:	10 92 57 01 	sts	0x0157, r1
		msg_on_count = 0;
     908:	10 92 5a 01 	sts	0x015A, r1
     90c:	10 92 59 01 	sts	0x0159, r1
		both_on_count = 0;
     910:	10 92 5c 01 	sts	0x015C, r1
     914:	10 92 5b 01 	sts	0x015B, r1
		enc_on_count = 0;
     918:	10 92 5e 01 	sts	0x015E, r1
     91c:	10 92 5d 01 	sts	0x015D, r1
		enca_on_count = 0;
     920:	10 92 60 01 	sts	0x0160, r1
     924:	10 92 5f 01 	sts	0x015F, r1
		encb_on_count = 0;
     928:	10 92 62 01 	sts	0x0162, r1
     92c:	10 92 61 01 	sts	0x0161, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     930:	89 e2       	ldi	r24, 0x29	; 41
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	88 2f       	mov	r24, r24
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	88 70       	andi	r24, 0x08	; 8
     93e:	90 70       	andi	r25, 0x00	; 0
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	a9 f4       	brne	.+42     	; 0x96e <debounce+0xa0>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     944:	80 91 4f 01 	lds	r24, 0x014F
     948:	90 91 50 01 	lds	r25, 0x0150
     94c:	85 30       	cpi	r24, 0x05	; 5
     94e:	91 05       	cpc	r25, r1
     950:	48 f4       	brcc	.+18     	; 0x964 <debounce+0x96>
			dit_on_count++;
     952:	80 91 4f 01 	lds	r24, 0x014F
     956:	90 91 50 01 	lds	r25, 0x0150
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	90 93 50 01 	sts	0x0150, r25
     960:	80 93 4f 01 	sts	0x014F, r24
		dit_off_count = 0;
     964:	10 92 54 01 	sts	0x0154, r1
     968:	10 92 53 01 	sts	0x0153, r1
     96c:	14 c0       	rjmp	.+40     	; 0x996 <debounce+0xc8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     96e:	80 91 53 01 	lds	r24, 0x0153
     972:	90 91 54 01 	lds	r25, 0x0154
     976:	85 30       	cpi	r24, 0x05	; 5
     978:	91 05       	cpc	r25, r1
     97a:	48 f4       	brcc	.+18     	; 0x98e <debounce+0xc0>
			dit_off_count++;
     97c:	80 91 53 01 	lds	r24, 0x0153
     980:	90 91 54 01 	lds	r25, 0x0154
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	90 93 54 01 	sts	0x0154, r25
     98a:	80 93 53 01 	sts	0x0153, r24
		dit_on_count = 0;
     98e:	10 92 50 01 	sts	0x0150, r1
     992:	10 92 4f 01 	sts	0x014F, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     996:	89 e2       	ldi	r24, 0x29	; 41
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	fc 01       	movw	r30, r24
     99c:	80 81       	ld	r24, Z
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	80 71       	andi	r24, 0x10	; 16
     9a4:	90 70       	andi	r25, 0x00	; 0
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	a9 f4       	brne	.+42     	; 0x9d4 <debounce+0x106>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     9aa:	80 91 51 01 	lds	r24, 0x0151
     9ae:	90 91 52 01 	lds	r25, 0x0152
     9b2:	85 30       	cpi	r24, 0x05	; 5
     9b4:	91 05       	cpc	r25, r1
     9b6:	48 f4       	brcc	.+18     	; 0x9ca <debounce+0xfc>
			dah_on_count++;
     9b8:	80 91 51 01 	lds	r24, 0x0151
     9bc:	90 91 52 01 	lds	r25, 0x0152
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	90 93 52 01 	sts	0x0152, r25
     9c6:	80 93 51 01 	sts	0x0151, r24
		dah_off_count = 0;
     9ca:	10 92 56 01 	sts	0x0156, r1
     9ce:	10 92 55 01 	sts	0x0155, r1
     9d2:	14 c0       	rjmp	.+40     	; 0x9fc <debounce+0x12e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     9d4:	80 91 55 01 	lds	r24, 0x0155
     9d8:	90 91 56 01 	lds	r25, 0x0156
     9dc:	85 30       	cpi	r24, 0x05	; 5
     9de:	91 05       	cpc	r25, r1
     9e0:	48 f4       	brcc	.+18     	; 0x9f4 <debounce+0x126>
			dah_off_count++;
     9e2:	80 91 55 01 	lds	r24, 0x0155
     9e6:	90 91 56 01 	lds	r25, 0x0156
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	90 93 56 01 	sts	0x0156, r25
     9f0:	80 93 55 01 	sts	0x0155, r24
		dah_on_count = 0;
     9f4:	10 92 52 01 	sts	0x0152, r1
     9f8:	10 92 51 01 	sts	0x0151, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     9fc:	80 91 4f 01 	lds	r24, 0x014F
     a00:	90 91 50 01 	lds	r25, 0x0150
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	91 05       	cpc	r25, r1
     a08:	18 f0       	brcs	.+6      	; 0xa10 <debounce+0x142>
		dit_active = TRUE;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 dc 01 	sts	0x01DC, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     a10:	80 91 53 01 	lds	r24, 0x0153
     a14:	90 91 54 01 	lds	r25, 0x0154
     a18:	85 30       	cpi	r24, 0x05	; 5
     a1a:	91 05       	cpc	r25, r1
     a1c:	10 f0       	brcs	.+4      	; 0xa22 <debounce+0x154>
		dit_active = FALSE;
     a1e:	10 92 dc 01 	sts	0x01DC, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     a22:	80 91 51 01 	lds	r24, 0x0151
     a26:	90 91 52 01 	lds	r25, 0x0152
     a2a:	85 30       	cpi	r24, 0x05	; 5
     a2c:	91 05       	cpc	r25, r1
     a2e:	18 f0       	brcs	.+6      	; 0xa36 <debounce+0x168>
		dah_active = TRUE;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 c0 01 	sts	0x01C0, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     a36:	80 91 55 01 	lds	r24, 0x0155
     a3a:	90 91 56 01 	lds	r25, 0x0156
     a3e:	85 30       	cpi	r24, 0x05	; 5
     a40:	91 05       	cpc	r25, r1
     a42:	10 f0       	brcs	.+4      	; 0xa48 <debounce+0x17a>
		dah_active = FALSE;
     a44:	10 92 c0 01 	sts	0x01C0, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     a48:	89 e2       	ldi	r24, 0x29	; 41
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	84 70       	andi	r24, 0x04	; 4
     a56:	90 70       	andi	r25, 0x00	; 0
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	a1 f4       	brne	.+40     	; 0xa84 <debounce+0x1b6>
     a5c:	89 e2       	ldi	r24, 0x29	; 41
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	82 70       	andi	r24, 0x02	; 2
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	51 f4       	brne	.+20     	; 0xa84 <debounce+0x1b6>
		both_on_count++;
     a70:	80 91 5b 01 	lds	r24, 0x015B
     a74:	90 91 5c 01 	lds	r25, 0x015C
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	90 93 5c 01 	sts	0x015C, r25
     a7e:	80 93 5b 01 	sts	0x015B, r24
     a82:	25 c0       	rjmp	.+74     	; 0xace <debounce+0x200>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     a84:	80 91 5b 01 	lds	r24, 0x015B
     a88:	90 91 5c 01 	lds	r25, 0x015C
     a8c:	85 30       	cpi	r24, 0x05	; 5
     a8e:	91 05       	cpc	r25, r1
     a90:	60 f0       	brcs	.+24     	; 0xaaa <debounce+0x1dc>
     a92:	80 91 5b 01 	lds	r24, 0x015B
     a96:	90 91 5c 01 	lds	r25, 0x015C
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	84 3f       	cpi	r24, 0xF4	; 244
     a9e:	9f 07       	cpc	r25, r31
     aa0:	20 f4       	brcc	.+8      	; 0xaaa <debounce+0x1dc>
			both_btn = PRESS;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 c6 01 	sts	0x01C6, r24
     aa8:	0e c0       	rjmp	.+28     	; 0xac6 <debounce+0x1f8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     aaa:	80 91 5b 01 	lds	r24, 0x015B
     aae:	90 91 5c 01 	lds	r25, 0x015C
     ab2:	21 e0       	ldi	r18, 0x01	; 1
     ab4:	84 3f       	cpi	r24, 0xF4	; 244
     ab6:	92 07       	cpc	r25, r18
     ab8:	20 f0       	brcs	.+8      	; 0xac2 <debounce+0x1f4>
			both_btn = HOLD;
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	80 93 c6 01 	sts	0x01C6, r24
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <debounce+0x1f8>
		else
			both_btn = OFF;
     ac2:	10 92 c6 01 	sts	0x01C6, r1

		both_on_count = 0;
     ac6:	10 92 5c 01 	sts	0x015C, r1
     aca:	10 92 5b 01 	sts	0x015B, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     ace:	89 e2       	ldi	r24, 0x29	; 41
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z
     ad6:	88 2f       	mov	r24, r24
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	84 70       	andi	r24, 0x04	; 4
     adc:	90 70       	andi	r25, 0x00	; 0
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <debounce+0x228>
	{
		cmd_on_count++;
     ae2:	80 91 57 01 	lds	r24, 0x0157
     ae6:	90 91 58 01 	lds	r25, 0x0158
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	90 93 58 01 	sts	0x0158, r25
     af0:	80 93 57 01 	sts	0x0157, r24
     af4:	25 c0       	rjmp	.+74     	; 0xb40 <debounce+0x272>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     af6:	80 91 57 01 	lds	r24, 0x0157
     afa:	90 91 58 01 	lds	r25, 0x0158
     afe:	85 30       	cpi	r24, 0x05	; 5
     b00:	91 05       	cpc	r25, r1
     b02:	60 f0       	brcs	.+24     	; 0xb1c <debounce+0x24e>
     b04:	80 91 57 01 	lds	r24, 0x0157
     b08:	90 91 58 01 	lds	r25, 0x0158
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	84 3f       	cpi	r24, 0xF4	; 244
     b10:	9f 07       	cpc	r25, r31
     b12:	20 f4       	brcc	.+8      	; 0xb1c <debounce+0x24e>
			cmd_btn = PRESS;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 c7 01 	sts	0x01C7, r24
     b1a:	0e c0       	rjmp	.+28     	; 0xb38 <debounce+0x26a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     b1c:	80 91 57 01 	lds	r24, 0x0157
     b20:	90 91 58 01 	lds	r25, 0x0158
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	84 3f       	cpi	r24, 0xF4	; 244
     b28:	92 07       	cpc	r25, r18
     b2a:	20 f0       	brcs	.+8      	; 0xb34 <debounce+0x266>
			cmd_btn = HOLD;
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	80 93 c7 01 	sts	0x01C7, r24
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <debounce+0x26a>
		else
			cmd_btn = OFF;
     b34:	10 92 c7 01 	sts	0x01C7, r1

		cmd_on_count = 0;
     b38:	10 92 58 01 	sts	0x0158, r1
     b3c:	10 92 57 01 	sts	0x0157, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     b40:	89 e2       	ldi	r24, 0x29	; 41
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	fc 01       	movw	r30, r24
     b46:	80 81       	ld	r24, Z
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	82 70       	andi	r24, 0x02	; 2
     b4e:	90 70       	andi	r25, 0x00	; 0
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	51 f4       	brne	.+20     	; 0xb68 <debounce+0x29a>
		msg_on_count++;
     b54:	80 91 59 01 	lds	r24, 0x0159
     b58:	90 91 5a 01 	lds	r25, 0x015A
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	90 93 5a 01 	sts	0x015A, r25
     b62:	80 93 59 01 	sts	0x0159, r24
     b66:	25 c0       	rjmp	.+74     	; 0xbb2 <debounce+0x2e4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     b68:	80 91 59 01 	lds	r24, 0x0159
     b6c:	90 91 5a 01 	lds	r25, 0x015A
     b70:	85 30       	cpi	r24, 0x05	; 5
     b72:	91 05       	cpc	r25, r1
     b74:	60 f0       	brcs	.+24     	; 0xb8e <debounce+0x2c0>
     b76:	80 91 59 01 	lds	r24, 0x0159
     b7a:	90 91 5a 01 	lds	r25, 0x015A
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	84 3f       	cpi	r24, 0xF4	; 244
     b82:	9f 07       	cpc	r25, r31
     b84:	20 f4       	brcc	.+8      	; 0xb8e <debounce+0x2c0>
			msg_btn = PRESS;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 c5 01 	sts	0x01C5, r24
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <debounce+0x2dc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     b8e:	80 91 59 01 	lds	r24, 0x0159
     b92:	90 91 5a 01 	lds	r25, 0x015A
     b96:	21 e0       	ldi	r18, 0x01	; 1
     b98:	84 3f       	cpi	r24, 0xF4	; 244
     b9a:	92 07       	cpc	r25, r18
     b9c:	20 f0       	brcs	.+8      	; 0xba6 <debounce+0x2d8>
			msg_btn = HOLD;
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	80 93 c5 01 	sts	0x01C5, r24
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <debounce+0x2dc>
		else
			msg_btn = OFF;
     ba6:	10 92 c5 01 	sts	0x01C5, r1

		msg_on_count = 0;
     baa:	10 92 5a 01 	sts	0x015A, r1
     bae:	10 92 59 01 	sts	0x0159, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     bb2:	89 e2       	ldi	r24, 0x29	; 41
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	fc 01       	movw	r30, r24
     bb8:	80 81       	ld	r24, Z
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	81 70       	andi	r24, 0x01	; 1
     bc0:	90 70       	andi	r25, 0x00	; 0
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	51 f4       	brne	.+20     	; 0xbda <debounce+0x30c>
		enc_on_count++;
     bc6:	80 91 5d 01 	lds	r24, 0x015D
     bca:	90 91 5e 01 	lds	r25, 0x015E
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	90 93 5e 01 	sts	0x015E, r25
     bd4:	80 93 5d 01 	sts	0x015D, r24
     bd8:	25 c0       	rjmp	.+74     	; 0xc24 <debounce+0x356>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     bda:	80 91 5d 01 	lds	r24, 0x015D
     bde:	90 91 5e 01 	lds	r25, 0x015E
     be2:	85 30       	cpi	r24, 0x05	; 5
     be4:	91 05       	cpc	r25, r1
     be6:	60 f0       	brcs	.+24     	; 0xc00 <debounce+0x332>
     be8:	80 91 5d 01 	lds	r24, 0x015D
     bec:	90 91 5e 01 	lds	r25, 0x015E
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	84 3f       	cpi	r24, 0xF4	; 244
     bf4:	9f 07       	cpc	r25, r31
     bf6:	20 f4       	brcc	.+8      	; 0xc00 <debounce+0x332>
			enc_btn = PRESS;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 d3 01 	sts	0x01D3, r24
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <debounce+0x34e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     c00:	80 91 5d 01 	lds	r24, 0x015D
     c04:	90 91 5e 01 	lds	r25, 0x015E
     c08:	21 e0       	ldi	r18, 0x01	; 1
     c0a:	84 3f       	cpi	r24, 0xF4	; 244
     c0c:	92 07       	cpc	r25, r18
     c0e:	20 f0       	brcs	.+8      	; 0xc18 <debounce+0x34a>
			enc_btn = HOLD;
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	80 93 d3 01 	sts	0x01D3, r24
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <debounce+0x34e>
		else
			enc_btn = OFF;
     c18:	10 92 d3 01 	sts	0x01D3, r1

		enc_on_count = 0;
     c1c:	10 92 5e 01 	sts	0x015E, r1
     c20:	10 92 5d 01 	sts	0x015D, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     c24:	83 e2       	ldi	r24, 0x23	; 35
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	fc 01       	movw	r30, r24
     c2a:	80 81       	ld	r24, Z
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	81 70       	andi	r24, 0x01	; 1
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	a9 f4       	brne	.+42     	; 0xc62 <debounce+0x394>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     c38:	80 91 5f 01 	lds	r24, 0x015F
     c3c:	90 91 60 01 	lds	r25, 0x0160
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	91 05       	cpc	r25, r1
     c44:	48 f4       	brcc	.+18     	; 0xc58 <debounce+0x38a>
			enca_on_count++;
     c46:	80 91 5f 01 	lds	r24, 0x015F
     c4a:	90 91 60 01 	lds	r25, 0x0160
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	90 93 60 01 	sts	0x0160, r25
     c54:	80 93 5f 01 	sts	0x015F, r24
		enca_off_count = 0;
     c58:	10 92 64 01 	sts	0x0164, r1
     c5c:	10 92 63 01 	sts	0x0163, r1
     c60:	14 c0       	rjmp	.+40     	; 0xc8a <debounce+0x3bc>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     c62:	80 91 63 01 	lds	r24, 0x0163
     c66:	90 91 64 01 	lds	r25, 0x0164
     c6a:	85 30       	cpi	r24, 0x05	; 5
     c6c:	91 05       	cpc	r25, r1
     c6e:	48 f4       	brcc	.+18     	; 0xc82 <debounce+0x3b4>
			enca_off_count++;
     c70:	80 91 63 01 	lds	r24, 0x0163
     c74:	90 91 64 01 	lds	r25, 0x0164
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	90 93 64 01 	sts	0x0164, r25
     c7e:	80 93 63 01 	sts	0x0163, r24
		enca_on_count = 0;
     c82:	10 92 60 01 	sts	0x0160, r1
     c86:	10 92 5f 01 	sts	0x015F, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     c8a:	89 e2       	ldi	r24, 0x29	; 41
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	fc 01       	movw	r30, r24
     c90:	80 81       	ld	r24, Z
     c92:	88 23       	and	r24, r24
     c94:	ac f0       	brlt	.+42     	; 0xcc0 <debounce+0x3f2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     c96:	80 91 61 01 	lds	r24, 0x0161
     c9a:	90 91 62 01 	lds	r25, 0x0162
     c9e:	85 30       	cpi	r24, 0x05	; 5
     ca0:	91 05       	cpc	r25, r1
     ca2:	48 f4       	brcc	.+18     	; 0xcb6 <debounce+0x3e8>
			encb_on_count++;
     ca4:	80 91 61 01 	lds	r24, 0x0161
     ca8:	90 91 62 01 	lds	r25, 0x0162
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	90 93 62 01 	sts	0x0162, r25
     cb2:	80 93 61 01 	sts	0x0161, r24
		encb_off_count = 0;
     cb6:	10 92 66 01 	sts	0x0166, r1
     cba:	10 92 65 01 	sts	0x0165, r1
     cbe:	14 c0       	rjmp	.+40     	; 0xce8 <debounce+0x41a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     cc0:	80 91 65 01 	lds	r24, 0x0165
     cc4:	90 91 66 01 	lds	r25, 0x0166
     cc8:	85 30       	cpi	r24, 0x05	; 5
     cca:	91 05       	cpc	r25, r1
     ccc:	48 f4       	brcc	.+18     	; 0xce0 <debounce+0x412>
			encb_off_count++;
     cce:	80 91 65 01 	lds	r24, 0x0165
     cd2:	90 91 66 01 	lds	r25, 0x0166
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	90 93 66 01 	sts	0x0166, r25
     cdc:	80 93 65 01 	sts	0x0165, r24
		encb_on_count = 0;
     ce0:	10 92 62 01 	sts	0x0162, r1
     ce4:	10 92 61 01 	sts	0x0161, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     ce8:	80 91 5f 01 	lds	r24, 0x015F
     cec:	90 91 60 01 	lds	r25, 0x0160
     cf0:	85 30       	cpi	r24, 0x05	; 5
     cf2:	91 05       	cpc	r25, r1
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <debounce+0x42e>
		enc_a = TRUE;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	80 93 67 01 	sts	0x0167, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     cfc:	80 91 63 01 	lds	r24, 0x0163
     d00:	90 91 64 01 	lds	r25, 0x0164
     d04:	85 30       	cpi	r24, 0x05	; 5
     d06:	91 05       	cpc	r25, r1
     d08:	10 f0       	brcs	.+4      	; 0xd0e <debounce+0x440>
		enc_a = FALSE;
     d0a:	10 92 67 01 	sts	0x0167, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     d0e:	80 91 61 01 	lds	r24, 0x0161
     d12:	90 91 62 01 	lds	r25, 0x0162
     d16:	85 30       	cpi	r24, 0x05	; 5
     d18:	91 05       	cpc	r25, r1
     d1a:	18 f0       	brcs	.+6      	; 0xd22 <debounce+0x454>
		enc_b = TRUE;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 f1 01 	sts	0x01F1, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     d22:	80 91 65 01 	lds	r24, 0x0165
     d26:	90 91 66 01 	lds	r25, 0x0166
     d2a:	85 30       	cpi	r24, 0x05	; 5
     d2c:	91 05       	cpc	r25, r1
     d2e:	10 f0       	brcs	.+4      	; 0xd34 <debounce+0x466>
		enc_b = FALSE;
     d30:	10 92 f1 01 	sts	0x01F1, r1
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
		allow_sleep = FALSE;
	else
		allow_sleep = TRUE;
		*/
}
     d34:	0f 90       	pop	r0
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <announce>:

void announce(char * msg, uint16_t freq, uint8_t speed)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <announce+0x6>
     d42:	00 d0       	rcall	.+0      	; 0xd44 <announce+0x8>
     d44:	0f 92       	push	r0
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	7c 83       	std	Y+4, r23	; 0x04
     d50:	6b 83       	std	Y+3, r22	; 0x03
     d52:	4d 83       	std	Y+5, r20	; 0x05
	// Convert to uppercase
	strupr(msg);
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	0e 94 21 1b 	call	0x3642	; 0x3642 <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     d5c:	80 91 eb 01 	lds	r24, 0x01EB
     d60:	90 91 ec 01 	lds	r25, 0x01EC
     d64:	29 81       	ldd	r18, Y+1	; 0x01
     d66:	3a 81       	ldd	r19, Y+2	; 0x02
     d68:	b9 01       	movw	r22, r18
     d6a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     d6e:	80 91 c8 01 	lds	r24, 0x01C8
     d72:	80 93 72 01 	sts	0x0172, r24
	prev_state_end = cur_state_end;
     d76:	80 91 d4 01 	lds	r24, 0x01D4
     d7a:	90 91 d5 01 	lds	r25, 0x01D5
     d7e:	a0 91 d6 01 	lds	r26, 0x01D6
     d82:	b0 91 d7 01 	lds	r27, 0x01D7
     d86:	80 93 b4 01 	sts	0x01B4, r24
     d8a:	90 93 b5 01 	sts	0x01B5, r25
     d8e:	a0 93 b6 01 	sts	0x01B6, r26
     d92:	b0 93 b7 01 	sts	0x01B7, r27
	prev_mode = cur_mode;
     d96:	80 91 a2 01 	lds	r24, 0x01A2
     d9a:	80 93 b8 01 	sts	0x01B8, r24
	prev_st_freq = st_freq;
     d9e:	80 91 ba 01 	lds	r24, 0x01BA
     da2:	90 91 bb 01 	lds	r25, 0x01BB
     da6:	90 93 cc 01 	sts	0x01CC, r25
     daa:	80 93 cb 01 	sts	0x01CB, r24
	st_freq = freq;
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	90 93 bb 01 	sts	0x01BB, r25
     db6:	80 93 ba 01 	sts	0x01BA, r24
	prev_wpm = wpm;
     dba:	80 91 e6 01 	lds	r24, 0x01E6
     dbe:	80 93 f2 01 	sts	0x01F2, r24
	wpm = speed;
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	80 93 e6 01 	sts	0x01E6, r24

	set_st_freq(st_freq);
     dc8:	80 91 ba 01 	lds	r24, 0x01BA
     dcc:	90 91 bb 01 	lds	r25, 0x01BB
     dd0:	cc 01       	movw	r24, r24
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 2e 0c 	call	0x185c	; 0x185c <set_st_freq>
	set_wpm(wpm);
     dde:	80 91 e6 01 	lds	r24, 0x01E6
     de2:	0e 94 4f 04 	call	0x89e	; 0x89e <set_wpm>

	// Set into announce mode
	cur_state = IDLE;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 c8 01 	sts	0x01C8, r24
	cur_mode = ANNOUNCE;
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	80 93 a2 01 	sts	0x01A2, r24
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <read_voltage>:

void read_voltage(void)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <read_voltage+0x6>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <read_voltage+0x8>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <read_voltage+0xa>
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     e10:	8a e0       	ldi	r24, 0x0A	; 10
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 d7 19 	call	0x33ae	; 0x33ae <malloc>
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     e1c:	8a e7       	ldi	r24, 0x7A	; 122
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	2a e7       	ldi	r18, 0x7A	; 122
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	d9 01       	movw	r26, r18
     e26:	2c 91       	ld	r18, X
     e28:	20 64       	ori	r18, 0x40	; 64
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     e2e:	8a e7       	ldi	r24, 0x7A	; 122
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	dc 01       	movw	r26, r24
     e34:	8c 91       	ld	r24, X
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	80 74       	andi	r24, 0x40	; 64
     e3c:	90 70       	andi	r25, 0x00	; 0
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	b1 f7       	brne	.-20     	; 0xe2e <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     e42:	89 e7       	ldi	r24, 0x79	; 121
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	fc 01       	movw	r30, r24
     e48:	80 81       	ld	r24, Z
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 16.1 V
	// We'll use fixed point numbers, so full scale is 161 * 0.1 V
	vcc = (vcc_mon * 161) / 256;
     e52:	4b 81       	ldd	r20, Y+3	; 0x03
     e54:	5c 81       	ldd	r21, Y+4	; 0x04
     e56:	21 ea       	ldi	r18, 0xA1	; 161
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	42 9f       	mul	r20, r18
     e5c:	c0 01       	movw	r24, r0
     e5e:	43 9f       	mul	r20, r19
     e60:	90 0d       	add	r25, r0
     e62:	52 9f       	mul	r21, r18
     e64:	90 0d       	add	r25, r0
     e66:	11 24       	eor	r1, r1
     e68:	89 2f       	mov	r24, r25
     e6a:	99 27       	eor	r25, r25
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	2a e0       	ldi	r18, 0x0A	; 10
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	b9 01       	movw	r22, r18
     e7a:	0e 94 8e 19 	call	0x331c	; 0x331c <__udivmodhi4>
     e7e:	9b 01       	movw	r18, r22
     e80:	f9 01       	movw	r30, r18
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	2a e0       	ldi	r18, 0x0A	; 10
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	b9 01       	movw	r22, r18
     e8c:	0e 94 8e 19 	call	0x331c	; 0x331c <__udivmodhi4>
     e90:	9c 01       	movw	r18, r24
     e92:	8d b7       	in	r24, 0x3d	; 61
     e94:	9e b7       	in	r25, 0x3e	; 62
     e96:	08 97       	sbiw	r24, 0x08	; 8
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	9e bf       	out	0x3e, r25	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	8d bf       	out	0x3d, r24	; 61
     ea2:	8d b7       	in	r24, 0x3d	; 61
     ea4:	9e b7       	in	r25, 0x3e	; 62
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	49 81       	ldd	r20, Y+1	; 0x01
     eaa:	5a 81       	ldd	r21, Y+2	; 0x02
     eac:	dc 01       	movw	r26, r24
     eae:	4d 93       	st	X+, r20
     eb0:	5c 93       	st	X, r21
     eb2:	4b e0       	ldi	r20, 0x0B	; 11
     eb4:	51 e0       	ldi	r21, 0x01	; 1
     eb6:	dc 01       	movw	r26, r24
     eb8:	13 96       	adiw	r26, 0x03	; 3
     eba:	5c 93       	st	X, r21
     ebc:	4e 93       	st	-X, r20
     ebe:	12 97       	sbiw	r26, 0x02	; 2
     ec0:	dc 01       	movw	r26, r24
     ec2:	15 96       	adiw	r26, 0x05	; 5
     ec4:	fc 93       	st	X, r31
     ec6:	ee 93       	st	-X, r30
     ec8:	14 97       	sbiw	r26, 0x04	; 4
     eca:	fc 01       	movw	r30, r24
     ecc:	37 83       	std	Z+7, r19	; 0x07
     ece:	26 83       	std	Z+6, r18	; 0x06
     ed0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <sprintf>
     ed4:	8d b7       	in	r24, 0x3d	; 61
     ed6:	9e b7       	in	r25, 0x3e	; 62
     ed8:	08 96       	adiw	r24, 0x08	; 8
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	9e bf       	out	0x3e, r25	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq, wpm);
     ee4:	20 91 ba 01 	lds	r18, 0x01BA
     ee8:	30 91 bb 01 	lds	r19, 0x01BB
     eec:	40 91 e6 01 	lds	r20, 0x01E6
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	b9 01       	movw	r22, r18
     ef6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>

	free(vcc_out);
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <free>
}
     f02:	26 96       	adiw	r28, 0x06	; 6
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <count_frequency>:

void count_frequency(void)
{
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <count_frequency+0xa>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     f22:	8f e0       	ldi	r24, 0x0F	; 15
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 d7 19 	call	0x33ae	; 0x33ae <malloc>
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     f2e:	80 91 e2 01 	lds	r24, 0x01E2
     f32:	90 91 e3 01 	lds	r25, 0x01E3
     f36:	a0 91 e4 01 	lds	r26, 0x01E4
     f3a:	b0 91 e5 01 	lds	r27, 0x01E5
     f3e:	28 ee       	ldi	r18, 0xE8	; 232
     f40:	33 e0       	ldi	r19, 0x03	; 3
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodsi4>
     f4e:	da 01       	movw	r26, r20
     f50:	c9 01       	movw	r24, r18
     f52:	24 e6       	ldi	r18, 0x64	; 100
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodsi4>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	8c 01       	movw	r16, r24
     f68:	80 91 e2 01 	lds	r24, 0x01E2
     f6c:	90 91 e3 01 	lds	r25, 0x01E3
     f70:	a0 91 e4 01 	lds	r26, 0x01E4
     f74:	b0 91 e5 01 	lds	r27, 0x01E5
     f78:	28 ee       	ldi	r18, 0xE8	; 232
     f7a:	33 e0       	ldi	r19, 0x03	; 3
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodsi4>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	2a e0       	ldi	r18, 0x0A	; 10
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodsi4>
     f9c:	da 01       	movw	r26, r20
     f9e:	c9 01       	movw	r24, r18
     fa0:	9c 01       	movw	r18, r24
     fa2:	8d b7       	in	r24, 0x3d	; 61
     fa4:	9e b7       	in	r25, 0x3e	; 62
     fa6:	08 97       	sbiw	r24, 0x08	; 8
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	9e bf       	out	0x3e, r25	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	8d bf       	out	0x3d, r24	; 61
     fb2:	8d b7       	in	r24, 0x3d	; 61
     fb4:	9e b7       	in	r25, 0x3e	; 62
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	49 81       	ldd	r20, Y+1	; 0x01
     fba:	5a 81       	ldd	r21, Y+2	; 0x02
     fbc:	fc 01       	movw	r30, r24
     fbe:	51 83       	std	Z+1, r21	; 0x01
     fc0:	40 83       	st	Z, r20
     fc2:	41 e1       	ldi	r20, 0x11	; 17
     fc4:	51 e0       	ldi	r21, 0x01	; 1
     fc6:	fc 01       	movw	r30, r24
     fc8:	53 83       	std	Z+3, r21	; 0x03
     fca:	42 83       	std	Z+2, r20	; 0x02
     fcc:	fc 01       	movw	r30, r24
     fce:	15 83       	std	Z+5, r17	; 0x05
     fd0:	04 83       	std	Z+4, r16	; 0x04
     fd2:	fc 01       	movw	r30, r24
     fd4:	37 83       	std	Z+7, r19	; 0x07
     fd6:	26 83       	std	Z+6, r18	; 0x06
     fd8:	0e 94 2b 1b 	call	0x3656	; 0x3656 <sprintf>
     fdc:	8d b7       	in	r24, 0x3d	; 61
     fde:	9e b7       	in	r25, 0x3e	; 62
     fe0:	08 96       	adiw	r24, 0x08	; 8
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	9e bf       	out	0x3e, r25	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out, st_freq, wpm);
     fec:	20 91 ba 01 	lds	r18, 0x01BA
     ff0:	30 91 bb 01 	lds	r19, 0x01BB
     ff4:	40 91 e6 01 	lds	r20, 0x01E6
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	b9 01       	movw	r22, r18
     ffe:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>

	free(freq_out);
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <free>
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	08 95       	ret

00001018 <poll_buttons>:

void poll_buttons(void)
{
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
    102a:	80 91 c6 01 	lds	r24, 0x01C6
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	f9 f4       	brne	.+62     	; 0x1070 <poll_buttons+0x58>
	{
		cur_state = IDLE;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 c8 01 	sts	0x01C8, r24
		prev_mode = cur_mode;
    1038:	80 91 a2 01 	lds	r24, 0x01A2
    103c:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = TUNE;
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	80 93 a2 01 	sts	0x01A2, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1046:	80 91 68 01 	lds	r24, 0x0168
    104a:	90 91 69 01 	lds	r25, 0x0169
    104e:	a0 91 6a 01 	lds	r26, 0x016A
    1052:	b0 91 6b 01 	lds	r27, 0x016B
    1056:	84 5d       	subi	r24, 0xD4	; 212
    1058:	9e 4f       	sbci	r25, 0xFE	; 254
    105a:	af 4f       	sbci	r26, 0xFF	; 255
    105c:	bf 4f       	sbci	r27, 0xFF	; 255
    105e:	80 93 cd 01 	sts	0x01CD, r24
    1062:	90 93 ce 01 	sts	0x01CE, r25
    1066:	a0 93 cf 01 	sts	0x01CF, r26
    106a:	b0 93 d0 01 	sts	0x01D0, r27
    106e:	72 c0       	rjmp	.+228    	; 0x1154 <poll_buttons+0x13c>
	}
	else if(cmd_btn == PRESS)
    1070:	80 91 c7 01 	lds	r24, 0x01C7
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	f9 f4       	brne	.+62     	; 0x10b6 <poll_buttons+0x9e>
	{
		prev_mode = cur_mode;
    1078:	80 91 a2 01 	lds	r24, 0x01A2
    107c:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = MENU;
    1080:	84 e0       	ldi	r24, 0x04	; 4
    1082:	80 93 a2 01 	sts	0x01A2, r24
		cur_state = IDLE;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	80 93 c8 01 	sts	0x01C8, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    108c:	80 91 68 01 	lds	r24, 0x0168
    1090:	90 91 69 01 	lds	r25, 0x0169
    1094:	a0 91 6a 01 	lds	r26, 0x016A
    1098:	b0 91 6b 01 	lds	r27, 0x016B
    109c:	84 5d       	subi	r24, 0xD4	; 212
    109e:	9e 4f       	sbci	r25, 0xFE	; 254
    10a0:	af 4f       	sbci	r26, 0xFF	; 255
    10a2:	bf 4f       	sbci	r27, 0xFF	; 255
    10a4:	80 93 cd 01 	sts	0x01CD, r24
    10a8:	90 93 ce 01 	sts	0x01CE, r25
    10ac:	a0 93 cf 01 	sts	0x01CF, r26
    10b0:	b0 93 d0 01 	sts	0x01D0, r27
    10b4:	4f c0       	rjmp	.+158    	; 0x1154 <poll_buttons+0x13c>
	}
	else if(msg_btn == PRESS)
    10b6:	80 91 c5 01 	lds	r24, 0x01C5
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	b9 f4       	brne	.+46     	; 0x10ec <poll_buttons+0xd4>
	{
		count_frequency();
    10be:	0e 94 8a 07 	call	0xf14	; 0xf14 <count_frequency>
		sleep_timer = cur_timer + SLEEP_DELAY;
    10c2:	80 91 68 01 	lds	r24, 0x0168
    10c6:	90 91 69 01 	lds	r25, 0x0169
    10ca:	a0 91 6a 01 	lds	r26, 0x016A
    10ce:	b0 91 6b 01 	lds	r27, 0x016B
    10d2:	84 5d       	subi	r24, 0xD4	; 212
    10d4:	9e 4f       	sbci	r25, 0xFE	; 254
    10d6:	af 4f       	sbci	r26, 0xFF	; 255
    10d8:	bf 4f       	sbci	r27, 0xFF	; 255
    10da:	80 93 cd 01 	sts	0x01CD, r24
    10de:	90 93 ce 01 	sts	0x01CE, r25
    10e2:	a0 93 cf 01 	sts	0x01CF, r26
    10e6:	b0 93 d0 01 	sts	0x01D0, r27
    10ea:	34 c0       	rjmp	.+104    	; 0x1154 <poll_buttons+0x13c>
	}
	else if(msg_btn == HOLD)
    10ec:	80 91 c5 01 	lds	r24, 0x01C5
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	81 f5       	brne	.+96     	; 0x1154 <poll_buttons+0x13c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
    10f4:	85 e7       	ldi	r24, 0x75	; 117
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	22 e0       	ldi	r18, 0x02	; 2
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	b9 01       	movw	r22, r18
    10fe:	48 e2       	ldi	r20, 0x28	; 40
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
    1106:	80 91 eb 01 	lds	r24, 0x01EB
    110a:	90 91 ec 01 	lds	r25, 0x01EC
    110e:	25 e7       	ldi	r18, 0x75	; 117
    1110:	31 e0       	ldi	r19, 0x01	; 1
    1112:	b9 01       	movw	r22, r18
    1114:	0e 94 1a 1b 	call	0x3634	; 0x3634 <strcpy>
		cur_state = IDLE;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 93 c8 01 	sts	0x01C8, r24
		prev_mode = cur_mode;
    111e:	80 91 a2 01 	lds	r24, 0x01A2
    1122:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = PLAYBACK;
    1126:	86 e0       	ldi	r24, 0x06	; 6
    1128:	80 93 a2 01 	sts	0x01A2, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    112c:	80 91 68 01 	lds	r24, 0x0168
    1130:	90 91 69 01 	lds	r25, 0x0169
    1134:	a0 91 6a 01 	lds	r26, 0x016A
    1138:	b0 91 6b 01 	lds	r27, 0x016B
    113c:	84 5d       	subi	r24, 0xD4	; 212
    113e:	9e 4f       	sbci	r25, 0xFE	; 254
    1140:	af 4f       	sbci	r26, 0xFF	; 255
    1142:	bf 4f       	sbci	r27, 0xFF	; 255
    1144:	80 93 cd 01 	sts	0x01CD, r24
    1148:	90 93 ce 01 	sts	0x01CE, r25
    114c:	a0 93 cf 01 	sts	0x01CF, r26
    1150:	b0 93 d0 01 	sts	0x01D0, r27
	}

	if(enc_btn == PRESS)
    1154:	80 91 d3 01 	lds	r24, 0x01D3
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	09 f0       	breq	.+2      	; 0x115e <poll_buttons+0x146>
    115c:	77 c0       	rjmp	.+238    	; 0x124c <poll_buttons+0x234>
	{
		// If we are in normal tuning mode, pressing the tune knob toggles tuning rates
		if(inc_tune_state == NONE)
    115e:	80 91 d2 01 	lds	r24, 0x01D2
    1162:	88 23       	and	r24, r24
    1164:	09 f0       	breq	.+2      	; 0x1168 <poll_buttons+0x150>
    1166:	59 c0       	rjmp	.+178    	; 0x121a <poll_buttons+0x202>
		{
			if(tune_rate == FAST)
    1168:	80 91 06 01 	lds	r24, 0x0106
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	51 f5       	brne	.+84     	; 0x11c4 <poll_buttons+0x1ac>
			{
				tune_rate = SLOW;
    1170:	10 92 06 01 	sts	0x0106, r1
				tune_step = DDS_20HZ;
    1174:	84 e3       	ldi	r24, 0x34	; 52
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	90 93 08 01 	sts	0x0108, r25
    117c:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 5;
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	80 93 09 01 	sts	0x0109, r24
				sleep_timer = cur_timer + SLEEP_DELAY;
    1186:	80 91 68 01 	lds	r24, 0x0168
    118a:	90 91 69 01 	lds	r25, 0x0169
    118e:	a0 91 6a 01 	lds	r26, 0x016A
    1192:	b0 91 6b 01 	lds	r27, 0x016B
    1196:	84 5d       	subi	r24, 0xD4	; 212
    1198:	9e 4f       	sbci	r25, 0xFE	; 254
    119a:	af 4f       	sbci	r26, 0xFF	; 255
    119c:	bf 4f       	sbci	r27, 0xFF	; 255
    119e:	80 93 cd 01 	sts	0x01CD, r24
    11a2:	90 93 ce 01 	sts	0x01CE, r25
    11a6:	a0 93 cf 01 	sts	0x01CF, r26
    11aa:	b0 93 d0 01 	sts	0x01D0, r27
				debounce(TRUE);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
				announce("S", ST_LOW, 25);
    11b4:	8b e1       	ldi	r24, 0x1B	; 27
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	60 e9       	ldi	r22, 0x90	; 144
    11ba:	71 e0       	ldi	r23, 0x01	; 1
    11bc:	49 e1       	ldi	r20, 0x19	; 25
    11be:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
    11c2:	62 c1       	rjmp	.+708    	; 0x1488 <poll_buttons+0x470>
			}
			else
			{
				tune_rate = FAST;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 93 06 01 	sts	0x0106, r24
				tune_step = DDS_100HZ;
    11ca:	8c e0       	ldi	r24, 0x0C	; 12
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	90 93 08 01 	sts	0x0108, r25
    11d2:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 25;
    11d6:	89 e1       	ldi	r24, 0x19	; 25
    11d8:	80 93 09 01 	sts	0x0109, r24
				sleep_timer = cur_timer + SLEEP_DELAY;
    11dc:	80 91 68 01 	lds	r24, 0x0168
    11e0:	90 91 69 01 	lds	r25, 0x0169
    11e4:	a0 91 6a 01 	lds	r26, 0x016A
    11e8:	b0 91 6b 01 	lds	r27, 0x016B
    11ec:	84 5d       	subi	r24, 0xD4	; 212
    11ee:	9e 4f       	sbci	r25, 0xFE	; 254
    11f0:	af 4f       	sbci	r26, 0xFF	; 255
    11f2:	bf 4f       	sbci	r27, 0xFF	; 255
    11f4:	80 93 cd 01 	sts	0x01CD, r24
    11f8:	90 93 ce 01 	sts	0x01CE, r25
    11fc:	a0 93 cf 01 	sts	0x01CF, r26
    1200:	b0 93 d0 01 	sts	0x01D0, r27
				debounce(TRUE);
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
				announce("S", ST_HIGH, 25);
    120a:	8b e1       	ldi	r24, 0x1B	; 27
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	64 e8       	ldi	r22, 0x84	; 132
    1210:	73 e0       	ldi	r23, 0x03	; 3
    1212:	49 e1       	ldi	r20, 0x19	; 25
    1214:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
    1218:	37 c1       	rjmp	.+622    	; 0x1488 <poll_buttons+0x470>
			}
		}
		// Otherwise if we are in RIT or XIT, pressing the tune knob toggles between the two VFOs
		else
		{
			if(tune_reg == REG_0)
    121a:	80 91 d1 01 	lds	r24, 0x01D1
    121e:	88 23       	and	r24, r24
    1220:	59 f4       	brne	.+22     	; 0x1238 <poll_buttons+0x220>
			{
				tune_reg = REG_1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 d1 01 	sts	0x01D1, r24
				announce("T", ST_LOW, 25);
    1228:	8d e1       	ldi	r24, 0x1D	; 29
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	60 e9       	ldi	r22, 0x90	; 144
    122e:	71 e0       	ldi	r23, 0x01	; 1
    1230:	49 e1       	ldi	r20, 0x19	; 25
    1232:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
    1236:	28 c1       	rjmp	.+592    	; 0x1488 <poll_buttons+0x470>
			}
			else
			{
				tune_reg = REG_0;
    1238:	10 92 d1 01 	sts	0x01D1, r1
				announce("R", ST_LOW, 25);
    123c:	8f e1       	ldi	r24, 0x1F	; 31
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	60 e9       	ldi	r22, 0x90	; 144
    1242:	71 e0       	ldi	r23, 0x01	; 1
    1244:	49 e1       	ldi	r20, 0x19	; 25
    1246:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
    124a:	1e c1       	rjmp	.+572    	; 0x1488 <poll_buttons+0x470>
			}
		}
	}
	else if(enc_btn == HOLD)
    124c:	80 91 d3 01 	lds	r24, 0x01D3
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	09 f0       	breq	.+2      	; 0x1256 <poll_buttons+0x23e>
    1254:	19 c1       	rjmp	.+562    	; 0x1488 <poll_buttons+0x470>
	{
		// Rotate through the 3 states
		inc_tune_state++;
    1256:	80 91 d2 01 	lds	r24, 0x01D2
    125a:	8f 5f       	subi	r24, 0xFF	; 255
    125c:	80 93 d2 01 	sts	0x01D2, r24
		if(inc_tune_state > 2)
    1260:	80 91 d2 01 	lds	r24, 0x01D2
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	10 f0       	brcs	.+4      	; 0x126c <poll_buttons+0x254>
			inc_tune_state = NONE;
    1268:	10 92 d2 01 	sts	0x01D2, r1

		switch(inc_tune_state)
    126c:	80 91 d2 01 	lds	r24, 0x01D2
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	29 f0       	breq	.+10     	; 0x1284 <poll_buttons+0x26c>
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <poll_buttons+0x26a>
    1280:	4d c0       	rjmp	.+154    	; 0x131c <poll_buttons+0x304>
    1282:	ad c0       	rjmp	.+346    	; 0x13de <poll_buttons+0x3c6>
		{
			case RIT:
				RIT_LED_DDR |= _BV(RIT_LED);
    1284:	87 e2       	ldi	r24, 0x27	; 39
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	27 e2       	ldi	r18, 0x27	; 39
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	f9 01       	movw	r30, r18
    128e:	20 81       	ld	r18, Z
    1290:	22 60       	ori	r18, 0x02	; 2
    1292:	fc 01       	movw	r30, r24
    1294:	20 83       	st	Z, r18
				//RIT_LED_PORT |= _BV(RIT_LED);
				dds_rit_freq_word = dds_freq_word;
    1296:	80 91 ac 01 	lds	r24, 0x01AC
    129a:	90 91 ad 01 	lds	r25, 0x01AD
    129e:	a0 91 ae 01 	lds	r26, 0x01AE
    12a2:	b0 91 af 01 	lds	r27, 0x01AF
    12a6:	80 93 bc 01 	sts	0x01BC, r24
    12aa:	90 93 bd 01 	sts	0x01BD, r25
    12ae:	a0 93 be 01 	sts	0x01BE, r26
    12b2:	b0 93 bf 01 	sts	0x01BF, r27
				tune_dds(dds_rit_freq_word, REG_1, FALSE);
    12b6:	80 91 bc 01 	lds	r24, 0x01BC
    12ba:	90 91 bd 01 	lds	r25, 0x01BD
    12be:	a0 91 be 01 	lds	r26, 0x01BE
    12c2:	b0 91 bf 01 	lds	r27, 0x01BF
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	41 e0       	ldi	r20, 0x01	; 1
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <tune_dds>
				tune_reg = REG_0;
    12d2:	10 92 d1 01 	sts	0x01D1, r1
				set_dds_freq_reg(tune_reg);
    12d6:	80 91 d1 01 	lds	r24, 0x01D1
    12da:	0e 94 18 0c 	call	0x1830	; 0x1830 <set_dds_freq_reg>
				debounce(TRUE);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    12e4:	80 91 68 01 	lds	r24, 0x0168
    12e8:	90 91 69 01 	lds	r25, 0x0169
    12ec:	a0 91 6a 01 	lds	r26, 0x016A
    12f0:	b0 91 6b 01 	lds	r27, 0x016B
    12f4:	84 5d       	subi	r24, 0xD4	; 212
    12f6:	9e 4f       	sbci	r25, 0xFE	; 254
    12f8:	af 4f       	sbci	r26, 0xFF	; 255
    12fa:	bf 4f       	sbci	r27, 0xFF	; 255
    12fc:	80 93 cd 01 	sts	0x01CD, r24
    1300:	90 93 ce 01 	sts	0x01CE, r25
    1304:	a0 93 cf 01 	sts	0x01CF, r26
    1308:	b0 93 d0 01 	sts	0x01D0, r27
				announce("R", ST_HIGH, 25);
    130c:	8f e1       	ldi	r24, 0x1F	; 31
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	64 e8       	ldi	r22, 0x84	; 132
    1312:	73 e0       	ldi	r23, 0x03	; 3
    1314:	49 e1       	ldi	r20, 0x19	; 25
    1316:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
				break;
    131a:	b6 c0       	rjmp	.+364    	; 0x1488 <poll_buttons+0x470>

			case XIT:
				RIT_LED_DDR |= _BV(RIT_LED);
    131c:	87 e2       	ldi	r24, 0x27	; 39
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	27 e2       	ldi	r18, 0x27	; 39
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	f9 01       	movw	r30, r18
    1326:	20 81       	ld	r18, Z
    1328:	22 60       	ori	r18, 0x02	; 2
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
				//RIT_LED_PORT |= _BV(RIT_LED);
				led_toggle = cur_timer + XIT_BLINK;
    132e:	80 91 68 01 	lds	r24, 0x0168
    1332:	90 91 69 01 	lds	r25, 0x0169
    1336:	a0 91 6a 01 	lds	r26, 0x016A
    133a:	b0 91 6b 01 	lds	r27, 0x016B
    133e:	8c 50       	subi	r24, 0x0C	; 12
    1340:	9e 4f       	sbci	r25, 0xFE	; 254
    1342:	af 4f       	sbci	r26, 0xFF	; 255
    1344:	bf 4f       	sbci	r27, 0xFF	; 255
    1346:	80 93 dd 01 	sts	0x01DD, r24
    134a:	90 93 de 01 	sts	0x01DE, r25
    134e:	a0 93 df 01 	sts	0x01DF, r26
    1352:	b0 93 e0 01 	sts	0x01E0, r27
				dds_xit_freq_word = dds_freq_word;
    1356:	80 91 ac 01 	lds	r24, 0x01AC
    135a:	90 91 ad 01 	lds	r25, 0x01AD
    135e:	a0 91 ae 01 	lds	r26, 0x01AE
    1362:	b0 91 af 01 	lds	r27, 0x01AF
    1366:	80 93 c1 01 	sts	0x01C1, r24
    136a:	90 93 c2 01 	sts	0x01C2, r25
    136e:	a0 93 c3 01 	sts	0x01C3, r26
    1372:	b0 93 c4 01 	sts	0x01C4, r27
				tune_dds(dds_xit_freq_word, REG_0, FALSE);
    1376:	80 91 c1 01 	lds	r24, 0x01C1
    137a:	90 91 c2 01 	lds	r25, 0x01C2
    137e:	a0 91 c3 01 	lds	r26, 0x01C3
    1382:	b0 91 c4 01 	lds	r27, 0x01C4
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <tune_dds>
				tune_reg = REG_1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	80 93 d1 01 	sts	0x01D1, r24
				set_dds_freq_reg(tune_reg);
    1398:	80 91 d1 01 	lds	r24, 0x01D1
    139c:	0e 94 18 0c 	call	0x1830	; 0x1830 <set_dds_freq_reg>
				debounce(TRUE);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    13a6:	80 91 68 01 	lds	r24, 0x0168
    13aa:	90 91 69 01 	lds	r25, 0x0169
    13ae:	a0 91 6a 01 	lds	r26, 0x016A
    13b2:	b0 91 6b 01 	lds	r27, 0x016B
    13b6:	84 5d       	subi	r24, 0xD4	; 212
    13b8:	9e 4f       	sbci	r25, 0xFE	; 254
    13ba:	af 4f       	sbci	r26, 0xFF	; 255
    13bc:	bf 4f       	sbci	r27, 0xFF	; 255
    13be:	80 93 cd 01 	sts	0x01CD, r24
    13c2:	90 93 ce 01 	sts	0x01CE, r25
    13c6:	a0 93 cf 01 	sts	0x01CF, r26
    13ca:	b0 93 d0 01 	sts	0x01D0, r27
				announce("X", ST_HIGH, 25);
    13ce:	81 e2       	ldi	r24, 0x21	; 33
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	64 e8       	ldi	r22, 0x84	; 132
    13d4:	73 e0       	ldi	r23, 0x03	; 3
    13d6:	49 e1       	ldi	r20, 0x19	; 25
    13d8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
				break;
    13dc:	55 c0       	rjmp	.+170    	; 0x1488 <poll_buttons+0x470>

			case NONE:
			default:
				RIT_LED_DDR &= ~(_BV(RIT_LED));
    13de:	87 e2       	ldi	r24, 0x27	; 39
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	27 e2       	ldi	r18, 0x27	; 39
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	f9 01       	movw	r30, r18
    13e8:	20 81       	ld	r18, Z
    13ea:	2d 7f       	andi	r18, 0xFD	; 253
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
				RIT_LED_PORT &= ~(_BV(RIT_LED));
    13f0:	88 e2       	ldi	r24, 0x28	; 40
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	28 e2       	ldi	r18, 0x28	; 40
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	f9 01       	movw	r30, r18
    13fa:	20 81       	ld	r18, Z
    13fc:	2d 7f       	andi	r18, 0xFD	; 253
    13fe:	fc 01       	movw	r30, r24
    1400:	20 83       	st	Z, r18
				dds_freq_word = dds_rit_freq_word;
    1402:	80 91 bc 01 	lds	r24, 0x01BC
    1406:	90 91 bd 01 	lds	r25, 0x01BD
    140a:	a0 91 be 01 	lds	r26, 0x01BE
    140e:	b0 91 bf 01 	lds	r27, 0x01BF
    1412:	80 93 ac 01 	sts	0x01AC, r24
    1416:	90 93 ad 01 	sts	0x01AD, r25
    141a:	a0 93 ae 01 	sts	0x01AE, r26
    141e:	b0 93 af 01 	sts	0x01AF, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    1422:	80 91 ac 01 	lds	r24, 0x01AC
    1426:	90 91 ad 01 	lds	r25, 0x01AD
    142a:	a0 91 ae 01 	lds	r26, 0x01AE
    142e:	b0 91 af 01 	lds	r27, 0x01AF
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <tune_dds>
				tune_reg = REG_0;
    143e:	10 92 d1 01 	sts	0x01D1, r1
				set_dds_freq_reg(tune_reg);
    1442:	80 91 d1 01 	lds	r24, 0x01D1
    1446:	0e 94 18 0c 	call	0x1830	; 0x1830 <set_dds_freq_reg>
				debounce(TRUE);
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    1450:	80 91 68 01 	lds	r24, 0x0168
    1454:	90 91 69 01 	lds	r25, 0x0169
    1458:	a0 91 6a 01 	lds	r26, 0x016A
    145c:	b0 91 6b 01 	lds	r27, 0x016B
    1460:	84 5d       	subi	r24, 0xD4	; 212
    1462:	9e 4f       	sbci	r25, 0xFE	; 254
    1464:	af 4f       	sbci	r26, 0xFF	; 255
    1466:	bf 4f       	sbci	r27, 0xFF	; 255
    1468:	80 93 cd 01 	sts	0x01CD, r24
    146c:	90 93 ce 01 	sts	0x01CE, r25
    1470:	a0 93 cf 01 	sts	0x01CF, r26
    1474:	b0 93 d0 01 	sts	0x01D0, r27
				announce("O", ST_HIGH, 25);
    1478:	83 e2       	ldi	r24, 0x23	; 35
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	64 e8       	ldi	r22, 0x84	; 132
    147e:	73 e0       	ldi	r23, 0x03	; 3
    1480:	49 e1       	ldi	r20, 0x19	; 25
    1482:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
				break;
    1486:	00 00       	nop
			sleep_timer = cur_timer + SLEEP_DELAY;
		} */
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    1488:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    148a:	80 91 67 01 	lds	r24, 0x0167
    148e:	88 23       	and	r24, r24
    1490:	19 f0       	breq	.+6      	; 0x1498 <poll_buttons+0x480>
		cur_enc_state += 0x02;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	8e 5f       	subi	r24, 0xFE	; 254
    1496:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    1498:	80 91 f1 01 	lds	r24, 0x01F1
    149c:	88 23       	and	r24, r24
    149e:	19 f0       	breq	.+6      	; 0x14a6 <poll_buttons+0x48e>
		cur_enc_state += 0x01;
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	8f 5f       	subi	r24, 0xFF	; 255
    14a4:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    14a6:	80 91 4e 01 	lds	r24, 0x014E
    14aa:	99 81       	ldd	r25, Y+1	; 0x01
    14ac:	98 17       	cp	r25, r24
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <poll_buttons+0x49a>
    14b0:	14 c1       	rjmp	.+552    	; 0x16da <poll_buttons+0x6c2>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    14b2:	80 91 4e 01 	lds	r24, 0x014E
    14b6:	86 95       	lsr	r24
    14b8:	81 70       	andi	r24, 0x01	; 1
    14ba:	80 93 4e 01 	sts	0x014E, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    14be:	80 91 68 01 	lds	r24, 0x0168
    14c2:	90 91 69 01 	lds	r25, 0x0169
    14c6:	a0 91 6a 01 	lds	r26, 0x016A
    14ca:	b0 91 6b 01 	lds	r27, 0x016B
    14ce:	84 5d       	subi	r24, 0xD4	; 212
    14d0:	9e 4f       	sbci	r25, 0xFE	; 254
    14d2:	af 4f       	sbci	r26, 0xFF	; 255
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	80 93 cd 01 	sts	0x01CD, r24
    14da:	90 93 ce 01 	sts	0x01CE, r25
    14de:	a0 93 cf 01 	sts	0x01CF, r26
    14e2:	b0 93 d0 01 	sts	0x01D0, r27

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    14e6:	80 91 4e 01 	lds	r24, 0x014E
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	81 70       	andi	r24, 0x01	; 1
    14f6:	90 70       	andi	r25, 0x00	; 0
    14f8:	82 27       	eor	r24, r18
    14fa:	93 27       	eor	r25, r19
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f0       	breq	.+2      	; 0x1504 <poll_buttons+0x4ec>
    1502:	7c c0       	rjmp	.+248    	; 0x15fc <poll_buttons+0x5e4>
		{
			// Don't allow tuning if we are on the locked VFO
			if((inc_tune_state == RIT && tune_reg == REG_1) || (inc_tune_state == XIT && tune_reg == REG_0))
    1504:	80 91 d2 01 	lds	r24, 0x01D2
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	29 f4       	brne	.+10     	; 0x1516 <poll_buttons+0x4fe>
    150c:	80 91 d1 01 	lds	r24, 0x01D1
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	09 f4       	brne	.+2      	; 0x1516 <poll_buttons+0x4fe>
    1514:	e2 c0       	rjmp	.+452    	; 0x16da <poll_buttons+0x6c2>
    1516:	80 91 d2 01 	lds	r24, 0x01D2
    151a:	82 30       	cpi	r24, 0x02	; 2
    151c:	29 f4       	brne	.+10     	; 0x1528 <poll_buttons+0x510>
    151e:	80 91 d1 01 	lds	r24, 0x01D1
    1522:	88 23       	and	r24, r24
    1524:	09 f4       	brne	.+2      	; 0x1528 <poll_buttons+0x510>
    1526:	d9 c0       	rjmp	.+434    	; 0x16da <poll_buttons+0x6c2>
			{
				//announce("E", ST_HIGH, 25);
				//debounce(TRUE);
			}
			// Tune down as long as we have not hit lower limit
			else if(tune_freq > LOWER_FREQ_LIMIT)
    1528:	80 91 e2 01 	lds	r24, 0x01E2
    152c:	90 91 e3 01 	lds	r25, 0x01E3
    1530:	a0 91 e4 01 	lds	r26, 0x01E4
    1534:	b0 91 e5 01 	lds	r27, 0x01E5
    1538:	81 38       	cpi	r24, 0x81	; 129
    153a:	ff e9       	ldi	r31, 0x9F	; 159
    153c:	9f 07       	cpc	r25, r31
    153e:	f5 ed       	ldi	r31, 0xD5	; 213
    1540:	af 07       	cpc	r26, r31
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	bf 07       	cpc	r27, r31
    1546:	08 f4       	brcc	.+2      	; 0x154a <poll_buttons+0x532>
    1548:	4e c0       	rjmp	.+156    	; 0x15e6 <poll_buttons+0x5ce>
			{
				dds_freq_word -= tune_step;
    154a:	20 91 ac 01 	lds	r18, 0x01AC
    154e:	30 91 ad 01 	lds	r19, 0x01AD
    1552:	40 91 ae 01 	lds	r20, 0x01AE
    1556:	50 91 af 01 	lds	r21, 0x01AF
    155a:	80 91 07 01 	lds	r24, 0x0107
    155e:	90 91 08 01 	lds	r25, 0x0108
    1562:	cc 01       	movw	r24, r24
    1564:	a0 e0       	ldi	r26, 0x00	; 0
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	79 01       	movw	r14, r18
    156a:	8a 01       	movw	r16, r20
    156c:	e8 1a       	sub	r14, r24
    156e:	f9 0a       	sbc	r15, r25
    1570:	0a 0b       	sbc	r16, r26
    1572:	1b 0b       	sbc	r17, r27
    1574:	d8 01       	movw	r26, r16
    1576:	c7 01       	movw	r24, r14
    1578:	80 93 ac 01 	sts	0x01AC, r24
    157c:	90 93 ad 01 	sts	0x01AD, r25
    1580:	a0 93 ae 01 	sts	0x01AE, r26
    1584:	b0 93 af 01 	sts	0x01AF, r27
				tune_freq -= tune_freq_step;
    1588:	20 91 e2 01 	lds	r18, 0x01E2
    158c:	30 91 e3 01 	lds	r19, 0x01E3
    1590:	40 91 e4 01 	lds	r20, 0x01E4
    1594:	50 91 e5 01 	lds	r21, 0x01E5
    1598:	80 91 09 01 	lds	r24, 0x0109
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e0       	ldi	r26, 0x00	; 0
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	79 01       	movw	r14, r18
    15a6:	8a 01       	movw	r16, r20
    15a8:	e8 1a       	sub	r14, r24
    15aa:	f9 0a       	sbc	r15, r25
    15ac:	0a 0b       	sbc	r16, r26
    15ae:	1b 0b       	sbc	r17, r27
    15b0:	d8 01       	movw	r26, r16
    15b2:	c7 01       	movw	r24, r14
    15b4:	80 93 e2 01 	sts	0x01E2, r24
    15b8:	90 93 e3 01 	sts	0x01E3, r25
    15bc:	a0 93 e4 01 	sts	0x01E4, r26
    15c0:	b0 93 e5 01 	sts	0x01E5, r27
				tune_dds(dds_freq_word, tune_reg, FALSE);
    15c4:	80 91 ac 01 	lds	r24, 0x01AC
    15c8:	90 91 ad 01 	lds	r25, 0x01AD
    15cc:	a0 91 ae 01 	lds	r26, 0x01AE
    15d0:	b0 91 af 01 	lds	r27, 0x01AF
    15d4:	20 91 d1 01 	lds	r18, 0x01D1
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	42 2f       	mov	r20, r18
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <tune_dds>
				//set_dds_freq_reg(tune_reg);
			}
			else
			{
				announce("L", ST_HIGH, 25);
				debounce(TRUE);
    15e4:	7a c0       	rjmp	.+244    	; 0x16da <poll_buttons+0x6c2>
				tune_dds(dds_freq_word, tune_reg, FALSE);
				//set_dds_freq_reg(tune_reg);
			}
			else
			{
				announce("L", ST_HIGH, 25);
    15e6:	85 e2       	ldi	r24, 0x25	; 37
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	64 e8       	ldi	r22, 0x84	; 132
    15ec:	73 e0       	ldi	r23, 0x03	; 3
    15ee:	49 e1       	ldi	r20, 0x19	; 25
    15f0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
				debounce(TRUE);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
    15fa:	6f c0       	rjmp	.+222    	; 0x16da <poll_buttons+0x6c2>
			}
		}
		else
		{
			// Don't allow tuning if we are on the locked VFO
			if((inc_tune_state == RIT && tune_reg == REG_1) || (inc_tune_state == XIT && tune_reg == REG_0))
    15fc:	80 91 d2 01 	lds	r24, 0x01D2
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	21 f4       	brne	.+8      	; 0x160c <poll_buttons+0x5f4>
    1604:	80 91 d1 01 	lds	r24, 0x01D1
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	31 f0       	breq	.+12     	; 0x1618 <poll_buttons+0x600>
    160c:	80 91 d2 01 	lds	r24, 0x01D2
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	11 f4       	brne	.+4      	; 0x1618 <poll_buttons+0x600>
    1614:	80 91 d1 01 	lds	r24, 0x01D1
			{
				//announce("E", ST_HIGH, 25);
				//debounce(TRUE);
			}
			// Tune up as long as we are not at upper limit
			if(tune_freq < UPPER_FREQ_LIMIT)
    1618:	80 91 e2 01 	lds	r24, 0x01E2
    161c:	90 91 e3 01 	lds	r25, 0x01E3
    1620:	a0 91 e4 01 	lds	r26, 0x01E4
    1624:	b0 91 e5 01 	lds	r27, 0x01E5
    1628:	80 3b       	cpi	r24, 0xB0	; 176
    162a:	06 ef       	ldi	r16, 0xF6	; 246
    162c:	90 07       	cpc	r25, r16
    162e:	0a ed       	ldi	r16, 0xDA	; 218
    1630:	a0 07       	cpc	r26, r16
    1632:	00 e0       	ldi	r16, 0x00	; 0
    1634:	b0 07       	cpc	r27, r16
    1636:	08 f0       	brcs	.+2      	; 0x163a <poll_buttons+0x622>
    1638:	46 c0       	rjmp	.+140    	; 0x16c6 <poll_buttons+0x6ae>
			{
				dds_freq_word += tune_step;
    163a:	80 91 07 01 	lds	r24, 0x0107
    163e:	90 91 08 01 	lds	r25, 0x0108
    1642:	9c 01       	movw	r18, r24
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	80 91 ac 01 	lds	r24, 0x01AC
    164c:	90 91 ad 01 	lds	r25, 0x01AD
    1650:	a0 91 ae 01 	lds	r26, 0x01AE
    1654:	b0 91 af 01 	lds	r27, 0x01AF
    1658:	82 0f       	add	r24, r18
    165a:	93 1f       	adc	r25, r19
    165c:	a4 1f       	adc	r26, r20
    165e:	b5 1f       	adc	r27, r21
    1660:	80 93 ac 01 	sts	0x01AC, r24
    1664:	90 93 ad 01 	sts	0x01AD, r25
    1668:	a0 93 ae 01 	sts	0x01AE, r26
    166c:	b0 93 af 01 	sts	0x01AF, r27
				tune_freq += tune_freq_step;
    1670:	80 91 09 01 	lds	r24, 0x0109
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	80 91 e2 01 	lds	r24, 0x01E2
    1680:	90 91 e3 01 	lds	r25, 0x01E3
    1684:	a0 91 e4 01 	lds	r26, 0x01E4
    1688:	b0 91 e5 01 	lds	r27, 0x01E5
    168c:	82 0f       	add	r24, r18
    168e:	93 1f       	adc	r25, r19
    1690:	a4 1f       	adc	r26, r20
    1692:	b5 1f       	adc	r27, r21
    1694:	80 93 e2 01 	sts	0x01E2, r24
    1698:	90 93 e3 01 	sts	0x01E3, r25
    169c:	a0 93 e4 01 	sts	0x01E4, r26
    16a0:	b0 93 e5 01 	sts	0x01E5, r27
				tune_dds(dds_freq_word, tune_reg, FALSE);
    16a4:	80 91 ac 01 	lds	r24, 0x01AC
    16a8:	90 91 ad 01 	lds	r25, 0x01AD
    16ac:	a0 91 ae 01 	lds	r26, 0x01AE
    16b0:	b0 91 af 01 	lds	r27, 0x01AF
    16b4:	20 91 d1 01 	lds	r18, 0x01D1
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	42 2f       	mov	r20, r18
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <tune_dds>
    16c4:	0a c0       	rjmp	.+20     	; 0x16da <poll_buttons+0x6c2>
				//set_dds_freq_reg(tune_reg);
			}
			else
			{
				announce("U", ST_HIGH, 25);
    16c6:	87 e2       	ldi	r24, 0x27	; 39
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	64 e8       	ldi	r22, 0x84	; 132
    16cc:	73 e0       	ldi	r23, 0x03	; 3
    16ce:	49 e1       	ldi	r20, 0x19	; 25
    16d0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
				debounce(TRUE);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
				announce("U", ST_HIGH, 23);
				*/
		}
	}

	prev_enc_state = cur_enc_state;
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	80 93 4e 01 	sts	0x014E, r24
}
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	08 95       	ret

000016f0 <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg, enum BOOL init)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	2c 97       	sbiw	r28, 0x0c	; 12
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	6f 83       	std	Y+7, r22	; 0x07
    1706:	78 87       	std	Y+8, r23	; 0x08
    1708:	89 87       	std	Y+9, r24	; 0x09
    170a:	9a 87       	std	Y+10, r25	; 0x0a
    170c:	4b 87       	std	Y+11, r20	; 0x0b
    170e:	2c 87       	std	Y+12, r18	; 0x0c
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    1710:	8b 85       	ldd	r24, Y+11	; 0x0b
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	29 f4       	brne	.+10     	; 0x1720 <tune_dds+0x30>
		freq_reg = 0x8000;
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e8       	ldi	r25, 0x80	; 128
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <tune_dds+0x38>
	else
		freq_reg = 0x4000;
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e4       	ldi	r25, 0x40	; 64
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    1728:	8f 81       	ldd	r24, Y+7	; 0x07
    172a:	98 85       	ldd	r25, Y+8	; 0x08
    172c:	9c 01       	movw	r18, r24
    172e:	3f 73       	andi	r19, 0x3F	; 63
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	9a 81       	ldd	r25, Y+2	; 0x02
    1734:	82 0f       	add	r24, r18
    1736:	93 1f       	adc	r25, r19
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    173c:	8f 81       	ldd	r24, Y+7	; 0x07
    173e:	98 85       	ldd	r25, Y+8	; 0x08
    1740:	a9 85       	ldd	r26, Y+9	; 0x09
    1742:	ba 85       	ldd	r27, Y+10	; 0x0a
    1744:	07 2e       	mov	r0, r23
    1746:	7e e0       	ldi	r23, 0x0E	; 14
    1748:	b6 95       	lsr	r27
    174a:	a7 95       	ror	r26
    174c:	97 95       	ror	r25
    174e:	87 95       	ror	r24
    1750:	7a 95       	dec	r23
    1752:	d1 f7       	brne	.-12     	; 0x1748 <tune_dds+0x58>
    1754:	70 2d       	mov	r23, r0
    1756:	9c 01       	movw	r18, r24
    1758:	3f 73       	andi	r19, 0x3F	; 63
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	82 0f       	add	r24, r18
    1760:	93 1f       	adc	r25, r19
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05

	if(init == TRUE)
    1766:	8c 85       	ldd	r24, Y+12	; 0x0c
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	21 f4       	brne	.+8      	; 0x1774 <tune_dds+0x84>
		send_dds_word(0x2100);
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	91 e2       	ldi	r25, 0x21	; 33
    1770:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <send_dds_word>

	if(init == TRUE)
    1784:	8c 85       	ldd	r24, Y+12	; 0x0c
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	41 f4       	brne	.+16     	; 0x179a <tune_dds+0xaa>
	{
		// Send phase
		send_dds_word(0xC000);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 ec       	ldi	r25, 0xC0	; 192
    178e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <send_dds_word>

		// Exit reset
		send_dds_word(0x2000);
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e2       	ldi	r25, 0x20	; 32
    1796:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <send_dds_word>
	}
}
    179a:	2c 96       	adiw	r28, 0x0c	; 12
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <send_dds_word>:
	send_dds_word(0x2000);
}
*/

void send_dds_word(uint16_t dds_word)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <send_dds_word+0x6>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    17ba:	85 e2       	ldi	r24, 0x25	; 37
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	25 e2       	ldi	r18, 0x25	; 37
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	f9 01       	movw	r30, r18
    17c4:	20 81       	ld	r18, Z
    17c6:	20 62       	ori	r18, 0x20	; 32
    17c8:	fc 01       	movw	r30, r24
    17ca:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    17cc:	85 e2       	ldi	r24, 0x25	; 37
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	25 e2       	ldi	r18, 0x25	; 37
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	f9 01       	movw	r30, r18
    17d6:	20 81       	ld	r18, Z
    17d8:	2d 7f       	andi	r18, 0xFD	; 253
    17da:	fc 01       	movw	r30, r24
    17dc:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    17de:	8e e4       	ldi	r24, 0x4E	; 78
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	29 81       	ldd	r18, Y+1	; 0x01
    17e4:	3a 81       	ldd	r19, Y+2	; 0x02
    17e6:	23 2f       	mov	r18, r19
    17e8:	33 27       	eor	r19, r19
    17ea:	fc 01       	movw	r30, r24
    17ec:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    17ee:	00 00       	nop
    17f0:	8d e4       	ldi	r24, 0x4D	; 77
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	88 23       	and	r24, r24
    17fa:	d4 f7       	brge	.-12     	; 0x17f0 <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    17fc:	8e e4       	ldi	r24, 0x4E	; 78
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	29 81       	ldd	r18, Y+1	; 0x01
    1802:	fc 01       	movw	r30, r24
    1804:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1806:	00 00       	nop
    1808:	8d e4       	ldi	r24, 0x4D	; 77
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	fc 01       	movw	r30, r24
    180e:	80 81       	ld	r24, Z
    1810:	88 23       	and	r24, r24
    1812:	d4 f7       	brge	.-12     	; 0x1808 <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    1814:	85 e2       	ldi	r24, 0x25	; 37
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	25 e2       	ldi	r18, 0x25	; 37
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	f9 01       	movw	r30, r18
    181e:	20 81       	ld	r18, Z
    1820:	22 60       	ori	r18, 0x02	; 2
    1822:	fc 01       	movw	r30, r24
    1824:	20 83       	st	Z, r18
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	0f 92       	push	r0
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	29 f4       	brne	.+10     	; 0x184c <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	98 e2       	ldi	r25, 0x28	; 40
    1846:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <send_dds_word>
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e2       	ldi	r25, 0x20	; 32
    1850:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <send_dds_word>
}
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <set_st_freq+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <set_st_freq+0x8>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	69 83       	std	Y+1, r22	; 0x01
    186a:	7a 83       	std	Y+2, r23	; 0x02
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	ab 81       	ldd	r26, Y+3	; 0x03
    1876:	bc 81       	ldd	r27, Y+4	; 0x04
    1878:	23 e9       	ldi	r18, 0x93	; 147
    187a:	38 e1       	ldi	r19, 0x18	; 24
    187c:	44 e0       	ldi	r20, 0x04	; 4
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 6f 19 	call	0x32de	; 0x32de <__mulsi3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	80 93 b0 01 	sts	0x01B0, r24
    1890:	90 93 b1 01 	sts	0x01B1, r25
    1894:	a0 93 b2 01 	sts	0x01B2, r26
    1898:	b0 93 b3 01 	sts	0x01B3, r27
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <main>:

int main(void)
{
    18aa:	1f 93       	push	r17
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	2d 97       	sbiw	r28, 0x0d	; 13
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    18c0:	89 e2       	ldi	r24, 0x29	; 41
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 d7 19 	call	0x33ae	; 0x33ae <malloc>
    18c8:	90 93 ec 01 	sts	0x01EC, r25
    18cc:	80 93 eb 01 	sts	0x01EB, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    18d0:	80 91 eb 01 	lds	r24, 0x01EB
    18d4:	90 91 ec 01 	lds	r25, 0x01EC
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	49 e2       	ldi	r20, 0x29	; 41
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	0e 94 13 1b 	call	0x3626	; 0x3626 <memset>
	cur_char_p = announce_buffer;
    18e4:	80 91 eb 01 	lds	r24, 0x01EB
    18e8:	90 91 ec 01 	lds	r25, 0x01EC
    18ec:	90 93 3f 01 	sts	0x013F, r25
    18f0:	80 93 3e 01 	sts	0x013E, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    18f4:	89 e2       	ldi	r24, 0x29	; 41
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 d7 19 	call	0x33ae	; 0x33ae <malloc>
    18fc:	90 93 41 01 	sts	0x0141, r25
    1900:	80 93 40 01 	sts	0x0140, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    1904:	80 91 40 01 	lds	r24, 0x0140
    1908:	90 91 41 01 	lds	r25, 0x0141
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	49 e2       	ldi	r20, 0x29	; 41
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	0e 94 13 1b 	call	0x3626	; 0x3626 <memset>

	init();
    1918:	0e 94 9f 02 	call	0x53e	; 0x53e <init>

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    191c:	19 82       	std	Y+1, r1	; 0x01
    191e:	06 c0       	rjmp	.+12     	; 0x192c <main+0x82>
		debounce(FALSE);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);

	init();

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	8f 30       	cpi	r24, 0x0F	; 15
    1930:	b8 f3       	brcs	.-18     	; 0x1920 <main+0x76>
		debounce(FALSE);
	if(eeprom_read_byte(&ee_keyer) == FALSE)
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__eerd_byte_m168>
    193a:	88 23       	and	r24, r24
    193c:	21 f4       	brne	.+8      	; 0x1946 <main+0x9c>
		cur_mode = SK;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	80 93 a2 01 	sts	0x01A2, r24
    1944:	02 c0       	rjmp	.+4      	; 0x194a <main+0xa0>
	else
		cur_mode = KEYER;
    1946:	10 92 a2 01 	sts	0x01A2, r1

	if((dah_active == TRUE) && (dit_active == FALSE))
    194a:	80 91 c0 01 	lds	r24, 0x01C0
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	39 f4       	brne	.+14     	; 0x1960 <main+0xb6>
    1952:	80 91 dc 01 	lds	r24, 0x01DC
    1956:	88 23       	and	r24, r24
    1958:	19 f4       	brne	.+6      	; 0x1960 <main+0xb6>
		cur_mode = SK;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 93 a2 01 	sts	0x01A2, r24

	announce("CC", st_freq, 15);
    1960:	20 91 ba 01 	lds	r18, 0x01BA
    1964:	30 91 bb 01 	lds	r19, 0x01BB
    1968:	89 e2       	ldi	r24, 0x29	; 41
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	b9 01       	movw	r22, r18
    196e:	4f e0       	ldi	r20, 0x0F	; 15
    1970:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    1974:	f8 94       	cli
		cur_timer = timer;
    1976:	80 91 6e 01 	lds	r24, 0x016E
    197a:	90 91 6f 01 	lds	r25, 0x016F
    197e:	a0 91 70 01 	lds	r26, 0x0170
    1982:	b0 91 71 01 	lds	r27, 0x0171
    1986:	80 93 68 01 	sts	0x0168, r24
    198a:	90 93 69 01 	sts	0x0169, r25
    198e:	a0 93 6a 01 	sts	0x016A, r26
    1992:	b0 93 6b 01 	sts	0x016B, r27
		sei();
    1996:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    1998:	80 91 a2 01 	lds	r24, 0x01A2
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	83 30       	cpi	r24, 0x03	; 3
    19a2:	91 05       	cpc	r25, r1
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <main+0xfe>
    19a6:	fe c6       	rjmp	.+3580   	; 0x27a4 <main+0xefa>
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	91 05       	cpc	r25, r1
    19ac:	64 f4       	brge	.+24     	; 0x19c6 <main+0x11c>
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	91 05       	cpc	r25, r1
    19b2:	c9 f0       	breq	.+50     	; 0x19e6 <main+0x13c>
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	91 05       	cpc	r25, r1
    19b8:	0c f0       	brlt	.+2      	; 0x19bc <main+0x112>
    19ba:	42 c5       	rjmp	.+2692   	; 0x2440 <main+0xb96>
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	09 f4       	brne	.+2      	; 0x19c2 <main+0x118>
    19c0:	0f c1       	rjmp	.+542    	; 0x1be0 <main+0x336>
    19c2:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <main+0x1a2e>
    19c6:	85 30       	cpi	r24, 0x05	; 5
    19c8:	91 05       	cpc	r25, r1
    19ca:	11 f4       	brne	.+4      	; 0x19d0 <main+0x126>
    19cc:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <main+0x13da>
    19d0:	85 30       	cpi	r24, 0x05	; 5
    19d2:	91 05       	cpc	r25, r1
    19d4:	0c f4       	brge	.+2      	; 0x19d8 <main+0x12e>
    19d6:	a6 c7       	rjmp	.+3916   	; 0x2924 <main+0x107a>
    19d8:	86 30       	cpi	r24, 0x06	; 6
    19da:	91 05       	cpc	r25, r1
    19dc:	11 f4       	brne	.+4      	; 0x19e2 <main+0x138>
    19de:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <main+0x154a>
    19e2:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <main+0x1a2e>
		{
		case SK:
			default_mode = SK;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 6d 01 	sts	0x016D, r24
			poll_buttons();
    19ec:	0e 94 0c 08 	call	0x1018	; 0x1018 <poll_buttons>

			switch(cur_state)
    19f0:	80 91 c8 01 	lds	r24, 0x01C8
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	87 30       	cpi	r24, 0x07	; 7
    19fa:	91 05       	cpc	r25, r1
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <main+0x156>
    19fe:	43 c0       	rjmp	.+134    	; 0x1a86 <main+0x1dc>
    1a00:	8c 30       	cpi	r24, 0x0C	; 12
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <main+0x15e>
    1a06:	a7 c0       	rjmp	.+334    	; 0x1b56 <main+0x2ac>
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <main+0x166>
				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;

			default:
				break;
    1a0e:	e6 c0       	rjmp	.+460    	; 0x1bdc <main+0x332>
			poll_buttons();

			switch(cur_state)
			{
			case IDLE:
				key_down = FALSE;
    1a10:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1a14:	10 92 3a 01 	sts	0x013A, r1
				mute_on = FALSE;
    1a18:	10 92 3b 01 	sts	0x013B, r1
					mute_on = FALSE;
				else
					mute_on = TRUE;
					*/

				if(dit_active == TRUE)
    1a1c:	80 91 dc 01 	lds	r24, 0x01DC
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	69 f5       	brne	.+90     	; 0x1a7e <main+0x1d4>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    1a24:	80 91 68 01 	lds	r24, 0x0168
    1a28:	90 91 69 01 	lds	r25, 0x0169
    1a2c:	a0 91 6a 01 	lds	r26, 0x016A
    1a30:	b0 91 6b 01 	lds	r27, 0x016B
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	a1 1d       	adc	r26, r1
    1a38:	b1 1d       	adc	r27, r1
    1a3a:	80 93 a8 01 	sts	0x01A8, r24
    1a3e:	90 93 a9 01 	sts	0x01A9, r25
    1a42:	a0 93 aa 01 	sts	0x01AA, r26
    1a46:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = UINT32_MAX;
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	9f ef       	ldi	r25, 0xFF	; 255
    1a4e:	dc 01       	movw	r26, r24
    1a50:	80 93 ed 01 	sts	0x01ED, r24
    1a54:	90 93 ee 01 	sts	0x01EE, r25
    1a58:	a0 93 ef 01 	sts	0x01EF, r26
    1a5c:	b0 93 f0 01 	sts	0x01F0, r27
					cur_state_end = UINT32_MAX;
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	9f ef       	ldi	r25, 0xFF	; 255
    1a64:	dc 01       	movw	r26, r24
    1a66:	80 93 d4 01 	sts	0x01D4, r24
    1a6a:	90 93 d5 01 	sts	0x01D5, r25
    1a6e:	a0 93 d6 01 	sts	0x01D6, r26
    1a72:	b0 93 d7 01 	sts	0x01D7, r27
					cur_state = KEYDOWN;
    1a76:	87 e0       	ldi	r24, 0x07	; 7
    1a78:	80 93 c8 01 	sts	0x01C8, r24
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <main+0x1da>
				}
				else
				{
					cur_state = IDLE;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	80 93 c8 01 	sts	0x01C8, r24
				}
				break;
    1a84:	ab c0       	rjmp	.+342    	; 0x1bdc <main+0x332>

			case KEYDOWN:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1a86:	80 91 e2 01 	lds	r24, 0x01E2
    1a8a:	90 91 e3 01 	lds	r25, 0x01E3
    1a8e:	a0 91 e4 01 	lds	r26, 0x01E4
    1a92:	b0 91 e5 01 	lds	r27, 0x01E5
    1a96:	81 3b       	cpi	r24, 0xB1	; 177
    1a98:	26 ef       	ldi	r18, 0xF6	; 246
    1a9a:	92 07       	cpc	r25, r18
    1a9c:	2a ed       	ldi	r18, 0xDA	; 218
    1a9e:	a2 07       	cpc	r26, r18
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	b2 07       	cpc	r27, r18
    1aa4:	80 f4       	brcc	.+32     	; 0x1ac6 <main+0x21c>
    1aa6:	80 91 e2 01 	lds	r24, 0x01E2
    1aaa:	90 91 e3 01 	lds	r25, 0x01E3
    1aae:	a0 91 e4 01 	lds	r26, 0x01E4
    1ab2:	b0 91 e5 01 	lds	r27, 0x01E5
    1ab6:	80 38       	cpi	r24, 0x80	; 128
    1ab8:	ef e9       	ldi	r30, 0x9F	; 159
    1aba:	9e 07       	cpc	r25, r30
    1abc:	e5 ed       	ldi	r30, 0xD5	; 213
    1abe:	ae 07       	cpc	r26, r30
    1ac0:	e0 e0       	ldi	r30, 0x00	; 0
    1ac2:	be 07       	cpc	r27, r30
    1ac4:	38 f4       	brcc	.+14     	; 0x1ad4 <main+0x22a>
				{
					key_down = FALSE;
    1ac6:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    1aca:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    1ace:	10 92 3b 01 	sts	0x013B, r1
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <main+0x23c>
				}
				else
				{
					key_down = TRUE;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 3b 01 	sts	0x013B, r24
				}

				if(dit_active == FALSE)
    1ae6:	80 91 dc 01 	lds	r24, 0x01DC
    1aea:	88 23       	and	r24, r24
    1aec:	41 f5       	brne	.+80     	; 0x1b3e <main+0x294>
				{
					cur_state = EXIT;
    1aee:	8c e0       	ldi	r24, 0x0C	; 12
    1af0:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    1af4:	80 91 68 01 	lds	r24, 0x0168
    1af8:	90 91 69 01 	lds	r25, 0x0169
    1afc:	a0 91 6a 01 	lds	r26, 0x016A
    1b00:	b0 91 6b 01 	lds	r27, 0x016B
    1b04:	8c 59       	subi	r24, 0x9C	; 156
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	af 4f       	sbci	r26, 0xFF	; 255
    1b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0c:	80 93 d4 01 	sts	0x01D4, r24
    1b10:	90 93 d5 01 	sts	0x01D5, r25
    1b14:	a0 93 d6 01 	sts	0x01D6, r26
    1b18:	b0 93 d7 01 	sts	0x01D7, r27
					tx_end = cur_timer;
    1b1c:	80 91 68 01 	lds	r24, 0x0168
    1b20:	90 91 69 01 	lds	r25, 0x0169
    1b24:	a0 91 6a 01 	lds	r26, 0x016A
    1b28:	b0 91 6b 01 	lds	r27, 0x016B
    1b2c:	80 93 ed 01 	sts	0x01ED, r24
    1b30:	90 93 ee 01 	sts	0x01EE, r25
    1b34:	a0 93 ef 01 	sts	0x01EF, r26
    1b38:	b0 93 f0 01 	sts	0x01F0, r27
    1b3c:	0b c0       	rjmp	.+22     	; 0x1b54 <main+0x2aa>
				}
				else
					tx_end = UINT32_MAX;
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	9f ef       	ldi	r25, 0xFF	; 255
    1b42:	dc 01       	movw	r26, r24
    1b44:	80 93 ed 01 	sts	0x01ED, r24
    1b48:	90 93 ee 01 	sts	0x01EE, r25
    1b4c:	a0 93 ef 01 	sts	0x01EF, r26
    1b50:	b0 93 f0 01 	sts	0x01F0, r27
				break;
    1b54:	43 c0       	rjmp	.+134    	; 0x1bdc <main+0x332>

			case EXIT:
				key_down = FALSE;
    1b56:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1b5a:	10 92 3a 01 	sts	0x013A, r1

				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1b5e:	80 91 e2 01 	lds	r24, 0x01E2
    1b62:	90 91 e3 01 	lds	r25, 0x01E3
    1b66:	a0 91 e4 01 	lds	r26, 0x01E4
    1b6a:	b0 91 e5 01 	lds	r27, 0x01E5
    1b6e:	81 3b       	cpi	r24, 0xB1	; 177
    1b70:	f6 ef       	ldi	r31, 0xF6	; 246
    1b72:	9f 07       	cpc	r25, r31
    1b74:	fa ed       	ldi	r31, 0xDA	; 218
    1b76:	af 07       	cpc	r26, r31
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	bf 07       	cpc	r27, r31
    1b7c:	80 f4       	brcc	.+32     	; 0x1b9e <main+0x2f4>
    1b7e:	80 91 e2 01 	lds	r24, 0x01E2
    1b82:	90 91 e3 01 	lds	r25, 0x01E3
    1b86:	a0 91 e4 01 	lds	r26, 0x01E4
    1b8a:	b0 91 e5 01 	lds	r27, 0x01E5
    1b8e:	80 38       	cpi	r24, 0x80	; 128
    1b90:	2f e9       	ldi	r18, 0x9F	; 159
    1b92:	92 07       	cpc	r25, r18
    1b94:	25 ed       	ldi	r18, 0xD5	; 213
    1b96:	a2 07       	cpc	r26, r18
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	b2 07       	cpc	r27, r18
    1b9c:	18 f4       	brcc	.+6      	; 0x1ba4 <main+0x2fa>
					mute_on = FALSE;
    1b9e:	10 92 3b 01 	sts	0x013B, r1
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <main+0x300>
				else
					mute_on = TRUE;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	80 93 3b 01 	sts	0x013B, r24

				if(cur_timer >= cur_state_end)
    1baa:	20 91 68 01 	lds	r18, 0x0168
    1bae:	30 91 69 01 	lds	r19, 0x0169
    1bb2:	40 91 6a 01 	lds	r20, 0x016A
    1bb6:	50 91 6b 01 	lds	r21, 0x016B
    1bba:	80 91 d4 01 	lds	r24, 0x01D4
    1bbe:	90 91 d5 01 	lds	r25, 0x01D5
    1bc2:	a0 91 d6 01 	lds	r26, 0x01D6
    1bc6:	b0 91 d7 01 	lds	r27, 0x01D7
    1bca:	28 17       	cp	r18, r24
    1bcc:	39 07       	cpc	r19, r25
    1bce:	4a 07       	cpc	r20, r26
    1bd0:	5b 07       	cpc	r21, r27
    1bd2:	18 f0       	brcs	.+6      	; 0x1bda <main+0x330>
					cur_state = IDLE;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 c8 01 	sts	0x01C8, r24
				break;
    1bda:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    1bdc:	0c 94 6d 19 	jmp	0x32da	; 0x32da <main+0x1a30>

		case KEYER:
			default_mode = KEYER;
    1be0:	10 92 6d 01 	sts	0x016D, r1
			poll_buttons();
    1be4:	0e 94 0c 08 	call	0x1018	; 0x1018 <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    1be8:	80 91 c8 01 	lds	r24, 0x01C8
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <main+0x34e>
    1bf6:	16 c2       	rjmp	.+1068   	; 0x2024 <main+0x77a>
    1bf8:	84 30       	cpi	r24, 0x04	; 4
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	44 f4       	brge	.+16     	; 0x1c0e <main+0x364>
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	91 05       	cpc	r25, r1
    1c02:	71 f0       	breq	.+28     	; 0x1c20 <main+0x376>
    1c04:	82 30       	cpi	r24, 0x02	; 2
    1c06:	91 05       	cpc	r25, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <main+0x362>
    1c0a:	75 c1       	rjmp	.+746    	; 0x1ef6 <main+0x64c>
    1c0c:	17 c4       	rjmp	.+2094   	; 0x243c <main+0xb92>
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	91 05       	cpc	r25, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <main+0x36c>
    1c14:	9e c2       	rjmp	.+1340   	; 0x2152 <main+0x8a8>
    1c16:	8c 30       	cpi	r24, 0x0C	; 12
    1c18:	91 05       	cpc	r25, r1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <main+0x374>
    1c1c:	dc c3       	rjmp	.+1976   	; 0x23d6 <main+0xb2c>
    1c1e:	0e c4       	rjmp	.+2076   	; 0x243c <main+0xb92>
			{
			case IDLE:
				key_down = FALSE;
    1c20:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1c24:	10 92 3a 01 	sts	0x013A, r1
				mute_on = FALSE;
    1c28:	10 92 3b 01 	sts	0x013B, r1
				mute_end = cur_timer;
    1c2c:	80 91 68 01 	lds	r24, 0x0168
    1c30:	90 91 69 01 	lds	r25, 0x0169
    1c34:	a0 91 6a 01 	lds	r26, 0x016A
    1c38:	b0 91 6b 01 	lds	r27, 0x016B
    1c3c:	80 93 d8 01 	sts	0x01D8, r24
    1c40:	90 93 d9 01 	sts	0x01D9, r25
    1c44:	a0 93 da 01 	sts	0x01DA, r26
    1c48:	b0 93 db 01 	sts	0x01DB, r27

				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    1c4c:	80 91 dc 01 	lds	r24, 0x01DC
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <main+0x3ac>
    1c54:	68 c0       	rjmp	.+208    	; 0x1d26 <main+0x47c>
    1c56:	80 91 c0 01 	lds	r24, 0x01C0
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <main+0x3b6>
    1c5e:	63 c0       	rjmp	.+198    	; 0x1d26 <main+0x47c>
				{
					prev_state = IDLE;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 72 01 	sts	0x0172, r24
					cur_state = DIT;
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	80 93 c8 01 	sts	0x01C8, r24
					next_state = IDLE;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + dit_length;
    1c72:	80 91 73 01 	lds	r24, 0x0173
    1c76:	90 91 74 01 	lds	r25, 0x0174
    1c7a:	9c 01       	movw	r18, r24
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	80 91 68 01 	lds	r24, 0x0168
    1c84:	90 91 69 01 	lds	r25, 0x0169
    1c88:	a0 91 6a 01 	lds	r26, 0x016A
    1c8c:	b0 91 6b 01 	lds	r27, 0x016B
    1c90:	82 0f       	add	r24, r18
    1c92:	93 1f       	adc	r25, r19
    1c94:	a4 1f       	adc	r26, r20
    1c96:	b5 1f       	adc	r27, r21
    1c98:	80 93 d4 01 	sts	0x01D4, r24
    1c9c:	90 93 d5 01 	sts	0x01D5, r25
    1ca0:	a0 93 d6 01 	sts	0x01D6, r26
    1ca4:	b0 93 d7 01 	sts	0x01D7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1ca8:	80 91 68 01 	lds	r24, 0x0168
    1cac:	90 91 69 01 	lds	r25, 0x0169
    1cb0:	a0 91 6a 01 	lds	r26, 0x016A
    1cb4:	b0 91 6b 01 	lds	r27, 0x016B
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	b1 1d       	adc	r27, r1
    1cbe:	80 93 a8 01 	sts	0x01A8, r24
    1cc2:	90 93 a9 01 	sts	0x01A9, r25
    1cc6:	a0 93 aa 01 	sts	0x01AA, r26
    1cca:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1cce:	80 91 d4 01 	lds	r24, 0x01D4
    1cd2:	90 91 d5 01 	lds	r25, 0x01D5
    1cd6:	a0 91 d6 01 	lds	r26, 0x01D6
    1cda:	b0 91 d7 01 	lds	r27, 0x01D7
    1cde:	80 93 ed 01 	sts	0x01ED, r24
    1ce2:	90 93 ee 01 	sts	0x01EE, r25
    1ce6:	a0 93 ef 01 	sts	0x01EF, r26
    1cea:	b0 93 f0 01 	sts	0x01F0, r27
					mute_start = cur_timer;
    1cee:	80 91 68 01 	lds	r24, 0x0168
    1cf2:	90 91 69 01 	lds	r25, 0x0169
    1cf6:	a0 91 6a 01 	lds	r26, 0x016A
    1cfa:	b0 91 6b 01 	lds	r27, 0x016B
    1cfe:	80 93 e7 01 	sts	0x01E7, r24
    1d02:	90 93 e8 01 	sts	0x01E8, r25
    1d06:	a0 93 e9 01 	sts	0x01E9, r26
    1d0a:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = UINT32_MAX;
    1d0e:	8f ef       	ldi	r24, 0xFF	; 255
    1d10:	9f ef       	ldi	r25, 0xFF	; 255
    1d12:	dc 01       	movw	r26, r24
    1d14:	80 93 d8 01 	sts	0x01D8, r24
    1d18:	90 93 d9 01 	sts	0x01D9, r25
    1d1c:	a0 93 da 01 	sts	0x01DA, r26
    1d20:	b0 93 db 01 	sts	0x01DB, r27
    1d24:	e7 c0       	rjmp	.+462    	; 0x1ef4 <main+0x64a>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    1d26:	80 91 c0 01 	lds	r24, 0x01C0
    1d2a:	81 30       	cpi	r24, 0x01	; 1
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <main+0x486>
    1d2e:	6d c0       	rjmp	.+218    	; 0x1e0a <main+0x560>
    1d30:	80 91 dc 01 	lds	r24, 0x01DC
    1d34:	88 23       	and	r24, r24
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <main+0x490>
    1d38:	68 c0       	rjmp	.+208    	; 0x1e0a <main+0x560>
				{
					prev_state = IDLE;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	80 93 72 01 	sts	0x0172, r24
					cur_state = DAH;
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	80 93 c8 01 	sts	0x01C8, r24
					next_state = IDLE;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + (dit_length * 3);
    1d4c:	20 91 73 01 	lds	r18, 0x0173
    1d50:	30 91 74 01 	lds	r19, 0x0174
    1d54:	c9 01       	movw	r24, r18
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	82 0f       	add	r24, r18
    1d5c:	93 1f       	adc	r25, r19
    1d5e:	9c 01       	movw	r18, r24
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	80 91 68 01 	lds	r24, 0x0168
    1d68:	90 91 69 01 	lds	r25, 0x0169
    1d6c:	a0 91 6a 01 	lds	r26, 0x016A
    1d70:	b0 91 6b 01 	lds	r27, 0x016B
    1d74:	82 0f       	add	r24, r18
    1d76:	93 1f       	adc	r25, r19
    1d78:	a4 1f       	adc	r26, r20
    1d7a:	b5 1f       	adc	r27, r21
    1d7c:	80 93 d4 01 	sts	0x01D4, r24
    1d80:	90 93 d5 01 	sts	0x01D5, r25
    1d84:	a0 93 d6 01 	sts	0x01D6, r26
    1d88:	b0 93 d7 01 	sts	0x01D7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1d8c:	80 91 68 01 	lds	r24, 0x0168
    1d90:	90 91 69 01 	lds	r25, 0x0169
    1d94:	a0 91 6a 01 	lds	r26, 0x016A
    1d98:	b0 91 6b 01 	lds	r27, 0x016B
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	b1 1d       	adc	r27, r1
    1da2:	80 93 a8 01 	sts	0x01A8, r24
    1da6:	90 93 a9 01 	sts	0x01A9, r25
    1daa:	a0 93 aa 01 	sts	0x01AA, r26
    1dae:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1db2:	80 91 d4 01 	lds	r24, 0x01D4
    1db6:	90 91 d5 01 	lds	r25, 0x01D5
    1dba:	a0 91 d6 01 	lds	r26, 0x01D6
    1dbe:	b0 91 d7 01 	lds	r27, 0x01D7
    1dc2:	80 93 ed 01 	sts	0x01ED, r24
    1dc6:	90 93 ee 01 	sts	0x01EE, r25
    1dca:	a0 93 ef 01 	sts	0x01EF, r26
    1dce:	b0 93 f0 01 	sts	0x01F0, r27
					mute_start = cur_timer;
    1dd2:	80 91 68 01 	lds	r24, 0x0168
    1dd6:	90 91 69 01 	lds	r25, 0x0169
    1dda:	a0 91 6a 01 	lds	r26, 0x016A
    1dde:	b0 91 6b 01 	lds	r27, 0x016B
    1de2:	80 93 e7 01 	sts	0x01E7, r24
    1de6:	90 93 e8 01 	sts	0x01E8, r25
    1dea:	a0 93 e9 01 	sts	0x01E9, r26
    1dee:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = UINT32_MAX;
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	9f ef       	ldi	r25, 0xFF	; 255
    1df6:	dc 01       	movw	r26, r24
    1df8:	80 93 d8 01 	sts	0x01D8, r24
    1dfc:	90 93 d9 01 	sts	0x01D9, r25
    1e00:	a0 93 da 01 	sts	0x01DA, r26
    1e04:	b0 93 db 01 	sts	0x01DB, r27
    1e08:	75 c0       	rjmp	.+234    	; 0x1ef4 <main+0x64a>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    1e0a:	80 91 dc 01 	lds	r24, 0x01DC
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <main+0x56a>
    1e12:	6d c0       	rjmp	.+218    	; 0x1eee <main+0x644>
    1e14:	80 91 c0 01 	lds	r24, 0x01C0
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <main+0x574>
    1e1c:	68 c0       	rjmp	.+208    	; 0x1eee <main+0x644>
    1e1e:	80 91 a7 01 	lds	r24, 0x01A7
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <main+0x57e>
    1e26:	63 c0       	rjmp	.+198    	; 0x1eee <main+0x644>
				{
					prev_state = IDLE;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 72 01 	sts	0x0172, r24
					cur_state = DIT;
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	80 93 c8 01 	sts	0x01C8, r24
					next_state = DAH;
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + dit_length;
    1e3a:	80 91 73 01 	lds	r24, 0x0173
    1e3e:	90 91 74 01 	lds	r25, 0x0174
    1e42:	9c 01       	movw	r18, r24
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	80 91 68 01 	lds	r24, 0x0168
    1e4c:	90 91 69 01 	lds	r25, 0x0169
    1e50:	a0 91 6a 01 	lds	r26, 0x016A
    1e54:	b0 91 6b 01 	lds	r27, 0x016B
    1e58:	82 0f       	add	r24, r18
    1e5a:	93 1f       	adc	r25, r19
    1e5c:	a4 1f       	adc	r26, r20
    1e5e:	b5 1f       	adc	r27, r21
    1e60:	80 93 d4 01 	sts	0x01D4, r24
    1e64:	90 93 d5 01 	sts	0x01D5, r25
    1e68:	a0 93 d6 01 	sts	0x01D6, r26
    1e6c:	b0 93 d7 01 	sts	0x01D7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1e70:	80 91 68 01 	lds	r24, 0x0168
    1e74:	90 91 69 01 	lds	r25, 0x0169
    1e78:	a0 91 6a 01 	lds	r26, 0x016A
    1e7c:	b0 91 6b 01 	lds	r27, 0x016B
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	a1 1d       	adc	r26, r1
    1e84:	b1 1d       	adc	r27, r1
    1e86:	80 93 a8 01 	sts	0x01A8, r24
    1e8a:	90 93 a9 01 	sts	0x01A9, r25
    1e8e:	a0 93 aa 01 	sts	0x01AA, r26
    1e92:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1e96:	80 91 d4 01 	lds	r24, 0x01D4
    1e9a:	90 91 d5 01 	lds	r25, 0x01D5
    1e9e:	a0 91 d6 01 	lds	r26, 0x01D6
    1ea2:	b0 91 d7 01 	lds	r27, 0x01D7
    1ea6:	80 93 ed 01 	sts	0x01ED, r24
    1eaa:	90 93 ee 01 	sts	0x01EE, r25
    1eae:	a0 93 ef 01 	sts	0x01EF, r26
    1eb2:	b0 93 f0 01 	sts	0x01F0, r27
					mute_start = cur_timer;
    1eb6:	80 91 68 01 	lds	r24, 0x0168
    1eba:	90 91 69 01 	lds	r25, 0x0169
    1ebe:	a0 91 6a 01 	lds	r26, 0x016A
    1ec2:	b0 91 6b 01 	lds	r27, 0x016B
    1ec6:	80 93 e7 01 	sts	0x01E7, r24
    1eca:	90 93 e8 01 	sts	0x01E8, r25
    1ece:	a0 93 e9 01 	sts	0x01E9, r26
    1ed2:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = UINT32_MAX;
    1ed6:	8f ef       	ldi	r24, 0xFF	; 255
    1ed8:	9f ef       	ldi	r25, 0xFF	; 255
    1eda:	dc 01       	movw	r26, r24
    1edc:	80 93 d8 01 	sts	0x01D8, r24
    1ee0:	90 93 d9 01 	sts	0x01D9, r25
    1ee4:	a0 93 da 01 	sts	0x01DA, r26
    1ee8:	b0 93 db 01 	sts	0x01DB, r27
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <main+0x64a>
				}
				else
				{
					cur_state = IDLE;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	80 93 c8 01 	sts	0x01C8, r24
				}

				break;
    1ef4:	a4 c2       	rjmp	.+1352   	; 0x243e <main+0xb94>

			case DIT:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1ef6:	80 91 e2 01 	lds	r24, 0x01E2
    1efa:	90 91 e3 01 	lds	r25, 0x01E3
    1efe:	a0 91 e4 01 	lds	r26, 0x01E4
    1f02:	b0 91 e5 01 	lds	r27, 0x01E5
    1f06:	81 3b       	cpi	r24, 0xB1	; 177
    1f08:	e6 ef       	ldi	r30, 0xF6	; 246
    1f0a:	9e 07       	cpc	r25, r30
    1f0c:	ea ed       	ldi	r30, 0xDA	; 218
    1f0e:	ae 07       	cpc	r26, r30
    1f10:	e0 e0       	ldi	r30, 0x00	; 0
    1f12:	be 07       	cpc	r27, r30
    1f14:	80 f4       	brcc	.+32     	; 0x1f36 <main+0x68c>
    1f16:	80 91 e2 01 	lds	r24, 0x01E2
    1f1a:	90 91 e3 01 	lds	r25, 0x01E3
    1f1e:	a0 91 e4 01 	lds	r26, 0x01E4
    1f22:	b0 91 e5 01 	lds	r27, 0x01E5
    1f26:	80 38       	cpi	r24, 0x80	; 128
    1f28:	ff e9       	ldi	r31, 0x9F	; 159
    1f2a:	9f 07       	cpc	r25, r31
    1f2c:	f5 ed       	ldi	r31, 0xD5	; 213
    1f2e:	af 07       	cpc	r26, r31
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	bf 07       	cpc	r27, r31
    1f34:	38 f4       	brcc	.+14     	; 0x1f44 <main+0x69a>
				{
					key_down = FALSE;
    1f36:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    1f3a:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    1f3e:	10 92 3b 01 	sts	0x013B, r1
    1f42:	09 c0       	rjmp	.+18     	; 0x1f56 <main+0x6ac>
				}
				else
				{
					key_down = TRUE;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	80 93 3b 01 	sts	0x013B, r24
				}

				if(cur_timer > cur_state_end)
    1f56:	20 91 68 01 	lds	r18, 0x0168
    1f5a:	30 91 69 01 	lds	r19, 0x0169
    1f5e:	40 91 6a 01 	lds	r20, 0x016A
    1f62:	50 91 6b 01 	lds	r21, 0x016B
    1f66:	80 91 d4 01 	lds	r24, 0x01D4
    1f6a:	90 91 d5 01 	lds	r25, 0x01D5
    1f6e:	a0 91 d6 01 	lds	r26, 0x01D6
    1f72:	b0 91 d7 01 	lds	r27, 0x01D7
    1f76:	82 17       	cp	r24, r18
    1f78:	93 07       	cpc	r25, r19
    1f7a:	a4 07       	cpc	r26, r20
    1f7c:	b5 07       	cpc	r27, r21
    1f7e:	08 f0       	brcs	.+2      	; 0x1f82 <main+0x6d8>
    1f80:	45 c0       	rjmp	.+138    	; 0x200c <main+0x762>
				{
					prev_state = DIT;
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	80 93 72 01 	sts	0x0172, r24
					cur_state = DITDELAY;
    1f88:	84 e0       	ldi	r24, 0x04	; 4
    1f8a:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = cur_timer + dit_length;
    1f8e:	80 91 73 01 	lds	r24, 0x0173
    1f92:	90 91 74 01 	lds	r25, 0x0174
    1f96:	9c 01       	movw	r18, r24
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	80 91 68 01 	lds	r24, 0x0168
    1fa0:	90 91 69 01 	lds	r25, 0x0169
    1fa4:	a0 91 6a 01 	lds	r26, 0x016A
    1fa8:	b0 91 6b 01 	lds	r27, 0x016B
    1fac:	82 0f       	add	r24, r18
    1fae:	93 1f       	adc	r25, r19
    1fb0:	a4 1f       	adc	r26, r20
    1fb2:	b5 1f       	adc	r27, r21
    1fb4:	80 93 d4 01 	sts	0x01D4, r24
    1fb8:	90 93 d5 01 	sts	0x01D5, r25
    1fbc:	a0 93 d6 01 	sts	0x01D6, r26
    1fc0:	b0 93 d7 01 	sts	0x01D7, r27
					mute_start = cur_timer;
    1fc4:	80 91 68 01 	lds	r24, 0x0168
    1fc8:	90 91 69 01 	lds	r25, 0x0169
    1fcc:	a0 91 6a 01 	lds	r26, 0x016A
    1fd0:	b0 91 6b 01 	lds	r27, 0x016B
    1fd4:	80 93 e7 01 	sts	0x01E7, r24
    1fd8:	90 93 e8 01 	sts	0x01E8, r25
    1fdc:	a0 93 e9 01 	sts	0x01E9, r26
    1fe0:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1fe4:	80 91 d4 01 	lds	r24, 0x01D4
    1fe8:	90 91 d5 01 	lds	r25, 0x01D5
    1fec:	a0 91 d6 01 	lds	r26, 0x01D6
    1ff0:	b0 91 d7 01 	lds	r27, 0x01D7
    1ff4:	8c 59       	subi	r24, 0x9C	; 156
    1ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff8:	af 4f       	sbci	r26, 0xFF	; 255
    1ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffc:	80 93 d8 01 	sts	0x01D8, r24
    2000:	90 93 d9 01 	sts	0x01D9, r25
    2004:	a0 93 da 01 	sts	0x01DA, r26
    2008:	b0 93 db 01 	sts	0x01DB, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    200c:	80 91 c0 01 	lds	r24, 0x01C0
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	39 f4       	brne	.+14     	; 0x2022 <main+0x778>
    2014:	80 91 a7 01 	lds	r24, 0x01A7
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	19 f4       	brne	.+6      	; 0x2022 <main+0x778>
					next_state = DAH;
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	80 93 a7 01 	sts	0x01A7, r24

				break;
    2022:	0d c2       	rjmp	.+1050   	; 0x243e <main+0xb94>

			case DAH:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    2024:	80 91 e2 01 	lds	r24, 0x01E2
    2028:	90 91 e3 01 	lds	r25, 0x01E3
    202c:	a0 91 e4 01 	lds	r26, 0x01E4
    2030:	b0 91 e5 01 	lds	r27, 0x01E5
    2034:	81 3b       	cpi	r24, 0xB1	; 177
    2036:	26 ef       	ldi	r18, 0xF6	; 246
    2038:	92 07       	cpc	r25, r18
    203a:	2a ed       	ldi	r18, 0xDA	; 218
    203c:	a2 07       	cpc	r26, r18
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	b2 07       	cpc	r27, r18
    2042:	80 f4       	brcc	.+32     	; 0x2064 <main+0x7ba>
    2044:	80 91 e2 01 	lds	r24, 0x01E2
    2048:	90 91 e3 01 	lds	r25, 0x01E3
    204c:	a0 91 e4 01 	lds	r26, 0x01E4
    2050:	b0 91 e5 01 	lds	r27, 0x01E5
    2054:	80 38       	cpi	r24, 0x80	; 128
    2056:	ef e9       	ldi	r30, 0x9F	; 159
    2058:	9e 07       	cpc	r25, r30
    205a:	e5 ed       	ldi	r30, 0xD5	; 213
    205c:	ae 07       	cpc	r26, r30
    205e:	e0 e0       	ldi	r30, 0x00	; 0
    2060:	be 07       	cpc	r27, r30
    2062:	38 f4       	brcc	.+14     	; 0x2072 <main+0x7c8>
				{
					key_down = FALSE;
    2064:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    2068:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    206c:	10 92 3b 01 	sts	0x013B, r1
    2070:	09 c0       	rjmp	.+18     	; 0x2084 <main+0x7da>
				}
				else
				{
					key_down = TRUE;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	80 93 3b 01 	sts	0x013B, r24
				}

				if(cur_timer > cur_state_end)
    2084:	20 91 68 01 	lds	r18, 0x0168
    2088:	30 91 69 01 	lds	r19, 0x0169
    208c:	40 91 6a 01 	lds	r20, 0x016A
    2090:	50 91 6b 01 	lds	r21, 0x016B
    2094:	80 91 d4 01 	lds	r24, 0x01D4
    2098:	90 91 d5 01 	lds	r25, 0x01D5
    209c:	a0 91 d6 01 	lds	r26, 0x01D6
    20a0:	b0 91 d7 01 	lds	r27, 0x01D7
    20a4:	82 17       	cp	r24, r18
    20a6:	93 07       	cpc	r25, r19
    20a8:	a4 07       	cpc	r26, r20
    20aa:	b5 07       	cpc	r27, r21
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <main+0x806>
    20ae:	45 c0       	rjmp	.+138    	; 0x213a <main+0x890>
				{
					prev_state = DAH;
    20b0:	83 e0       	ldi	r24, 0x03	; 3
    20b2:	80 93 72 01 	sts	0x0172, r24
					cur_state = DITDELAY;
    20b6:	84 e0       	ldi	r24, 0x04	; 4
    20b8:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = cur_timer + dit_length;
    20bc:	80 91 73 01 	lds	r24, 0x0173
    20c0:	90 91 74 01 	lds	r25, 0x0174
    20c4:	9c 01       	movw	r18, r24
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	80 91 68 01 	lds	r24, 0x0168
    20ce:	90 91 69 01 	lds	r25, 0x0169
    20d2:	a0 91 6a 01 	lds	r26, 0x016A
    20d6:	b0 91 6b 01 	lds	r27, 0x016B
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	a4 1f       	adc	r26, r20
    20e0:	b5 1f       	adc	r27, r21
    20e2:	80 93 d4 01 	sts	0x01D4, r24
    20e6:	90 93 d5 01 	sts	0x01D5, r25
    20ea:	a0 93 d6 01 	sts	0x01D6, r26
    20ee:	b0 93 d7 01 	sts	0x01D7, r27
					mute_start = cur_timer;
    20f2:	80 91 68 01 	lds	r24, 0x0168
    20f6:	90 91 69 01 	lds	r25, 0x0169
    20fa:	a0 91 6a 01 	lds	r26, 0x016A
    20fe:	b0 91 6b 01 	lds	r27, 0x016B
    2102:	80 93 e7 01 	sts	0x01E7, r24
    2106:	90 93 e8 01 	sts	0x01E8, r25
    210a:	a0 93 e9 01 	sts	0x01E9, r26
    210e:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    2112:	80 91 d4 01 	lds	r24, 0x01D4
    2116:	90 91 d5 01 	lds	r25, 0x01D5
    211a:	a0 91 d6 01 	lds	r26, 0x01D6
    211e:	b0 91 d7 01 	lds	r27, 0x01D7
    2122:	8c 59       	subi	r24, 0x9C	; 156
    2124:	9f 4f       	sbci	r25, 0xFF	; 255
    2126:	af 4f       	sbci	r26, 0xFF	; 255
    2128:	bf 4f       	sbci	r27, 0xFF	; 255
    212a:	80 93 d8 01 	sts	0x01D8, r24
    212e:	90 93 d9 01 	sts	0x01D9, r25
    2132:	a0 93 da 01 	sts	0x01DA, r26
    2136:	b0 93 db 01 	sts	0x01DB, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    213a:	80 91 dc 01 	lds	r24, 0x01DC
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	39 f4       	brne	.+14     	; 0x2150 <main+0x8a6>
    2142:	80 91 a7 01 	lds	r24, 0x01A7
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	19 f4       	brne	.+6      	; 0x2150 <main+0x8a6>
					next_state = DIT;
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	80 93 a7 01 	sts	0x01A7, r24

				break;
    2150:	76 c1       	rjmp	.+748    	; 0x243e <main+0xb94>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    2152:	20 91 68 01 	lds	r18, 0x0168
    2156:	30 91 69 01 	lds	r19, 0x0169
    215a:	40 91 6a 01 	lds	r20, 0x016A
    215e:	50 91 6b 01 	lds	r21, 0x016B
    2162:	80 91 d4 01 	lds	r24, 0x01D4
    2166:	90 91 d5 01 	lds	r25, 0x01D5
    216a:	a0 91 d6 01 	lds	r26, 0x01D6
    216e:	b0 91 d7 01 	lds	r27, 0x01D7
    2172:	82 17       	cp	r24, r18
    2174:	93 07       	cpc	r25, r19
    2176:	a4 07       	cpc	r26, r20
    2178:	b5 07       	cpc	r27, r21
    217a:	08 f0       	brcs	.+2      	; 0x217e <main+0x8d4>
    217c:	e2 c0       	rjmp	.+452    	; 0x2342 <main+0xa98>
				{
					if(next_state == DIT)
    217e:	80 91 a7 01 	lds	r24, 0x01A7
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	09 f0       	breq	.+2      	; 0x2188 <main+0x8de>
    2186:	5d c0       	rjmp	.+186    	; 0x2242 <main+0x998>
					{
						cur_state = DIT;
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	80 93 c8 01 	sts	0x01C8, r24
						cur_state_end = cur_timer + dit_length;
    218e:	80 91 73 01 	lds	r24, 0x0173
    2192:	90 91 74 01 	lds	r25, 0x0174
    2196:	9c 01       	movw	r18, r24
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	80 91 68 01 	lds	r24, 0x0168
    21a0:	90 91 69 01 	lds	r25, 0x0169
    21a4:	a0 91 6a 01 	lds	r26, 0x016A
    21a8:	b0 91 6b 01 	lds	r27, 0x016B
    21ac:	82 0f       	add	r24, r18
    21ae:	93 1f       	adc	r25, r19
    21b0:	a4 1f       	adc	r26, r20
    21b2:	b5 1f       	adc	r27, r21
    21b4:	80 93 d4 01 	sts	0x01D4, r24
    21b8:	90 93 d5 01 	sts	0x01D5, r25
    21bc:	a0 93 d6 01 	sts	0x01D6, r26
    21c0:	b0 93 d7 01 	sts	0x01D7, r27
						tx_start = cur_timer + TX_ON_DELAY;
    21c4:	80 91 68 01 	lds	r24, 0x0168
    21c8:	90 91 69 01 	lds	r25, 0x0169
    21cc:	a0 91 6a 01 	lds	r26, 0x016A
    21d0:	b0 91 6b 01 	lds	r27, 0x016B
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	a1 1d       	adc	r26, r1
    21d8:	b1 1d       	adc	r27, r1
    21da:	80 93 a8 01 	sts	0x01A8, r24
    21de:	90 93 a9 01 	sts	0x01A9, r25
    21e2:	a0 93 aa 01 	sts	0x01AA, r26
    21e6:	b0 93 ab 01 	sts	0x01AB, r27
						tx_end = cur_state_end;
    21ea:	80 91 d4 01 	lds	r24, 0x01D4
    21ee:	90 91 d5 01 	lds	r25, 0x01D5
    21f2:	a0 91 d6 01 	lds	r26, 0x01D6
    21f6:	b0 91 d7 01 	lds	r27, 0x01D7
    21fa:	80 93 ed 01 	sts	0x01ED, r24
    21fe:	90 93 ee 01 	sts	0x01EE, r25
    2202:	a0 93 ef 01 	sts	0x01EF, r26
    2206:	b0 93 f0 01 	sts	0x01F0, r27
						mute_start = cur_timer;
    220a:	80 91 68 01 	lds	r24, 0x0168
    220e:	90 91 69 01 	lds	r25, 0x0169
    2212:	a0 91 6a 01 	lds	r26, 0x016A
    2216:	b0 91 6b 01 	lds	r27, 0x016B
    221a:	80 93 e7 01 	sts	0x01E7, r24
    221e:	90 93 e8 01 	sts	0x01E8, r25
    2222:	a0 93 e9 01 	sts	0x01E9, r26
    2226:	b0 93 ea 01 	sts	0x01EA, r27
						mute_end = UINT32_MAX;
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	9f ef       	ldi	r25, 0xFF	; 255
    222e:	dc 01       	movw	r26, r24
    2230:	80 93 d8 01 	sts	0x01D8, r24
    2234:	90 93 d9 01 	sts	0x01D9, r25
    2238:	a0 93 da 01 	sts	0x01DA, r26
    223c:	b0 93 db 01 	sts	0x01DB, r27
    2240:	7a c0       	rjmp	.+244    	; 0x2336 <main+0xa8c>
					}
					else if(next_state == DAH)
    2242:	80 91 a7 01 	lds	r24, 0x01A7
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	09 f0       	breq	.+2      	; 0x224c <main+0x9a2>
    224a:	62 c0       	rjmp	.+196    	; 0x2310 <main+0xa66>
					{
						cur_state = DAH;
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	80 93 c8 01 	sts	0x01C8, r24
						cur_state_end = cur_timer + (dit_length * 3);
    2252:	20 91 73 01 	lds	r18, 0x0173
    2256:	30 91 74 01 	lds	r19, 0x0174
    225a:	c9 01       	movw	r24, r18
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	82 0f       	add	r24, r18
    2262:	93 1f       	adc	r25, r19
    2264:	9c 01       	movw	r18, r24
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	80 91 68 01 	lds	r24, 0x0168
    226e:	90 91 69 01 	lds	r25, 0x0169
    2272:	a0 91 6a 01 	lds	r26, 0x016A
    2276:	b0 91 6b 01 	lds	r27, 0x016B
    227a:	82 0f       	add	r24, r18
    227c:	93 1f       	adc	r25, r19
    227e:	a4 1f       	adc	r26, r20
    2280:	b5 1f       	adc	r27, r21
    2282:	80 93 d4 01 	sts	0x01D4, r24
    2286:	90 93 d5 01 	sts	0x01D5, r25
    228a:	a0 93 d6 01 	sts	0x01D6, r26
    228e:	b0 93 d7 01 	sts	0x01D7, r27
						tx_start = cur_timer + TX_ON_DELAY;
    2292:	80 91 68 01 	lds	r24, 0x0168
    2296:	90 91 69 01 	lds	r25, 0x0169
    229a:	a0 91 6a 01 	lds	r26, 0x016A
    229e:	b0 91 6b 01 	lds	r27, 0x016B
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	a1 1d       	adc	r26, r1
    22a6:	b1 1d       	adc	r27, r1
    22a8:	80 93 a8 01 	sts	0x01A8, r24
    22ac:	90 93 a9 01 	sts	0x01A9, r25
    22b0:	a0 93 aa 01 	sts	0x01AA, r26
    22b4:	b0 93 ab 01 	sts	0x01AB, r27
						tx_end = cur_state_end;
    22b8:	80 91 d4 01 	lds	r24, 0x01D4
    22bc:	90 91 d5 01 	lds	r25, 0x01D5
    22c0:	a0 91 d6 01 	lds	r26, 0x01D6
    22c4:	b0 91 d7 01 	lds	r27, 0x01D7
    22c8:	80 93 ed 01 	sts	0x01ED, r24
    22cc:	90 93 ee 01 	sts	0x01EE, r25
    22d0:	a0 93 ef 01 	sts	0x01EF, r26
    22d4:	b0 93 f0 01 	sts	0x01F0, r27
						mute_start = cur_timer;
    22d8:	80 91 68 01 	lds	r24, 0x0168
    22dc:	90 91 69 01 	lds	r25, 0x0169
    22e0:	a0 91 6a 01 	lds	r26, 0x016A
    22e4:	b0 91 6b 01 	lds	r27, 0x016B
    22e8:	80 93 e7 01 	sts	0x01E7, r24
    22ec:	90 93 e8 01 	sts	0x01E8, r25
    22f0:	a0 93 e9 01 	sts	0x01E9, r26
    22f4:	b0 93 ea 01 	sts	0x01EA, r27
						mute_end = UINT32_MAX;
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	9f ef       	ldi	r25, 0xFF	; 255
    22fc:	dc 01       	movw	r26, r24
    22fe:	80 93 d8 01 	sts	0x01D8, r24
    2302:	90 93 d9 01 	sts	0x01D9, r25
    2306:	a0 93 da 01 	sts	0x01DA, r26
    230a:	b0 93 db 01 	sts	0x01DB, r27
    230e:	13 c0       	rjmp	.+38     	; 0x2336 <main+0xa8c>
					}
					else
					{
						cur_state = IDLE;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	80 93 c8 01 	sts	0x01C8, r24
						cur_state_end = cur_timer;
    2316:	80 91 68 01 	lds	r24, 0x0168
    231a:	90 91 69 01 	lds	r25, 0x0169
    231e:	a0 91 6a 01 	lds	r26, 0x016A
    2322:	b0 91 6b 01 	lds	r27, 0x016B
    2326:	80 93 d4 01 	sts	0x01D4, r24
    232a:	90 93 d5 01 	sts	0x01D5, r25
    232e:	a0 93 d6 01 	sts	0x01D6, r26
    2332:	b0 93 d7 01 	sts	0x01D7, r27
					}

					prev_state = DITDELAY;
    2336:	84 e0       	ldi	r24, 0x04	; 4
    2338:	80 93 72 01 	sts	0x0172, r24
					next_state = IDLE;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	80 93 a7 01 	sts	0x01A7, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    2342:	80 91 dc 01 	lds	r24, 0x01DC
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	61 f4       	brne	.+24     	; 0x2362 <main+0xab8>
    234a:	80 91 72 01 	lds	r24, 0x0172
    234e:	83 30       	cpi	r24, 0x03	; 3
    2350:	41 f4       	brne	.+16     	; 0x2362 <main+0xab8>
    2352:	80 91 a7 01 	lds	r24, 0x01A7
    2356:	81 30       	cpi	r24, 0x01	; 1
    2358:	21 f4       	brne	.+8      	; 0x2362 <main+0xab8>
					next_state = DIT;
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	80 93 a7 01 	sts	0x01A7, r24
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <main+0xad6>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    2362:	80 91 c0 01 	lds	r24, 0x01C0
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	59 f4       	brne	.+22     	; 0x2380 <main+0xad6>
    236a:	80 91 72 01 	lds	r24, 0x0172
    236e:	82 30       	cpi	r24, 0x02	; 2
    2370:	39 f4       	brne	.+14     	; 0x2380 <main+0xad6>
    2372:	80 91 a7 01 	lds	r24, 0x01A7
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	19 f4       	brne	.+6      	; 0x2380 <main+0xad6>
					next_state = DAH;
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	80 93 a7 01 	sts	0x01A7, r24

				key_down = FALSE;
    2380:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2384:	10 92 3a 01 	sts	0x013A, r1
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    2388:	80 91 e2 01 	lds	r24, 0x01E2
    238c:	90 91 e3 01 	lds	r25, 0x01E3
    2390:	a0 91 e4 01 	lds	r26, 0x01E4
    2394:	b0 91 e5 01 	lds	r27, 0x01E5
    2398:	81 3b       	cpi	r24, 0xB1	; 177
    239a:	f6 ef       	ldi	r31, 0xF6	; 246
    239c:	9f 07       	cpc	r25, r31
    239e:	fa ed       	ldi	r31, 0xDA	; 218
    23a0:	af 07       	cpc	r26, r31
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	bf 07       	cpc	r27, r31
    23a6:	80 f4       	brcc	.+32     	; 0x23c8 <main+0xb1e>
    23a8:	80 91 e2 01 	lds	r24, 0x01E2
    23ac:	90 91 e3 01 	lds	r25, 0x01E3
    23b0:	a0 91 e4 01 	lds	r26, 0x01E4
    23b4:	b0 91 e5 01 	lds	r27, 0x01E5
    23b8:	80 38       	cpi	r24, 0x80	; 128
    23ba:	2f e9       	ldi	r18, 0x9F	; 159
    23bc:	92 07       	cpc	r25, r18
    23be:	25 ed       	ldi	r18, 0xD5	; 213
    23c0:	a2 07       	cpc	r26, r18
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	b2 07       	cpc	r27, r18
    23c6:	18 f4       	brcc	.+6      	; 0x23ce <main+0xb24>
					mute_on = FALSE;
    23c8:	10 92 3b 01 	sts	0x013B, r1
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <main+0xb2a>
				else
					mute_on = TRUE;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	80 93 3b 01 	sts	0x013B, r24
				break;
    23d4:	34 c0       	rjmp	.+104    	; 0x243e <main+0xb94>

			case EXIT:
				key_down = FALSE;
    23d6:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    23da:	10 92 3a 01 	sts	0x013A, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    23de:	10 92 3b 01 	sts	0x013B, r1

				if(cur_timer > cur_state_end)
    23e2:	20 91 68 01 	lds	r18, 0x0168
    23e6:	30 91 69 01 	lds	r19, 0x0169
    23ea:	40 91 6a 01 	lds	r20, 0x016A
    23ee:	50 91 6b 01 	lds	r21, 0x016B
    23f2:	80 91 d4 01 	lds	r24, 0x01D4
    23f6:	90 91 d5 01 	lds	r25, 0x01D5
    23fa:	a0 91 d6 01 	lds	r26, 0x01D6
    23fe:	b0 91 d7 01 	lds	r27, 0x01D7
    2402:	82 17       	cp	r24, r18
    2404:	93 07       	cpc	r25, r19
    2406:	a4 07       	cpc	r26, r20
    2408:	b5 07       	cpc	r27, r21
    240a:	18 f4       	brcc	.+6      	; 0x2412 <main+0xb68>
				{
					cur_state = IDLE;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	80 93 c8 01 	sts	0x01C8, r24
				}

				sleep_timer = cur_timer + SLEEP_DELAY;
    2412:	80 91 68 01 	lds	r24, 0x0168
    2416:	90 91 69 01 	lds	r25, 0x0169
    241a:	a0 91 6a 01 	lds	r26, 0x016A
    241e:	b0 91 6b 01 	lds	r27, 0x016B
    2422:	84 5d       	subi	r24, 0xD4	; 212
    2424:	9e 4f       	sbci	r25, 0xFE	; 254
    2426:	af 4f       	sbci	r26, 0xFF	; 255
    2428:	bf 4f       	sbci	r27, 0xFF	; 255
    242a:	80 93 cd 01 	sts	0x01CD, r24
    242e:	90 93 ce 01 	sts	0x01CE, r25
    2432:	a0 93 cf 01 	sts	0x01CF, r26
    2436:	b0 93 d0 01 	sts	0x01D0, r27
				break;
    243a:	01 c0       	rjmp	.+2      	; 0x243e <main+0xb94>

			default:
				break;
    243c:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    243e:	4d c7       	rjmp	.+3738   	; 0x32da <main+0x1a30>

		case ANNOUNCE:
			switch(cur_state)
    2440:	80 91 c8 01 	lds	r24, 0x01C8
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	84 30       	cpi	r24, 0x04	; 4
    244a:	91 05       	cpc	r25, r1
    244c:	44 f4       	brge	.+16     	; 0x245e <main+0xbb4>
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	91 05       	cpc	r25, r1
    2452:	0c f0       	brlt	.+2      	; 0x2456 <main+0xbac>
    2454:	49 c1       	rjmp	.+658    	; 0x26e8 <main+0xe3e>
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	91 05       	cpc	r25, r1
    245a:	31 f0       	breq	.+12     	; 0x2468 <main+0xbbe>
    245c:	a1 c1       	rjmp	.+834    	; 0x27a0 <main+0xef6>
    245e:	87 30       	cpi	r24, 0x07	; 7
    2460:	91 05       	cpc	r25, r1
    2462:	0c f0       	brlt	.+2      	; 0x2466 <main+0xbbc>
    2464:	9d c1       	rjmp	.+826    	; 0x27a0 <main+0xef6>
    2466:	7c c1       	rjmp	.+760    	; 0x2760 <main+0xeb6>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2468:	20 91 3e 01 	lds	r18, 0x013E
    246c:	30 91 3f 01 	lds	r19, 0x013F
    2470:	80 91 eb 01 	lds	r24, 0x01EB
    2474:	90 91 ec 01 	lds	r25, 0x01EC
    2478:	28 17       	cp	r18, r24
    247a:	39 07       	cpc	r19, r25
    247c:	c9 f4       	brne	.+50     	; 0x24b0 <main+0xc06>
    247e:	80 91 42 01 	lds	r24, 0x0142
    2482:	88 23       	and	r24, r24
    2484:	a9 f4       	brne	.+42     	; 0x24b0 <main+0xc06>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2486:	80 91 3e 01 	lds	r24, 0x013E
    248a:	90 91 3f 01 	lds	r25, 0x013F
    248e:	fc 01       	movw	r30, r24
    2490:	80 81       	ld	r24, Z
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	80 97       	sbiw	r24, 0x20	; 32
    2498:	88 59       	subi	r24, 0x98	; 152
    249a:	9f 4f       	sbci	r25, 0xFF	; 255
    249c:	9b 83       	std	Y+3, r25	; 0x03
    249e:	8a 83       	std	Y+2, r24	; 0x02
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	9b 81       	ldd	r25, Y+3	; 0x03
    24a4:	fc 01       	movw	r30, r24
    24a6:	14 91       	lpm	r17, Z+
    24a8:	1c 83       	std	Y+4, r17	; 0x04
    24aa:	8c 81       	ldd	r24, Y+4	; 0x04
    24ac:	80 93 42 01 	sts	0x0142, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    24b0:	80 91 42 01 	lds	r24, 0x0142
    24b4:	88 23       	and	r24, r24
    24b6:	09 f4       	brne	.+2      	; 0x24ba <main+0xc10>
    24b8:	ce c0       	rjmp	.+412    	; 0x2656 <main+0xdac>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    24ba:	80 91 42 01 	lds	r24, 0x0142
    24be:	80 38       	cpi	r24, 0x80	; 128
    24c0:	29 f0       	breq	.+10     	; 0x24cc <main+0xc22>
    24c2:	80 91 42 01 	lds	r24, 0x0142
    24c6:	8f 3f       	cpi	r24, 0xFF	; 255
    24c8:	09 f0       	breq	.+2      	; 0x24cc <main+0xc22>
    24ca:	79 c0       	rjmp	.+242    	; 0x25be <main+0xd14>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    24cc:	80 91 42 01 	lds	r24, 0x0142
    24d0:	80 38       	cpi	r24, 0x80	; 128
    24d2:	21 f5       	brne	.+72     	; 0x251c <main+0xc72>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    24d4:	20 91 73 01 	lds	r18, 0x0173
    24d8:	30 91 74 01 	lds	r19, 0x0174
    24dc:	c9 01       	movw	r24, r18
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	82 0f       	add	r24, r18
    24e4:	93 1f       	adc	r25, r19
    24e6:	9c 01       	movw	r18, r24
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	80 91 68 01 	lds	r24, 0x0168
    24f0:	90 91 69 01 	lds	r25, 0x0169
    24f4:	a0 91 6a 01 	lds	r26, 0x016A
    24f8:	b0 91 6b 01 	lds	r27, 0x016B
    24fc:	82 0f       	add	r24, r18
    24fe:	93 1f       	adc	r25, r19
    2500:	a4 1f       	adc	r26, r20
    2502:	b5 1f       	adc	r27, r21
    2504:	80 93 d4 01 	sts	0x01D4, r24
    2508:	90 93 d5 01 	sts	0x01D5, r25
    250c:	a0 93 d6 01 	sts	0x01D6, r26
    2510:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAHDELAY;
    2514:	85 e0       	ldi	r24, 0x05	; 5
    2516:	80 93 c8 01 	sts	0x01C8, r24
    251a:	27 c0       	rjmp	.+78     	; 0x256a <main+0xcc0>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    251c:	20 91 73 01 	lds	r18, 0x0173
    2520:	30 91 74 01 	lds	r19, 0x0174
    2524:	c9 01       	movw	r24, r18
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	82 1b       	sub	r24, r18
    2534:	93 0b       	sbc	r25, r19
    2536:	9c 01       	movw	r18, r24
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	80 91 68 01 	lds	r24, 0x0168
    2540:	90 91 69 01 	lds	r25, 0x0169
    2544:	a0 91 6a 01 	lds	r26, 0x016A
    2548:	b0 91 6b 01 	lds	r27, 0x016B
    254c:	82 0f       	add	r24, r18
    254e:	93 1f       	adc	r25, r19
    2550:	a4 1f       	adc	r26, r20
    2552:	b5 1f       	adc	r27, r21
    2554:	80 93 d4 01 	sts	0x01D4, r24
    2558:	90 93 d5 01 	sts	0x01D5, r25
    255c:	a0 93 d6 01 	sts	0x01D6, r26
    2560:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAHDELAY;
    2564:	85 e0       	ldi	r24, 0x05	; 5
    2566:	80 93 c8 01 	sts	0x01C8, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    256a:	80 91 3e 01 	lds	r24, 0x013E
    256e:	90 91 3f 01 	lds	r25, 0x013F
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	90 93 3f 01 	sts	0x013F, r25
    2578:	80 93 3e 01 	sts	0x013E, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    257c:	80 91 3e 01 	lds	r24, 0x013E
    2580:	90 91 3f 01 	lds	r25, 0x013F
    2584:	fc 01       	movw	r30, r24
    2586:	80 81       	ld	r24, Z
    2588:	88 23       	and	r24, r24
    258a:	19 f4       	brne	.+6      	; 0x2592 <main+0xce8>
							cur_character = '\0';
    258c:	10 92 42 01 	sts	0x0142, r1
    2590:	15 c0       	rjmp	.+42     	; 0x25bc <main+0xd12>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2592:	80 91 3e 01 	lds	r24, 0x013E
    2596:	90 91 3f 01 	lds	r25, 0x013F
    259a:	fc 01       	movw	r30, r24
    259c:	80 81       	ld	r24, Z
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	80 97       	sbiw	r24, 0x20	; 32
    25a4:	88 59       	subi	r24, 0x98	; 152
    25a6:	9f 4f       	sbci	r25, 0xFF	; 255
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	fc 01       	movw	r30, r24
    25b2:	14 91       	lpm	r17, Z+
    25b4:	1f 83       	std	Y+7, r17	; 0x07
    25b6:	8f 81       	ldd	r24, Y+7	; 0x07
    25b8:	80 93 42 01 	sts	0x0142, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    25bc:	4b c0       	rjmp	.+150    	; 0x2654 <main+0xdaa>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    25be:	80 91 42 01 	lds	r24, 0x0142
    25c2:	88 23       	and	r24, r24
    25c4:	24 f5       	brge	.+72     	; 0x260e <main+0xd64>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    25c6:	20 91 73 01 	lds	r18, 0x0173
    25ca:	30 91 74 01 	lds	r19, 0x0174
    25ce:	c9 01       	movw	r24, r18
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	9c 01       	movw	r18, r24
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	80 91 68 01 	lds	r24, 0x0168
    25e2:	90 91 69 01 	lds	r25, 0x0169
    25e6:	a0 91 6a 01 	lds	r26, 0x016A
    25ea:	b0 91 6b 01 	lds	r27, 0x016B
    25ee:	82 0f       	add	r24, r18
    25f0:	93 1f       	adc	r25, r19
    25f2:	a4 1f       	adc	r26, r20
    25f4:	b5 1f       	adc	r27, r21
    25f6:	80 93 d4 01 	sts	0x01D4, r24
    25fa:	90 93 d5 01 	sts	0x01D5, r25
    25fe:	a0 93 d6 01 	sts	0x01D6, r26
    2602:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAH;
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	80 93 c8 01 	sts	0x01C8, r24
    260c:	1e c0       	rjmp	.+60     	; 0x264a <main+0xda0>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    260e:	80 91 73 01 	lds	r24, 0x0173
    2612:	90 91 74 01 	lds	r25, 0x0174
    2616:	9c 01       	movw	r18, r24
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	80 91 68 01 	lds	r24, 0x0168
    2620:	90 91 69 01 	lds	r25, 0x0169
    2624:	a0 91 6a 01 	lds	r26, 0x016A
    2628:	b0 91 6b 01 	lds	r27, 0x016B
    262c:	82 0f       	add	r24, r18
    262e:	93 1f       	adc	r25, r19
    2630:	a4 1f       	adc	r26, r20
    2632:	b5 1f       	adc	r27, r21
    2634:	80 93 d4 01 	sts	0x01D4, r24
    2638:	90 93 d5 01 	sts	0x01D5, r25
    263c:	a0 93 d6 01 	sts	0x01D6, r26
    2640:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DIT;
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	80 93 c8 01 	sts	0x01C8, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    264a:	80 91 42 01 	lds	r24, 0x0142
    264e:	88 0f       	add	r24, r24
    2650:	80 93 42 01 	sts	0x0142, r24
    2654:	48 c0       	rjmp	.+144    	; 0x26e6 <main+0xe3c>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2656:	80 91 eb 01 	lds	r24, 0x01EB
    265a:	90 91 ec 01 	lds	r25, 0x01EC
    265e:	2c e2       	ldi	r18, 0x2C	; 44
    2660:	31 e0       	ldi	r19, 0x01	; 1
    2662:	b9 01       	movw	r22, r18
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	0e 94 0a 1b 	call	0x3614	; 0x3614 <memcpy>
					cur_char_p = announce_buffer;
    266c:	80 91 eb 01 	lds	r24, 0x01EB
    2670:	90 91 ec 01 	lds	r25, 0x01EC
    2674:	90 93 3f 01 	sts	0x013F, r25
    2678:	80 93 3e 01 	sts	0x013E, r24
					cur_character = '\0';
    267c:	10 92 42 01 	sts	0x0142, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    2680:	80 91 cb 01 	lds	r24, 0x01CB
    2684:	90 91 cc 01 	lds	r25, 0x01CC
    2688:	90 93 bb 01 	sts	0x01BB, r25
    268c:	80 93 ba 01 	sts	0x01BA, r24
					set_st_freq(st_freq);
    2690:	80 91 ba 01 	lds	r24, 0x01BA
    2694:	90 91 bb 01 	lds	r25, 0x01BB
    2698:	cc 01       	movw	r24, r24
    269a:	a0 e0       	ldi	r26, 0x00	; 0
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 2e 0c 	call	0x185c	; 0x185c <set_st_freq>

					wpm = prev_wpm;
    26a6:	80 91 f2 01 	lds	r24, 0x01F2
    26aa:	80 93 e6 01 	sts	0x01E6, r24
					set_wpm(wpm);
    26ae:	80 91 e6 01 	lds	r24, 0x01E6
    26b2:	0e 94 4f 04 	call	0x89e	; 0x89e <set_wpm>

					cur_mode = prev_mode;
    26b6:	80 91 b8 01 	lds	r24, 0x01B8
    26ba:	80 93 a2 01 	sts	0x01A2, r24
					cur_state = prev_state;
    26be:	80 91 72 01 	lds	r24, 0x0172
    26c2:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = prev_state_end;
    26c6:	80 91 b4 01 	lds	r24, 0x01B4
    26ca:	90 91 b5 01 	lds	r25, 0x01B5
    26ce:	a0 91 b6 01 	lds	r26, 0x01B6
    26d2:	b0 91 b7 01 	lds	r27, 0x01B7
    26d6:	80 93 d4 01 	sts	0x01D4, r24
    26da:	90 93 d5 01 	sts	0x01D5, r25
    26de:	a0 93 d6 01 	sts	0x01D6, r26
    26e2:	b0 93 d7 01 	sts	0x01D7, r27
				}
				break;
    26e6:	5d c0       	rjmp	.+186    	; 0x27a2 <main+0xef8>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    26e8:	20 91 68 01 	lds	r18, 0x0168
    26ec:	30 91 69 01 	lds	r19, 0x0169
    26f0:	40 91 6a 01 	lds	r20, 0x016A
    26f4:	50 91 6b 01 	lds	r21, 0x016B
    26f8:	80 91 d4 01 	lds	r24, 0x01D4
    26fc:	90 91 d5 01 	lds	r25, 0x01D5
    2700:	a0 91 d6 01 	lds	r26, 0x01D6
    2704:	b0 91 d7 01 	lds	r27, 0x01D7
    2708:	82 17       	cp	r24, r18
    270a:	93 07       	cpc	r25, r19
    270c:	a4 07       	cpc	r26, r20
    270e:	b5 07       	cpc	r27, r21
    2710:	f0 f4       	brcc	.+60     	; 0x274e <main+0xea4>
				{
					cur_state_end = cur_timer + dit_length;
    2712:	80 91 73 01 	lds	r24, 0x0173
    2716:	90 91 74 01 	lds	r25, 0x0174
    271a:	9c 01       	movw	r18, r24
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	80 91 68 01 	lds	r24, 0x0168
    2724:	90 91 69 01 	lds	r25, 0x0169
    2728:	a0 91 6a 01 	lds	r26, 0x016A
    272c:	b0 91 6b 01 	lds	r27, 0x016B
    2730:	82 0f       	add	r24, r18
    2732:	93 1f       	adc	r25, r19
    2734:	a4 1f       	adc	r26, r20
    2736:	b5 1f       	adc	r27, r21
    2738:	80 93 d4 01 	sts	0x01D4, r24
    273c:	90 93 d5 01 	sts	0x01D5, r25
    2740:	a0 93 d6 01 	sts	0x01D6, r26
    2744:	b0 93 d7 01 	sts	0x01D7, r27
					cur_state = DITDELAY;
    2748:	84 e0       	ldi	r24, 0x04	; 4
    274a:	80 93 c8 01 	sts	0x01C8, r24
				}

				key_down = FALSE;
    274e:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = TRUE;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	80 93 3b 01 	sts	0x013B, r24
				break;
    275e:	21 c0       	rjmp	.+66     	; 0x27a2 <main+0xef8>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    2760:	20 91 68 01 	lds	r18, 0x0168
    2764:	30 91 69 01 	lds	r19, 0x0169
    2768:	40 91 6a 01 	lds	r20, 0x016A
    276c:	50 91 6b 01 	lds	r21, 0x016B
    2770:	80 91 d4 01 	lds	r24, 0x01D4
    2774:	90 91 d5 01 	lds	r25, 0x01D5
    2778:	a0 91 d6 01 	lds	r26, 0x01D6
    277c:	b0 91 d7 01 	lds	r27, 0x01D7
    2780:	82 17       	cp	r24, r18
    2782:	93 07       	cpc	r25, r19
    2784:	a4 07       	cpc	r26, r20
    2786:	b5 07       	cpc	r27, r21
    2788:	18 f4       	brcc	.+6      	; 0x2790 <main+0xee6>
					cur_state = IDLE;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	80 93 c8 01 	sts	0x01C8, r24

				key_down = FALSE;
    2790:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2794:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	80 93 3b 01 	sts	0x013B, r24
				break;
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <main+0xef8>

			default:
				break;
    27a0:	00 00       	nop
			}
			break;
    27a2:	9b c5       	rjmp	.+2870   	; 0x32da <main+0x1a30>

		case TUNE:
			switch(cur_state)
    27a4:	80 91 c8 01 	lds	r24, 0x01C8
    27a8:	88 2f       	mov	r24, r24
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	87 30       	cpi	r24, 0x07	; 7
    27ae:	91 05       	cpc	r25, r1
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <main+0xf0a>
    27b2:	50 c0       	rjmp	.+160    	; 0x2854 <main+0xfaa>
    27b4:	88 30       	cpi	r24, 0x08	; 8
    27b6:	91 05       	cpc	r25, r1
    27b8:	09 f4       	brne	.+2      	; 0x27bc <main+0xf12>
    27ba:	8d c0       	rjmp	.+282    	; 0x28d6 <main+0x102c>
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	91 05       	cpc	r25, r1
    27c0:	09 f0       	breq	.+2      	; 0x27c4 <main+0xf1a>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    27c2:	af c0       	rjmp	.+350    	; 0x2922 <main+0x1078>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    27c4:	80 91 68 01 	lds	r24, 0x0168
    27c8:	90 91 69 01 	lds	r25, 0x0169
    27cc:	a0 91 6a 01 	lds	r26, 0x016A
    27d0:	b0 91 6b 01 	lds	r27, 0x016B
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	a1 1d       	adc	r26, r1
    27d8:	b1 1d       	adc	r27, r1
    27da:	80 93 a8 01 	sts	0x01A8, r24
    27de:	90 93 a9 01 	sts	0x01A9, r25
    27e2:	a0 93 aa 01 	sts	0x01AA, r26
    27e6:	b0 93 ab 01 	sts	0x01AB, r27
				tx_end = UINT32_MAX;
    27ea:	8f ef       	ldi	r24, 0xFF	; 255
    27ec:	9f ef       	ldi	r25, 0xFF	; 255
    27ee:	dc 01       	movw	r26, r24
    27f0:	80 93 ed 01 	sts	0x01ED, r24
    27f4:	90 93 ee 01 	sts	0x01EE, r25
    27f8:	a0 93 ef 01 	sts	0x01EF, r26
    27fc:	b0 93 f0 01 	sts	0x01F0, r27
				cur_state_end = UINT32_MAX;
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	9f ef       	ldi	r25, 0xFF	; 255
    2804:	dc 01       	movw	r26, r24
    2806:	80 93 d4 01 	sts	0x01D4, r24
    280a:	90 93 d5 01 	sts	0x01D5, r25
    280e:	a0 93 d6 01 	sts	0x01D6, r26
    2812:	b0 93 d7 01 	sts	0x01D7, r27
				mute_start = cur_timer;
    2816:	80 91 68 01 	lds	r24, 0x0168
    281a:	90 91 69 01 	lds	r25, 0x0169
    281e:	a0 91 6a 01 	lds	r26, 0x016A
    2822:	b0 91 6b 01 	lds	r27, 0x016B
    2826:	80 93 e7 01 	sts	0x01E7, r24
    282a:	90 93 e8 01 	sts	0x01E8, r25
    282e:	a0 93 e9 01 	sts	0x01E9, r26
    2832:	b0 93 ea 01 	sts	0x01EA, r27
				mute_end = UINT32_MAX;
    2836:	8f ef       	ldi	r24, 0xFF	; 255
    2838:	9f ef       	ldi	r25, 0xFF	; 255
    283a:	dc 01       	movw	r26, r24
    283c:	80 93 d8 01 	sts	0x01D8, r24
    2840:	90 93 d9 01 	sts	0x01D9, r25
    2844:	a0 93 da 01 	sts	0x01DA, r26
    2848:	b0 93 db 01 	sts	0x01DB, r27

				cur_state = KEYDOWN;
    284c:	87 e0       	ldi	r24, 0x07	; 7
    284e:	80 93 c8 01 	sts	0x01C8, r24
				break;
    2852:	67 c0       	rjmp	.+206    	; 0x2922 <main+0x1078>

			case KEYDOWN:
				key_down = TRUE;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	80 93 3c 01 	sts	0x013C, r24
				sidetone_on = TRUE;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	80 93 3b 01 	sts	0x013B, r24

				if(ANYBUTTON)
    2866:	80 91 dc 01 	lds	r24, 0x01DC
    286a:	81 30       	cpi	r24, 0x01	; 1
    286c:	61 f0       	breq	.+24     	; 0x2886 <main+0xfdc>
    286e:	80 91 c0 01 	lds	r24, 0x01C0
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	41 f0       	breq	.+16     	; 0x2886 <main+0xfdc>
    2876:	80 91 c7 01 	lds	r24, 0x01C7
    287a:	81 30       	cpi	r24, 0x01	; 1
    287c:	21 f0       	breq	.+8      	; 0x2886 <main+0xfdc>
    287e:	80 91 c5 01 	lds	r24, 0x01C5
    2882:	81 30       	cpi	r24, 0x01	; 1
    2884:	39 f5       	brne	.+78     	; 0x28d4 <main+0x102a>
				{
					cur_state = ENDKEYDOWN;
    2886:	88 e0       	ldi	r24, 0x08	; 8
    2888:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    288c:	80 91 68 01 	lds	r24, 0x0168
    2890:	90 91 69 01 	lds	r25, 0x0169
    2894:	a0 91 6a 01 	lds	r26, 0x016A
    2898:	b0 91 6b 01 	lds	r27, 0x016B
    289c:	8c 59       	subi	r24, 0x9C	; 156
    289e:	9f 4f       	sbci	r25, 0xFF	; 255
    28a0:	af 4f       	sbci	r26, 0xFF	; 255
    28a2:	bf 4f       	sbci	r27, 0xFF	; 255
    28a4:	80 93 d4 01 	sts	0x01D4, r24
    28a8:	90 93 d5 01 	sts	0x01D5, r25
    28ac:	a0 93 d6 01 	sts	0x01D6, r26
    28b0:	b0 93 d7 01 	sts	0x01D7, r27
					tx_end = cur_timer;
    28b4:	80 91 68 01 	lds	r24, 0x0168
    28b8:	90 91 69 01 	lds	r25, 0x0169
    28bc:	a0 91 6a 01 	lds	r26, 0x016A
    28c0:	b0 91 6b 01 	lds	r27, 0x016B
    28c4:	80 93 ed 01 	sts	0x01ED, r24
    28c8:	90 93 ee 01 	sts	0x01EE, r25
    28cc:	a0 93 ef 01 	sts	0x01EF, r26
    28d0:	b0 93 f0 01 	sts	0x01F0, r27
				}
				break;
    28d4:	26 c0       	rjmp	.+76     	; 0x2922 <main+0x1078>

			case ENDKEYDOWN:
				key_down = FALSE;
    28d6:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    28da:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	80 93 3b 01 	sts	0x013B, r24

				if(cur_timer >= cur_state_end)
    28e4:	20 91 68 01 	lds	r18, 0x0168
    28e8:	30 91 69 01 	lds	r19, 0x0169
    28ec:	40 91 6a 01 	lds	r20, 0x016A
    28f0:	50 91 6b 01 	lds	r21, 0x016B
    28f4:	80 91 d4 01 	lds	r24, 0x01D4
    28f8:	90 91 d5 01 	lds	r25, 0x01D5
    28fc:	a0 91 d6 01 	lds	r26, 0x01D6
    2900:	b0 91 d7 01 	lds	r27, 0x01D7
    2904:	28 17       	cp	r18, r24
    2906:	39 07       	cpc	r19, r25
    2908:	4a 07       	cpc	r20, r26
    290a:	5b 07       	cpc	r21, r27
    290c:	48 f0       	brcs	.+18     	; 0x2920 <main+0x1076>
				{
					mute_on = FALSE;
    290e:	10 92 3b 01 	sts	0x013B, r1
					cur_state = IDLE;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	80 93 c8 01 	sts	0x01C8, r24
					cur_mode = default_mode;
    2918:	80 91 6d 01 	lds	r24, 0x016D
    291c:	80 93 a2 01 	sts	0x01A2, r24
				}
				break;
    2920:	00 00       	nop

			default:
				break;
			}
			break;
    2922:	db c4       	rjmp	.+2486   	; 0x32da <main+0x1a30>

		case MENU:
			switch(cur_state)
    2924:	80 91 c8 01 	lds	r24, 0x01C8
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	89 30       	cpi	r24, 0x09	; 9
    292e:	91 05       	cpc	r25, r1
    2930:	91 f0       	breq	.+36     	; 0x2956 <main+0x10ac>
    2932:	8a 30       	cpi	r24, 0x0A	; 10
    2934:	91 05       	cpc	r25, r1
    2936:	09 f4       	brne	.+2      	; 0x293a <main+0x1090>
    2938:	58 c0       	rjmp	.+176    	; 0x29ea <main+0x1140>
    293a:	81 30       	cpi	r24, 0x01	; 1
    293c:	91 05       	cpc	r25, r1
    293e:	09 f0       	breq	.+2      	; 0x2942 <main+0x1098>
    2940:	98 c1       	rjmp	.+816    	; 0x2c72 <main+0x13c8>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	90 93 44 01 	sts	0x0144, r25
    294a:	80 93 43 01 	sts	0x0143, r24
				cur_state = MENUANNOUNCE;
    294e:	89 e0       	ldi	r24, 0x09	; 9
    2950:	80 93 c8 01 	sts	0x01C8, r24
				break;
    2954:	96 c1       	rjmp	.+812    	; 0x2c82 <main+0x13d8>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    2956:	82 e0       	ldi	r24, 0x02	; 2
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 d7 19 	call	0x33ae	; 0x33ae <malloc>
    295e:	90 93 46 01 	sts	0x0146, r25
    2962:	80 93 45 01 	sts	0x0145, r24
				memset(cur_menu, '\0', 2);
    2966:	80 91 45 01 	lds	r24, 0x0145
    296a:	90 91 46 01 	lds	r25, 0x0146
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	42 e0       	ldi	r20, 0x02	; 2
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	0e 94 13 1b 	call	0x3626	; 0x3626 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    297a:	80 91 45 01 	lds	r24, 0x0145
    297e:	90 91 46 01 	lds	r25, 0x0146
    2982:	20 91 43 01 	lds	r18, 0x0143
    2986:	30 91 44 01 	lds	r19, 0x0144
    298a:	b9 01       	movw	r22, r18
    298c:	41 e0       	ldi	r20, 0x01	; 1
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	0e 94 0a 1b 	call	0x3614	; 0x3614 <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    2994:	80 91 68 01 	lds	r24, 0x0168
    2998:	90 91 69 01 	lds	r25, 0x0169
    299c:	a0 91 6a 01 	lds	r26, 0x016A
    29a0:	b0 91 6b 01 	lds	r27, 0x016B
    29a4:	80 56       	subi	r24, 0x60	; 96
    29a6:	90 4f       	sbci	r25, 0xF0	; 240
    29a8:	af 4f       	sbci	r26, 0xFF	; 255
    29aa:	bf 4f       	sbci	r27, 0xFF	; 255
    29ac:	80 93 d4 01 	sts	0x01D4, r24
    29b0:	90 93 d5 01 	sts	0x01D5, r25
    29b4:	a0 93 d6 01 	sts	0x01D6, r26
    29b8:	b0 93 d7 01 	sts	0x01D7, r27

				// Set next state
				cur_state = MENUINPUT;
    29bc:	8a e0       	ldi	r24, 0x0A	; 10
    29be:	80 93 c8 01 	sts	0x01C8, r24

				// Announce the menu item
				announce(cur_menu, st_freq, wpm);
    29c2:	80 91 45 01 	lds	r24, 0x0145
    29c6:	90 91 46 01 	lds	r25, 0x0146
    29ca:	20 91 ba 01 	lds	r18, 0x01BA
    29ce:	30 91 bb 01 	lds	r19, 0x01BB
    29d2:	40 91 e6 01 	lds	r20, 0x01E6
    29d6:	b9 01       	movw	r22, r18
    29d8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>

				free(cur_menu);
    29dc:	80 91 45 01 	lds	r24, 0x0145
    29e0:	90 91 46 01 	lds	r25, 0x0146
    29e4:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <free>
				break;
    29e8:	4c c1       	rjmp	.+664    	; 0x2c82 <main+0x13d8>

			case MENUINPUT:
				text_buffer = malloc(20);
    29ea:	84 e1       	ldi	r24, 0x14	; 20
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 d7 19 	call	0x33ae	; 0x33ae <malloc>
    29f2:	90 93 41 01 	sts	0x0141, r25
    29f6:	80 93 40 01 	sts	0x0140, r24
				memset(text_buffer, '\0', 20);
    29fa:	80 91 40 01 	lds	r24, 0x0140
    29fe:	90 91 41 01 	lds	r25, 0x0141
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	70 e0       	ldi	r23, 0x00	; 0
    2a06:	44 e1       	ldi	r20, 0x14	; 20
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	0e 94 13 1b 	call	0x3626	; 0x3626 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    2a0e:	20 91 68 01 	lds	r18, 0x0168
    2a12:	30 91 69 01 	lds	r19, 0x0169
    2a16:	40 91 6a 01 	lds	r20, 0x016A
    2a1a:	50 91 6b 01 	lds	r21, 0x016B
    2a1e:	80 91 d4 01 	lds	r24, 0x01D4
    2a22:	90 91 d5 01 	lds	r25, 0x01D5
    2a26:	a0 91 d6 01 	lds	r26, 0x01D6
    2a2a:	b0 91 d7 01 	lds	r27, 0x01D7
    2a2e:	28 17       	cp	r18, r24
    2a30:	39 07       	cpc	r19, r25
    2a32:	4a 07       	cpc	r20, r26
    2a34:	5b 07       	cpc	r21, r27
    2a36:	08 f0       	brcs	.+2      	; 0x2a3a <main+0x1190>
    2a38:	03 c1       	rjmp	.+518    	; 0x2c40 <main+0x1396>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    2a3a:	80 91 c7 01 	lds	r24, 0x01C7
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	49 f5       	brne	.+82     	; 0x2a94 <main+0x11ea>
					{
						debounce(TRUE);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>
						cur_menu_p++;
    2a48:	80 91 43 01 	lds	r24, 0x0143
    2a4c:	90 91 44 01 	lds	r25, 0x0144
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	90 93 44 01 	sts	0x0144, r25
    2a56:	80 93 43 01 	sts	0x0143, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    2a5a:	80 91 43 01 	lds	r24, 0x0143
    2a5e:	90 91 44 01 	lds	r25, 0x0144
    2a62:	fc 01       	movw	r30, r24
    2a64:	80 81       	ld	r24, Z
    2a66:	88 23       	and	r24, r24
    2a68:	89 f4       	brne	.+34     	; 0x2a8c <main+0x11e2>
						{
							cur_state = IDLE;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	80 93 c8 01 	sts	0x01C8, r24
							cur_mode = default_mode;
    2a70:	80 91 6d 01 	lds	r24, 0x016D
    2a74:	80 93 a2 01 	sts	0x01A2, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
    2a78:	20 91 e6 01 	lds	r18, 0x01E6
    2a7c:	81 e2       	ldi	r24, 0x21	; 33
    2a7e:	91 e0       	ldi	r25, 0x01	; 1
    2a80:	60 e9       	ldi	r22, 0x90	; 144
    2a82:	71 e0       	ldi	r23, 0x01	; 1
    2a84:	42 2f       	mov	r20, r18
    2a86:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2a8a:	ec c0       	rjmp	.+472    	; 0x2c64 <main+0x13ba>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
						}
						else
							cur_state = MENUANNOUNCE;
    2a8c:	89 e0       	ldi	r24, 0x09	; 9
    2a8e:	80 93 c8 01 	sts	0x01C8, r24
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2a92:	e8 c0       	rjmp	.+464    	; 0x2c64 <main+0x13ba>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    2a94:	80 91 c5 01 	lds	r24, 0x01C5
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <main+0x11f4>
    2a9c:	e2 c0       	rjmp	.+452    	; 0x2c62 <main+0x13b8>
					{
						// need to clear the button buffer
						debounce(TRUE);
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	0e 94 67 04 	call	0x8ce	; 0x8ce <debounce>

						switch(*cur_menu_p)
    2aa4:	80 91 43 01 	lds	r24, 0x0143
    2aa8:	90 91 44 01 	lds	r25, 0x0144
    2aac:	fc 01       	movw	r30, r24
    2aae:	80 81       	ld	r24, Z
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	83 35       	cpi	r24, 0x53	; 83
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	a1 f0       	breq	.+40     	; 0x2ae2 <main+0x1238>
    2aba:	84 35       	cpi	r24, 0x54	; 84
    2abc:	91 05       	cpc	r25, r1
    2abe:	4c f4       	brge	.+18     	; 0x2ad2 <main+0x1228>
    2ac0:	8b 34       	cpi	r24, 0x4B	; 75
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <main+0x121e>
    2ac6:	83 c0       	rjmp	.+262    	; 0x2bce <main+0x1324>
    2ac8:	82 35       	cpi	r24, 0x52	; 82
    2aca:	91 05       	cpc	r25, r1
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <main+0x1226>
    2ace:	64 c0       	rjmp	.+200    	; 0x2b98 <main+0x12ee>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2ad0:	c9 c0       	rjmp	.+402    	; 0x2c64 <main+0x13ba>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    2ad2:	86 35       	cpi	r24, 0x56	; 86
    2ad4:	91 05       	cpc	r25, r1
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <main+0x1230>
    2ad8:	70 c0       	rjmp	.+224    	; 0x2bba <main+0x1310>
    2ada:	87 35       	cpi	r24, 0x57	; 87
    2adc:	91 05       	cpc	r25, r1
    2ade:	21 f1       	breq	.+72     	; 0x2b28 <main+0x127e>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2ae0:	c1 c0       	rjmp	.+386    	; 0x2c64 <main+0x13ba>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    2ae2:	80 91 68 01 	lds	r24, 0x0168
    2ae6:	90 91 69 01 	lds	r25, 0x0169
    2aea:	a0 91 6a 01 	lds	r26, 0x016A
    2aee:	b0 91 6b 01 	lds	r27, 0x016B
    2af2:	80 56       	subi	r24, 0x60	; 96
    2af4:	90 4f       	sbci	r25, 0xF0	; 240
    2af6:	af 4f       	sbci	r26, 0xFF	; 255
    2af8:	bf 4f       	sbci	r27, 0xFF	; 255
    2afa:	80 93 d4 01 	sts	0x01D4, r24
    2afe:	90 93 d5 01 	sts	0x01D5, r25
    2b02:	a0 93 d6 01 	sts	0x01D6, r26
    2b06:	b0 93 d7 01 	sts	0x01D7, r27
							cur_mode = SETWPM;
    2b0a:	85 e0       	ldi	r24, 0x05	; 5
    2b0c:	80 93 a2 01 	sts	0x01A2, r24

							announce("R", st_freq, wpm);
    2b10:	20 91 ba 01 	lds	r18, 0x01BA
    2b14:	30 91 bb 01 	lds	r19, 0x01BB
    2b18:	40 91 e6 01 	lds	r20, 0x01E6
    2b1c:	8f e1       	ldi	r24, 0x1F	; 31
    2b1e:	91 e0       	ldi	r25, 0x01	; 1
    2b20:	b9 01       	movw	r22, r18
    2b22:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
							break;
    2b26:	9e c0       	rjmp	.+316    	; 0x2c64 <main+0x13ba>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	80 93 c8 01 	sts	0x01C8, r24
							cur_mode = default_mode;
    2b2e:	80 91 6d 01 	lds	r24, 0x016D
    2b32:	80 93 a2 01 	sts	0x01A2, r24

							sprintf(text_buffer, "%d", wpm);
    2b36:	40 91 40 01 	lds	r20, 0x0140
    2b3a:	50 91 41 01 	lds	r21, 0x0141
    2b3e:	80 91 e6 01 	lds	r24, 0x01E6
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <main+0x129e>
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <main+0x12a0>
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <main+0x12a2>
    2b4c:	8d b7       	in	r24, 0x3d	; 61
    2b4e:	9e b7       	in	r25, 0x3e	; 62
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	fc 01       	movw	r30, r24
    2b54:	51 83       	std	Z+1, r21	; 0x01
    2b56:	40 83       	st	Z, r20
    2b58:	4d e2       	ldi	r20, 0x2D	; 45
    2b5a:	51 e0       	ldi	r21, 0x01	; 1
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	53 83       	std	Z+3, r21	; 0x03
    2b60:	42 83       	std	Z+2, r20	; 0x02
    2b62:	fc 01       	movw	r30, r24
    2b64:	35 83       	std	Z+5, r19	; 0x05
    2b66:	24 83       	std	Z+4, r18	; 0x04
    2b68:	0e 94 2b 1b 	call	0x3656	; 0x3656 <sprintf>
    2b6c:	8d b7       	in	r24, 0x3d	; 61
    2b6e:	9e b7       	in	r25, 0x3e	; 62
    2b70:	06 96       	adiw	r24, 0x06	; 6
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	9e bf       	out	0x3e, r25	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq, wpm);
    2b7c:	80 91 40 01 	lds	r24, 0x0140
    2b80:	90 91 41 01 	lds	r25, 0x0141
    2b84:	20 91 ba 01 	lds	r18, 0x01BA
    2b88:	30 91 bb 01 	lds	r19, 0x01BB
    2b8c:	40 91 e6 01 	lds	r20, 0x01E6
    2b90:	b9 01       	movw	r22, r18
    2b92:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
							break;
    2b96:	66 c0       	rjmp	.+204    	; 0x2c64 <main+0x13ba>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    2b98:	10 92 c8 01 	sts	0x01C8, r1
							cur_mode = RECORD;
    2b9c:	87 e0       	ldi	r24, 0x07	; 7
    2b9e:	80 93 a2 01 	sts	0x01A2, r24

							announce("R", st_freq, wpm);
    2ba2:	20 91 ba 01 	lds	r18, 0x01BA
    2ba6:	30 91 bb 01 	lds	r19, 0x01BB
    2baa:	40 91 e6 01 	lds	r20, 0x01E6
    2bae:	8f e1       	ldi	r24, 0x1F	; 31
    2bb0:	91 e0       	ldi	r25, 0x01	; 1
    2bb2:	b9 01       	movw	r22, r18
    2bb4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
							break;
    2bb8:	55 c0       	rjmp	.+170    	; 0x2c64 <main+0x13ba>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	80 93 c8 01 	sts	0x01C8, r24
							cur_mode = default_mode;
    2bc0:	80 91 6d 01 	lds	r24, 0x016D
    2bc4:	80 93 a2 01 	sts	0x01A2, r24

							read_voltage();
    2bc8:	0e 94 01 07 	call	0xe02	; 0xe02 <read_voltage>
							break;
    2bcc:	4b c0       	rjmp	.+150    	; 0x2c64 <main+0x13ba>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    2bce:	80 91 6d 01 	lds	r24, 0x016D
    2bd2:	88 23       	and	r24, r24
    2bd4:	d9 f4       	brne	.+54     	; 0x2c0c <main+0x1362>
							{
								default_mode = SK;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	80 93 6d 01 	sts	0x016D, r24
								cur_state = IDLE;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	80 93 c8 01 	sts	0x01C8, r24
								cur_mode = default_mode;
    2be2:	80 91 6d 01 	lds	r24, 0x016D
    2be6:	80 93 a2 01 	sts	0x01A2, r24
								eeprom_write_byte(&ee_keyer, FALSE);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__eewr_byte_m168>

								announce("S", st_freq, wpm);
    2bf4:	20 91 ba 01 	lds	r18, 0x01BA
    2bf8:	30 91 bb 01 	lds	r19, 0x01BB
    2bfc:	40 91 e6 01 	lds	r20, 0x01E6
    2c00:	8b e1       	ldi	r24, 0x1B	; 27
    2c02:	91 e0       	ldi	r25, 0x01	; 1
    2c04:	b9 01       	movw	r22, r18
    2c06:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
								cur_mode = default_mode;
								eeprom_write_byte(&ee_keyer, TRUE);

								announce("K", st_freq, wpm);
							}
							break;
    2c0a:	2c c0       	rjmp	.+88     	; 0x2c64 <main+0x13ba>

								announce("S", st_freq, wpm);
							}
							else
							{
								default_mode = KEYER;
    2c0c:	10 92 6d 01 	sts	0x016D, r1
								cur_state = IDLE;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	80 93 c8 01 	sts	0x01C8, r24
								cur_mode = default_mode;
    2c16:	80 91 6d 01 	lds	r24, 0x016D
    2c1a:	80 93 a2 01 	sts	0x01A2, r24
								eeprom_write_byte(&ee_keyer, TRUE);
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	61 e0       	ldi	r22, 0x01	; 1
    2c24:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__eewr_byte_m168>

								announce("K", st_freq, wpm);
    2c28:	20 91 ba 01 	lds	r18, 0x01BA
    2c2c:	30 91 bb 01 	lds	r19, 0x01BB
    2c30:	40 91 e6 01 	lds	r20, 0x01E6
    2c34:	80 e3       	ldi	r24, 0x30	; 48
    2c36:	91 e0       	ldi	r25, 0x01	; 1
    2c38:	b9 01       	movw	r22, r18
    2c3a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
							}
							break;
    2c3e:	12 c0       	rjmp	.+36     	; 0x2c64 <main+0x13ba>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	80 93 c8 01 	sts	0x01C8, r24
					cur_mode = default_mode;
    2c46:	80 91 6d 01 	lds	r24, 0x016D
    2c4a:	80 93 a2 01 	sts	0x01A2, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    2c4e:	20 91 e6 01 	lds	r18, 0x01E6
    2c52:	81 e2       	ldi	r24, 0x21	; 33
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	60 e9       	ldi	r22, 0x90	; 144
    2c58:	71 e0       	ldi	r23, 0x01	; 1
    2c5a:	42 2f       	mov	r20, r18
    2c5c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
    2c60:	01 c0       	rjmp	.+2      	; 0x2c64 <main+0x13ba>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2c62:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
				}

				free(text_buffer);
    2c64:	80 91 40 01 	lds	r24, 0x0140
    2c68:	90 91 41 01 	lds	r25, 0x0141
    2c6c:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <free>
				break;
    2c70:	08 c0       	rjmp	.+16     	; 0x2c82 <main+0x13d8>

			default:
				cur_state = IDLE;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	80 93 c8 01 	sts	0x01C8, r24
				cur_mode = default_mode;
    2c78:	80 91 6d 01 	lds	r24, 0x016D
    2c7c:	80 93 a2 01 	sts	0x01A2, r24
				break;
    2c80:	00 00       	nop
			}
			break;
    2c82:	2b c3       	rjmp	.+1622   	; 0x32da <main+0x1a30>

		case SETWPM:
			if(cur_timer < cur_state_end)
    2c84:	20 91 68 01 	lds	r18, 0x0168
    2c88:	30 91 69 01 	lds	r19, 0x0169
    2c8c:	40 91 6a 01 	lds	r20, 0x016A
    2c90:	50 91 6b 01 	lds	r21, 0x016B
    2c94:	80 91 d4 01 	lds	r24, 0x01D4
    2c98:	90 91 d5 01 	lds	r25, 0x01D5
    2c9c:	a0 91 d6 01 	lds	r26, 0x01D6
    2ca0:	b0 91 d7 01 	lds	r27, 0x01D7
    2ca4:	28 17       	cp	r18, r24
    2ca6:	39 07       	cpc	r19, r25
    2ca8:	4a 07       	cpc	r20, r26
    2caa:	5b 07       	cpc	r21, r27
    2cac:	08 f0       	brcs	.+2      	; 0x2cb0 <main+0x1406>
    2cae:	63 c0       	rjmp	.+198    	; 0x2d76 <main+0x14cc>
			{
				if(cmd_btn == PRESS)
    2cb0:	80 91 c7 01 	lds	r24, 0x01C7
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	69 f5       	brne	.+90     	; 0x2d12 <main+0x1468>
				{
					if(wpm < MAX_WPM)
    2cb8:	80 91 e6 01 	lds	r24, 0x01E6
    2cbc:	88 32       	cpi	r24, 0x28	; 40
    2cbe:	28 f4       	brcc	.+10     	; 0x2cca <main+0x1420>
						wpm++;
    2cc0:	80 91 e6 01 	lds	r24, 0x01E6
    2cc4:	8f 5f       	subi	r24, 0xFF	; 255
    2cc6:	80 93 e6 01 	sts	0x01E6, r24
					set_wpm(wpm);
    2cca:	80 91 e6 01 	lds	r24, 0x01E6
    2cce:	0e 94 4f 04 	call	0x89e	; 0x89e <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2cd2:	80 91 68 01 	lds	r24, 0x0168
    2cd6:	90 91 69 01 	lds	r25, 0x0169
    2cda:	a0 91 6a 01 	lds	r26, 0x016A
    2cde:	b0 91 6b 01 	lds	r27, 0x016B
    2ce2:	80 56       	subi	r24, 0x60	; 96
    2ce4:	90 4f       	sbci	r25, 0xF0	; 240
    2ce6:	af 4f       	sbci	r26, 0xFF	; 255
    2ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cea:	80 93 d4 01 	sts	0x01D4, r24
    2cee:	90 93 d5 01 	sts	0x01D5, r25
    2cf2:	a0 93 d6 01 	sts	0x01D6, r26
    2cf6:	b0 93 d7 01 	sts	0x01D7, r27
					announce("I", st_freq, wpm);
    2cfa:	20 91 ba 01 	lds	r18, 0x01BA
    2cfe:	30 91 bb 01 	lds	r19, 0x01BB
    2d02:	40 91 e6 01 	lds	r20, 0x01E6
    2d06:	82 e3       	ldi	r24, 0x32	; 50
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	b9 01       	movw	r22, r18
    2d0c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
    2d10:	70 c0       	rjmp	.+224    	; 0x2df2 <main+0x1548>
				}
				else if(msg_btn == PRESS)
    2d12:	80 91 c5 01 	lds	r24, 0x01C5
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <main+0x1472>
    2d1a:	6b c0       	rjmp	.+214    	; 0x2df2 <main+0x1548>
				{
					if(wpm > MIN_WPM)
    2d1c:	80 91 e6 01 	lds	r24, 0x01E6
    2d20:	86 30       	cpi	r24, 0x06	; 6
    2d22:	28 f0       	brcs	.+10     	; 0x2d2e <main+0x1484>
						wpm--;
    2d24:	80 91 e6 01 	lds	r24, 0x01E6
    2d28:	81 50       	subi	r24, 0x01	; 1
    2d2a:	80 93 e6 01 	sts	0x01E6, r24
					set_wpm(wpm);
    2d2e:	80 91 e6 01 	lds	r24, 0x01E6
    2d32:	0e 94 4f 04 	call	0x89e	; 0x89e <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2d36:	80 91 68 01 	lds	r24, 0x0168
    2d3a:	90 91 69 01 	lds	r25, 0x0169
    2d3e:	a0 91 6a 01 	lds	r26, 0x016A
    2d42:	b0 91 6b 01 	lds	r27, 0x016B
    2d46:	80 56       	subi	r24, 0x60	; 96
    2d48:	90 4f       	sbci	r25, 0xF0	; 240
    2d4a:	af 4f       	sbci	r26, 0xFF	; 255
    2d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4e:	80 93 d4 01 	sts	0x01D4, r24
    2d52:	90 93 d5 01 	sts	0x01D5, r25
    2d56:	a0 93 d6 01 	sts	0x01D6, r26
    2d5a:	b0 93 d7 01 	sts	0x01D7, r27
					announce("I", st_freq, wpm);
    2d5e:	20 91 ba 01 	lds	r18, 0x01BA
    2d62:	30 91 bb 01 	lds	r19, 0x01BB
    2d66:	40 91 e6 01 	lds	r20, 0x01E6
    2d6a:	82 e3       	ldi	r24, 0x32	; 50
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
    2d6e:	b9 01       	movw	r22, r18
    2d70:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
    2d74:	3e c0       	rjmp	.+124    	; 0x2df2 <main+0x1548>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_write_byte(&ee_wpm, wpm);
    2d76:	20 91 e6 01 	lds	r18, 0x01E6
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	62 2f       	mov	r22, r18
    2d80:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__eewr_byte_m168>

				cur_state = IDLE;
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	80 93 c8 01 	sts	0x01C8, r24
				cur_mode = default_mode;
    2d8a:	80 91 6d 01 	lds	r24, 0x016D
    2d8e:	80 93 a2 01 	sts	0x01A2, r24

				sprintf(text_buffer, "%d", wpm);
    2d92:	40 91 40 01 	lds	r20, 0x0140
    2d96:	50 91 41 01 	lds	r21, 0x0141
    2d9a:	80 91 e6 01 	lds	r24, 0x01E6
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <main+0x14fa>
    2da4:	00 d0       	rcall	.+0      	; 0x2da6 <main+0x14fc>
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <main+0x14fe>
    2da8:	8d b7       	in	r24, 0x3d	; 61
    2daa:	9e b7       	in	r25, 0x3e	; 62
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	fc 01       	movw	r30, r24
    2db0:	51 83       	std	Z+1, r21	; 0x01
    2db2:	40 83       	st	Z, r20
    2db4:	4d e2       	ldi	r20, 0x2D	; 45
    2db6:	51 e0       	ldi	r21, 0x01	; 1
    2db8:	fc 01       	movw	r30, r24
    2dba:	53 83       	std	Z+3, r21	; 0x03
    2dbc:	42 83       	std	Z+2, r20	; 0x02
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	35 83       	std	Z+5, r19	; 0x05
    2dc2:	24 83       	std	Z+4, r18	; 0x04
    2dc4:	0e 94 2b 1b 	call	0x3656	; 0x3656 <sprintf>
    2dc8:	8d b7       	in	r24, 0x3d	; 61
    2dca:	9e b7       	in	r25, 0x3e	; 62
    2dcc:	06 96       	adiw	r24, 0x06	; 6
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	9e bf       	out	0x3e, r25	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq, wpm);
    2dd8:	80 91 40 01 	lds	r24, 0x0140
    2ddc:	90 91 41 01 	lds	r25, 0x0141
    2de0:	20 91 ba 01 	lds	r18, 0x01BA
    2de4:	30 91 bb 01 	lds	r19, 0x01BB
    2de8:	40 91 e6 01 	lds	r20, 0x01E6
    2dec:	b9 01       	movw	r22, r18
    2dee:	0e 94 9e 06 	call	0xd3c	; 0xd3c <announce>
			}
			break;
    2df2:	73 c2       	rjmp	.+1254   	; 0x32da <main+0x1a30>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    2df4:	80 91 dc 01 	lds	r24, 0x01DC
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	61 f0       	breq	.+24     	; 0x2e14 <main+0x156a>
    2dfc:	80 91 c0 01 	lds	r24, 0x01C0
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	41 f0       	breq	.+16     	; 0x2e14 <main+0x156a>
    2e04:	80 91 c7 01 	lds	r24, 0x01C7
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	21 f0       	breq	.+8      	; 0x2e14 <main+0x156a>
    2e0c:	80 91 c5 01 	lds	r24, 0x01C5
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	e9 f5       	brne	.+122    	; 0x2e8e <main+0x15e4>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    2e14:	80 91 eb 01 	lds	r24, 0x01EB
    2e18:	90 91 ec 01 	lds	r25, 0x01EC
    2e1c:	2c e2       	ldi	r18, 0x2C	; 44
    2e1e:	31 e0       	ldi	r19, 0x01	; 1
    2e20:	b9 01       	movw	r22, r18
    2e22:	41 e0       	ldi	r20, 0x01	; 1
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	0e 94 0a 1b 	call	0x3614	; 0x3614 <memcpy>
				cur_char_p = announce_buffer;
    2e2a:	80 91 eb 01 	lds	r24, 0x01EB
    2e2e:	90 91 ec 01 	lds	r25, 0x01EC
    2e32:	90 93 3f 01 	sts	0x013F, r25
    2e36:	80 93 3e 01 	sts	0x013E, r24
				cur_character = '\0';
    2e3a:	10 92 42 01 	sts	0x0142, r1

				// Set back into previous mode
				mute_end = cur_timer;
    2e3e:	80 91 68 01 	lds	r24, 0x0168
    2e42:	90 91 69 01 	lds	r25, 0x0169
    2e46:	a0 91 6a 01 	lds	r26, 0x016A
    2e4a:	b0 91 6b 01 	lds	r27, 0x016B
    2e4e:	80 93 d8 01 	sts	0x01D8, r24
    2e52:	90 93 d9 01 	sts	0x01D9, r25
    2e56:	a0 93 da 01 	sts	0x01DA, r26
    2e5a:	b0 93 db 01 	sts	0x01DB, r27
				cur_mode = prev_mode;
    2e5e:	80 91 b8 01 	lds	r24, 0x01B8
    2e62:	80 93 a2 01 	sts	0x01A2, r24
				cur_state = prev_state;
    2e66:	80 91 72 01 	lds	r24, 0x0172
    2e6a:	80 93 c8 01 	sts	0x01C8, r24
				cur_state_end = prev_state_end;
    2e6e:	80 91 b4 01 	lds	r24, 0x01B4
    2e72:	90 91 b5 01 	lds	r25, 0x01B5
    2e76:	a0 91 b6 01 	lds	r26, 0x01B6
    2e7a:	b0 91 b7 01 	lds	r27, 0x01B7
    2e7e:	80 93 d4 01 	sts	0x01D4, r24
    2e82:	90 93 d5 01 	sts	0x01D5, r25
    2e86:	a0 93 d6 01 	sts	0x01D6, r26
    2e8a:	b0 93 d7 01 	sts	0x01D7, r27
			}

			switch(cur_state)
    2e8e:	80 91 c8 01 	lds	r24, 0x01C8
    2e92:	88 2f       	mov	r24, r24
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	84 30       	cpi	r24, 0x04	; 4
    2e98:	91 05       	cpc	r25, r1
    2e9a:	44 f4       	brge	.+16     	; 0x2eac <main+0x1602>
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	91 05       	cpc	r25, r1
    2ea0:	0c f0       	brlt	.+2      	; 0x2ea4 <main+0x15fa>
    2ea2:	bb c1       	rjmp	.+886    	; 0x321a <main+0x1970>
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	31 f0       	breq	.+12     	; 0x2eb6 <main+0x160c>
    2eaa:	14 c2       	rjmp	.+1064   	; 0x32d4 <main+0x1a2a>
    2eac:	87 30       	cpi	r24, 0x07	; 7
    2eae:	91 05       	cpc	r25, r1
    2eb0:	0c f0       	brlt	.+2      	; 0x2eb4 <main+0x160a>
    2eb2:	10 c2       	rjmp	.+1056   	; 0x32d4 <main+0x1a2a>
    2eb4:	ef c1       	rjmp	.+990    	; 0x3294 <main+0x19ea>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2eb6:	20 91 3e 01 	lds	r18, 0x013E
    2eba:	30 91 3f 01 	lds	r19, 0x013F
    2ebe:	80 91 eb 01 	lds	r24, 0x01EB
    2ec2:	90 91 ec 01 	lds	r25, 0x01EC
    2ec6:	28 17       	cp	r18, r24
    2ec8:	39 07       	cpc	r19, r25
    2eca:	c9 f4       	brne	.+50     	; 0x2efe <main+0x1654>
    2ecc:	80 91 42 01 	lds	r24, 0x0142
    2ed0:	88 23       	and	r24, r24
    2ed2:	a9 f4       	brne	.+42     	; 0x2efe <main+0x1654>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2ed4:	80 91 3e 01 	lds	r24, 0x013E
    2ed8:	90 91 3f 01 	lds	r25, 0x013F
    2edc:	fc 01       	movw	r30, r24
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	80 97       	sbiw	r24, 0x20	; 32
    2ee6:	88 59       	subi	r24, 0x98	; 152
    2ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eea:	99 87       	std	Y+9, r25	; 0x09
    2eec:	88 87       	std	Y+8, r24	; 0x08
    2eee:	88 85       	ldd	r24, Y+8	; 0x08
    2ef0:	99 85       	ldd	r25, Y+9	; 0x09
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	14 91       	lpm	r17, Z+
    2ef6:	1a 87       	std	Y+10, r17	; 0x0a
    2ef8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2efa:	80 93 42 01 	sts	0x0142, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2efe:	80 91 42 01 	lds	r24, 0x0142
    2f02:	88 23       	and	r24, r24
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <main+0x165e>
    2f06:	4b c1       	rjmp	.+662    	; 0x319e <main+0x18f4>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2f08:	80 91 42 01 	lds	r24, 0x0142
    2f0c:	80 38       	cpi	r24, 0x80	; 128
    2f0e:	29 f0       	breq	.+10     	; 0x2f1a <main+0x1670>
    2f10:	80 91 42 01 	lds	r24, 0x0142
    2f14:	8f 3f       	cpi	r24, 0xFF	; 255
    2f16:	09 f0       	breq	.+2      	; 0x2f1a <main+0x1670>
    2f18:	79 c0       	rjmp	.+242    	; 0x300c <main+0x1762>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    2f1a:	80 91 42 01 	lds	r24, 0x0142
    2f1e:	80 38       	cpi	r24, 0x80	; 128
    2f20:	21 f5       	brne	.+72     	; 0x2f6a <main+0x16c0>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2f22:	20 91 73 01 	lds	r18, 0x0173
    2f26:	30 91 74 01 	lds	r19, 0x0174
    2f2a:	c9 01       	movw	r24, r18
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	82 0f       	add	r24, r18
    2f32:	93 1f       	adc	r25, r19
    2f34:	9c 01       	movw	r18, r24
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	80 91 68 01 	lds	r24, 0x0168
    2f3e:	90 91 69 01 	lds	r25, 0x0169
    2f42:	a0 91 6a 01 	lds	r26, 0x016A
    2f46:	b0 91 6b 01 	lds	r27, 0x016B
    2f4a:	82 0f       	add	r24, r18
    2f4c:	93 1f       	adc	r25, r19
    2f4e:	a4 1f       	adc	r26, r20
    2f50:	b5 1f       	adc	r27, r21
    2f52:	80 93 d4 01 	sts	0x01D4, r24
    2f56:	90 93 d5 01 	sts	0x01D5, r25
    2f5a:	a0 93 d6 01 	sts	0x01D6, r26
    2f5e:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAHDELAY;
    2f62:	85 e0       	ldi	r24, 0x05	; 5
    2f64:	80 93 c8 01 	sts	0x01C8, r24
    2f68:	27 c0       	rjmp	.+78     	; 0x2fb8 <main+0x170e>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2f6a:	20 91 73 01 	lds	r18, 0x0173
    2f6e:	30 91 74 01 	lds	r19, 0x0174
    2f72:	c9 01       	movw	r24, r18
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	88 0f       	add	r24, r24
    2f7e:	99 1f       	adc	r25, r25
    2f80:	82 1b       	sub	r24, r18
    2f82:	93 0b       	sbc	r25, r19
    2f84:	9c 01       	movw	r18, r24
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	80 91 68 01 	lds	r24, 0x0168
    2f8e:	90 91 69 01 	lds	r25, 0x0169
    2f92:	a0 91 6a 01 	lds	r26, 0x016A
    2f96:	b0 91 6b 01 	lds	r27, 0x016B
    2f9a:	82 0f       	add	r24, r18
    2f9c:	93 1f       	adc	r25, r19
    2f9e:	a4 1f       	adc	r26, r20
    2fa0:	b5 1f       	adc	r27, r21
    2fa2:	80 93 d4 01 	sts	0x01D4, r24
    2fa6:	90 93 d5 01 	sts	0x01D5, r25
    2faa:	a0 93 d6 01 	sts	0x01D6, r26
    2fae:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAHDELAY;
    2fb2:	85 e0       	ldi	r24, 0x05	; 5
    2fb4:	80 93 c8 01 	sts	0x01C8, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    2fb8:	80 91 3e 01 	lds	r24, 0x013E
    2fbc:	90 91 3f 01 	lds	r25, 0x013F
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	90 93 3f 01 	sts	0x013F, r25
    2fc6:	80 93 3e 01 	sts	0x013E, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2fca:	80 91 3e 01 	lds	r24, 0x013E
    2fce:	90 91 3f 01 	lds	r25, 0x013F
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	80 81       	ld	r24, Z
    2fd6:	88 23       	and	r24, r24
    2fd8:	19 f4       	brne	.+6      	; 0x2fe0 <main+0x1736>
							cur_character = '\0';
    2fda:	10 92 42 01 	sts	0x0142, r1
    2fde:	15 c0       	rjmp	.+42     	; 0x300a <main+0x1760>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2fe0:	80 91 3e 01 	lds	r24, 0x013E
    2fe4:	90 91 3f 01 	lds	r25, 0x013F
    2fe8:	fc 01       	movw	r30, r24
    2fea:	80 81       	ld	r24, Z
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	80 97       	sbiw	r24, 0x20	; 32
    2ff2:	88 59       	subi	r24, 0x98	; 152
    2ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff6:	9c 87       	std	Y+12, r25	; 0x0c
    2ff8:	8b 87       	std	Y+11, r24	; 0x0b
    2ffa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ffc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ffe:	fc 01       	movw	r30, r24
    3000:	14 91       	lpm	r17, Z+
    3002:	1d 87       	std	Y+13, r17	; 0x0d
    3004:	8d 85       	ldd	r24, Y+13	; 0x0d
    3006:	80 93 42 01 	sts	0x0142, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    300a:	c8 c0       	rjmp	.+400    	; 0x319c <main+0x18f2>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    300c:	80 91 42 01 	lds	r24, 0x0142
    3010:	88 23       	and	r24, r24
    3012:	0c f0       	brlt	.+2      	; 0x3016 <main+0x176c>
    3014:	62 c0       	rjmp	.+196    	; 0x30da <main+0x1830>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    3016:	20 91 73 01 	lds	r18, 0x0173
    301a:	30 91 74 01 	lds	r19, 0x0174
    301e:	c9 01       	movw	r24, r18
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	82 0f       	add	r24, r18
    3026:	93 1f       	adc	r25, r19
    3028:	9c 01       	movw	r18, r24
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	80 91 68 01 	lds	r24, 0x0168
    3032:	90 91 69 01 	lds	r25, 0x0169
    3036:	a0 91 6a 01 	lds	r26, 0x016A
    303a:	b0 91 6b 01 	lds	r27, 0x016B
    303e:	82 0f       	add	r24, r18
    3040:	93 1f       	adc	r25, r19
    3042:	a4 1f       	adc	r26, r20
    3044:	b5 1f       	adc	r27, r21
    3046:	80 93 d4 01 	sts	0x01D4, r24
    304a:	90 93 d5 01 	sts	0x01D5, r25
    304e:	a0 93 d6 01 	sts	0x01D6, r26
    3052:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAH;
    3056:	83 e0       	ldi	r24, 0x03	; 3
    3058:	80 93 c8 01 	sts	0x01C8, r24
							tx_start = cur_timer + TX_ON_DELAY;
    305c:	80 91 68 01 	lds	r24, 0x0168
    3060:	90 91 69 01 	lds	r25, 0x0169
    3064:	a0 91 6a 01 	lds	r26, 0x016A
    3068:	b0 91 6b 01 	lds	r27, 0x016B
    306c:	01 96       	adiw	r24, 0x01	; 1
    306e:	a1 1d       	adc	r26, r1
    3070:	b1 1d       	adc	r27, r1
    3072:	80 93 a8 01 	sts	0x01A8, r24
    3076:	90 93 a9 01 	sts	0x01A9, r25
    307a:	a0 93 aa 01 	sts	0x01AA, r26
    307e:	b0 93 ab 01 	sts	0x01AB, r27
							tx_end = cur_state_end;
    3082:	80 91 d4 01 	lds	r24, 0x01D4
    3086:	90 91 d5 01 	lds	r25, 0x01D5
    308a:	a0 91 d6 01 	lds	r26, 0x01D6
    308e:	b0 91 d7 01 	lds	r27, 0x01D7
    3092:	80 93 ed 01 	sts	0x01ED, r24
    3096:	90 93 ee 01 	sts	0x01EE, r25
    309a:	a0 93 ef 01 	sts	0x01EF, r26
    309e:	b0 93 f0 01 	sts	0x01F0, r27
							mute_start = cur_timer;
    30a2:	80 91 68 01 	lds	r24, 0x0168
    30a6:	90 91 69 01 	lds	r25, 0x0169
    30aa:	a0 91 6a 01 	lds	r26, 0x016A
    30ae:	b0 91 6b 01 	lds	r27, 0x016B
    30b2:	80 93 e7 01 	sts	0x01E7, r24
    30b6:	90 93 e8 01 	sts	0x01E8, r25
    30ba:	a0 93 e9 01 	sts	0x01E9, r26
    30be:	b0 93 ea 01 	sts	0x01EA, r27
							mute_end = UINT32_MAX;
    30c2:	8f ef       	ldi	r24, 0xFF	; 255
    30c4:	9f ef       	ldi	r25, 0xFF	; 255
    30c6:	dc 01       	movw	r26, r24
    30c8:	80 93 d8 01 	sts	0x01D8, r24
    30cc:	90 93 d9 01 	sts	0x01D9, r25
    30d0:	a0 93 da 01 	sts	0x01DA, r26
    30d4:	b0 93 db 01 	sts	0x01DB, r27
    30d8:	5c c0       	rjmp	.+184    	; 0x3192 <main+0x18e8>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    30da:	80 91 73 01 	lds	r24, 0x0173
    30de:	90 91 74 01 	lds	r25, 0x0174
    30e2:	9c 01       	movw	r18, r24
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	80 91 68 01 	lds	r24, 0x0168
    30ec:	90 91 69 01 	lds	r25, 0x0169
    30f0:	a0 91 6a 01 	lds	r26, 0x016A
    30f4:	b0 91 6b 01 	lds	r27, 0x016B
    30f8:	82 0f       	add	r24, r18
    30fa:	93 1f       	adc	r25, r19
    30fc:	a4 1f       	adc	r26, r20
    30fe:	b5 1f       	adc	r27, r21
    3100:	80 93 d4 01 	sts	0x01D4, r24
    3104:	90 93 d5 01 	sts	0x01D5, r25
    3108:	a0 93 d6 01 	sts	0x01D6, r26
    310c:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DIT;
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	80 93 c8 01 	sts	0x01C8, r24
							tx_start = cur_timer + TX_ON_DELAY;
    3116:	80 91 68 01 	lds	r24, 0x0168
    311a:	90 91 69 01 	lds	r25, 0x0169
    311e:	a0 91 6a 01 	lds	r26, 0x016A
    3122:	b0 91 6b 01 	lds	r27, 0x016B
    3126:	01 96       	adiw	r24, 0x01	; 1
    3128:	a1 1d       	adc	r26, r1
    312a:	b1 1d       	adc	r27, r1
    312c:	80 93 a8 01 	sts	0x01A8, r24
    3130:	90 93 a9 01 	sts	0x01A9, r25
    3134:	a0 93 aa 01 	sts	0x01AA, r26
    3138:	b0 93 ab 01 	sts	0x01AB, r27
							tx_end = cur_state_end;
    313c:	80 91 d4 01 	lds	r24, 0x01D4
    3140:	90 91 d5 01 	lds	r25, 0x01D5
    3144:	a0 91 d6 01 	lds	r26, 0x01D6
    3148:	b0 91 d7 01 	lds	r27, 0x01D7
    314c:	80 93 ed 01 	sts	0x01ED, r24
    3150:	90 93 ee 01 	sts	0x01EE, r25
    3154:	a0 93 ef 01 	sts	0x01EF, r26
    3158:	b0 93 f0 01 	sts	0x01F0, r27
							mute_start = cur_timer;
    315c:	80 91 68 01 	lds	r24, 0x0168
    3160:	90 91 69 01 	lds	r25, 0x0169
    3164:	a0 91 6a 01 	lds	r26, 0x016A
    3168:	b0 91 6b 01 	lds	r27, 0x016B
    316c:	80 93 e7 01 	sts	0x01E7, r24
    3170:	90 93 e8 01 	sts	0x01E8, r25
    3174:	a0 93 e9 01 	sts	0x01E9, r26
    3178:	b0 93 ea 01 	sts	0x01EA, r27
							mute_end = UINT32_MAX;
    317c:	8f ef       	ldi	r24, 0xFF	; 255
    317e:	9f ef       	ldi	r25, 0xFF	; 255
    3180:	dc 01       	movw	r26, r24
    3182:	80 93 d8 01 	sts	0x01D8, r24
    3186:	90 93 d9 01 	sts	0x01D9, r25
    318a:	a0 93 da 01 	sts	0x01DA, r26
    318e:	b0 93 db 01 	sts	0x01DB, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    3192:	80 91 42 01 	lds	r24, 0x0142
    3196:	88 0f       	add	r24, r24
    3198:	80 93 42 01 	sts	0x0142, r24
    319c:	3d c0       	rjmp	.+122    	; 0x3218 <main+0x196e>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    319e:	80 91 eb 01 	lds	r24, 0x01EB
    31a2:	90 91 ec 01 	lds	r25, 0x01EC
    31a6:	2c e2       	ldi	r18, 0x2C	; 44
    31a8:	31 e0       	ldi	r19, 0x01	; 1
    31aa:	b9 01       	movw	r22, r18
    31ac:	41 e0       	ldi	r20, 0x01	; 1
    31ae:	50 e0       	ldi	r21, 0x00	; 0
    31b0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <memcpy>
					cur_char_p = announce_buffer;
    31b4:	80 91 eb 01 	lds	r24, 0x01EB
    31b8:	90 91 ec 01 	lds	r25, 0x01EC
    31bc:	90 93 3f 01 	sts	0x013F, r25
    31c0:	80 93 3e 01 	sts	0x013E, r24
					cur_character = '\0';
    31c4:	10 92 42 01 	sts	0x0142, r1

					// Set back into previous mode
					mute_end = cur_timer;
    31c8:	80 91 68 01 	lds	r24, 0x0168
    31cc:	90 91 69 01 	lds	r25, 0x0169
    31d0:	a0 91 6a 01 	lds	r26, 0x016A
    31d4:	b0 91 6b 01 	lds	r27, 0x016B
    31d8:	80 93 d8 01 	sts	0x01D8, r24
    31dc:	90 93 d9 01 	sts	0x01D9, r25
    31e0:	a0 93 da 01 	sts	0x01DA, r26
    31e4:	b0 93 db 01 	sts	0x01DB, r27
					cur_mode = prev_mode;
    31e8:	80 91 b8 01 	lds	r24, 0x01B8
    31ec:	80 93 a2 01 	sts	0x01A2, r24
					cur_state = prev_state;
    31f0:	80 91 72 01 	lds	r24, 0x0172
    31f4:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = prev_state_end;
    31f8:	80 91 b4 01 	lds	r24, 0x01B4
    31fc:	90 91 b5 01 	lds	r25, 0x01B5
    3200:	a0 91 b6 01 	lds	r26, 0x01B6
    3204:	b0 91 b7 01 	lds	r27, 0x01B7
    3208:	80 93 d4 01 	sts	0x01D4, r24
    320c:	90 93 d5 01 	sts	0x01D5, r25
    3210:	a0 93 d6 01 	sts	0x01D6, r26
    3214:	b0 93 d7 01 	sts	0x01D7, r27
				}
				break;
    3218:	5e c0       	rjmp	.+188    	; 0x32d6 <main+0x1a2c>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    321a:	20 91 68 01 	lds	r18, 0x0168
    321e:	30 91 69 01 	lds	r19, 0x0169
    3222:	40 91 6a 01 	lds	r20, 0x016A
    3226:	50 91 6b 01 	lds	r21, 0x016B
    322a:	80 91 d4 01 	lds	r24, 0x01D4
    322e:	90 91 d5 01 	lds	r25, 0x01D5
    3232:	a0 91 d6 01 	lds	r26, 0x01D6
    3236:	b0 91 d7 01 	lds	r27, 0x01D7
    323a:	82 17       	cp	r24, r18
    323c:	93 07       	cpc	r25, r19
    323e:	a4 07       	cpc	r26, r20
    3240:	b5 07       	cpc	r27, r21
    3242:	f0 f4       	brcc	.+60     	; 0x3280 <main+0x19d6>
				{
					cur_state_end = cur_timer + dit_length;
    3244:	80 91 73 01 	lds	r24, 0x0173
    3248:	90 91 74 01 	lds	r25, 0x0174
    324c:	9c 01       	movw	r18, r24
    324e:	40 e0       	ldi	r20, 0x00	; 0
    3250:	50 e0       	ldi	r21, 0x00	; 0
    3252:	80 91 68 01 	lds	r24, 0x0168
    3256:	90 91 69 01 	lds	r25, 0x0169
    325a:	a0 91 6a 01 	lds	r26, 0x016A
    325e:	b0 91 6b 01 	lds	r27, 0x016B
    3262:	82 0f       	add	r24, r18
    3264:	93 1f       	adc	r25, r19
    3266:	a4 1f       	adc	r26, r20
    3268:	b5 1f       	adc	r27, r21
    326a:	80 93 d4 01 	sts	0x01D4, r24
    326e:	90 93 d5 01 	sts	0x01D5, r25
    3272:	a0 93 d6 01 	sts	0x01D6, r26
    3276:	b0 93 d7 01 	sts	0x01D7, r27
					cur_state = DITDELAY;
    327a:	84 e0       	ldi	r24, 0x04	; 4
    327c:	80 93 c8 01 	sts	0x01C8, r24
				}

				key_down = TRUE;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	80 93 3c 01 	sts	0x013C, r24
				sidetone_on = TRUE;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	80 93 3b 01 	sts	0x013B, r24
				break;
    3292:	21 c0       	rjmp	.+66     	; 0x32d6 <main+0x1a2c>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    3294:	20 91 68 01 	lds	r18, 0x0168
    3298:	30 91 69 01 	lds	r19, 0x0169
    329c:	40 91 6a 01 	lds	r20, 0x016A
    32a0:	50 91 6b 01 	lds	r21, 0x016B
    32a4:	80 91 d4 01 	lds	r24, 0x01D4
    32a8:	90 91 d5 01 	lds	r25, 0x01D5
    32ac:	a0 91 d6 01 	lds	r26, 0x01D6
    32b0:	b0 91 d7 01 	lds	r27, 0x01D7
    32b4:	82 17       	cp	r24, r18
    32b6:	93 07       	cpc	r25, r19
    32b8:	a4 07       	cpc	r26, r20
    32ba:	b5 07       	cpc	r27, r21
    32bc:	18 f4       	brcc	.+6      	; 0x32c4 <main+0x1a1a>
					cur_state = IDLE;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	80 93 c8 01 	sts	0x01C8, r24

				key_down = FALSE;
    32c4:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    32c8:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	80 93 3b 01 	sts	0x013B, r24
				break;
    32d2:	01 c0       	rjmp	.+2      	; 0x32d6 <main+0x1a2c>

			default:
				break;
    32d4:	00 00       	nop
			}
			break;
    32d6:	01 c0       	rjmp	.+2      	; 0x32da <main+0x1a30>
				break;
			}
			break;
		*/
		default:
			break;
    32d8:	00 00       	nop
		} // END switch(cur_mode)

	}
    32da:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <main+0xca>

000032de <__mulsi3>:
    32de:	62 9f       	mul	r22, r18
    32e0:	d0 01       	movw	r26, r0
    32e2:	73 9f       	mul	r23, r19
    32e4:	f0 01       	movw	r30, r0
    32e6:	82 9f       	mul	r24, r18
    32e8:	e0 0d       	add	r30, r0
    32ea:	f1 1d       	adc	r31, r1
    32ec:	64 9f       	mul	r22, r20
    32ee:	e0 0d       	add	r30, r0
    32f0:	f1 1d       	adc	r31, r1
    32f2:	92 9f       	mul	r25, r18
    32f4:	f0 0d       	add	r31, r0
    32f6:	83 9f       	mul	r24, r19
    32f8:	f0 0d       	add	r31, r0
    32fa:	74 9f       	mul	r23, r20
    32fc:	f0 0d       	add	r31, r0
    32fe:	65 9f       	mul	r22, r21
    3300:	f0 0d       	add	r31, r0
    3302:	99 27       	eor	r25, r25
    3304:	72 9f       	mul	r23, r18
    3306:	b0 0d       	add	r27, r0
    3308:	e1 1d       	adc	r30, r1
    330a:	f9 1f       	adc	r31, r25
    330c:	63 9f       	mul	r22, r19
    330e:	b0 0d       	add	r27, r0
    3310:	e1 1d       	adc	r30, r1
    3312:	f9 1f       	adc	r31, r25
    3314:	bd 01       	movw	r22, r26
    3316:	cf 01       	movw	r24, r30
    3318:	11 24       	eor	r1, r1
    331a:	08 95       	ret

0000331c <__udivmodhi4>:
    331c:	aa 1b       	sub	r26, r26
    331e:	bb 1b       	sub	r27, r27
    3320:	51 e1       	ldi	r21, 0x11	; 17
    3322:	07 c0       	rjmp	.+14     	; 0x3332 <__udivmodhi4_ep>

00003324 <__udivmodhi4_loop>:
    3324:	aa 1f       	adc	r26, r26
    3326:	bb 1f       	adc	r27, r27
    3328:	a6 17       	cp	r26, r22
    332a:	b7 07       	cpc	r27, r23
    332c:	10 f0       	brcs	.+4      	; 0x3332 <__udivmodhi4_ep>
    332e:	a6 1b       	sub	r26, r22
    3330:	b7 0b       	sbc	r27, r23

00003332 <__udivmodhi4_ep>:
    3332:	88 1f       	adc	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	5a 95       	dec	r21
    3338:	a9 f7       	brne	.-22     	; 0x3324 <__udivmodhi4_loop>
    333a:	80 95       	com	r24
    333c:	90 95       	com	r25
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	08 95       	ret

00003344 <__divmodhi4>:
    3344:	97 fb       	bst	r25, 7
    3346:	09 2e       	mov	r0, r25
    3348:	07 26       	eor	r0, r23
    334a:	0a d0       	rcall	.+20     	; 0x3360 <__divmodhi4_neg1>
    334c:	77 fd       	sbrc	r23, 7
    334e:	04 d0       	rcall	.+8      	; 0x3358 <__divmodhi4_neg2>
    3350:	e5 df       	rcall	.-54     	; 0x331c <__udivmodhi4>
    3352:	06 d0       	rcall	.+12     	; 0x3360 <__divmodhi4_neg1>
    3354:	00 20       	and	r0, r0
    3356:	1a f4       	brpl	.+6      	; 0x335e <__divmodhi4_exit>

00003358 <__divmodhi4_neg2>:
    3358:	70 95       	com	r23
    335a:	61 95       	neg	r22
    335c:	7f 4f       	sbci	r23, 0xFF	; 255

0000335e <__divmodhi4_exit>:
    335e:	08 95       	ret

00003360 <__divmodhi4_neg1>:
    3360:	f6 f7       	brtc	.-4      	; 0x335e <__divmodhi4_exit>
    3362:	90 95       	com	r25
    3364:	81 95       	neg	r24
    3366:	9f 4f       	sbci	r25, 0xFF	; 255
    3368:	08 95       	ret

0000336a <__udivmodsi4>:
    336a:	a1 e2       	ldi	r26, 0x21	; 33
    336c:	1a 2e       	mov	r1, r26
    336e:	aa 1b       	sub	r26, r26
    3370:	bb 1b       	sub	r27, r27
    3372:	fd 01       	movw	r30, r26
    3374:	0d c0       	rjmp	.+26     	; 0x3390 <__udivmodsi4_ep>

00003376 <__udivmodsi4_loop>:
    3376:	aa 1f       	adc	r26, r26
    3378:	bb 1f       	adc	r27, r27
    337a:	ee 1f       	adc	r30, r30
    337c:	ff 1f       	adc	r31, r31
    337e:	a2 17       	cp	r26, r18
    3380:	b3 07       	cpc	r27, r19
    3382:	e4 07       	cpc	r30, r20
    3384:	f5 07       	cpc	r31, r21
    3386:	20 f0       	brcs	.+8      	; 0x3390 <__udivmodsi4_ep>
    3388:	a2 1b       	sub	r26, r18
    338a:	b3 0b       	sbc	r27, r19
    338c:	e4 0b       	sbc	r30, r20
    338e:	f5 0b       	sbc	r31, r21

00003390 <__udivmodsi4_ep>:
    3390:	66 1f       	adc	r22, r22
    3392:	77 1f       	adc	r23, r23
    3394:	88 1f       	adc	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	1a 94       	dec	r1
    339a:	69 f7       	brne	.-38     	; 0x3376 <__udivmodsi4_loop>
    339c:	60 95       	com	r22
    339e:	70 95       	com	r23
    33a0:	80 95       	com	r24
    33a2:	90 95       	com	r25
    33a4:	9b 01       	movw	r18, r22
    33a6:	ac 01       	movw	r20, r24
    33a8:	bd 01       	movw	r22, r26
    33aa:	cf 01       	movw	r24, r30
    33ac:	08 95       	ret

000033ae <malloc>:
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	82 30       	cpi	r24, 0x02	; 2
    33b4:	91 05       	cpc	r25, r1
    33b6:	10 f4       	brcc	.+4      	; 0x33bc <malloc+0xe>
    33b8:	82 e0       	ldi	r24, 0x02	; 2
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	e0 91 f5 01 	lds	r30, 0x01F5
    33c0:	f0 91 f6 01 	lds	r31, 0x01F6
    33c4:	40 e0       	ldi	r20, 0x00	; 0
    33c6:	50 e0       	ldi	r21, 0x00	; 0
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	26 c0       	rjmp	.+76     	; 0x341a <malloc+0x6c>
    33ce:	60 81       	ld	r22, Z
    33d0:	71 81       	ldd	r23, Z+1	; 0x01
    33d2:	68 17       	cp	r22, r24
    33d4:	79 07       	cpc	r23, r25
    33d6:	e0 f0       	brcs	.+56     	; 0x3410 <malloc+0x62>
    33d8:	68 17       	cp	r22, r24
    33da:	79 07       	cpc	r23, r25
    33dc:	81 f4       	brne	.+32     	; 0x33fe <malloc+0x50>
    33de:	82 81       	ldd	r24, Z+2	; 0x02
    33e0:	93 81       	ldd	r25, Z+3	; 0x03
    33e2:	21 15       	cp	r18, r1
    33e4:	31 05       	cpc	r19, r1
    33e6:	31 f0       	breq	.+12     	; 0x33f4 <malloc+0x46>
    33e8:	d9 01       	movw	r26, r18
    33ea:	13 96       	adiw	r26, 0x03	; 3
    33ec:	9c 93       	st	X, r25
    33ee:	8e 93       	st	-X, r24
    33f0:	12 97       	sbiw	r26, 0x02	; 2
    33f2:	2b c0       	rjmp	.+86     	; 0x344a <malloc+0x9c>
    33f4:	90 93 f6 01 	sts	0x01F6, r25
    33f8:	80 93 f5 01 	sts	0x01F5, r24
    33fc:	26 c0       	rjmp	.+76     	; 0x344a <malloc+0x9c>
    33fe:	41 15       	cp	r20, r1
    3400:	51 05       	cpc	r21, r1
    3402:	19 f0       	breq	.+6      	; 0x340a <malloc+0x5c>
    3404:	64 17       	cp	r22, r20
    3406:	75 07       	cpc	r23, r21
    3408:	18 f4       	brcc	.+6      	; 0x3410 <malloc+0x62>
    340a:	ab 01       	movw	r20, r22
    340c:	e9 01       	movw	r28, r18
    340e:	df 01       	movw	r26, r30
    3410:	9f 01       	movw	r18, r30
    3412:	72 81       	ldd	r23, Z+2	; 0x02
    3414:	63 81       	ldd	r22, Z+3	; 0x03
    3416:	e7 2f       	mov	r30, r23
    3418:	f6 2f       	mov	r31, r22
    341a:	30 97       	sbiw	r30, 0x00	; 0
    341c:	c1 f6       	brne	.-80     	; 0x33ce <malloc+0x20>
    341e:	41 15       	cp	r20, r1
    3420:	51 05       	cpc	r21, r1
    3422:	01 f1       	breq	.+64     	; 0x3464 <malloc+0xb6>
    3424:	48 1b       	sub	r20, r24
    3426:	59 0b       	sbc	r21, r25
    3428:	44 30       	cpi	r20, 0x04	; 4
    342a:	51 05       	cpc	r21, r1
    342c:	80 f4       	brcc	.+32     	; 0x344e <malloc+0xa0>
    342e:	12 96       	adiw	r26, 0x02	; 2
    3430:	8d 91       	ld	r24, X+
    3432:	9c 91       	ld	r25, X
    3434:	13 97       	sbiw	r26, 0x03	; 3
    3436:	20 97       	sbiw	r28, 0x00	; 0
    3438:	19 f0       	breq	.+6      	; 0x3440 <malloc+0x92>
    343a:	9b 83       	std	Y+3, r25	; 0x03
    343c:	8a 83       	std	Y+2, r24	; 0x02
    343e:	04 c0       	rjmp	.+8      	; 0x3448 <malloc+0x9a>
    3440:	90 93 f6 01 	sts	0x01F6, r25
    3444:	80 93 f5 01 	sts	0x01F5, r24
    3448:	fd 01       	movw	r30, r26
    344a:	32 96       	adiw	r30, 0x02	; 2
    344c:	46 c0       	rjmp	.+140    	; 0x34da <malloc+0x12c>
    344e:	fd 01       	movw	r30, r26
    3450:	e4 0f       	add	r30, r20
    3452:	f5 1f       	adc	r31, r21
    3454:	81 93       	st	Z+, r24
    3456:	91 93       	st	Z+, r25
    3458:	42 50       	subi	r20, 0x02	; 2
    345a:	50 40       	sbci	r21, 0x00	; 0
    345c:	11 96       	adiw	r26, 0x01	; 1
    345e:	5c 93       	st	X, r21
    3460:	4e 93       	st	-X, r20
    3462:	3b c0       	rjmp	.+118    	; 0x34da <malloc+0x12c>
    3464:	20 91 f3 01 	lds	r18, 0x01F3
    3468:	30 91 f4 01 	lds	r19, 0x01F4
    346c:	21 15       	cp	r18, r1
    346e:	31 05       	cpc	r19, r1
    3470:	41 f4       	brne	.+16     	; 0x3482 <malloc+0xd4>
    3472:	20 91 36 01 	lds	r18, 0x0136
    3476:	30 91 37 01 	lds	r19, 0x0137
    347a:	30 93 f4 01 	sts	0x01F4, r19
    347e:	20 93 f3 01 	sts	0x01F3, r18
    3482:	20 91 38 01 	lds	r18, 0x0138
    3486:	30 91 39 01 	lds	r19, 0x0139
    348a:	21 15       	cp	r18, r1
    348c:	31 05       	cpc	r19, r1
    348e:	41 f4       	brne	.+16     	; 0x34a0 <malloc+0xf2>
    3490:	2d b7       	in	r18, 0x3d	; 61
    3492:	3e b7       	in	r19, 0x3e	; 62
    3494:	40 91 34 01 	lds	r20, 0x0134
    3498:	50 91 35 01 	lds	r21, 0x0135
    349c:	24 1b       	sub	r18, r20
    349e:	35 0b       	sbc	r19, r21
    34a0:	e0 91 f3 01 	lds	r30, 0x01F3
    34a4:	f0 91 f4 01 	lds	r31, 0x01F4
    34a8:	e2 17       	cp	r30, r18
    34aa:	f3 07       	cpc	r31, r19
    34ac:	a0 f4       	brcc	.+40     	; 0x34d6 <malloc+0x128>
    34ae:	2e 1b       	sub	r18, r30
    34b0:	3f 0b       	sbc	r19, r31
    34b2:	28 17       	cp	r18, r24
    34b4:	39 07       	cpc	r19, r25
    34b6:	78 f0       	brcs	.+30     	; 0x34d6 <malloc+0x128>
    34b8:	ac 01       	movw	r20, r24
    34ba:	4e 5f       	subi	r20, 0xFE	; 254
    34bc:	5f 4f       	sbci	r21, 0xFF	; 255
    34be:	24 17       	cp	r18, r20
    34c0:	35 07       	cpc	r19, r21
    34c2:	48 f0       	brcs	.+18     	; 0x34d6 <malloc+0x128>
    34c4:	4e 0f       	add	r20, r30
    34c6:	5f 1f       	adc	r21, r31
    34c8:	50 93 f4 01 	sts	0x01F4, r21
    34cc:	40 93 f3 01 	sts	0x01F3, r20
    34d0:	81 93       	st	Z+, r24
    34d2:	91 93       	st	Z+, r25
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <malloc+0x12c>
    34d6:	e0 e0       	ldi	r30, 0x00	; 0
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	cf 01       	movw	r24, r30
    34dc:	df 91       	pop	r29
    34de:	cf 91       	pop	r28
    34e0:	08 95       	ret

000034e2 <free>:
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	09 f4       	brne	.+2      	; 0x34ec <free+0xa>
    34ea:	91 c0       	rjmp	.+290    	; 0x360e <free+0x12c>
    34ec:	fc 01       	movw	r30, r24
    34ee:	32 97       	sbiw	r30, 0x02	; 2
    34f0:	13 82       	std	Z+3, r1	; 0x03
    34f2:	12 82       	std	Z+2, r1	; 0x02
    34f4:	60 91 f5 01 	lds	r22, 0x01F5
    34f8:	70 91 f6 01 	lds	r23, 0x01F6
    34fc:	61 15       	cp	r22, r1
    34fe:	71 05       	cpc	r23, r1
    3500:	81 f4       	brne	.+32     	; 0x3522 <free+0x40>
    3502:	20 81       	ld	r18, Z
    3504:	31 81       	ldd	r19, Z+1	; 0x01
    3506:	28 0f       	add	r18, r24
    3508:	39 1f       	adc	r19, r25
    350a:	80 91 f3 01 	lds	r24, 0x01F3
    350e:	90 91 f4 01 	lds	r25, 0x01F4
    3512:	82 17       	cp	r24, r18
    3514:	93 07       	cpc	r25, r19
    3516:	99 f5       	brne	.+102    	; 0x357e <free+0x9c>
    3518:	f0 93 f4 01 	sts	0x01F4, r31
    351c:	e0 93 f3 01 	sts	0x01F3, r30
    3520:	76 c0       	rjmp	.+236    	; 0x360e <free+0x12c>
    3522:	db 01       	movw	r26, r22
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	02 c0       	rjmp	.+4      	; 0x352e <free+0x4c>
    352a:	cd 01       	movw	r24, r26
    352c:	d9 01       	movw	r26, r18
    352e:	ae 17       	cp	r26, r30
    3530:	bf 07       	cpc	r27, r31
    3532:	48 f4       	brcc	.+18     	; 0x3546 <free+0x64>
    3534:	12 96       	adiw	r26, 0x02	; 2
    3536:	2d 91       	ld	r18, X+
    3538:	3c 91       	ld	r19, X
    353a:	13 97       	sbiw	r26, 0x03	; 3
    353c:	21 15       	cp	r18, r1
    353e:	31 05       	cpc	r19, r1
    3540:	a1 f7       	brne	.-24     	; 0x352a <free+0x48>
    3542:	cd 01       	movw	r24, r26
    3544:	21 c0       	rjmp	.+66     	; 0x3588 <free+0xa6>
    3546:	b3 83       	std	Z+3, r27	; 0x03
    3548:	a2 83       	std	Z+2, r26	; 0x02
    354a:	ef 01       	movw	r28, r30
    354c:	49 91       	ld	r20, Y+
    354e:	59 91       	ld	r21, Y+
    3550:	9e 01       	movw	r18, r28
    3552:	24 0f       	add	r18, r20
    3554:	35 1f       	adc	r19, r21
    3556:	a2 17       	cp	r26, r18
    3558:	b3 07       	cpc	r27, r19
    355a:	79 f4       	brne	.+30     	; 0x357a <free+0x98>
    355c:	2d 91       	ld	r18, X+
    355e:	3c 91       	ld	r19, X
    3560:	11 97       	sbiw	r26, 0x01	; 1
    3562:	24 0f       	add	r18, r20
    3564:	35 1f       	adc	r19, r21
    3566:	2e 5f       	subi	r18, 0xFE	; 254
    3568:	3f 4f       	sbci	r19, 0xFF	; 255
    356a:	31 83       	std	Z+1, r19	; 0x01
    356c:	20 83       	st	Z, r18
    356e:	12 96       	adiw	r26, 0x02	; 2
    3570:	2d 91       	ld	r18, X+
    3572:	3c 91       	ld	r19, X
    3574:	13 97       	sbiw	r26, 0x03	; 3
    3576:	33 83       	std	Z+3, r19	; 0x03
    3578:	22 83       	std	Z+2, r18	; 0x02
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	29 f4       	brne	.+10     	; 0x3588 <free+0xa6>
    357e:	f0 93 f6 01 	sts	0x01F6, r31
    3582:	e0 93 f5 01 	sts	0x01F5, r30
    3586:	43 c0       	rjmp	.+134    	; 0x360e <free+0x12c>
    3588:	dc 01       	movw	r26, r24
    358a:	13 96       	adiw	r26, 0x03	; 3
    358c:	fc 93       	st	X, r31
    358e:	ee 93       	st	-X, r30
    3590:	12 97       	sbiw	r26, 0x02	; 2
    3592:	4d 91       	ld	r20, X+
    3594:	5d 91       	ld	r21, X+
    3596:	a4 0f       	add	r26, r20
    3598:	b5 1f       	adc	r27, r21
    359a:	ea 17       	cp	r30, r26
    359c:	fb 07       	cpc	r31, r27
    359e:	69 f4       	brne	.+26     	; 0x35ba <free+0xd8>
    35a0:	20 81       	ld	r18, Z
    35a2:	31 81       	ldd	r19, Z+1	; 0x01
    35a4:	24 0f       	add	r18, r20
    35a6:	35 1f       	adc	r19, r21
    35a8:	2e 5f       	subi	r18, 0xFE	; 254
    35aa:	3f 4f       	sbci	r19, 0xFF	; 255
    35ac:	ec 01       	movw	r28, r24
    35ae:	39 83       	std	Y+1, r19	; 0x01
    35b0:	28 83       	st	Y, r18
    35b2:	22 81       	ldd	r18, Z+2	; 0x02
    35b4:	33 81       	ldd	r19, Z+3	; 0x03
    35b6:	3b 83       	std	Y+3, r19	; 0x03
    35b8:	2a 83       	std	Y+2, r18	; 0x02
    35ba:	e0 e0       	ldi	r30, 0x00	; 0
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <free+0xe2>
    35c0:	fb 01       	movw	r30, r22
    35c2:	bc 01       	movw	r22, r24
    35c4:	db 01       	movw	r26, r22
    35c6:	12 96       	adiw	r26, 0x02	; 2
    35c8:	8d 91       	ld	r24, X+
    35ca:	9c 91       	ld	r25, X
    35cc:	13 97       	sbiw	r26, 0x03	; 3
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	b9 f7       	brne	.-18     	; 0x35c0 <free+0xde>
    35d2:	9b 01       	movw	r18, r22
    35d4:	2e 5f       	subi	r18, 0xFE	; 254
    35d6:	3f 4f       	sbci	r19, 0xFF	; 255
    35d8:	8d 91       	ld	r24, X+
    35da:	9c 91       	ld	r25, X
    35dc:	11 97       	sbiw	r26, 0x01	; 1
    35de:	82 0f       	add	r24, r18
    35e0:	93 1f       	adc	r25, r19
    35e2:	40 91 f3 01 	lds	r20, 0x01F3
    35e6:	50 91 f4 01 	lds	r21, 0x01F4
    35ea:	48 17       	cp	r20, r24
    35ec:	59 07       	cpc	r21, r25
    35ee:	79 f4       	brne	.+30     	; 0x360e <free+0x12c>
    35f0:	30 97       	sbiw	r30, 0x00	; 0
    35f2:	29 f4       	brne	.+10     	; 0x35fe <free+0x11c>
    35f4:	10 92 f6 01 	sts	0x01F6, r1
    35f8:	10 92 f5 01 	sts	0x01F5, r1
    35fc:	02 c0       	rjmp	.+4      	; 0x3602 <free+0x120>
    35fe:	13 82       	std	Z+3, r1	; 0x03
    3600:	12 82       	std	Z+2, r1	; 0x02
    3602:	22 50       	subi	r18, 0x02	; 2
    3604:	30 40       	sbci	r19, 0x00	; 0
    3606:	30 93 f4 01 	sts	0x01F4, r19
    360a:	20 93 f3 01 	sts	0x01F3, r18
    360e:	df 91       	pop	r29
    3610:	cf 91       	pop	r28
    3612:	08 95       	ret

00003614 <memcpy>:
    3614:	fb 01       	movw	r30, r22
    3616:	dc 01       	movw	r26, r24
    3618:	02 c0       	rjmp	.+4      	; 0x361e <memcpy+0xa>
    361a:	01 90       	ld	r0, Z+
    361c:	0d 92       	st	X+, r0
    361e:	41 50       	subi	r20, 0x01	; 1
    3620:	50 40       	sbci	r21, 0x00	; 0
    3622:	d8 f7       	brcc	.-10     	; 0x361a <memcpy+0x6>
    3624:	08 95       	ret

00003626 <memset>:
    3626:	dc 01       	movw	r26, r24
    3628:	01 c0       	rjmp	.+2      	; 0x362c <memset+0x6>
    362a:	6d 93       	st	X+, r22
    362c:	41 50       	subi	r20, 0x01	; 1
    362e:	50 40       	sbci	r21, 0x00	; 0
    3630:	e0 f7       	brcc	.-8      	; 0x362a <memset+0x4>
    3632:	08 95       	ret

00003634 <strcpy>:
    3634:	fb 01       	movw	r30, r22
    3636:	dc 01       	movw	r26, r24
    3638:	01 90       	ld	r0, Z+
    363a:	0d 92       	st	X+, r0
    363c:	00 20       	and	r0, r0
    363e:	e1 f7       	brne	.-8      	; 0x3638 <strcpy+0x4>
    3640:	08 95       	ret

00003642 <strupr>:
    3642:	dc 01       	movw	r26, r24
    3644:	6c 91       	ld	r22, X
    3646:	61 56       	subi	r22, 0x61	; 97
    3648:	6a 31       	cpi	r22, 0x1A	; 26
    364a:	08 f0       	brcs	.+2      	; 0x364e <strupr+0xc>
    364c:	60 5e       	subi	r22, 0xE0	; 224
    364e:	6f 5b       	subi	r22, 0xBF	; 191
    3650:	6d 93       	st	X+, r22
    3652:	c1 f7       	brne	.-16     	; 0x3644 <strupr+0x2>
    3654:	08 95       	ret

00003656 <sprintf>:
    3656:	ae e0       	ldi	r26, 0x0E	; 14
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	e1 e3       	ldi	r30, 0x31	; 49
    365c:	fb e1       	ldi	r31, 0x1B	; 27
    365e:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__prologue_saves__+0x1c>
    3662:	0d 89       	ldd	r16, Y+21	; 0x15
    3664:	1e 89       	ldd	r17, Y+22	; 0x16
    3666:	86 e0       	ldi	r24, 0x06	; 6
    3668:	8c 83       	std	Y+4, r24	; 0x04
    366a:	1a 83       	std	Y+2, r17	; 0x02
    366c:	09 83       	std	Y+1, r16	; 0x01
    366e:	8f ef       	ldi	r24, 0xFF	; 255
    3670:	9f e7       	ldi	r25, 0x7F	; 127
    3672:	9e 83       	std	Y+6, r25	; 0x06
    3674:	8d 83       	std	Y+5, r24	; 0x05
    3676:	9e 01       	movw	r18, r28
    3678:	27 5e       	subi	r18, 0xE7	; 231
    367a:	3f 4f       	sbci	r19, 0xFF	; 255
    367c:	ce 01       	movw	r24, r28
    367e:	01 96       	adiw	r24, 0x01	; 1
    3680:	6f 89       	ldd	r22, Y+23	; 0x17
    3682:	78 8d       	ldd	r23, Y+24	; 0x18
    3684:	a9 01       	movw	r20, r18
    3686:	0e 94 4e 1b 	call	0x369c	; 0x369c <vfprintf>
    368a:	ef 81       	ldd	r30, Y+7	; 0x07
    368c:	f8 85       	ldd	r31, Y+8	; 0x08
    368e:	e0 0f       	add	r30, r16
    3690:	f1 1f       	adc	r31, r17
    3692:	10 82       	st	Z, r1
    3694:	2e 96       	adiw	r28, 0x0e	; 14
    3696:	e4 e0       	ldi	r30, 0x04	; 4
    3698:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__epilogue_restores__+0x1c>

0000369c <vfprintf>:
    369c:	ac e0       	ldi	r26, 0x0C	; 12
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	e4 e5       	ldi	r30, 0x54	; 84
    36a2:	fb e1       	ldi	r31, 0x1B	; 27
    36a4:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__>
    36a8:	6c 01       	movw	r12, r24
    36aa:	1b 01       	movw	r2, r22
    36ac:	8a 01       	movw	r16, r20
    36ae:	fc 01       	movw	r30, r24
    36b0:	17 82       	std	Z+7, r1	; 0x07
    36b2:	16 82       	std	Z+6, r1	; 0x06
    36b4:	83 81       	ldd	r24, Z+3	; 0x03
    36b6:	81 ff       	sbrs	r24, 1
    36b8:	d1 c1       	rjmp	.+930    	; 0x3a5c <vfprintf+0x3c0>
    36ba:	2e 01       	movw	r4, r28
    36bc:	08 94       	sec
    36be:	41 1c       	adc	r4, r1
    36c0:	51 1c       	adc	r5, r1
    36c2:	f6 01       	movw	r30, r12
    36c4:	93 81       	ldd	r25, Z+3	; 0x03
    36c6:	f1 01       	movw	r30, r2
    36c8:	93 fd       	sbrc	r25, 3
    36ca:	85 91       	lpm	r24, Z+
    36cc:	93 ff       	sbrs	r25, 3
    36ce:	81 91       	ld	r24, Z+
    36d0:	1f 01       	movw	r2, r30
    36d2:	88 23       	and	r24, r24
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <vfprintf+0x3c>
    36d6:	be c1       	rjmp	.+892    	; 0x3a54 <vfprintf+0x3b8>
    36d8:	85 32       	cpi	r24, 0x25	; 37
    36da:	39 f4       	brne	.+14     	; 0x36ea <vfprintf+0x4e>
    36dc:	93 fd       	sbrc	r25, 3
    36de:	85 91       	lpm	r24, Z+
    36e0:	93 ff       	sbrs	r25, 3
    36e2:	81 91       	ld	r24, Z+
    36e4:	1f 01       	movw	r2, r30
    36e6:	85 32       	cpi	r24, 0x25	; 37
    36e8:	29 f4       	brne	.+10     	; 0x36f4 <vfprintf+0x58>
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	b6 01       	movw	r22, r12
    36ee:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    36f2:	e7 cf       	rjmp	.-50     	; 0x36c2 <vfprintf+0x26>
    36f4:	ee 24       	eor	r14, r14
    36f6:	ff 24       	eor	r15, r15
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	20 32       	cpi	r18, 0x20	; 32
    36fc:	b0 f4       	brcc	.+44     	; 0x372a <vfprintf+0x8e>
    36fe:	8b 32       	cpi	r24, 0x2B	; 43
    3700:	69 f0       	breq	.+26     	; 0x371c <vfprintf+0x80>
    3702:	8c 32       	cpi	r24, 0x2C	; 44
    3704:	28 f4       	brcc	.+10     	; 0x3710 <vfprintf+0x74>
    3706:	80 32       	cpi	r24, 0x20	; 32
    3708:	51 f0       	breq	.+20     	; 0x371e <vfprintf+0x82>
    370a:	83 32       	cpi	r24, 0x23	; 35
    370c:	71 f4       	brne	.+28     	; 0x372a <vfprintf+0x8e>
    370e:	0b c0       	rjmp	.+22     	; 0x3726 <vfprintf+0x8a>
    3710:	8d 32       	cpi	r24, 0x2D	; 45
    3712:	39 f0       	breq	.+14     	; 0x3722 <vfprintf+0x86>
    3714:	80 33       	cpi	r24, 0x30	; 48
    3716:	49 f4       	brne	.+18     	; 0x372a <vfprintf+0x8e>
    3718:	21 60       	ori	r18, 0x01	; 1
    371a:	2c c0       	rjmp	.+88     	; 0x3774 <vfprintf+0xd8>
    371c:	22 60       	ori	r18, 0x02	; 2
    371e:	24 60       	ori	r18, 0x04	; 4
    3720:	29 c0       	rjmp	.+82     	; 0x3774 <vfprintf+0xd8>
    3722:	28 60       	ori	r18, 0x08	; 8
    3724:	27 c0       	rjmp	.+78     	; 0x3774 <vfprintf+0xd8>
    3726:	20 61       	ori	r18, 0x10	; 16
    3728:	25 c0       	rjmp	.+74     	; 0x3774 <vfprintf+0xd8>
    372a:	27 fd       	sbrc	r18, 7
    372c:	2c c0       	rjmp	.+88     	; 0x3786 <vfprintf+0xea>
    372e:	38 2f       	mov	r19, r24
    3730:	30 53       	subi	r19, 0x30	; 48
    3732:	3a 30       	cpi	r19, 0x0A	; 10
    3734:	98 f4       	brcc	.+38     	; 0x375c <vfprintf+0xc0>
    3736:	26 ff       	sbrs	r18, 6
    3738:	08 c0       	rjmp	.+16     	; 0x374a <vfprintf+0xae>
    373a:	8e 2d       	mov	r24, r14
    373c:	88 0f       	add	r24, r24
    373e:	e8 2e       	mov	r14, r24
    3740:	ee 0c       	add	r14, r14
    3742:	ee 0c       	add	r14, r14
    3744:	e8 0e       	add	r14, r24
    3746:	e3 0e       	add	r14, r19
    3748:	15 c0       	rjmp	.+42     	; 0x3774 <vfprintf+0xd8>
    374a:	8f 2d       	mov	r24, r15
    374c:	88 0f       	add	r24, r24
    374e:	f8 2e       	mov	r15, r24
    3750:	ff 0c       	add	r15, r15
    3752:	ff 0c       	add	r15, r15
    3754:	f8 0e       	add	r15, r24
    3756:	f3 0e       	add	r15, r19
    3758:	20 62       	ori	r18, 0x20	; 32
    375a:	0c c0       	rjmp	.+24     	; 0x3774 <vfprintf+0xd8>
    375c:	8e 32       	cpi	r24, 0x2E	; 46
    375e:	21 f4       	brne	.+8      	; 0x3768 <vfprintf+0xcc>
    3760:	26 fd       	sbrc	r18, 6
    3762:	78 c1       	rjmp	.+752    	; 0x3a54 <vfprintf+0x3b8>
    3764:	20 64       	ori	r18, 0x40	; 64
    3766:	06 c0       	rjmp	.+12     	; 0x3774 <vfprintf+0xd8>
    3768:	8c 36       	cpi	r24, 0x6C	; 108
    376a:	11 f4       	brne	.+4      	; 0x3770 <vfprintf+0xd4>
    376c:	20 68       	ori	r18, 0x80	; 128
    376e:	02 c0       	rjmp	.+4      	; 0x3774 <vfprintf+0xd8>
    3770:	88 36       	cpi	r24, 0x68	; 104
    3772:	49 f4       	brne	.+18     	; 0x3786 <vfprintf+0xea>
    3774:	f1 01       	movw	r30, r2
    3776:	93 fd       	sbrc	r25, 3
    3778:	85 91       	lpm	r24, Z+
    377a:	93 ff       	sbrs	r25, 3
    377c:	81 91       	ld	r24, Z+
    377e:	1f 01       	movw	r2, r30
    3780:	88 23       	and	r24, r24
    3782:	09 f0       	breq	.+2      	; 0x3786 <vfprintf+0xea>
    3784:	ba cf       	rjmp	.-140    	; 0x36fa <vfprintf+0x5e>
    3786:	98 2f       	mov	r25, r24
    3788:	95 54       	subi	r25, 0x45	; 69
    378a:	93 30       	cpi	r25, 0x03	; 3
    378c:	18 f0       	brcs	.+6      	; 0x3794 <vfprintf+0xf8>
    378e:	90 52       	subi	r25, 0x20	; 32
    3790:	93 30       	cpi	r25, 0x03	; 3
    3792:	28 f4       	brcc	.+10     	; 0x379e <vfprintf+0x102>
    3794:	0c 5f       	subi	r16, 0xFC	; 252
    3796:	1f 4f       	sbci	r17, 0xFF	; 255
    3798:	ff e3       	ldi	r31, 0x3F	; 63
    379a:	f9 83       	std	Y+1, r31	; 0x01
    379c:	0d c0       	rjmp	.+26     	; 0x37b8 <vfprintf+0x11c>
    379e:	83 36       	cpi	r24, 0x63	; 99
    37a0:	31 f0       	breq	.+12     	; 0x37ae <vfprintf+0x112>
    37a2:	83 37       	cpi	r24, 0x73	; 115
    37a4:	71 f0       	breq	.+28     	; 0x37c2 <vfprintf+0x126>
    37a6:	83 35       	cpi	r24, 0x53	; 83
    37a8:	09 f0       	breq	.+2      	; 0x37ac <vfprintf+0x110>
    37aa:	60 c0       	rjmp	.+192    	; 0x386c <vfprintf+0x1d0>
    37ac:	22 c0       	rjmp	.+68     	; 0x37f2 <vfprintf+0x156>
    37ae:	f8 01       	movw	r30, r16
    37b0:	80 81       	ld	r24, Z
    37b2:	89 83       	std	Y+1, r24	; 0x01
    37b4:	0e 5f       	subi	r16, 0xFE	; 254
    37b6:	1f 4f       	sbci	r17, 0xFF	; 255
    37b8:	42 01       	movw	r8, r4
    37ba:	71 e0       	ldi	r23, 0x01	; 1
    37bc:	a7 2e       	mov	r10, r23
    37be:	b1 2c       	mov	r11, r1
    37c0:	16 c0       	rjmp	.+44     	; 0x37ee <vfprintf+0x152>
    37c2:	62 e0       	ldi	r22, 0x02	; 2
    37c4:	66 2e       	mov	r6, r22
    37c6:	71 2c       	mov	r7, r1
    37c8:	60 0e       	add	r6, r16
    37ca:	71 1e       	adc	r7, r17
    37cc:	f8 01       	movw	r30, r16
    37ce:	80 80       	ld	r8, Z
    37d0:	91 80       	ldd	r9, Z+1	; 0x01
    37d2:	26 ff       	sbrs	r18, 6
    37d4:	03 c0       	rjmp	.+6      	; 0x37dc <vfprintf+0x140>
    37d6:	6e 2d       	mov	r22, r14
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <vfprintf+0x144>
    37dc:	6f ef       	ldi	r22, 0xFF	; 255
    37de:	7f ef       	ldi	r23, 0xFF	; 255
    37e0:	c4 01       	movw	r24, r8
    37e2:	2c 87       	std	Y+12, r18	; 0x0c
    37e4:	0e 94 66 1d 	call	0x3acc	; 0x3acc <strnlen>
    37e8:	5c 01       	movw	r10, r24
    37ea:	83 01       	movw	r16, r6
    37ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    37ee:	2f 77       	andi	r18, 0x7F	; 127
    37f0:	17 c0       	rjmp	.+46     	; 0x3820 <vfprintf+0x184>
    37f2:	52 e0       	ldi	r21, 0x02	; 2
    37f4:	65 2e       	mov	r6, r21
    37f6:	71 2c       	mov	r7, r1
    37f8:	60 0e       	add	r6, r16
    37fa:	71 1e       	adc	r7, r17
    37fc:	f8 01       	movw	r30, r16
    37fe:	80 80       	ld	r8, Z
    3800:	91 80       	ldd	r9, Z+1	; 0x01
    3802:	26 ff       	sbrs	r18, 6
    3804:	03 c0       	rjmp	.+6      	; 0x380c <vfprintf+0x170>
    3806:	6e 2d       	mov	r22, r14
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	02 c0       	rjmp	.+4      	; 0x3810 <vfprintf+0x174>
    380c:	6f ef       	ldi	r22, 0xFF	; 255
    380e:	7f ef       	ldi	r23, 0xFF	; 255
    3810:	c4 01       	movw	r24, r8
    3812:	2c 87       	std	Y+12, r18	; 0x0c
    3814:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <strnlen_P>
    3818:	5c 01       	movw	r10, r24
    381a:	2c 85       	ldd	r18, Y+12	; 0x0c
    381c:	20 68       	ori	r18, 0x80	; 128
    381e:	83 01       	movw	r16, r6
    3820:	23 fd       	sbrc	r18, 3
    3822:	20 c0       	rjmp	.+64     	; 0x3864 <vfprintf+0x1c8>
    3824:	08 c0       	rjmp	.+16     	; 0x3836 <vfprintf+0x19a>
    3826:	80 e2       	ldi	r24, 0x20	; 32
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	b6 01       	movw	r22, r12
    382c:	2c 87       	std	Y+12, r18	; 0x0c
    382e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    3832:	fa 94       	dec	r15
    3834:	2c 85       	ldd	r18, Y+12	; 0x0c
    3836:	8f 2d       	mov	r24, r15
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	a8 16       	cp	r10, r24
    383c:	b9 06       	cpc	r11, r25
    383e:	98 f3       	brcs	.-26     	; 0x3826 <vfprintf+0x18a>
    3840:	11 c0       	rjmp	.+34     	; 0x3864 <vfprintf+0x1c8>
    3842:	f4 01       	movw	r30, r8
    3844:	27 fd       	sbrc	r18, 7
    3846:	85 91       	lpm	r24, Z+
    3848:	27 ff       	sbrs	r18, 7
    384a:	81 91       	ld	r24, Z+
    384c:	4f 01       	movw	r8, r30
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	b6 01       	movw	r22, r12
    3852:	2c 87       	std	Y+12, r18	; 0x0c
    3854:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    3858:	2c 85       	ldd	r18, Y+12	; 0x0c
    385a:	f1 10       	cpse	r15, r1
    385c:	fa 94       	dec	r15
    385e:	08 94       	sec
    3860:	a1 08       	sbc	r10, r1
    3862:	b1 08       	sbc	r11, r1
    3864:	a1 14       	cp	r10, r1
    3866:	b1 04       	cpc	r11, r1
    3868:	61 f7       	brne	.-40     	; 0x3842 <vfprintf+0x1a6>
    386a:	f1 c0       	rjmp	.+482    	; 0x3a4e <vfprintf+0x3b2>
    386c:	84 36       	cpi	r24, 0x64	; 100
    386e:	11 f0       	breq	.+4      	; 0x3874 <vfprintf+0x1d8>
    3870:	89 36       	cpi	r24, 0x69	; 105
    3872:	49 f5       	brne	.+82     	; 0x38c6 <vfprintf+0x22a>
    3874:	27 ff       	sbrs	r18, 7
    3876:	08 c0       	rjmp	.+16     	; 0x3888 <vfprintf+0x1ec>
    3878:	f8 01       	movw	r30, r16
    387a:	60 81       	ld	r22, Z
    387c:	71 81       	ldd	r23, Z+1	; 0x01
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	93 81       	ldd	r25, Z+3	; 0x03
    3882:	0c 5f       	subi	r16, 0xFC	; 252
    3884:	1f 4f       	sbci	r17, 0xFF	; 255
    3886:	09 c0       	rjmp	.+18     	; 0x389a <vfprintf+0x1fe>
    3888:	f8 01       	movw	r30, r16
    388a:	60 81       	ld	r22, Z
    388c:	71 81       	ldd	r23, Z+1	; 0x01
    388e:	88 27       	eor	r24, r24
    3890:	77 fd       	sbrc	r23, 7
    3892:	80 95       	com	r24
    3894:	98 2f       	mov	r25, r24
    3896:	0e 5f       	subi	r16, 0xFE	; 254
    3898:	1f 4f       	sbci	r17, 0xFF	; 255
    389a:	4f e6       	ldi	r20, 0x6F	; 111
    389c:	b4 2e       	mov	r11, r20
    389e:	b2 22       	and	r11, r18
    38a0:	97 ff       	sbrs	r25, 7
    38a2:	09 c0       	rjmp	.+18     	; 0x38b6 <vfprintf+0x21a>
    38a4:	90 95       	com	r25
    38a6:	80 95       	com	r24
    38a8:	70 95       	com	r23
    38aa:	61 95       	neg	r22
    38ac:	7f 4f       	sbci	r23, 0xFF	; 255
    38ae:	8f 4f       	sbci	r24, 0xFF	; 255
    38b0:	9f 4f       	sbci	r25, 0xFF	; 255
    38b2:	f0 e8       	ldi	r31, 0x80	; 128
    38b4:	bf 2a       	or	r11, r31
    38b6:	a2 01       	movw	r20, r4
    38b8:	2a e0       	ldi	r18, 0x0A	; 10
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__ultoa_invert>
    38c0:	78 2e       	mov	r7, r24
    38c2:	74 18       	sub	r7, r4
    38c4:	45 c0       	rjmp	.+138    	; 0x3950 <vfprintf+0x2b4>
    38c6:	85 37       	cpi	r24, 0x75	; 117
    38c8:	31 f4       	brne	.+12     	; 0x38d6 <vfprintf+0x23a>
    38ca:	3f ee       	ldi	r19, 0xEF	; 239
    38cc:	b3 2e       	mov	r11, r19
    38ce:	b2 22       	and	r11, r18
    38d0:	2a e0       	ldi	r18, 0x0A	; 10
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	25 c0       	rjmp	.+74     	; 0x3920 <vfprintf+0x284>
    38d6:	99 ef       	ldi	r25, 0xF9	; 249
    38d8:	b9 2e       	mov	r11, r25
    38da:	b2 22       	and	r11, r18
    38dc:	8f 36       	cpi	r24, 0x6F	; 111
    38de:	c1 f0       	breq	.+48     	; 0x3910 <vfprintf+0x274>
    38e0:	80 37       	cpi	r24, 0x70	; 112
    38e2:	20 f4       	brcc	.+8      	; 0x38ec <vfprintf+0x250>
    38e4:	88 35       	cpi	r24, 0x58	; 88
    38e6:	09 f0       	breq	.+2      	; 0x38ea <vfprintf+0x24e>
    38e8:	b5 c0       	rjmp	.+362    	; 0x3a54 <vfprintf+0x3b8>
    38ea:	0d c0       	rjmp	.+26     	; 0x3906 <vfprintf+0x26a>
    38ec:	80 37       	cpi	r24, 0x70	; 112
    38ee:	21 f0       	breq	.+8      	; 0x38f8 <vfprintf+0x25c>
    38f0:	88 37       	cpi	r24, 0x78	; 120
    38f2:	09 f0       	breq	.+2      	; 0x38f6 <vfprintf+0x25a>
    38f4:	af c0       	rjmp	.+350    	; 0x3a54 <vfprintf+0x3b8>
    38f6:	02 c0       	rjmp	.+4      	; 0x38fc <vfprintf+0x260>
    38f8:	20 e1       	ldi	r18, 0x10	; 16
    38fa:	b2 2a       	or	r11, r18
    38fc:	b4 fe       	sbrs	r11, 4
    38fe:	0b c0       	rjmp	.+22     	; 0x3916 <vfprintf+0x27a>
    3900:	84 e0       	ldi	r24, 0x04	; 4
    3902:	b8 2a       	or	r11, r24
    3904:	08 c0       	rjmp	.+16     	; 0x3916 <vfprintf+0x27a>
    3906:	b4 fe       	sbrs	r11, 4
    3908:	09 c0       	rjmp	.+18     	; 0x391c <vfprintf+0x280>
    390a:	e6 e0       	ldi	r30, 0x06	; 6
    390c:	be 2a       	or	r11, r30
    390e:	06 c0       	rjmp	.+12     	; 0x391c <vfprintf+0x280>
    3910:	28 e0       	ldi	r18, 0x08	; 8
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	05 c0       	rjmp	.+10     	; 0x3920 <vfprintf+0x284>
    3916:	20 e1       	ldi	r18, 0x10	; 16
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <vfprintf+0x284>
    391c:	20 e1       	ldi	r18, 0x10	; 16
    391e:	32 e0       	ldi	r19, 0x02	; 2
    3920:	b7 fe       	sbrs	r11, 7
    3922:	08 c0       	rjmp	.+16     	; 0x3934 <vfprintf+0x298>
    3924:	f8 01       	movw	r30, r16
    3926:	60 81       	ld	r22, Z
    3928:	71 81       	ldd	r23, Z+1	; 0x01
    392a:	82 81       	ldd	r24, Z+2	; 0x02
    392c:	93 81       	ldd	r25, Z+3	; 0x03
    392e:	0c 5f       	subi	r16, 0xFC	; 252
    3930:	1f 4f       	sbci	r17, 0xFF	; 255
    3932:	07 c0       	rjmp	.+14     	; 0x3942 <vfprintf+0x2a6>
    3934:	f8 01       	movw	r30, r16
    3936:	60 81       	ld	r22, Z
    3938:	71 81       	ldd	r23, Z+1	; 0x01
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	0e 5f       	subi	r16, 0xFE	; 254
    3940:	1f 4f       	sbci	r17, 0xFF	; 255
    3942:	a2 01       	movw	r20, r4
    3944:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__ultoa_invert>
    3948:	78 2e       	mov	r7, r24
    394a:	74 18       	sub	r7, r4
    394c:	ff e7       	ldi	r31, 0x7F	; 127
    394e:	bf 22       	and	r11, r31
    3950:	b6 fe       	sbrs	r11, 6
    3952:	0b c0       	rjmp	.+22     	; 0x396a <vfprintf+0x2ce>
    3954:	2e ef       	ldi	r18, 0xFE	; 254
    3956:	b2 22       	and	r11, r18
    3958:	7e 14       	cp	r7, r14
    395a:	38 f4       	brcc	.+14     	; 0x396a <vfprintf+0x2ce>
    395c:	b4 fe       	sbrs	r11, 4
    395e:	07 c0       	rjmp	.+14     	; 0x396e <vfprintf+0x2d2>
    3960:	b2 fc       	sbrc	r11, 2
    3962:	05 c0       	rjmp	.+10     	; 0x396e <vfprintf+0x2d2>
    3964:	8f ee       	ldi	r24, 0xEF	; 239
    3966:	b8 22       	and	r11, r24
    3968:	02 c0       	rjmp	.+4      	; 0x396e <vfprintf+0x2d2>
    396a:	a7 2c       	mov	r10, r7
    396c:	01 c0       	rjmp	.+2      	; 0x3970 <vfprintf+0x2d4>
    396e:	ae 2c       	mov	r10, r14
    3970:	8b 2d       	mov	r24, r11
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	b4 fe       	sbrs	r11, 4
    3976:	0d c0       	rjmp	.+26     	; 0x3992 <vfprintf+0x2f6>
    3978:	fe 01       	movw	r30, r28
    397a:	e7 0d       	add	r30, r7
    397c:	f1 1d       	adc	r31, r1
    397e:	20 81       	ld	r18, Z
    3980:	20 33       	cpi	r18, 0x30	; 48
    3982:	19 f4       	brne	.+6      	; 0x398a <vfprintf+0x2ee>
    3984:	e9 ee       	ldi	r30, 0xE9	; 233
    3986:	be 22       	and	r11, r30
    3988:	09 c0       	rjmp	.+18     	; 0x399c <vfprintf+0x300>
    398a:	a3 94       	inc	r10
    398c:	b2 fe       	sbrs	r11, 2
    398e:	06 c0       	rjmp	.+12     	; 0x399c <vfprintf+0x300>
    3990:	04 c0       	rjmp	.+8      	; 0x399a <vfprintf+0x2fe>
    3992:	86 78       	andi	r24, 0x86	; 134
    3994:	90 70       	andi	r25, 0x00	; 0
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	09 f0       	breq	.+2      	; 0x399c <vfprintf+0x300>
    399a:	a3 94       	inc	r10
    399c:	8b 2c       	mov	r8, r11
    399e:	99 24       	eor	r9, r9
    39a0:	b3 fc       	sbrc	r11, 3
    39a2:	14 c0       	rjmp	.+40     	; 0x39cc <vfprintf+0x330>
    39a4:	b0 fe       	sbrs	r11, 0
    39a6:	0f c0       	rjmp	.+30     	; 0x39c6 <vfprintf+0x32a>
    39a8:	af 14       	cp	r10, r15
    39aa:	28 f4       	brcc	.+10     	; 0x39b6 <vfprintf+0x31a>
    39ac:	e7 2c       	mov	r14, r7
    39ae:	ef 0c       	add	r14, r15
    39b0:	ea 18       	sub	r14, r10
    39b2:	af 2c       	mov	r10, r15
    39b4:	08 c0       	rjmp	.+16     	; 0x39c6 <vfprintf+0x32a>
    39b6:	e7 2c       	mov	r14, r7
    39b8:	06 c0       	rjmp	.+12     	; 0x39c6 <vfprintf+0x32a>
    39ba:	80 e2       	ldi	r24, 0x20	; 32
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	b6 01       	movw	r22, r12
    39c0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    39c4:	a3 94       	inc	r10
    39c6:	af 14       	cp	r10, r15
    39c8:	c0 f3       	brcs	.-16     	; 0x39ba <vfprintf+0x31e>
    39ca:	04 c0       	rjmp	.+8      	; 0x39d4 <vfprintf+0x338>
    39cc:	af 14       	cp	r10, r15
    39ce:	10 f4       	brcc	.+4      	; 0x39d4 <vfprintf+0x338>
    39d0:	fa 18       	sub	r15, r10
    39d2:	01 c0       	rjmp	.+2      	; 0x39d6 <vfprintf+0x33a>
    39d4:	ff 24       	eor	r15, r15
    39d6:	84 fe       	sbrs	r8, 4
    39d8:	0f c0       	rjmp	.+30     	; 0x39f8 <vfprintf+0x35c>
    39da:	80 e3       	ldi	r24, 0x30	; 48
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	b6 01       	movw	r22, r12
    39e0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    39e4:	82 fe       	sbrs	r8, 2
    39e6:	1f c0       	rjmp	.+62     	; 0x3a26 <vfprintf+0x38a>
    39e8:	81 fe       	sbrs	r8, 1
    39ea:	03 c0       	rjmp	.+6      	; 0x39f2 <vfprintf+0x356>
    39ec:	88 e5       	ldi	r24, 0x58	; 88
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	10 c0       	rjmp	.+32     	; 0x3a12 <vfprintf+0x376>
    39f2:	88 e7       	ldi	r24, 0x78	; 120
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	0d c0       	rjmp	.+26     	; 0x3a12 <vfprintf+0x376>
    39f8:	c4 01       	movw	r24, r8
    39fa:	86 78       	andi	r24, 0x86	; 134
    39fc:	90 70       	andi	r25, 0x00	; 0
    39fe:	00 97       	sbiw	r24, 0x00	; 0
    3a00:	91 f0       	breq	.+36     	; 0x3a26 <vfprintf+0x38a>
    3a02:	81 fc       	sbrc	r8, 1
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <vfprintf+0x36e>
    3a06:	80 e2       	ldi	r24, 0x20	; 32
    3a08:	01 c0       	rjmp	.+2      	; 0x3a0c <vfprintf+0x370>
    3a0a:	8b e2       	ldi	r24, 0x2B	; 43
    3a0c:	b7 fc       	sbrc	r11, 7
    3a0e:	8d e2       	ldi	r24, 0x2D	; 45
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	b6 01       	movw	r22, r12
    3a14:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    3a18:	06 c0       	rjmp	.+12     	; 0x3a26 <vfprintf+0x38a>
    3a1a:	80 e3       	ldi	r24, 0x30	; 48
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	b6 01       	movw	r22, r12
    3a20:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    3a24:	ea 94       	dec	r14
    3a26:	7e 14       	cp	r7, r14
    3a28:	c0 f3       	brcs	.-16     	; 0x3a1a <vfprintf+0x37e>
    3a2a:	7a 94       	dec	r7
    3a2c:	f2 01       	movw	r30, r4
    3a2e:	e7 0d       	add	r30, r7
    3a30:	f1 1d       	adc	r31, r1
    3a32:	80 81       	ld	r24, Z
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	b6 01       	movw	r22, r12
    3a38:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    3a3c:	77 20       	and	r7, r7
    3a3e:	a9 f7       	brne	.-22     	; 0x3a2a <vfprintf+0x38e>
    3a40:	06 c0       	rjmp	.+12     	; 0x3a4e <vfprintf+0x3b2>
    3a42:	80 e2       	ldi	r24, 0x20	; 32
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	b6 01       	movw	r22, r12
    3a48:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <fputc>
    3a4c:	fa 94       	dec	r15
    3a4e:	ff 20       	and	r15, r15
    3a50:	c1 f7       	brne	.-16     	; 0x3a42 <vfprintf+0x3a6>
    3a52:	37 ce       	rjmp	.-914    	; 0x36c2 <vfprintf+0x26>
    3a54:	f6 01       	movw	r30, r12
    3a56:	26 81       	ldd	r18, Z+6	; 0x06
    3a58:	37 81       	ldd	r19, Z+7	; 0x07
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <vfprintf+0x3c4>
    3a5c:	2f ef       	ldi	r18, 0xFF	; 255
    3a5e:	3f ef       	ldi	r19, 0xFF	; 255
    3a60:	c9 01       	movw	r24, r18
    3a62:	2c 96       	adiw	r28, 0x0c	; 12
    3a64:	e2 e1       	ldi	r30, 0x12	; 18
    3a66:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__>

00003a6a <__eerd_block_m168>:
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22

00003a6e <__eerd_blraw_m168>:
    3a6e:	fc 01       	movw	r30, r24
    3a70:	f9 99       	sbic	0x1f, 1	; 31
    3a72:	fe cf       	rjmp	.-4      	; 0x3a70 <__eerd_blraw_m168+0x2>
    3a74:	06 c0       	rjmp	.+12     	; 0x3a82 <__eerd_blraw_m168+0x14>
    3a76:	f2 bd       	out	0x22, r31	; 34
    3a78:	e1 bd       	out	0x21, r30	; 33
    3a7a:	f8 9a       	sbi	0x1f, 0	; 31
    3a7c:	31 96       	adiw	r30, 0x01	; 1
    3a7e:	00 b4       	in	r0, 0x20	; 32
    3a80:	0d 92       	st	X+, r0
    3a82:	41 50       	subi	r20, 0x01	; 1
    3a84:	50 40       	sbci	r21, 0x00	; 0
    3a86:	b8 f7       	brcc	.-18     	; 0x3a76 <__eerd_blraw_m168+0x8>
    3a88:	08 95       	ret

00003a8a <__eerd_byte_m168>:
    3a8a:	f9 99       	sbic	0x1f, 1	; 31
    3a8c:	fe cf       	rjmp	.-4      	; 0x3a8a <__eerd_byte_m168>
    3a8e:	92 bd       	out	0x22, r25	; 34
    3a90:	81 bd       	out	0x21, r24	; 33
    3a92:	f8 9a       	sbi	0x1f, 0	; 31
    3a94:	99 27       	eor	r25, r25
    3a96:	80 b5       	in	r24, 0x20	; 32
    3a98:	08 95       	ret

00003a9a <__eewr_byte_m168>:
    3a9a:	26 2f       	mov	r18, r22

00003a9c <__eewr_r18_m168>:
    3a9c:	f9 99       	sbic	0x1f, 1	; 31
    3a9e:	fe cf       	rjmp	.-4      	; 0x3a9c <__eewr_r18_m168>
    3aa0:	1f ba       	out	0x1f, r1	; 31
    3aa2:	92 bd       	out	0x22, r25	; 34
    3aa4:	81 bd       	out	0x21, r24	; 33
    3aa6:	20 bd       	out	0x20, r18	; 32
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	fa 9a       	sbi	0x1f, 2	; 31
    3aae:	f9 9a       	sbi	0x1f, 1	; 31
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	01 96       	adiw	r24, 0x01	; 1
    3ab4:	08 95       	ret

00003ab6 <strnlen_P>:
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	05 90       	lpm	r0, Z+
    3aba:	61 50       	subi	r22, 0x01	; 1
    3abc:	70 40       	sbci	r23, 0x00	; 0
    3abe:	01 10       	cpse	r0, r1
    3ac0:	d8 f7       	brcc	.-10     	; 0x3ab8 <strnlen_P+0x2>
    3ac2:	80 95       	com	r24
    3ac4:	90 95       	com	r25
    3ac6:	8e 0f       	add	r24, r30
    3ac8:	9f 1f       	adc	r25, r31
    3aca:	08 95       	ret

00003acc <strnlen>:
    3acc:	fc 01       	movw	r30, r24
    3ace:	61 50       	subi	r22, 0x01	; 1
    3ad0:	70 40       	sbci	r23, 0x00	; 0
    3ad2:	01 90       	ld	r0, Z+
    3ad4:	01 10       	cpse	r0, r1
    3ad6:	d8 f7       	brcc	.-10     	; 0x3ace <strnlen+0x2>
    3ad8:	80 95       	com	r24
    3ada:	90 95       	com	r25
    3adc:	8e 0f       	add	r24, r30
    3ade:	9f 1f       	adc	r25, r31
    3ae0:	08 95       	ret

00003ae2 <fputc>:
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	8c 01       	movw	r16, r24
    3aec:	eb 01       	movw	r28, r22
    3aee:	8b 81       	ldd	r24, Y+3	; 0x03
    3af0:	81 ff       	sbrs	r24, 1
    3af2:	1b c0       	rjmp	.+54     	; 0x3b2a <fputc+0x48>
    3af4:	82 ff       	sbrs	r24, 2
    3af6:	0d c0       	rjmp	.+26     	; 0x3b12 <fputc+0x30>
    3af8:	2e 81       	ldd	r18, Y+6	; 0x06
    3afa:	3f 81       	ldd	r19, Y+7	; 0x07
    3afc:	8c 81       	ldd	r24, Y+4	; 0x04
    3afe:	9d 81       	ldd	r25, Y+5	; 0x05
    3b00:	28 17       	cp	r18, r24
    3b02:	39 07       	cpc	r19, r25
    3b04:	64 f4       	brge	.+24     	; 0x3b1e <fputc+0x3c>
    3b06:	e8 81       	ld	r30, Y
    3b08:	f9 81       	ldd	r31, Y+1	; 0x01
    3b0a:	01 93       	st	Z+, r16
    3b0c:	f9 83       	std	Y+1, r31	; 0x01
    3b0e:	e8 83       	st	Y, r30
    3b10:	06 c0       	rjmp	.+12     	; 0x3b1e <fputc+0x3c>
    3b12:	e8 85       	ldd	r30, Y+8	; 0x08
    3b14:	f9 85       	ldd	r31, Y+9	; 0x09
    3b16:	80 2f       	mov	r24, r16
    3b18:	09 95       	icall
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	31 f4       	brne	.+12     	; 0x3b2a <fputc+0x48>
    3b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b20:	9f 81       	ldd	r25, Y+7	; 0x07
    3b22:	01 96       	adiw	r24, 0x01	; 1
    3b24:	9f 83       	std	Y+7, r25	; 0x07
    3b26:	8e 83       	std	Y+6, r24	; 0x06
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <fputc+0x4c>
    3b2a:	0f ef       	ldi	r16, 0xFF	; 255
    3b2c:	1f ef       	ldi	r17, 0xFF	; 255
    3b2e:	c8 01       	movw	r24, r16
    3b30:	df 91       	pop	r29
    3b32:	cf 91       	pop	r28
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	08 95       	ret

00003b3a <__ultoa_invert>:
    3b3a:	fa 01       	movw	r30, r20
    3b3c:	aa 27       	eor	r26, r26
    3b3e:	28 30       	cpi	r18, 0x08	; 8
    3b40:	51 f1       	breq	.+84     	; 0x3b96 <__ultoa_invert+0x5c>
    3b42:	20 31       	cpi	r18, 0x10	; 16
    3b44:	81 f1       	breq	.+96     	; 0x3ba6 <__ultoa_invert+0x6c>
    3b46:	e8 94       	clt
    3b48:	6f 93       	push	r22
    3b4a:	6e 7f       	andi	r22, 0xFE	; 254
    3b4c:	6e 5f       	subi	r22, 0xFE	; 254
    3b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b50:	8f 4f       	sbci	r24, 0xFF	; 255
    3b52:	9f 4f       	sbci	r25, 0xFF	; 255
    3b54:	af 4f       	sbci	r26, 0xFF	; 255
    3b56:	b1 e0       	ldi	r27, 0x01	; 1
    3b58:	3e d0       	rcall	.+124    	; 0x3bd6 <__ultoa_invert+0x9c>
    3b5a:	b4 e0       	ldi	r27, 0x04	; 4
    3b5c:	3c d0       	rcall	.+120    	; 0x3bd6 <__ultoa_invert+0x9c>
    3b5e:	67 0f       	add	r22, r23
    3b60:	78 1f       	adc	r23, r24
    3b62:	89 1f       	adc	r24, r25
    3b64:	9a 1f       	adc	r25, r26
    3b66:	a1 1d       	adc	r26, r1
    3b68:	68 0f       	add	r22, r24
    3b6a:	79 1f       	adc	r23, r25
    3b6c:	8a 1f       	adc	r24, r26
    3b6e:	91 1d       	adc	r25, r1
    3b70:	a1 1d       	adc	r26, r1
    3b72:	6a 0f       	add	r22, r26
    3b74:	71 1d       	adc	r23, r1
    3b76:	81 1d       	adc	r24, r1
    3b78:	91 1d       	adc	r25, r1
    3b7a:	a1 1d       	adc	r26, r1
    3b7c:	20 d0       	rcall	.+64     	; 0x3bbe <__ultoa_invert+0x84>
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <__ultoa_invert+0x48>
    3b80:	68 94       	set
    3b82:	3f 91       	pop	r19
    3b84:	2a e0       	ldi	r18, 0x0A	; 10
    3b86:	26 9f       	mul	r18, r22
    3b88:	11 24       	eor	r1, r1
    3b8a:	30 19       	sub	r19, r0
    3b8c:	30 5d       	subi	r19, 0xD0	; 208
    3b8e:	31 93       	st	Z+, r19
    3b90:	de f6       	brtc	.-74     	; 0x3b48 <__ultoa_invert+0xe>
    3b92:	cf 01       	movw	r24, r30
    3b94:	08 95       	ret
    3b96:	46 2f       	mov	r20, r22
    3b98:	47 70       	andi	r20, 0x07	; 7
    3b9a:	40 5d       	subi	r20, 0xD0	; 208
    3b9c:	41 93       	st	Z+, r20
    3b9e:	b3 e0       	ldi	r27, 0x03	; 3
    3ba0:	0f d0       	rcall	.+30     	; 0x3bc0 <__ultoa_invert+0x86>
    3ba2:	c9 f7       	brne	.-14     	; 0x3b96 <__ultoa_invert+0x5c>
    3ba4:	f6 cf       	rjmp	.-20     	; 0x3b92 <__ultoa_invert+0x58>
    3ba6:	46 2f       	mov	r20, r22
    3ba8:	4f 70       	andi	r20, 0x0F	; 15
    3baa:	40 5d       	subi	r20, 0xD0	; 208
    3bac:	4a 33       	cpi	r20, 0x3A	; 58
    3bae:	18 f0       	brcs	.+6      	; 0x3bb6 <__ultoa_invert+0x7c>
    3bb0:	49 5d       	subi	r20, 0xD9	; 217
    3bb2:	31 fd       	sbrc	r19, 1
    3bb4:	40 52       	subi	r20, 0x20	; 32
    3bb6:	41 93       	st	Z+, r20
    3bb8:	02 d0       	rcall	.+4      	; 0x3bbe <__ultoa_invert+0x84>
    3bba:	a9 f7       	brne	.-22     	; 0x3ba6 <__ultoa_invert+0x6c>
    3bbc:	ea cf       	rjmp	.-44     	; 0x3b92 <__ultoa_invert+0x58>
    3bbe:	b4 e0       	ldi	r27, 0x04	; 4
    3bc0:	a6 95       	lsr	r26
    3bc2:	97 95       	ror	r25
    3bc4:	87 95       	ror	r24
    3bc6:	77 95       	ror	r23
    3bc8:	67 95       	ror	r22
    3bca:	ba 95       	dec	r27
    3bcc:	c9 f7       	brne	.-14     	; 0x3bc0 <__ultoa_invert+0x86>
    3bce:	00 97       	sbiw	r24, 0x00	; 0
    3bd0:	61 05       	cpc	r22, r1
    3bd2:	71 05       	cpc	r23, r1
    3bd4:	08 95       	ret
    3bd6:	9b 01       	movw	r18, r22
    3bd8:	ac 01       	movw	r20, r24
    3bda:	0a 2e       	mov	r0, r26
    3bdc:	06 94       	lsr	r0
    3bde:	57 95       	ror	r21
    3be0:	47 95       	ror	r20
    3be2:	37 95       	ror	r19
    3be4:	27 95       	ror	r18
    3be6:	ba 95       	dec	r27
    3be8:	c9 f7       	brne	.-14     	; 0x3bdc <__ultoa_invert+0xa2>
    3bea:	62 0f       	add	r22, r18
    3bec:	73 1f       	adc	r23, r19
    3bee:	84 1f       	adc	r24, r20
    3bf0:	95 1f       	adc	r25, r21
    3bf2:	a0 1d       	adc	r26, r0
    3bf4:	08 95       	ret

00003bf6 <__prologue_saves__>:
    3bf6:	2f 92       	push	r2
    3bf8:	3f 92       	push	r3
    3bfa:	4f 92       	push	r4
    3bfc:	5f 92       	push	r5
    3bfe:	6f 92       	push	r6
    3c00:	7f 92       	push	r7
    3c02:	8f 92       	push	r8
    3c04:	9f 92       	push	r9
    3c06:	af 92       	push	r10
    3c08:	bf 92       	push	r11
    3c0a:	cf 92       	push	r12
    3c0c:	df 92       	push	r13
    3c0e:	ef 92       	push	r14
    3c10:	ff 92       	push	r15
    3c12:	0f 93       	push	r16
    3c14:	1f 93       	push	r17
    3c16:	cf 93       	push	r28
    3c18:	df 93       	push	r29
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    3c1e:	ca 1b       	sub	r28, r26
    3c20:	db 0b       	sbc	r29, r27
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	cd bf       	out	0x3d, r28	; 61
    3c2c:	09 94       	ijmp

00003c2e <__epilogue_restores__>:
    3c2e:	2a 88       	ldd	r2, Y+18	; 0x12
    3c30:	39 88       	ldd	r3, Y+17	; 0x11
    3c32:	48 88       	ldd	r4, Y+16	; 0x10
    3c34:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c36:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c38:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c40:	b9 84       	ldd	r11, Y+9	; 0x09
    3c42:	c8 84       	ldd	r12, Y+8	; 0x08
    3c44:	df 80       	ldd	r13, Y+7	; 0x07
    3c46:	ee 80       	ldd	r14, Y+6	; 0x06
    3c48:	fd 80       	ldd	r15, Y+5	; 0x05
    3c4a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c4c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c4e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c50:	b9 81       	ldd	r27, Y+1	; 0x01
    3c52:	ce 0f       	add	r28, r30
    3c54:	d1 1d       	adc	r29, r1
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	ed 01       	movw	r28, r26
    3c62:	08 95       	ret

00003c64 <_exit>:
    3c64:	f8 94       	cli

00003c66 <__stop_program>:
    3c66:	ff cf       	rjmp	.-2      	; 0x3c66 <__stop_program>
