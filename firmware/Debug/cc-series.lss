
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00003d42  00003df6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d42  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b9  0080013a  0080013a  00003e30  2**0
                  ALLOC
  3 .eeprom       0000002a  00810000  00810000  00003e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000057e4  00000000  00000000  00003e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000233c  00000000  00000000  00009640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e2 e4       	ldi	r30, 0x42	; 66
     1b8:	fd e3       	ldi	r31, 0x3D	; 61
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	aa 33       	cpi	r26, 0x3A	; 58
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	aa e3       	ldi	r26, 0x3A	; 58
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a3 3f       	cpi	r26, 0xF3	; 243
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <main>
     1da:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_11>:

// Timer1 ISR
//
// Timer1 is the sinewave generator.
ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_11+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 3a 01 	lds	r24, 0x013A
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_11+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_11+0xae>
	{
		//SIDETONE_DDR |= _BV(SIDETONE);

		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 9e 01 	lds	r18, 0x019E
     21c:	30 91 9f 01 	lds	r19, 0x019F
     220:	40 91 a0 01 	lds	r20, 0x01A0
     224:	50 91 a1 01 	lds	r21, 0x01A1
     228:	80 91 b0 01 	lds	r24, 0x01B0
     22c:	90 91 b1 01 	lds	r25, 0x01B1
     230:	a0 91 b2 01 	lds	r26, 0x01B2
     234:	b0 91 b3 01 	lds	r27, 0x01B3
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 9e 01 	sts	0x019E, r24
     244:	90 93 9f 01 	sts	0x019F, r25
     248:	a0 93 a0 01 	sts	0x01A0, r26
     24c:	b0 93 a1 01 	sts	0x01A1, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 9e 01 	lds	r24, 0x019E
     254:	90 91 9f 01 	lds	r25, 0x019F
     258:	a0 91 a0 01 	lds	r26, 0x01A0
     25c:	b0 91 a1 01 	lds	r27, 0x01A1
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 6c 01 	sts	0x016C, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 6c 01 	lds	r18, 0x016C
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
	{
		// Hi-Z the port when not using
		SIDETONE_DDR &= ~(_BV(SIDETONE));
		OCR0A = 0;
	} */
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(/*((timer > mute_start) && (timer < mute_end)) || */(mute_on == TRUE))
     2e4:	80 91 3b 01 	lds	r24, 0x013B
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	51 f4       	brne	.+20     	; 0x300 <__vector_7+0x46>
		MUTE_PORT |= _BV(MUTE);
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	28 e2       	ldi	r18, 0x28	; 40
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	20 62       	ori	r18, 0x20	; 32
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_7+0x58>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     300:	88 e2       	ldi	r24, 0x28	; 40
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	28 e2       	ldi	r18, 0x28	; 40
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7d       	andi	r18, 0xDF	; 223
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     312:	80 91 3c 01 	lds	r24, 0x013C
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	09 f0       	breq	.+2      	; 0x31c <__vector_7+0x62>
     31a:	43 c0       	rjmp	.+134    	; 0x3a2 <__vector_7+0xe8>
     31c:	20 91 6e 01 	lds	r18, 0x016E
     320:	30 91 6f 01 	lds	r19, 0x016F
     324:	40 91 70 01 	lds	r20, 0x0170
     328:	50 91 71 01 	lds	r21, 0x0171
     32c:	80 91 e9 01 	lds	r24, 0x01E9
     330:	90 91 ea 01 	lds	r25, 0x01EA
     334:	a0 91 eb 01 	lds	r26, 0x01EB
     338:	b0 91 ec 01 	lds	r27, 0x01EC
     33c:	28 17       	cp	r18, r24
     33e:	39 07       	cpc	r19, r25
     340:	4a 07       	cpc	r20, r26
     342:	5b 07       	cpc	r21, r27
     344:	70 f5       	brcc	.+92     	; 0x3a2 <__vector_7+0xe8>
     346:	20 91 6e 01 	lds	r18, 0x016E
     34a:	30 91 6f 01 	lds	r19, 0x016F
     34e:	40 91 70 01 	lds	r20, 0x0170
     352:	50 91 71 01 	lds	r21, 0x0171
     356:	80 91 a8 01 	lds	r24, 0x01A8
     35a:	90 91 a9 01 	lds	r25, 0x01A9
     35e:	a0 91 aa 01 	lds	r26, 0x01AA
     362:	b0 91 ab 01 	lds	r27, 0x01AB
     366:	82 17       	cp	r24, r18
     368:	93 07       	cpc	r25, r19
     36a:	a4 07       	cpc	r26, r20
     36c:	b5 07       	cpc	r27, r21
     36e:	c8 f4       	brcc	.+50     	; 0x3a2 <__vector_7+0xe8>
	{
		if(inc_tune_state == RIT || inc_tune_state == XIT)
     370:	80 91 ca 01 	lds	r24, 0x01CA
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	21 f0       	breq	.+8      	; 0x380 <__vector_7+0xc6>
     378:	80 91 ca 01 	lds	r24, 0x01CA
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	21 f4       	brne	.+8      	; 0x388 <__vector_7+0xce>
			set_dds_freq_reg(REG_1);
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 8f 0c 	call	0x191e	; 0x191e <set_dds_freq_reg>
     386:	03 c0       	rjmp	.+6      	; 0x38e <__vector_7+0xd4>
		else
			set_dds_freq_reg(REG_0);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 8f 0c 	call	0x191e	; 0x191e <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     38e:	88 e2       	ldi	r24, 0x28	; 40
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	28 e2       	ldi	r18, 0x28	; 40
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	20 61       	ori	r18, 0x10	; 16
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
     3a0:	0d c0       	rjmp	.+26     	; 0x3bc <__vector_7+0x102>
	}
	else
	{
		set_dds_freq_reg(tune_reg);
     3a2:	80 91 c9 01 	lds	r24, 0x01C9
     3a6:	0e 94 8f 0c 	call	0x191e	; 0x191e <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     3aa:	88 e2       	ldi	r24, 0x28	; 40
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	28 e2       	ldi	r18, 0x28	; 40
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	2f 7e       	andi	r18, 0xEF	; 239
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
	}

	// Handle the RIT/XIT LED
	if(inc_tune_state != NONE)
     3bc:	80 91 ca 01 	lds	r24, 0x01CA
     3c0:	88 23       	and	r24, r24
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <__vector_7+0x10c>
     3c4:	45 c0       	rjmp	.+138    	; 0x450 <__vector_7+0x196>
	{
		if(inc_tune_state == RIT)
     3c6:	80 91 ca 01 	lds	r24, 0x01CA
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	51 f4       	brne	.+20     	; 0x3e2 <__vector_7+0x128>
		{
			//RIT_LED_DDR |= _BV(RIT_LED);
			RIT_LED_PORT |= _BV(RIT_LED);
     3ce:	88 e2       	ldi	r24, 0x28	; 40
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	28 e2       	ldi	r18, 0x28	; 40
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	22 60       	ori	r18, 0x02	; 2
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
     3e0:	37 c0       	rjmp	.+110    	; 0x450 <__vector_7+0x196>
		}
		else if(inc_tune_state == XIT)
     3e2:	80 91 ca 01 	lds	r24, 0x01CA
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	99 f5       	brne	.+102    	; 0x450 <__vector_7+0x196>
		{
			if(cur_timer > led_toggle)
     3ea:	20 91 68 01 	lds	r18, 0x0168
     3ee:	30 91 69 01 	lds	r19, 0x0169
     3f2:	40 91 6a 01 	lds	r20, 0x016A
     3f6:	50 91 6b 01 	lds	r21, 0x016B
     3fa:	80 91 d5 01 	lds	r24, 0x01D5
     3fe:	90 91 d6 01 	lds	r25, 0x01D6
     402:	a0 91 d7 01 	lds	r26, 0x01D7
     406:	b0 91 d8 01 	lds	r27, 0x01D8
     40a:	82 17       	cp	r24, r18
     40c:	93 07       	cpc	r25, r19
     40e:	a4 07       	cpc	r26, r20
     410:	b5 07       	cpc	r27, r21
     412:	f0 f4       	brcc	.+60     	; 0x450 <__vector_7+0x196>
			{
				RIT_LED_PORT ^= _BV(RIT_LED);
     414:	88 e2       	ldi	r24, 0x28	; 40
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	28 e2       	ldi	r18, 0x28	; 40
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	f9 01       	movw	r30, r18
     41e:	30 81       	ld	r19, Z
     420:	22 e0       	ldi	r18, 0x02	; 2
     422:	23 27       	eor	r18, r19
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
				led_toggle = cur_timer + XIT_BLINK;
     428:	80 91 68 01 	lds	r24, 0x0168
     42c:	90 91 69 01 	lds	r25, 0x0169
     430:	a0 91 6a 01 	lds	r26, 0x016A
     434:	b0 91 6b 01 	lds	r27, 0x016B
     438:	8c 50       	subi	r24, 0x0C	; 12
     43a:	9e 4f       	sbci	r25, 0xFE	; 254
     43c:	af 4f       	sbci	r26, 0xFF	; 255
     43e:	bf 4f       	sbci	r27, 0xFF	; 255
     440:	80 93 d5 01 	sts	0x01D5, r24
     444:	90 93 d6 01 	sts	0x01D6, r25
     448:	a0 93 d7 01 	sts	0x01D7, r26
     44c:	b0 93 d8 01 	sts	0x01D8, r27
			}
		}

	}

	debounce(FALSE);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>

	// Need to consider timer overflow?
	timer++;
     456:	80 91 6e 01 	lds	r24, 0x016E
     45a:	90 91 6f 01 	lds	r25, 0x016F
     45e:	a0 91 70 01 	lds	r26, 0x0170
     462:	b0 91 71 01 	lds	r27, 0x0171
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	a1 1d       	adc	r26, r1
     46a:	b1 1d       	adc	r27, r1
     46c:	80 93 6e 01 	sts	0x016E, r24
     470:	90 93 6f 01 	sts	0x016F, r25
     474:	a0 93 70 01 	sts	0x0170, r26
     478:	b0 93 71 01 	sts	0x0171, r27
}
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	7f 91       	pop	r23
     48e:	6f 91       	pop	r22
     490:	5f 91       	pop	r21
     492:	4f 91       	pop	r20
     494:	3f 91       	pop	r19
     496:	2f 91       	pop	r18
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     4c0:	88 e6       	ldi	r24, 0x68	; 104
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	fc 01       	movw	r30, r24
     4c6:	10 82       	st	Z, r1

	cur_mode = default_mode;
     4c8:	80 91 6d 01 	lds	r24, 0x016D
     4cc:	80 93 a2 01 	sts	0x01A2, r24
	cur_state = IDLE;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 c0 01 	sts	0x01C0, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 100;
     4d6:	80 91 68 01 	lds	r24, 0x0168
     4da:	90 91 69 01 	lds	r25, 0x0169
     4de:	a0 91 6a 01 	lds	r26, 0x016A
     4e2:	b0 91 6b 01 	lds	r27, 0x016B
     4e6:	8c 59       	subi	r24, 0x9C	; 156
     4e8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ea:	af 4f       	sbci	r26, 0xFF	; 255
     4ec:	bf 4f       	sbci	r27, 0xFF	; 255
     4ee:	80 93 cc 01 	sts	0x01CC, r24
     4f2:	90 93 cd 01 	sts	0x01CD, r25
     4f6:	a0 93 ce 01 	sts	0x01CE, r26
     4fa:	b0 93 cf 01 	sts	0x01CF, r27
	sleep_timer = cur_timer + SLEEP_DELAY;
     4fe:	80 91 68 01 	lds	r24, 0x0168
     502:	90 91 69 01 	lds	r25, 0x0169
     506:	a0 91 6a 01 	lds	r26, 0x016A
     50a:	b0 91 6b 01 	lds	r27, 0x016B
     50e:	84 5d       	subi	r24, 0xD4	; 212
     510:	9e 4f       	sbci	r25, 0xFE	; 254
     512:	af 4f       	sbci	r26, 0xFF	; 255
     514:	bf 4f       	sbci	r27, 0xFF	; 255
     516:	80 93 c5 01 	sts	0x01C5, r24
     51a:	90 93 c6 01 	sts	0x01C6, r25
     51e:	a0 93 c7 01 	sts	0x01C7, r26
     522:	b0 93 c8 01 	sts	0x01C8, r27
}
     526:	cf 91       	pop	r28
     528:	df 91       	pop	r29
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	bf 91       	pop	r27
     530:	af 91       	pop	r26
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <init>:

void init(void)
{
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	00 d0       	rcall	.+0      	; 0x546 <init+0x6>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     54a:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     54c:	81 e6       	ldi	r24, 0x61	; 97
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	20 e8       	ldi	r18, 0x80	; 128
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
	CLKPR = 0;
     556:	81 e6       	ldi	r24, 0x61	; 97
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	fc 01       	movw	r30, r24
     55c:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     55e:	84 e4       	ldi	r24, 0x44	; 68
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	21 e8       	ldi	r18, 0x81	; 129
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     568:	85 e4       	ldi	r24, 0x45	; 69
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	21 e0       	ldi	r18, 0x01	; 1
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	//TCCR0B = _BV(CS01);
	//TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt

	// Setup Timer1 as sample rate generator for sidetone
	TCCR1B = _BV(WGM12) | _BV(CS10); // Set for CTC mode, Prescaler /1
     572:	81 e8       	ldi	r24, 0x81	; 129
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	29 e0       	ldi	r18, 0x09	; 9
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
	TCCR1A = 0;
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	10 82       	st	Z, r1
	OCR1A = 1000; // 16 MHz clock / 16 kHz sample rate = 1000
     584:	88 e8       	ldi	r24, 0x88	; 136
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	28 ee       	ldi	r18, 0xE8	; 232
     58a:	33 e0       	ldi	r19, 0x03	; 3
     58c:	fc 01       	movw	r30, r24
     58e:	31 83       	std	Z+1, r19	; 0x01
     590:	20 83       	st	Z, r18
	TIMSK1 = _BV(OCIE1A);
     592:	8f e6       	ldi	r24, 0x6F	; 111
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	22 e0       	ldi	r18, 0x02	; 2
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     59c:	80 eb       	ldi	r24, 0xB0	; 176
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     5a6:	81 eb       	ldi	r24, 0xB1	; 177
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	24 e0       	ldi	r18, 0x04	; 4
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     5b0:	80 e7       	ldi	r24, 0x70	; 112
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	20 e7       	ldi	r18, 0x70	; 112
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	f9 01       	movw	r30, r18
     5ba:	20 81       	ld	r18, Z
     5bc:	22 60       	ori	r18, 0x02	; 2
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     5c2:	83 eb       	ldi	r24, 0xB3	; 179
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	29 ef       	ldi	r18, 0xF9	; 249
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     5cc:	8a e7       	ldi	r24, 0x7A	; 122
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2a e7       	ldi	r18, 0x7A	; 122
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	24 68       	ori	r18, 0x84	; 132
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     5de:	8c e7       	ldi	r24, 0x7C	; 124
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	20 e6       	ldi	r18, 0x60	; 96
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     5e8:	8b e6       	ldi	r24, 0x6B	; 107
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) |_BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     5f2:	8d e6       	ldi	r24, 0x6D	; 109
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	2f e9       	ldi	r18, 0x9F	; 159
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     5fc:	8a e2       	ldi	r24, 0x2A	; 42
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2a e2       	ldi	r18, 0x2A	; 42
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	20 64       	ori	r18, 0x40	; 64
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     60e:	87 e2       	ldi	r24, 0x27	; 39
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	27 e2       	ldi	r18, 0x27	; 39
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	f9 01       	movw	r30, r18
     618:	20 81       	ld	r18, Z
     61a:	20 62       	ori	r18, 0x20	; 32
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     620:	87 e2       	ldi	r24, 0x27	; 39
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	27 e2       	ldi	r18, 0x27	; 39
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	f9 01       	movw	r30, r18
     62a:	20 81       	ld	r18, Z
     62c:	20 61       	ori	r18, 0x10	; 16
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     632:	87 e2       	ldi	r24, 0x27	; 39
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	27 e2       	ldi	r18, 0x27	; 39
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f9 01       	movw	r30, r18
     63c:	20 81       	ld	r18, Z
     63e:	2d 7f       	andi	r18, 0xFD	; 253
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     644:	88 e2       	ldi	r24, 0x28	; 40
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	28 e2       	ldi	r18, 0x28	; 40
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	2d 7f       	andi	r18, 0xFD	; 253
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     656:	8a e2       	ldi	r24, 0x2A	; 42
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	2a e2       	ldi	r18, 0x2A	; 42
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	f9 01       	movw	r30, r18
     660:	20 81       	ld	r18, Z
     662:	27 7f       	andi	r18, 0xF7	; 247
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     668:	8b e2       	ldi	r24, 0x2B	; 43
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	2b e2       	ldi	r18, 0x2B	; 43
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	28 60       	ori	r18, 0x08	; 8
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     67a:	8a e2       	ldi	r24, 0x2A	; 42
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	2a e2       	ldi	r18, 0x2A	; 42
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	2f 7e       	andi	r18, 0xEF	; 239
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     68c:	8b e2       	ldi	r24, 0x2B	; 43
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	2b e2       	ldi	r18, 0x2B	; 43
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	20 61       	ori	r18, 0x10	; 16
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     69e:	8a e2       	ldi	r24, 0x2A	; 42
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	2a e2       	ldi	r18, 0x2A	; 42
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	20 81       	ld	r18, Z
     6aa:	2b 7f       	andi	r18, 0xFB	; 251
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     6b0:	8b e2       	ldi	r24, 0x2B	; 43
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	2b e2       	ldi	r18, 0x2B	; 43
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	20 81       	ld	r18, Z
     6bc:	24 60       	ori	r18, 0x04	; 4
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     6c2:	8a e2       	ldi	r24, 0x2A	; 42
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2a e2       	ldi	r18, 0x2A	; 42
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	2d 7f       	andi	r18, 0xFD	; 253
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     6d4:	8b e2       	ldi	r24, 0x2B	; 43
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	2b e2       	ldi	r18, 0x2B	; 43
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	22 60       	ori	r18, 0x02	; 2
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     6e6:	84 e2       	ldi	r24, 0x24	; 36
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	24 e2       	ldi	r18, 0x24	; 36
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	2e 7f       	andi	r18, 0xFE	; 254
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     6f8:	85 e2       	ldi	r24, 0x25	; 37
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	25 e2       	ldi	r18, 0x25	; 37
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	21 60       	ori	r18, 0x01	; 1
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     70a:	8a e2       	ldi	r24, 0x2A	; 42
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	2a e2       	ldi	r18, 0x2A	; 42
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	20 81       	ld	r18, Z
     716:	2f 77       	andi	r18, 0x7F	; 127
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     71c:	8b e2       	ldi	r24, 0x2B	; 43
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2b e2       	ldi	r18, 0x2B	; 43
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	f9 01       	movw	r30, r18
     726:	20 81       	ld	r18, Z
     728:	20 68       	ori	r18, 0x80	; 128
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     72e:	8a e2       	ldi	r24, 0x2A	; 42
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	2a e2       	ldi	r18, 0x2A	; 42
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	f9 01       	movw	r30, r18
     738:	20 81       	ld	r18, Z
     73a:	2e 7f       	andi	r18, 0xFE	; 254
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     740:	8b e2       	ldi	r24, 0x2B	; 43
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	2b e2       	ldi	r18, 0x2B	; 43
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	f9 01       	movw	r30, r18
     74a:	20 81       	ld	r18, Z
     74c:	21 60       	ori	r18, 0x01	; 1
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     752:	84 e2       	ldi	r24, 0x24	; 36
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	24 e2       	ldi	r18, 0x24	; 36
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	f9 01       	movw	r30, r18
     75c:	20 81       	ld	r18, Z
     75e:	2e 62       	ori	r18, 0x2E	; 46
     760:	fc 01       	movw	r30, r24
     762:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     764:	8c e4       	ldi	r24, 0x4C	; 76
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	29 e5       	ldi	r18, 0x59	; 89
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     76e:	8d e4       	ldi	r24, 0x4D	; 77
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	80 81       	ld	r24, Z
     776:	8a 83       	std	Y+2, r24	; 0x02
	spi_data = SPDR;
     778:	8e e4       	ldi	r24, 0x4E	; 78
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	8a 83       	std	Y+2, r24	; 0x02

	// Power saving
	power_twi_disable();
     782:	84 e6       	ldi	r24, 0x64	; 100
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	24 e6       	ldi	r18, 0x64	; 100
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	20 68       	ori	r18, 0x80	; 128
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
	power_usart0_disable();
     794:	84 e6       	ldi	r24, 0x64	; 100
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	24 e6       	ldi	r18, 0x64	; 100
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	20 81       	ld	r18, Z
     7a0:	22 60       	ori	r18, 0x02	; 2
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18

	set_sleep_mode(SLEEP_MODE_STANDBY);
     7a6:	83 e5       	ldi	r24, 0x53	; 83
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	23 e5       	ldi	r18, 0x53	; 83
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	20 81       	ld	r18, Z
     7b2:	21 7f       	andi	r18, 0xF1	; 241
     7b4:	2c 60       	ori	r18, 0x0C	; 12
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 72 01 	sts	0x0172, r24
	cur_state = IDLE;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 c0 01 	sts	0x01C0, r24
	next_state = IDLE;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 a7 01 	sts	0x01A7, r24

	timer = 0;
     7cc:	10 92 6e 01 	sts	0x016E, r1
     7d0:	10 92 6f 01 	sts	0x016F, r1
     7d4:	10 92 70 01 	sts	0x0170, r1
     7d8:	10 92 71 01 	sts	0x0171, r1

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = DDS_INIT;
     7dc:	8c e0       	ldi	r24, 0x0C	; 12
     7de:	9f e1       	ldi	r25, 0x1F	; 31
     7e0:	a1 e1       	ldi	r26, 0x11	; 17
     7e2:	b5 e0       	ldi	r27, 0x05	; 5
     7e4:	80 93 ac 01 	sts	0x01AC, r24
     7e8:	90 93 ad 01 	sts	0x01AD, r25
     7ec:	a0 93 ae 01 	sts	0x01AE, r26
     7f0:	b0 93 af 01 	sts	0x01AF, r27
	tune_freq = FREQ_INIT;
     7f4:	80 ee       	ldi	r24, 0xE0	; 224
     7f6:	99 e8       	ldi	r25, 0x89	; 137
     7f8:	a6 ed       	ldi	r26, 0xD6	; 214
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	80 93 da 01 	sts	0x01DA, r24
     800:	90 93 db 01 	sts	0x01DB, r25
     804:	a0 93 dc 01 	sts	0x01DC, r26
     808:	b0 93 dd 01 	sts	0x01DD, r27
	tune_dds(dds_freq_word, REG_0, TRUE);
     80c:	80 91 ac 01 	lds	r24, 0x01AC
     810:	90 91 ad 01 	lds	r25, 0x01AD
     814:	a0 91 ae 01 	lds	r26, 0x01AE
     818:	b0 91 af 01 	lds	r27, 0x01AF
     81c:	bc 01       	movw	r22, r24
     81e:	cd 01       	movw	r24, r26
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
	tune_dds(dds_freq_word, REG_1, FALSE);
     828:	80 91 ac 01 	lds	r24, 0x01AC
     82c:	90 91 ad 01 	lds	r25, 0x01AD
     830:	a0 91 ae 01 	lds	r26, 0x01AE
     834:	b0 91 af 01 	lds	r27, 0x01AF
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>

	st_freq = ST_DEFAULT;
     844:	84 ef       	ldi	r24, 0xF4	; 244
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	90 93 bb 01 	sts	0x01BB, r25
     84c:	80 93 ba 01 	sts	0x01BA, r24
	set_st_freq(st_freq);
     850:	80 91 ba 01 	lds	r24, 0x01BA
     854:	90 91 bb 01 	lds	r25, 0x01BB
     858:	cc 01       	movw	r24, r24
     85a:	a0 e0       	ldi	r26, 0x00	; 0
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	bc 01       	movw	r22, r24
     860:	cd 01       	movw	r24, r26
     862:	0e 94 a5 0c 	call	0x194a	; 0x194a <set_st_freq>

	inc_tune_state = OFF;
     866:	10 92 ca 01 	sts	0x01CA, r1
	tune_reg = REG_0;
     86a:	10 92 c9 01 	sts	0x01C9, r1

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
     86e:	19 82       	std	Y+1, r1	; 0x01
     870:	06 c0       	rjmp	.+12     	; 0x87e <init+0x33e>
		debounce(FALSE);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>

	inc_tune_state = OFF;
	tune_reg = REG_0;

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	8f 30       	cpi	r24, 0x0F	; 15
     882:	b8 f3       	brcs	.-18     	; 0x872 <init+0x332>
		debounce(FALSE);

	eeprom_busy_wait();
     884:	8f e3       	ldi	r24, 0x3F	; 63
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	82 70       	andi	r24, 0x02	; 2
     892:	90 70       	andi	r25, 0x00	; 0
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	b1 f7       	brne	.-20     	; 0x884 <init+0x344>
	wpm = eeprom_read_byte(&ee_wpm);
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__eerd_byte_m168>
     8a0:	80 93 de 01 	sts	0x01DE, r24
	set_wpm(wpm);
     8a4:	80 91 de 01 	lds	r24, 0x01DE
     8a8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>

	eeprom_busy_wait();
     8ac:	8f e3       	ldi	r24, 0x3F	; 63
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	fc 01       	movw	r30, r24
     8b2:	80 81       	ld	r24, Z
     8b4:	88 2f       	mov	r24, r24
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	82 70       	andi	r24, 0x02	; 2
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	b1 f7       	brne	.-20     	; 0x8ac <init+0x36c>
	if(eeprom_read_byte(&ee_keyer) == FALSE)
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <__eerd_byte_m168>
     8c8:	88 23       	and	r24, r24
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <init+0x394>
		cur_mode = SK;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 a2 01 	sts	0x01A2, r24
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <init+0x398>
	else
		cur_mode = KEYER;
     8d4:	10 92 a2 01 	sts	0x01A2, r1

	if((dah_active == TRUE) && (dit_active == FALSE))
     8d8:	80 91 bc 01 	lds	r24, 0x01BC
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	39 f4       	brne	.+14     	; 0x8ee <init+0x3ae>
     8e0:	80 91 d4 01 	lds	r24, 0x01D4
     8e4:	88 23       	and	r24, r24
     8e6:	19 f4       	brne	.+6      	; 0x8ee <init+0x3ae>
		cur_mode = SK;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 a2 01 	sts	0x01A2, r24

	// Enable interrupts
	sei();
     8ee:	78 94       	sei
}
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	0f 92       	push	r0
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 1 ms per timer tick
	dit_length = (1200 / new_wpm);
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	80 eb       	ldi	r24, 0xB0	; 176
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	b9 01       	movw	r22, r18
     912:	0e 94 0f 1a 	call	0x341e	; 0x341e <__divmodhi4>
     916:	9b 01       	movw	r18, r22
     918:	c9 01       	movw	r24, r18
     91a:	90 93 74 01 	sts	0x0174, r25
     91e:	80 93 73 01 	sts	0x0173, r24
}
     922:	0f 90       	pop	r0
     924:	cf 91       	pop	r28
     926:	df 91       	pop	r29
     928:	08 95       	ret

0000092a <debounce>:

void debounce(enum BOOL flush)
{
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	0f 92       	push	r0
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	41 f5       	brne	.+80     	; 0x98c <debounce+0x62>
	{
		dit_on_count = 0;
     93c:	10 92 50 01 	sts	0x0150, r1
     940:	10 92 4f 01 	sts	0x014F, r1
		dah_on_count = 0;
     944:	10 92 52 01 	sts	0x0152, r1
     948:	10 92 51 01 	sts	0x0151, r1
		dit_off_count = 0;
     94c:	10 92 54 01 	sts	0x0154, r1
     950:	10 92 53 01 	sts	0x0153, r1
		dah_off_count = 0;
     954:	10 92 56 01 	sts	0x0156, r1
     958:	10 92 55 01 	sts	0x0155, r1
		cmd_on_count = 0;
     95c:	10 92 58 01 	sts	0x0158, r1
     960:	10 92 57 01 	sts	0x0157, r1
		msg_on_count = 0;
     964:	10 92 5a 01 	sts	0x015A, r1
     968:	10 92 59 01 	sts	0x0159, r1
		both_on_count = 0;
     96c:	10 92 5c 01 	sts	0x015C, r1
     970:	10 92 5b 01 	sts	0x015B, r1
		enc_on_count = 0;
     974:	10 92 5e 01 	sts	0x015E, r1
     978:	10 92 5d 01 	sts	0x015D, r1
		enca_on_count = 0;
     97c:	10 92 60 01 	sts	0x0160, r1
     980:	10 92 5f 01 	sts	0x015F, r1
		encb_on_count = 0;
     984:	10 92 62 01 	sts	0x0162, r1
     988:	10 92 61 01 	sts	0x0161, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     98c:	89 e2       	ldi	r24, 0x29	; 41
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	fc 01       	movw	r30, r24
     992:	80 81       	ld	r24, Z
     994:	88 2f       	mov	r24, r24
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	88 70       	andi	r24, 0x08	; 8
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	a9 f4       	brne	.+42     	; 0x9ca <debounce+0xa0>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     9a0:	80 91 4f 01 	lds	r24, 0x014F
     9a4:	90 91 50 01 	lds	r25, 0x0150
     9a8:	85 30       	cpi	r24, 0x05	; 5
     9aa:	91 05       	cpc	r25, r1
     9ac:	48 f4       	brcc	.+18     	; 0x9c0 <debounce+0x96>
			dit_on_count++;
     9ae:	80 91 4f 01 	lds	r24, 0x014F
     9b2:	90 91 50 01 	lds	r25, 0x0150
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	90 93 50 01 	sts	0x0150, r25
     9bc:	80 93 4f 01 	sts	0x014F, r24
		dit_off_count = 0;
     9c0:	10 92 54 01 	sts	0x0154, r1
     9c4:	10 92 53 01 	sts	0x0153, r1
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <debounce+0xc8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     9ca:	80 91 53 01 	lds	r24, 0x0153
     9ce:	90 91 54 01 	lds	r25, 0x0154
     9d2:	85 30       	cpi	r24, 0x05	; 5
     9d4:	91 05       	cpc	r25, r1
     9d6:	48 f4       	brcc	.+18     	; 0x9ea <debounce+0xc0>
			dit_off_count++;
     9d8:	80 91 53 01 	lds	r24, 0x0153
     9dc:	90 91 54 01 	lds	r25, 0x0154
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	90 93 54 01 	sts	0x0154, r25
     9e6:	80 93 53 01 	sts	0x0153, r24
		dit_on_count = 0;
     9ea:	10 92 50 01 	sts	0x0150, r1
     9ee:	10 92 4f 01 	sts	0x014F, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     9f2:	89 e2       	ldi	r24, 0x29	; 41
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	fc 01       	movw	r30, r24
     9f8:	80 81       	ld	r24, Z
     9fa:	88 2f       	mov	r24, r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	80 71       	andi	r24, 0x10	; 16
     a00:	90 70       	andi	r25, 0x00	; 0
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a9 f4       	brne	.+42     	; 0xa30 <debounce+0x106>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     a06:	80 91 51 01 	lds	r24, 0x0151
     a0a:	90 91 52 01 	lds	r25, 0x0152
     a0e:	85 30       	cpi	r24, 0x05	; 5
     a10:	91 05       	cpc	r25, r1
     a12:	48 f4       	brcc	.+18     	; 0xa26 <debounce+0xfc>
			dah_on_count++;
     a14:	80 91 51 01 	lds	r24, 0x0151
     a18:	90 91 52 01 	lds	r25, 0x0152
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	90 93 52 01 	sts	0x0152, r25
     a22:	80 93 51 01 	sts	0x0151, r24
		dah_off_count = 0;
     a26:	10 92 56 01 	sts	0x0156, r1
     a2a:	10 92 55 01 	sts	0x0155, r1
     a2e:	14 c0       	rjmp	.+40     	; 0xa58 <debounce+0x12e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     a30:	80 91 55 01 	lds	r24, 0x0155
     a34:	90 91 56 01 	lds	r25, 0x0156
     a38:	85 30       	cpi	r24, 0x05	; 5
     a3a:	91 05       	cpc	r25, r1
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <debounce+0x126>
			dah_off_count++;
     a3e:	80 91 55 01 	lds	r24, 0x0155
     a42:	90 91 56 01 	lds	r25, 0x0156
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	90 93 56 01 	sts	0x0156, r25
     a4c:	80 93 55 01 	sts	0x0155, r24
		dah_on_count = 0;
     a50:	10 92 52 01 	sts	0x0152, r1
     a54:	10 92 51 01 	sts	0x0151, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     a58:	80 91 4f 01 	lds	r24, 0x014F
     a5c:	90 91 50 01 	lds	r25, 0x0150
     a60:	85 30       	cpi	r24, 0x05	; 5
     a62:	91 05       	cpc	r25, r1
     a64:	18 f0       	brcs	.+6      	; 0xa6c <debounce+0x142>
		dit_active = TRUE;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 d4 01 	sts	0x01D4, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     a6c:	80 91 53 01 	lds	r24, 0x0153
     a70:	90 91 54 01 	lds	r25, 0x0154
     a74:	85 30       	cpi	r24, 0x05	; 5
     a76:	91 05       	cpc	r25, r1
     a78:	10 f0       	brcs	.+4      	; 0xa7e <debounce+0x154>
		dit_active = FALSE;
     a7a:	10 92 d4 01 	sts	0x01D4, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     a7e:	80 91 51 01 	lds	r24, 0x0151
     a82:	90 91 52 01 	lds	r25, 0x0152
     a86:	85 30       	cpi	r24, 0x05	; 5
     a88:	91 05       	cpc	r25, r1
     a8a:	18 f0       	brcs	.+6      	; 0xa92 <debounce+0x168>
		dah_active = TRUE;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 bc 01 	sts	0x01BC, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     a92:	80 91 55 01 	lds	r24, 0x0155
     a96:	90 91 56 01 	lds	r25, 0x0156
     a9a:	85 30       	cpi	r24, 0x05	; 5
     a9c:	91 05       	cpc	r25, r1
     a9e:	10 f0       	brcs	.+4      	; 0xaa4 <debounce+0x17a>
		dah_active = FALSE;
     aa0:	10 92 bc 01 	sts	0x01BC, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     aa4:	89 e2       	ldi	r24, 0x29	; 41
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	80 81       	ld	r24, Z
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	84 70       	andi	r24, 0x04	; 4
     ab2:	90 70       	andi	r25, 0x00	; 0
     ab4:	00 97       	sbiw	r24, 0x00	; 0
     ab6:	a1 f4       	brne	.+40     	; 0xae0 <debounce+0x1b6>
     ab8:	89 e2       	ldi	r24, 0x29	; 41
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	82 70       	andi	r24, 0x02	; 2
     ac6:	90 70       	andi	r25, 0x00	; 0
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	51 f4       	brne	.+20     	; 0xae0 <debounce+0x1b6>
		both_on_count++;
     acc:	80 91 5b 01 	lds	r24, 0x015B
     ad0:	90 91 5c 01 	lds	r25, 0x015C
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	90 93 5c 01 	sts	0x015C, r25
     ada:	80 93 5b 01 	sts	0x015B, r24
     ade:	25 c0       	rjmp	.+74     	; 0xb2a <debounce+0x200>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     ae0:	80 91 5b 01 	lds	r24, 0x015B
     ae4:	90 91 5c 01 	lds	r25, 0x015C
     ae8:	85 30       	cpi	r24, 0x05	; 5
     aea:	91 05       	cpc	r25, r1
     aec:	60 f0       	brcs	.+24     	; 0xb06 <debounce+0x1dc>
     aee:	80 91 5b 01 	lds	r24, 0x015B
     af2:	90 91 5c 01 	lds	r25, 0x015C
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	84 3f       	cpi	r24, 0xF4	; 244
     afa:	9f 07       	cpc	r25, r31
     afc:	20 f4       	brcc	.+8      	; 0xb06 <debounce+0x1dc>
			both_btn = PRESS;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 be 01 	sts	0x01BE, r24
     b04:	0e c0       	rjmp	.+28     	; 0xb22 <debounce+0x1f8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     b06:	80 91 5b 01 	lds	r24, 0x015B
     b0a:	90 91 5c 01 	lds	r25, 0x015C
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	84 3f       	cpi	r24, 0xF4	; 244
     b12:	92 07       	cpc	r25, r18
     b14:	20 f0       	brcs	.+8      	; 0xb1e <debounce+0x1f4>
			both_btn = HOLD;
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	80 93 be 01 	sts	0x01BE, r24
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <debounce+0x1f8>
		else
			both_btn = OFF;
     b1e:	10 92 be 01 	sts	0x01BE, r1

		both_on_count = 0;
     b22:	10 92 5c 01 	sts	0x015C, r1
     b26:	10 92 5b 01 	sts	0x015B, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     b2a:	89 e2       	ldi	r24, 0x29	; 41
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	fc 01       	movw	r30, r24
     b30:	80 81       	ld	r24, Z
     b32:	88 2f       	mov	r24, r24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	84 70       	andi	r24, 0x04	; 4
     b38:	90 70       	andi	r25, 0x00	; 0
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	51 f4       	brne	.+20     	; 0xb52 <debounce+0x228>
	{
		cmd_on_count++;
     b3e:	80 91 57 01 	lds	r24, 0x0157
     b42:	90 91 58 01 	lds	r25, 0x0158
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	90 93 58 01 	sts	0x0158, r25
     b4c:	80 93 57 01 	sts	0x0157, r24
     b50:	25 c0       	rjmp	.+74     	; 0xb9c <debounce+0x272>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     b52:	80 91 57 01 	lds	r24, 0x0157
     b56:	90 91 58 01 	lds	r25, 0x0158
     b5a:	85 30       	cpi	r24, 0x05	; 5
     b5c:	91 05       	cpc	r25, r1
     b5e:	60 f0       	brcs	.+24     	; 0xb78 <debounce+0x24e>
     b60:	80 91 57 01 	lds	r24, 0x0157
     b64:	90 91 58 01 	lds	r25, 0x0158
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	84 3f       	cpi	r24, 0xF4	; 244
     b6c:	9f 07       	cpc	r25, r31
     b6e:	20 f4       	brcc	.+8      	; 0xb78 <debounce+0x24e>
			cmd_btn = PRESS;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 bf 01 	sts	0x01BF, r24
     b76:	0e c0       	rjmp	.+28     	; 0xb94 <debounce+0x26a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     b78:	80 91 57 01 	lds	r24, 0x0157
     b7c:	90 91 58 01 	lds	r25, 0x0158
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	84 3f       	cpi	r24, 0xF4	; 244
     b84:	92 07       	cpc	r25, r18
     b86:	20 f0       	brcs	.+8      	; 0xb90 <debounce+0x266>
			cmd_btn = HOLD;
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	80 93 bf 01 	sts	0x01BF, r24
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <debounce+0x26a>
		else
			cmd_btn = OFF;
     b90:	10 92 bf 01 	sts	0x01BF, r1

		cmd_on_count = 0;
     b94:	10 92 58 01 	sts	0x0158, r1
     b98:	10 92 57 01 	sts	0x0157, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     b9c:	89 e2       	ldi	r24, 0x29	; 41
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	82 70       	andi	r24, 0x02	; 2
     baa:	90 70       	andi	r25, 0x00	; 0
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	51 f4       	brne	.+20     	; 0xbc4 <debounce+0x29a>
		msg_on_count++;
     bb0:	80 91 59 01 	lds	r24, 0x0159
     bb4:	90 91 5a 01 	lds	r25, 0x015A
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	90 93 5a 01 	sts	0x015A, r25
     bbe:	80 93 59 01 	sts	0x0159, r24
     bc2:	25 c0       	rjmp	.+74     	; 0xc0e <debounce+0x2e4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     bc4:	80 91 59 01 	lds	r24, 0x0159
     bc8:	90 91 5a 01 	lds	r25, 0x015A
     bcc:	85 30       	cpi	r24, 0x05	; 5
     bce:	91 05       	cpc	r25, r1
     bd0:	60 f0       	brcs	.+24     	; 0xbea <debounce+0x2c0>
     bd2:	80 91 59 01 	lds	r24, 0x0159
     bd6:	90 91 5a 01 	lds	r25, 0x015A
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	84 3f       	cpi	r24, 0xF4	; 244
     bde:	9f 07       	cpc	r25, r31
     be0:	20 f4       	brcc	.+8      	; 0xbea <debounce+0x2c0>
			msg_btn = PRESS;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 bd 01 	sts	0x01BD, r24
     be8:	0e c0       	rjmp	.+28     	; 0xc06 <debounce+0x2dc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     bea:	80 91 59 01 	lds	r24, 0x0159
     bee:	90 91 5a 01 	lds	r25, 0x015A
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	84 3f       	cpi	r24, 0xF4	; 244
     bf6:	92 07       	cpc	r25, r18
     bf8:	20 f0       	brcs	.+8      	; 0xc02 <debounce+0x2d8>
			msg_btn = HOLD;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	80 93 bd 01 	sts	0x01BD, r24
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <debounce+0x2dc>
		else
			msg_btn = OFF;
     c02:	10 92 bd 01 	sts	0x01BD, r1

		msg_on_count = 0;
     c06:	10 92 5a 01 	sts	0x015A, r1
     c0a:	10 92 59 01 	sts	0x0159, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     c0e:	89 e2       	ldi	r24, 0x29	; 41
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	81 70       	andi	r24, 0x01	; 1
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	51 f4       	brne	.+20     	; 0xc36 <debounce+0x30c>
		enc_on_count++;
     c22:	80 91 5d 01 	lds	r24, 0x015D
     c26:	90 91 5e 01 	lds	r25, 0x015E
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	90 93 5e 01 	sts	0x015E, r25
     c30:	80 93 5d 01 	sts	0x015D, r24
     c34:	25 c0       	rjmp	.+74     	; 0xc80 <debounce+0x356>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     c36:	80 91 5d 01 	lds	r24, 0x015D
     c3a:	90 91 5e 01 	lds	r25, 0x015E
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	91 05       	cpc	r25, r1
     c42:	60 f0       	brcs	.+24     	; 0xc5c <debounce+0x332>
     c44:	80 91 5d 01 	lds	r24, 0x015D
     c48:	90 91 5e 01 	lds	r25, 0x015E
     c4c:	f1 e0       	ldi	r31, 0x01	; 1
     c4e:	84 3f       	cpi	r24, 0xF4	; 244
     c50:	9f 07       	cpc	r25, r31
     c52:	20 f4       	brcc	.+8      	; 0xc5c <debounce+0x332>
			enc_btn = PRESS;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 cb 01 	sts	0x01CB, r24
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <debounce+0x34e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     c5c:	80 91 5d 01 	lds	r24, 0x015D
     c60:	90 91 5e 01 	lds	r25, 0x015E
     c64:	21 e0       	ldi	r18, 0x01	; 1
     c66:	84 3f       	cpi	r24, 0xF4	; 244
     c68:	92 07       	cpc	r25, r18
     c6a:	20 f0       	brcs	.+8      	; 0xc74 <debounce+0x34a>
			enc_btn = HOLD;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	80 93 cb 01 	sts	0x01CB, r24
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <debounce+0x34e>
		else
			enc_btn = OFF;
     c74:	10 92 cb 01 	sts	0x01CB, r1

		enc_on_count = 0;
     c78:	10 92 5e 01 	sts	0x015E, r1
     c7c:	10 92 5d 01 	sts	0x015D, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     c80:	83 e2       	ldi	r24, 0x23	; 35
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	81 70       	andi	r24, 0x01	; 1
     c8e:	90 70       	andi	r25, 0x00	; 0
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	a9 f4       	brne	.+42     	; 0xcbe <debounce+0x394>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     c94:	80 91 5f 01 	lds	r24, 0x015F
     c98:	90 91 60 01 	lds	r25, 0x0160
     c9c:	85 30       	cpi	r24, 0x05	; 5
     c9e:	91 05       	cpc	r25, r1
     ca0:	48 f4       	brcc	.+18     	; 0xcb4 <debounce+0x38a>
			enca_on_count++;
     ca2:	80 91 5f 01 	lds	r24, 0x015F
     ca6:	90 91 60 01 	lds	r25, 0x0160
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	90 93 60 01 	sts	0x0160, r25
     cb0:	80 93 5f 01 	sts	0x015F, r24
		enca_off_count = 0;
     cb4:	10 92 64 01 	sts	0x0164, r1
     cb8:	10 92 63 01 	sts	0x0163, r1
     cbc:	14 c0       	rjmp	.+40     	; 0xce6 <debounce+0x3bc>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     cbe:	80 91 63 01 	lds	r24, 0x0163
     cc2:	90 91 64 01 	lds	r25, 0x0164
     cc6:	85 30       	cpi	r24, 0x05	; 5
     cc8:	91 05       	cpc	r25, r1
     cca:	48 f4       	brcc	.+18     	; 0xcde <debounce+0x3b4>
			enca_off_count++;
     ccc:	80 91 63 01 	lds	r24, 0x0163
     cd0:	90 91 64 01 	lds	r25, 0x0164
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	90 93 64 01 	sts	0x0164, r25
     cda:	80 93 63 01 	sts	0x0163, r24
		enca_on_count = 0;
     cde:	10 92 60 01 	sts	0x0160, r1
     ce2:	10 92 5f 01 	sts	0x015F, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     ce6:	89 e2       	ldi	r24, 0x29	; 41
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	88 23       	and	r24, r24
     cf0:	ac f0       	brlt	.+42     	; 0xd1c <debounce+0x3f2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     cf2:	80 91 61 01 	lds	r24, 0x0161
     cf6:	90 91 62 01 	lds	r25, 0x0162
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	91 05       	cpc	r25, r1
     cfe:	48 f4       	brcc	.+18     	; 0xd12 <debounce+0x3e8>
			encb_on_count++;
     d00:	80 91 61 01 	lds	r24, 0x0161
     d04:	90 91 62 01 	lds	r25, 0x0162
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	90 93 62 01 	sts	0x0162, r25
     d0e:	80 93 61 01 	sts	0x0161, r24
		encb_off_count = 0;
     d12:	10 92 66 01 	sts	0x0166, r1
     d16:	10 92 65 01 	sts	0x0165, r1
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <debounce+0x41a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     d1c:	80 91 65 01 	lds	r24, 0x0165
     d20:	90 91 66 01 	lds	r25, 0x0166
     d24:	85 30       	cpi	r24, 0x05	; 5
     d26:	91 05       	cpc	r25, r1
     d28:	48 f4       	brcc	.+18     	; 0xd3c <debounce+0x412>
			encb_off_count++;
     d2a:	80 91 65 01 	lds	r24, 0x0165
     d2e:	90 91 66 01 	lds	r25, 0x0166
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	90 93 66 01 	sts	0x0166, r25
     d38:	80 93 65 01 	sts	0x0165, r24
		encb_on_count = 0;
     d3c:	10 92 62 01 	sts	0x0162, r1
     d40:	10 92 61 01 	sts	0x0161, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     d44:	80 91 5f 01 	lds	r24, 0x015F
     d48:	90 91 60 01 	lds	r25, 0x0160
     d4c:	85 30       	cpi	r24, 0x05	; 5
     d4e:	91 05       	cpc	r25, r1
     d50:	18 f0       	brcs	.+6      	; 0xd58 <debounce+0x42e>
		enc_a = TRUE;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 67 01 	sts	0x0167, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     d58:	80 91 63 01 	lds	r24, 0x0163
     d5c:	90 91 64 01 	lds	r25, 0x0164
     d60:	85 30       	cpi	r24, 0x05	; 5
     d62:	91 05       	cpc	r25, r1
     d64:	10 f0       	brcs	.+4      	; 0xd6a <debounce+0x440>
		enc_a = FALSE;
     d66:	10 92 67 01 	sts	0x0167, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     d6a:	80 91 61 01 	lds	r24, 0x0161
     d6e:	90 91 62 01 	lds	r25, 0x0162
     d72:	85 30       	cpi	r24, 0x05	; 5
     d74:	91 05       	cpc	r25, r1
     d76:	18 f0       	brcs	.+6      	; 0xd7e <debounce+0x454>
		enc_b = TRUE;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 ed 01 	sts	0x01ED, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     d7e:	80 91 65 01 	lds	r24, 0x0165
     d82:	90 91 66 01 	lds	r25, 0x0166
     d86:	85 30       	cpi	r24, 0x05	; 5
     d88:	91 05       	cpc	r25, r1
     d8a:	10 f0       	brcs	.+4      	; 0xd90 <debounce+0x466>
		enc_b = FALSE;
     d8c:	10 92 ed 01 	sts	0x01ED, r1
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
		allow_sleep = FALSE;
	else
		allow_sleep = TRUE;
		*/
}
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <announce>:

void announce(char * msg, uint16_t freq, uint8_t speed)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <announce+0x6>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <announce+0x8>
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	7c 83       	std	Y+4, r23	; 0x04
     dac:	6b 83       	std	Y+3, r22	; 0x03
     dae:	4d 83       	std	Y+5, r20	; 0x05
	// Convert to uppercase
	strupr(msg);
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	0e 94 8e 1b 	call	0x371c	; 0x371c <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     db8:	80 91 e7 01 	lds	r24, 0x01E7
     dbc:	90 91 e8 01 	lds	r25, 0x01E8
     dc0:	29 81       	ldd	r18, Y+1	; 0x01
     dc2:	3a 81       	ldd	r19, Y+2	; 0x02
     dc4:	b9 01       	movw	r22, r18
     dc6:	0e 94 87 1b 	call	0x370e	; 0x370e <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     dca:	80 91 c0 01 	lds	r24, 0x01C0
     dce:	80 93 72 01 	sts	0x0172, r24
	prev_state_end = cur_state_end;
     dd2:	80 91 cc 01 	lds	r24, 0x01CC
     dd6:	90 91 cd 01 	lds	r25, 0x01CD
     dda:	a0 91 ce 01 	lds	r26, 0x01CE
     dde:	b0 91 cf 01 	lds	r27, 0x01CF
     de2:	80 93 b4 01 	sts	0x01B4, r24
     de6:	90 93 b5 01 	sts	0x01B5, r25
     dea:	a0 93 b6 01 	sts	0x01B6, r26
     dee:	b0 93 b7 01 	sts	0x01B7, r27
	prev_mode = cur_mode;
     df2:	80 91 a2 01 	lds	r24, 0x01A2
     df6:	80 93 b8 01 	sts	0x01B8, r24
	prev_st_freq = st_freq;
     dfa:	80 91 ba 01 	lds	r24, 0x01BA
     dfe:	90 91 bb 01 	lds	r25, 0x01BB
     e02:	90 93 c4 01 	sts	0x01C4, r25
     e06:	80 93 c3 01 	sts	0x01C3, r24
	st_freq = freq;
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	90 93 bb 01 	sts	0x01BB, r25
     e12:	80 93 ba 01 	sts	0x01BA, r24
	prev_wpm = wpm;
     e16:	80 91 de 01 	lds	r24, 0x01DE
     e1a:	80 93 ee 01 	sts	0x01EE, r24
	wpm = speed;
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	80 93 de 01 	sts	0x01DE, r24

	set_st_freq(st_freq);
     e24:	80 91 ba 01 	lds	r24, 0x01BA
     e28:	90 91 bb 01 	lds	r25, 0x01BB
     e2c:	cc 01       	movw	r24, r24
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 a5 0c 	call	0x194a	; 0x194a <set_st_freq>
	set_wpm(wpm);
     e3a:	80 91 de 01 	lds	r24, 0x01DE
     e3e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>

	// Set into announce mode
	cur_state = IDLE;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 c0 01 	sts	0x01C0, r24
	cur_mode = ANNOUNCE;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	80 93 a2 01 	sts	0x01A2, r24
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <read_voltage>:

void read_voltage(void)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <read_voltage+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <read_voltage+0x8>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <read_voltage+0xa>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     e6c:	8a e0       	ldi	r24, 0x0A	; 10
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 44 1a 	call	0x3488	; 0x3488 <malloc>
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     e78:	8a e7       	ldi	r24, 0x7A	; 122
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	2a e7       	ldi	r18, 0x7A	; 122
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	d9 01       	movw	r26, r18
     e82:	2c 91       	ld	r18, X
     e84:	20 64       	ori	r18, 0x40	; 64
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     e8a:	8a e7       	ldi	r24, 0x7A	; 122
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	dc 01       	movw	r26, r24
     e90:	8c 91       	ld	r24, X
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	80 74       	andi	r24, 0x40	; 64
     e98:	90 70       	andi	r25, 0x00	; 0
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	b1 f7       	brne	.-20     	; 0xe8a <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     e9e:	89 e7       	ldi	r24, 0x79	; 121
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 16.1 V
	// We'll use fixed point numbers, so full scale is 161 * 0.1 V
	vcc = (vcc_mon * 161) / 256;
     eae:	4b 81       	ldd	r20, Y+3	; 0x03
     eb0:	5c 81       	ldd	r21, Y+4	; 0x04
     eb2:	21 ea       	ldi	r18, 0xA1	; 161
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	42 9f       	mul	r20, r18
     eb8:	c0 01       	movw	r24, r0
     eba:	43 9f       	mul	r20, r19
     ebc:	90 0d       	add	r25, r0
     ebe:	52 9f       	mul	r21, r18
     ec0:	90 0d       	add	r25, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	89 2f       	mov	r24, r25
     ec6:	99 27       	eor	r25, r25
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	2a e0       	ldi	r18, 0x0A	; 10
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	b9 01       	movw	r22, r18
     ed6:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__udivmodhi4>
     eda:	9b 01       	movw	r18, r22
     edc:	f9 01       	movw	r30, r18
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	2a e0       	ldi	r18, 0x0A	; 10
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	b9 01       	movw	r22, r18
     ee8:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__udivmodhi4>
     eec:	9c 01       	movw	r18, r24
     eee:	8d b7       	in	r24, 0x3d	; 61
     ef0:	9e b7       	in	r25, 0x3e	; 62
     ef2:	08 97       	sbiw	r24, 0x08	; 8
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	9e bf       	out	0x3e, r25	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	8d bf       	out	0x3d, r24	; 61
     efe:	8d b7       	in	r24, 0x3d	; 61
     f00:	9e b7       	in	r25, 0x3e	; 62
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	49 81       	ldd	r20, Y+1	; 0x01
     f06:	5a 81       	ldd	r21, Y+2	; 0x02
     f08:	dc 01       	movw	r26, r24
     f0a:	4d 93       	st	X+, r20
     f0c:	5c 93       	st	X, r21
     f0e:	4b e0       	ldi	r20, 0x0B	; 11
     f10:	51 e0       	ldi	r21, 0x01	; 1
     f12:	dc 01       	movw	r26, r24
     f14:	13 96       	adiw	r26, 0x03	; 3
     f16:	5c 93       	st	X, r21
     f18:	4e 93       	st	-X, r20
     f1a:	12 97       	sbiw	r26, 0x02	; 2
     f1c:	dc 01       	movw	r26, r24
     f1e:	15 96       	adiw	r26, 0x05	; 5
     f20:	fc 93       	st	X, r31
     f22:	ee 93       	st	-X, r30
     f24:	14 97       	sbiw	r26, 0x04	; 4
     f26:	fc 01       	movw	r30, r24
     f28:	37 83       	std	Z+7, r19	; 0x07
     f2a:	26 83       	std	Z+6, r18	; 0x06
     f2c:	0e 94 98 1b 	call	0x3730	; 0x3730 <sprintf>
     f30:	8d b7       	in	r24, 0x3d	; 61
     f32:	9e b7       	in	r25, 0x3e	; 62
     f34:	08 96       	adiw	r24, 0x08	; 8
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	9e bf       	out	0x3e, r25	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq, wpm);
     f40:	20 91 ba 01 	lds	r18, 0x01BA
     f44:	30 91 bb 01 	lds	r19, 0x01BB
     f48:	40 91 de 01 	lds	r20, 0x01DE
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	b9 01       	movw	r22, r18
     f52:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>

	free(vcc_out);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	0e 94 de 1a 	call	0x35bc	; 0x35bc <free>
}
     f5e:	26 96       	adiw	r28, 0x06	; 6
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <count_frequency>:

void count_frequency(void)
{
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <count_frequency+0xa>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     f7e:	8f e0       	ldi	r24, 0x0F	; 15
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 44 1a 	call	0x3488	; 0x3488 <malloc>
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     f8a:	80 91 da 01 	lds	r24, 0x01DA
     f8e:	90 91 db 01 	lds	r25, 0x01DB
     f92:	a0 91 dc 01 	lds	r26, 0x01DC
     f96:	b0 91 dd 01 	lds	r27, 0x01DD
     f9a:	28 ee       	ldi	r18, 0xE8	; 232
     f9c:	33 e0       	ldi	r19, 0x03	; 3
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 22 1a 	call	0x3444	; 0x3444 <__udivmodsi4>
     faa:	da 01       	movw	r26, r20
     fac:	c9 01       	movw	r24, r18
     fae:	24 e6       	ldi	r18, 0x64	; 100
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	bc 01       	movw	r22, r24
     fb8:	cd 01       	movw	r24, r26
     fba:	0e 94 22 1a 	call	0x3444	; 0x3444 <__udivmodsi4>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	8c 01       	movw	r16, r24
     fc4:	80 91 da 01 	lds	r24, 0x01DA
     fc8:	90 91 db 01 	lds	r25, 0x01DB
     fcc:	a0 91 dc 01 	lds	r26, 0x01DC
     fd0:	b0 91 dd 01 	lds	r27, 0x01DD
     fd4:	28 ee       	ldi	r18, 0xE8	; 232
     fd6:	33 e0       	ldi	r19, 0x03	; 3
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	0e 94 22 1a 	call	0x3444	; 0x3444 <__udivmodsi4>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	2a e0       	ldi	r18, 0x0A	; 10
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 22 1a 	call	0x3444	; 0x3444 <__udivmodsi4>
     ff8:	da 01       	movw	r26, r20
     ffa:	c9 01       	movw	r24, r18
     ffc:	9c 01       	movw	r18, r24
     ffe:	8d b7       	in	r24, 0x3d	; 61
    1000:	9e b7       	in	r25, 0x3e	; 62
    1002:	08 97       	sbiw	r24, 0x08	; 8
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	9e bf       	out	0x3e, r25	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	8d bf       	out	0x3d, r24	; 61
    100e:	8d b7       	in	r24, 0x3d	; 61
    1010:	9e b7       	in	r25, 0x3e	; 62
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	49 81       	ldd	r20, Y+1	; 0x01
    1016:	5a 81       	ldd	r21, Y+2	; 0x02
    1018:	fc 01       	movw	r30, r24
    101a:	51 83       	std	Z+1, r21	; 0x01
    101c:	40 83       	st	Z, r20
    101e:	41 e1       	ldi	r20, 0x11	; 17
    1020:	51 e0       	ldi	r21, 0x01	; 1
    1022:	fc 01       	movw	r30, r24
    1024:	53 83       	std	Z+3, r21	; 0x03
    1026:	42 83       	std	Z+2, r20	; 0x02
    1028:	fc 01       	movw	r30, r24
    102a:	15 83       	std	Z+5, r17	; 0x05
    102c:	04 83       	std	Z+4, r16	; 0x04
    102e:	fc 01       	movw	r30, r24
    1030:	37 83       	std	Z+7, r19	; 0x07
    1032:	26 83       	std	Z+6, r18	; 0x06
    1034:	0e 94 98 1b 	call	0x3730	; 0x3730 <sprintf>
    1038:	8d b7       	in	r24, 0x3d	; 61
    103a:	9e b7       	in	r25, 0x3e	; 62
    103c:	08 96       	adiw	r24, 0x08	; 8
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	9e bf       	out	0x3e, r25	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out, st_freq, wpm);
    1048:	20 91 ba 01 	lds	r18, 0x01BA
    104c:	30 91 bb 01 	lds	r19, 0x01BB
    1050:	40 91 de 01 	lds	r20, 0x01DE
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	b9 01       	movw	r22, r18
    105a:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>

	free(freq_out);
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	0e 94 de 1a 	call	0x35bc	; 0x35bc <free>
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <poll_buttons>:

void poll_buttons(void)
{
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	0f 92       	push	r0
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
    1086:	80 91 be 01 	lds	r24, 0x01BE
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	f9 f4       	brne	.+62     	; 0x10cc <poll_buttons+0x58>
	{
		cur_state = IDLE;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 c0 01 	sts	0x01C0, r24
		prev_mode = cur_mode;
    1094:	80 91 a2 01 	lds	r24, 0x01A2
    1098:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = TUNE;
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	80 93 a2 01 	sts	0x01A2, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    10a2:	80 91 68 01 	lds	r24, 0x0168
    10a6:	90 91 69 01 	lds	r25, 0x0169
    10aa:	a0 91 6a 01 	lds	r26, 0x016A
    10ae:	b0 91 6b 01 	lds	r27, 0x016B
    10b2:	84 5d       	subi	r24, 0xD4	; 212
    10b4:	9e 4f       	sbci	r25, 0xFE	; 254
    10b6:	af 4f       	sbci	r26, 0xFF	; 255
    10b8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ba:	80 93 c5 01 	sts	0x01C5, r24
    10be:	90 93 c6 01 	sts	0x01C6, r25
    10c2:	a0 93 c7 01 	sts	0x01C7, r26
    10c6:	b0 93 c8 01 	sts	0x01C8, r27
    10ca:	72 c0       	rjmp	.+228    	; 0x11b0 <poll_buttons+0x13c>
	}
	else if(cmd_btn == PRESS)
    10cc:	80 91 bf 01 	lds	r24, 0x01BF
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	f9 f4       	brne	.+62     	; 0x1112 <poll_buttons+0x9e>
	{
		prev_mode = cur_mode;
    10d4:	80 91 a2 01 	lds	r24, 0x01A2
    10d8:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = MENU;
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	80 93 a2 01 	sts	0x01A2, r24
		cur_state = IDLE;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 c0 01 	sts	0x01C0, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    10e8:	80 91 68 01 	lds	r24, 0x0168
    10ec:	90 91 69 01 	lds	r25, 0x0169
    10f0:	a0 91 6a 01 	lds	r26, 0x016A
    10f4:	b0 91 6b 01 	lds	r27, 0x016B
    10f8:	84 5d       	subi	r24, 0xD4	; 212
    10fa:	9e 4f       	sbci	r25, 0xFE	; 254
    10fc:	af 4f       	sbci	r26, 0xFF	; 255
    10fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1100:	80 93 c5 01 	sts	0x01C5, r24
    1104:	90 93 c6 01 	sts	0x01C6, r25
    1108:	a0 93 c7 01 	sts	0x01C7, r26
    110c:	b0 93 c8 01 	sts	0x01C8, r27
    1110:	4f c0       	rjmp	.+158    	; 0x11b0 <poll_buttons+0x13c>
	}
	else if(msg_btn == PRESS)
    1112:	80 91 bd 01 	lds	r24, 0x01BD
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	b9 f4       	brne	.+46     	; 0x1148 <poll_buttons+0xd4>
	{
		count_frequency();
    111a:	0e 94 b8 07 	call	0xf70	; 0xf70 <count_frequency>
		sleep_timer = cur_timer + SLEEP_DELAY;
    111e:	80 91 68 01 	lds	r24, 0x0168
    1122:	90 91 69 01 	lds	r25, 0x0169
    1126:	a0 91 6a 01 	lds	r26, 0x016A
    112a:	b0 91 6b 01 	lds	r27, 0x016B
    112e:	84 5d       	subi	r24, 0xD4	; 212
    1130:	9e 4f       	sbci	r25, 0xFE	; 254
    1132:	af 4f       	sbci	r26, 0xFF	; 255
    1134:	bf 4f       	sbci	r27, 0xFF	; 255
    1136:	80 93 c5 01 	sts	0x01C5, r24
    113a:	90 93 c6 01 	sts	0x01C6, r25
    113e:	a0 93 c7 01 	sts	0x01C7, r26
    1142:	b0 93 c8 01 	sts	0x01C8, r27
    1146:	34 c0       	rjmp	.+104    	; 0x11b0 <poll_buttons+0x13c>
	}
	else if(msg_btn == HOLD)
    1148:	80 91 bd 01 	lds	r24, 0x01BD
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	81 f5       	brne	.+96     	; 0x11b0 <poll_buttons+0x13c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
    1150:	85 e7       	ldi	r24, 0x75	; 117
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	22 e0       	ldi	r18, 0x02	; 2
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	b9 01       	movw	r22, r18
    115a:	48 e2       	ldi	r20, 0x28	; 40
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
    1162:	80 91 e7 01 	lds	r24, 0x01E7
    1166:	90 91 e8 01 	lds	r25, 0x01E8
    116a:	25 e7       	ldi	r18, 0x75	; 117
    116c:	31 e0       	ldi	r19, 0x01	; 1
    116e:	b9 01       	movw	r22, r18
    1170:	0e 94 87 1b 	call	0x370e	; 0x370e <strcpy>
		cur_state = IDLE;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	80 93 c0 01 	sts	0x01C0, r24
		prev_mode = cur_mode;
    117a:	80 91 a2 01 	lds	r24, 0x01A2
    117e:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = PLAYBACK;
    1182:	86 e0       	ldi	r24, 0x06	; 6
    1184:	80 93 a2 01 	sts	0x01A2, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1188:	80 91 68 01 	lds	r24, 0x0168
    118c:	90 91 69 01 	lds	r25, 0x0169
    1190:	a0 91 6a 01 	lds	r26, 0x016A
    1194:	b0 91 6b 01 	lds	r27, 0x016B
    1198:	84 5d       	subi	r24, 0xD4	; 212
    119a:	9e 4f       	sbci	r25, 0xFE	; 254
    119c:	af 4f       	sbci	r26, 0xFF	; 255
    119e:	bf 4f       	sbci	r27, 0xFF	; 255
    11a0:	80 93 c5 01 	sts	0x01C5, r24
    11a4:	90 93 c6 01 	sts	0x01C6, r25
    11a8:	a0 93 c7 01 	sts	0x01C7, r26
    11ac:	b0 93 c8 01 	sts	0x01C8, r27
	}

	if(enc_btn == PRESS)
    11b0:	80 91 cb 01 	lds	r24, 0x01CB
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	09 f0       	breq	.+2      	; 0x11ba <poll_buttons+0x146>
    11b8:	77 c0       	rjmp	.+238    	; 0x12a8 <poll_buttons+0x234>
	{
		// If we are in normal tuning mode, pressing the tune knob toggles tuning rates
		if(inc_tune_state == NONE)
    11ba:	80 91 ca 01 	lds	r24, 0x01CA
    11be:	88 23       	and	r24, r24
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <poll_buttons+0x150>
    11c2:	59 c0       	rjmp	.+178    	; 0x1276 <poll_buttons+0x202>
		{
			if(tune_rate == FAST)
    11c4:	80 91 06 01 	lds	r24, 0x0106
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	51 f5       	brne	.+84     	; 0x1220 <poll_buttons+0x1ac>
			{
				tune_rate = SLOW;
    11cc:	10 92 06 01 	sts	0x0106, r1
				tune_step = DDS_20HZ;
    11d0:	84 e3       	ldi	r24, 0x34	; 52
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	90 93 08 01 	sts	0x0108, r25
    11d8:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 5;
    11dc:	85 e0       	ldi	r24, 0x05	; 5
    11de:	80 93 09 01 	sts	0x0109, r24
				sleep_timer = cur_timer + SLEEP_DELAY;
    11e2:	80 91 68 01 	lds	r24, 0x0168
    11e6:	90 91 69 01 	lds	r25, 0x0169
    11ea:	a0 91 6a 01 	lds	r26, 0x016A
    11ee:	b0 91 6b 01 	lds	r27, 0x016B
    11f2:	84 5d       	subi	r24, 0xD4	; 212
    11f4:	9e 4f       	sbci	r25, 0xFE	; 254
    11f6:	af 4f       	sbci	r26, 0xFF	; 255
    11f8:	bf 4f       	sbci	r27, 0xFF	; 255
    11fa:	80 93 c5 01 	sts	0x01C5, r24
    11fe:	90 93 c6 01 	sts	0x01C6, r25
    1202:	a0 93 c7 01 	sts	0x01C7, r26
    1206:	b0 93 c8 01 	sts	0x01C8, r27
				debounce(TRUE);
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				announce("S", ST_LOW, 25);
    1210:	8b e1       	ldi	r24, 0x1B	; 27
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	60 e9       	ldi	r22, 0x90	; 144
    1216:	71 e0       	ldi	r23, 0x01	; 1
    1218:	49 e1       	ldi	r20, 0x19	; 25
    121a:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    121e:	99 c1       	rjmp	.+818    	; 0x1552 <poll_buttons+0x4de>
			}
			else
			{
				tune_rate = FAST;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 06 01 	sts	0x0106, r24
				tune_step = DDS_100HZ;
    1226:	8c e0       	ldi	r24, 0x0C	; 12
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	90 93 08 01 	sts	0x0108, r25
    122e:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 25;
    1232:	89 e1       	ldi	r24, 0x19	; 25
    1234:	80 93 09 01 	sts	0x0109, r24
				sleep_timer = cur_timer + SLEEP_DELAY;
    1238:	80 91 68 01 	lds	r24, 0x0168
    123c:	90 91 69 01 	lds	r25, 0x0169
    1240:	a0 91 6a 01 	lds	r26, 0x016A
    1244:	b0 91 6b 01 	lds	r27, 0x016B
    1248:	84 5d       	subi	r24, 0xD4	; 212
    124a:	9e 4f       	sbci	r25, 0xFE	; 254
    124c:	af 4f       	sbci	r26, 0xFF	; 255
    124e:	bf 4f       	sbci	r27, 0xFF	; 255
    1250:	80 93 c5 01 	sts	0x01C5, r24
    1254:	90 93 c6 01 	sts	0x01C6, r25
    1258:	a0 93 c7 01 	sts	0x01C7, r26
    125c:	b0 93 c8 01 	sts	0x01C8, r27
				debounce(TRUE);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				announce("S", ST_HIGH, 25);
    1266:	8b e1       	ldi	r24, 0x1B	; 27
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	64 e8       	ldi	r22, 0x84	; 132
    126c:	73 e0       	ldi	r23, 0x03	; 3
    126e:	49 e1       	ldi	r20, 0x19	; 25
    1270:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    1274:	6e c1       	rjmp	.+732    	; 0x1552 <poll_buttons+0x4de>
			}
		}
		// Otherwise if we are in RIT or XIT, pressing the tune knob toggles between the two VFOs
		else
		{
			if(tune_reg == REG_0)
    1276:	80 91 c9 01 	lds	r24, 0x01C9
    127a:	88 23       	and	r24, r24
    127c:	59 f4       	brne	.+22     	; 0x1294 <poll_buttons+0x220>
			{
				tune_reg = REG_1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 c9 01 	sts	0x01C9, r24
				announce("T", ST_LOW, 25);
    1284:	8d e1       	ldi	r24, 0x1D	; 29
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	60 e9       	ldi	r22, 0x90	; 144
    128a:	71 e0       	ldi	r23, 0x01	; 1
    128c:	49 e1       	ldi	r20, 0x19	; 25
    128e:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    1292:	5f c1       	rjmp	.+702    	; 0x1552 <poll_buttons+0x4de>
			}
			else
			{
				tune_reg = REG_0;
    1294:	10 92 c9 01 	sts	0x01C9, r1
				announce("R", ST_LOW, 25);
    1298:	8f e1       	ldi	r24, 0x1F	; 31
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	60 e9       	ldi	r22, 0x90	; 144
    129e:	71 e0       	ldi	r23, 0x01	; 1
    12a0:	49 e1       	ldi	r20, 0x19	; 25
    12a2:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    12a6:	55 c1       	rjmp	.+682    	; 0x1552 <poll_buttons+0x4de>
			}
		}
	}
	else if(enc_btn == HOLD)
    12a8:	80 91 cb 01 	lds	r24, 0x01CB
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <poll_buttons+0x23e>
    12b0:	50 c1       	rjmp	.+672    	; 0x1552 <poll_buttons+0x4de>
	{
		// Rotate through the 3 states
		inc_tune_state++;
    12b2:	80 91 ca 01 	lds	r24, 0x01CA
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	80 93 ca 01 	sts	0x01CA, r24
		if(inc_tune_state > 2)
    12bc:	80 91 ca 01 	lds	r24, 0x01CA
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	10 f0       	brcs	.+4      	; 0x12c8 <poll_buttons+0x254>
			inc_tune_state = NONE;
    12c4:	10 92 ca 01 	sts	0x01CA, r1

		switch(inc_tune_state)
    12c8:	80 91 ca 01 	lds	r24, 0x01CA
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <poll_buttons+0x26c>
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	91 05       	cpc	r25, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <poll_buttons+0x26a>
    12dc:	60 c0       	rjmp	.+192    	; 0x139e <poll_buttons+0x32a>
    12de:	ca c0       	rjmp	.+404    	; 0x1474 <poll_buttons+0x400>
		{
			case RIT:
				RIT_LED_DDR |= _BV(RIT_LED);
    12e0:	87 e2       	ldi	r24, 0x27	; 39
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	27 e2       	ldi	r18, 0x27	; 39
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	f9 01       	movw	r30, r18
    12ea:	20 81       	ld	r18, Z
    12ec:	22 60       	ori	r18, 0x02	; 2
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 83       	st	Z, r18
				//RIT_LED_PORT |= _BV(RIT_LED);
				tune_rate = SLOW;
    12f2:	10 92 06 01 	sts	0x0106, r1
				tune_step = DDS_20HZ;
    12f6:	84 e3       	ldi	r24, 0x34	; 52
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	90 93 08 01 	sts	0x0108, r25
    12fe:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 5;
    1302:	85 e0       	ldi	r24, 0x05	; 5
    1304:	80 93 09 01 	sts	0x0109, r24
				dds_it_freq_word = dds_freq_word;
    1308:	80 91 ac 01 	lds	r24, 0x01AC
    130c:	90 91 ad 01 	lds	r25, 0x01AD
    1310:	a0 91 ae 01 	lds	r26, 0x01AE
    1314:	b0 91 af 01 	lds	r27, 0x01AF
    1318:	80 93 df 01 	sts	0x01DF, r24
    131c:	90 93 e0 01 	sts	0x01E0, r25
    1320:	a0 93 e1 01 	sts	0x01E1, r26
    1324:	b0 93 e2 01 	sts	0x01E2, r27
				tune_dds(dds_it_freq_word, REG_0, FALSE);
    1328:	80 91 df 01 	lds	r24, 0x01DF
    132c:	90 91 e0 01 	lds	r25, 0x01E0
    1330:	a0 91 e1 01 	lds	r26, 0x01E1
    1334:	b0 91 e2 01 	lds	r27, 0x01E2
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
				tune_dds(dds_it_freq_word, REG_1, FALSE);
    1344:	80 91 df 01 	lds	r24, 0x01DF
    1348:	90 91 e0 01 	lds	r25, 0x01E0
    134c:	a0 91 e1 01 	lds	r26, 0x01E1
    1350:	b0 91 e2 01 	lds	r27, 0x01E2
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
				//tune_reg = REG_0;
				//set_dds_freq_reg(tune_reg);
				debounce(TRUE);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    1366:	80 91 68 01 	lds	r24, 0x0168
    136a:	90 91 69 01 	lds	r25, 0x0169
    136e:	a0 91 6a 01 	lds	r26, 0x016A
    1372:	b0 91 6b 01 	lds	r27, 0x016B
    1376:	84 5d       	subi	r24, 0xD4	; 212
    1378:	9e 4f       	sbci	r25, 0xFE	; 254
    137a:	af 4f       	sbci	r26, 0xFF	; 255
    137c:	bf 4f       	sbci	r27, 0xFF	; 255
    137e:	80 93 c5 01 	sts	0x01C5, r24
    1382:	90 93 c6 01 	sts	0x01C6, r25
    1386:	a0 93 c7 01 	sts	0x01C7, r26
    138a:	b0 93 c8 01 	sts	0x01C8, r27
				announce("R", ST_HIGH, 25);
    138e:	8f e1       	ldi	r24, 0x1F	; 31
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	64 e8       	ldi	r22, 0x84	; 132
    1394:	73 e0       	ldi	r23, 0x03	; 3
    1396:	49 e1       	ldi	r20, 0x19	; 25
    1398:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
				break;
    139c:	da c0       	rjmp	.+436    	; 0x1552 <poll_buttons+0x4de>

			case XIT:
				RIT_LED_DDR |= _BV(RIT_LED);
    139e:	87 e2       	ldi	r24, 0x27	; 39
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	27 e2       	ldi	r18, 0x27	; 39
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	f9 01       	movw	r30, r18
    13a8:	20 81       	ld	r18, Z
    13aa:	22 60       	ori	r18, 0x02	; 2
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18
				//RIT_LED_PORT |= _BV(RIT_LED);
				led_toggle = cur_timer + XIT_BLINK;
    13b0:	80 91 68 01 	lds	r24, 0x0168
    13b4:	90 91 69 01 	lds	r25, 0x0169
    13b8:	a0 91 6a 01 	lds	r26, 0x016A
    13bc:	b0 91 6b 01 	lds	r27, 0x016B
    13c0:	8c 50       	subi	r24, 0x0C	; 12
    13c2:	9e 4f       	sbci	r25, 0xFE	; 254
    13c4:	af 4f       	sbci	r26, 0xFF	; 255
    13c6:	bf 4f       	sbci	r27, 0xFF	; 255
    13c8:	80 93 d5 01 	sts	0x01D5, r24
    13cc:	90 93 d6 01 	sts	0x01D6, r25
    13d0:	a0 93 d7 01 	sts	0x01D7, r26
    13d4:	b0 93 d8 01 	sts	0x01D8, r27
				tune_rate = FAST;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 06 01 	sts	0x0106, r24
				tune_step = DDS_100HZ;
    13de:	8c e0       	ldi	r24, 0x0C	; 12
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	90 93 08 01 	sts	0x0108, r25
    13e6:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 25;
    13ea:	89 e1       	ldi	r24, 0x19	; 25
    13ec:	80 93 09 01 	sts	0x0109, r24
				tune_dds(dds_it_freq_word, REG_0, FALSE);
    13f0:	80 91 df 01 	lds	r24, 0x01DF
    13f4:	90 91 e0 01 	lds	r25, 0x01E0
    13f8:	a0 91 e1 01 	lds	r26, 0x01E1
    13fc:	b0 91 e2 01 	lds	r27, 0x01E2
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
				tune_dds(dds_it_freq_word, REG_1, FALSE);
    140c:	80 91 df 01 	lds	r24, 0x01DF
    1410:	90 91 e0 01 	lds	r25, 0x01E0
    1414:	a0 91 e1 01 	lds	r26, 0x01E1
    1418:	b0 91 e2 01 	lds	r27, 0x01E2
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
				tune_reg = REG_1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	80 93 c9 01 	sts	0x01C9, r24
				set_dds_freq_reg(tune_reg);
    142e:	80 91 c9 01 	lds	r24, 0x01C9
    1432:	0e 94 8f 0c 	call	0x191e	; 0x191e <set_dds_freq_reg>
				debounce(TRUE);
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    143c:	80 91 68 01 	lds	r24, 0x0168
    1440:	90 91 69 01 	lds	r25, 0x0169
    1444:	a0 91 6a 01 	lds	r26, 0x016A
    1448:	b0 91 6b 01 	lds	r27, 0x016B
    144c:	84 5d       	subi	r24, 0xD4	; 212
    144e:	9e 4f       	sbci	r25, 0xFE	; 254
    1450:	af 4f       	sbci	r26, 0xFF	; 255
    1452:	bf 4f       	sbci	r27, 0xFF	; 255
    1454:	80 93 c5 01 	sts	0x01C5, r24
    1458:	90 93 c6 01 	sts	0x01C6, r25
    145c:	a0 93 c7 01 	sts	0x01C7, r26
    1460:	b0 93 c8 01 	sts	0x01C8, r27
				announce("X", ST_HIGH, 25);
    1464:	81 e2       	ldi	r24, 0x21	; 33
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	64 e8       	ldi	r22, 0x84	; 132
    146a:	73 e0       	ldi	r23, 0x03	; 3
    146c:	49 e1       	ldi	r20, 0x19	; 25
    146e:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
				break;
    1472:	6f c0       	rjmp	.+222    	; 0x1552 <poll_buttons+0x4de>

			case NONE:
			default:
				RIT_LED_DDR &= ~(_BV(RIT_LED));
    1474:	87 e2       	ldi	r24, 0x27	; 39
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	27 e2       	ldi	r18, 0x27	; 39
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	f9 01       	movw	r30, r18
    147e:	20 81       	ld	r18, Z
    1480:	2d 7f       	andi	r18, 0xFD	; 253
    1482:	fc 01       	movw	r30, r24
    1484:	20 83       	st	Z, r18
				RIT_LED_PORT &= ~(_BV(RIT_LED));
    1486:	88 e2       	ldi	r24, 0x28	; 40
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	28 e2       	ldi	r18, 0x28	; 40
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	f9 01       	movw	r30, r18
    1490:	20 81       	ld	r18, Z
    1492:	2d 7f       	andi	r18, 0xFD	; 253
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
				tune_rate = FAST;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 06 01 	sts	0x0106, r24
				tune_step = DDS_100HZ;
    149e:	8c e0       	ldi	r24, 0x0C	; 12
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	90 93 08 01 	sts	0x0108, r25
    14a6:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 25;
    14aa:	89 e1       	ldi	r24, 0x19	; 25
    14ac:	80 93 09 01 	sts	0x0109, r24
				dds_freq_word = dds_it_freq_word;
    14b0:	80 91 df 01 	lds	r24, 0x01DF
    14b4:	90 91 e0 01 	lds	r25, 0x01E0
    14b8:	a0 91 e1 01 	lds	r26, 0x01E1
    14bc:	b0 91 e2 01 	lds	r27, 0x01E2
    14c0:	80 93 ac 01 	sts	0x01AC, r24
    14c4:	90 93 ad 01 	sts	0x01AD, r25
    14c8:	a0 93 ae 01 	sts	0x01AE, r26
    14cc:	b0 93 af 01 	sts	0x01AF, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    14d0:	80 91 ac 01 	lds	r24, 0x01AC
    14d4:	90 91 ad 01 	lds	r25, 0x01AD
    14d8:	a0 91 ae 01 	lds	r26, 0x01AE
    14dc:	b0 91 af 01 	lds	r27, 0x01AF
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
				tune_dds(dds_freq_word, REG_1, FALSE);
    14ec:	80 91 ac 01 	lds	r24, 0x01AC
    14f0:	90 91 ad 01 	lds	r25, 0x01AD
    14f4:	a0 91 ae 01 	lds	r26, 0x01AE
    14f8:	b0 91 af 01 	lds	r27, 0x01AF
    14fc:	bc 01       	movw	r22, r24
    14fe:	cd 01       	movw	r24, r26
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
				tune_reg = REG_0;
    1508:	10 92 c9 01 	sts	0x01C9, r1
				set_dds_freq_reg(tune_reg);
    150c:	80 91 c9 01 	lds	r24, 0x01C9
    1510:	0e 94 8f 0c 	call	0x191e	; 0x191e <set_dds_freq_reg>
				debounce(TRUE);
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    151a:	80 91 68 01 	lds	r24, 0x0168
    151e:	90 91 69 01 	lds	r25, 0x0169
    1522:	a0 91 6a 01 	lds	r26, 0x016A
    1526:	b0 91 6b 01 	lds	r27, 0x016B
    152a:	84 5d       	subi	r24, 0xD4	; 212
    152c:	9e 4f       	sbci	r25, 0xFE	; 254
    152e:	af 4f       	sbci	r26, 0xFF	; 255
    1530:	bf 4f       	sbci	r27, 0xFF	; 255
    1532:	80 93 c5 01 	sts	0x01C5, r24
    1536:	90 93 c6 01 	sts	0x01C6, r25
    153a:	a0 93 c7 01 	sts	0x01C7, r26
    153e:	b0 93 c8 01 	sts	0x01C8, r27
				announce("O", ST_HIGH, 25);
    1542:	83 e2       	ldi	r24, 0x23	; 35
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	64 e8       	ldi	r22, 0x84	; 132
    1548:	73 e0       	ldi	r23, 0x03	; 3
    154a:	49 e1       	ldi	r20, 0x19	; 25
    154c:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
				break;
    1550:	00 00       	nop
			sleep_timer = cur_timer + SLEEP_DELAY;
		} */
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    1552:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    1554:	80 91 67 01 	lds	r24, 0x0167
    1558:	88 23       	and	r24, r24
    155a:	19 f0       	breq	.+6      	; 0x1562 <poll_buttons+0x4ee>
		cur_enc_state += 0x02;
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	8e 5f       	subi	r24, 0xFE	; 254
    1560:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    1562:	80 91 ed 01 	lds	r24, 0x01ED
    1566:	88 23       	and	r24, r24
    1568:	19 f0       	breq	.+6      	; 0x1570 <poll_buttons+0x4fc>
		cur_enc_state += 0x01;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	8f 5f       	subi	r24, 0xFF	; 255
    156e:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    1570:	80 91 4e 01 	lds	r24, 0x014E
    1574:	99 81       	ldd	r25, Y+1	; 0x01
    1576:	98 17       	cp	r25, r24
    1578:	09 f4       	brne	.+2      	; 0x157c <poll_buttons+0x508>
    157a:	26 c1       	rjmp	.+588    	; 0x17c8 <poll_buttons+0x754>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    157c:	80 91 4e 01 	lds	r24, 0x014E
    1580:	86 95       	lsr	r24
    1582:	81 70       	andi	r24, 0x01	; 1
    1584:	80 93 4e 01 	sts	0x014E, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1588:	80 91 68 01 	lds	r24, 0x0168
    158c:	90 91 69 01 	lds	r25, 0x0169
    1590:	a0 91 6a 01 	lds	r26, 0x016A
    1594:	b0 91 6b 01 	lds	r27, 0x016B
    1598:	84 5d       	subi	r24, 0xD4	; 212
    159a:	9e 4f       	sbci	r25, 0xFE	; 254
    159c:	af 4f       	sbci	r26, 0xFF	; 255
    159e:	bf 4f       	sbci	r27, 0xFF	; 255
    15a0:	80 93 c5 01 	sts	0x01C5, r24
    15a4:	90 93 c6 01 	sts	0x01C6, r25
    15a8:	a0 93 c7 01 	sts	0x01C7, r26
    15ac:	b0 93 c8 01 	sts	0x01C8, r27

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    15b0:	80 91 4e 01 	lds	r24, 0x014E
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	82 27       	eor	r24, r18
    15c4:	93 27       	eor	r25, r19
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	09 f0       	breq	.+2      	; 0x15ce <poll_buttons+0x55a>
    15cc:	83 c0       	rjmp	.+262    	; 0x16d4 <poll_buttons+0x660>
		{
			// Don't allow tuning if we are on the locked VFO
			if((inc_tune_state == RIT && tune_reg == REG_0) || (inc_tune_state == XIT && tune_reg == REG_1) || (inc_tune_state == NONE))
    15ce:	80 91 ca 01 	lds	r24, 0x01CA
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	21 f4       	brne	.+8      	; 0x15de <poll_buttons+0x56a>
    15d6:	80 91 c9 01 	lds	r24, 0x01C9
    15da:	88 23       	and	r24, r24
    15dc:	69 f0       	breq	.+26     	; 0x15f8 <poll_buttons+0x584>
    15de:	80 91 ca 01 	lds	r24, 0x01CA
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	21 f4       	brne	.+8      	; 0x15ee <poll_buttons+0x57a>
    15e6:	80 91 c9 01 	lds	r24, 0x01C9
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <poll_buttons+0x584>
    15ee:	80 91 ca 01 	lds	r24, 0x01CA
    15f2:	88 23       	and	r24, r24
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <poll_buttons+0x584>
    15f6:	e8 c0       	rjmp	.+464    	; 0x17c8 <poll_buttons+0x754>
			{

				if(tune_freq > LOWER_FREQ_LIMIT)
    15f8:	80 91 da 01 	lds	r24, 0x01DA
    15fc:	90 91 db 01 	lds	r25, 0x01DB
    1600:	a0 91 dc 01 	lds	r26, 0x01DC
    1604:	b0 91 dd 01 	lds	r27, 0x01DD
    1608:	81 38       	cpi	r24, 0x81	; 129
    160a:	ff e9       	ldi	r31, 0x9F	; 159
    160c:	9f 07       	cpc	r25, r31
    160e:	f5 ed       	ldi	r31, 0xD5	; 213
    1610:	af 07       	cpc	r26, r31
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	bf 07       	cpc	r27, r31
    1616:	08 f4       	brcc	.+2      	; 0x161a <poll_buttons+0x5a6>
    1618:	52 c0       	rjmp	.+164    	; 0x16be <poll_buttons+0x64a>
				{
					dds_freq_word -= tune_step;
    161a:	20 91 ac 01 	lds	r18, 0x01AC
    161e:	30 91 ad 01 	lds	r19, 0x01AD
    1622:	40 91 ae 01 	lds	r20, 0x01AE
    1626:	50 91 af 01 	lds	r21, 0x01AF
    162a:	80 91 07 01 	lds	r24, 0x0107
    162e:	90 91 08 01 	lds	r25, 0x0108
    1632:	cc 01       	movw	r24, r24
    1634:	a0 e0       	ldi	r26, 0x00	; 0
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	79 01       	movw	r14, r18
    163a:	8a 01       	movw	r16, r20
    163c:	e8 1a       	sub	r14, r24
    163e:	f9 0a       	sbc	r15, r25
    1640:	0a 0b       	sbc	r16, r26
    1642:	1b 0b       	sbc	r17, r27
    1644:	d8 01       	movw	r26, r16
    1646:	c7 01       	movw	r24, r14
    1648:	80 93 ac 01 	sts	0x01AC, r24
    164c:	90 93 ad 01 	sts	0x01AD, r25
    1650:	a0 93 ae 01 	sts	0x01AE, r26
    1654:	b0 93 af 01 	sts	0x01AF, r27
					tune_freq -= tune_freq_step;
    1658:	20 91 da 01 	lds	r18, 0x01DA
    165c:	30 91 db 01 	lds	r19, 0x01DB
    1660:	40 91 dc 01 	lds	r20, 0x01DC
    1664:	50 91 dd 01 	lds	r21, 0x01DD
    1668:	80 91 09 01 	lds	r24, 0x0109
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	79 01       	movw	r14, r18
    1676:	8a 01       	movw	r16, r20
    1678:	e8 1a       	sub	r14, r24
    167a:	f9 0a       	sbc	r15, r25
    167c:	0a 0b       	sbc	r16, r26
    167e:	1b 0b       	sbc	r17, r27
    1680:	d8 01       	movw	r26, r16
    1682:	c7 01       	movw	r24, r14
    1684:	80 93 da 01 	sts	0x01DA, r24
    1688:	90 93 db 01 	sts	0x01DB, r25
    168c:	a0 93 dc 01 	sts	0x01DC, r26
    1690:	b0 93 dd 01 	sts	0x01DD, r27
					tune_dds(dds_freq_word, tune_reg, FALSE);
    1694:	80 91 ac 01 	lds	r24, 0x01AC
    1698:	90 91 ad 01 	lds	r25, 0x01AD
    169c:	a0 91 ae 01 	lds	r26, 0x01AE
    16a0:	b0 91 af 01 	lds	r27, 0x01AF
    16a4:	20 91 c9 01 	lds	r18, 0x01C9
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	42 2f       	mov	r20, r18
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
					set_dds_freq_reg(tune_reg);
    16b4:	80 91 c9 01 	lds	r24, 0x01C9
    16b8:	0e 94 8f 0c 	call	0x191e	; 0x191e <set_dds_freq_reg>
    16bc:	85 c0       	rjmp	.+266    	; 0x17c8 <poll_buttons+0x754>
				}
				else
				{
					announce("L", ST_HIGH, 25);
    16be:	85 e2       	ldi	r24, 0x25	; 37
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	64 e8       	ldi	r22, 0x84	; 132
    16c4:	73 e0       	ldi	r23, 0x03	; 3
    16c6:	49 e1       	ldi	r20, 0x19	; 25
    16c8:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
					debounce(TRUE);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
    16d2:	7a c0       	rjmp	.+244    	; 0x17c8 <poll_buttons+0x754>
			}
		}
		else
		{
			// Don't allow tuning if we are on the locked VFO
			if((inc_tune_state == RIT && tune_reg == REG_0) || (inc_tune_state == XIT && tune_reg == REG_1) || (inc_tune_state == NONE))
    16d4:	80 91 ca 01 	lds	r24, 0x01CA
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	21 f4       	brne	.+8      	; 0x16e4 <poll_buttons+0x670>
    16dc:	80 91 c9 01 	lds	r24, 0x01C9
    16e0:	88 23       	and	r24, r24
    16e2:	69 f0       	breq	.+26     	; 0x16fe <poll_buttons+0x68a>
    16e4:	80 91 ca 01 	lds	r24, 0x01CA
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <poll_buttons+0x680>
    16ec:	80 91 c9 01 	lds	r24, 0x01C9
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	29 f0       	breq	.+10     	; 0x16fe <poll_buttons+0x68a>
    16f4:	80 91 ca 01 	lds	r24, 0x01CA
    16f8:	88 23       	and	r24, r24
    16fa:	09 f0       	breq	.+2      	; 0x16fe <poll_buttons+0x68a>
    16fc:	65 c0       	rjmp	.+202    	; 0x17c8 <poll_buttons+0x754>
			{

				// Tune up as long as we are not at upper limit
				if(tune_freq < UPPER_FREQ_LIMIT)
    16fe:	80 91 da 01 	lds	r24, 0x01DA
    1702:	90 91 db 01 	lds	r25, 0x01DB
    1706:	a0 91 dc 01 	lds	r26, 0x01DC
    170a:	b0 91 dd 01 	lds	r27, 0x01DD
    170e:	80 3b       	cpi	r24, 0xB0	; 176
    1710:	06 ef       	ldi	r16, 0xF6	; 246
    1712:	90 07       	cpc	r25, r16
    1714:	0a ed       	ldi	r16, 0xDA	; 218
    1716:	a0 07       	cpc	r26, r16
    1718:	00 e0       	ldi	r16, 0x00	; 0
    171a:	b0 07       	cpc	r27, r16
    171c:	08 f0       	brcs	.+2      	; 0x1720 <poll_buttons+0x6ac>
    171e:	4a c0       	rjmp	.+148    	; 0x17b4 <poll_buttons+0x740>
				{
					dds_freq_word += tune_step;
    1720:	80 91 07 01 	lds	r24, 0x0107
    1724:	90 91 08 01 	lds	r25, 0x0108
    1728:	9c 01       	movw	r18, r24
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	80 91 ac 01 	lds	r24, 0x01AC
    1732:	90 91 ad 01 	lds	r25, 0x01AD
    1736:	a0 91 ae 01 	lds	r26, 0x01AE
    173a:	b0 91 af 01 	lds	r27, 0x01AF
    173e:	82 0f       	add	r24, r18
    1740:	93 1f       	adc	r25, r19
    1742:	a4 1f       	adc	r26, r20
    1744:	b5 1f       	adc	r27, r21
    1746:	80 93 ac 01 	sts	0x01AC, r24
    174a:	90 93 ad 01 	sts	0x01AD, r25
    174e:	a0 93 ae 01 	sts	0x01AE, r26
    1752:	b0 93 af 01 	sts	0x01AF, r27
					tune_freq += tune_freq_step;
    1756:	80 91 09 01 	lds	r24, 0x0109
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	80 91 da 01 	lds	r24, 0x01DA
    1766:	90 91 db 01 	lds	r25, 0x01DB
    176a:	a0 91 dc 01 	lds	r26, 0x01DC
    176e:	b0 91 dd 01 	lds	r27, 0x01DD
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
    1776:	a4 1f       	adc	r26, r20
    1778:	b5 1f       	adc	r27, r21
    177a:	80 93 da 01 	sts	0x01DA, r24
    177e:	90 93 db 01 	sts	0x01DB, r25
    1782:	a0 93 dc 01 	sts	0x01DC, r26
    1786:	b0 93 dd 01 	sts	0x01DD, r27
					tune_dds(dds_freq_word, tune_reg, FALSE);
    178a:	80 91 ac 01 	lds	r24, 0x01AC
    178e:	90 91 ad 01 	lds	r25, 0x01AD
    1792:	a0 91 ae 01 	lds	r26, 0x01AE
    1796:	b0 91 af 01 	lds	r27, 0x01AF
    179a:	20 91 c9 01 	lds	r18, 0x01C9
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	42 2f       	mov	r20, r18
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	0e 94 ef 0b 	call	0x17de	; 0x17de <tune_dds>
					set_dds_freq_reg(tune_reg);
    17aa:	80 91 c9 01 	lds	r24, 0x01C9
    17ae:	0e 94 8f 0c 	call	0x191e	; 0x191e <set_dds_freq_reg>
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <poll_buttons+0x754>
				}
				else
				{
					announce("U", ST_HIGH, 25);
    17b4:	87 e2       	ldi	r24, 0x27	; 39
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	64 e8       	ldi	r22, 0x84	; 132
    17ba:	73 e0       	ldi	r23, 0x03	; 3
    17bc:	49 e1       	ldi	r20, 0x19	; 25
    17be:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
					debounce(TRUE);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				announce("U", ST_HIGH, 23);
				*/
		}
	}

	prev_enc_state = cur_enc_state;
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	80 93 4e 01 	sts	0x014E, r24
}
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	08 95       	ret

000017de <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg, enum BOOL init)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	2c 97       	sbiw	r28, 0x0c	; 12
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	6f 83       	std	Y+7, r22	; 0x07
    17f4:	78 87       	std	Y+8, r23	; 0x08
    17f6:	89 87       	std	Y+9, r24	; 0x09
    17f8:	9a 87       	std	Y+10, r25	; 0x0a
    17fa:	4b 87       	std	Y+11, r20	; 0x0b
    17fc:	2c 87       	std	Y+12, r18	; 0x0c
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    17fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	29 f4       	brne	.+10     	; 0x180e <tune_dds+0x30>
		freq_reg = 0x8000;
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e8       	ldi	r25, 0x80	; 128
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <tune_dds+0x38>
	else
		freq_reg = 0x4000;
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e4       	ldi	r25, 0x40	; 64
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    1816:	8f 81       	ldd	r24, Y+7	; 0x07
    1818:	98 85       	ldd	r25, Y+8	; 0x08
    181a:	9c 01       	movw	r18, r24
    181c:	3f 73       	andi	r19, 0x3F	; 63
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	82 0f       	add	r24, r18
    1824:	93 1f       	adc	r25, r19
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    182a:	8f 81       	ldd	r24, Y+7	; 0x07
    182c:	98 85       	ldd	r25, Y+8	; 0x08
    182e:	a9 85       	ldd	r26, Y+9	; 0x09
    1830:	ba 85       	ldd	r27, Y+10	; 0x0a
    1832:	07 2e       	mov	r0, r23
    1834:	7e e0       	ldi	r23, 0x0E	; 14
    1836:	b6 95       	lsr	r27
    1838:	a7 95       	ror	r26
    183a:	97 95       	ror	r25
    183c:	87 95       	ror	r24
    183e:	7a 95       	dec	r23
    1840:	d1 f7       	brne	.-12     	; 0x1836 <tune_dds+0x58>
    1842:	70 2d       	mov	r23, r0
    1844:	9c 01       	movw	r18, r24
    1846:	3f 73       	andi	r19, 0x3F	; 63
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	8d 83       	std	Y+5, r24	; 0x05

	if(init == TRUE)
    1854:	8c 85       	ldd	r24, Y+12	; 0x0c
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	21 f4       	brne	.+8      	; 0x1862 <tune_dds+0x84>
		send_dds_word(0x2100);
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	91 e2       	ldi	r25, 0x21	; 33
    185e:	0e 94 4d 0c 	call	0x189a	; 0x189a <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	0e 94 4d 0c 	call	0x189a	; 0x189a <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	0e 94 4d 0c 	call	0x189a	; 0x189a <send_dds_word>

	if(init == TRUE)
    1872:	8c 85       	ldd	r24, Y+12	; 0x0c
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	41 f4       	brne	.+16     	; 0x1888 <tune_dds+0xaa>
	{
		// Send phase
		send_dds_word(0xC000);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 ec       	ldi	r25, 0xC0	; 192
    187c:	0e 94 4d 0c 	call	0x189a	; 0x189a <send_dds_word>

		// Exit reset
		send_dds_word(0x2000);
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e2       	ldi	r25, 0x20	; 32
    1884:	0e 94 4d 0c 	call	0x189a	; 0x189a <send_dds_word>
	}
}
    1888:	2c 96       	adiw	r28, 0x0c	; 12
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <send_dds_word>:
	send_dds_word(0x2000);
}
*/

void send_dds_word(uint16_t dds_word)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <send_dds_word+0x6>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    18a8:	85 e2       	ldi	r24, 0x25	; 37
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	25 e2       	ldi	r18, 0x25	; 37
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	f9 01       	movw	r30, r18
    18b2:	20 81       	ld	r18, Z
    18b4:	20 62       	ori	r18, 0x20	; 32
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    18ba:	85 e2       	ldi	r24, 0x25	; 37
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	25 e2       	ldi	r18, 0x25	; 37
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	f9 01       	movw	r30, r18
    18c4:	20 81       	ld	r18, Z
    18c6:	2d 7f       	andi	r18, 0xFD	; 253
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    18cc:	8e e4       	ldi	r24, 0x4E	; 78
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	29 81       	ldd	r18, Y+1	; 0x01
    18d2:	3a 81       	ldd	r19, Y+2	; 0x02
    18d4:	23 2f       	mov	r18, r19
    18d6:	33 27       	eor	r19, r19
    18d8:	fc 01       	movw	r30, r24
    18da:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    18dc:	00 00       	nop
    18de:	8d e4       	ldi	r24, 0x4D	; 77
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	fc 01       	movw	r30, r24
    18e4:	80 81       	ld	r24, Z
    18e6:	88 23       	and	r24, r24
    18e8:	d4 f7       	brge	.-12     	; 0x18de <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    18ea:	8e e4       	ldi	r24, 0x4E	; 78
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	29 81       	ldd	r18, Y+1	; 0x01
    18f0:	fc 01       	movw	r30, r24
    18f2:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    18f4:	00 00       	nop
    18f6:	8d e4       	ldi	r24, 0x4D	; 77
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	fc 01       	movw	r30, r24
    18fc:	80 81       	ld	r24, Z
    18fe:	88 23       	and	r24, r24
    1900:	d4 f7       	brge	.-12     	; 0x18f6 <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    1902:	85 e2       	ldi	r24, 0x25	; 37
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	25 e2       	ldi	r18, 0x25	; 37
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	f9 01       	movw	r30, r18
    190c:	20 81       	ld	r18, Z
    190e:	22 60       	ori	r18, 0x02	; 2
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	29 f4       	brne	.+10     	; 0x193a <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	98 e2       	ldi	r25, 0x28	; 40
    1934:	0e 94 4d 0c 	call	0x189a	; 0x189a <send_dds_word>
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e2       	ldi	r25, 0x20	; 32
    193e:	0e 94 4d 0c 	call	0x189a	; 0x189a <send_dds_word>
}
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <set_st_freq+0x6>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <set_st_freq+0x8>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	69 83       	std	Y+1, r22	; 0x01
    1958:	7a 83       	std	Y+2, r23	; 0x02
    195a:	8b 83       	std	Y+3, r24	; 0x03
    195c:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	ab 81       	ldd	r26, Y+3	; 0x03
    1964:	bc 81       	ldd	r27, Y+4	; 0x04
    1966:	23 e9       	ldi	r18, 0x93	; 147
    1968:	38 e1       	ldi	r19, 0x18	; 24
    196a:	44 e0       	ldi	r20, 0x04	; 4
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__mulsi3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	80 93 b0 01 	sts	0x01B0, r24
    197e:	90 93 b1 01 	sts	0x01B1, r25
    1982:	a0 93 b2 01 	sts	0x01B2, r26
    1986:	b0 93 b3 01 	sts	0x01B3, r27
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <main>:

int main(void)
{
    1998:	1f 93       	push	r17
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	2c 97       	sbiw	r28, 0x0c	; 12
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    19ae:	89 e2       	ldi	r24, 0x29	; 41
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 44 1a 	call	0x3488	; 0x3488 <malloc>
    19b6:	90 93 e8 01 	sts	0x01E8, r25
    19ba:	80 93 e7 01 	sts	0x01E7, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    19be:	80 91 e7 01 	lds	r24, 0x01E7
    19c2:	90 91 e8 01 	lds	r25, 0x01E8
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	49 e2       	ldi	r20, 0x29	; 41
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	0e 94 80 1b 	call	0x3700	; 0x3700 <memset>
	cur_char_p = announce_buffer;
    19d2:	80 91 e7 01 	lds	r24, 0x01E7
    19d6:	90 91 e8 01 	lds	r25, 0x01E8
    19da:	90 93 3f 01 	sts	0x013F, r25
    19de:	80 93 3e 01 	sts	0x013E, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    19e2:	89 e2       	ldi	r24, 0x29	; 41
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 44 1a 	call	0x3488	; 0x3488 <malloc>
    19ea:	90 93 41 01 	sts	0x0141, r25
    19ee:	80 93 40 01 	sts	0x0140, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    19f2:	80 91 40 01 	lds	r24, 0x0140
    19f6:	90 91 41 01 	lds	r25, 0x0141
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	49 e2       	ldi	r20, 0x29	; 41
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	0e 94 80 1b 	call	0x3700	; 0x3700 <memset>

	init();
    1a06:	0e 94 a0 02 	call	0x540	; 0x540 <init>

	announce("CC", st_freq, 15);
    1a0a:	20 91 ba 01 	lds	r18, 0x01BA
    1a0e:	30 91 bb 01 	lds	r19, 0x01BB
    1a12:	89 e2       	ldi	r24, 0x29	; 41
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	b9 01       	movw	r22, r18
    1a18:	4f e0       	ldi	r20, 0x0F	; 15
    1a1a:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    1a1e:	f8 94       	cli
		cur_timer = timer;
    1a20:	80 91 6e 01 	lds	r24, 0x016E
    1a24:	90 91 6f 01 	lds	r25, 0x016F
    1a28:	a0 91 70 01 	lds	r26, 0x0170
    1a2c:	b0 91 71 01 	lds	r27, 0x0171
    1a30:	80 93 68 01 	sts	0x0168, r24
    1a34:	90 93 69 01 	sts	0x0169, r25
    1a38:	a0 93 6a 01 	sts	0x016A, r26
    1a3c:	b0 93 6b 01 	sts	0x016B, r27
		sei();
    1a40:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    1a42:	80 91 a2 01 	lds	r24, 0x01A2
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <main+0xba>
    1a50:	f9 c6       	rjmp	.+3570   	; 0x2844 <main+0xeac>
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	91 05       	cpc	r25, r1
    1a56:	64 f4       	brge	.+24     	; 0x1a70 <main+0xd8>
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	c9 f0       	breq	.+50     	; 0x1a90 <main+0xf8>
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	91 05       	cpc	r25, r1
    1a62:	0c f0       	brlt	.+2      	; 0x1a66 <main+0xce>
    1a64:	3d c5       	rjmp	.+2682   	; 0x24e0 <main+0xb48>
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <main+0xd4>
    1a6a:	0b c1       	rjmp	.+534    	; 0x1c82 <main+0x2ea>
    1a6c:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <main+0x1a1a>
    1a70:	85 30       	cpi	r24, 0x05	; 5
    1a72:	91 05       	cpc	r25, r1
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <main+0xe2>
    1a76:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <main+0x13b2>
    1a7a:	85 30       	cpi	r24, 0x05	; 5
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	0c f4       	brge	.+2      	; 0x1a82 <main+0xea>
    1a80:	a0 c7       	rjmp	.+3904   	; 0x29c2 <main+0x102a>
    1a82:	86 30       	cpi	r24, 0x06	; 6
    1a84:	91 05       	cpc	r25, r1
    1a86:	11 f4       	brne	.+4      	; 0x1a8c <main+0xf4>
    1a88:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <main+0x1536>
    1a8c:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <main+0x1a1a>
		{
		case SK:
			default_mode = SK;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 93 6d 01 	sts	0x016D, r24
			poll_buttons();
    1a96:	0e 94 3a 08 	call	0x1074	; 0x1074 <poll_buttons>

			switch(cur_state)
    1a9a:	80 91 c0 01 	lds	r24, 0x01C0
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	87 30       	cpi	r24, 0x07	; 7
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <main+0x112>
    1aa8:	40 c0       	rjmp	.+128    	; 0x1b2a <main+0x192>
    1aaa:	8c 30       	cpi	r24, 0x0C	; 12
    1aac:	91 05       	cpc	r25, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <main+0x11a>
    1ab0:	a3 c0       	rjmp	.+326    	; 0x1bf8 <main+0x260>
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <main+0x122>
				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;

			default:
				break;
    1ab8:	e2 c0       	rjmp	.+452    	; 0x1c7e <main+0x2e6>
			poll_buttons();

			switch(cur_state)
			{
			case IDLE:
				key_down = FALSE;
    1aba:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1abe:	10 92 3a 01 	sts	0x013A, r1
				mute_on = FALSE;
    1ac2:	10 92 3b 01 	sts	0x013B, r1
					mute_on = FALSE;
				else
					mute_on = TRUE;
					*/

				if(dit_active == TRUE)
    1ac6:	80 91 d4 01 	lds	r24, 0x01D4
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	51 f5       	brne	.+84     	; 0x1b22 <main+0x18a>
				{
					tx_start = cur_timer;
    1ace:	80 91 68 01 	lds	r24, 0x0168
    1ad2:	90 91 69 01 	lds	r25, 0x0169
    1ad6:	a0 91 6a 01 	lds	r26, 0x016A
    1ada:	b0 91 6b 01 	lds	r27, 0x016B
    1ade:	80 93 a8 01 	sts	0x01A8, r24
    1ae2:	90 93 a9 01 	sts	0x01A9, r25
    1ae6:	a0 93 aa 01 	sts	0x01AA, r26
    1aea:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = UINT32_MAX;
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	9f ef       	ldi	r25, 0xFF	; 255
    1af2:	dc 01       	movw	r26, r24
    1af4:	80 93 e9 01 	sts	0x01E9, r24
    1af8:	90 93 ea 01 	sts	0x01EA, r25
    1afc:	a0 93 eb 01 	sts	0x01EB, r26
    1b00:	b0 93 ec 01 	sts	0x01EC, r27
					cur_state_end = UINT32_MAX;
    1b04:	8f ef       	ldi	r24, 0xFF	; 255
    1b06:	9f ef       	ldi	r25, 0xFF	; 255
    1b08:	dc 01       	movw	r26, r24
    1b0a:	80 93 cc 01 	sts	0x01CC, r24
    1b0e:	90 93 cd 01 	sts	0x01CD, r25
    1b12:	a0 93 ce 01 	sts	0x01CE, r26
    1b16:	b0 93 cf 01 	sts	0x01CF, r27
					cur_state = KEYDOWN;
    1b1a:	87 e0       	ldi	r24, 0x07	; 7
    1b1c:	80 93 c0 01 	sts	0x01C0, r24
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <main+0x190>
				}
				else
				{
					cur_state = IDLE;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	80 93 c0 01 	sts	0x01C0, r24
				}
				break;
    1b28:	aa c0       	rjmp	.+340    	; 0x1c7e <main+0x2e6>

			case KEYDOWN:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1b2a:	80 91 da 01 	lds	r24, 0x01DA
    1b2e:	90 91 db 01 	lds	r25, 0x01DB
    1b32:	a0 91 dc 01 	lds	r26, 0x01DC
    1b36:	b0 91 dd 01 	lds	r27, 0x01DD
    1b3a:	81 3b       	cpi	r24, 0xB1	; 177
    1b3c:	26 ef       	ldi	r18, 0xF6	; 246
    1b3e:	92 07       	cpc	r25, r18
    1b40:	2a ed       	ldi	r18, 0xDA	; 218
    1b42:	a2 07       	cpc	r26, r18
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	b2 07       	cpc	r27, r18
    1b48:	80 f4       	brcc	.+32     	; 0x1b6a <main+0x1d2>
    1b4a:	80 91 da 01 	lds	r24, 0x01DA
    1b4e:	90 91 db 01 	lds	r25, 0x01DB
    1b52:	a0 91 dc 01 	lds	r26, 0x01DC
    1b56:	b0 91 dd 01 	lds	r27, 0x01DD
    1b5a:	80 38       	cpi	r24, 0x80	; 128
    1b5c:	ef e9       	ldi	r30, 0x9F	; 159
    1b5e:	9e 07       	cpc	r25, r30
    1b60:	e5 ed       	ldi	r30, 0xD5	; 213
    1b62:	ae 07       	cpc	r26, r30
    1b64:	e0 e0       	ldi	r30, 0x00	; 0
    1b66:	be 07       	cpc	r27, r30
    1b68:	38 f4       	brcc	.+14     	; 0x1b78 <main+0x1e0>
				{
					key_down = FALSE;
    1b6a:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    1b6e:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    1b72:	10 92 3b 01 	sts	0x013B, r1
    1b76:	09 c0       	rjmp	.+18     	; 0x1b8a <main+0x1f2>
				}
				else
				{
					key_down = TRUE;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 3b 01 	sts	0x013B, r24
				}

				if(dit_active == FALSE)
    1b8a:	80 91 d4 01 	lds	r24, 0x01D4
    1b8e:	88 23       	and	r24, r24
    1b90:	39 f5       	brne	.+78     	; 0x1be0 <main+0x248>
				{
					cur_state = EXIT;
    1b92:	8c e0       	ldi	r24, 0x0C	; 12
    1b94:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    1b98:	80 91 68 01 	lds	r24, 0x0168
    1b9c:	90 91 69 01 	lds	r25, 0x0169
    1ba0:	a0 91 6a 01 	lds	r26, 0x016A
    1ba4:	b0 91 6b 01 	lds	r27, 0x016B
    1ba8:	c2 96       	adiw	r24, 0x32	; 50
    1baa:	a1 1d       	adc	r26, r1
    1bac:	b1 1d       	adc	r27, r1
    1bae:	80 93 cc 01 	sts	0x01CC, r24
    1bb2:	90 93 cd 01 	sts	0x01CD, r25
    1bb6:	a0 93 ce 01 	sts	0x01CE, r26
    1bba:	b0 93 cf 01 	sts	0x01CF, r27
					tx_end = cur_timer;
    1bbe:	80 91 68 01 	lds	r24, 0x0168
    1bc2:	90 91 69 01 	lds	r25, 0x0169
    1bc6:	a0 91 6a 01 	lds	r26, 0x016A
    1bca:	b0 91 6b 01 	lds	r27, 0x016B
    1bce:	80 93 e9 01 	sts	0x01E9, r24
    1bd2:	90 93 ea 01 	sts	0x01EA, r25
    1bd6:	a0 93 eb 01 	sts	0x01EB, r26
    1bda:	b0 93 ec 01 	sts	0x01EC, r27
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <main+0x25e>
				}
				else
					tx_end = UINT32_MAX;
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	9f ef       	ldi	r25, 0xFF	; 255
    1be4:	dc 01       	movw	r26, r24
    1be6:	80 93 e9 01 	sts	0x01E9, r24
    1bea:	90 93 ea 01 	sts	0x01EA, r25
    1bee:	a0 93 eb 01 	sts	0x01EB, r26
    1bf2:	b0 93 ec 01 	sts	0x01EC, r27
				break;
    1bf6:	43 c0       	rjmp	.+134    	; 0x1c7e <main+0x2e6>

			case EXIT:
				key_down = FALSE;
    1bf8:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1bfc:	10 92 3a 01 	sts	0x013A, r1

				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1c00:	80 91 da 01 	lds	r24, 0x01DA
    1c04:	90 91 db 01 	lds	r25, 0x01DB
    1c08:	a0 91 dc 01 	lds	r26, 0x01DC
    1c0c:	b0 91 dd 01 	lds	r27, 0x01DD
    1c10:	81 3b       	cpi	r24, 0xB1	; 177
    1c12:	f6 ef       	ldi	r31, 0xF6	; 246
    1c14:	9f 07       	cpc	r25, r31
    1c16:	fa ed       	ldi	r31, 0xDA	; 218
    1c18:	af 07       	cpc	r26, r31
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	bf 07       	cpc	r27, r31
    1c1e:	80 f4       	brcc	.+32     	; 0x1c40 <main+0x2a8>
    1c20:	80 91 da 01 	lds	r24, 0x01DA
    1c24:	90 91 db 01 	lds	r25, 0x01DB
    1c28:	a0 91 dc 01 	lds	r26, 0x01DC
    1c2c:	b0 91 dd 01 	lds	r27, 0x01DD
    1c30:	80 38       	cpi	r24, 0x80	; 128
    1c32:	2f e9       	ldi	r18, 0x9F	; 159
    1c34:	92 07       	cpc	r25, r18
    1c36:	25 ed       	ldi	r18, 0xD5	; 213
    1c38:	a2 07       	cpc	r26, r18
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	b2 07       	cpc	r27, r18
    1c3e:	18 f4       	brcc	.+6      	; 0x1c46 <main+0x2ae>
					mute_on = FALSE;
    1c40:	10 92 3b 01 	sts	0x013B, r1
    1c44:	03 c0       	rjmp	.+6      	; 0x1c4c <main+0x2b4>
				else
					mute_on = TRUE;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	80 93 3b 01 	sts	0x013B, r24

				if(cur_timer >= cur_state_end)
    1c4c:	20 91 68 01 	lds	r18, 0x0168
    1c50:	30 91 69 01 	lds	r19, 0x0169
    1c54:	40 91 6a 01 	lds	r20, 0x016A
    1c58:	50 91 6b 01 	lds	r21, 0x016B
    1c5c:	80 91 cc 01 	lds	r24, 0x01CC
    1c60:	90 91 cd 01 	lds	r25, 0x01CD
    1c64:	a0 91 ce 01 	lds	r26, 0x01CE
    1c68:	b0 91 cf 01 	lds	r27, 0x01CF
    1c6c:	28 17       	cp	r18, r24
    1c6e:	39 07       	cpc	r19, r25
    1c70:	4a 07       	cpc	r20, r26
    1c72:	5b 07       	cpc	r21, r27
    1c74:	18 f0       	brcs	.+6      	; 0x1c7c <main+0x2e4>
					cur_state = IDLE;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	80 93 c0 01 	sts	0x01C0, r24
				break;
    1c7c:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    1c7e:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <main+0x1a1c>

		case KEYER:
			default_mode = KEYER;
    1c82:	10 92 6d 01 	sts	0x016D, r1
			poll_buttons();
    1c86:	0e 94 3a 08 	call	0x1074	; 0x1074 <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    1c8a:	80 91 c0 01 	lds	r24, 0x01C0
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	91 05       	cpc	r25, r1
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <main+0x302>
    1c98:	15 c2       	rjmp	.+1066   	; 0x20c4 <main+0x72c>
    1c9a:	84 30       	cpi	r24, 0x04	; 4
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	44 f4       	brge	.+16     	; 0x1cb0 <main+0x318>
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	71 f0       	breq	.+28     	; 0x1cc2 <main+0x32a>
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	91 05       	cpc	r25, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <main+0x316>
    1cac:	75 c1       	rjmp	.+746    	; 0x1f98 <main+0x600>
    1cae:	15 c4       	rjmp	.+2090   	; 0x24da <main+0xb42>
    1cb0:	84 30       	cpi	r24, 0x04	; 4
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <main+0x320>
    1cb6:	9c c2       	rjmp	.+1336   	; 0x21f0 <main+0x858>
    1cb8:	8c 30       	cpi	r24, 0x0C	; 12
    1cba:	91 05       	cpc	r25, r1
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <main+0x328>
    1cbe:	da c3       	rjmp	.+1972   	; 0x2474 <main+0xadc>
    1cc0:	0c c4       	rjmp	.+2072   	; 0x24da <main+0xb42>
			{
			case IDLE:
				key_down = FALSE;
    1cc2:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1cc6:	10 92 3a 01 	sts	0x013A, r1
				mute_on = FALSE;
    1cca:	10 92 3b 01 	sts	0x013B, r1
				mute_end = cur_timer;
    1cce:	80 91 68 01 	lds	r24, 0x0168
    1cd2:	90 91 69 01 	lds	r25, 0x0169
    1cd6:	a0 91 6a 01 	lds	r26, 0x016A
    1cda:	b0 91 6b 01 	lds	r27, 0x016B
    1cde:	80 93 d0 01 	sts	0x01D0, r24
    1ce2:	90 93 d1 01 	sts	0x01D1, r25
    1ce6:	a0 93 d2 01 	sts	0x01D2, r26
    1cea:	b0 93 d3 01 	sts	0x01D3, r27

				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    1cee:	80 91 d4 01 	lds	r24, 0x01D4
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <main+0x360>
    1cf6:	68 c0       	rjmp	.+208    	; 0x1dc8 <main+0x430>
    1cf8:	80 91 bc 01 	lds	r24, 0x01BC
    1cfc:	88 23       	and	r24, r24
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <main+0x36a>
    1d00:	63 c0       	rjmp	.+198    	; 0x1dc8 <main+0x430>
				{
					prev_state = IDLE;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	80 93 72 01 	sts	0x0172, r24
					cur_state = DIT;
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	80 93 c0 01 	sts	0x01C0, r24
					next_state = IDLE;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + dit_length;
    1d14:	80 91 73 01 	lds	r24, 0x0173
    1d18:	90 91 74 01 	lds	r25, 0x0174
    1d1c:	9c 01       	movw	r18, r24
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	80 91 68 01 	lds	r24, 0x0168
    1d26:	90 91 69 01 	lds	r25, 0x0169
    1d2a:	a0 91 6a 01 	lds	r26, 0x016A
    1d2e:	b0 91 6b 01 	lds	r27, 0x016B
    1d32:	82 0f       	add	r24, r18
    1d34:	93 1f       	adc	r25, r19
    1d36:	a4 1f       	adc	r26, r20
    1d38:	b5 1f       	adc	r27, r21
    1d3a:	80 93 cc 01 	sts	0x01CC, r24
    1d3e:	90 93 cd 01 	sts	0x01CD, r25
    1d42:	a0 93 ce 01 	sts	0x01CE, r26
    1d46:	b0 93 cf 01 	sts	0x01CF, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1d4a:	80 91 68 01 	lds	r24, 0x0168
    1d4e:	90 91 69 01 	lds	r25, 0x0169
    1d52:	a0 91 6a 01 	lds	r26, 0x016A
    1d56:	b0 91 6b 01 	lds	r27, 0x016B
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	a1 1d       	adc	r26, r1
    1d5e:	b1 1d       	adc	r27, r1
    1d60:	80 93 a8 01 	sts	0x01A8, r24
    1d64:	90 93 a9 01 	sts	0x01A9, r25
    1d68:	a0 93 aa 01 	sts	0x01AA, r26
    1d6c:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1d70:	80 91 cc 01 	lds	r24, 0x01CC
    1d74:	90 91 cd 01 	lds	r25, 0x01CD
    1d78:	a0 91 ce 01 	lds	r26, 0x01CE
    1d7c:	b0 91 cf 01 	lds	r27, 0x01CF
    1d80:	80 93 e9 01 	sts	0x01E9, r24
    1d84:	90 93 ea 01 	sts	0x01EA, r25
    1d88:	a0 93 eb 01 	sts	0x01EB, r26
    1d8c:	b0 93 ec 01 	sts	0x01EC, r27
					mute_start = cur_timer;
    1d90:	80 91 68 01 	lds	r24, 0x0168
    1d94:	90 91 69 01 	lds	r25, 0x0169
    1d98:	a0 91 6a 01 	lds	r26, 0x016A
    1d9c:	b0 91 6b 01 	lds	r27, 0x016B
    1da0:	80 93 e3 01 	sts	0x01E3, r24
    1da4:	90 93 e4 01 	sts	0x01E4, r25
    1da8:	a0 93 e5 01 	sts	0x01E5, r26
    1dac:	b0 93 e6 01 	sts	0x01E6, r27
					mute_end = UINT32_MAX;
    1db0:	8f ef       	ldi	r24, 0xFF	; 255
    1db2:	9f ef       	ldi	r25, 0xFF	; 255
    1db4:	dc 01       	movw	r26, r24
    1db6:	80 93 d0 01 	sts	0x01D0, r24
    1dba:	90 93 d1 01 	sts	0x01D1, r25
    1dbe:	a0 93 d2 01 	sts	0x01D2, r26
    1dc2:	b0 93 d3 01 	sts	0x01D3, r27
    1dc6:	e7 c0       	rjmp	.+462    	; 0x1f96 <main+0x5fe>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    1dc8:	80 91 bc 01 	lds	r24, 0x01BC
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <main+0x43a>
    1dd0:	6d c0       	rjmp	.+218    	; 0x1eac <main+0x514>
    1dd2:	80 91 d4 01 	lds	r24, 0x01D4
    1dd6:	88 23       	and	r24, r24
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <main+0x444>
    1dda:	68 c0       	rjmp	.+208    	; 0x1eac <main+0x514>
				{
					prev_state = IDLE;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	80 93 72 01 	sts	0x0172, r24
					cur_state = DAH;
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	80 93 c0 01 	sts	0x01C0, r24
					next_state = IDLE;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + (dit_length * 3);
    1dee:	20 91 73 01 	lds	r18, 0x0173
    1df2:	30 91 74 01 	lds	r19, 0x0174
    1df6:	c9 01       	movw	r24, r18
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	82 0f       	add	r24, r18
    1dfe:	93 1f       	adc	r25, r19
    1e00:	9c 01       	movw	r18, r24
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	80 91 68 01 	lds	r24, 0x0168
    1e0a:	90 91 69 01 	lds	r25, 0x0169
    1e0e:	a0 91 6a 01 	lds	r26, 0x016A
    1e12:	b0 91 6b 01 	lds	r27, 0x016B
    1e16:	82 0f       	add	r24, r18
    1e18:	93 1f       	adc	r25, r19
    1e1a:	a4 1f       	adc	r26, r20
    1e1c:	b5 1f       	adc	r27, r21
    1e1e:	80 93 cc 01 	sts	0x01CC, r24
    1e22:	90 93 cd 01 	sts	0x01CD, r25
    1e26:	a0 93 ce 01 	sts	0x01CE, r26
    1e2a:	b0 93 cf 01 	sts	0x01CF, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1e2e:	80 91 68 01 	lds	r24, 0x0168
    1e32:	90 91 69 01 	lds	r25, 0x0169
    1e36:	a0 91 6a 01 	lds	r26, 0x016A
    1e3a:	b0 91 6b 01 	lds	r27, 0x016B
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	a1 1d       	adc	r26, r1
    1e42:	b1 1d       	adc	r27, r1
    1e44:	80 93 a8 01 	sts	0x01A8, r24
    1e48:	90 93 a9 01 	sts	0x01A9, r25
    1e4c:	a0 93 aa 01 	sts	0x01AA, r26
    1e50:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1e54:	80 91 cc 01 	lds	r24, 0x01CC
    1e58:	90 91 cd 01 	lds	r25, 0x01CD
    1e5c:	a0 91 ce 01 	lds	r26, 0x01CE
    1e60:	b0 91 cf 01 	lds	r27, 0x01CF
    1e64:	80 93 e9 01 	sts	0x01E9, r24
    1e68:	90 93 ea 01 	sts	0x01EA, r25
    1e6c:	a0 93 eb 01 	sts	0x01EB, r26
    1e70:	b0 93 ec 01 	sts	0x01EC, r27
					mute_start = cur_timer;
    1e74:	80 91 68 01 	lds	r24, 0x0168
    1e78:	90 91 69 01 	lds	r25, 0x0169
    1e7c:	a0 91 6a 01 	lds	r26, 0x016A
    1e80:	b0 91 6b 01 	lds	r27, 0x016B
    1e84:	80 93 e3 01 	sts	0x01E3, r24
    1e88:	90 93 e4 01 	sts	0x01E4, r25
    1e8c:	a0 93 e5 01 	sts	0x01E5, r26
    1e90:	b0 93 e6 01 	sts	0x01E6, r27
					mute_end = UINT32_MAX;
    1e94:	8f ef       	ldi	r24, 0xFF	; 255
    1e96:	9f ef       	ldi	r25, 0xFF	; 255
    1e98:	dc 01       	movw	r26, r24
    1e9a:	80 93 d0 01 	sts	0x01D0, r24
    1e9e:	90 93 d1 01 	sts	0x01D1, r25
    1ea2:	a0 93 d2 01 	sts	0x01D2, r26
    1ea6:	b0 93 d3 01 	sts	0x01D3, r27
    1eaa:	75 c0       	rjmp	.+234    	; 0x1f96 <main+0x5fe>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    1eac:	80 91 d4 01 	lds	r24, 0x01D4
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <main+0x51e>
    1eb4:	6d c0       	rjmp	.+218    	; 0x1f90 <main+0x5f8>
    1eb6:	80 91 bc 01 	lds	r24, 0x01BC
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <main+0x528>
    1ebe:	68 c0       	rjmp	.+208    	; 0x1f90 <main+0x5f8>
    1ec0:	80 91 a7 01 	lds	r24, 0x01A7
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <main+0x532>
    1ec8:	63 c0       	rjmp	.+198    	; 0x1f90 <main+0x5f8>
				{
					prev_state = IDLE;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	80 93 72 01 	sts	0x0172, r24
					cur_state = DIT;
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	80 93 c0 01 	sts	0x01C0, r24
					next_state = DAH;
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + dit_length;
    1edc:	80 91 73 01 	lds	r24, 0x0173
    1ee0:	90 91 74 01 	lds	r25, 0x0174
    1ee4:	9c 01       	movw	r18, r24
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	80 91 68 01 	lds	r24, 0x0168
    1eee:	90 91 69 01 	lds	r25, 0x0169
    1ef2:	a0 91 6a 01 	lds	r26, 0x016A
    1ef6:	b0 91 6b 01 	lds	r27, 0x016B
    1efa:	82 0f       	add	r24, r18
    1efc:	93 1f       	adc	r25, r19
    1efe:	a4 1f       	adc	r26, r20
    1f00:	b5 1f       	adc	r27, r21
    1f02:	80 93 cc 01 	sts	0x01CC, r24
    1f06:	90 93 cd 01 	sts	0x01CD, r25
    1f0a:	a0 93 ce 01 	sts	0x01CE, r26
    1f0e:	b0 93 cf 01 	sts	0x01CF, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1f12:	80 91 68 01 	lds	r24, 0x0168
    1f16:	90 91 69 01 	lds	r25, 0x0169
    1f1a:	a0 91 6a 01 	lds	r26, 0x016A
    1f1e:	b0 91 6b 01 	lds	r27, 0x016B
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	a1 1d       	adc	r26, r1
    1f26:	b1 1d       	adc	r27, r1
    1f28:	80 93 a8 01 	sts	0x01A8, r24
    1f2c:	90 93 a9 01 	sts	0x01A9, r25
    1f30:	a0 93 aa 01 	sts	0x01AA, r26
    1f34:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1f38:	80 91 cc 01 	lds	r24, 0x01CC
    1f3c:	90 91 cd 01 	lds	r25, 0x01CD
    1f40:	a0 91 ce 01 	lds	r26, 0x01CE
    1f44:	b0 91 cf 01 	lds	r27, 0x01CF
    1f48:	80 93 e9 01 	sts	0x01E9, r24
    1f4c:	90 93 ea 01 	sts	0x01EA, r25
    1f50:	a0 93 eb 01 	sts	0x01EB, r26
    1f54:	b0 93 ec 01 	sts	0x01EC, r27
					mute_start = cur_timer;
    1f58:	80 91 68 01 	lds	r24, 0x0168
    1f5c:	90 91 69 01 	lds	r25, 0x0169
    1f60:	a0 91 6a 01 	lds	r26, 0x016A
    1f64:	b0 91 6b 01 	lds	r27, 0x016B
    1f68:	80 93 e3 01 	sts	0x01E3, r24
    1f6c:	90 93 e4 01 	sts	0x01E4, r25
    1f70:	a0 93 e5 01 	sts	0x01E5, r26
    1f74:	b0 93 e6 01 	sts	0x01E6, r27
					mute_end = UINT32_MAX;
    1f78:	8f ef       	ldi	r24, 0xFF	; 255
    1f7a:	9f ef       	ldi	r25, 0xFF	; 255
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	80 93 d0 01 	sts	0x01D0, r24
    1f82:	90 93 d1 01 	sts	0x01D1, r25
    1f86:	a0 93 d2 01 	sts	0x01D2, r26
    1f8a:	b0 93 d3 01 	sts	0x01D3, r27
    1f8e:	03 c0       	rjmp	.+6      	; 0x1f96 <main+0x5fe>
				}
				else
				{
					cur_state = IDLE;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	80 93 c0 01 	sts	0x01C0, r24
				}

				break;
    1f96:	a2 c2       	rjmp	.+1348   	; 0x24dc <main+0xb44>

			case DIT:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1f98:	80 91 da 01 	lds	r24, 0x01DA
    1f9c:	90 91 db 01 	lds	r25, 0x01DB
    1fa0:	a0 91 dc 01 	lds	r26, 0x01DC
    1fa4:	b0 91 dd 01 	lds	r27, 0x01DD
    1fa8:	81 3b       	cpi	r24, 0xB1	; 177
    1faa:	e6 ef       	ldi	r30, 0xF6	; 246
    1fac:	9e 07       	cpc	r25, r30
    1fae:	ea ed       	ldi	r30, 0xDA	; 218
    1fb0:	ae 07       	cpc	r26, r30
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	be 07       	cpc	r27, r30
    1fb6:	80 f4       	brcc	.+32     	; 0x1fd8 <main+0x640>
    1fb8:	80 91 da 01 	lds	r24, 0x01DA
    1fbc:	90 91 db 01 	lds	r25, 0x01DB
    1fc0:	a0 91 dc 01 	lds	r26, 0x01DC
    1fc4:	b0 91 dd 01 	lds	r27, 0x01DD
    1fc8:	80 38       	cpi	r24, 0x80	; 128
    1fca:	ff e9       	ldi	r31, 0x9F	; 159
    1fcc:	9f 07       	cpc	r25, r31
    1fce:	f5 ed       	ldi	r31, 0xD5	; 213
    1fd0:	af 07       	cpc	r26, r31
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	bf 07       	cpc	r27, r31
    1fd6:	38 f4       	brcc	.+14     	; 0x1fe6 <main+0x64e>
				{
					key_down = FALSE;
    1fd8:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    1fdc:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    1fe0:	10 92 3b 01 	sts	0x013B, r1
    1fe4:	09 c0       	rjmp	.+18     	; 0x1ff8 <main+0x660>
				}
				else
				{
					key_down = TRUE;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	80 93 3b 01 	sts	0x013B, r24
				}

				if(cur_timer > cur_state_end)
    1ff8:	20 91 68 01 	lds	r18, 0x0168
    1ffc:	30 91 69 01 	lds	r19, 0x0169
    2000:	40 91 6a 01 	lds	r20, 0x016A
    2004:	50 91 6b 01 	lds	r21, 0x016B
    2008:	80 91 cc 01 	lds	r24, 0x01CC
    200c:	90 91 cd 01 	lds	r25, 0x01CD
    2010:	a0 91 ce 01 	lds	r26, 0x01CE
    2014:	b0 91 cf 01 	lds	r27, 0x01CF
    2018:	82 17       	cp	r24, r18
    201a:	93 07       	cpc	r25, r19
    201c:	a4 07       	cpc	r26, r20
    201e:	b5 07       	cpc	r27, r21
    2020:	08 f0       	brcs	.+2      	; 0x2024 <main+0x68c>
    2022:	44 c0       	rjmp	.+136    	; 0x20ac <main+0x714>
				{
					prev_state = DIT;
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	80 93 72 01 	sts	0x0172, r24
					cur_state = DITDELAY;
    202a:	84 e0       	ldi	r24, 0x04	; 4
    202c:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + dit_length;
    2030:	80 91 73 01 	lds	r24, 0x0173
    2034:	90 91 74 01 	lds	r25, 0x0174
    2038:	9c 01       	movw	r18, r24
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	80 91 68 01 	lds	r24, 0x0168
    2042:	90 91 69 01 	lds	r25, 0x0169
    2046:	a0 91 6a 01 	lds	r26, 0x016A
    204a:	b0 91 6b 01 	lds	r27, 0x016B
    204e:	82 0f       	add	r24, r18
    2050:	93 1f       	adc	r25, r19
    2052:	a4 1f       	adc	r26, r20
    2054:	b5 1f       	adc	r27, r21
    2056:	80 93 cc 01 	sts	0x01CC, r24
    205a:	90 93 cd 01 	sts	0x01CD, r25
    205e:	a0 93 ce 01 	sts	0x01CE, r26
    2062:	b0 93 cf 01 	sts	0x01CF, r27
					mute_start = cur_timer;
    2066:	80 91 68 01 	lds	r24, 0x0168
    206a:	90 91 69 01 	lds	r25, 0x0169
    206e:	a0 91 6a 01 	lds	r26, 0x016A
    2072:	b0 91 6b 01 	lds	r27, 0x016B
    2076:	80 93 e3 01 	sts	0x01E3, r24
    207a:	90 93 e4 01 	sts	0x01E4, r25
    207e:	a0 93 e5 01 	sts	0x01E5, r26
    2082:	b0 93 e6 01 	sts	0x01E6, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    2086:	80 91 cc 01 	lds	r24, 0x01CC
    208a:	90 91 cd 01 	lds	r25, 0x01CD
    208e:	a0 91 ce 01 	lds	r26, 0x01CE
    2092:	b0 91 cf 01 	lds	r27, 0x01CF
    2096:	c2 96       	adiw	r24, 0x32	; 50
    2098:	a1 1d       	adc	r26, r1
    209a:	b1 1d       	adc	r27, r1
    209c:	80 93 d0 01 	sts	0x01D0, r24
    20a0:	90 93 d1 01 	sts	0x01D1, r25
    20a4:	a0 93 d2 01 	sts	0x01D2, r26
    20a8:	b0 93 d3 01 	sts	0x01D3, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    20ac:	80 91 bc 01 	lds	r24, 0x01BC
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	39 f4       	brne	.+14     	; 0x20c2 <main+0x72a>
    20b4:	80 91 a7 01 	lds	r24, 0x01A7
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	19 f4       	brne	.+6      	; 0x20c2 <main+0x72a>
					next_state = DAH;
    20bc:	83 e0       	ldi	r24, 0x03	; 3
    20be:	80 93 a7 01 	sts	0x01A7, r24

				break;
    20c2:	0c c2       	rjmp	.+1048   	; 0x24dc <main+0xb44>

			case DAH:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    20c4:	80 91 da 01 	lds	r24, 0x01DA
    20c8:	90 91 db 01 	lds	r25, 0x01DB
    20cc:	a0 91 dc 01 	lds	r26, 0x01DC
    20d0:	b0 91 dd 01 	lds	r27, 0x01DD
    20d4:	81 3b       	cpi	r24, 0xB1	; 177
    20d6:	26 ef       	ldi	r18, 0xF6	; 246
    20d8:	92 07       	cpc	r25, r18
    20da:	2a ed       	ldi	r18, 0xDA	; 218
    20dc:	a2 07       	cpc	r26, r18
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	b2 07       	cpc	r27, r18
    20e2:	80 f4       	brcc	.+32     	; 0x2104 <main+0x76c>
    20e4:	80 91 da 01 	lds	r24, 0x01DA
    20e8:	90 91 db 01 	lds	r25, 0x01DB
    20ec:	a0 91 dc 01 	lds	r26, 0x01DC
    20f0:	b0 91 dd 01 	lds	r27, 0x01DD
    20f4:	80 38       	cpi	r24, 0x80	; 128
    20f6:	ef e9       	ldi	r30, 0x9F	; 159
    20f8:	9e 07       	cpc	r25, r30
    20fa:	e5 ed       	ldi	r30, 0xD5	; 213
    20fc:	ae 07       	cpc	r26, r30
    20fe:	e0 e0       	ldi	r30, 0x00	; 0
    2100:	be 07       	cpc	r27, r30
    2102:	38 f4       	brcc	.+14     	; 0x2112 <main+0x77a>
				{
					key_down = FALSE;
    2104:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    2108:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    210c:	10 92 3b 01 	sts	0x013B, r1
    2110:	09 c0       	rjmp	.+18     	; 0x2124 <main+0x78c>
				}
				else
				{
					key_down = TRUE;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	80 93 3b 01 	sts	0x013B, r24
				}

				if(cur_timer > cur_state_end)
    2124:	20 91 68 01 	lds	r18, 0x0168
    2128:	30 91 69 01 	lds	r19, 0x0169
    212c:	40 91 6a 01 	lds	r20, 0x016A
    2130:	50 91 6b 01 	lds	r21, 0x016B
    2134:	80 91 cc 01 	lds	r24, 0x01CC
    2138:	90 91 cd 01 	lds	r25, 0x01CD
    213c:	a0 91 ce 01 	lds	r26, 0x01CE
    2140:	b0 91 cf 01 	lds	r27, 0x01CF
    2144:	82 17       	cp	r24, r18
    2146:	93 07       	cpc	r25, r19
    2148:	a4 07       	cpc	r26, r20
    214a:	b5 07       	cpc	r27, r21
    214c:	08 f0       	brcs	.+2      	; 0x2150 <main+0x7b8>
    214e:	44 c0       	rjmp	.+136    	; 0x21d8 <main+0x840>
				{
					prev_state = DAH;
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	80 93 72 01 	sts	0x0172, r24
					cur_state = DITDELAY;
    2156:	84 e0       	ldi	r24, 0x04	; 4
    2158:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + dit_length;
    215c:	80 91 73 01 	lds	r24, 0x0173
    2160:	90 91 74 01 	lds	r25, 0x0174
    2164:	9c 01       	movw	r18, r24
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	80 91 68 01 	lds	r24, 0x0168
    216e:	90 91 69 01 	lds	r25, 0x0169
    2172:	a0 91 6a 01 	lds	r26, 0x016A
    2176:	b0 91 6b 01 	lds	r27, 0x016B
    217a:	82 0f       	add	r24, r18
    217c:	93 1f       	adc	r25, r19
    217e:	a4 1f       	adc	r26, r20
    2180:	b5 1f       	adc	r27, r21
    2182:	80 93 cc 01 	sts	0x01CC, r24
    2186:	90 93 cd 01 	sts	0x01CD, r25
    218a:	a0 93 ce 01 	sts	0x01CE, r26
    218e:	b0 93 cf 01 	sts	0x01CF, r27
					mute_start = cur_timer;
    2192:	80 91 68 01 	lds	r24, 0x0168
    2196:	90 91 69 01 	lds	r25, 0x0169
    219a:	a0 91 6a 01 	lds	r26, 0x016A
    219e:	b0 91 6b 01 	lds	r27, 0x016B
    21a2:	80 93 e3 01 	sts	0x01E3, r24
    21a6:	90 93 e4 01 	sts	0x01E4, r25
    21aa:	a0 93 e5 01 	sts	0x01E5, r26
    21ae:	b0 93 e6 01 	sts	0x01E6, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    21b2:	80 91 cc 01 	lds	r24, 0x01CC
    21b6:	90 91 cd 01 	lds	r25, 0x01CD
    21ba:	a0 91 ce 01 	lds	r26, 0x01CE
    21be:	b0 91 cf 01 	lds	r27, 0x01CF
    21c2:	c2 96       	adiw	r24, 0x32	; 50
    21c4:	a1 1d       	adc	r26, r1
    21c6:	b1 1d       	adc	r27, r1
    21c8:	80 93 d0 01 	sts	0x01D0, r24
    21cc:	90 93 d1 01 	sts	0x01D1, r25
    21d0:	a0 93 d2 01 	sts	0x01D2, r26
    21d4:	b0 93 d3 01 	sts	0x01D3, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    21d8:	80 91 d4 01 	lds	r24, 0x01D4
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	39 f4       	brne	.+14     	; 0x21ee <main+0x856>
    21e0:	80 91 a7 01 	lds	r24, 0x01A7
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	19 f4       	brne	.+6      	; 0x21ee <main+0x856>
					next_state = DIT;
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	80 93 a7 01 	sts	0x01A7, r24

				break;
    21ee:	76 c1       	rjmp	.+748    	; 0x24dc <main+0xb44>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    21f0:	20 91 68 01 	lds	r18, 0x0168
    21f4:	30 91 69 01 	lds	r19, 0x0169
    21f8:	40 91 6a 01 	lds	r20, 0x016A
    21fc:	50 91 6b 01 	lds	r21, 0x016B
    2200:	80 91 cc 01 	lds	r24, 0x01CC
    2204:	90 91 cd 01 	lds	r25, 0x01CD
    2208:	a0 91 ce 01 	lds	r26, 0x01CE
    220c:	b0 91 cf 01 	lds	r27, 0x01CF
    2210:	82 17       	cp	r24, r18
    2212:	93 07       	cpc	r25, r19
    2214:	a4 07       	cpc	r26, r20
    2216:	b5 07       	cpc	r27, r21
    2218:	08 f0       	brcs	.+2      	; 0x221c <main+0x884>
    221a:	e2 c0       	rjmp	.+452    	; 0x23e0 <main+0xa48>
				{
					if(next_state == DIT)
    221c:	80 91 a7 01 	lds	r24, 0x01A7
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	09 f0       	breq	.+2      	; 0x2226 <main+0x88e>
    2224:	5d c0       	rjmp	.+186    	; 0x22e0 <main+0x948>
					{
						cur_state = DIT;
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer + dit_length;
    222c:	80 91 73 01 	lds	r24, 0x0173
    2230:	90 91 74 01 	lds	r25, 0x0174
    2234:	9c 01       	movw	r18, r24
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	80 91 68 01 	lds	r24, 0x0168
    223e:	90 91 69 01 	lds	r25, 0x0169
    2242:	a0 91 6a 01 	lds	r26, 0x016A
    2246:	b0 91 6b 01 	lds	r27, 0x016B
    224a:	82 0f       	add	r24, r18
    224c:	93 1f       	adc	r25, r19
    224e:	a4 1f       	adc	r26, r20
    2250:	b5 1f       	adc	r27, r21
    2252:	80 93 cc 01 	sts	0x01CC, r24
    2256:	90 93 cd 01 	sts	0x01CD, r25
    225a:	a0 93 ce 01 	sts	0x01CE, r26
    225e:	b0 93 cf 01 	sts	0x01CF, r27
						tx_start = cur_timer + TX_ON_DELAY;
    2262:	80 91 68 01 	lds	r24, 0x0168
    2266:	90 91 69 01 	lds	r25, 0x0169
    226a:	a0 91 6a 01 	lds	r26, 0x016A
    226e:	b0 91 6b 01 	lds	r27, 0x016B
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	a1 1d       	adc	r26, r1
    2276:	b1 1d       	adc	r27, r1
    2278:	80 93 a8 01 	sts	0x01A8, r24
    227c:	90 93 a9 01 	sts	0x01A9, r25
    2280:	a0 93 aa 01 	sts	0x01AA, r26
    2284:	b0 93 ab 01 	sts	0x01AB, r27
						tx_end = cur_state_end;
    2288:	80 91 cc 01 	lds	r24, 0x01CC
    228c:	90 91 cd 01 	lds	r25, 0x01CD
    2290:	a0 91 ce 01 	lds	r26, 0x01CE
    2294:	b0 91 cf 01 	lds	r27, 0x01CF
    2298:	80 93 e9 01 	sts	0x01E9, r24
    229c:	90 93 ea 01 	sts	0x01EA, r25
    22a0:	a0 93 eb 01 	sts	0x01EB, r26
    22a4:	b0 93 ec 01 	sts	0x01EC, r27
						mute_start = cur_timer;
    22a8:	80 91 68 01 	lds	r24, 0x0168
    22ac:	90 91 69 01 	lds	r25, 0x0169
    22b0:	a0 91 6a 01 	lds	r26, 0x016A
    22b4:	b0 91 6b 01 	lds	r27, 0x016B
    22b8:	80 93 e3 01 	sts	0x01E3, r24
    22bc:	90 93 e4 01 	sts	0x01E4, r25
    22c0:	a0 93 e5 01 	sts	0x01E5, r26
    22c4:	b0 93 e6 01 	sts	0x01E6, r27
						mute_end = UINT32_MAX;
    22c8:	8f ef       	ldi	r24, 0xFF	; 255
    22ca:	9f ef       	ldi	r25, 0xFF	; 255
    22cc:	dc 01       	movw	r26, r24
    22ce:	80 93 d0 01 	sts	0x01D0, r24
    22d2:	90 93 d1 01 	sts	0x01D1, r25
    22d6:	a0 93 d2 01 	sts	0x01D2, r26
    22da:	b0 93 d3 01 	sts	0x01D3, r27
    22de:	7a c0       	rjmp	.+244    	; 0x23d4 <main+0xa3c>
					}
					else if(next_state == DAH)
    22e0:	80 91 a7 01 	lds	r24, 0x01A7
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	09 f0       	breq	.+2      	; 0x22ea <main+0x952>
    22e8:	62 c0       	rjmp	.+196    	; 0x23ae <main+0xa16>
					{
						cur_state = DAH;
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer + (dit_length * 3);
    22f0:	20 91 73 01 	lds	r18, 0x0173
    22f4:	30 91 74 01 	lds	r19, 0x0174
    22f8:	c9 01       	movw	r24, r18
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	82 0f       	add	r24, r18
    2300:	93 1f       	adc	r25, r19
    2302:	9c 01       	movw	r18, r24
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	80 91 68 01 	lds	r24, 0x0168
    230c:	90 91 69 01 	lds	r25, 0x0169
    2310:	a0 91 6a 01 	lds	r26, 0x016A
    2314:	b0 91 6b 01 	lds	r27, 0x016B
    2318:	82 0f       	add	r24, r18
    231a:	93 1f       	adc	r25, r19
    231c:	a4 1f       	adc	r26, r20
    231e:	b5 1f       	adc	r27, r21
    2320:	80 93 cc 01 	sts	0x01CC, r24
    2324:	90 93 cd 01 	sts	0x01CD, r25
    2328:	a0 93 ce 01 	sts	0x01CE, r26
    232c:	b0 93 cf 01 	sts	0x01CF, r27
						tx_start = cur_timer + TX_ON_DELAY;
    2330:	80 91 68 01 	lds	r24, 0x0168
    2334:	90 91 69 01 	lds	r25, 0x0169
    2338:	a0 91 6a 01 	lds	r26, 0x016A
    233c:	b0 91 6b 01 	lds	r27, 0x016B
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	a1 1d       	adc	r26, r1
    2344:	b1 1d       	adc	r27, r1
    2346:	80 93 a8 01 	sts	0x01A8, r24
    234a:	90 93 a9 01 	sts	0x01A9, r25
    234e:	a0 93 aa 01 	sts	0x01AA, r26
    2352:	b0 93 ab 01 	sts	0x01AB, r27
						tx_end = cur_state_end;
    2356:	80 91 cc 01 	lds	r24, 0x01CC
    235a:	90 91 cd 01 	lds	r25, 0x01CD
    235e:	a0 91 ce 01 	lds	r26, 0x01CE
    2362:	b0 91 cf 01 	lds	r27, 0x01CF
    2366:	80 93 e9 01 	sts	0x01E9, r24
    236a:	90 93 ea 01 	sts	0x01EA, r25
    236e:	a0 93 eb 01 	sts	0x01EB, r26
    2372:	b0 93 ec 01 	sts	0x01EC, r27
						mute_start = cur_timer;
    2376:	80 91 68 01 	lds	r24, 0x0168
    237a:	90 91 69 01 	lds	r25, 0x0169
    237e:	a0 91 6a 01 	lds	r26, 0x016A
    2382:	b0 91 6b 01 	lds	r27, 0x016B
    2386:	80 93 e3 01 	sts	0x01E3, r24
    238a:	90 93 e4 01 	sts	0x01E4, r25
    238e:	a0 93 e5 01 	sts	0x01E5, r26
    2392:	b0 93 e6 01 	sts	0x01E6, r27
						mute_end = UINT32_MAX;
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	9f ef       	ldi	r25, 0xFF	; 255
    239a:	dc 01       	movw	r26, r24
    239c:	80 93 d0 01 	sts	0x01D0, r24
    23a0:	90 93 d1 01 	sts	0x01D1, r25
    23a4:	a0 93 d2 01 	sts	0x01D2, r26
    23a8:	b0 93 d3 01 	sts	0x01D3, r27
    23ac:	13 c0       	rjmp	.+38     	; 0x23d4 <main+0xa3c>
					}
					else
					{
						cur_state = IDLE;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer;
    23b4:	80 91 68 01 	lds	r24, 0x0168
    23b8:	90 91 69 01 	lds	r25, 0x0169
    23bc:	a0 91 6a 01 	lds	r26, 0x016A
    23c0:	b0 91 6b 01 	lds	r27, 0x016B
    23c4:	80 93 cc 01 	sts	0x01CC, r24
    23c8:	90 93 cd 01 	sts	0x01CD, r25
    23cc:	a0 93 ce 01 	sts	0x01CE, r26
    23d0:	b0 93 cf 01 	sts	0x01CF, r27
					}

					prev_state = DITDELAY;
    23d4:	84 e0       	ldi	r24, 0x04	; 4
    23d6:	80 93 72 01 	sts	0x0172, r24
					next_state = IDLE;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	80 93 a7 01 	sts	0x01A7, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    23e0:	80 91 d4 01 	lds	r24, 0x01D4
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	61 f4       	brne	.+24     	; 0x2400 <main+0xa68>
    23e8:	80 91 72 01 	lds	r24, 0x0172
    23ec:	83 30       	cpi	r24, 0x03	; 3
    23ee:	41 f4       	brne	.+16     	; 0x2400 <main+0xa68>
    23f0:	80 91 a7 01 	lds	r24, 0x01A7
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	21 f4       	brne	.+8      	; 0x2400 <main+0xa68>
					next_state = DIT;
    23f8:	82 e0       	ldi	r24, 0x02	; 2
    23fa:	80 93 a7 01 	sts	0x01A7, r24
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <main+0xa86>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    2400:	80 91 bc 01 	lds	r24, 0x01BC
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	59 f4       	brne	.+22     	; 0x241e <main+0xa86>
    2408:	80 91 72 01 	lds	r24, 0x0172
    240c:	82 30       	cpi	r24, 0x02	; 2
    240e:	39 f4       	brne	.+14     	; 0x241e <main+0xa86>
    2410:	80 91 a7 01 	lds	r24, 0x01A7
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	19 f4       	brne	.+6      	; 0x241e <main+0xa86>
					next_state = DAH;
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	80 93 a7 01 	sts	0x01A7, r24

				key_down = FALSE;
    241e:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2422:	10 92 3a 01 	sts	0x013A, r1
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    2426:	80 91 da 01 	lds	r24, 0x01DA
    242a:	90 91 db 01 	lds	r25, 0x01DB
    242e:	a0 91 dc 01 	lds	r26, 0x01DC
    2432:	b0 91 dd 01 	lds	r27, 0x01DD
    2436:	81 3b       	cpi	r24, 0xB1	; 177
    2438:	f6 ef       	ldi	r31, 0xF6	; 246
    243a:	9f 07       	cpc	r25, r31
    243c:	fa ed       	ldi	r31, 0xDA	; 218
    243e:	af 07       	cpc	r26, r31
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	bf 07       	cpc	r27, r31
    2444:	80 f4       	brcc	.+32     	; 0x2466 <main+0xace>
    2446:	80 91 da 01 	lds	r24, 0x01DA
    244a:	90 91 db 01 	lds	r25, 0x01DB
    244e:	a0 91 dc 01 	lds	r26, 0x01DC
    2452:	b0 91 dd 01 	lds	r27, 0x01DD
    2456:	80 38       	cpi	r24, 0x80	; 128
    2458:	2f e9       	ldi	r18, 0x9F	; 159
    245a:	92 07       	cpc	r25, r18
    245c:	25 ed       	ldi	r18, 0xD5	; 213
    245e:	a2 07       	cpc	r26, r18
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	b2 07       	cpc	r27, r18
    2464:	18 f4       	brcc	.+6      	; 0x246c <main+0xad4>
					mute_on = FALSE;
    2466:	10 92 3b 01 	sts	0x013B, r1
    246a:	03 c0       	rjmp	.+6      	; 0x2472 <main+0xada>
				else
					mute_on = TRUE;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	80 93 3b 01 	sts	0x013B, r24
				break;
    2472:	34 c0       	rjmp	.+104    	; 0x24dc <main+0xb44>

			case EXIT:
				key_down = FALSE;
    2474:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2478:	10 92 3a 01 	sts	0x013A, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    247c:	10 92 3b 01 	sts	0x013B, r1

				if(cur_timer > cur_state_end)
    2480:	20 91 68 01 	lds	r18, 0x0168
    2484:	30 91 69 01 	lds	r19, 0x0169
    2488:	40 91 6a 01 	lds	r20, 0x016A
    248c:	50 91 6b 01 	lds	r21, 0x016B
    2490:	80 91 cc 01 	lds	r24, 0x01CC
    2494:	90 91 cd 01 	lds	r25, 0x01CD
    2498:	a0 91 ce 01 	lds	r26, 0x01CE
    249c:	b0 91 cf 01 	lds	r27, 0x01CF
    24a0:	82 17       	cp	r24, r18
    24a2:	93 07       	cpc	r25, r19
    24a4:	a4 07       	cpc	r26, r20
    24a6:	b5 07       	cpc	r27, r21
    24a8:	18 f4       	brcc	.+6      	; 0x24b0 <main+0xb18>
				{
					cur_state = IDLE;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 c0 01 	sts	0x01C0, r24
				}

				sleep_timer = cur_timer + SLEEP_DELAY;
    24b0:	80 91 68 01 	lds	r24, 0x0168
    24b4:	90 91 69 01 	lds	r25, 0x0169
    24b8:	a0 91 6a 01 	lds	r26, 0x016A
    24bc:	b0 91 6b 01 	lds	r27, 0x016B
    24c0:	84 5d       	subi	r24, 0xD4	; 212
    24c2:	9e 4f       	sbci	r25, 0xFE	; 254
    24c4:	af 4f       	sbci	r26, 0xFF	; 255
    24c6:	bf 4f       	sbci	r27, 0xFF	; 255
    24c8:	80 93 c5 01 	sts	0x01C5, r24
    24cc:	90 93 c6 01 	sts	0x01C6, r25
    24d0:	a0 93 c7 01 	sts	0x01C7, r26
    24d4:	b0 93 c8 01 	sts	0x01C8, r27
				break;
    24d8:	01 c0       	rjmp	.+2      	; 0x24dc <main+0xb44>

			default:
				break;
    24da:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    24dc:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <main+0x1a1c>

		case ANNOUNCE:
			switch(cur_state)
    24e0:	80 91 c0 01 	lds	r24, 0x01C0
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	84 30       	cpi	r24, 0x04	; 4
    24ea:	91 05       	cpc	r25, r1
    24ec:	44 f4       	brge	.+16     	; 0x24fe <main+0xb66>
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	91 05       	cpc	r25, r1
    24f2:	0c f0       	brlt	.+2      	; 0x24f6 <main+0xb5e>
    24f4:	49 c1       	rjmp	.+658    	; 0x2788 <main+0xdf0>
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	91 05       	cpc	r25, r1
    24fa:	31 f0       	breq	.+12     	; 0x2508 <main+0xb70>
    24fc:	a1 c1       	rjmp	.+834    	; 0x2840 <main+0xea8>
    24fe:	87 30       	cpi	r24, 0x07	; 7
    2500:	91 05       	cpc	r25, r1
    2502:	0c f0       	brlt	.+2      	; 0x2506 <main+0xb6e>
    2504:	9d c1       	rjmp	.+826    	; 0x2840 <main+0xea8>
    2506:	7c c1       	rjmp	.+760    	; 0x2800 <main+0xe68>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2508:	20 91 3e 01 	lds	r18, 0x013E
    250c:	30 91 3f 01 	lds	r19, 0x013F
    2510:	80 91 e7 01 	lds	r24, 0x01E7
    2514:	90 91 e8 01 	lds	r25, 0x01E8
    2518:	28 17       	cp	r18, r24
    251a:	39 07       	cpc	r19, r25
    251c:	c9 f4       	brne	.+50     	; 0x2550 <main+0xbb8>
    251e:	80 91 42 01 	lds	r24, 0x0142
    2522:	88 23       	and	r24, r24
    2524:	a9 f4       	brne	.+42     	; 0x2550 <main+0xbb8>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2526:	80 91 3e 01 	lds	r24, 0x013E
    252a:	90 91 3f 01 	lds	r25, 0x013F
    252e:	fc 01       	movw	r30, r24
    2530:	80 81       	ld	r24, Z
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	80 97       	sbiw	r24, 0x20	; 32
    2538:	88 59       	subi	r24, 0x98	; 152
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	9a 81       	ldd	r25, Y+2	; 0x02
    2544:	fc 01       	movw	r30, r24
    2546:	14 91       	lpm	r17, Z+
    2548:	1b 83       	std	Y+3, r17	; 0x03
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	80 93 42 01 	sts	0x0142, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2550:	80 91 42 01 	lds	r24, 0x0142
    2554:	88 23       	and	r24, r24
    2556:	09 f4       	brne	.+2      	; 0x255a <main+0xbc2>
    2558:	ce c0       	rjmp	.+412    	; 0x26f6 <main+0xd5e>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    255a:	80 91 42 01 	lds	r24, 0x0142
    255e:	80 38       	cpi	r24, 0x80	; 128
    2560:	29 f0       	breq	.+10     	; 0x256c <main+0xbd4>
    2562:	80 91 42 01 	lds	r24, 0x0142
    2566:	8f 3f       	cpi	r24, 0xFF	; 255
    2568:	09 f0       	breq	.+2      	; 0x256c <main+0xbd4>
    256a:	79 c0       	rjmp	.+242    	; 0x265e <main+0xcc6>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    256c:	80 91 42 01 	lds	r24, 0x0142
    2570:	80 38       	cpi	r24, 0x80	; 128
    2572:	21 f5       	brne	.+72     	; 0x25bc <main+0xc24>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2574:	20 91 73 01 	lds	r18, 0x0173
    2578:	30 91 74 01 	lds	r19, 0x0174
    257c:	c9 01       	movw	r24, r18
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	82 0f       	add	r24, r18
    2584:	93 1f       	adc	r25, r19
    2586:	9c 01       	movw	r18, r24
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	80 91 68 01 	lds	r24, 0x0168
    2590:	90 91 69 01 	lds	r25, 0x0169
    2594:	a0 91 6a 01 	lds	r26, 0x016A
    2598:	b0 91 6b 01 	lds	r27, 0x016B
    259c:	82 0f       	add	r24, r18
    259e:	93 1f       	adc	r25, r19
    25a0:	a4 1f       	adc	r26, r20
    25a2:	b5 1f       	adc	r27, r21
    25a4:	80 93 cc 01 	sts	0x01CC, r24
    25a8:	90 93 cd 01 	sts	0x01CD, r25
    25ac:	a0 93 ce 01 	sts	0x01CE, r26
    25b0:	b0 93 cf 01 	sts	0x01CF, r27
							cur_state = DAHDELAY;
    25b4:	85 e0       	ldi	r24, 0x05	; 5
    25b6:	80 93 c0 01 	sts	0x01C0, r24
    25ba:	27 c0       	rjmp	.+78     	; 0x260a <main+0xc72>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    25bc:	20 91 73 01 	lds	r18, 0x0173
    25c0:	30 91 74 01 	lds	r19, 0x0174
    25c4:	c9 01       	movw	r24, r18
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	82 1b       	sub	r24, r18
    25d4:	93 0b       	sbc	r25, r19
    25d6:	9c 01       	movw	r18, r24
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	80 91 68 01 	lds	r24, 0x0168
    25e0:	90 91 69 01 	lds	r25, 0x0169
    25e4:	a0 91 6a 01 	lds	r26, 0x016A
    25e8:	b0 91 6b 01 	lds	r27, 0x016B
    25ec:	82 0f       	add	r24, r18
    25ee:	93 1f       	adc	r25, r19
    25f0:	a4 1f       	adc	r26, r20
    25f2:	b5 1f       	adc	r27, r21
    25f4:	80 93 cc 01 	sts	0x01CC, r24
    25f8:	90 93 cd 01 	sts	0x01CD, r25
    25fc:	a0 93 ce 01 	sts	0x01CE, r26
    2600:	b0 93 cf 01 	sts	0x01CF, r27
							cur_state = DAHDELAY;
    2604:	85 e0       	ldi	r24, 0x05	; 5
    2606:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    260a:	80 91 3e 01 	lds	r24, 0x013E
    260e:	90 91 3f 01 	lds	r25, 0x013F
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	90 93 3f 01 	sts	0x013F, r25
    2618:	80 93 3e 01 	sts	0x013E, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    261c:	80 91 3e 01 	lds	r24, 0x013E
    2620:	90 91 3f 01 	lds	r25, 0x013F
    2624:	fc 01       	movw	r30, r24
    2626:	80 81       	ld	r24, Z
    2628:	88 23       	and	r24, r24
    262a:	19 f4       	brne	.+6      	; 0x2632 <main+0xc9a>
							cur_character = '\0';
    262c:	10 92 42 01 	sts	0x0142, r1
    2630:	15 c0       	rjmp	.+42     	; 0x265c <main+0xcc4>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2632:	80 91 3e 01 	lds	r24, 0x013E
    2636:	90 91 3f 01 	lds	r25, 0x013F
    263a:	fc 01       	movw	r30, r24
    263c:	80 81       	ld	r24, Z
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	80 97       	sbiw	r24, 0x20	; 32
    2644:	88 59       	subi	r24, 0x98	; 152
    2646:	9f 4f       	sbci	r25, 0xFF	; 255
    2648:	9d 83       	std	Y+5, r25	; 0x05
    264a:	8c 83       	std	Y+4, r24	; 0x04
    264c:	8c 81       	ldd	r24, Y+4	; 0x04
    264e:	9d 81       	ldd	r25, Y+5	; 0x05
    2650:	fc 01       	movw	r30, r24
    2652:	14 91       	lpm	r17, Z+
    2654:	1e 83       	std	Y+6, r17	; 0x06
    2656:	8e 81       	ldd	r24, Y+6	; 0x06
    2658:	80 93 42 01 	sts	0x0142, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    265c:	4b c0       	rjmp	.+150    	; 0x26f4 <main+0xd5c>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    265e:	80 91 42 01 	lds	r24, 0x0142
    2662:	88 23       	and	r24, r24
    2664:	24 f5       	brge	.+72     	; 0x26ae <main+0xd16>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2666:	20 91 73 01 	lds	r18, 0x0173
    266a:	30 91 74 01 	lds	r19, 0x0174
    266e:	c9 01       	movw	r24, r18
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	82 0f       	add	r24, r18
    2676:	93 1f       	adc	r25, r19
    2678:	9c 01       	movw	r18, r24
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	80 91 68 01 	lds	r24, 0x0168
    2682:	90 91 69 01 	lds	r25, 0x0169
    2686:	a0 91 6a 01 	lds	r26, 0x016A
    268a:	b0 91 6b 01 	lds	r27, 0x016B
    268e:	82 0f       	add	r24, r18
    2690:	93 1f       	adc	r25, r19
    2692:	a4 1f       	adc	r26, r20
    2694:	b5 1f       	adc	r27, r21
    2696:	80 93 cc 01 	sts	0x01CC, r24
    269a:	90 93 cd 01 	sts	0x01CD, r25
    269e:	a0 93 ce 01 	sts	0x01CE, r26
    26a2:	b0 93 cf 01 	sts	0x01CF, r27
							cur_state = DAH;
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	80 93 c0 01 	sts	0x01C0, r24
    26ac:	1e c0       	rjmp	.+60     	; 0x26ea <main+0xd52>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    26ae:	80 91 73 01 	lds	r24, 0x0173
    26b2:	90 91 74 01 	lds	r25, 0x0174
    26b6:	9c 01       	movw	r18, r24
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	80 91 68 01 	lds	r24, 0x0168
    26c0:	90 91 69 01 	lds	r25, 0x0169
    26c4:	a0 91 6a 01 	lds	r26, 0x016A
    26c8:	b0 91 6b 01 	lds	r27, 0x016B
    26cc:	82 0f       	add	r24, r18
    26ce:	93 1f       	adc	r25, r19
    26d0:	a4 1f       	adc	r26, r20
    26d2:	b5 1f       	adc	r27, r21
    26d4:	80 93 cc 01 	sts	0x01CC, r24
    26d8:	90 93 cd 01 	sts	0x01CD, r25
    26dc:	a0 93 ce 01 	sts	0x01CE, r26
    26e0:	b0 93 cf 01 	sts	0x01CF, r27
							cur_state = DIT;
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    26ea:	80 91 42 01 	lds	r24, 0x0142
    26ee:	88 0f       	add	r24, r24
    26f0:	80 93 42 01 	sts	0x0142, r24
    26f4:	48 c0       	rjmp	.+144    	; 0x2786 <main+0xdee>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    26f6:	80 91 e7 01 	lds	r24, 0x01E7
    26fa:	90 91 e8 01 	lds	r25, 0x01E8
    26fe:	2c e2       	ldi	r18, 0x2C	; 44
    2700:	31 e0       	ldi	r19, 0x01	; 1
    2702:	b9 01       	movw	r22, r18
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	50 e0       	ldi	r21, 0x00	; 0
    2708:	0e 94 77 1b 	call	0x36ee	; 0x36ee <memcpy>
					cur_char_p = announce_buffer;
    270c:	80 91 e7 01 	lds	r24, 0x01E7
    2710:	90 91 e8 01 	lds	r25, 0x01E8
    2714:	90 93 3f 01 	sts	0x013F, r25
    2718:	80 93 3e 01 	sts	0x013E, r24
					cur_character = '\0';
    271c:	10 92 42 01 	sts	0x0142, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    2720:	80 91 c3 01 	lds	r24, 0x01C3
    2724:	90 91 c4 01 	lds	r25, 0x01C4
    2728:	90 93 bb 01 	sts	0x01BB, r25
    272c:	80 93 ba 01 	sts	0x01BA, r24
					set_st_freq(st_freq);
    2730:	80 91 ba 01 	lds	r24, 0x01BA
    2734:	90 91 bb 01 	lds	r25, 0x01BB
    2738:	cc 01       	movw	r24, r24
    273a:	a0 e0       	ldi	r26, 0x00	; 0
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 a5 0c 	call	0x194a	; 0x194a <set_st_freq>

					wpm = prev_wpm;
    2746:	80 91 ee 01 	lds	r24, 0x01EE
    274a:	80 93 de 01 	sts	0x01DE, r24
					set_wpm(wpm);
    274e:	80 91 de 01 	lds	r24, 0x01DE
    2752:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>

					cur_mode = prev_mode;
    2756:	80 91 b8 01 	lds	r24, 0x01B8
    275a:	80 93 a2 01 	sts	0x01A2, r24
					cur_state = prev_state;
    275e:	80 91 72 01 	lds	r24, 0x0172
    2762:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = prev_state_end;
    2766:	80 91 b4 01 	lds	r24, 0x01B4
    276a:	90 91 b5 01 	lds	r25, 0x01B5
    276e:	a0 91 b6 01 	lds	r26, 0x01B6
    2772:	b0 91 b7 01 	lds	r27, 0x01B7
    2776:	80 93 cc 01 	sts	0x01CC, r24
    277a:	90 93 cd 01 	sts	0x01CD, r25
    277e:	a0 93 ce 01 	sts	0x01CE, r26
    2782:	b0 93 cf 01 	sts	0x01CF, r27
				}
				break;
    2786:	5d c0       	rjmp	.+186    	; 0x2842 <main+0xeaa>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2788:	20 91 68 01 	lds	r18, 0x0168
    278c:	30 91 69 01 	lds	r19, 0x0169
    2790:	40 91 6a 01 	lds	r20, 0x016A
    2794:	50 91 6b 01 	lds	r21, 0x016B
    2798:	80 91 cc 01 	lds	r24, 0x01CC
    279c:	90 91 cd 01 	lds	r25, 0x01CD
    27a0:	a0 91 ce 01 	lds	r26, 0x01CE
    27a4:	b0 91 cf 01 	lds	r27, 0x01CF
    27a8:	82 17       	cp	r24, r18
    27aa:	93 07       	cpc	r25, r19
    27ac:	a4 07       	cpc	r26, r20
    27ae:	b5 07       	cpc	r27, r21
    27b0:	f0 f4       	brcc	.+60     	; 0x27ee <main+0xe56>
				{
					cur_state_end = cur_timer + dit_length;
    27b2:	80 91 73 01 	lds	r24, 0x0173
    27b6:	90 91 74 01 	lds	r25, 0x0174
    27ba:	9c 01       	movw	r18, r24
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	80 91 68 01 	lds	r24, 0x0168
    27c4:	90 91 69 01 	lds	r25, 0x0169
    27c8:	a0 91 6a 01 	lds	r26, 0x016A
    27cc:	b0 91 6b 01 	lds	r27, 0x016B
    27d0:	82 0f       	add	r24, r18
    27d2:	93 1f       	adc	r25, r19
    27d4:	a4 1f       	adc	r26, r20
    27d6:	b5 1f       	adc	r27, r21
    27d8:	80 93 cc 01 	sts	0x01CC, r24
    27dc:	90 93 cd 01 	sts	0x01CD, r25
    27e0:	a0 93 ce 01 	sts	0x01CE, r26
    27e4:	b0 93 cf 01 	sts	0x01CF, r27
					cur_state = DITDELAY;
    27e8:	84 e0       	ldi	r24, 0x04	; 4
    27ea:	80 93 c0 01 	sts	0x01C0, r24
				}

				key_down = FALSE;
    27ee:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = TRUE;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	80 93 3b 01 	sts	0x013B, r24
				break;
    27fe:	21 c0       	rjmp	.+66     	; 0x2842 <main+0xeaa>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    2800:	20 91 68 01 	lds	r18, 0x0168
    2804:	30 91 69 01 	lds	r19, 0x0169
    2808:	40 91 6a 01 	lds	r20, 0x016A
    280c:	50 91 6b 01 	lds	r21, 0x016B
    2810:	80 91 cc 01 	lds	r24, 0x01CC
    2814:	90 91 cd 01 	lds	r25, 0x01CD
    2818:	a0 91 ce 01 	lds	r26, 0x01CE
    281c:	b0 91 cf 01 	lds	r27, 0x01CF
    2820:	82 17       	cp	r24, r18
    2822:	93 07       	cpc	r25, r19
    2824:	a4 07       	cpc	r26, r20
    2826:	b5 07       	cpc	r27, r21
    2828:	18 f4       	brcc	.+6      	; 0x2830 <main+0xe98>
					cur_state = IDLE;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	80 93 c0 01 	sts	0x01C0, r24

				key_down = FALSE;
    2830:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2834:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	80 93 3b 01 	sts	0x013B, r24
				break;
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <main+0xeaa>

			default:
				break;
    2840:	00 00       	nop
			}
			break;
    2842:	b8 c5       	rjmp	.+2928   	; 0x33b4 <main+0x1a1c>

		case TUNE:
			switch(cur_state)
    2844:	80 91 c0 01 	lds	r24, 0x01C0
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	87 30       	cpi	r24, 0x07	; 7
    284e:	91 05       	cpc	r25, r1
    2850:	09 f4       	brne	.+2      	; 0x2854 <main+0xebc>
    2852:	50 c0       	rjmp	.+160    	; 0x28f4 <main+0xf5c>
    2854:	88 30       	cpi	r24, 0x08	; 8
    2856:	91 05       	cpc	r25, r1
    2858:	09 f4       	brne	.+2      	; 0x285c <main+0xec4>
    285a:	8c c0       	rjmp	.+280    	; 0x2974 <main+0xfdc>
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	91 05       	cpc	r25, r1
    2860:	09 f0       	breq	.+2      	; 0x2864 <main+0xecc>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    2862:	ae c0       	rjmp	.+348    	; 0x29c0 <main+0x1028>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    2864:	80 91 68 01 	lds	r24, 0x0168
    2868:	90 91 69 01 	lds	r25, 0x0169
    286c:	a0 91 6a 01 	lds	r26, 0x016A
    2870:	b0 91 6b 01 	lds	r27, 0x016B
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	a1 1d       	adc	r26, r1
    2878:	b1 1d       	adc	r27, r1
    287a:	80 93 a8 01 	sts	0x01A8, r24
    287e:	90 93 a9 01 	sts	0x01A9, r25
    2882:	a0 93 aa 01 	sts	0x01AA, r26
    2886:	b0 93 ab 01 	sts	0x01AB, r27
				tx_end = UINT32_MAX;
    288a:	8f ef       	ldi	r24, 0xFF	; 255
    288c:	9f ef       	ldi	r25, 0xFF	; 255
    288e:	dc 01       	movw	r26, r24
    2890:	80 93 e9 01 	sts	0x01E9, r24
    2894:	90 93 ea 01 	sts	0x01EA, r25
    2898:	a0 93 eb 01 	sts	0x01EB, r26
    289c:	b0 93 ec 01 	sts	0x01EC, r27
				cur_state_end = UINT32_MAX;
    28a0:	8f ef       	ldi	r24, 0xFF	; 255
    28a2:	9f ef       	ldi	r25, 0xFF	; 255
    28a4:	dc 01       	movw	r26, r24
    28a6:	80 93 cc 01 	sts	0x01CC, r24
    28aa:	90 93 cd 01 	sts	0x01CD, r25
    28ae:	a0 93 ce 01 	sts	0x01CE, r26
    28b2:	b0 93 cf 01 	sts	0x01CF, r27
				mute_start = cur_timer;
    28b6:	80 91 68 01 	lds	r24, 0x0168
    28ba:	90 91 69 01 	lds	r25, 0x0169
    28be:	a0 91 6a 01 	lds	r26, 0x016A
    28c2:	b0 91 6b 01 	lds	r27, 0x016B
    28c6:	80 93 e3 01 	sts	0x01E3, r24
    28ca:	90 93 e4 01 	sts	0x01E4, r25
    28ce:	a0 93 e5 01 	sts	0x01E5, r26
    28d2:	b0 93 e6 01 	sts	0x01E6, r27
				mute_end = UINT32_MAX;
    28d6:	8f ef       	ldi	r24, 0xFF	; 255
    28d8:	9f ef       	ldi	r25, 0xFF	; 255
    28da:	dc 01       	movw	r26, r24
    28dc:	80 93 d0 01 	sts	0x01D0, r24
    28e0:	90 93 d1 01 	sts	0x01D1, r25
    28e4:	a0 93 d2 01 	sts	0x01D2, r26
    28e8:	b0 93 d3 01 	sts	0x01D3, r27

				cur_state = KEYDOWN;
    28ec:	87 e0       	ldi	r24, 0x07	; 7
    28ee:	80 93 c0 01 	sts	0x01C0, r24
				break;
    28f2:	66 c0       	rjmp	.+204    	; 0x29c0 <main+0x1028>

			case KEYDOWN:
				key_down = TRUE;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 93 3c 01 	sts	0x013C, r24
				sidetone_on = TRUE;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	80 93 3b 01 	sts	0x013B, r24

				if(ANYBUTTON)
    2906:	80 91 d4 01 	lds	r24, 0x01D4
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	61 f0       	breq	.+24     	; 0x2926 <main+0xf8e>
    290e:	80 91 bc 01 	lds	r24, 0x01BC
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	41 f0       	breq	.+16     	; 0x2926 <main+0xf8e>
    2916:	80 91 bf 01 	lds	r24, 0x01BF
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	21 f0       	breq	.+8      	; 0x2926 <main+0xf8e>
    291e:	80 91 bd 01 	lds	r24, 0x01BD
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	31 f5       	brne	.+76     	; 0x2972 <main+0xfda>
				{
					cur_state = ENDKEYDOWN;
    2926:	88 e0       	ldi	r24, 0x08	; 8
    2928:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    292c:	80 91 68 01 	lds	r24, 0x0168
    2930:	90 91 69 01 	lds	r25, 0x0169
    2934:	a0 91 6a 01 	lds	r26, 0x016A
    2938:	b0 91 6b 01 	lds	r27, 0x016B
    293c:	c2 96       	adiw	r24, 0x32	; 50
    293e:	a1 1d       	adc	r26, r1
    2940:	b1 1d       	adc	r27, r1
    2942:	80 93 cc 01 	sts	0x01CC, r24
    2946:	90 93 cd 01 	sts	0x01CD, r25
    294a:	a0 93 ce 01 	sts	0x01CE, r26
    294e:	b0 93 cf 01 	sts	0x01CF, r27
					tx_end = cur_timer;
    2952:	80 91 68 01 	lds	r24, 0x0168
    2956:	90 91 69 01 	lds	r25, 0x0169
    295a:	a0 91 6a 01 	lds	r26, 0x016A
    295e:	b0 91 6b 01 	lds	r27, 0x016B
    2962:	80 93 e9 01 	sts	0x01E9, r24
    2966:	90 93 ea 01 	sts	0x01EA, r25
    296a:	a0 93 eb 01 	sts	0x01EB, r26
    296e:	b0 93 ec 01 	sts	0x01EC, r27
				}
				break;
    2972:	26 c0       	rjmp	.+76     	; 0x29c0 <main+0x1028>

			case ENDKEYDOWN:
				key_down = FALSE;
    2974:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2978:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	80 93 3b 01 	sts	0x013B, r24

				if(cur_timer >= cur_state_end)
    2982:	20 91 68 01 	lds	r18, 0x0168
    2986:	30 91 69 01 	lds	r19, 0x0169
    298a:	40 91 6a 01 	lds	r20, 0x016A
    298e:	50 91 6b 01 	lds	r21, 0x016B
    2992:	80 91 cc 01 	lds	r24, 0x01CC
    2996:	90 91 cd 01 	lds	r25, 0x01CD
    299a:	a0 91 ce 01 	lds	r26, 0x01CE
    299e:	b0 91 cf 01 	lds	r27, 0x01CF
    29a2:	28 17       	cp	r18, r24
    29a4:	39 07       	cpc	r19, r25
    29a6:	4a 07       	cpc	r20, r26
    29a8:	5b 07       	cpc	r21, r27
    29aa:	48 f0       	brcs	.+18     	; 0x29be <main+0x1026>
				{
					mute_on = FALSE;
    29ac:	10 92 3b 01 	sts	0x013B, r1
					cur_state = IDLE;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	80 93 c0 01 	sts	0x01C0, r24
					cur_mode = default_mode;
    29b6:	80 91 6d 01 	lds	r24, 0x016D
    29ba:	80 93 a2 01 	sts	0x01A2, r24
				}
				break;
    29be:	00 00       	nop

			default:
				break;
			}
			break;
    29c0:	f9 c4       	rjmp	.+2546   	; 0x33b4 <main+0x1a1c>

		case MENU:
			switch(cur_state)
    29c2:	80 91 c0 01 	lds	r24, 0x01C0
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	89 30       	cpi	r24, 0x09	; 9
    29cc:	91 05       	cpc	r25, r1
    29ce:	91 f0       	breq	.+36     	; 0x29f4 <main+0x105c>
    29d0:	8a 30       	cpi	r24, 0x0A	; 10
    29d2:	91 05       	cpc	r25, r1
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <main+0x1040>
    29d6:	58 c0       	rjmp	.+176    	; 0x2a88 <main+0x10f0>
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	91 05       	cpc	r25, r1
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <main+0x1048>
    29de:	ac c1       	rjmp	.+856    	; 0x2d38 <main+0x13a0>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	90 93 44 01 	sts	0x0144, r25
    29e8:	80 93 43 01 	sts	0x0143, r24
				cur_state = MENUANNOUNCE;
    29ec:	89 e0       	ldi	r24, 0x09	; 9
    29ee:	80 93 c0 01 	sts	0x01C0, r24
				break;
    29f2:	aa c1       	rjmp	.+852    	; 0x2d48 <main+0x13b0>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 44 1a 	call	0x3488	; 0x3488 <malloc>
    29fc:	90 93 46 01 	sts	0x0146, r25
    2a00:	80 93 45 01 	sts	0x0145, r24
				memset(cur_menu, '\0', 2);
    2a04:	80 91 45 01 	lds	r24, 0x0145
    2a08:	90 91 46 01 	lds	r25, 0x0146
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	42 e0       	ldi	r20, 0x02	; 2
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	0e 94 80 1b 	call	0x3700	; 0x3700 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    2a18:	80 91 45 01 	lds	r24, 0x0145
    2a1c:	90 91 46 01 	lds	r25, 0x0146
    2a20:	20 91 43 01 	lds	r18, 0x0143
    2a24:	30 91 44 01 	lds	r19, 0x0144
    2a28:	b9 01       	movw	r22, r18
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    2a32:	80 91 68 01 	lds	r24, 0x0168
    2a36:	90 91 69 01 	lds	r25, 0x0169
    2a3a:	a0 91 6a 01 	lds	r26, 0x016A
    2a3e:	b0 91 6b 01 	lds	r27, 0x016B
    2a42:	80 56       	subi	r24, 0x60	; 96
    2a44:	90 4f       	sbci	r25, 0xF0	; 240
    2a46:	af 4f       	sbci	r26, 0xFF	; 255
    2a48:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4a:	80 93 cc 01 	sts	0x01CC, r24
    2a4e:	90 93 cd 01 	sts	0x01CD, r25
    2a52:	a0 93 ce 01 	sts	0x01CE, r26
    2a56:	b0 93 cf 01 	sts	0x01CF, r27

				// Set next state
				cur_state = MENUINPUT;
    2a5a:	8a e0       	ldi	r24, 0x0A	; 10
    2a5c:	80 93 c0 01 	sts	0x01C0, r24

				// Announce the menu item
				announce(cur_menu, st_freq, wpm);
    2a60:	80 91 45 01 	lds	r24, 0x0145
    2a64:	90 91 46 01 	lds	r25, 0x0146
    2a68:	20 91 ba 01 	lds	r18, 0x01BA
    2a6c:	30 91 bb 01 	lds	r19, 0x01BB
    2a70:	40 91 de 01 	lds	r20, 0x01DE
    2a74:	b9 01       	movw	r22, r18
    2a76:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>

				free(cur_menu);
    2a7a:	80 91 45 01 	lds	r24, 0x0145
    2a7e:	90 91 46 01 	lds	r25, 0x0146
    2a82:	0e 94 de 1a 	call	0x35bc	; 0x35bc <free>
				break;
    2a86:	60 c1       	rjmp	.+704    	; 0x2d48 <main+0x13b0>

			case MENUINPUT:
				text_buffer = malloc(20);
    2a88:	84 e1       	ldi	r24, 0x14	; 20
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 44 1a 	call	0x3488	; 0x3488 <malloc>
    2a90:	90 93 41 01 	sts	0x0141, r25
    2a94:	80 93 40 01 	sts	0x0140, r24
				memset(text_buffer, '\0', 20);
    2a98:	80 91 40 01 	lds	r24, 0x0140
    2a9c:	90 91 41 01 	lds	r25, 0x0141
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	44 e1       	ldi	r20, 0x14	; 20
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	0e 94 80 1b 	call	0x3700	; 0x3700 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    2aac:	20 91 68 01 	lds	r18, 0x0168
    2ab0:	30 91 69 01 	lds	r19, 0x0169
    2ab4:	40 91 6a 01 	lds	r20, 0x016A
    2ab8:	50 91 6b 01 	lds	r21, 0x016B
    2abc:	80 91 cc 01 	lds	r24, 0x01CC
    2ac0:	90 91 cd 01 	lds	r25, 0x01CD
    2ac4:	a0 91 ce 01 	lds	r26, 0x01CE
    2ac8:	b0 91 cf 01 	lds	r27, 0x01CF
    2acc:	28 17       	cp	r18, r24
    2ace:	39 07       	cpc	r19, r25
    2ad0:	4a 07       	cpc	r20, r26
    2ad2:	5b 07       	cpc	r21, r27
    2ad4:	08 f0       	brcs	.+2      	; 0x2ad8 <main+0x1140>
    2ad6:	17 c1       	rjmp	.+558    	; 0x2d06 <main+0x136e>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    2ad8:	80 91 bf 01 	lds	r24, 0x01BF
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	49 f5       	brne	.+82     	; 0x2b32 <main+0x119a>
					{
						debounce(TRUE);
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
						cur_menu_p++;
    2ae6:	80 91 43 01 	lds	r24, 0x0143
    2aea:	90 91 44 01 	lds	r25, 0x0144
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	90 93 44 01 	sts	0x0144, r25
    2af4:	80 93 43 01 	sts	0x0143, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    2af8:	80 91 43 01 	lds	r24, 0x0143
    2afc:	90 91 44 01 	lds	r25, 0x0144
    2b00:	fc 01       	movw	r30, r24
    2b02:	80 81       	ld	r24, Z
    2b04:	88 23       	and	r24, r24
    2b06:	89 f4       	brne	.+34     	; 0x2b2a <main+0x1192>
						{
							cur_state = IDLE;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    2b0e:	80 91 6d 01 	lds	r24, 0x016D
    2b12:	80 93 a2 01 	sts	0x01A2, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
    2b16:	20 91 de 01 	lds	r18, 0x01DE
    2b1a:	81 e2       	ldi	r24, 0x21	; 33
    2b1c:	91 e0       	ldi	r25, 0x01	; 1
    2b1e:	60 e9       	ldi	r22, 0x90	; 144
    2b20:	71 e0       	ldi	r23, 0x01	; 1
    2b22:	42 2f       	mov	r20, r18
    2b24:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2b28:	00 c1       	rjmp	.+512    	; 0x2d2a <main+0x1392>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
						}
						else
							cur_state = MENUANNOUNCE;
    2b2a:	89 e0       	ldi	r24, 0x09	; 9
    2b2c:	80 93 c0 01 	sts	0x01C0, r24
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2b30:	fc c0       	rjmp	.+504    	; 0x2d2a <main+0x1392>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    2b32:	80 91 bd 01 	lds	r24, 0x01BD
    2b36:	81 30       	cpi	r24, 0x01	; 1
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <main+0x11a4>
    2b3a:	f6 c0       	rjmp	.+492    	; 0x2d28 <main+0x1390>
					{
						// need to clear the button buffer
						debounce(TRUE);
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>

						switch(*cur_menu_p)
    2b42:	80 91 43 01 	lds	r24, 0x0143
    2b46:	90 91 44 01 	lds	r25, 0x0144
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	80 81       	ld	r24, Z
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	83 35       	cpi	r24, 0x53	; 83
    2b54:	91 05       	cpc	r25, r1
    2b56:	a1 f0       	breq	.+40     	; 0x2b80 <main+0x11e8>
    2b58:	84 35       	cpi	r24, 0x54	; 84
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	4c f4       	brge	.+18     	; 0x2b70 <main+0x11d8>
    2b5e:	8b 34       	cpi	r24, 0x4B	; 75
    2b60:	91 05       	cpc	r25, r1
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <main+0x11ce>
    2b64:	83 c0       	rjmp	.+262    	; 0x2c6c <main+0x12d4>
    2b66:	82 35       	cpi	r24, 0x52	; 82
    2b68:	91 05       	cpc	r25, r1
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <main+0x11d6>
    2b6c:	64 c0       	rjmp	.+200    	; 0x2c36 <main+0x129e>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2b6e:	dd c0       	rjmp	.+442    	; 0x2d2a <main+0x1392>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    2b70:	86 35       	cpi	r24, 0x56	; 86
    2b72:	91 05       	cpc	r25, r1
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <main+0x11e0>
    2b76:	70 c0       	rjmp	.+224    	; 0x2c58 <main+0x12c0>
    2b78:	87 35       	cpi	r24, 0x57	; 87
    2b7a:	91 05       	cpc	r25, r1
    2b7c:	21 f1       	breq	.+72     	; 0x2bc6 <main+0x122e>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2b7e:	d5 c0       	rjmp	.+426    	; 0x2d2a <main+0x1392>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    2b80:	80 91 68 01 	lds	r24, 0x0168
    2b84:	90 91 69 01 	lds	r25, 0x0169
    2b88:	a0 91 6a 01 	lds	r26, 0x016A
    2b8c:	b0 91 6b 01 	lds	r27, 0x016B
    2b90:	80 56       	subi	r24, 0x60	; 96
    2b92:	90 4f       	sbci	r25, 0xF0	; 240
    2b94:	af 4f       	sbci	r26, 0xFF	; 255
    2b96:	bf 4f       	sbci	r27, 0xFF	; 255
    2b98:	80 93 cc 01 	sts	0x01CC, r24
    2b9c:	90 93 cd 01 	sts	0x01CD, r25
    2ba0:	a0 93 ce 01 	sts	0x01CE, r26
    2ba4:	b0 93 cf 01 	sts	0x01CF, r27
							cur_mode = SETWPM;
    2ba8:	85 e0       	ldi	r24, 0x05	; 5
    2baa:	80 93 a2 01 	sts	0x01A2, r24

							announce("R", st_freq, wpm);
    2bae:	20 91 ba 01 	lds	r18, 0x01BA
    2bb2:	30 91 bb 01 	lds	r19, 0x01BB
    2bb6:	40 91 de 01 	lds	r20, 0x01DE
    2bba:	8f e1       	ldi	r24, 0x1F	; 31
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	b9 01       	movw	r22, r18
    2bc0:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
							break;
    2bc4:	b2 c0       	rjmp	.+356    	; 0x2d2a <main+0x1392>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    2bcc:	80 91 6d 01 	lds	r24, 0x016D
    2bd0:	80 93 a2 01 	sts	0x01A2, r24

							sprintf(text_buffer, "%d", wpm);
    2bd4:	40 91 40 01 	lds	r20, 0x0140
    2bd8:	50 91 41 01 	lds	r21, 0x0141
    2bdc:	80 91 de 01 	lds	r24, 0x01DE
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <main+0x124e>
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <main+0x1250>
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <main+0x1252>
    2bea:	8d b7       	in	r24, 0x3d	; 61
    2bec:	9e b7       	in	r25, 0x3e	; 62
    2bee:	01 96       	adiw	r24, 0x01	; 1
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	51 83       	std	Z+1, r21	; 0x01
    2bf4:	40 83       	st	Z, r20
    2bf6:	4d e2       	ldi	r20, 0x2D	; 45
    2bf8:	51 e0       	ldi	r21, 0x01	; 1
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	53 83       	std	Z+3, r21	; 0x03
    2bfe:	42 83       	std	Z+2, r20	; 0x02
    2c00:	fc 01       	movw	r30, r24
    2c02:	35 83       	std	Z+5, r19	; 0x05
    2c04:	24 83       	std	Z+4, r18	; 0x04
    2c06:	0e 94 98 1b 	call	0x3730	; 0x3730 <sprintf>
    2c0a:	8d b7       	in	r24, 0x3d	; 61
    2c0c:	9e b7       	in	r25, 0x3e	; 62
    2c0e:	06 96       	adiw	r24, 0x06	; 6
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	9e bf       	out	0x3e, r25	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq, wpm);
    2c1a:	80 91 40 01 	lds	r24, 0x0140
    2c1e:	90 91 41 01 	lds	r25, 0x0141
    2c22:	20 91 ba 01 	lds	r18, 0x01BA
    2c26:	30 91 bb 01 	lds	r19, 0x01BB
    2c2a:	40 91 de 01 	lds	r20, 0x01DE
    2c2e:	b9 01       	movw	r22, r18
    2c30:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
							break;
    2c34:	7a c0       	rjmp	.+244    	; 0x2d2a <main+0x1392>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    2c36:	10 92 c0 01 	sts	0x01C0, r1
							cur_mode = RECORD;
    2c3a:	87 e0       	ldi	r24, 0x07	; 7
    2c3c:	80 93 a2 01 	sts	0x01A2, r24

							announce("R", st_freq, wpm);
    2c40:	20 91 ba 01 	lds	r18, 0x01BA
    2c44:	30 91 bb 01 	lds	r19, 0x01BB
    2c48:	40 91 de 01 	lds	r20, 0x01DE
    2c4c:	8f e1       	ldi	r24, 0x1F	; 31
    2c4e:	91 e0       	ldi	r25, 0x01	; 1
    2c50:	b9 01       	movw	r22, r18
    2c52:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
							break;
    2c56:	69 c0       	rjmp	.+210    	; 0x2d2a <main+0x1392>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    2c5e:	80 91 6d 01 	lds	r24, 0x016D
    2c62:	80 93 a2 01 	sts	0x01A2, r24

							read_voltage();
    2c66:	0e 94 2f 07 	call	0xe5e	; 0xe5e <read_voltage>
							break;
    2c6a:	5f c0       	rjmp	.+190    	; 0x2d2a <main+0x1392>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    2c6c:	80 91 6d 01 	lds	r24, 0x016D
    2c70:	88 23       	and	r24, r24
    2c72:	29 f5       	brne	.+74     	; 0x2cbe <main+0x1326>
							{
								default_mode = SK;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	80 93 6d 01 	sts	0x016D, r24
								cur_state = IDLE;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	80 93 c0 01 	sts	0x01C0, r24
								cur_mode = default_mode;
    2c80:	80 91 6d 01 	lds	r24, 0x016D
    2c84:	80 93 a2 01 	sts	0x01A2, r24
								eeprom_busy_wait();
    2c88:	8f e3       	ldi	r24, 0x3F	; 63
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	82 70       	andi	r24, 0x02	; 2
    2c96:	90 70       	andi	r25, 0x00	; 0
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	b1 f7       	brne	.-20     	; 0x2c88 <main+0x12f0>
								eeprom_write_byte(&ee_keyer, FALSE);
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__eewr_byte_m168>

								announce("S", st_freq, wpm);
    2ca6:	20 91 ba 01 	lds	r18, 0x01BA
    2caa:	30 91 bb 01 	lds	r19, 0x01BB
    2cae:	40 91 de 01 	lds	r20, 0x01DE
    2cb2:	8b e1       	ldi	r24, 0x1B	; 27
    2cb4:	91 e0       	ldi	r25, 0x01	; 1
    2cb6:	b9 01       	movw	r22, r18
    2cb8:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
								eeprom_busy_wait();
								eeprom_write_byte(&ee_keyer, TRUE);

								announce("K", st_freq, wpm);
							}
							break;
    2cbc:	36 c0       	rjmp	.+108    	; 0x2d2a <main+0x1392>

								announce("S", st_freq, wpm);
							}
							else
							{
								default_mode = KEYER;
    2cbe:	10 92 6d 01 	sts	0x016D, r1
								cur_state = IDLE;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 93 c0 01 	sts	0x01C0, r24
								cur_mode = default_mode;
    2cc8:	80 91 6d 01 	lds	r24, 0x016D
    2ccc:	80 93 a2 01 	sts	0x01A2, r24
								eeprom_busy_wait();
    2cd0:	8f e3       	ldi	r24, 0x3F	; 63
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	82 70       	andi	r24, 0x02	; 2
    2cde:	90 70       	andi	r25, 0x00	; 0
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	b1 f7       	brne	.-20     	; 0x2cd0 <main+0x1338>
								eeprom_write_byte(&ee_keyer, TRUE);
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	61 e0       	ldi	r22, 0x01	; 1
    2cea:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__eewr_byte_m168>

								announce("K", st_freq, wpm);
    2cee:	20 91 ba 01 	lds	r18, 0x01BA
    2cf2:	30 91 bb 01 	lds	r19, 0x01BB
    2cf6:	40 91 de 01 	lds	r20, 0x01DE
    2cfa:	80 e3       	ldi	r24, 0x30	; 48
    2cfc:	91 e0       	ldi	r25, 0x01	; 1
    2cfe:	b9 01       	movw	r22, r18
    2d00:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
							}
							break;
    2d04:	12 c0       	rjmp	.+36     	; 0x2d2a <main+0x1392>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	80 93 c0 01 	sts	0x01C0, r24
					cur_mode = default_mode;
    2d0c:	80 91 6d 01 	lds	r24, 0x016D
    2d10:	80 93 a2 01 	sts	0x01A2, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    2d14:	20 91 de 01 	lds	r18, 0x01DE
    2d18:	81 e2       	ldi	r24, 0x21	; 33
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	60 e9       	ldi	r22, 0x90	; 144
    2d1e:	71 e0       	ldi	r23, 0x01	; 1
    2d20:	42 2f       	mov	r20, r18
    2d22:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    2d26:	01 c0       	rjmp	.+2      	; 0x2d2a <main+0x1392>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2d28:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
				}

				free(text_buffer);
    2d2a:	80 91 40 01 	lds	r24, 0x0140
    2d2e:	90 91 41 01 	lds	r25, 0x0141
    2d32:	0e 94 de 1a 	call	0x35bc	; 0x35bc <free>
				break;
    2d36:	08 c0       	rjmp	.+16     	; 0x2d48 <main+0x13b0>

			default:
				cur_state = IDLE;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	80 93 c0 01 	sts	0x01C0, r24
				cur_mode = default_mode;
    2d3e:	80 91 6d 01 	lds	r24, 0x016D
    2d42:	80 93 a2 01 	sts	0x01A2, r24
				break;
    2d46:	00 00       	nop
			}
			break;
    2d48:	35 c3       	rjmp	.+1642   	; 0x33b4 <main+0x1a1c>

		case SETWPM:
			if(cur_timer < cur_state_end)
    2d4a:	20 91 68 01 	lds	r18, 0x0168
    2d4e:	30 91 69 01 	lds	r19, 0x0169
    2d52:	40 91 6a 01 	lds	r20, 0x016A
    2d56:	50 91 6b 01 	lds	r21, 0x016B
    2d5a:	80 91 cc 01 	lds	r24, 0x01CC
    2d5e:	90 91 cd 01 	lds	r25, 0x01CD
    2d62:	a0 91 ce 01 	lds	r26, 0x01CE
    2d66:	b0 91 cf 01 	lds	r27, 0x01CF
    2d6a:	28 17       	cp	r18, r24
    2d6c:	39 07       	cpc	r19, r25
    2d6e:	4a 07       	cpc	r20, r26
    2d70:	5b 07       	cpc	r21, r27
    2d72:	08 f0       	brcs	.+2      	; 0x2d76 <main+0x13de>
    2d74:	63 c0       	rjmp	.+198    	; 0x2e3c <main+0x14a4>
			{
				if(cmd_btn == PRESS)
    2d76:	80 91 bf 01 	lds	r24, 0x01BF
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	69 f5       	brne	.+90     	; 0x2dd8 <main+0x1440>
				{
					if(wpm < MAX_WPM)
    2d7e:	80 91 de 01 	lds	r24, 0x01DE
    2d82:	88 32       	cpi	r24, 0x28	; 40
    2d84:	28 f4       	brcc	.+10     	; 0x2d90 <main+0x13f8>
						wpm++;
    2d86:	80 91 de 01 	lds	r24, 0x01DE
    2d8a:	8f 5f       	subi	r24, 0xFF	; 255
    2d8c:	80 93 de 01 	sts	0x01DE, r24
					set_wpm(wpm);
    2d90:	80 91 de 01 	lds	r24, 0x01DE
    2d94:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2d98:	80 91 68 01 	lds	r24, 0x0168
    2d9c:	90 91 69 01 	lds	r25, 0x0169
    2da0:	a0 91 6a 01 	lds	r26, 0x016A
    2da4:	b0 91 6b 01 	lds	r27, 0x016B
    2da8:	80 56       	subi	r24, 0x60	; 96
    2daa:	90 4f       	sbci	r25, 0xF0	; 240
    2dac:	af 4f       	sbci	r26, 0xFF	; 255
    2dae:	bf 4f       	sbci	r27, 0xFF	; 255
    2db0:	80 93 cc 01 	sts	0x01CC, r24
    2db4:	90 93 cd 01 	sts	0x01CD, r25
    2db8:	a0 93 ce 01 	sts	0x01CE, r26
    2dbc:	b0 93 cf 01 	sts	0x01CF, r27
					announce("I", st_freq, wpm);
    2dc0:	20 91 ba 01 	lds	r18, 0x01BA
    2dc4:	30 91 bb 01 	lds	r19, 0x01BB
    2dc8:	40 91 de 01 	lds	r20, 0x01DE
    2dcc:	82 e3       	ldi	r24, 0x32	; 50
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	b9 01       	movw	r22, r18
    2dd2:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    2dd6:	7a c0       	rjmp	.+244    	; 0x2ecc <main+0x1534>
				}
				else if(msg_btn == PRESS)
    2dd8:	80 91 bd 01 	lds	r24, 0x01BD
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <main+0x144a>
    2de0:	75 c0       	rjmp	.+234    	; 0x2ecc <main+0x1534>
				{
					if(wpm > MIN_WPM)
    2de2:	80 91 de 01 	lds	r24, 0x01DE
    2de6:	86 30       	cpi	r24, 0x06	; 6
    2de8:	28 f0       	brcs	.+10     	; 0x2df4 <main+0x145c>
						wpm--;
    2dea:	80 91 de 01 	lds	r24, 0x01DE
    2dee:	81 50       	subi	r24, 0x01	; 1
    2df0:	80 93 de 01 	sts	0x01DE, r24
					set_wpm(wpm);
    2df4:	80 91 de 01 	lds	r24, 0x01DE
    2df8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2dfc:	80 91 68 01 	lds	r24, 0x0168
    2e00:	90 91 69 01 	lds	r25, 0x0169
    2e04:	a0 91 6a 01 	lds	r26, 0x016A
    2e08:	b0 91 6b 01 	lds	r27, 0x016B
    2e0c:	80 56       	subi	r24, 0x60	; 96
    2e0e:	90 4f       	sbci	r25, 0xF0	; 240
    2e10:	af 4f       	sbci	r26, 0xFF	; 255
    2e12:	bf 4f       	sbci	r27, 0xFF	; 255
    2e14:	80 93 cc 01 	sts	0x01CC, r24
    2e18:	90 93 cd 01 	sts	0x01CD, r25
    2e1c:	a0 93 ce 01 	sts	0x01CE, r26
    2e20:	b0 93 cf 01 	sts	0x01CF, r27
					announce("I", st_freq, wpm);
    2e24:	20 91 ba 01 	lds	r18, 0x01BA
    2e28:	30 91 bb 01 	lds	r19, 0x01BB
    2e2c:	40 91 de 01 	lds	r20, 0x01DE
    2e30:	82 e3       	ldi	r24, 0x32	; 50
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	b9 01       	movw	r22, r18
    2e36:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    2e3a:	48 c0       	rjmp	.+144    	; 0x2ecc <main+0x1534>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_busy_wait();
    2e3c:	8f e3       	ldi	r24, 0x3F	; 63
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	fc 01       	movw	r30, r24
    2e42:	80 81       	ld	r24, Z
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	82 70       	andi	r24, 0x02	; 2
    2e4a:	90 70       	andi	r25, 0x00	; 0
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	b1 f7       	brne	.-20     	; 0x2e3c <main+0x14a4>
				eeprom_write_byte(&ee_wpm, wpm);
    2e50:	20 91 de 01 	lds	r18, 0x01DE
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	62 2f       	mov	r22, r18
    2e5a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__eewr_byte_m168>

				cur_state = IDLE;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	80 93 c0 01 	sts	0x01C0, r24
				cur_mode = default_mode;
    2e64:	80 91 6d 01 	lds	r24, 0x016D
    2e68:	80 93 a2 01 	sts	0x01A2, r24

				sprintf(text_buffer, "%d", wpm);
    2e6c:	40 91 40 01 	lds	r20, 0x0140
    2e70:	50 91 41 01 	lds	r21, 0x0141
    2e74:	80 91 de 01 	lds	r24, 0x01DE
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	00 d0       	rcall	.+0      	; 0x2e7e <main+0x14e6>
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <main+0x14e8>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <main+0x14ea>
    2e82:	8d b7       	in	r24, 0x3d	; 61
    2e84:	9e b7       	in	r25, 0x3e	; 62
    2e86:	01 96       	adiw	r24, 0x01	; 1
    2e88:	fc 01       	movw	r30, r24
    2e8a:	51 83       	std	Z+1, r21	; 0x01
    2e8c:	40 83       	st	Z, r20
    2e8e:	4d e2       	ldi	r20, 0x2D	; 45
    2e90:	51 e0       	ldi	r21, 0x01	; 1
    2e92:	fc 01       	movw	r30, r24
    2e94:	53 83       	std	Z+3, r21	; 0x03
    2e96:	42 83       	std	Z+2, r20	; 0x02
    2e98:	fc 01       	movw	r30, r24
    2e9a:	35 83       	std	Z+5, r19	; 0x05
    2e9c:	24 83       	std	Z+4, r18	; 0x04
    2e9e:	0e 94 98 1b 	call	0x3730	; 0x3730 <sprintf>
    2ea2:	8d b7       	in	r24, 0x3d	; 61
    2ea4:	9e b7       	in	r25, 0x3e	; 62
    2ea6:	06 96       	adiw	r24, 0x06	; 6
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	9e bf       	out	0x3e, r25	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq, wpm);
    2eb2:	80 91 40 01 	lds	r24, 0x0140
    2eb6:	90 91 41 01 	lds	r25, 0x0141
    2eba:	20 91 ba 01 	lds	r18, 0x01BA
    2ebe:	30 91 bb 01 	lds	r19, 0x01BB
    2ec2:	40 91 de 01 	lds	r20, 0x01DE
    2ec6:	b9 01       	movw	r22, r18
    2ec8:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
			}
			break;
    2ecc:	73 c2       	rjmp	.+1254   	; 0x33b4 <main+0x1a1c>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    2ece:	80 91 d4 01 	lds	r24, 0x01D4
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	61 f0       	breq	.+24     	; 0x2eee <main+0x1556>
    2ed6:	80 91 bc 01 	lds	r24, 0x01BC
    2eda:	81 30       	cpi	r24, 0x01	; 1
    2edc:	41 f0       	breq	.+16     	; 0x2eee <main+0x1556>
    2ede:	80 91 bf 01 	lds	r24, 0x01BF
    2ee2:	81 30       	cpi	r24, 0x01	; 1
    2ee4:	21 f0       	breq	.+8      	; 0x2eee <main+0x1556>
    2ee6:	80 91 bd 01 	lds	r24, 0x01BD
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	e9 f5       	brne	.+122    	; 0x2f68 <main+0x15d0>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    2eee:	80 91 e7 01 	lds	r24, 0x01E7
    2ef2:	90 91 e8 01 	lds	r25, 0x01E8
    2ef6:	2c e2       	ldi	r18, 0x2C	; 44
    2ef8:	31 e0       	ldi	r19, 0x01	; 1
    2efa:	b9 01       	movw	r22, r18
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	0e 94 77 1b 	call	0x36ee	; 0x36ee <memcpy>
				cur_char_p = announce_buffer;
    2f04:	80 91 e7 01 	lds	r24, 0x01E7
    2f08:	90 91 e8 01 	lds	r25, 0x01E8
    2f0c:	90 93 3f 01 	sts	0x013F, r25
    2f10:	80 93 3e 01 	sts	0x013E, r24
				cur_character = '\0';
    2f14:	10 92 42 01 	sts	0x0142, r1

				// Set back into previous mode
				mute_end = cur_timer;
    2f18:	80 91 68 01 	lds	r24, 0x0168
    2f1c:	90 91 69 01 	lds	r25, 0x0169
    2f20:	a0 91 6a 01 	lds	r26, 0x016A
    2f24:	b0 91 6b 01 	lds	r27, 0x016B
    2f28:	80 93 d0 01 	sts	0x01D0, r24
    2f2c:	90 93 d1 01 	sts	0x01D1, r25
    2f30:	a0 93 d2 01 	sts	0x01D2, r26
    2f34:	b0 93 d3 01 	sts	0x01D3, r27
				cur_mode = prev_mode;
    2f38:	80 91 b8 01 	lds	r24, 0x01B8
    2f3c:	80 93 a2 01 	sts	0x01A2, r24
				cur_state = prev_state;
    2f40:	80 91 72 01 	lds	r24, 0x0172
    2f44:	80 93 c0 01 	sts	0x01C0, r24
				cur_state_end = prev_state_end;
    2f48:	80 91 b4 01 	lds	r24, 0x01B4
    2f4c:	90 91 b5 01 	lds	r25, 0x01B5
    2f50:	a0 91 b6 01 	lds	r26, 0x01B6
    2f54:	b0 91 b7 01 	lds	r27, 0x01B7
    2f58:	80 93 cc 01 	sts	0x01CC, r24
    2f5c:	90 93 cd 01 	sts	0x01CD, r25
    2f60:	a0 93 ce 01 	sts	0x01CE, r26
    2f64:	b0 93 cf 01 	sts	0x01CF, r27
			}

			switch(cur_state)
    2f68:	80 91 c0 01 	lds	r24, 0x01C0
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	84 30       	cpi	r24, 0x04	; 4
    2f72:	91 05       	cpc	r25, r1
    2f74:	44 f4       	brge	.+16     	; 0x2f86 <main+0x15ee>
    2f76:	82 30       	cpi	r24, 0x02	; 2
    2f78:	91 05       	cpc	r25, r1
    2f7a:	0c f0       	brlt	.+2      	; 0x2f7e <main+0x15e6>
    2f7c:	bb c1       	rjmp	.+886    	; 0x32f4 <main+0x195c>
    2f7e:	81 30       	cpi	r24, 0x01	; 1
    2f80:	91 05       	cpc	r25, r1
    2f82:	31 f0       	breq	.+12     	; 0x2f90 <main+0x15f8>
    2f84:	14 c2       	rjmp	.+1064   	; 0x33ae <main+0x1a16>
    2f86:	87 30       	cpi	r24, 0x07	; 7
    2f88:	91 05       	cpc	r25, r1
    2f8a:	0c f0       	brlt	.+2      	; 0x2f8e <main+0x15f6>
    2f8c:	10 c2       	rjmp	.+1056   	; 0x33ae <main+0x1a16>
    2f8e:	ef c1       	rjmp	.+990    	; 0x336e <main+0x19d6>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2f90:	20 91 3e 01 	lds	r18, 0x013E
    2f94:	30 91 3f 01 	lds	r19, 0x013F
    2f98:	80 91 e7 01 	lds	r24, 0x01E7
    2f9c:	90 91 e8 01 	lds	r25, 0x01E8
    2fa0:	28 17       	cp	r18, r24
    2fa2:	39 07       	cpc	r19, r25
    2fa4:	c9 f4       	brne	.+50     	; 0x2fd8 <main+0x1640>
    2fa6:	80 91 42 01 	lds	r24, 0x0142
    2faa:	88 23       	and	r24, r24
    2fac:	a9 f4       	brne	.+42     	; 0x2fd8 <main+0x1640>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2fae:	80 91 3e 01 	lds	r24, 0x013E
    2fb2:	90 91 3f 01 	lds	r25, 0x013F
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	80 81       	ld	r24, Z
    2fba:	88 2f       	mov	r24, r24
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	80 97       	sbiw	r24, 0x20	; 32
    2fc0:	88 59       	subi	r24, 0x98	; 152
    2fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc4:	98 87       	std	Y+8, r25	; 0x08
    2fc6:	8f 83       	std	Y+7, r24	; 0x07
    2fc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fca:	98 85       	ldd	r25, Y+8	; 0x08
    2fcc:	fc 01       	movw	r30, r24
    2fce:	14 91       	lpm	r17, Z+
    2fd0:	19 87       	std	Y+9, r17	; 0x09
    2fd2:	89 85       	ldd	r24, Y+9	; 0x09
    2fd4:	80 93 42 01 	sts	0x0142, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2fd8:	80 91 42 01 	lds	r24, 0x0142
    2fdc:	88 23       	and	r24, r24
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <main+0x164a>
    2fe0:	4b c1       	rjmp	.+662    	; 0x3278 <main+0x18e0>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2fe2:	80 91 42 01 	lds	r24, 0x0142
    2fe6:	80 38       	cpi	r24, 0x80	; 128
    2fe8:	29 f0       	breq	.+10     	; 0x2ff4 <main+0x165c>
    2fea:	80 91 42 01 	lds	r24, 0x0142
    2fee:	8f 3f       	cpi	r24, 0xFF	; 255
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <main+0x165c>
    2ff2:	79 c0       	rjmp	.+242    	; 0x30e6 <main+0x174e>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    2ff4:	80 91 42 01 	lds	r24, 0x0142
    2ff8:	80 38       	cpi	r24, 0x80	; 128
    2ffa:	21 f5       	brne	.+72     	; 0x3044 <main+0x16ac>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2ffc:	20 91 73 01 	lds	r18, 0x0173
    3000:	30 91 74 01 	lds	r19, 0x0174
    3004:	c9 01       	movw	r24, r18
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	82 0f       	add	r24, r18
    300c:	93 1f       	adc	r25, r19
    300e:	9c 01       	movw	r18, r24
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	80 91 68 01 	lds	r24, 0x0168
    3018:	90 91 69 01 	lds	r25, 0x0169
    301c:	a0 91 6a 01 	lds	r26, 0x016A
    3020:	b0 91 6b 01 	lds	r27, 0x016B
    3024:	82 0f       	add	r24, r18
    3026:	93 1f       	adc	r25, r19
    3028:	a4 1f       	adc	r26, r20
    302a:	b5 1f       	adc	r27, r21
    302c:	80 93 cc 01 	sts	0x01CC, r24
    3030:	90 93 cd 01 	sts	0x01CD, r25
    3034:	a0 93 ce 01 	sts	0x01CE, r26
    3038:	b0 93 cf 01 	sts	0x01CF, r27
							cur_state = DAHDELAY;
    303c:	85 e0       	ldi	r24, 0x05	; 5
    303e:	80 93 c0 01 	sts	0x01C0, r24
    3042:	27 c0       	rjmp	.+78     	; 0x3092 <main+0x16fa>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    3044:	20 91 73 01 	lds	r18, 0x0173
    3048:	30 91 74 01 	lds	r19, 0x0174
    304c:	c9 01       	movw	r24, r18
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	88 0f       	add	r24, r24
    3058:	99 1f       	adc	r25, r25
    305a:	82 1b       	sub	r24, r18
    305c:	93 0b       	sbc	r25, r19
    305e:	9c 01       	movw	r18, r24
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	80 91 68 01 	lds	r24, 0x0168
    3068:	90 91 69 01 	lds	r25, 0x0169
    306c:	a0 91 6a 01 	lds	r26, 0x016A
    3070:	b0 91 6b 01 	lds	r27, 0x016B
    3074:	82 0f       	add	r24, r18
    3076:	93 1f       	adc	r25, r19
    3078:	a4 1f       	adc	r26, r20
    307a:	b5 1f       	adc	r27, r21
    307c:	80 93 cc 01 	sts	0x01CC, r24
    3080:	90 93 cd 01 	sts	0x01CD, r25
    3084:	a0 93 ce 01 	sts	0x01CE, r26
    3088:	b0 93 cf 01 	sts	0x01CF, r27
							cur_state = DAHDELAY;
    308c:	85 e0       	ldi	r24, 0x05	; 5
    308e:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    3092:	80 91 3e 01 	lds	r24, 0x013E
    3096:	90 91 3f 01 	lds	r25, 0x013F
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	90 93 3f 01 	sts	0x013F, r25
    30a0:	80 93 3e 01 	sts	0x013E, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    30a4:	80 91 3e 01 	lds	r24, 0x013E
    30a8:	90 91 3f 01 	lds	r25, 0x013F
    30ac:	fc 01       	movw	r30, r24
    30ae:	80 81       	ld	r24, Z
    30b0:	88 23       	and	r24, r24
    30b2:	19 f4       	brne	.+6      	; 0x30ba <main+0x1722>
							cur_character = '\0';
    30b4:	10 92 42 01 	sts	0x0142, r1
    30b8:	15 c0       	rjmp	.+42     	; 0x30e4 <main+0x174c>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    30ba:	80 91 3e 01 	lds	r24, 0x013E
    30be:	90 91 3f 01 	lds	r25, 0x013F
    30c2:	fc 01       	movw	r30, r24
    30c4:	80 81       	ld	r24, Z
    30c6:	88 2f       	mov	r24, r24
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	80 97       	sbiw	r24, 0x20	; 32
    30cc:	88 59       	subi	r24, 0x98	; 152
    30ce:	9f 4f       	sbci	r25, 0xFF	; 255
    30d0:	9b 87       	std	Y+11, r25	; 0x0b
    30d2:	8a 87       	std	Y+10, r24	; 0x0a
    30d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    30d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    30d8:	fc 01       	movw	r30, r24
    30da:	14 91       	lpm	r17, Z+
    30dc:	1c 87       	std	Y+12, r17	; 0x0c
    30de:	8c 85       	ldd	r24, Y+12	; 0x0c
    30e0:	80 93 42 01 	sts	0x0142, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    30e4:	c8 c0       	rjmp	.+400    	; 0x3276 <main+0x18de>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    30e6:	80 91 42 01 	lds	r24, 0x0142
    30ea:	88 23       	and	r24, r24
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <main+0x1758>
    30ee:	62 c0       	rjmp	.+196    	; 0x31b4 <main+0x181c>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    30f0:	20 91 73 01 	lds	r18, 0x0173
    30f4:	30 91 74 01 	lds	r19, 0x0174
    30f8:	c9 01       	movw	r24, r18
    30fa:	88 0f       	add	r24, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	82 0f       	add	r24, r18
    3100:	93 1f       	adc	r25, r19
    3102:	9c 01       	movw	r18, r24
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	50 e0       	ldi	r21, 0x00	; 0
    3108:	80 91 68 01 	lds	r24, 0x0168
    310c:	90 91 69 01 	lds	r25, 0x0169
    3110:	a0 91 6a 01 	lds	r26, 0x016A
    3114:	b0 91 6b 01 	lds	r27, 0x016B
    3118:	82 0f       	add	r24, r18
    311a:	93 1f       	adc	r25, r19
    311c:	a4 1f       	adc	r26, r20
    311e:	b5 1f       	adc	r27, r21
    3120:	80 93 cc 01 	sts	0x01CC, r24
    3124:	90 93 cd 01 	sts	0x01CD, r25
    3128:	a0 93 ce 01 	sts	0x01CE, r26
    312c:	b0 93 cf 01 	sts	0x01CF, r27
							cur_state = DAH;
    3130:	83 e0       	ldi	r24, 0x03	; 3
    3132:	80 93 c0 01 	sts	0x01C0, r24
							tx_start = cur_timer + TX_ON_DELAY;
    3136:	80 91 68 01 	lds	r24, 0x0168
    313a:	90 91 69 01 	lds	r25, 0x0169
    313e:	a0 91 6a 01 	lds	r26, 0x016A
    3142:	b0 91 6b 01 	lds	r27, 0x016B
    3146:	01 96       	adiw	r24, 0x01	; 1
    3148:	a1 1d       	adc	r26, r1
    314a:	b1 1d       	adc	r27, r1
    314c:	80 93 a8 01 	sts	0x01A8, r24
    3150:	90 93 a9 01 	sts	0x01A9, r25
    3154:	a0 93 aa 01 	sts	0x01AA, r26
    3158:	b0 93 ab 01 	sts	0x01AB, r27
							tx_end = cur_state_end;
    315c:	80 91 cc 01 	lds	r24, 0x01CC
    3160:	90 91 cd 01 	lds	r25, 0x01CD
    3164:	a0 91 ce 01 	lds	r26, 0x01CE
    3168:	b0 91 cf 01 	lds	r27, 0x01CF
    316c:	80 93 e9 01 	sts	0x01E9, r24
    3170:	90 93 ea 01 	sts	0x01EA, r25
    3174:	a0 93 eb 01 	sts	0x01EB, r26
    3178:	b0 93 ec 01 	sts	0x01EC, r27
							mute_start = cur_timer;
    317c:	80 91 68 01 	lds	r24, 0x0168
    3180:	90 91 69 01 	lds	r25, 0x0169
    3184:	a0 91 6a 01 	lds	r26, 0x016A
    3188:	b0 91 6b 01 	lds	r27, 0x016B
    318c:	80 93 e3 01 	sts	0x01E3, r24
    3190:	90 93 e4 01 	sts	0x01E4, r25
    3194:	a0 93 e5 01 	sts	0x01E5, r26
    3198:	b0 93 e6 01 	sts	0x01E6, r27
							mute_end = UINT32_MAX;
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	9f ef       	ldi	r25, 0xFF	; 255
    31a0:	dc 01       	movw	r26, r24
    31a2:	80 93 d0 01 	sts	0x01D0, r24
    31a6:	90 93 d1 01 	sts	0x01D1, r25
    31aa:	a0 93 d2 01 	sts	0x01D2, r26
    31ae:	b0 93 d3 01 	sts	0x01D3, r27
    31b2:	5c c0       	rjmp	.+184    	; 0x326c <main+0x18d4>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    31b4:	80 91 73 01 	lds	r24, 0x0173
    31b8:	90 91 74 01 	lds	r25, 0x0174
    31bc:	9c 01       	movw	r18, r24
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	80 91 68 01 	lds	r24, 0x0168
    31c6:	90 91 69 01 	lds	r25, 0x0169
    31ca:	a0 91 6a 01 	lds	r26, 0x016A
    31ce:	b0 91 6b 01 	lds	r27, 0x016B
    31d2:	82 0f       	add	r24, r18
    31d4:	93 1f       	adc	r25, r19
    31d6:	a4 1f       	adc	r26, r20
    31d8:	b5 1f       	adc	r27, r21
    31da:	80 93 cc 01 	sts	0x01CC, r24
    31de:	90 93 cd 01 	sts	0x01CD, r25
    31e2:	a0 93 ce 01 	sts	0x01CE, r26
    31e6:	b0 93 cf 01 	sts	0x01CF, r27
							cur_state = DIT;
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	80 93 c0 01 	sts	0x01C0, r24
							tx_start = cur_timer + TX_ON_DELAY;
    31f0:	80 91 68 01 	lds	r24, 0x0168
    31f4:	90 91 69 01 	lds	r25, 0x0169
    31f8:	a0 91 6a 01 	lds	r26, 0x016A
    31fc:	b0 91 6b 01 	lds	r27, 0x016B
    3200:	01 96       	adiw	r24, 0x01	; 1
    3202:	a1 1d       	adc	r26, r1
    3204:	b1 1d       	adc	r27, r1
    3206:	80 93 a8 01 	sts	0x01A8, r24
    320a:	90 93 a9 01 	sts	0x01A9, r25
    320e:	a0 93 aa 01 	sts	0x01AA, r26
    3212:	b0 93 ab 01 	sts	0x01AB, r27
							tx_end = cur_state_end;
    3216:	80 91 cc 01 	lds	r24, 0x01CC
    321a:	90 91 cd 01 	lds	r25, 0x01CD
    321e:	a0 91 ce 01 	lds	r26, 0x01CE
    3222:	b0 91 cf 01 	lds	r27, 0x01CF
    3226:	80 93 e9 01 	sts	0x01E9, r24
    322a:	90 93 ea 01 	sts	0x01EA, r25
    322e:	a0 93 eb 01 	sts	0x01EB, r26
    3232:	b0 93 ec 01 	sts	0x01EC, r27
							mute_start = cur_timer;
    3236:	80 91 68 01 	lds	r24, 0x0168
    323a:	90 91 69 01 	lds	r25, 0x0169
    323e:	a0 91 6a 01 	lds	r26, 0x016A
    3242:	b0 91 6b 01 	lds	r27, 0x016B
    3246:	80 93 e3 01 	sts	0x01E3, r24
    324a:	90 93 e4 01 	sts	0x01E4, r25
    324e:	a0 93 e5 01 	sts	0x01E5, r26
    3252:	b0 93 e6 01 	sts	0x01E6, r27
							mute_end = UINT32_MAX;
    3256:	8f ef       	ldi	r24, 0xFF	; 255
    3258:	9f ef       	ldi	r25, 0xFF	; 255
    325a:	dc 01       	movw	r26, r24
    325c:	80 93 d0 01 	sts	0x01D0, r24
    3260:	90 93 d1 01 	sts	0x01D1, r25
    3264:	a0 93 d2 01 	sts	0x01D2, r26
    3268:	b0 93 d3 01 	sts	0x01D3, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    326c:	80 91 42 01 	lds	r24, 0x0142
    3270:	88 0f       	add	r24, r24
    3272:	80 93 42 01 	sts	0x0142, r24
    3276:	3d c0       	rjmp	.+122    	; 0x32f2 <main+0x195a>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    3278:	80 91 e7 01 	lds	r24, 0x01E7
    327c:	90 91 e8 01 	lds	r25, 0x01E8
    3280:	2c e2       	ldi	r18, 0x2C	; 44
    3282:	31 e0       	ldi	r19, 0x01	; 1
    3284:	b9 01       	movw	r22, r18
    3286:	41 e0       	ldi	r20, 0x01	; 1
    3288:	50 e0       	ldi	r21, 0x00	; 0
    328a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <memcpy>
					cur_char_p = announce_buffer;
    328e:	80 91 e7 01 	lds	r24, 0x01E7
    3292:	90 91 e8 01 	lds	r25, 0x01E8
    3296:	90 93 3f 01 	sts	0x013F, r25
    329a:	80 93 3e 01 	sts	0x013E, r24
					cur_character = '\0';
    329e:	10 92 42 01 	sts	0x0142, r1

					// Set back into previous mode
					mute_end = cur_timer;
    32a2:	80 91 68 01 	lds	r24, 0x0168
    32a6:	90 91 69 01 	lds	r25, 0x0169
    32aa:	a0 91 6a 01 	lds	r26, 0x016A
    32ae:	b0 91 6b 01 	lds	r27, 0x016B
    32b2:	80 93 d0 01 	sts	0x01D0, r24
    32b6:	90 93 d1 01 	sts	0x01D1, r25
    32ba:	a0 93 d2 01 	sts	0x01D2, r26
    32be:	b0 93 d3 01 	sts	0x01D3, r27
					cur_mode = prev_mode;
    32c2:	80 91 b8 01 	lds	r24, 0x01B8
    32c6:	80 93 a2 01 	sts	0x01A2, r24
					cur_state = prev_state;
    32ca:	80 91 72 01 	lds	r24, 0x0172
    32ce:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = prev_state_end;
    32d2:	80 91 b4 01 	lds	r24, 0x01B4
    32d6:	90 91 b5 01 	lds	r25, 0x01B5
    32da:	a0 91 b6 01 	lds	r26, 0x01B6
    32de:	b0 91 b7 01 	lds	r27, 0x01B7
    32e2:	80 93 cc 01 	sts	0x01CC, r24
    32e6:	90 93 cd 01 	sts	0x01CD, r25
    32ea:	a0 93 ce 01 	sts	0x01CE, r26
    32ee:	b0 93 cf 01 	sts	0x01CF, r27
				}
				break;
    32f2:	5e c0       	rjmp	.+188    	; 0x33b0 <main+0x1a18>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    32f4:	20 91 68 01 	lds	r18, 0x0168
    32f8:	30 91 69 01 	lds	r19, 0x0169
    32fc:	40 91 6a 01 	lds	r20, 0x016A
    3300:	50 91 6b 01 	lds	r21, 0x016B
    3304:	80 91 cc 01 	lds	r24, 0x01CC
    3308:	90 91 cd 01 	lds	r25, 0x01CD
    330c:	a0 91 ce 01 	lds	r26, 0x01CE
    3310:	b0 91 cf 01 	lds	r27, 0x01CF
    3314:	82 17       	cp	r24, r18
    3316:	93 07       	cpc	r25, r19
    3318:	a4 07       	cpc	r26, r20
    331a:	b5 07       	cpc	r27, r21
    331c:	f0 f4       	brcc	.+60     	; 0x335a <main+0x19c2>
				{
					cur_state_end = cur_timer + dit_length;
    331e:	80 91 73 01 	lds	r24, 0x0173
    3322:	90 91 74 01 	lds	r25, 0x0174
    3326:	9c 01       	movw	r18, r24
    3328:	40 e0       	ldi	r20, 0x00	; 0
    332a:	50 e0       	ldi	r21, 0x00	; 0
    332c:	80 91 68 01 	lds	r24, 0x0168
    3330:	90 91 69 01 	lds	r25, 0x0169
    3334:	a0 91 6a 01 	lds	r26, 0x016A
    3338:	b0 91 6b 01 	lds	r27, 0x016B
    333c:	82 0f       	add	r24, r18
    333e:	93 1f       	adc	r25, r19
    3340:	a4 1f       	adc	r26, r20
    3342:	b5 1f       	adc	r27, r21
    3344:	80 93 cc 01 	sts	0x01CC, r24
    3348:	90 93 cd 01 	sts	0x01CD, r25
    334c:	a0 93 ce 01 	sts	0x01CE, r26
    3350:	b0 93 cf 01 	sts	0x01CF, r27
					cur_state = DITDELAY;
    3354:	84 e0       	ldi	r24, 0x04	; 4
    3356:	80 93 c0 01 	sts	0x01C0, r24
				}

				key_down = TRUE;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	80 93 3c 01 	sts	0x013C, r24
				sidetone_on = TRUE;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	80 93 3b 01 	sts	0x013B, r24
				break;
    336c:	21 c0       	rjmp	.+66     	; 0x33b0 <main+0x1a18>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    336e:	20 91 68 01 	lds	r18, 0x0168
    3372:	30 91 69 01 	lds	r19, 0x0169
    3376:	40 91 6a 01 	lds	r20, 0x016A
    337a:	50 91 6b 01 	lds	r21, 0x016B
    337e:	80 91 cc 01 	lds	r24, 0x01CC
    3382:	90 91 cd 01 	lds	r25, 0x01CD
    3386:	a0 91 ce 01 	lds	r26, 0x01CE
    338a:	b0 91 cf 01 	lds	r27, 0x01CF
    338e:	82 17       	cp	r24, r18
    3390:	93 07       	cpc	r25, r19
    3392:	a4 07       	cpc	r26, r20
    3394:	b5 07       	cpc	r27, r21
    3396:	18 f4       	brcc	.+6      	; 0x339e <main+0x1a06>
					cur_state = IDLE;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	80 93 c0 01 	sts	0x01C0, r24

				key_down = FALSE;
    339e:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    33a2:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	80 93 3b 01 	sts	0x013B, r24
				break;
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <main+0x1a18>

			default:
				break;
    33ae:	00 00       	nop
			}
			break;
    33b0:	01 c0       	rjmp	.+2      	; 0x33b4 <main+0x1a1c>
				break;
			}
			break;
		*/
		default:
			break;
    33b2:	00 00       	nop
		} // END switch(cur_mode)

	}
    33b4:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <main+0x86>

000033b8 <__mulsi3>:
    33b8:	62 9f       	mul	r22, r18
    33ba:	d0 01       	movw	r26, r0
    33bc:	73 9f       	mul	r23, r19
    33be:	f0 01       	movw	r30, r0
    33c0:	82 9f       	mul	r24, r18
    33c2:	e0 0d       	add	r30, r0
    33c4:	f1 1d       	adc	r31, r1
    33c6:	64 9f       	mul	r22, r20
    33c8:	e0 0d       	add	r30, r0
    33ca:	f1 1d       	adc	r31, r1
    33cc:	92 9f       	mul	r25, r18
    33ce:	f0 0d       	add	r31, r0
    33d0:	83 9f       	mul	r24, r19
    33d2:	f0 0d       	add	r31, r0
    33d4:	74 9f       	mul	r23, r20
    33d6:	f0 0d       	add	r31, r0
    33d8:	65 9f       	mul	r22, r21
    33da:	f0 0d       	add	r31, r0
    33dc:	99 27       	eor	r25, r25
    33de:	72 9f       	mul	r23, r18
    33e0:	b0 0d       	add	r27, r0
    33e2:	e1 1d       	adc	r30, r1
    33e4:	f9 1f       	adc	r31, r25
    33e6:	63 9f       	mul	r22, r19
    33e8:	b0 0d       	add	r27, r0
    33ea:	e1 1d       	adc	r30, r1
    33ec:	f9 1f       	adc	r31, r25
    33ee:	bd 01       	movw	r22, r26
    33f0:	cf 01       	movw	r24, r30
    33f2:	11 24       	eor	r1, r1
    33f4:	08 95       	ret

000033f6 <__udivmodhi4>:
    33f6:	aa 1b       	sub	r26, r26
    33f8:	bb 1b       	sub	r27, r27
    33fa:	51 e1       	ldi	r21, 0x11	; 17
    33fc:	07 c0       	rjmp	.+14     	; 0x340c <__udivmodhi4_ep>

000033fe <__udivmodhi4_loop>:
    33fe:	aa 1f       	adc	r26, r26
    3400:	bb 1f       	adc	r27, r27
    3402:	a6 17       	cp	r26, r22
    3404:	b7 07       	cpc	r27, r23
    3406:	10 f0       	brcs	.+4      	; 0x340c <__udivmodhi4_ep>
    3408:	a6 1b       	sub	r26, r22
    340a:	b7 0b       	sbc	r27, r23

0000340c <__udivmodhi4_ep>:
    340c:	88 1f       	adc	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	5a 95       	dec	r21
    3412:	a9 f7       	brne	.-22     	; 0x33fe <__udivmodhi4_loop>
    3414:	80 95       	com	r24
    3416:	90 95       	com	r25
    3418:	bc 01       	movw	r22, r24
    341a:	cd 01       	movw	r24, r26
    341c:	08 95       	ret

0000341e <__divmodhi4>:
    341e:	97 fb       	bst	r25, 7
    3420:	09 2e       	mov	r0, r25
    3422:	07 26       	eor	r0, r23
    3424:	0a d0       	rcall	.+20     	; 0x343a <__divmodhi4_neg1>
    3426:	77 fd       	sbrc	r23, 7
    3428:	04 d0       	rcall	.+8      	; 0x3432 <__divmodhi4_neg2>
    342a:	e5 df       	rcall	.-54     	; 0x33f6 <__udivmodhi4>
    342c:	06 d0       	rcall	.+12     	; 0x343a <__divmodhi4_neg1>
    342e:	00 20       	and	r0, r0
    3430:	1a f4       	brpl	.+6      	; 0x3438 <__divmodhi4_exit>

00003432 <__divmodhi4_neg2>:
    3432:	70 95       	com	r23
    3434:	61 95       	neg	r22
    3436:	7f 4f       	sbci	r23, 0xFF	; 255

00003438 <__divmodhi4_exit>:
    3438:	08 95       	ret

0000343a <__divmodhi4_neg1>:
    343a:	f6 f7       	brtc	.-4      	; 0x3438 <__divmodhi4_exit>
    343c:	90 95       	com	r25
    343e:	81 95       	neg	r24
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	08 95       	ret

00003444 <__udivmodsi4>:
    3444:	a1 e2       	ldi	r26, 0x21	; 33
    3446:	1a 2e       	mov	r1, r26
    3448:	aa 1b       	sub	r26, r26
    344a:	bb 1b       	sub	r27, r27
    344c:	fd 01       	movw	r30, r26
    344e:	0d c0       	rjmp	.+26     	; 0x346a <__udivmodsi4_ep>

00003450 <__udivmodsi4_loop>:
    3450:	aa 1f       	adc	r26, r26
    3452:	bb 1f       	adc	r27, r27
    3454:	ee 1f       	adc	r30, r30
    3456:	ff 1f       	adc	r31, r31
    3458:	a2 17       	cp	r26, r18
    345a:	b3 07       	cpc	r27, r19
    345c:	e4 07       	cpc	r30, r20
    345e:	f5 07       	cpc	r31, r21
    3460:	20 f0       	brcs	.+8      	; 0x346a <__udivmodsi4_ep>
    3462:	a2 1b       	sub	r26, r18
    3464:	b3 0b       	sbc	r27, r19
    3466:	e4 0b       	sbc	r30, r20
    3468:	f5 0b       	sbc	r31, r21

0000346a <__udivmodsi4_ep>:
    346a:	66 1f       	adc	r22, r22
    346c:	77 1f       	adc	r23, r23
    346e:	88 1f       	adc	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	1a 94       	dec	r1
    3474:	69 f7       	brne	.-38     	; 0x3450 <__udivmodsi4_loop>
    3476:	60 95       	com	r22
    3478:	70 95       	com	r23
    347a:	80 95       	com	r24
    347c:	90 95       	com	r25
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
    3482:	bd 01       	movw	r22, r26
    3484:	cf 01       	movw	r24, r30
    3486:	08 95       	ret

00003488 <malloc>:
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	82 30       	cpi	r24, 0x02	; 2
    348e:	91 05       	cpc	r25, r1
    3490:	10 f4       	brcc	.+4      	; 0x3496 <malloc+0xe>
    3492:	82 e0       	ldi	r24, 0x02	; 2
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	e0 91 f1 01 	lds	r30, 0x01F1
    349a:	f0 91 f2 01 	lds	r31, 0x01F2
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	26 c0       	rjmp	.+76     	; 0x34f4 <malloc+0x6c>
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	68 17       	cp	r22, r24
    34ae:	79 07       	cpc	r23, r25
    34b0:	e0 f0       	brcs	.+56     	; 0x34ea <malloc+0x62>
    34b2:	68 17       	cp	r22, r24
    34b4:	79 07       	cpc	r23, r25
    34b6:	81 f4       	brne	.+32     	; 0x34d8 <malloc+0x50>
    34b8:	82 81       	ldd	r24, Z+2	; 0x02
    34ba:	93 81       	ldd	r25, Z+3	; 0x03
    34bc:	21 15       	cp	r18, r1
    34be:	31 05       	cpc	r19, r1
    34c0:	31 f0       	breq	.+12     	; 0x34ce <malloc+0x46>
    34c2:	d9 01       	movw	r26, r18
    34c4:	13 96       	adiw	r26, 0x03	; 3
    34c6:	9c 93       	st	X, r25
    34c8:	8e 93       	st	-X, r24
    34ca:	12 97       	sbiw	r26, 0x02	; 2
    34cc:	2b c0       	rjmp	.+86     	; 0x3524 <malloc+0x9c>
    34ce:	90 93 f2 01 	sts	0x01F2, r25
    34d2:	80 93 f1 01 	sts	0x01F1, r24
    34d6:	26 c0       	rjmp	.+76     	; 0x3524 <malloc+0x9c>
    34d8:	41 15       	cp	r20, r1
    34da:	51 05       	cpc	r21, r1
    34dc:	19 f0       	breq	.+6      	; 0x34e4 <malloc+0x5c>
    34de:	64 17       	cp	r22, r20
    34e0:	75 07       	cpc	r23, r21
    34e2:	18 f4       	brcc	.+6      	; 0x34ea <malloc+0x62>
    34e4:	ab 01       	movw	r20, r22
    34e6:	e9 01       	movw	r28, r18
    34e8:	df 01       	movw	r26, r30
    34ea:	9f 01       	movw	r18, r30
    34ec:	72 81       	ldd	r23, Z+2	; 0x02
    34ee:	63 81       	ldd	r22, Z+3	; 0x03
    34f0:	e7 2f       	mov	r30, r23
    34f2:	f6 2f       	mov	r31, r22
    34f4:	30 97       	sbiw	r30, 0x00	; 0
    34f6:	c1 f6       	brne	.-80     	; 0x34a8 <malloc+0x20>
    34f8:	41 15       	cp	r20, r1
    34fa:	51 05       	cpc	r21, r1
    34fc:	01 f1       	breq	.+64     	; 0x353e <malloc+0xb6>
    34fe:	48 1b       	sub	r20, r24
    3500:	59 0b       	sbc	r21, r25
    3502:	44 30       	cpi	r20, 0x04	; 4
    3504:	51 05       	cpc	r21, r1
    3506:	80 f4       	brcc	.+32     	; 0x3528 <malloc+0xa0>
    3508:	12 96       	adiw	r26, 0x02	; 2
    350a:	8d 91       	ld	r24, X+
    350c:	9c 91       	ld	r25, X
    350e:	13 97       	sbiw	r26, 0x03	; 3
    3510:	20 97       	sbiw	r28, 0x00	; 0
    3512:	19 f0       	breq	.+6      	; 0x351a <malloc+0x92>
    3514:	9b 83       	std	Y+3, r25	; 0x03
    3516:	8a 83       	std	Y+2, r24	; 0x02
    3518:	04 c0       	rjmp	.+8      	; 0x3522 <malloc+0x9a>
    351a:	90 93 f2 01 	sts	0x01F2, r25
    351e:	80 93 f1 01 	sts	0x01F1, r24
    3522:	fd 01       	movw	r30, r26
    3524:	32 96       	adiw	r30, 0x02	; 2
    3526:	46 c0       	rjmp	.+140    	; 0x35b4 <malloc+0x12c>
    3528:	fd 01       	movw	r30, r26
    352a:	e4 0f       	add	r30, r20
    352c:	f5 1f       	adc	r31, r21
    352e:	81 93       	st	Z+, r24
    3530:	91 93       	st	Z+, r25
    3532:	42 50       	subi	r20, 0x02	; 2
    3534:	50 40       	sbci	r21, 0x00	; 0
    3536:	11 96       	adiw	r26, 0x01	; 1
    3538:	5c 93       	st	X, r21
    353a:	4e 93       	st	-X, r20
    353c:	3b c0       	rjmp	.+118    	; 0x35b4 <malloc+0x12c>
    353e:	20 91 ef 01 	lds	r18, 0x01EF
    3542:	30 91 f0 01 	lds	r19, 0x01F0
    3546:	21 15       	cp	r18, r1
    3548:	31 05       	cpc	r19, r1
    354a:	41 f4       	brne	.+16     	; 0x355c <malloc+0xd4>
    354c:	20 91 36 01 	lds	r18, 0x0136
    3550:	30 91 37 01 	lds	r19, 0x0137
    3554:	30 93 f0 01 	sts	0x01F0, r19
    3558:	20 93 ef 01 	sts	0x01EF, r18
    355c:	20 91 38 01 	lds	r18, 0x0138
    3560:	30 91 39 01 	lds	r19, 0x0139
    3564:	21 15       	cp	r18, r1
    3566:	31 05       	cpc	r19, r1
    3568:	41 f4       	brne	.+16     	; 0x357a <malloc+0xf2>
    356a:	2d b7       	in	r18, 0x3d	; 61
    356c:	3e b7       	in	r19, 0x3e	; 62
    356e:	40 91 34 01 	lds	r20, 0x0134
    3572:	50 91 35 01 	lds	r21, 0x0135
    3576:	24 1b       	sub	r18, r20
    3578:	35 0b       	sbc	r19, r21
    357a:	e0 91 ef 01 	lds	r30, 0x01EF
    357e:	f0 91 f0 01 	lds	r31, 0x01F0
    3582:	e2 17       	cp	r30, r18
    3584:	f3 07       	cpc	r31, r19
    3586:	a0 f4       	brcc	.+40     	; 0x35b0 <malloc+0x128>
    3588:	2e 1b       	sub	r18, r30
    358a:	3f 0b       	sbc	r19, r31
    358c:	28 17       	cp	r18, r24
    358e:	39 07       	cpc	r19, r25
    3590:	78 f0       	brcs	.+30     	; 0x35b0 <malloc+0x128>
    3592:	ac 01       	movw	r20, r24
    3594:	4e 5f       	subi	r20, 0xFE	; 254
    3596:	5f 4f       	sbci	r21, 0xFF	; 255
    3598:	24 17       	cp	r18, r20
    359a:	35 07       	cpc	r19, r21
    359c:	48 f0       	brcs	.+18     	; 0x35b0 <malloc+0x128>
    359e:	4e 0f       	add	r20, r30
    35a0:	5f 1f       	adc	r21, r31
    35a2:	50 93 f0 01 	sts	0x01F0, r21
    35a6:	40 93 ef 01 	sts	0x01EF, r20
    35aa:	81 93       	st	Z+, r24
    35ac:	91 93       	st	Z+, r25
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <malloc+0x12c>
    35b0:	e0 e0       	ldi	r30, 0x00	; 0
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	cf 01       	movw	r24, r30
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	08 95       	ret

000035bc <free>:
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <free+0xa>
    35c4:	91 c0       	rjmp	.+290    	; 0x36e8 <free+0x12c>
    35c6:	fc 01       	movw	r30, r24
    35c8:	32 97       	sbiw	r30, 0x02	; 2
    35ca:	13 82       	std	Z+3, r1	; 0x03
    35cc:	12 82       	std	Z+2, r1	; 0x02
    35ce:	60 91 f1 01 	lds	r22, 0x01F1
    35d2:	70 91 f2 01 	lds	r23, 0x01F2
    35d6:	61 15       	cp	r22, r1
    35d8:	71 05       	cpc	r23, r1
    35da:	81 f4       	brne	.+32     	; 0x35fc <free+0x40>
    35dc:	20 81       	ld	r18, Z
    35de:	31 81       	ldd	r19, Z+1	; 0x01
    35e0:	28 0f       	add	r18, r24
    35e2:	39 1f       	adc	r19, r25
    35e4:	80 91 ef 01 	lds	r24, 0x01EF
    35e8:	90 91 f0 01 	lds	r25, 0x01F0
    35ec:	82 17       	cp	r24, r18
    35ee:	93 07       	cpc	r25, r19
    35f0:	99 f5       	brne	.+102    	; 0x3658 <free+0x9c>
    35f2:	f0 93 f0 01 	sts	0x01F0, r31
    35f6:	e0 93 ef 01 	sts	0x01EF, r30
    35fa:	76 c0       	rjmp	.+236    	; 0x36e8 <free+0x12c>
    35fc:	db 01       	movw	r26, r22
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <free+0x4c>
    3604:	cd 01       	movw	r24, r26
    3606:	d9 01       	movw	r26, r18
    3608:	ae 17       	cp	r26, r30
    360a:	bf 07       	cpc	r27, r31
    360c:	48 f4       	brcc	.+18     	; 0x3620 <free+0x64>
    360e:	12 96       	adiw	r26, 0x02	; 2
    3610:	2d 91       	ld	r18, X+
    3612:	3c 91       	ld	r19, X
    3614:	13 97       	sbiw	r26, 0x03	; 3
    3616:	21 15       	cp	r18, r1
    3618:	31 05       	cpc	r19, r1
    361a:	a1 f7       	brne	.-24     	; 0x3604 <free+0x48>
    361c:	cd 01       	movw	r24, r26
    361e:	21 c0       	rjmp	.+66     	; 0x3662 <free+0xa6>
    3620:	b3 83       	std	Z+3, r27	; 0x03
    3622:	a2 83       	std	Z+2, r26	; 0x02
    3624:	ef 01       	movw	r28, r30
    3626:	49 91       	ld	r20, Y+
    3628:	59 91       	ld	r21, Y+
    362a:	9e 01       	movw	r18, r28
    362c:	24 0f       	add	r18, r20
    362e:	35 1f       	adc	r19, r21
    3630:	a2 17       	cp	r26, r18
    3632:	b3 07       	cpc	r27, r19
    3634:	79 f4       	brne	.+30     	; 0x3654 <free+0x98>
    3636:	2d 91       	ld	r18, X+
    3638:	3c 91       	ld	r19, X
    363a:	11 97       	sbiw	r26, 0x01	; 1
    363c:	24 0f       	add	r18, r20
    363e:	35 1f       	adc	r19, r21
    3640:	2e 5f       	subi	r18, 0xFE	; 254
    3642:	3f 4f       	sbci	r19, 0xFF	; 255
    3644:	31 83       	std	Z+1, r19	; 0x01
    3646:	20 83       	st	Z, r18
    3648:	12 96       	adiw	r26, 0x02	; 2
    364a:	2d 91       	ld	r18, X+
    364c:	3c 91       	ld	r19, X
    364e:	13 97       	sbiw	r26, 0x03	; 3
    3650:	33 83       	std	Z+3, r19	; 0x03
    3652:	22 83       	std	Z+2, r18	; 0x02
    3654:	00 97       	sbiw	r24, 0x00	; 0
    3656:	29 f4       	brne	.+10     	; 0x3662 <free+0xa6>
    3658:	f0 93 f2 01 	sts	0x01F2, r31
    365c:	e0 93 f1 01 	sts	0x01F1, r30
    3660:	43 c0       	rjmp	.+134    	; 0x36e8 <free+0x12c>
    3662:	dc 01       	movw	r26, r24
    3664:	13 96       	adiw	r26, 0x03	; 3
    3666:	fc 93       	st	X, r31
    3668:	ee 93       	st	-X, r30
    366a:	12 97       	sbiw	r26, 0x02	; 2
    366c:	4d 91       	ld	r20, X+
    366e:	5d 91       	ld	r21, X+
    3670:	a4 0f       	add	r26, r20
    3672:	b5 1f       	adc	r27, r21
    3674:	ea 17       	cp	r30, r26
    3676:	fb 07       	cpc	r31, r27
    3678:	69 f4       	brne	.+26     	; 0x3694 <free+0xd8>
    367a:	20 81       	ld	r18, Z
    367c:	31 81       	ldd	r19, Z+1	; 0x01
    367e:	24 0f       	add	r18, r20
    3680:	35 1f       	adc	r19, r21
    3682:	2e 5f       	subi	r18, 0xFE	; 254
    3684:	3f 4f       	sbci	r19, 0xFF	; 255
    3686:	ec 01       	movw	r28, r24
    3688:	39 83       	std	Y+1, r19	; 0x01
    368a:	28 83       	st	Y, r18
    368c:	22 81       	ldd	r18, Z+2	; 0x02
    368e:	33 81       	ldd	r19, Z+3	; 0x03
    3690:	3b 83       	std	Y+3, r19	; 0x03
    3692:	2a 83       	std	Y+2, r18	; 0x02
    3694:	e0 e0       	ldi	r30, 0x00	; 0
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	02 c0       	rjmp	.+4      	; 0x369e <free+0xe2>
    369a:	fb 01       	movw	r30, r22
    369c:	bc 01       	movw	r22, r24
    369e:	db 01       	movw	r26, r22
    36a0:	12 96       	adiw	r26, 0x02	; 2
    36a2:	8d 91       	ld	r24, X+
    36a4:	9c 91       	ld	r25, X
    36a6:	13 97       	sbiw	r26, 0x03	; 3
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	b9 f7       	brne	.-18     	; 0x369a <free+0xde>
    36ac:	9b 01       	movw	r18, r22
    36ae:	2e 5f       	subi	r18, 0xFE	; 254
    36b0:	3f 4f       	sbci	r19, 0xFF	; 255
    36b2:	8d 91       	ld	r24, X+
    36b4:	9c 91       	ld	r25, X
    36b6:	11 97       	sbiw	r26, 0x01	; 1
    36b8:	82 0f       	add	r24, r18
    36ba:	93 1f       	adc	r25, r19
    36bc:	40 91 ef 01 	lds	r20, 0x01EF
    36c0:	50 91 f0 01 	lds	r21, 0x01F0
    36c4:	48 17       	cp	r20, r24
    36c6:	59 07       	cpc	r21, r25
    36c8:	79 f4       	brne	.+30     	; 0x36e8 <free+0x12c>
    36ca:	30 97       	sbiw	r30, 0x00	; 0
    36cc:	29 f4       	brne	.+10     	; 0x36d8 <free+0x11c>
    36ce:	10 92 f2 01 	sts	0x01F2, r1
    36d2:	10 92 f1 01 	sts	0x01F1, r1
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <free+0x120>
    36d8:	13 82       	std	Z+3, r1	; 0x03
    36da:	12 82       	std	Z+2, r1	; 0x02
    36dc:	22 50       	subi	r18, 0x02	; 2
    36de:	30 40       	sbci	r19, 0x00	; 0
    36e0:	30 93 f0 01 	sts	0x01F0, r19
    36e4:	20 93 ef 01 	sts	0x01EF, r18
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
    36ec:	08 95       	ret

000036ee <memcpy>:
    36ee:	fb 01       	movw	r30, r22
    36f0:	dc 01       	movw	r26, r24
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <memcpy+0xa>
    36f4:	01 90       	ld	r0, Z+
    36f6:	0d 92       	st	X+, r0
    36f8:	41 50       	subi	r20, 0x01	; 1
    36fa:	50 40       	sbci	r21, 0x00	; 0
    36fc:	d8 f7       	brcc	.-10     	; 0x36f4 <memcpy+0x6>
    36fe:	08 95       	ret

00003700 <memset>:
    3700:	dc 01       	movw	r26, r24
    3702:	01 c0       	rjmp	.+2      	; 0x3706 <memset+0x6>
    3704:	6d 93       	st	X+, r22
    3706:	41 50       	subi	r20, 0x01	; 1
    3708:	50 40       	sbci	r21, 0x00	; 0
    370a:	e0 f7       	brcc	.-8      	; 0x3704 <memset+0x4>
    370c:	08 95       	ret

0000370e <strcpy>:
    370e:	fb 01       	movw	r30, r22
    3710:	dc 01       	movw	r26, r24
    3712:	01 90       	ld	r0, Z+
    3714:	0d 92       	st	X+, r0
    3716:	00 20       	and	r0, r0
    3718:	e1 f7       	brne	.-8      	; 0x3712 <strcpy+0x4>
    371a:	08 95       	ret

0000371c <strupr>:
    371c:	dc 01       	movw	r26, r24
    371e:	6c 91       	ld	r22, X
    3720:	61 56       	subi	r22, 0x61	; 97
    3722:	6a 31       	cpi	r22, 0x1A	; 26
    3724:	08 f0       	brcs	.+2      	; 0x3728 <strupr+0xc>
    3726:	60 5e       	subi	r22, 0xE0	; 224
    3728:	6f 5b       	subi	r22, 0xBF	; 191
    372a:	6d 93       	st	X+, r22
    372c:	c1 f7       	brne	.-16     	; 0x371e <strupr+0x2>
    372e:	08 95       	ret

00003730 <sprintf>:
    3730:	ae e0       	ldi	r26, 0x0E	; 14
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	ee e9       	ldi	r30, 0x9E	; 158
    3736:	fb e1       	ldi	r31, 0x1B	; 27
    3738:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x1c>
    373c:	0d 89       	ldd	r16, Y+21	; 0x15
    373e:	1e 89       	ldd	r17, Y+22	; 0x16
    3740:	86 e0       	ldi	r24, 0x06	; 6
    3742:	8c 83       	std	Y+4, r24	; 0x04
    3744:	1a 83       	std	Y+2, r17	; 0x02
    3746:	09 83       	std	Y+1, r16	; 0x01
    3748:	8f ef       	ldi	r24, 0xFF	; 255
    374a:	9f e7       	ldi	r25, 0x7F	; 127
    374c:	9e 83       	std	Y+6, r25	; 0x06
    374e:	8d 83       	std	Y+5, r24	; 0x05
    3750:	9e 01       	movw	r18, r28
    3752:	27 5e       	subi	r18, 0xE7	; 231
    3754:	3f 4f       	sbci	r19, 0xFF	; 255
    3756:	ce 01       	movw	r24, r28
    3758:	01 96       	adiw	r24, 0x01	; 1
    375a:	6f 89       	ldd	r22, Y+23	; 0x17
    375c:	78 8d       	ldd	r23, Y+24	; 0x18
    375e:	a9 01       	movw	r20, r18
    3760:	0e 94 bb 1b 	call	0x3776	; 0x3776 <vfprintf>
    3764:	ef 81       	ldd	r30, Y+7	; 0x07
    3766:	f8 85       	ldd	r31, Y+8	; 0x08
    3768:	e0 0f       	add	r30, r16
    376a:	f1 1f       	adc	r31, r17
    376c:	10 82       	st	Z, r1
    376e:	2e 96       	adiw	r28, 0x0e	; 14
    3770:	e4 e0       	ldi	r30, 0x04	; 4
    3772:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x1c>

00003776 <vfprintf>:
    3776:	ac e0       	ldi	r26, 0x0C	; 12
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	e1 ec       	ldi	r30, 0xC1	; 193
    377c:	fb e1       	ldi	r31, 0x1B	; 27
    377e:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__prologue_saves__>
    3782:	6c 01       	movw	r12, r24
    3784:	1b 01       	movw	r2, r22
    3786:	8a 01       	movw	r16, r20
    3788:	fc 01       	movw	r30, r24
    378a:	17 82       	std	Z+7, r1	; 0x07
    378c:	16 82       	std	Z+6, r1	; 0x06
    378e:	83 81       	ldd	r24, Z+3	; 0x03
    3790:	81 ff       	sbrs	r24, 1
    3792:	d1 c1       	rjmp	.+930    	; 0x3b36 <vfprintf+0x3c0>
    3794:	2e 01       	movw	r4, r28
    3796:	08 94       	sec
    3798:	41 1c       	adc	r4, r1
    379a:	51 1c       	adc	r5, r1
    379c:	f6 01       	movw	r30, r12
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	f1 01       	movw	r30, r2
    37a2:	93 fd       	sbrc	r25, 3
    37a4:	85 91       	lpm	r24, Z+
    37a6:	93 ff       	sbrs	r25, 3
    37a8:	81 91       	ld	r24, Z+
    37aa:	1f 01       	movw	r2, r30
    37ac:	88 23       	and	r24, r24
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <vfprintf+0x3c>
    37b0:	be c1       	rjmp	.+892    	; 0x3b2e <vfprintf+0x3b8>
    37b2:	85 32       	cpi	r24, 0x25	; 37
    37b4:	39 f4       	brne	.+14     	; 0x37c4 <vfprintf+0x4e>
    37b6:	93 fd       	sbrc	r25, 3
    37b8:	85 91       	lpm	r24, Z+
    37ba:	93 ff       	sbrs	r25, 3
    37bc:	81 91       	ld	r24, Z+
    37be:	1f 01       	movw	r2, r30
    37c0:	85 32       	cpi	r24, 0x25	; 37
    37c2:	29 f4       	brne	.+10     	; 0x37ce <vfprintf+0x58>
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	b6 01       	movw	r22, r12
    37c8:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    37cc:	e7 cf       	rjmp	.-50     	; 0x379c <vfprintf+0x26>
    37ce:	ee 24       	eor	r14, r14
    37d0:	ff 24       	eor	r15, r15
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	20 32       	cpi	r18, 0x20	; 32
    37d6:	b0 f4       	brcc	.+44     	; 0x3804 <vfprintf+0x8e>
    37d8:	8b 32       	cpi	r24, 0x2B	; 43
    37da:	69 f0       	breq	.+26     	; 0x37f6 <vfprintf+0x80>
    37dc:	8c 32       	cpi	r24, 0x2C	; 44
    37de:	28 f4       	brcc	.+10     	; 0x37ea <vfprintf+0x74>
    37e0:	80 32       	cpi	r24, 0x20	; 32
    37e2:	51 f0       	breq	.+20     	; 0x37f8 <vfprintf+0x82>
    37e4:	83 32       	cpi	r24, 0x23	; 35
    37e6:	71 f4       	brne	.+28     	; 0x3804 <vfprintf+0x8e>
    37e8:	0b c0       	rjmp	.+22     	; 0x3800 <vfprintf+0x8a>
    37ea:	8d 32       	cpi	r24, 0x2D	; 45
    37ec:	39 f0       	breq	.+14     	; 0x37fc <vfprintf+0x86>
    37ee:	80 33       	cpi	r24, 0x30	; 48
    37f0:	49 f4       	brne	.+18     	; 0x3804 <vfprintf+0x8e>
    37f2:	21 60       	ori	r18, 0x01	; 1
    37f4:	2c c0       	rjmp	.+88     	; 0x384e <vfprintf+0xd8>
    37f6:	22 60       	ori	r18, 0x02	; 2
    37f8:	24 60       	ori	r18, 0x04	; 4
    37fa:	29 c0       	rjmp	.+82     	; 0x384e <vfprintf+0xd8>
    37fc:	28 60       	ori	r18, 0x08	; 8
    37fe:	27 c0       	rjmp	.+78     	; 0x384e <vfprintf+0xd8>
    3800:	20 61       	ori	r18, 0x10	; 16
    3802:	25 c0       	rjmp	.+74     	; 0x384e <vfprintf+0xd8>
    3804:	27 fd       	sbrc	r18, 7
    3806:	2c c0       	rjmp	.+88     	; 0x3860 <vfprintf+0xea>
    3808:	38 2f       	mov	r19, r24
    380a:	30 53       	subi	r19, 0x30	; 48
    380c:	3a 30       	cpi	r19, 0x0A	; 10
    380e:	98 f4       	brcc	.+38     	; 0x3836 <vfprintf+0xc0>
    3810:	26 ff       	sbrs	r18, 6
    3812:	08 c0       	rjmp	.+16     	; 0x3824 <vfprintf+0xae>
    3814:	8e 2d       	mov	r24, r14
    3816:	88 0f       	add	r24, r24
    3818:	e8 2e       	mov	r14, r24
    381a:	ee 0c       	add	r14, r14
    381c:	ee 0c       	add	r14, r14
    381e:	e8 0e       	add	r14, r24
    3820:	e3 0e       	add	r14, r19
    3822:	15 c0       	rjmp	.+42     	; 0x384e <vfprintf+0xd8>
    3824:	8f 2d       	mov	r24, r15
    3826:	88 0f       	add	r24, r24
    3828:	f8 2e       	mov	r15, r24
    382a:	ff 0c       	add	r15, r15
    382c:	ff 0c       	add	r15, r15
    382e:	f8 0e       	add	r15, r24
    3830:	f3 0e       	add	r15, r19
    3832:	20 62       	ori	r18, 0x20	; 32
    3834:	0c c0       	rjmp	.+24     	; 0x384e <vfprintf+0xd8>
    3836:	8e 32       	cpi	r24, 0x2E	; 46
    3838:	21 f4       	brne	.+8      	; 0x3842 <vfprintf+0xcc>
    383a:	26 fd       	sbrc	r18, 6
    383c:	78 c1       	rjmp	.+752    	; 0x3b2e <vfprintf+0x3b8>
    383e:	20 64       	ori	r18, 0x40	; 64
    3840:	06 c0       	rjmp	.+12     	; 0x384e <vfprintf+0xd8>
    3842:	8c 36       	cpi	r24, 0x6C	; 108
    3844:	11 f4       	brne	.+4      	; 0x384a <vfprintf+0xd4>
    3846:	20 68       	ori	r18, 0x80	; 128
    3848:	02 c0       	rjmp	.+4      	; 0x384e <vfprintf+0xd8>
    384a:	88 36       	cpi	r24, 0x68	; 104
    384c:	49 f4       	brne	.+18     	; 0x3860 <vfprintf+0xea>
    384e:	f1 01       	movw	r30, r2
    3850:	93 fd       	sbrc	r25, 3
    3852:	85 91       	lpm	r24, Z+
    3854:	93 ff       	sbrs	r25, 3
    3856:	81 91       	ld	r24, Z+
    3858:	1f 01       	movw	r2, r30
    385a:	88 23       	and	r24, r24
    385c:	09 f0       	breq	.+2      	; 0x3860 <vfprintf+0xea>
    385e:	ba cf       	rjmp	.-140    	; 0x37d4 <vfprintf+0x5e>
    3860:	98 2f       	mov	r25, r24
    3862:	95 54       	subi	r25, 0x45	; 69
    3864:	93 30       	cpi	r25, 0x03	; 3
    3866:	18 f0       	brcs	.+6      	; 0x386e <vfprintf+0xf8>
    3868:	90 52       	subi	r25, 0x20	; 32
    386a:	93 30       	cpi	r25, 0x03	; 3
    386c:	28 f4       	brcc	.+10     	; 0x3878 <vfprintf+0x102>
    386e:	0c 5f       	subi	r16, 0xFC	; 252
    3870:	1f 4f       	sbci	r17, 0xFF	; 255
    3872:	ff e3       	ldi	r31, 0x3F	; 63
    3874:	f9 83       	std	Y+1, r31	; 0x01
    3876:	0d c0       	rjmp	.+26     	; 0x3892 <vfprintf+0x11c>
    3878:	83 36       	cpi	r24, 0x63	; 99
    387a:	31 f0       	breq	.+12     	; 0x3888 <vfprintf+0x112>
    387c:	83 37       	cpi	r24, 0x73	; 115
    387e:	71 f0       	breq	.+28     	; 0x389c <vfprintf+0x126>
    3880:	83 35       	cpi	r24, 0x53	; 83
    3882:	09 f0       	breq	.+2      	; 0x3886 <vfprintf+0x110>
    3884:	60 c0       	rjmp	.+192    	; 0x3946 <vfprintf+0x1d0>
    3886:	22 c0       	rjmp	.+68     	; 0x38cc <vfprintf+0x156>
    3888:	f8 01       	movw	r30, r16
    388a:	80 81       	ld	r24, Z
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	0e 5f       	subi	r16, 0xFE	; 254
    3890:	1f 4f       	sbci	r17, 0xFF	; 255
    3892:	42 01       	movw	r8, r4
    3894:	71 e0       	ldi	r23, 0x01	; 1
    3896:	a7 2e       	mov	r10, r23
    3898:	b1 2c       	mov	r11, r1
    389a:	16 c0       	rjmp	.+44     	; 0x38c8 <vfprintf+0x152>
    389c:	62 e0       	ldi	r22, 0x02	; 2
    389e:	66 2e       	mov	r6, r22
    38a0:	71 2c       	mov	r7, r1
    38a2:	60 0e       	add	r6, r16
    38a4:	71 1e       	adc	r7, r17
    38a6:	f8 01       	movw	r30, r16
    38a8:	80 80       	ld	r8, Z
    38aa:	91 80       	ldd	r9, Z+1	; 0x01
    38ac:	26 ff       	sbrs	r18, 6
    38ae:	03 c0       	rjmp	.+6      	; 0x38b6 <vfprintf+0x140>
    38b0:	6e 2d       	mov	r22, r14
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <vfprintf+0x144>
    38b6:	6f ef       	ldi	r22, 0xFF	; 255
    38b8:	7f ef       	ldi	r23, 0xFF	; 255
    38ba:	c4 01       	movw	r24, r8
    38bc:	2c 87       	std	Y+12, r18	; 0x0c
    38be:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <strnlen>
    38c2:	5c 01       	movw	r10, r24
    38c4:	83 01       	movw	r16, r6
    38c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    38c8:	2f 77       	andi	r18, 0x7F	; 127
    38ca:	17 c0       	rjmp	.+46     	; 0x38fa <vfprintf+0x184>
    38cc:	52 e0       	ldi	r21, 0x02	; 2
    38ce:	65 2e       	mov	r6, r21
    38d0:	71 2c       	mov	r7, r1
    38d2:	60 0e       	add	r6, r16
    38d4:	71 1e       	adc	r7, r17
    38d6:	f8 01       	movw	r30, r16
    38d8:	80 80       	ld	r8, Z
    38da:	91 80       	ldd	r9, Z+1	; 0x01
    38dc:	26 ff       	sbrs	r18, 6
    38de:	03 c0       	rjmp	.+6      	; 0x38e6 <vfprintf+0x170>
    38e0:	6e 2d       	mov	r22, r14
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	02 c0       	rjmp	.+4      	; 0x38ea <vfprintf+0x174>
    38e6:	6f ef       	ldi	r22, 0xFF	; 255
    38e8:	7f ef       	ldi	r23, 0xFF	; 255
    38ea:	c4 01       	movw	r24, r8
    38ec:	2c 87       	std	Y+12, r18	; 0x0c
    38ee:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <strnlen_P>
    38f2:	5c 01       	movw	r10, r24
    38f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    38f6:	20 68       	ori	r18, 0x80	; 128
    38f8:	83 01       	movw	r16, r6
    38fa:	23 fd       	sbrc	r18, 3
    38fc:	20 c0       	rjmp	.+64     	; 0x393e <vfprintf+0x1c8>
    38fe:	08 c0       	rjmp	.+16     	; 0x3910 <vfprintf+0x19a>
    3900:	80 e2       	ldi	r24, 0x20	; 32
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	b6 01       	movw	r22, r12
    3906:	2c 87       	std	Y+12, r18	; 0x0c
    3908:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    390c:	fa 94       	dec	r15
    390e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3910:	8f 2d       	mov	r24, r15
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	a8 16       	cp	r10, r24
    3916:	b9 06       	cpc	r11, r25
    3918:	98 f3       	brcs	.-26     	; 0x3900 <vfprintf+0x18a>
    391a:	11 c0       	rjmp	.+34     	; 0x393e <vfprintf+0x1c8>
    391c:	f4 01       	movw	r30, r8
    391e:	27 fd       	sbrc	r18, 7
    3920:	85 91       	lpm	r24, Z+
    3922:	27 ff       	sbrs	r18, 7
    3924:	81 91       	ld	r24, Z+
    3926:	4f 01       	movw	r8, r30
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	b6 01       	movw	r22, r12
    392c:	2c 87       	std	Y+12, r18	; 0x0c
    392e:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    3932:	2c 85       	ldd	r18, Y+12	; 0x0c
    3934:	f1 10       	cpse	r15, r1
    3936:	fa 94       	dec	r15
    3938:	08 94       	sec
    393a:	a1 08       	sbc	r10, r1
    393c:	b1 08       	sbc	r11, r1
    393e:	a1 14       	cp	r10, r1
    3940:	b1 04       	cpc	r11, r1
    3942:	61 f7       	brne	.-40     	; 0x391c <vfprintf+0x1a6>
    3944:	f1 c0       	rjmp	.+482    	; 0x3b28 <vfprintf+0x3b2>
    3946:	84 36       	cpi	r24, 0x64	; 100
    3948:	11 f0       	breq	.+4      	; 0x394e <vfprintf+0x1d8>
    394a:	89 36       	cpi	r24, 0x69	; 105
    394c:	49 f5       	brne	.+82     	; 0x39a0 <vfprintf+0x22a>
    394e:	27 ff       	sbrs	r18, 7
    3950:	08 c0       	rjmp	.+16     	; 0x3962 <vfprintf+0x1ec>
    3952:	f8 01       	movw	r30, r16
    3954:	60 81       	ld	r22, Z
    3956:	71 81       	ldd	r23, Z+1	; 0x01
    3958:	82 81       	ldd	r24, Z+2	; 0x02
    395a:	93 81       	ldd	r25, Z+3	; 0x03
    395c:	0c 5f       	subi	r16, 0xFC	; 252
    395e:	1f 4f       	sbci	r17, 0xFF	; 255
    3960:	09 c0       	rjmp	.+18     	; 0x3974 <vfprintf+0x1fe>
    3962:	f8 01       	movw	r30, r16
    3964:	60 81       	ld	r22, Z
    3966:	71 81       	ldd	r23, Z+1	; 0x01
    3968:	88 27       	eor	r24, r24
    396a:	77 fd       	sbrc	r23, 7
    396c:	80 95       	com	r24
    396e:	98 2f       	mov	r25, r24
    3970:	0e 5f       	subi	r16, 0xFE	; 254
    3972:	1f 4f       	sbci	r17, 0xFF	; 255
    3974:	4f e6       	ldi	r20, 0x6F	; 111
    3976:	b4 2e       	mov	r11, r20
    3978:	b2 22       	and	r11, r18
    397a:	97 ff       	sbrs	r25, 7
    397c:	09 c0       	rjmp	.+18     	; 0x3990 <vfprintf+0x21a>
    397e:	90 95       	com	r25
    3980:	80 95       	com	r24
    3982:	70 95       	com	r23
    3984:	61 95       	neg	r22
    3986:	7f 4f       	sbci	r23, 0xFF	; 255
    3988:	8f 4f       	sbci	r24, 0xFF	; 255
    398a:	9f 4f       	sbci	r25, 0xFF	; 255
    398c:	f0 e8       	ldi	r31, 0x80	; 128
    398e:	bf 2a       	or	r11, r31
    3990:	a2 01       	movw	r20, r4
    3992:	2a e0       	ldi	r18, 0x0A	; 10
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__ultoa_invert>
    399a:	78 2e       	mov	r7, r24
    399c:	74 18       	sub	r7, r4
    399e:	45 c0       	rjmp	.+138    	; 0x3a2a <vfprintf+0x2b4>
    39a0:	85 37       	cpi	r24, 0x75	; 117
    39a2:	31 f4       	brne	.+12     	; 0x39b0 <vfprintf+0x23a>
    39a4:	3f ee       	ldi	r19, 0xEF	; 239
    39a6:	b3 2e       	mov	r11, r19
    39a8:	b2 22       	and	r11, r18
    39aa:	2a e0       	ldi	r18, 0x0A	; 10
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	25 c0       	rjmp	.+74     	; 0x39fa <vfprintf+0x284>
    39b0:	99 ef       	ldi	r25, 0xF9	; 249
    39b2:	b9 2e       	mov	r11, r25
    39b4:	b2 22       	and	r11, r18
    39b6:	8f 36       	cpi	r24, 0x6F	; 111
    39b8:	c1 f0       	breq	.+48     	; 0x39ea <vfprintf+0x274>
    39ba:	80 37       	cpi	r24, 0x70	; 112
    39bc:	20 f4       	brcc	.+8      	; 0x39c6 <vfprintf+0x250>
    39be:	88 35       	cpi	r24, 0x58	; 88
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <vfprintf+0x24e>
    39c2:	b5 c0       	rjmp	.+362    	; 0x3b2e <vfprintf+0x3b8>
    39c4:	0d c0       	rjmp	.+26     	; 0x39e0 <vfprintf+0x26a>
    39c6:	80 37       	cpi	r24, 0x70	; 112
    39c8:	21 f0       	breq	.+8      	; 0x39d2 <vfprintf+0x25c>
    39ca:	88 37       	cpi	r24, 0x78	; 120
    39cc:	09 f0       	breq	.+2      	; 0x39d0 <vfprintf+0x25a>
    39ce:	af c0       	rjmp	.+350    	; 0x3b2e <vfprintf+0x3b8>
    39d0:	02 c0       	rjmp	.+4      	; 0x39d6 <vfprintf+0x260>
    39d2:	20 e1       	ldi	r18, 0x10	; 16
    39d4:	b2 2a       	or	r11, r18
    39d6:	b4 fe       	sbrs	r11, 4
    39d8:	0b c0       	rjmp	.+22     	; 0x39f0 <vfprintf+0x27a>
    39da:	84 e0       	ldi	r24, 0x04	; 4
    39dc:	b8 2a       	or	r11, r24
    39de:	08 c0       	rjmp	.+16     	; 0x39f0 <vfprintf+0x27a>
    39e0:	b4 fe       	sbrs	r11, 4
    39e2:	09 c0       	rjmp	.+18     	; 0x39f6 <vfprintf+0x280>
    39e4:	e6 e0       	ldi	r30, 0x06	; 6
    39e6:	be 2a       	or	r11, r30
    39e8:	06 c0       	rjmp	.+12     	; 0x39f6 <vfprintf+0x280>
    39ea:	28 e0       	ldi	r18, 0x08	; 8
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	05 c0       	rjmp	.+10     	; 0x39fa <vfprintf+0x284>
    39f0:	20 e1       	ldi	r18, 0x10	; 16
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	02 c0       	rjmp	.+4      	; 0x39fa <vfprintf+0x284>
    39f6:	20 e1       	ldi	r18, 0x10	; 16
    39f8:	32 e0       	ldi	r19, 0x02	; 2
    39fa:	b7 fe       	sbrs	r11, 7
    39fc:	08 c0       	rjmp	.+16     	; 0x3a0e <vfprintf+0x298>
    39fe:	f8 01       	movw	r30, r16
    3a00:	60 81       	ld	r22, Z
    3a02:	71 81       	ldd	r23, Z+1	; 0x01
    3a04:	82 81       	ldd	r24, Z+2	; 0x02
    3a06:	93 81       	ldd	r25, Z+3	; 0x03
    3a08:	0c 5f       	subi	r16, 0xFC	; 252
    3a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a0c:	07 c0       	rjmp	.+14     	; 0x3a1c <vfprintf+0x2a6>
    3a0e:	f8 01       	movw	r30, r16
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	0e 5f       	subi	r16, 0xFE	; 254
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1c:	a2 01       	movw	r20, r4
    3a1e:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__ultoa_invert>
    3a22:	78 2e       	mov	r7, r24
    3a24:	74 18       	sub	r7, r4
    3a26:	ff e7       	ldi	r31, 0x7F	; 127
    3a28:	bf 22       	and	r11, r31
    3a2a:	b6 fe       	sbrs	r11, 6
    3a2c:	0b c0       	rjmp	.+22     	; 0x3a44 <vfprintf+0x2ce>
    3a2e:	2e ef       	ldi	r18, 0xFE	; 254
    3a30:	b2 22       	and	r11, r18
    3a32:	7e 14       	cp	r7, r14
    3a34:	38 f4       	brcc	.+14     	; 0x3a44 <vfprintf+0x2ce>
    3a36:	b4 fe       	sbrs	r11, 4
    3a38:	07 c0       	rjmp	.+14     	; 0x3a48 <vfprintf+0x2d2>
    3a3a:	b2 fc       	sbrc	r11, 2
    3a3c:	05 c0       	rjmp	.+10     	; 0x3a48 <vfprintf+0x2d2>
    3a3e:	8f ee       	ldi	r24, 0xEF	; 239
    3a40:	b8 22       	and	r11, r24
    3a42:	02 c0       	rjmp	.+4      	; 0x3a48 <vfprintf+0x2d2>
    3a44:	a7 2c       	mov	r10, r7
    3a46:	01 c0       	rjmp	.+2      	; 0x3a4a <vfprintf+0x2d4>
    3a48:	ae 2c       	mov	r10, r14
    3a4a:	8b 2d       	mov	r24, r11
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	b4 fe       	sbrs	r11, 4
    3a50:	0d c0       	rjmp	.+26     	; 0x3a6c <vfprintf+0x2f6>
    3a52:	fe 01       	movw	r30, r28
    3a54:	e7 0d       	add	r30, r7
    3a56:	f1 1d       	adc	r31, r1
    3a58:	20 81       	ld	r18, Z
    3a5a:	20 33       	cpi	r18, 0x30	; 48
    3a5c:	19 f4       	brne	.+6      	; 0x3a64 <vfprintf+0x2ee>
    3a5e:	e9 ee       	ldi	r30, 0xE9	; 233
    3a60:	be 22       	and	r11, r30
    3a62:	09 c0       	rjmp	.+18     	; 0x3a76 <vfprintf+0x300>
    3a64:	a3 94       	inc	r10
    3a66:	b2 fe       	sbrs	r11, 2
    3a68:	06 c0       	rjmp	.+12     	; 0x3a76 <vfprintf+0x300>
    3a6a:	04 c0       	rjmp	.+8      	; 0x3a74 <vfprintf+0x2fe>
    3a6c:	86 78       	andi	r24, 0x86	; 134
    3a6e:	90 70       	andi	r25, 0x00	; 0
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	09 f0       	breq	.+2      	; 0x3a76 <vfprintf+0x300>
    3a74:	a3 94       	inc	r10
    3a76:	8b 2c       	mov	r8, r11
    3a78:	99 24       	eor	r9, r9
    3a7a:	b3 fc       	sbrc	r11, 3
    3a7c:	14 c0       	rjmp	.+40     	; 0x3aa6 <vfprintf+0x330>
    3a7e:	b0 fe       	sbrs	r11, 0
    3a80:	0f c0       	rjmp	.+30     	; 0x3aa0 <vfprintf+0x32a>
    3a82:	af 14       	cp	r10, r15
    3a84:	28 f4       	brcc	.+10     	; 0x3a90 <vfprintf+0x31a>
    3a86:	e7 2c       	mov	r14, r7
    3a88:	ef 0c       	add	r14, r15
    3a8a:	ea 18       	sub	r14, r10
    3a8c:	af 2c       	mov	r10, r15
    3a8e:	08 c0       	rjmp	.+16     	; 0x3aa0 <vfprintf+0x32a>
    3a90:	e7 2c       	mov	r14, r7
    3a92:	06 c0       	rjmp	.+12     	; 0x3aa0 <vfprintf+0x32a>
    3a94:	80 e2       	ldi	r24, 0x20	; 32
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	b6 01       	movw	r22, r12
    3a9a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    3a9e:	a3 94       	inc	r10
    3aa0:	af 14       	cp	r10, r15
    3aa2:	c0 f3       	brcs	.-16     	; 0x3a94 <vfprintf+0x31e>
    3aa4:	04 c0       	rjmp	.+8      	; 0x3aae <vfprintf+0x338>
    3aa6:	af 14       	cp	r10, r15
    3aa8:	10 f4       	brcc	.+4      	; 0x3aae <vfprintf+0x338>
    3aaa:	fa 18       	sub	r15, r10
    3aac:	01 c0       	rjmp	.+2      	; 0x3ab0 <vfprintf+0x33a>
    3aae:	ff 24       	eor	r15, r15
    3ab0:	84 fe       	sbrs	r8, 4
    3ab2:	0f c0       	rjmp	.+30     	; 0x3ad2 <vfprintf+0x35c>
    3ab4:	80 e3       	ldi	r24, 0x30	; 48
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	b6 01       	movw	r22, r12
    3aba:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    3abe:	82 fe       	sbrs	r8, 2
    3ac0:	1f c0       	rjmp	.+62     	; 0x3b00 <vfprintf+0x38a>
    3ac2:	81 fe       	sbrs	r8, 1
    3ac4:	03 c0       	rjmp	.+6      	; 0x3acc <vfprintf+0x356>
    3ac6:	88 e5       	ldi	r24, 0x58	; 88
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	10 c0       	rjmp	.+32     	; 0x3aec <vfprintf+0x376>
    3acc:	88 e7       	ldi	r24, 0x78	; 120
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	0d c0       	rjmp	.+26     	; 0x3aec <vfprintf+0x376>
    3ad2:	c4 01       	movw	r24, r8
    3ad4:	86 78       	andi	r24, 0x86	; 134
    3ad6:	90 70       	andi	r25, 0x00	; 0
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	91 f0       	breq	.+36     	; 0x3b00 <vfprintf+0x38a>
    3adc:	81 fc       	sbrc	r8, 1
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <vfprintf+0x36e>
    3ae0:	80 e2       	ldi	r24, 0x20	; 32
    3ae2:	01 c0       	rjmp	.+2      	; 0x3ae6 <vfprintf+0x370>
    3ae4:	8b e2       	ldi	r24, 0x2B	; 43
    3ae6:	b7 fc       	sbrc	r11, 7
    3ae8:	8d e2       	ldi	r24, 0x2D	; 45
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	b6 01       	movw	r22, r12
    3aee:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    3af2:	06 c0       	rjmp	.+12     	; 0x3b00 <vfprintf+0x38a>
    3af4:	80 e3       	ldi	r24, 0x30	; 48
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	b6 01       	movw	r22, r12
    3afa:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    3afe:	ea 94       	dec	r14
    3b00:	7e 14       	cp	r7, r14
    3b02:	c0 f3       	brcs	.-16     	; 0x3af4 <vfprintf+0x37e>
    3b04:	7a 94       	dec	r7
    3b06:	f2 01       	movw	r30, r4
    3b08:	e7 0d       	add	r30, r7
    3b0a:	f1 1d       	adc	r31, r1
    3b0c:	80 81       	ld	r24, Z
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	b6 01       	movw	r22, r12
    3b12:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    3b16:	77 20       	and	r7, r7
    3b18:	a9 f7       	brne	.-22     	; 0x3b04 <vfprintf+0x38e>
    3b1a:	06 c0       	rjmp	.+12     	; 0x3b28 <vfprintf+0x3b2>
    3b1c:	80 e2       	ldi	r24, 0x20	; 32
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	b6 01       	movw	r22, r12
    3b22:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <fputc>
    3b26:	fa 94       	dec	r15
    3b28:	ff 20       	and	r15, r15
    3b2a:	c1 f7       	brne	.-16     	; 0x3b1c <vfprintf+0x3a6>
    3b2c:	37 ce       	rjmp	.-914    	; 0x379c <vfprintf+0x26>
    3b2e:	f6 01       	movw	r30, r12
    3b30:	26 81       	ldd	r18, Z+6	; 0x06
    3b32:	37 81       	ldd	r19, Z+7	; 0x07
    3b34:	02 c0       	rjmp	.+4      	; 0x3b3a <vfprintf+0x3c4>
    3b36:	2f ef       	ldi	r18, 0xFF	; 255
    3b38:	3f ef       	ldi	r19, 0xFF	; 255
    3b3a:	c9 01       	movw	r24, r18
    3b3c:	2c 96       	adiw	r28, 0x0c	; 12
    3b3e:	e2 e1       	ldi	r30, 0x12	; 18
    3b40:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <__epilogue_restores__>

00003b44 <__eerd_block_m168>:
    3b44:	dc 01       	movw	r26, r24
    3b46:	cb 01       	movw	r24, r22

00003b48 <__eerd_blraw_m168>:
    3b48:	fc 01       	movw	r30, r24
    3b4a:	f9 99       	sbic	0x1f, 1	; 31
    3b4c:	fe cf       	rjmp	.-4      	; 0x3b4a <__eerd_blraw_m168+0x2>
    3b4e:	06 c0       	rjmp	.+12     	; 0x3b5c <__eerd_blraw_m168+0x14>
    3b50:	f2 bd       	out	0x22, r31	; 34
    3b52:	e1 bd       	out	0x21, r30	; 33
    3b54:	f8 9a       	sbi	0x1f, 0	; 31
    3b56:	31 96       	adiw	r30, 0x01	; 1
    3b58:	00 b4       	in	r0, 0x20	; 32
    3b5a:	0d 92       	st	X+, r0
    3b5c:	41 50       	subi	r20, 0x01	; 1
    3b5e:	50 40       	sbci	r21, 0x00	; 0
    3b60:	b8 f7       	brcc	.-18     	; 0x3b50 <__eerd_blraw_m168+0x8>
    3b62:	08 95       	ret

00003b64 <__eerd_byte_m168>:
    3b64:	f9 99       	sbic	0x1f, 1	; 31
    3b66:	fe cf       	rjmp	.-4      	; 0x3b64 <__eerd_byte_m168>
    3b68:	92 bd       	out	0x22, r25	; 34
    3b6a:	81 bd       	out	0x21, r24	; 33
    3b6c:	f8 9a       	sbi	0x1f, 0	; 31
    3b6e:	99 27       	eor	r25, r25
    3b70:	80 b5       	in	r24, 0x20	; 32
    3b72:	08 95       	ret

00003b74 <__eewr_byte_m168>:
    3b74:	26 2f       	mov	r18, r22

00003b76 <__eewr_r18_m168>:
    3b76:	f9 99       	sbic	0x1f, 1	; 31
    3b78:	fe cf       	rjmp	.-4      	; 0x3b76 <__eewr_r18_m168>
    3b7a:	1f ba       	out	0x1f, r1	; 31
    3b7c:	92 bd       	out	0x22, r25	; 34
    3b7e:	81 bd       	out	0x21, r24	; 33
    3b80:	20 bd       	out	0x20, r18	; 32
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	fa 9a       	sbi	0x1f, 2	; 31
    3b88:	f9 9a       	sbi	0x1f, 1	; 31
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	01 96       	adiw	r24, 0x01	; 1
    3b8e:	08 95       	ret

00003b90 <strnlen_P>:
    3b90:	fc 01       	movw	r30, r24
    3b92:	05 90       	lpm	r0, Z+
    3b94:	61 50       	subi	r22, 0x01	; 1
    3b96:	70 40       	sbci	r23, 0x00	; 0
    3b98:	01 10       	cpse	r0, r1
    3b9a:	d8 f7       	brcc	.-10     	; 0x3b92 <strnlen_P+0x2>
    3b9c:	80 95       	com	r24
    3b9e:	90 95       	com	r25
    3ba0:	8e 0f       	add	r24, r30
    3ba2:	9f 1f       	adc	r25, r31
    3ba4:	08 95       	ret

00003ba6 <strnlen>:
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	61 50       	subi	r22, 0x01	; 1
    3baa:	70 40       	sbci	r23, 0x00	; 0
    3bac:	01 90       	ld	r0, Z+
    3bae:	01 10       	cpse	r0, r1
    3bb0:	d8 f7       	brcc	.-10     	; 0x3ba8 <strnlen+0x2>
    3bb2:	80 95       	com	r24
    3bb4:	90 95       	com	r25
    3bb6:	8e 0f       	add	r24, r30
    3bb8:	9f 1f       	adc	r25, r31
    3bba:	08 95       	ret

00003bbc <fputc>:
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	8c 01       	movw	r16, r24
    3bc6:	eb 01       	movw	r28, r22
    3bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bca:	81 ff       	sbrs	r24, 1
    3bcc:	1b c0       	rjmp	.+54     	; 0x3c04 <fputc+0x48>
    3bce:	82 ff       	sbrs	r24, 2
    3bd0:	0d c0       	rjmp	.+26     	; 0x3bec <fputc+0x30>
    3bd2:	2e 81       	ldd	r18, Y+6	; 0x06
    3bd4:	3f 81       	ldd	r19, Y+7	; 0x07
    3bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bda:	28 17       	cp	r18, r24
    3bdc:	39 07       	cpc	r19, r25
    3bde:	64 f4       	brge	.+24     	; 0x3bf8 <fputc+0x3c>
    3be0:	e8 81       	ld	r30, Y
    3be2:	f9 81       	ldd	r31, Y+1	; 0x01
    3be4:	01 93       	st	Z+, r16
    3be6:	f9 83       	std	Y+1, r31	; 0x01
    3be8:	e8 83       	st	Y, r30
    3bea:	06 c0       	rjmp	.+12     	; 0x3bf8 <fputc+0x3c>
    3bec:	e8 85       	ldd	r30, Y+8	; 0x08
    3bee:	f9 85       	ldd	r31, Y+9	; 0x09
    3bf0:	80 2f       	mov	r24, r16
    3bf2:	09 95       	icall
    3bf4:	00 97       	sbiw	r24, 0x00	; 0
    3bf6:	31 f4       	brne	.+12     	; 0x3c04 <fputc+0x48>
    3bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    3bfc:	01 96       	adiw	r24, 0x01	; 1
    3bfe:	9f 83       	std	Y+7, r25	; 0x07
    3c00:	8e 83       	std	Y+6, r24	; 0x06
    3c02:	02 c0       	rjmp	.+4      	; 0x3c08 <fputc+0x4c>
    3c04:	0f ef       	ldi	r16, 0xFF	; 255
    3c06:	1f ef       	ldi	r17, 0xFF	; 255
    3c08:	c8 01       	movw	r24, r16
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	1f 91       	pop	r17
    3c10:	0f 91       	pop	r16
    3c12:	08 95       	ret

00003c14 <__ultoa_invert>:
    3c14:	fa 01       	movw	r30, r20
    3c16:	aa 27       	eor	r26, r26
    3c18:	28 30       	cpi	r18, 0x08	; 8
    3c1a:	51 f1       	breq	.+84     	; 0x3c70 <__ultoa_invert+0x5c>
    3c1c:	20 31       	cpi	r18, 0x10	; 16
    3c1e:	81 f1       	breq	.+96     	; 0x3c80 <__ultoa_invert+0x6c>
    3c20:	e8 94       	clt
    3c22:	6f 93       	push	r22
    3c24:	6e 7f       	andi	r22, 0xFE	; 254
    3c26:	6e 5f       	subi	r22, 0xFE	; 254
    3c28:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2e:	af 4f       	sbci	r26, 0xFF	; 255
    3c30:	b1 e0       	ldi	r27, 0x01	; 1
    3c32:	3e d0       	rcall	.+124    	; 0x3cb0 <__ultoa_invert+0x9c>
    3c34:	b4 e0       	ldi	r27, 0x04	; 4
    3c36:	3c d0       	rcall	.+120    	; 0x3cb0 <__ultoa_invert+0x9c>
    3c38:	67 0f       	add	r22, r23
    3c3a:	78 1f       	adc	r23, r24
    3c3c:	89 1f       	adc	r24, r25
    3c3e:	9a 1f       	adc	r25, r26
    3c40:	a1 1d       	adc	r26, r1
    3c42:	68 0f       	add	r22, r24
    3c44:	79 1f       	adc	r23, r25
    3c46:	8a 1f       	adc	r24, r26
    3c48:	91 1d       	adc	r25, r1
    3c4a:	a1 1d       	adc	r26, r1
    3c4c:	6a 0f       	add	r22, r26
    3c4e:	71 1d       	adc	r23, r1
    3c50:	81 1d       	adc	r24, r1
    3c52:	91 1d       	adc	r25, r1
    3c54:	a1 1d       	adc	r26, r1
    3c56:	20 d0       	rcall	.+64     	; 0x3c98 <__ultoa_invert+0x84>
    3c58:	09 f4       	brne	.+2      	; 0x3c5c <__ultoa_invert+0x48>
    3c5a:	68 94       	set
    3c5c:	3f 91       	pop	r19
    3c5e:	2a e0       	ldi	r18, 0x0A	; 10
    3c60:	26 9f       	mul	r18, r22
    3c62:	11 24       	eor	r1, r1
    3c64:	30 19       	sub	r19, r0
    3c66:	30 5d       	subi	r19, 0xD0	; 208
    3c68:	31 93       	st	Z+, r19
    3c6a:	de f6       	brtc	.-74     	; 0x3c22 <__ultoa_invert+0xe>
    3c6c:	cf 01       	movw	r24, r30
    3c6e:	08 95       	ret
    3c70:	46 2f       	mov	r20, r22
    3c72:	47 70       	andi	r20, 0x07	; 7
    3c74:	40 5d       	subi	r20, 0xD0	; 208
    3c76:	41 93       	st	Z+, r20
    3c78:	b3 e0       	ldi	r27, 0x03	; 3
    3c7a:	0f d0       	rcall	.+30     	; 0x3c9a <__ultoa_invert+0x86>
    3c7c:	c9 f7       	brne	.-14     	; 0x3c70 <__ultoa_invert+0x5c>
    3c7e:	f6 cf       	rjmp	.-20     	; 0x3c6c <__ultoa_invert+0x58>
    3c80:	46 2f       	mov	r20, r22
    3c82:	4f 70       	andi	r20, 0x0F	; 15
    3c84:	40 5d       	subi	r20, 0xD0	; 208
    3c86:	4a 33       	cpi	r20, 0x3A	; 58
    3c88:	18 f0       	brcs	.+6      	; 0x3c90 <__ultoa_invert+0x7c>
    3c8a:	49 5d       	subi	r20, 0xD9	; 217
    3c8c:	31 fd       	sbrc	r19, 1
    3c8e:	40 52       	subi	r20, 0x20	; 32
    3c90:	41 93       	st	Z+, r20
    3c92:	02 d0       	rcall	.+4      	; 0x3c98 <__ultoa_invert+0x84>
    3c94:	a9 f7       	brne	.-22     	; 0x3c80 <__ultoa_invert+0x6c>
    3c96:	ea cf       	rjmp	.-44     	; 0x3c6c <__ultoa_invert+0x58>
    3c98:	b4 e0       	ldi	r27, 0x04	; 4
    3c9a:	a6 95       	lsr	r26
    3c9c:	97 95       	ror	r25
    3c9e:	87 95       	ror	r24
    3ca0:	77 95       	ror	r23
    3ca2:	67 95       	ror	r22
    3ca4:	ba 95       	dec	r27
    3ca6:	c9 f7       	brne	.-14     	; 0x3c9a <__ultoa_invert+0x86>
    3ca8:	00 97       	sbiw	r24, 0x00	; 0
    3caa:	61 05       	cpc	r22, r1
    3cac:	71 05       	cpc	r23, r1
    3cae:	08 95       	ret
    3cb0:	9b 01       	movw	r18, r22
    3cb2:	ac 01       	movw	r20, r24
    3cb4:	0a 2e       	mov	r0, r26
    3cb6:	06 94       	lsr	r0
    3cb8:	57 95       	ror	r21
    3cba:	47 95       	ror	r20
    3cbc:	37 95       	ror	r19
    3cbe:	27 95       	ror	r18
    3cc0:	ba 95       	dec	r27
    3cc2:	c9 f7       	brne	.-14     	; 0x3cb6 <__ultoa_invert+0xa2>
    3cc4:	62 0f       	add	r22, r18
    3cc6:	73 1f       	adc	r23, r19
    3cc8:	84 1f       	adc	r24, r20
    3cca:	95 1f       	adc	r25, r21
    3ccc:	a0 1d       	adc	r26, r0
    3cce:	08 95       	ret

00003cd0 <__prologue_saves__>:
    3cd0:	2f 92       	push	r2
    3cd2:	3f 92       	push	r3
    3cd4:	4f 92       	push	r4
    3cd6:	5f 92       	push	r5
    3cd8:	6f 92       	push	r6
    3cda:	7f 92       	push	r7
    3cdc:	8f 92       	push	r8
    3cde:	9f 92       	push	r9
    3ce0:	af 92       	push	r10
    3ce2:	bf 92       	push	r11
    3ce4:	cf 92       	push	r12
    3ce6:	df 92       	push	r13
    3ce8:	ef 92       	push	r14
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	cf 93       	push	r28
    3cf2:	df 93       	push	r29
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	ca 1b       	sub	r28, r26
    3cfa:	db 0b       	sbc	r29, r27
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	09 94       	ijmp

00003d08 <__epilogue_restores__>:
    3d08:	2a 88       	ldd	r2, Y+18	; 0x12
    3d0a:	39 88       	ldd	r3, Y+17	; 0x11
    3d0c:	48 88       	ldd	r4, Y+16	; 0x10
    3d0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d10:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d12:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d14:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d16:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d18:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d1a:	b9 84       	ldd	r11, Y+9	; 0x09
    3d1c:	c8 84       	ldd	r12, Y+8	; 0x08
    3d1e:	df 80       	ldd	r13, Y+7	; 0x07
    3d20:	ee 80       	ldd	r14, Y+6	; 0x06
    3d22:	fd 80       	ldd	r15, Y+5	; 0x05
    3d24:	0c 81       	ldd	r16, Y+4	; 0x04
    3d26:	1b 81       	ldd	r17, Y+3	; 0x03
    3d28:	aa 81       	ldd	r26, Y+2	; 0x02
    3d2a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d2c:	ce 0f       	add	r28, r30
    3d2e:	d1 1d       	adc	r29, r1
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	ed 01       	movw	r28, r26
    3d3c:	08 95       	ret

00003d3e <_exit>:
    3d3e:	f8 94       	cli

00003d40 <__stop_program>:
    3d40:	ff cf       	rjmp	.-2      	; 0x3d40 <__stop_program>
