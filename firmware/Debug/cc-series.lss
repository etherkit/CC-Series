
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000038b2  00003966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038b2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b0  00800136  00800136  0000399c  2**0
                  ALLOC
  3 .eeprom       0000002a  00810000  00810000  0000399c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000054a8  00000000  00000000  000039c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000022dd  00000000  00000000  00008e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e2 eb       	ldi	r30, 0xB2	; 178
     1b8:	f8 e3       	ldi	r31, 0x38	; 56
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a6 33       	cpi	r26, 0x36	; 54
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	a6 e3       	ldi	r26, 0x36	; 54
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a6 3e       	cpi	r26, 0xE6	; 230
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <main>
     1da:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_11>:

// Timer1 ISR
//
// Timer1 is the sinewave generator.
ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_11+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 36 01 	lds	r24, 0x0136
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_11+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_11+0xae>
	{
		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 9a 01 	lds	r18, 0x019A
     21c:	30 91 9b 01 	lds	r19, 0x019B
     220:	40 91 9c 01 	lds	r20, 0x019C
     224:	50 91 9d 01 	lds	r21, 0x019D
     228:	80 91 ac 01 	lds	r24, 0x01AC
     22c:	90 91 ad 01 	lds	r25, 0x01AD
     230:	a0 91 ae 01 	lds	r26, 0x01AE
     234:	b0 91 af 01 	lds	r27, 0x01AF
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 9a 01 	sts	0x019A, r24
     244:	90 93 9b 01 	sts	0x019B, r25
     248:	a0 93 9c 01 	sts	0x019C, r26
     24c:	b0 93 9d 01 	sts	0x019D, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 9a 01 	lds	r24, 0x019A
     254:	90 91 9b 01 	lds	r25, 0x019B
     258:	a0 91 9c 01 	lds	r26, 0x019C
     25c:	b0 91 9d 01 	lds	r27, 0x019D
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 68 01 	sts	0x0168, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 68 01 	lds	r18, 0x0168
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
	}
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(/*((timer > mute_start) && (timer < mute_end)) || */(mute_on == TRUE))
     2e4:	80 91 37 01 	lds	r24, 0x0137
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	51 f4       	brne	.+20     	; 0x300 <__vector_7+0x46>
		MUTE_PORT |= _BV(MUTE);
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	28 e2       	ldi	r18, 0x28	; 40
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	20 62       	ori	r18, 0x20	; 32
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_7+0x58>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     300:	88 e2       	ldi	r24, 0x28	; 40
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	28 e2       	ldi	r18, 0x28	; 40
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7d       	andi	r18, 0xDF	; 223
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     312:	80 91 38 01 	lds	r24, 0x0138
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	d9 f5       	brne	.+118    	; 0x390 <__vector_7+0xd6>
     31a:	20 91 6a 01 	lds	r18, 0x016A
     31e:	30 91 6b 01 	lds	r19, 0x016B
     322:	40 91 6c 01 	lds	r20, 0x016C
     326:	50 91 6d 01 	lds	r21, 0x016D
     32a:	80 91 db 01 	lds	r24, 0x01DB
     32e:	90 91 dc 01 	lds	r25, 0x01DC
     332:	a0 91 dd 01 	lds	r26, 0x01DD
     336:	b0 91 de 01 	lds	r27, 0x01DE
     33a:	28 17       	cp	r18, r24
     33c:	39 07       	cpc	r19, r25
     33e:	4a 07       	cpc	r20, r26
     340:	5b 07       	cpc	r21, r27
     342:	30 f5       	brcc	.+76     	; 0x390 <__vector_7+0xd6>
     344:	20 91 6a 01 	lds	r18, 0x016A
     348:	30 91 6b 01 	lds	r19, 0x016B
     34c:	40 91 6c 01 	lds	r20, 0x016C
     350:	50 91 6d 01 	lds	r21, 0x016D
     354:	80 91 a4 01 	lds	r24, 0x01A4
     358:	90 91 a5 01 	lds	r25, 0x01A5
     35c:	a0 91 a6 01 	lds	r26, 0x01A6
     360:	b0 91 a7 01 	lds	r27, 0x01A7
     364:	82 17       	cp	r24, r18
     366:	93 07       	cpc	r25, r19
     368:	a4 07       	cpc	r26, r20
     36a:	b5 07       	cpc	r27, r21
     36c:	88 f4       	brcc	.+34     	; 0x390 <__vector_7+0xd6>
	{
		if(rit_enable == TRUE)
     36e:	80 91 e0 01 	lds	r24, 0x01E0
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	19 f4       	brne	.+6      	; 0x37c <__vector_7+0xc2>
			set_dds_freq_reg(REG_1);
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 4e 0a 	call	0x149c	; 0x149c <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     37c:	88 e2       	ldi	r24, 0x28	; 40
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	28 e2       	ldi	r18, 0x28	; 40
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	20 61       	ori	r18, 0x10	; 16
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
     38e:	0c c0       	rjmp	.+24     	; 0x3a8 <__vector_7+0xee>
	}
	else
	{
		set_dds_freq_reg(REG_0);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 4e 0a 	call	0x149c	; 0x149c <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     396:	88 e2       	ldi	r24, 0x28	; 40
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	28 e2       	ldi	r18, 0x28	; 40
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	2f 7e       	andi	r18, 0xEF	; 239
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
	}

	debounce(FALSE);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>

	// Need to consider timer overflow?
	timer++;
     3ae:	80 91 6a 01 	lds	r24, 0x016A
     3b2:	90 91 6b 01 	lds	r25, 0x016B
     3b6:	a0 91 6c 01 	lds	r26, 0x016C
     3ba:	b0 91 6d 01 	lds	r27, 0x016D
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	a1 1d       	adc	r26, r1
     3c2:	b1 1d       	adc	r27, r1
     3c4:	80 93 6a 01 	sts	0x016A, r24
     3c8:	90 93 6b 01 	sts	0x016B, r25
     3cc:	a0 93 6c 01 	sts	0x016C, r26
     3d0:	b0 93 6d 01 	sts	0x016D, r27
}
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     418:	88 e6       	ldi	r24, 0x68	; 104
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	10 82       	st	Z, r1

	cur_mode = default_mode;
     420:	80 91 69 01 	lds	r24, 0x0169
     424:	80 93 9e 01 	sts	0x019E, r24
	cur_state = IDLE;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 c0 01 	sts	0x01C0, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 20;
     42e:	80 91 64 01 	lds	r24, 0x0164
     432:	90 91 65 01 	lds	r25, 0x0165
     436:	a0 91 66 01 	lds	r26, 0x0166
     43a:	b0 91 67 01 	lds	r27, 0x0167
     43e:	44 96       	adiw	r24, 0x14	; 20
     440:	a1 1d       	adc	r26, r1
     442:	b1 1d       	adc	r27, r1
     444:	80 93 c6 01 	sts	0x01C6, r24
     448:	90 93 c7 01 	sts	0x01C7, r25
     44c:	a0 93 c8 01 	sts	0x01C8, r26
     450:	b0 93 c9 01 	sts	0x01C9, r27
	//mute_on = TRUE;
}
     454:	cf 91       	pop	r28
     456:	df 91       	pop	r29
     458:	ff 91       	pop	r31
     45a:	ef 91       	pop	r30
     45c:	bf 91       	pop	r27
     45e:	af 91       	pop	r26
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <init>:

void init(void)
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	0f 92       	push	r0
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     478:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     47a:	81 e6       	ldi	r24, 0x61	; 97
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	20 e8       	ldi	r18, 0x80	; 128
     480:	fc 01       	movw	r30, r24
     482:	20 83       	st	Z, r18
	CLKPR = 0;
     484:	81 e6       	ldi	r24, 0x61	; 97
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     48c:	84 e4       	ldi	r24, 0x44	; 68
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	21 e8       	ldi	r18, 0x81	; 129
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     496:	85 e4       	ldi	r24, 0x45	; 69
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	21 e0       	ldi	r18, 0x01	; 1
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
	//TCCR0B = _BV(CS01);
	//TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt

	// Setup Timer1 as sample rate generator for sidetone
	TCCR1B = _BV(WGM12) | _BV(CS10); // Set for CTC mode, Prescaler /1
     4a0:	81 e8       	ldi	r24, 0x81	; 129
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	29 e0       	ldi	r18, 0x09	; 9
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
	TCCR1A = 0;
     4aa:	80 e8       	ldi	r24, 0x80	; 128
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	fc 01       	movw	r30, r24
     4b0:	10 82       	st	Z, r1
	OCR1A = 1000; // 16 MHz clock / 16 kHz sample rate = 1000
     4b2:	88 e8       	ldi	r24, 0x88	; 136
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	28 ee       	ldi	r18, 0xE8	; 232
     4b8:	33 e0       	ldi	r19, 0x03	; 3
     4ba:	fc 01       	movw	r30, r24
     4bc:	31 83       	std	Z+1, r19	; 0x01
     4be:	20 83       	st	Z, r18
	TIMSK1 = _BV(OCIE1A);
     4c0:	8f e6       	ldi	r24, 0x6F	; 111
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	22 e0       	ldi	r18, 0x02	; 2
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     4ca:	80 eb       	ldi	r24, 0xB0	; 176
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	22 e0       	ldi	r18, 0x02	; 2
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     4d4:	81 eb       	ldi	r24, 0xB1	; 177
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	24 e0       	ldi	r18, 0x04	; 4
     4da:	fc 01       	movw	r30, r24
     4dc:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     4de:	80 e7       	ldi	r24, 0x70	; 112
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	20 e7       	ldi	r18, 0x70	; 112
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	22 60       	ori	r18, 0x02	; 2
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     4f0:	83 eb       	ldi	r24, 0xB3	; 179
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	29 ef       	ldi	r18, 0xF9	; 249
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     4fa:	8a e7       	ldi	r24, 0x7A	; 122
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2a e7       	ldi	r18, 0x7A	; 122
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	f9 01       	movw	r30, r18
     504:	20 81       	ld	r18, Z
     506:	24 68       	ori	r18, 0x84	; 132
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     50c:	8c e7       	ldi	r24, 0x7C	; 124
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	20 e6       	ldi	r18, 0x60	; 96
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     516:	8b e6       	ldi	r24, 0x6B	; 107
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	21 e0       	ldi	r18, 0x01	; 1
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) | _BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     520:	8d e6       	ldi	r24, 0x6D	; 109
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	2f e9       	ldi	r18, 0x9F	; 159
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     52a:	8a e2       	ldi	r24, 0x2A	; 42
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	2a e2       	ldi	r18, 0x2A	; 42
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	f9 01       	movw	r30, r18
     534:	20 81       	ld	r18, Z
     536:	20 64       	ori	r18, 0x40	; 64
     538:	fc 01       	movw	r30, r24
     53a:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     53c:	87 e2       	ldi	r24, 0x27	; 39
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	27 e2       	ldi	r18, 0x27	; 39
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	f9 01       	movw	r30, r18
     546:	20 81       	ld	r18, Z
     548:	20 62       	ori	r18, 0x20	; 32
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     54e:	87 e2       	ldi	r24, 0x27	; 39
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	27 e2       	ldi	r18, 0x27	; 39
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	20 61       	ori	r18, 0x10	; 16
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     560:	87 e2       	ldi	r24, 0x27	; 39
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	27 e2       	ldi	r18, 0x27	; 39
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	2d 7f       	andi	r18, 0xFD	; 253
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     572:	88 e2       	ldi	r24, 0x28	; 40
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	28 e2       	ldi	r18, 0x28	; 40
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	2d 7f       	andi	r18, 0xFD	; 253
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     584:	8a e2       	ldi	r24, 0x2A	; 42
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2a e2       	ldi	r18, 0x2A	; 42
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	27 7f       	andi	r18, 0xF7	; 247
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     596:	8b e2       	ldi	r24, 0x2B	; 43
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	2b e2       	ldi	r18, 0x2B	; 43
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	28 60       	ori	r18, 0x08	; 8
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     5a8:	8a e2       	ldi	r24, 0x2A	; 42
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	2a e2       	ldi	r18, 0x2A	; 42
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	2f 7e       	andi	r18, 0xEF	; 239
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     5ba:	8b e2       	ldi	r24, 0x2B	; 43
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	2b e2       	ldi	r18, 0x2B	; 43
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	f9 01       	movw	r30, r18
     5c4:	20 81       	ld	r18, Z
     5c6:	20 61       	ori	r18, 0x10	; 16
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     5cc:	8a e2       	ldi	r24, 0x2A	; 42
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2a e2       	ldi	r18, 0x2A	; 42
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	2b 7f       	andi	r18, 0xFB	; 251
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     5de:	8b e2       	ldi	r24, 0x2B	; 43
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	2b e2       	ldi	r18, 0x2B	; 43
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	24 60       	ori	r18, 0x04	; 4
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     5f0:	8a e2       	ldi	r24, 0x2A	; 42
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	2a e2       	ldi	r18, 0x2A	; 42
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	f9 01       	movw	r30, r18
     5fa:	20 81       	ld	r18, Z
     5fc:	2d 7f       	andi	r18, 0xFD	; 253
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     602:	8b e2       	ldi	r24, 0x2B	; 43
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	2b e2       	ldi	r18, 0x2B	; 43
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	f9 01       	movw	r30, r18
     60c:	20 81       	ld	r18, Z
     60e:	22 60       	ori	r18, 0x02	; 2
     610:	fc 01       	movw	r30, r24
     612:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     614:	84 e2       	ldi	r24, 0x24	; 36
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	24 e2       	ldi	r18, 0x24	; 36
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	f9 01       	movw	r30, r18
     61e:	20 81       	ld	r18, Z
     620:	2e 7f       	andi	r18, 0xFE	; 254
     622:	fc 01       	movw	r30, r24
     624:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     626:	85 e2       	ldi	r24, 0x25	; 37
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	25 e2       	ldi	r18, 0x25	; 37
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	f9 01       	movw	r30, r18
     630:	20 81       	ld	r18, Z
     632:	21 60       	ori	r18, 0x01	; 1
     634:	fc 01       	movw	r30, r24
     636:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     638:	8a e2       	ldi	r24, 0x2A	; 42
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	2a e2       	ldi	r18, 0x2A	; 42
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	f9 01       	movw	r30, r18
     642:	20 81       	ld	r18, Z
     644:	2f 77       	andi	r18, 0x7F	; 127
     646:	fc 01       	movw	r30, r24
     648:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     64a:	8b e2       	ldi	r24, 0x2B	; 43
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	2b e2       	ldi	r18, 0x2B	; 43
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	f9 01       	movw	r30, r18
     654:	20 81       	ld	r18, Z
     656:	20 68       	ori	r18, 0x80	; 128
     658:	fc 01       	movw	r30, r24
     65a:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     65c:	8a e2       	ldi	r24, 0x2A	; 42
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	2a e2       	ldi	r18, 0x2A	; 42
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	20 81       	ld	r18, Z
     668:	2e 7f       	andi	r18, 0xFE	; 254
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     66e:	8b e2       	ldi	r24, 0x2B	; 43
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	2b e2       	ldi	r18, 0x2B	; 43
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	f9 01       	movw	r30, r18
     678:	20 81       	ld	r18, Z
     67a:	21 60       	ori	r18, 0x01	; 1
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     680:	84 e2       	ldi	r24, 0x24	; 36
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	24 e2       	ldi	r18, 0x24	; 36
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	f9 01       	movw	r30, r18
     68a:	20 81       	ld	r18, Z
     68c:	2e 62       	ori	r18, 0x2E	; 46
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     692:	8c e4       	ldi	r24, 0x4C	; 76
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	29 e5       	ldi	r18, 0x59	; 89
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     69c:	8d e4       	ldi	r24, 0x4D	; 77
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	fc 01       	movw	r30, r24
     6a2:	80 81       	ld	r24, Z
     6a4:	89 83       	std	Y+1, r24	; 0x01
	spi_data = SPDR;
     6a6:	8e e4       	ldi	r24, 0x4E	; 78
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	89 83       	std	Y+1, r24	; 0x01

	// Power saving
	power_twi_disable();
     6b0:	84 e6       	ldi	r24, 0x64	; 100
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	24 e6       	ldi	r18, 0x64	; 100
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	20 81       	ld	r18, Z
     6bc:	20 68       	ori	r18, 0x80	; 128
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
	power_usart0_disable();
     6c2:	84 e6       	ldi	r24, 0x64	; 100
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	24 e6       	ldi	r18, 0x64	; 100
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	22 60       	ori	r18, 0x02	; 2
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 93 6e 01 	sts	0x016E, r24
	cur_state = IDLE;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 c0 01 	sts	0x01C0, r24
	next_state = IDLE;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 a3 01 	sts	0x01A3, r24

	timer = 0;
     6e6:	10 92 6a 01 	sts	0x016A, r1
     6ea:	10 92 6b 01 	sts	0x016B, r1
     6ee:	10 92 6c 01 	sts	0x016C, r1
     6f2:	10 92 6d 01 	sts	0x016D, r1

	eeprom_busy_wait();
     6f6:	8f e3       	ldi	r24, 0x3F	; 63
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	80 81       	ld	r24, Z
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	82 70       	andi	r24, 0x02	; 2
     704:	90 70       	andi	r25, 0x00	; 0
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	b1 f7       	brne	.-20     	; 0x6f6 <__stack+0x1f7>
	wpm = eeprom_read_byte(&ee_wpm);
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eerd_byte_m168>
     712:	80 93 d4 01 	sts	0x01D4, r24
	set_wpm(wpm);
     716:	80 91 d4 01 	lds	r24, 0x01D4
     71a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <set_wpm>

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = DDS_INIT;
     71e:	8c e0       	ldi	r24, 0x0C	; 12
     720:	9f e1       	ldi	r25, 0x1F	; 31
     722:	a1 e1       	ldi	r26, 0x11	; 17
     724:	b5 e0       	ldi	r27, 0x05	; 5
     726:	80 93 a8 01 	sts	0x01A8, r24
     72a:	90 93 a9 01 	sts	0x01A9, r25
     72e:	a0 93 aa 01 	sts	0x01AA, r26
     732:	b0 93 ab 01 	sts	0x01AB, r27
	tune_freq = FREQ_INIT;
     736:	80 ee       	ldi	r24, 0xE0	; 224
     738:	99 e8       	ldi	r25, 0x89	; 137
     73a:	a6 ed       	ldi	r26, 0xD6	; 214
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	80 93 d0 01 	sts	0x01D0, r24
     742:	90 93 d1 01 	sts	0x01D1, r25
     746:	a0 93 d2 01 	sts	0x01D2, r26
     74a:	b0 93 d3 01 	sts	0x01D3, r27
	tune_dds(dds_freq_word, REG_0, TRUE);
     74e:	80 91 a8 01 	lds	r24, 0x01A8
     752:	90 91 a9 01 	lds	r25, 0x01A9
     756:	a0 91 aa 01 	lds	r26, 0x01AA
     75a:	b0 91 ab 01 	lds	r27, 0x01AB
     75e:	bc 01       	movw	r22, r24
     760:	cd 01       	movw	r24, r26
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	0e 94 ae 09 	call	0x135c	; 0x135c <tune_dds>
	tune_dds(dds_freq_word, REG_1, FALSE);
     76a:	80 91 a8 01 	lds	r24, 0x01A8
     76e:	90 91 a9 01 	lds	r25, 0x01A9
     772:	a0 91 aa 01 	lds	r26, 0x01AA
     776:	b0 91 ab 01 	lds	r27, 0x01AB
     77a:	bc 01       	movw	r22, r24
     77c:	cd 01       	movw	r24, r26
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	0e 94 ae 09 	call	0x135c	; 0x135c <tune_dds>

	st_freq = ST_DEFAULT;
     786:	88 e5       	ldi	r24, 0x58	; 88
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	90 93 b7 01 	sts	0x01B7, r25
     78e:	80 93 b6 01 	sts	0x01B6, r24
	set_st_freq(st_freq);
     792:	80 91 b6 01 	lds	r24, 0x01B6
     796:	90 91 b7 01 	lds	r25, 0x01B7
     79a:	cc 01       	movw	r24, r24
     79c:	a0 e0       	ldi	r26, 0x00	; 0
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	bc 01       	movw	r22, r24
     7a2:	cd 01       	movw	r24, r26
     7a4:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <set_st_freq>

	// Enable interrupts
	sei();
     7a8:	78 94       	sei
}
     7aa:	0f 90       	pop	r0
     7ac:	cf 91       	pop	r28
     7ae:	df 91       	pop	r29
     7b0:	08 95       	ret

000007b2 <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     7b2:	df 93       	push	r29
     7b4:	cf 93       	push	r28
     7b6:	0f 92       	push	r0
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 100 us per timer tick (dividing by 0.1 ms, so multiply by 10)
	dit_length = (1200 / new_wpm);
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	28 2f       	mov	r18, r24
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	80 eb       	ldi	r24, 0xB0	; 176
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	b9 01       	movw	r22, r18
     7ca:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <__divmodhi4>
     7ce:	9b 01       	movw	r18, r22
     7d0:	c9 01       	movw	r24, r18
     7d2:	90 93 70 01 	sts	0x0170, r25
     7d6:	80 93 6f 01 	sts	0x016F, r24
}
     7da:	0f 90       	pop	r0
     7dc:	cf 91       	pop	r28
     7de:	df 91       	pop	r29
     7e0:	08 95       	ret

000007e2 <debounce>:

void debounce(enum BOOL flush)
{
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	0f 92       	push	r0
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	41 f5       	brne	.+80     	; 0x844 <debounce+0x62>
	{
		dit_on_count = 0;
     7f4:	10 92 4c 01 	sts	0x014C, r1
     7f8:	10 92 4b 01 	sts	0x014B, r1
		dah_on_count = 0;
     7fc:	10 92 4e 01 	sts	0x014E, r1
     800:	10 92 4d 01 	sts	0x014D, r1
		dit_off_count = 0;
     804:	10 92 50 01 	sts	0x0150, r1
     808:	10 92 4f 01 	sts	0x014F, r1
		dah_off_count = 0;
     80c:	10 92 52 01 	sts	0x0152, r1
     810:	10 92 51 01 	sts	0x0151, r1
		cmd_on_count = 0;
     814:	10 92 54 01 	sts	0x0154, r1
     818:	10 92 53 01 	sts	0x0153, r1
		msg_on_count = 0;
     81c:	10 92 56 01 	sts	0x0156, r1
     820:	10 92 55 01 	sts	0x0155, r1
		both_on_count = 0;
     824:	10 92 58 01 	sts	0x0158, r1
     828:	10 92 57 01 	sts	0x0157, r1
		enc_on_count = 0;
     82c:	10 92 5a 01 	sts	0x015A, r1
     830:	10 92 59 01 	sts	0x0159, r1
		enca_on_count = 0;
     834:	10 92 5c 01 	sts	0x015C, r1
     838:	10 92 5b 01 	sts	0x015B, r1
		encb_on_count = 0;
     83c:	10 92 5e 01 	sts	0x015E, r1
     840:	10 92 5d 01 	sts	0x015D, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     844:	89 e2       	ldi	r24, 0x29	; 41
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	88 2f       	mov	r24, r24
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	88 70       	andi	r24, 0x08	; 8
     852:	90 70       	andi	r25, 0x00	; 0
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	a9 f4       	brne	.+42     	; 0x882 <debounce+0xa0>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     858:	80 91 4b 01 	lds	r24, 0x014B
     85c:	90 91 4c 01 	lds	r25, 0x014C
     860:	85 30       	cpi	r24, 0x05	; 5
     862:	91 05       	cpc	r25, r1
     864:	48 f4       	brcc	.+18     	; 0x878 <debounce+0x96>
			dit_on_count++;
     866:	80 91 4b 01 	lds	r24, 0x014B
     86a:	90 91 4c 01 	lds	r25, 0x014C
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	90 93 4c 01 	sts	0x014C, r25
     874:	80 93 4b 01 	sts	0x014B, r24
		dit_off_count = 0;
     878:	10 92 50 01 	sts	0x0150, r1
     87c:	10 92 4f 01 	sts	0x014F, r1
     880:	14 c0       	rjmp	.+40     	; 0x8aa <debounce+0xc8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     882:	80 91 4f 01 	lds	r24, 0x014F
     886:	90 91 50 01 	lds	r25, 0x0150
     88a:	85 30       	cpi	r24, 0x05	; 5
     88c:	91 05       	cpc	r25, r1
     88e:	48 f4       	brcc	.+18     	; 0x8a2 <debounce+0xc0>
			dit_off_count++;
     890:	80 91 4f 01 	lds	r24, 0x014F
     894:	90 91 50 01 	lds	r25, 0x0150
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	90 93 50 01 	sts	0x0150, r25
     89e:	80 93 4f 01 	sts	0x014F, r24
		dit_on_count = 0;
     8a2:	10 92 4c 01 	sts	0x014C, r1
     8a6:	10 92 4b 01 	sts	0x014B, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     8aa:	89 e2       	ldi	r24, 0x29	; 41
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	fc 01       	movw	r30, r24
     8b0:	80 81       	ld	r24, Z
     8b2:	88 2f       	mov	r24, r24
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	80 71       	andi	r24, 0x10	; 16
     8b8:	90 70       	andi	r25, 0x00	; 0
     8ba:	00 97       	sbiw	r24, 0x00	; 0
     8bc:	a9 f4       	brne	.+42     	; 0x8e8 <debounce+0x106>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     8be:	80 91 4d 01 	lds	r24, 0x014D
     8c2:	90 91 4e 01 	lds	r25, 0x014E
     8c6:	85 30       	cpi	r24, 0x05	; 5
     8c8:	91 05       	cpc	r25, r1
     8ca:	48 f4       	brcc	.+18     	; 0x8de <debounce+0xfc>
			dah_on_count++;
     8cc:	80 91 4d 01 	lds	r24, 0x014D
     8d0:	90 91 4e 01 	lds	r25, 0x014E
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	90 93 4e 01 	sts	0x014E, r25
     8da:	80 93 4d 01 	sts	0x014D, r24
		dah_off_count = 0;
     8de:	10 92 52 01 	sts	0x0152, r1
     8e2:	10 92 51 01 	sts	0x0151, r1
     8e6:	14 c0       	rjmp	.+40     	; 0x910 <debounce+0x12e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     8e8:	80 91 51 01 	lds	r24, 0x0151
     8ec:	90 91 52 01 	lds	r25, 0x0152
     8f0:	85 30       	cpi	r24, 0x05	; 5
     8f2:	91 05       	cpc	r25, r1
     8f4:	48 f4       	brcc	.+18     	; 0x908 <debounce+0x126>
			dah_off_count++;
     8f6:	80 91 51 01 	lds	r24, 0x0151
     8fa:	90 91 52 01 	lds	r25, 0x0152
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	90 93 52 01 	sts	0x0152, r25
     904:	80 93 51 01 	sts	0x0151, r24
		dah_on_count = 0;
     908:	10 92 4e 01 	sts	0x014E, r1
     90c:	10 92 4d 01 	sts	0x014D, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     910:	80 91 4b 01 	lds	r24, 0x014B
     914:	90 91 4c 01 	lds	r25, 0x014C
     918:	85 30       	cpi	r24, 0x05	; 5
     91a:	91 05       	cpc	r25, r1
     91c:	18 f0       	brcs	.+6      	; 0x924 <debounce+0x142>
		dit_active = TRUE;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 ce 01 	sts	0x01CE, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     924:	80 91 4f 01 	lds	r24, 0x014F
     928:	90 91 50 01 	lds	r25, 0x0150
     92c:	85 30       	cpi	r24, 0x05	; 5
     92e:	91 05       	cpc	r25, r1
     930:	10 f0       	brcs	.+4      	; 0x936 <debounce+0x154>
		dit_active = FALSE;
     932:	10 92 ce 01 	sts	0x01CE, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     936:	80 91 4d 01 	lds	r24, 0x014D
     93a:	90 91 4e 01 	lds	r25, 0x014E
     93e:	85 30       	cpi	r24, 0x05	; 5
     940:	91 05       	cpc	r25, r1
     942:	18 f0       	brcs	.+6      	; 0x94a <debounce+0x168>
		dah_active = TRUE;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 bc 01 	sts	0x01BC, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     94a:	80 91 51 01 	lds	r24, 0x0151
     94e:	90 91 52 01 	lds	r25, 0x0152
     952:	85 30       	cpi	r24, 0x05	; 5
     954:	91 05       	cpc	r25, r1
     956:	10 f0       	brcs	.+4      	; 0x95c <debounce+0x17a>
		dah_active = FALSE;
     958:	10 92 bc 01 	sts	0x01BC, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     95c:	89 e2       	ldi	r24, 0x29	; 41
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	84 70       	andi	r24, 0x04	; 4
     96a:	90 70       	andi	r25, 0x00	; 0
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	a1 f4       	brne	.+40     	; 0x998 <debounce+0x1b6>
     970:	89 e2       	ldi	r24, 0x29	; 41
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	82 70       	andi	r24, 0x02	; 2
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	51 f4       	brne	.+20     	; 0x998 <debounce+0x1b6>
		both_on_count++;
     984:	80 91 57 01 	lds	r24, 0x0157
     988:	90 91 58 01 	lds	r25, 0x0158
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	90 93 58 01 	sts	0x0158, r25
     992:	80 93 57 01 	sts	0x0157, r24
     996:	25 c0       	rjmp	.+74     	; 0x9e2 <debounce+0x200>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     998:	80 91 57 01 	lds	r24, 0x0157
     99c:	90 91 58 01 	lds	r25, 0x0158
     9a0:	85 30       	cpi	r24, 0x05	; 5
     9a2:	91 05       	cpc	r25, r1
     9a4:	60 f0       	brcs	.+24     	; 0x9be <debounce+0x1dc>
     9a6:	80 91 57 01 	lds	r24, 0x0157
     9aa:	90 91 58 01 	lds	r25, 0x0158
     9ae:	f1 e0       	ldi	r31, 0x01	; 1
     9b0:	84 3f       	cpi	r24, 0xF4	; 244
     9b2:	9f 07       	cpc	r25, r31
     9b4:	20 f4       	brcc	.+8      	; 0x9be <debounce+0x1dc>
			both_btn = PRESS;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 be 01 	sts	0x01BE, r24
     9bc:	0e c0       	rjmp	.+28     	; 0x9da <debounce+0x1f8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     9be:	80 91 57 01 	lds	r24, 0x0157
     9c2:	90 91 58 01 	lds	r25, 0x0158
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	84 3f       	cpi	r24, 0xF4	; 244
     9ca:	92 07       	cpc	r25, r18
     9cc:	20 f0       	brcs	.+8      	; 0x9d6 <debounce+0x1f4>
			both_btn = HOLD;
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	80 93 be 01 	sts	0x01BE, r24
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <debounce+0x1f8>
		else
			both_btn = OFF;
     9d6:	10 92 be 01 	sts	0x01BE, r1

		both_on_count = 0;
     9da:	10 92 58 01 	sts	0x0158, r1
     9de:	10 92 57 01 	sts	0x0157, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     9e2:	89 e2       	ldi	r24, 0x29	; 41
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	fc 01       	movw	r30, r24
     9e8:	80 81       	ld	r24, Z
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	84 70       	andi	r24, 0x04	; 4
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	51 f4       	brne	.+20     	; 0xa0a <debounce+0x228>
	{
		cmd_on_count++;
     9f6:	80 91 53 01 	lds	r24, 0x0153
     9fa:	90 91 54 01 	lds	r25, 0x0154
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	90 93 54 01 	sts	0x0154, r25
     a04:	80 93 53 01 	sts	0x0153, r24
     a08:	25 c0       	rjmp	.+74     	; 0xa54 <debounce+0x272>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     a0a:	80 91 53 01 	lds	r24, 0x0153
     a0e:	90 91 54 01 	lds	r25, 0x0154
     a12:	85 30       	cpi	r24, 0x05	; 5
     a14:	91 05       	cpc	r25, r1
     a16:	60 f0       	brcs	.+24     	; 0xa30 <debounce+0x24e>
     a18:	80 91 53 01 	lds	r24, 0x0153
     a1c:	90 91 54 01 	lds	r25, 0x0154
     a20:	f1 e0       	ldi	r31, 0x01	; 1
     a22:	84 3f       	cpi	r24, 0xF4	; 244
     a24:	9f 07       	cpc	r25, r31
     a26:	20 f4       	brcc	.+8      	; 0xa30 <debounce+0x24e>
			cmd_btn = PRESS;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 bf 01 	sts	0x01BF, r24
     a2e:	0e c0       	rjmp	.+28     	; 0xa4c <debounce+0x26a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     a30:	80 91 53 01 	lds	r24, 0x0153
     a34:	90 91 54 01 	lds	r25, 0x0154
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	84 3f       	cpi	r24, 0xF4	; 244
     a3c:	92 07       	cpc	r25, r18
     a3e:	20 f0       	brcs	.+8      	; 0xa48 <debounce+0x266>
			cmd_btn = HOLD;
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	80 93 bf 01 	sts	0x01BF, r24
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <debounce+0x26a>
		else
			cmd_btn = OFF;
     a48:	10 92 bf 01 	sts	0x01BF, r1

		cmd_on_count = 0;
     a4c:	10 92 54 01 	sts	0x0154, r1
     a50:	10 92 53 01 	sts	0x0153, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     a54:	89 e2       	ldi	r24, 0x29	; 41
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	fc 01       	movw	r30, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	88 2f       	mov	r24, r24
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	82 70       	andi	r24, 0x02	; 2
     a62:	90 70       	andi	r25, 0x00	; 0
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	51 f4       	brne	.+20     	; 0xa7c <debounce+0x29a>
		msg_on_count++;
     a68:	80 91 55 01 	lds	r24, 0x0155
     a6c:	90 91 56 01 	lds	r25, 0x0156
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	90 93 56 01 	sts	0x0156, r25
     a76:	80 93 55 01 	sts	0x0155, r24
     a7a:	25 c0       	rjmp	.+74     	; 0xac6 <debounce+0x2e4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     a7c:	80 91 55 01 	lds	r24, 0x0155
     a80:	90 91 56 01 	lds	r25, 0x0156
     a84:	85 30       	cpi	r24, 0x05	; 5
     a86:	91 05       	cpc	r25, r1
     a88:	60 f0       	brcs	.+24     	; 0xaa2 <debounce+0x2c0>
     a8a:	80 91 55 01 	lds	r24, 0x0155
     a8e:	90 91 56 01 	lds	r25, 0x0156
     a92:	f1 e0       	ldi	r31, 0x01	; 1
     a94:	84 3f       	cpi	r24, 0xF4	; 244
     a96:	9f 07       	cpc	r25, r31
     a98:	20 f4       	brcc	.+8      	; 0xaa2 <debounce+0x2c0>
			msg_btn = PRESS;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 bd 01 	sts	0x01BD, r24
     aa0:	0e c0       	rjmp	.+28     	; 0xabe <debounce+0x2dc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     aa2:	80 91 55 01 	lds	r24, 0x0155
     aa6:	90 91 56 01 	lds	r25, 0x0156
     aaa:	21 e0       	ldi	r18, 0x01	; 1
     aac:	84 3f       	cpi	r24, 0xF4	; 244
     aae:	92 07       	cpc	r25, r18
     ab0:	20 f0       	brcs	.+8      	; 0xaba <debounce+0x2d8>
			msg_btn = HOLD;
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	80 93 bd 01 	sts	0x01BD, r24
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <debounce+0x2dc>
		else
			msg_btn = OFF;
     aba:	10 92 bd 01 	sts	0x01BD, r1

		msg_on_count = 0;
     abe:	10 92 56 01 	sts	0x0156, r1
     ac2:	10 92 55 01 	sts	0x0155, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     ac6:	89 e2       	ldi	r24, 0x29	; 41
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	fc 01       	movw	r30, r24
     acc:	80 81       	ld	r24, Z
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	81 70       	andi	r24, 0x01	; 1
     ad4:	90 70       	andi	r25, 0x00	; 0
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	51 f4       	brne	.+20     	; 0xaee <debounce+0x30c>
		enc_on_count++;
     ada:	80 91 59 01 	lds	r24, 0x0159
     ade:	90 91 5a 01 	lds	r25, 0x015A
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	90 93 5a 01 	sts	0x015A, r25
     ae8:	80 93 59 01 	sts	0x0159, r24
     aec:	25 c0       	rjmp	.+74     	; 0xb38 <debounce+0x356>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     aee:	80 91 59 01 	lds	r24, 0x0159
     af2:	90 91 5a 01 	lds	r25, 0x015A
     af6:	85 30       	cpi	r24, 0x05	; 5
     af8:	91 05       	cpc	r25, r1
     afa:	60 f0       	brcs	.+24     	; 0xb14 <debounce+0x332>
     afc:	80 91 59 01 	lds	r24, 0x0159
     b00:	90 91 5a 01 	lds	r25, 0x015A
     b04:	f1 e0       	ldi	r31, 0x01	; 1
     b06:	84 3f       	cpi	r24, 0xF4	; 244
     b08:	9f 07       	cpc	r25, r31
     b0a:	20 f4       	brcc	.+8      	; 0xb14 <debounce+0x332>
			enc_btn = PRESS;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 c5 01 	sts	0x01C5, r24
     b12:	0e c0       	rjmp	.+28     	; 0xb30 <debounce+0x34e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     b14:	80 91 59 01 	lds	r24, 0x0159
     b18:	90 91 5a 01 	lds	r25, 0x015A
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	84 3f       	cpi	r24, 0xF4	; 244
     b20:	92 07       	cpc	r25, r18
     b22:	20 f0       	brcs	.+8      	; 0xb2c <debounce+0x34a>
			enc_btn = HOLD;
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	80 93 c5 01 	sts	0x01C5, r24
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <debounce+0x34e>
		else
			enc_btn = OFF;
     b2c:	10 92 c5 01 	sts	0x01C5, r1

		enc_on_count = 0;
     b30:	10 92 5a 01 	sts	0x015A, r1
     b34:	10 92 59 01 	sts	0x0159, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     b38:	83 e2       	ldi	r24, 0x23	; 35
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	fc 01       	movw	r30, r24
     b3e:	80 81       	ld	r24, Z
     b40:	88 2f       	mov	r24, r24
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	81 70       	andi	r24, 0x01	; 1
     b46:	90 70       	andi	r25, 0x00	; 0
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	a9 f4       	brne	.+42     	; 0xb76 <debounce+0x394>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     b4c:	80 91 5b 01 	lds	r24, 0x015B
     b50:	90 91 5c 01 	lds	r25, 0x015C
     b54:	85 30       	cpi	r24, 0x05	; 5
     b56:	91 05       	cpc	r25, r1
     b58:	48 f4       	brcc	.+18     	; 0xb6c <debounce+0x38a>
			enca_on_count++;
     b5a:	80 91 5b 01 	lds	r24, 0x015B
     b5e:	90 91 5c 01 	lds	r25, 0x015C
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	90 93 5c 01 	sts	0x015C, r25
     b68:	80 93 5b 01 	sts	0x015B, r24
		enca_off_count = 0;
     b6c:	10 92 60 01 	sts	0x0160, r1
     b70:	10 92 5f 01 	sts	0x015F, r1
     b74:	14 c0       	rjmp	.+40     	; 0xb9e <debounce+0x3bc>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     b76:	80 91 5f 01 	lds	r24, 0x015F
     b7a:	90 91 60 01 	lds	r25, 0x0160
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	91 05       	cpc	r25, r1
     b82:	48 f4       	brcc	.+18     	; 0xb96 <debounce+0x3b4>
			enca_off_count++;
     b84:	80 91 5f 01 	lds	r24, 0x015F
     b88:	90 91 60 01 	lds	r25, 0x0160
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	90 93 60 01 	sts	0x0160, r25
     b92:	80 93 5f 01 	sts	0x015F, r24
		enca_on_count = 0;
     b96:	10 92 5c 01 	sts	0x015C, r1
     b9a:	10 92 5b 01 	sts	0x015B, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     b9e:	89 e2       	ldi	r24, 0x29	; 41
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	fc 01       	movw	r30, r24
     ba4:	80 81       	ld	r24, Z
     ba6:	88 23       	and	r24, r24
     ba8:	ac f0       	brlt	.+42     	; 0xbd4 <debounce+0x3f2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     baa:	80 91 5d 01 	lds	r24, 0x015D
     bae:	90 91 5e 01 	lds	r25, 0x015E
     bb2:	85 30       	cpi	r24, 0x05	; 5
     bb4:	91 05       	cpc	r25, r1
     bb6:	48 f4       	brcc	.+18     	; 0xbca <debounce+0x3e8>
			encb_on_count++;
     bb8:	80 91 5d 01 	lds	r24, 0x015D
     bbc:	90 91 5e 01 	lds	r25, 0x015E
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	90 93 5e 01 	sts	0x015E, r25
     bc6:	80 93 5d 01 	sts	0x015D, r24
		encb_off_count = 0;
     bca:	10 92 62 01 	sts	0x0162, r1
     bce:	10 92 61 01 	sts	0x0161, r1
     bd2:	14 c0       	rjmp	.+40     	; 0xbfc <debounce+0x41a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     bd4:	80 91 61 01 	lds	r24, 0x0161
     bd8:	90 91 62 01 	lds	r25, 0x0162
     bdc:	85 30       	cpi	r24, 0x05	; 5
     bde:	91 05       	cpc	r25, r1
     be0:	48 f4       	brcc	.+18     	; 0xbf4 <debounce+0x412>
			encb_off_count++;
     be2:	80 91 61 01 	lds	r24, 0x0161
     be6:	90 91 62 01 	lds	r25, 0x0162
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	90 93 62 01 	sts	0x0162, r25
     bf0:	80 93 61 01 	sts	0x0161, r24
		encb_on_count = 0;
     bf4:	10 92 5e 01 	sts	0x015E, r1
     bf8:	10 92 5d 01 	sts	0x015D, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     bfc:	80 91 5b 01 	lds	r24, 0x015B
     c00:	90 91 5c 01 	lds	r25, 0x015C
     c04:	85 30       	cpi	r24, 0x05	; 5
     c06:	91 05       	cpc	r25, r1
     c08:	18 f0       	brcs	.+6      	; 0xc10 <debounce+0x42e>
		enc_a = TRUE;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	80 93 63 01 	sts	0x0163, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     c10:	80 91 5f 01 	lds	r24, 0x015F
     c14:	90 91 60 01 	lds	r25, 0x0160
     c18:	85 30       	cpi	r24, 0x05	; 5
     c1a:	91 05       	cpc	r25, r1
     c1c:	10 f0       	brcs	.+4      	; 0xc22 <debounce+0x440>
		enc_a = FALSE;
     c1e:	10 92 63 01 	sts	0x0163, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     c22:	80 91 5d 01 	lds	r24, 0x015D
     c26:	90 91 5e 01 	lds	r25, 0x015E
     c2a:	85 30       	cpi	r24, 0x05	; 5
     c2c:	91 05       	cpc	r25, r1
     c2e:	18 f0       	brcs	.+6      	; 0xc36 <debounce+0x454>
		enc_b = TRUE;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 df 01 	sts	0x01DF, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     c36:	80 91 61 01 	lds	r24, 0x0161
     c3a:	90 91 62 01 	lds	r25, 0x0162
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	91 05       	cpc	r25, r1
     c42:	10 f0       	brcs	.+4      	; 0xc48 <debounce+0x466>
		enc_b = FALSE;
     c44:	10 92 df 01 	sts	0x01DF, r1

	// Don't go to sleep if there are any paddle or button presses
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
     c48:	80 91 4b 01 	lds	r24, 0x014B
     c4c:	90 91 4c 01 	lds	r25, 0x014C
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	c1 f4       	brne	.+48     	; 0xc84 <debounce+0x4a2>
     c54:	80 91 4d 01 	lds	r24, 0x014D
     c58:	90 91 4e 01 	lds	r25, 0x014E
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	91 f4       	brne	.+36     	; 0xc84 <debounce+0x4a2>
     c60:	80 91 53 01 	lds	r24, 0x0153
     c64:	90 91 54 01 	lds	r25, 0x0154
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	61 f4       	brne	.+24     	; 0xc84 <debounce+0x4a2>
     c6c:	80 91 55 01 	lds	r24, 0x0155
     c70:	90 91 56 01 	lds	r25, 0x0156
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	31 f4       	brne	.+12     	; 0xc84 <debounce+0x4a2>
     c78:	80 91 57 01 	lds	r24, 0x0157
     c7c:	90 91 58 01 	lds	r25, 0x0158
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	19 f0       	breq	.+6      	; 0xc8a <debounce+0x4a8>
		allow_sleep = FALSE;
     c84:	10 92 0a 01 	sts	0x010A, r1
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <debounce+0x4ae>
	else
		allow_sleep = TRUE;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 0a 01 	sts	0x010A, r24
}
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <announce>:

void announce(char * msg, uint16_t freq, uint8_t speed)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <announce+0x6>
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <announce+0x8>
     ca0:	0f 92       	push	r0
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	7c 83       	std	Y+4, r23	; 0x04
     cac:	6b 83       	std	Y+3, r22	; 0x03
     cae:	4d 83       	std	Y+5, r20	; 0x05
	// Convert to uppercase
	strupr(msg);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	0e 94 46 19 	call	0x328c	; 0x328c <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     cb8:	80 91 d9 01 	lds	r24, 0x01D9
     cbc:	90 91 da 01 	lds	r25, 0x01DA
     cc0:	29 81       	ldd	r18, Y+1	; 0x01
     cc2:	3a 81       	ldd	r19, Y+2	; 0x02
     cc4:	b9 01       	movw	r22, r18
     cc6:	0e 94 3f 19 	call	0x327e	; 0x327e <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     cca:	80 91 c0 01 	lds	r24, 0x01C0
     cce:	80 93 6e 01 	sts	0x016E, r24
	prev_state_end = cur_state_end;
     cd2:	80 91 c6 01 	lds	r24, 0x01C6
     cd6:	90 91 c7 01 	lds	r25, 0x01C7
     cda:	a0 91 c8 01 	lds	r26, 0x01C8
     cde:	b0 91 c9 01 	lds	r27, 0x01C9
     ce2:	80 93 b0 01 	sts	0x01B0, r24
     ce6:	90 93 b1 01 	sts	0x01B1, r25
     cea:	a0 93 b2 01 	sts	0x01B2, r26
     cee:	b0 93 b3 01 	sts	0x01B3, r27
	prev_mode = cur_mode;
     cf2:	80 91 9e 01 	lds	r24, 0x019E
     cf6:	80 93 b4 01 	sts	0x01B4, r24
	prev_st_freq = st_freq;
     cfa:	80 91 b6 01 	lds	r24, 0x01B6
     cfe:	90 91 b7 01 	lds	r25, 0x01B7
     d02:	90 93 c4 01 	sts	0x01C4, r25
     d06:	80 93 c3 01 	sts	0x01C3, r24
	st_freq = freq;
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	90 93 b7 01 	sts	0x01B7, r25
     d12:	80 93 b6 01 	sts	0x01B6, r24
	prev_wpm = wpm;
     d16:	80 91 d4 01 	lds	r24, 0x01D4
     d1a:	80 93 e1 01 	sts	0x01E1, r24
	wpm = speed;
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	80 93 d4 01 	sts	0x01D4, r24

	set_st_freq(st_freq);
     d24:	80 91 b6 01 	lds	r24, 0x01B6
     d28:	90 91 b7 01 	lds	r25, 0x01B7
     d2c:	cc 01       	movw	r24, r24
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <set_st_freq>
	set_wpm(wpm);
     d3a:	80 91 d4 01 	lds	r24, 0x01D4
     d3e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <set_wpm>

	// Set into announce mode
	cur_state = IDLE;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 c0 01 	sts	0x01C0, r24
	cur_mode = ANNOUNCE;
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	80 93 9e 01 	sts	0x019E, r24
}
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <read_voltage>:

void read_voltage(void)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	00 d0       	rcall	.+0      	; 0xd64 <read_voltage+0x6>
     d64:	00 d0       	rcall	.+0      	; 0xd66 <read_voltage+0x8>
     d66:	00 d0       	rcall	.+0      	; 0xd68 <read_voltage+0xa>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     d6c:	8a e0       	ldi	r24, 0x0A	; 10
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <malloc>
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     d78:	8a e7       	ldi	r24, 0x7A	; 122
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	2a e7       	ldi	r18, 0x7A	; 122
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	d9 01       	movw	r26, r18
     d82:	2c 91       	ld	r18, X
     d84:	20 64       	ori	r18, 0x40	; 64
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     d8a:	8a e7       	ldi	r24, 0x7A	; 122
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	dc 01       	movw	r26, r24
     d90:	8c 91       	ld	r24, X
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	80 74       	andi	r24, 0x40	; 64
     d98:	90 70       	andi	r25, 0x00	; 0
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	b1 f7       	brne	.-20     	; 0xd8a <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     d9e:	89 e7       	ldi	r24, 0x79	; 121
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	fc 01       	movw	r30, r24
     da4:	80 81       	ld	r24, Z
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 15.8 V
	// We'll use fixed point numbers, so full scale is 158 * 0.1 V
	vcc = (vcc_mon * 158) / 256;
     dae:	4b 81       	ldd	r20, Y+3	; 0x03
     db0:	5c 81       	ldd	r21, Y+4	; 0x04
     db2:	2e e9       	ldi	r18, 0x9E	; 158
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	42 9f       	mul	r20, r18
     db8:	c0 01       	movw	r24, r0
     dba:	43 9f       	mul	r20, r19
     dbc:	90 0d       	add	r25, r0
     dbe:	52 9f       	mul	r21, r18
     dc0:	90 0d       	add	r25, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	89 2f       	mov	r24, r25
     dc6:	99 27       	eor	r25, r25
     dc8:	9e 83       	std	Y+6, r25	; 0x06
     dca:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	2a e0       	ldi	r18, 0x0A	; 10
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	b9 01       	movw	r22, r18
     dd6:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__udivmodhi4>
     dda:	9b 01       	movw	r18, r22
     ddc:	f9 01       	movw	r30, r18
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	9e 81       	ldd	r25, Y+6	; 0x06
     de2:	2a e0       	ldi	r18, 0x0A	; 10
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	b9 01       	movw	r22, r18
     de8:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__udivmodhi4>
     dec:	9c 01       	movw	r18, r24
     dee:	8d b7       	in	r24, 0x3d	; 61
     df0:	9e b7       	in	r25, 0x3e	; 62
     df2:	08 97       	sbiw	r24, 0x08	; 8
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	9e bf       	out	0x3e, r25	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	8d bf       	out	0x3d, r24	; 61
     dfe:	8d b7       	in	r24, 0x3d	; 61
     e00:	9e b7       	in	r25, 0x3e	; 62
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	49 81       	ldd	r20, Y+1	; 0x01
     e06:	5a 81       	ldd	r21, Y+2	; 0x02
     e08:	dc 01       	movw	r26, r24
     e0a:	4d 93       	st	X+, r20
     e0c:	5c 93       	st	X, r21
     e0e:	4b e0       	ldi	r20, 0x0B	; 11
     e10:	51 e0       	ldi	r21, 0x01	; 1
     e12:	dc 01       	movw	r26, r24
     e14:	13 96       	adiw	r26, 0x03	; 3
     e16:	5c 93       	st	X, r21
     e18:	4e 93       	st	-X, r20
     e1a:	12 97       	sbiw	r26, 0x02	; 2
     e1c:	dc 01       	movw	r26, r24
     e1e:	15 96       	adiw	r26, 0x05	; 5
     e20:	fc 93       	st	X, r31
     e22:	ee 93       	st	-X, r30
     e24:	14 97       	sbiw	r26, 0x04	; 4
     e26:	fc 01       	movw	r30, r24
     e28:	37 83       	std	Z+7, r19	; 0x07
     e2a:	26 83       	std	Z+6, r18	; 0x06
     e2c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <sprintf>
     e30:	8d b7       	in	r24, 0x3d	; 61
     e32:	9e b7       	in	r25, 0x3e	; 62
     e34:	08 96       	adiw	r24, 0x08	; 8
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	9e bf       	out	0x3e, r25	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq, wpm);
     e40:	20 91 b6 01 	lds	r18, 0x01B6
     e44:	30 91 b7 01 	lds	r19, 0x01B7
     e48:	40 91 d4 01 	lds	r20, 0x01D4
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	b9 01       	movw	r22, r18
     e52:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>

	free(vcc_out);
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	0e 94 96 18 	call	0x312c	; 0x312c <free>
}
     e5e:	26 96       	adiw	r28, 0x06	; 6
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <count_frequency>:

void count_frequency(void)
{
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <count_frequency+0xa>
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     e7e:	8f e0       	ldi	r24, 0x0F	; 15
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <malloc>
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     e8a:	80 91 d0 01 	lds	r24, 0x01D0
     e8e:	90 91 d1 01 	lds	r25, 0x01D1
     e92:	a0 91 d2 01 	lds	r26, 0x01D2
     e96:	b0 91 d3 01 	lds	r27, 0x01D3
     e9a:	28 ee       	ldi	r18, 0xE8	; 232
     e9c:	33 e0       	ldi	r19, 0x03	; 3
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
     eaa:	da 01       	movw	r26, r20
     eac:	c9 01       	movw	r24, r18
     eae:	24 e6       	ldi	r18, 0x64	; 100
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	8c 01       	movw	r16, r24
     ec4:	80 91 d0 01 	lds	r24, 0x01D0
     ec8:	90 91 d1 01 	lds	r25, 0x01D1
     ecc:	a0 91 d2 01 	lds	r26, 0x01D2
     ed0:	b0 91 d3 01 	lds	r27, 0x01D3
     ed4:	28 ee       	ldi	r18, 0xE8	; 232
     ed6:	33 e0       	ldi	r19, 0x03	; 3
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	2a e0       	ldi	r18, 0x0A	; 10
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__udivmodsi4>
     ef8:	da 01       	movw	r26, r20
     efa:	c9 01       	movw	r24, r18
     efc:	9c 01       	movw	r18, r24
     efe:	8d b7       	in	r24, 0x3d	; 61
     f00:	9e b7       	in	r25, 0x3e	; 62
     f02:	08 97       	sbiw	r24, 0x08	; 8
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	9e bf       	out	0x3e, r25	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	8d bf       	out	0x3d, r24	; 61
     f0e:	8d b7       	in	r24, 0x3d	; 61
     f10:	9e b7       	in	r25, 0x3e	; 62
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	49 81       	ldd	r20, Y+1	; 0x01
     f16:	5a 81       	ldd	r21, Y+2	; 0x02
     f18:	fc 01       	movw	r30, r24
     f1a:	51 83       	std	Z+1, r21	; 0x01
     f1c:	40 83       	st	Z, r20
     f1e:	41 e1       	ldi	r20, 0x11	; 17
     f20:	51 e0       	ldi	r21, 0x01	; 1
     f22:	fc 01       	movw	r30, r24
     f24:	53 83       	std	Z+3, r21	; 0x03
     f26:	42 83       	std	Z+2, r20	; 0x02
     f28:	fc 01       	movw	r30, r24
     f2a:	15 83       	std	Z+5, r17	; 0x05
     f2c:	04 83       	std	Z+4, r16	; 0x04
     f2e:	fc 01       	movw	r30, r24
     f30:	37 83       	std	Z+7, r19	; 0x07
     f32:	26 83       	std	Z+6, r18	; 0x06
     f34:	0e 94 50 19 	call	0x32a0	; 0x32a0 <sprintf>
     f38:	8d b7       	in	r24, 0x3d	; 61
     f3a:	9e b7       	in	r25, 0x3e	; 62
     f3c:	08 96       	adiw	r24, 0x08	; 8
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	9e bf       	out	0x3e, r25	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out, st_freq, wpm);
     f48:	20 91 b6 01 	lds	r18, 0x01B6
     f4c:	30 91 b7 01 	lds	r19, 0x01B7
     f50:	40 91 d4 01 	lds	r20, 0x01D4
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	b9 01       	movw	r22, r18
     f5a:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>

	free(freq_out);
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	0e 94 96 18 	call	0x312c	; 0x312c <free>
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	08 95       	ret

00000f74 <poll_buttons>:

void poll_buttons(void)
{
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
     f86:	80 91 be 01 	lds	r24, 0x01BE
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	59 f4       	brne	.+22     	; 0xfa4 <poll_buttons+0x30>
	{
		cur_state = IDLE;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 c0 01 	sts	0x01C0, r24
		prev_mode = cur_mode;
     f94:	80 91 9e 01 	lds	r24, 0x019E
     f98:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = TUNE;
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	80 93 9e 01 	sts	0x019E, r24
     fa2:	36 c0       	rjmp	.+108    	; 0x1010 <poll_buttons+0x9c>
	}
	else if(cmd_btn == PRESS)
     fa4:	80 91 bf 01 	lds	r24, 0x01BF
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	59 f4       	brne	.+22     	; 0xfc2 <poll_buttons+0x4e>
	{
		prev_mode = cur_mode;
     fac:	80 91 9e 01 	lds	r24, 0x019E
     fb0:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = MENU;
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	80 93 9e 01 	sts	0x019E, r24
		cur_state = IDLE;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 c0 01 	sts	0x01C0, r24
     fc0:	27 c0       	rjmp	.+78     	; 0x1010 <poll_buttons+0x9c>
	}
	else if(msg_btn == PRESS)
     fc2:	80 91 bd 01 	lds	r24, 0x01BD
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <poll_buttons+0x5c>
		count_frequency();
     fca:	0e 94 38 07 	call	0xe70	; 0xe70 <count_frequency>
     fce:	20 c0       	rjmp	.+64     	; 0x1010 <poll_buttons+0x9c>
	else if(msg_btn == HOLD)
     fd0:	80 91 bd 01 	lds	r24, 0x01BD
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	e1 f4       	brne	.+56     	; 0x1010 <poll_buttons+0x9c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
     fd8:	81 e7       	ldi	r24, 0x71	; 113
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	22 e0       	ldi	r18, 0x02	; 2
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	b9 01       	movw	r22, r18
     fe2:	48 e2       	ldi	r20, 0x28	; 40
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
     fea:	80 91 d9 01 	lds	r24, 0x01D9
     fee:	90 91 da 01 	lds	r25, 0x01DA
     ff2:	21 e7       	ldi	r18, 0x71	; 113
     ff4:	31 e0       	ldi	r19, 0x01	; 1
     ff6:	b9 01       	movw	r22, r18
     ff8:	0e 94 3f 19 	call	0x327e	; 0x327e <strcpy>
		cur_state = IDLE;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 93 c0 01 	sts	0x01C0, r24
		prev_mode = cur_mode;
    1002:	80 91 9e 01 	lds	r24, 0x019E
    1006:	80 93 b4 01 	sts	0x01B4, r24
		cur_mode = PLAYBACK;
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	80 93 9e 01 	sts	0x019E, r24
	}

	if(enc_btn == PRESS)
    1010:	80 91 c5 01 	lds	r24, 0x01C5
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	89 f5       	brne	.+98     	; 0x107a <poll_buttons+0x106>
	{
		if(tune_rate == FAST)
    1018:	80 91 06 01 	lds	r24, 0x0106
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	b1 f4       	brne	.+44     	; 0x104c <poll_buttons+0xd8>
		{
			tune_rate = SLOW;
    1020:	10 92 06 01 	sts	0x0106, r1
			tune_step = DDS_20HZ;
    1024:	84 e3       	ldi	r24, 0x34	; 52
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	90 93 08 01 	sts	0x0108, r25
    102c:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 5;
    1030:	85 e0       	ldi	r24, 0x05	; 5
    1032:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>
			announce("S", ST_LOW, 25);
    103c:	8b e1       	ldi	r24, 0x1B	; 27
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	60 e9       	ldi	r22, 0x90	; 144
    1042:	71 e0       	ldi	r23, 0x01	; 1
    1044:	49 e1       	ldi	r20, 0x19	; 25
    1046:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
    104a:	8c c0       	rjmp	.+280    	; 0x1164 <poll_buttons+0x1f0>
		}
		else
		{
			tune_rate = FAST;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 06 01 	sts	0x0106, r24
			tune_step = DDS_100HZ;
    1052:	8c e0       	ldi	r24, 0x0C	; 12
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	90 93 08 01 	sts	0x0108, r25
    105a:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 25;
    105e:	89 e1       	ldi	r24, 0x19	; 25
    1060:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>
			announce("S", ST_HIGH, 25);
    106a:	8b e1       	ldi	r24, 0x1B	; 27
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	64 e8       	ldi	r22, 0x84	; 132
    1070:	73 e0       	ldi	r23, 0x03	; 3
    1072:	49 e1       	ldi	r20, 0x19	; 25
    1074:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
    1078:	75 c0       	rjmp	.+234    	; 0x1164 <poll_buttons+0x1f0>
		}
	}
	else if(enc_btn == HOLD)
    107a:	80 91 c5 01 	lds	r24, 0x01C5
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	09 f0       	breq	.+2      	; 0x1084 <poll_buttons+0x110>
    1082:	70 c0       	rjmp	.+224    	; 0x1164 <poll_buttons+0x1f0>
	{
		if(rit_enable == FALSE)
    1084:	80 91 e0 01 	lds	r24, 0x01E0
    1088:	88 23       	and	r24, r24
    108a:	b9 f5       	brne	.+110    	; 0x10fa <poll_buttons+0x186>
		{
			RIT_LED_DDR |= _BV(RIT_LED);
    108c:	87 e2       	ldi	r24, 0x27	; 39
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	27 e2       	ldi	r18, 0x27	; 39
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	f9 01       	movw	r30, r18
    1096:	20 81       	ld	r18, Z
    1098:	22 60       	ori	r18, 0x02	; 2
    109a:	fc 01       	movw	r30, r24
    109c:	20 83       	st	Z, r18
			RIT_LED_PORT |= _BV(RIT_LED);
    109e:	88 e2       	ldi	r24, 0x28	; 40
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	28 e2       	ldi	r18, 0x28	; 40
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	f9 01       	movw	r30, r18
    10a8:	20 81       	ld	r18, Z
    10aa:	22 60       	ori	r18, 0x02	; 2
    10ac:	fc 01       	movw	r30, r24
    10ae:	20 83       	st	Z, r18
			rit_enable = TRUE;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 e0 01 	sts	0x01E0, r24
			dds_rit_freq_word = dds_freq_word;
    10b6:	80 91 a8 01 	lds	r24, 0x01A8
    10ba:	90 91 a9 01 	lds	r25, 0x01A9
    10be:	a0 91 aa 01 	lds	r26, 0x01AA
    10c2:	b0 91 ab 01 	lds	r27, 0x01AB
    10c6:	80 93 b8 01 	sts	0x01B8, r24
    10ca:	90 93 b9 01 	sts	0x01B9, r25
    10ce:	a0 93 ba 01 	sts	0x01BA, r26
    10d2:	b0 93 bb 01 	sts	0x01BB, r27
			tune_dds(dds_rit_freq_word, REG_1, FALSE);
    10d6:	80 91 b8 01 	lds	r24, 0x01B8
    10da:	90 91 b9 01 	lds	r25, 0x01B9
    10de:	a0 91 ba 01 	lds	r26, 0x01BA
    10e2:	b0 91 bb 01 	lds	r27, 0x01BB
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	41 e0       	ldi	r20, 0x01	; 1
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	0e 94 ae 09 	call	0x135c	; 0x135c <tune_dds>
			debounce(TRUE);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>
    10f8:	35 c0       	rjmp	.+106    	; 0x1164 <poll_buttons+0x1f0>
		}
		else
		{

			RIT_LED_DDR &= ~(_BV(RIT_LED));
    10fa:	87 e2       	ldi	r24, 0x27	; 39
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	27 e2       	ldi	r18, 0x27	; 39
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	f9 01       	movw	r30, r18
    1104:	20 81       	ld	r18, Z
    1106:	2d 7f       	andi	r18, 0xFD	; 253
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
			RIT_LED_PORT &= ~(_BV(RIT_LED));
    110c:	88 e2       	ldi	r24, 0x28	; 40
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	28 e2       	ldi	r18, 0x28	; 40
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	f9 01       	movw	r30, r18
    1116:	20 81       	ld	r18, Z
    1118:	2d 7f       	andi	r18, 0xFD	; 253
    111a:	fc 01       	movw	r30, r24
    111c:	20 83       	st	Z, r18
			rit_enable = FALSE;
    111e:	10 92 e0 01 	sts	0x01E0, r1
			dds_freq_word = dds_rit_freq_word;
    1122:	80 91 b8 01 	lds	r24, 0x01B8
    1126:	90 91 b9 01 	lds	r25, 0x01B9
    112a:	a0 91 ba 01 	lds	r26, 0x01BA
    112e:	b0 91 bb 01 	lds	r27, 0x01BB
    1132:	80 93 a8 01 	sts	0x01A8, r24
    1136:	90 93 a9 01 	sts	0x01A9, r25
    113a:	a0 93 aa 01 	sts	0x01AA, r26
    113e:	b0 93 ab 01 	sts	0x01AB, r27
			tune_dds(dds_freq_word, REG_0, FALSE);
    1142:	80 91 a8 01 	lds	r24, 0x01A8
    1146:	90 91 a9 01 	lds	r25, 0x01A9
    114a:	a0 91 aa 01 	lds	r26, 0x01AA
    114e:	b0 91 ab 01 	lds	r27, 0x01AB
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	0e 94 ae 09 	call	0x135c	; 0x135c <tune_dds>
			debounce(TRUE);
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>
		}
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    1164:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    1166:	80 91 63 01 	lds	r24, 0x0163
    116a:	88 23       	and	r24, r24
    116c:	19 f0       	breq	.+6      	; 0x1174 <poll_buttons+0x200>
		cur_enc_state += 0x02;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	8e 5f       	subi	r24, 0xFE	; 254
    1172:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    1174:	80 91 df 01 	lds	r24, 0x01DF
    1178:	88 23       	and	r24, r24
    117a:	19 f0       	breq	.+6      	; 0x1182 <poll_buttons+0x20e>
		cur_enc_state += 0x01;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    1182:	80 91 4a 01 	lds	r24, 0x014A
    1186:	99 81       	ldd	r25, Y+1	; 0x01
    1188:	98 17       	cp	r25, r24
    118a:	09 f4       	brne	.+2      	; 0x118e <poll_buttons+0x21a>
    118c:	dc c0       	rjmp	.+440    	; 0x1346 <poll_buttons+0x3d2>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    118e:	80 91 4a 01 	lds	r24, 0x014A
    1192:	86 95       	lsr	r24
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	80 93 4a 01 	sts	0x014A, r24

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    119a:	80 91 4a 01 	lds	r24, 0x014A
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	82 27       	eor	r24, r18
    11ae:	93 27       	eor	r25, r19
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <poll_buttons+0x244>
    11b6:	68 c0       	rjmp	.+208    	; 0x1288 <poll_buttons+0x314>
		{
			if(tune_freq > LOWER_FREQ_LIMIT)
    11b8:	80 91 d0 01 	lds	r24, 0x01D0
    11bc:	90 91 d1 01 	lds	r25, 0x01D1
    11c0:	a0 91 d2 01 	lds	r26, 0x01D2
    11c4:	b0 91 d3 01 	lds	r27, 0x01D3
    11c8:	81 38       	cpi	r24, 0x81	; 129
    11ca:	ff e9       	ldi	r31, 0x9F	; 159
    11cc:	9f 07       	cpc	r25, r31
    11ce:	f5 ed       	ldi	r31, 0xD5	; 213
    11d0:	af 07       	cpc	r26, r31
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	bf 07       	cpc	r27, r31
    11d6:	08 f4       	brcc	.+2      	; 0x11da <poll_buttons+0x266>
    11d8:	4c c0       	rjmp	.+152    	; 0x1272 <poll_buttons+0x2fe>
			{
				dds_freq_word -= tune_step;
    11da:	20 91 a8 01 	lds	r18, 0x01A8
    11de:	30 91 a9 01 	lds	r19, 0x01A9
    11e2:	40 91 aa 01 	lds	r20, 0x01AA
    11e6:	50 91 ab 01 	lds	r21, 0x01AB
    11ea:	80 91 07 01 	lds	r24, 0x0107
    11ee:	90 91 08 01 	lds	r25, 0x0108
    11f2:	cc 01       	movw	r24, r24
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	79 01       	movw	r14, r18
    11fa:	8a 01       	movw	r16, r20
    11fc:	e8 1a       	sub	r14, r24
    11fe:	f9 0a       	sbc	r15, r25
    1200:	0a 0b       	sbc	r16, r26
    1202:	1b 0b       	sbc	r17, r27
    1204:	d8 01       	movw	r26, r16
    1206:	c7 01       	movw	r24, r14
    1208:	80 93 a8 01 	sts	0x01A8, r24
    120c:	90 93 a9 01 	sts	0x01A9, r25
    1210:	a0 93 aa 01 	sts	0x01AA, r26
    1214:	b0 93 ab 01 	sts	0x01AB, r27
				tune_freq -= tune_freq_step;
    1218:	20 91 d0 01 	lds	r18, 0x01D0
    121c:	30 91 d1 01 	lds	r19, 0x01D1
    1220:	40 91 d2 01 	lds	r20, 0x01D2
    1224:	50 91 d3 01 	lds	r21, 0x01D3
    1228:	80 91 09 01 	lds	r24, 0x0109
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a0 e0       	ldi	r26, 0x00	; 0
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	79 01       	movw	r14, r18
    1236:	8a 01       	movw	r16, r20
    1238:	e8 1a       	sub	r14, r24
    123a:	f9 0a       	sbc	r15, r25
    123c:	0a 0b       	sbc	r16, r26
    123e:	1b 0b       	sbc	r17, r27
    1240:	d8 01       	movw	r26, r16
    1242:	c7 01       	movw	r24, r14
    1244:	80 93 d0 01 	sts	0x01D0, r24
    1248:	90 93 d1 01 	sts	0x01D1, r25
    124c:	a0 93 d2 01 	sts	0x01D2, r26
    1250:	b0 93 d3 01 	sts	0x01D3, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    1254:	80 91 a8 01 	lds	r24, 0x01A8
    1258:	90 91 a9 01 	lds	r25, 0x01A9
    125c:	a0 91 aa 01 	lds	r26, 0x01AA
    1260:	b0 91 ab 01 	lds	r27, 0x01AB
    1264:	bc 01       	movw	r22, r24
    1266:	cd 01       	movw	r24, r26
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	0e 94 ae 09 	call	0x135c	; 0x135c <tune_dds>
    1270:	6a c0       	rjmp	.+212    	; 0x1346 <poll_buttons+0x3d2>
			}
			else
			{
				announce("L", ST_HIGH, 23);
    1272:	8d e1       	ldi	r24, 0x1D	; 29
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	64 e8       	ldi	r22, 0x84	; 132
    1278:	73 e0       	ldi	r23, 0x03	; 3
    127a:	47 e1       	ldi	r20, 0x17	; 23
    127c:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
				debounce(TRUE);
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>
    1286:	5f c0       	rjmp	.+190    	; 0x1346 <poll_buttons+0x3d2>
			}
		}
		else
		{
			if(tune_freq < UPPER_FREQ_LIMIT)
    1288:	80 91 d0 01 	lds	r24, 0x01D0
    128c:	90 91 d1 01 	lds	r25, 0x01D1
    1290:	a0 91 d2 01 	lds	r26, 0x01D2
    1294:	b0 91 d3 01 	lds	r27, 0x01D3
    1298:	80 3b       	cpi	r24, 0xB0	; 176
    129a:	06 ef       	ldi	r16, 0xF6	; 246
    129c:	90 07       	cpc	r25, r16
    129e:	0a ed       	ldi	r16, 0xDA	; 218
    12a0:	a0 07       	cpc	r26, r16
    12a2:	00 e0       	ldi	r16, 0x00	; 0
    12a4:	b0 07       	cpc	r27, r16
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <poll_buttons+0x336>
    12a8:	44 c0       	rjmp	.+136    	; 0x1332 <poll_buttons+0x3be>
			{
				dds_freq_word += tune_step;
    12aa:	80 91 07 01 	lds	r24, 0x0107
    12ae:	90 91 08 01 	lds	r25, 0x0108
    12b2:	9c 01       	movw	r18, r24
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	80 91 a8 01 	lds	r24, 0x01A8
    12bc:	90 91 a9 01 	lds	r25, 0x01A9
    12c0:	a0 91 aa 01 	lds	r26, 0x01AA
    12c4:	b0 91 ab 01 	lds	r27, 0x01AB
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	a4 1f       	adc	r26, r20
    12ce:	b5 1f       	adc	r27, r21
    12d0:	80 93 a8 01 	sts	0x01A8, r24
    12d4:	90 93 a9 01 	sts	0x01A9, r25
    12d8:	a0 93 aa 01 	sts	0x01AA, r26
    12dc:	b0 93 ab 01 	sts	0x01AB, r27
				tune_freq += tune_freq_step;
    12e0:	80 91 09 01 	lds	r24, 0x0109
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	80 91 d0 01 	lds	r24, 0x01D0
    12f0:	90 91 d1 01 	lds	r25, 0x01D1
    12f4:	a0 91 d2 01 	lds	r26, 0x01D2
    12f8:	b0 91 d3 01 	lds	r27, 0x01D3
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	a4 1f       	adc	r26, r20
    1302:	b5 1f       	adc	r27, r21
    1304:	80 93 d0 01 	sts	0x01D0, r24
    1308:	90 93 d1 01 	sts	0x01D1, r25
    130c:	a0 93 d2 01 	sts	0x01D2, r26
    1310:	b0 93 d3 01 	sts	0x01D3, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    1314:	80 91 a8 01 	lds	r24, 0x01A8
    1318:	90 91 a9 01 	lds	r25, 0x01A9
    131c:	a0 91 aa 01 	lds	r26, 0x01AA
    1320:	b0 91 ab 01 	lds	r27, 0x01AB
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	0e 94 ae 09 	call	0x135c	; 0x135c <tune_dds>
    1330:	0a c0       	rjmp	.+20     	; 0x1346 <poll_buttons+0x3d2>
			}
			else
			{
				announce("U", ST_HIGH, 23);
    1332:	8f e1       	ldi	r24, 0x1F	; 31
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	64 e8       	ldi	r22, 0x84	; 132
    1338:	73 e0       	ldi	r23, 0x03	; 3
    133a:	47 e1       	ldi	r20, 0x17	; 23
    133c:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
				debounce(TRUE);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>
				announce("U", ST_HIGH, 23);
				*/
		}
	}

	prev_enc_state = cur_enc_state;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	80 93 4a 01 	sts	0x014A, r24
}
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	08 95       	ret

0000135c <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg, enum BOOL init)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	2c 97       	sbiw	r28, 0x0c	; 12
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	6f 83       	std	Y+7, r22	; 0x07
    1372:	78 87       	std	Y+8, r23	; 0x08
    1374:	89 87       	std	Y+9, r24	; 0x09
    1376:	9a 87       	std	Y+10, r25	; 0x0a
    1378:	4b 87       	std	Y+11, r20	; 0x0b
    137a:	2c 87       	std	Y+12, r18	; 0x0c
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    137c:	8b 85       	ldd	r24, Y+11	; 0x0b
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	29 f4       	brne	.+10     	; 0x138c <tune_dds+0x30>
		freq_reg = 0x8000;
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e8       	ldi	r25, 0x80	; 128
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <tune_dds+0x38>
	else
		freq_reg = 0x4000;
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e4       	ldi	r25, 0x40	; 64
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    1394:	8f 81       	ldd	r24, Y+7	; 0x07
    1396:	98 85       	ldd	r25, Y+8	; 0x08
    1398:	9c 01       	movw	r18, r24
    139a:	3f 73       	andi	r19, 0x3F	; 63
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	82 0f       	add	r24, r18
    13a2:	93 1f       	adc	r25, r19
    13a4:	9c 83       	std	Y+4, r25	; 0x04
    13a6:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    13a8:	8f 81       	ldd	r24, Y+7	; 0x07
    13aa:	98 85       	ldd	r25, Y+8	; 0x08
    13ac:	a9 85       	ldd	r26, Y+9	; 0x09
    13ae:	ba 85       	ldd	r27, Y+10	; 0x0a
    13b0:	07 2e       	mov	r0, r23
    13b2:	7e e0       	ldi	r23, 0x0E	; 14
    13b4:	b6 95       	lsr	r27
    13b6:	a7 95       	ror	r26
    13b8:	97 95       	ror	r25
    13ba:	87 95       	ror	r24
    13bc:	7a 95       	dec	r23
    13be:	d1 f7       	brne	.-12     	; 0x13b4 <tune_dds+0x58>
    13c0:	70 2d       	mov	r23, r0
    13c2:	9c 01       	movw	r18, r24
    13c4:	3f 73       	andi	r19, 0x3F	; 63
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	82 0f       	add	r24, r18
    13cc:	93 1f       	adc	r25, r19
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 83       	std	Y+5, r24	; 0x05

	if(init == TRUE)
    13d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	21 f4       	brne	.+8      	; 0x13e0 <tune_dds+0x84>
		send_dds_word(0x2100);
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	91 e2       	ldi	r25, 0x21	; 33
    13dc:	0e 94 0c 0a 	call	0x1418	; 0x1418 <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	0e 94 0c 0a 	call	0x1418	; 0x1418 <send_dds_word>

	if(init == TRUE)
    13f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	41 f4       	brne	.+16     	; 0x1406 <tune_dds+0xaa>
	{
		// Send phase
		send_dds_word(0xC000);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 ec       	ldi	r25, 0xC0	; 192
    13fa:	0e 94 0c 0a 	call	0x1418	; 0x1418 <send_dds_word>

		// Exit reset
		send_dds_word(0x2000);
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e2       	ldi	r25, 0x20	; 32
    1402:	0e 94 0c 0a 	call	0x1418	; 0x1418 <send_dds_word>
	}
}
    1406:	2c 96       	adiw	r28, 0x0c	; 12
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <send_dds_word>:
	send_dds_word(0x2000);
}
*/

void send_dds_word(uint16_t dds_word)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <send_dds_word+0x6>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    1426:	85 e2       	ldi	r24, 0x25	; 37
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	25 e2       	ldi	r18, 0x25	; 37
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	f9 01       	movw	r30, r18
    1430:	20 81       	ld	r18, Z
    1432:	20 62       	ori	r18, 0x20	; 32
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    1438:	85 e2       	ldi	r24, 0x25	; 37
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	25 e2       	ldi	r18, 0x25	; 37
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	2d 7f       	andi	r18, 0xFD	; 253
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    144a:	8e e4       	ldi	r24, 0x4E	; 78
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	29 81       	ldd	r18, Y+1	; 0x01
    1450:	3a 81       	ldd	r19, Y+2	; 0x02
    1452:	23 2f       	mov	r18, r19
    1454:	33 27       	eor	r19, r19
    1456:	fc 01       	movw	r30, r24
    1458:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    145a:	00 00       	nop
    145c:	8d e4       	ldi	r24, 0x4D	; 77
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	fc 01       	movw	r30, r24
    1462:	80 81       	ld	r24, Z
    1464:	88 23       	and	r24, r24
    1466:	d4 f7       	brge	.-12     	; 0x145c <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    1468:	8e e4       	ldi	r24, 0x4E	; 78
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	29 81       	ldd	r18, Y+1	; 0x01
    146e:	fc 01       	movw	r30, r24
    1470:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1472:	00 00       	nop
    1474:	8d e4       	ldi	r24, 0x4D	; 77
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	fc 01       	movw	r30, r24
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	d4 f7       	brge	.-12     	; 0x1474 <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    1480:	85 e2       	ldi	r24, 0x25	; 37
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	25 e2       	ldi	r18, 0x25	; 37
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	f9 01       	movw	r30, r18
    148a:	20 81       	ld	r18, Z
    148c:	22 60       	ori	r18, 0x02	; 2
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	98 e2       	ldi	r25, 0x28	; 40
    14b2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <send_dds_word>
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e2       	ldi	r25, 0x20	; 32
    14bc:	0e 94 0c 0a 	call	0x1418	; 0x1418 <send_dds_word>
}
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <set_st_freq+0x6>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <set_st_freq+0x8>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	69 83       	std	Y+1, r22	; 0x01
    14d6:	7a 83       	std	Y+2, r23	; 0x02
    14d8:	8b 83       	std	Y+3, r24	; 0x03
    14da:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	ab 81       	ldd	r26, Y+3	; 0x03
    14e2:	bc 81       	ldd	r27, Y+4	; 0x04
    14e4:	23 e9       	ldi	r18, 0x93	; 147
    14e6:	38 e1       	ldi	r19, 0x18	; 24
    14e8:	44 e0       	ldi	r20, 0x04	; 4
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	0e 94 94 17 	call	0x2f28	; 0x2f28 <__mulsi3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	80 93 ac 01 	sts	0x01AC, r24
    14fc:	90 93 ad 01 	sts	0x01AD, r25
    1500:	a0 93 ae 01 	sts	0x01AE, r26
    1504:	b0 93 af 01 	sts	0x01AF, r27
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <main>:

int main(void)
{
    1516:	1f 93       	push	r17
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	2d 97       	sbiw	r28, 0x0d	; 13
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    152c:	89 e2       	ldi	r24, 0x29	; 41
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <malloc>
    1534:	90 93 da 01 	sts	0x01DA, r25
    1538:	80 93 d9 01 	sts	0x01D9, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    153c:	80 91 d9 01 	lds	r24, 0x01D9
    1540:	90 91 da 01 	lds	r25, 0x01DA
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	49 e2       	ldi	r20, 0x29	; 41
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	0e 94 38 19 	call	0x3270	; 0x3270 <memset>
	cur_char_p = announce_buffer;
    1550:	80 91 d9 01 	lds	r24, 0x01D9
    1554:	90 91 da 01 	lds	r25, 0x01DA
    1558:	90 93 3b 01 	sts	0x013B, r25
    155c:	80 93 3a 01 	sts	0x013A, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    1560:	89 e2       	ldi	r24, 0x29	; 41
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <malloc>
    1568:	90 93 3d 01 	sts	0x013D, r25
    156c:	80 93 3c 01 	sts	0x013C, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    1570:	80 91 3c 01 	lds	r24, 0x013C
    1574:	90 91 3d 01 	lds	r25, 0x013D
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	49 e2       	ldi	r20, 0x29	; 41
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	0e 94 38 19 	call	0x3270	; 0x3270 <memset>

	init();
    1584:	0e 94 37 02 	call	0x46e	; 0x46e <init>

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    1588:	19 82       	std	Y+1, r1	; 0x01
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <main+0x82>
		debounce(FALSE);
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);

	init();

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	8f 30       	cpi	r24, 0x0F	; 15
    159c:	b8 f3       	brcs	.-18     	; 0x158c <main+0x76>
		debounce(FALSE);
	if(eeprom_read_byte(&ee_keyer) == FALSE)
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eerd_byte_m168>
    15a6:	88 23       	and	r24, r24
    15a8:	21 f4       	brne	.+8      	; 0x15b2 <main+0x9c>
		cur_mode = SK;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 9e 01 	sts	0x019E, r24
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <main+0xa0>
	else
		cur_mode = KEYER;
    15b2:	10 92 9e 01 	sts	0x019E, r1

	if((dah_active == TRUE) && (dit_active == FALSE))
    15b6:	80 91 bc 01 	lds	r24, 0x01BC
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	39 f4       	brne	.+14     	; 0x15cc <main+0xb6>
    15be:	80 91 ce 01 	lds	r24, 0x01CE
    15c2:	88 23       	and	r24, r24
    15c4:	19 f4       	brne	.+6      	; 0x15cc <main+0xb6>
		cur_mode = SK;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 93 9e 01 	sts	0x019E, r24

	announce("CC", st_freq, 15);
    15cc:	20 91 b6 01 	lds	r18, 0x01B6
    15d0:	30 91 b7 01 	lds	r19, 0x01B7
    15d4:	81 e2       	ldi	r24, 0x21	; 33
    15d6:	91 e0       	ldi	r25, 0x01	; 1
    15d8:	b9 01       	movw	r22, r18
    15da:	4f e0       	ldi	r20, 0x0F	; 15
    15dc:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    15e0:	f8 94       	cli
		cur_timer = timer;
    15e2:	80 91 6a 01 	lds	r24, 0x016A
    15e6:	90 91 6b 01 	lds	r25, 0x016B
    15ea:	a0 91 6c 01 	lds	r26, 0x016C
    15ee:	b0 91 6d 01 	lds	r27, 0x016D
    15f2:	80 93 64 01 	sts	0x0164, r24
    15f6:	90 93 65 01 	sts	0x0165, r25
    15fa:	a0 93 66 01 	sts	0x0166, r26
    15fe:	b0 93 67 01 	sts	0x0167, r27
		sei();
    1602:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    1604:	80 91 9e 01 	lds	r24, 0x019E
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <main+0xfe>
    1612:	ed c6       	rjmp	.+3546   	; 0x23ee <main+0xed8>
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	91 05       	cpc	r25, r1
    1618:	64 f4       	brge	.+24     	; 0x1632 <main+0x11c>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	c9 f0       	breq	.+50     	; 0x1652 <main+0x13c>
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	91 05       	cpc	r25, r1
    1624:	0c f0       	brlt	.+2      	; 0x1628 <main+0x112>
    1626:	31 c5       	rjmp	.+2658   	; 0x208a <main+0xb74>
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	09 f4       	brne	.+2      	; 0x162e <main+0x118>
    162c:	12 c1       	rjmp	.+548    	; 0x1852 <main+0x33c>
    162e:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <main+0x1a0c>
    1632:	85 30       	cpi	r24, 0x05	; 5
    1634:	91 05       	cpc	r25, r1
    1636:	11 f4       	brne	.+4      	; 0x163c <main+0x126>
    1638:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <main+0x13b8>
    163c:	85 30       	cpi	r24, 0x05	; 5
    163e:	91 05       	cpc	r25, r1
    1640:	0c f4       	brge	.+2      	; 0x1644 <main+0x12e>
    1642:	95 c7       	rjmp	.+3882   	; 0x256e <main+0x1058>
    1644:	86 30       	cpi	r24, 0x06	; 6
    1646:	91 05       	cpc	r25, r1
    1648:	11 f4       	brne	.+4      	; 0x164e <main+0x138>
    164a:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <main+0x1528>
    164e:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <main+0x1a0c>
		{
		case SK:
			default_mode = SK;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 69 01 	sts	0x0169, r24
			switch(cur_state)
    1658:	80 91 c0 01 	lds	r24, 0x01C0
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	87 30       	cpi	r24, 0x07	; 7
    1662:	91 05       	cpc	r25, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <main+0x152>
    1666:	43 c0       	rjmp	.+134    	; 0x16ee <main+0x1d8>
    1668:	8c 30       	cpi	r24, 0x0C	; 12
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <main+0x15a>
    166e:	a7 c0       	rjmp	.+334    	; 0x17be <main+0x2a8>
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	09 f0       	breq	.+2      	; 0x1678 <main+0x162>
    1676:	e6 c0       	rjmp	.+460    	; 0x1844 <main+0x32e>
			{
			case IDLE:
				key_down = FALSE;
    1678:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    167c:	10 92 36 01 	sts	0x0136, r1
				mute_on = FALSE;
    1680:	10 92 37 01 	sts	0x0137, r1
					mute_on = FALSE;
				else
					mute_on = TRUE;
					*/

				if(dit_active == TRUE)
    1684:	80 91 ce 01 	lds	r24, 0x01CE
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	69 f5       	brne	.+90     	; 0x16e6 <main+0x1d0>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    168c:	80 91 64 01 	lds	r24, 0x0164
    1690:	90 91 65 01 	lds	r25, 0x0165
    1694:	a0 91 66 01 	lds	r26, 0x0166
    1698:	b0 91 67 01 	lds	r27, 0x0167
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	a1 1d       	adc	r26, r1
    16a0:	b1 1d       	adc	r27, r1
    16a2:	80 93 a4 01 	sts	0x01A4, r24
    16a6:	90 93 a5 01 	sts	0x01A5, r25
    16aa:	a0 93 a6 01 	sts	0x01A6, r26
    16ae:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = UINT32_MAX;
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	9f ef       	ldi	r25, 0xFF	; 255
    16b6:	dc 01       	movw	r26, r24
    16b8:	80 93 db 01 	sts	0x01DB, r24
    16bc:	90 93 dc 01 	sts	0x01DC, r25
    16c0:	a0 93 dd 01 	sts	0x01DD, r26
    16c4:	b0 93 de 01 	sts	0x01DE, r27
					cur_state_end = UINT32_MAX;
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	dc 01       	movw	r26, r24
    16ce:	80 93 c6 01 	sts	0x01C6, r24
    16d2:	90 93 c7 01 	sts	0x01C7, r25
    16d6:	a0 93 c8 01 	sts	0x01C8, r26
    16da:	b0 93 c9 01 	sts	0x01C9, r27
					cur_state = KEYDOWN;
    16de:	87 e0       	ldi	r24, 0x07	; 7
    16e0:	80 93 c0 01 	sts	0x01C0, r24
				}
				else
				{
					cur_state = IDLE;
				}
				break;
    16e4:	b2 c0       	rjmp	.+356    	; 0x184a <main+0x334>
					cur_state_end = UINT32_MAX;
					cur_state = KEYDOWN;
				}
				else
				{
					cur_state = IDLE;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 93 c0 01 	sts	0x01C0, r24
				}
				break;
    16ec:	ae c0       	rjmp	.+348    	; 0x184a <main+0x334>

			case KEYDOWN:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    16ee:	80 91 d0 01 	lds	r24, 0x01D0
    16f2:	90 91 d1 01 	lds	r25, 0x01D1
    16f6:	a0 91 d2 01 	lds	r26, 0x01D2
    16fa:	b0 91 d3 01 	lds	r27, 0x01D3
    16fe:	81 3b       	cpi	r24, 0xB1	; 177
    1700:	26 ef       	ldi	r18, 0xF6	; 246
    1702:	92 07       	cpc	r25, r18
    1704:	2a ed       	ldi	r18, 0xDA	; 218
    1706:	a2 07       	cpc	r26, r18
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	b2 07       	cpc	r27, r18
    170c:	80 f4       	brcc	.+32     	; 0x172e <main+0x218>
    170e:	80 91 d0 01 	lds	r24, 0x01D0
    1712:	90 91 d1 01 	lds	r25, 0x01D1
    1716:	a0 91 d2 01 	lds	r26, 0x01D2
    171a:	b0 91 d3 01 	lds	r27, 0x01D3
    171e:	80 38       	cpi	r24, 0x80	; 128
    1720:	ef e9       	ldi	r30, 0x9F	; 159
    1722:	9e 07       	cpc	r25, r30
    1724:	e5 ed       	ldi	r30, 0xD5	; 213
    1726:	ae 07       	cpc	r26, r30
    1728:	e0 e0       	ldi	r30, 0x00	; 0
    172a:	be 07       	cpc	r27, r30
    172c:	38 f4       	brcc	.+14     	; 0x173c <main+0x226>
				{
					key_down = FALSE;
    172e:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    1732:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    1736:	10 92 37 01 	sts	0x0137, r1
    173a:	09 c0       	rjmp	.+18     	; 0x174e <main+0x238>
				}
				else
				{
					key_down = TRUE;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 93 37 01 	sts	0x0137, r24
				}

				if(dit_active == FALSE)
    174e:	80 91 ce 01 	lds	r24, 0x01CE
    1752:	88 23       	and	r24, r24
    1754:	41 f5       	brne	.+80     	; 0x17a6 <main+0x290>
				{
					cur_state = EXIT;
    1756:	8c e0       	ldi	r24, 0x0C	; 12
    1758:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    175c:	80 91 64 01 	lds	r24, 0x0164
    1760:	90 91 65 01 	lds	r25, 0x0165
    1764:	a0 91 66 01 	lds	r26, 0x0166
    1768:	b0 91 67 01 	lds	r27, 0x0167
    176c:	8c 59       	subi	r24, 0x9C	; 156
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	af 4f       	sbci	r26, 0xFF	; 255
    1772:	bf 4f       	sbci	r27, 0xFF	; 255
    1774:	80 93 c6 01 	sts	0x01C6, r24
    1778:	90 93 c7 01 	sts	0x01C7, r25
    177c:	a0 93 c8 01 	sts	0x01C8, r26
    1780:	b0 93 c9 01 	sts	0x01C9, r27
					tx_end = cur_timer;
    1784:	80 91 64 01 	lds	r24, 0x0164
    1788:	90 91 65 01 	lds	r25, 0x0165
    178c:	a0 91 66 01 	lds	r26, 0x0166
    1790:	b0 91 67 01 	lds	r27, 0x0167
    1794:	80 93 db 01 	sts	0x01DB, r24
    1798:	90 93 dc 01 	sts	0x01DC, r25
    179c:	a0 93 dd 01 	sts	0x01DD, r26
    17a0:	b0 93 de 01 	sts	0x01DE, r27
				}
				else
					tx_end = UINT32_MAX;
				break;
    17a4:	52 c0       	rjmp	.+164    	; 0x184a <main+0x334>
					cur_state = EXIT;
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
					tx_end = cur_timer;
				}
				else
					tx_end = UINT32_MAX;
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	9f ef       	ldi	r25, 0xFF	; 255
    17aa:	dc 01       	movw	r26, r24
    17ac:	80 93 db 01 	sts	0x01DB, r24
    17b0:	90 93 dc 01 	sts	0x01DC, r25
    17b4:	a0 93 dd 01 	sts	0x01DD, r26
    17b8:	b0 93 de 01 	sts	0x01DE, r27
				break;
    17bc:	46 c0       	rjmp	.+140    	; 0x184a <main+0x334>

			case EXIT:
				key_down = FALSE;
    17be:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    17c2:	10 92 36 01 	sts	0x0136, r1

				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    17c6:	80 91 d0 01 	lds	r24, 0x01D0
    17ca:	90 91 d1 01 	lds	r25, 0x01D1
    17ce:	a0 91 d2 01 	lds	r26, 0x01D2
    17d2:	b0 91 d3 01 	lds	r27, 0x01D3
    17d6:	81 3b       	cpi	r24, 0xB1	; 177
    17d8:	f6 ef       	ldi	r31, 0xF6	; 246
    17da:	9f 07       	cpc	r25, r31
    17dc:	fa ed       	ldi	r31, 0xDA	; 218
    17de:	af 07       	cpc	r26, r31
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	bf 07       	cpc	r27, r31
    17e4:	80 f4       	brcc	.+32     	; 0x1806 <main+0x2f0>
    17e6:	80 91 d0 01 	lds	r24, 0x01D0
    17ea:	90 91 d1 01 	lds	r25, 0x01D1
    17ee:	a0 91 d2 01 	lds	r26, 0x01D2
    17f2:	b0 91 d3 01 	lds	r27, 0x01D3
    17f6:	80 38       	cpi	r24, 0x80	; 128
    17f8:	2f e9       	ldi	r18, 0x9F	; 159
    17fa:	92 07       	cpc	r25, r18
    17fc:	25 ed       	ldi	r18, 0xD5	; 213
    17fe:	a2 07       	cpc	r26, r18
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	b2 07       	cpc	r27, r18
    1804:	18 f4       	brcc	.+6      	; 0x180c <main+0x2f6>
					mute_on = FALSE;
    1806:	10 92 37 01 	sts	0x0137, r1
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <main+0x2fc>
				else
					mute_on = TRUE;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	80 93 37 01 	sts	0x0137, r24

				if(cur_timer >= cur_state_end)
    1812:	20 91 64 01 	lds	r18, 0x0164
    1816:	30 91 65 01 	lds	r19, 0x0165
    181a:	40 91 66 01 	lds	r20, 0x0166
    181e:	50 91 67 01 	lds	r21, 0x0167
    1822:	80 91 c6 01 	lds	r24, 0x01C6
    1826:	90 91 c7 01 	lds	r25, 0x01C7
    182a:	a0 91 c8 01 	lds	r26, 0x01C8
    182e:	b0 91 c9 01 	lds	r27, 0x01C9
    1832:	28 17       	cp	r18, r24
    1834:	39 07       	cpc	r19, r25
    1836:	4a 07       	cpc	r20, r26
    1838:	5b 07       	cpc	r21, r27
    183a:	30 f0       	brcs	.+12     	; 0x1848 <main+0x332>
					cur_state = IDLE;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 93 c0 01 	sts	0x01C0, r24
				break;
    1842:	03 c0       	rjmp	.+6      	; 0x184a <main+0x334>

			default:
				break;
    1844:	00 00       	nop
    1846:	01 c0       	rjmp	.+2      	; 0x184a <main+0x334>
				else
					mute_on = TRUE;

				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;
    1848:	00 00       	nop

			default:
				break;
			}

			poll_buttons();
    184a:	0e 94 ba 07 	call	0xf74	; 0xf74 <poll_buttons>
				sleep_disable();
			}
			sei();
			*/

			break;
    184e:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <main+0x1a0e>

		case KEYER:
			default_mode = KEYER;
    1852:	10 92 69 01 	sts	0x0169, r1
			poll_buttons();
    1856:	0e 94 ba 07 	call	0xf74	; 0xf74 <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    185a:	80 91 c0 01 	lds	r24, 0x01C0
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <main+0x354>
    1868:	16 c2       	rjmp	.+1068   	; 0x1c96 <main+0x780>
    186a:	84 30       	cpi	r24, 0x04	; 4
    186c:	91 05       	cpc	r25, r1
    186e:	44 f4       	brge	.+16     	; 0x1880 <main+0x36a>
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	91 05       	cpc	r25, r1
    1874:	71 f0       	breq	.+28     	; 0x1892 <main+0x37c>
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <main+0x368>
    187c:	75 c1       	rjmp	.+746    	; 0x1b68 <main+0x652>
    187e:	03 c4       	rjmp	.+2054   	; 0x2086 <main+0xb70>
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	91 05       	cpc	r25, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <main+0x372>
    1886:	9e c2       	rjmp	.+1340   	; 0x1dc4 <main+0x8ae>
    1888:	8c 30       	cpi	r24, 0x0C	; 12
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <main+0x37a>
    188e:	dc c3       	rjmp	.+1976   	; 0x2048 <main+0xb32>
    1890:	fa c3       	rjmp	.+2036   	; 0x2086 <main+0xb70>
			{
			case IDLE:
				key_down = FALSE;
    1892:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    1896:	10 92 36 01 	sts	0x0136, r1
				mute_on = FALSE;
    189a:	10 92 37 01 	sts	0x0137, r1
				mute_end = cur_timer;
    189e:	80 91 64 01 	lds	r24, 0x0164
    18a2:	90 91 65 01 	lds	r25, 0x0165
    18a6:	a0 91 66 01 	lds	r26, 0x0166
    18aa:	b0 91 67 01 	lds	r27, 0x0167
    18ae:	80 93 ca 01 	sts	0x01CA, r24
    18b2:	90 93 cb 01 	sts	0x01CB, r25
    18b6:	a0 93 cc 01 	sts	0x01CC, r26
    18ba:	b0 93 cd 01 	sts	0x01CD, r27
					mute_on = FALSE;
				else
					mute_on = TRUE;
				*/
				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    18be:	80 91 ce 01 	lds	r24, 0x01CE
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <main+0x3b2>
    18c6:	68 c0       	rjmp	.+208    	; 0x1998 <main+0x482>
    18c8:	80 91 bc 01 	lds	r24, 0x01BC
    18cc:	88 23       	and	r24, r24
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <main+0x3bc>
    18d0:	63 c0       	rjmp	.+198    	; 0x1998 <main+0x482>
				{
					prev_state = IDLE;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DIT;
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	80 93 c0 01 	sts	0x01C0, r24
					next_state = IDLE;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + dit_length;
    18e4:	80 91 6f 01 	lds	r24, 0x016F
    18e8:	90 91 70 01 	lds	r25, 0x0170
    18ec:	9c 01       	movw	r18, r24
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	80 91 64 01 	lds	r24, 0x0164
    18f6:	90 91 65 01 	lds	r25, 0x0165
    18fa:	a0 91 66 01 	lds	r26, 0x0166
    18fe:	b0 91 67 01 	lds	r27, 0x0167
    1902:	82 0f       	add	r24, r18
    1904:	93 1f       	adc	r25, r19
    1906:	a4 1f       	adc	r26, r20
    1908:	b5 1f       	adc	r27, r21
    190a:	80 93 c6 01 	sts	0x01C6, r24
    190e:	90 93 c7 01 	sts	0x01C7, r25
    1912:	a0 93 c8 01 	sts	0x01C8, r26
    1916:	b0 93 c9 01 	sts	0x01C9, r27
					tx_start = cur_timer + TX_ON_DELAY;
    191a:	80 91 64 01 	lds	r24, 0x0164
    191e:	90 91 65 01 	lds	r25, 0x0165
    1922:	a0 91 66 01 	lds	r26, 0x0166
    1926:	b0 91 67 01 	lds	r27, 0x0167
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	a1 1d       	adc	r26, r1
    192e:	b1 1d       	adc	r27, r1
    1930:	80 93 a4 01 	sts	0x01A4, r24
    1934:	90 93 a5 01 	sts	0x01A5, r25
    1938:	a0 93 a6 01 	sts	0x01A6, r26
    193c:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1940:	80 91 c6 01 	lds	r24, 0x01C6
    1944:	90 91 c7 01 	lds	r25, 0x01C7
    1948:	a0 91 c8 01 	lds	r26, 0x01C8
    194c:	b0 91 c9 01 	lds	r27, 0x01C9
    1950:	80 93 db 01 	sts	0x01DB, r24
    1954:	90 93 dc 01 	sts	0x01DC, r25
    1958:	a0 93 dd 01 	sts	0x01DD, r26
    195c:	b0 93 de 01 	sts	0x01DE, r27
					mute_start = cur_timer;
    1960:	80 91 64 01 	lds	r24, 0x0164
    1964:	90 91 65 01 	lds	r25, 0x0165
    1968:	a0 91 66 01 	lds	r26, 0x0166
    196c:	b0 91 67 01 	lds	r27, 0x0167
    1970:	80 93 d5 01 	sts	0x01D5, r24
    1974:	90 93 d6 01 	sts	0x01D6, r25
    1978:	a0 93 d7 01 	sts	0x01D7, r26
    197c:	b0 93 d8 01 	sts	0x01D8, r27
					mute_end = UINT32_MAX;
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f ef       	ldi	r25, 0xFF	; 255
    1984:	dc 01       	movw	r26, r24
    1986:	80 93 ca 01 	sts	0x01CA, r24
    198a:	90 93 cb 01 	sts	0x01CB, r25
    198e:	a0 93 cc 01 	sts	0x01CC, r26
    1992:	b0 93 cd 01 	sts	0x01CD, r27
    1996:	e7 c0       	rjmp	.+462    	; 0x1b66 <main+0x650>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    1998:	80 91 bc 01 	lds	r24, 0x01BC
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	09 f0       	breq	.+2      	; 0x19a2 <main+0x48c>
    19a0:	6d c0       	rjmp	.+218    	; 0x1a7c <main+0x566>
    19a2:	80 91 ce 01 	lds	r24, 0x01CE
    19a6:	88 23       	and	r24, r24
    19a8:	09 f0       	breq	.+2      	; 0x19ac <main+0x496>
    19aa:	68 c0       	rjmp	.+208    	; 0x1a7c <main+0x566>
				{
					prev_state = IDLE;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DAH;
    19b2:	83 e0       	ldi	r24, 0x03	; 3
    19b4:	80 93 c0 01 	sts	0x01C0, r24
					next_state = IDLE;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + (dit_length * 3);
    19be:	20 91 6f 01 	lds	r18, 0x016F
    19c2:	30 91 70 01 	lds	r19, 0x0170
    19c6:	c9 01       	movw	r24, r18
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	82 0f       	add	r24, r18
    19ce:	93 1f       	adc	r25, r19
    19d0:	9c 01       	movw	r18, r24
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	80 91 64 01 	lds	r24, 0x0164
    19da:	90 91 65 01 	lds	r25, 0x0165
    19de:	a0 91 66 01 	lds	r26, 0x0166
    19e2:	b0 91 67 01 	lds	r27, 0x0167
    19e6:	82 0f       	add	r24, r18
    19e8:	93 1f       	adc	r25, r19
    19ea:	a4 1f       	adc	r26, r20
    19ec:	b5 1f       	adc	r27, r21
    19ee:	80 93 c6 01 	sts	0x01C6, r24
    19f2:	90 93 c7 01 	sts	0x01C7, r25
    19f6:	a0 93 c8 01 	sts	0x01C8, r26
    19fa:	b0 93 c9 01 	sts	0x01C9, r27
					tx_start = cur_timer + TX_ON_DELAY;
    19fe:	80 91 64 01 	lds	r24, 0x0164
    1a02:	90 91 65 01 	lds	r25, 0x0165
    1a06:	a0 91 66 01 	lds	r26, 0x0166
    1a0a:	b0 91 67 01 	lds	r27, 0x0167
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	a1 1d       	adc	r26, r1
    1a12:	b1 1d       	adc	r27, r1
    1a14:	80 93 a4 01 	sts	0x01A4, r24
    1a18:	90 93 a5 01 	sts	0x01A5, r25
    1a1c:	a0 93 a6 01 	sts	0x01A6, r26
    1a20:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1a24:	80 91 c6 01 	lds	r24, 0x01C6
    1a28:	90 91 c7 01 	lds	r25, 0x01C7
    1a2c:	a0 91 c8 01 	lds	r26, 0x01C8
    1a30:	b0 91 c9 01 	lds	r27, 0x01C9
    1a34:	80 93 db 01 	sts	0x01DB, r24
    1a38:	90 93 dc 01 	sts	0x01DC, r25
    1a3c:	a0 93 dd 01 	sts	0x01DD, r26
    1a40:	b0 93 de 01 	sts	0x01DE, r27
					mute_start = cur_timer;
    1a44:	80 91 64 01 	lds	r24, 0x0164
    1a48:	90 91 65 01 	lds	r25, 0x0165
    1a4c:	a0 91 66 01 	lds	r26, 0x0166
    1a50:	b0 91 67 01 	lds	r27, 0x0167
    1a54:	80 93 d5 01 	sts	0x01D5, r24
    1a58:	90 93 d6 01 	sts	0x01D6, r25
    1a5c:	a0 93 d7 01 	sts	0x01D7, r26
    1a60:	b0 93 d8 01 	sts	0x01D8, r27
					mute_end = UINT32_MAX;
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	9f ef       	ldi	r25, 0xFF	; 255
    1a68:	dc 01       	movw	r26, r24
    1a6a:	80 93 ca 01 	sts	0x01CA, r24
    1a6e:	90 93 cb 01 	sts	0x01CB, r25
    1a72:	a0 93 cc 01 	sts	0x01CC, r26
    1a76:	b0 93 cd 01 	sts	0x01CD, r27
    1a7a:	75 c0       	rjmp	.+234    	; 0x1b66 <main+0x650>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    1a7c:	80 91 ce 01 	lds	r24, 0x01CE
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <main+0x570>
    1a84:	6d c0       	rjmp	.+218    	; 0x1b60 <main+0x64a>
    1a86:	80 91 bc 01 	lds	r24, 0x01BC
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <main+0x57a>
    1a8e:	68 c0       	rjmp	.+208    	; 0x1b60 <main+0x64a>
    1a90:	80 91 a3 01 	lds	r24, 0x01A3
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <main+0x584>
    1a98:	63 c0       	rjmp	.+198    	; 0x1b60 <main+0x64a>
				{
					prev_state = IDLE;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DIT;
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	80 93 c0 01 	sts	0x01C0, r24
					next_state = DAH;
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	80 93 a3 01 	sts	0x01A3, r24
					cur_state_end = cur_timer + dit_length;
    1aac:	80 91 6f 01 	lds	r24, 0x016F
    1ab0:	90 91 70 01 	lds	r25, 0x0170
    1ab4:	9c 01       	movw	r18, r24
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	80 91 64 01 	lds	r24, 0x0164
    1abe:	90 91 65 01 	lds	r25, 0x0165
    1ac2:	a0 91 66 01 	lds	r26, 0x0166
    1ac6:	b0 91 67 01 	lds	r27, 0x0167
    1aca:	82 0f       	add	r24, r18
    1acc:	93 1f       	adc	r25, r19
    1ace:	a4 1f       	adc	r26, r20
    1ad0:	b5 1f       	adc	r27, r21
    1ad2:	80 93 c6 01 	sts	0x01C6, r24
    1ad6:	90 93 c7 01 	sts	0x01C7, r25
    1ada:	a0 93 c8 01 	sts	0x01C8, r26
    1ade:	b0 93 c9 01 	sts	0x01C9, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1ae2:	80 91 64 01 	lds	r24, 0x0164
    1ae6:	90 91 65 01 	lds	r25, 0x0165
    1aea:	a0 91 66 01 	lds	r26, 0x0166
    1aee:	b0 91 67 01 	lds	r27, 0x0167
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	a1 1d       	adc	r26, r1
    1af6:	b1 1d       	adc	r27, r1
    1af8:	80 93 a4 01 	sts	0x01A4, r24
    1afc:	90 93 a5 01 	sts	0x01A5, r25
    1b00:	a0 93 a6 01 	sts	0x01A6, r26
    1b04:	b0 93 a7 01 	sts	0x01A7, r27
					tx_end = cur_state_end;
    1b08:	80 91 c6 01 	lds	r24, 0x01C6
    1b0c:	90 91 c7 01 	lds	r25, 0x01C7
    1b10:	a0 91 c8 01 	lds	r26, 0x01C8
    1b14:	b0 91 c9 01 	lds	r27, 0x01C9
    1b18:	80 93 db 01 	sts	0x01DB, r24
    1b1c:	90 93 dc 01 	sts	0x01DC, r25
    1b20:	a0 93 dd 01 	sts	0x01DD, r26
    1b24:	b0 93 de 01 	sts	0x01DE, r27
					mute_start = cur_timer;
    1b28:	80 91 64 01 	lds	r24, 0x0164
    1b2c:	90 91 65 01 	lds	r25, 0x0165
    1b30:	a0 91 66 01 	lds	r26, 0x0166
    1b34:	b0 91 67 01 	lds	r27, 0x0167
    1b38:	80 93 d5 01 	sts	0x01D5, r24
    1b3c:	90 93 d6 01 	sts	0x01D6, r25
    1b40:	a0 93 d7 01 	sts	0x01D7, r26
    1b44:	b0 93 d8 01 	sts	0x01D8, r27
					mute_end = UINT32_MAX;
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	9f ef       	ldi	r25, 0xFF	; 255
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	80 93 ca 01 	sts	0x01CA, r24
    1b52:	90 93 cb 01 	sts	0x01CB, r25
    1b56:	a0 93 cc 01 	sts	0x01CC, r26
    1b5a:	b0 93 cd 01 	sts	0x01CD, r27
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <main+0x650>
				}
				else
				{
					cur_state = IDLE;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	80 93 c0 01 	sts	0x01C0, r24
				}

				break;
    1b66:	90 c2       	rjmp	.+1312   	; 0x2088 <main+0xb72>

			case DIT:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1b68:	80 91 d0 01 	lds	r24, 0x01D0
    1b6c:	90 91 d1 01 	lds	r25, 0x01D1
    1b70:	a0 91 d2 01 	lds	r26, 0x01D2
    1b74:	b0 91 d3 01 	lds	r27, 0x01D3
    1b78:	81 3b       	cpi	r24, 0xB1	; 177
    1b7a:	e6 ef       	ldi	r30, 0xF6	; 246
    1b7c:	9e 07       	cpc	r25, r30
    1b7e:	ea ed       	ldi	r30, 0xDA	; 218
    1b80:	ae 07       	cpc	r26, r30
    1b82:	e0 e0       	ldi	r30, 0x00	; 0
    1b84:	be 07       	cpc	r27, r30
    1b86:	80 f4       	brcc	.+32     	; 0x1ba8 <main+0x692>
    1b88:	80 91 d0 01 	lds	r24, 0x01D0
    1b8c:	90 91 d1 01 	lds	r25, 0x01D1
    1b90:	a0 91 d2 01 	lds	r26, 0x01D2
    1b94:	b0 91 d3 01 	lds	r27, 0x01D3
    1b98:	80 38       	cpi	r24, 0x80	; 128
    1b9a:	ff e9       	ldi	r31, 0x9F	; 159
    1b9c:	9f 07       	cpc	r25, r31
    1b9e:	f5 ed       	ldi	r31, 0xD5	; 213
    1ba0:	af 07       	cpc	r26, r31
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	bf 07       	cpc	r27, r31
    1ba6:	38 f4       	brcc	.+14     	; 0x1bb6 <main+0x6a0>
				{
					key_down = FALSE;
    1ba8:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    1bac:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    1bb0:	10 92 37 01 	sts	0x0137, r1
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <main+0x6b2>
				}
				else
				{
					key_down = TRUE;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 37 01 	sts	0x0137, r24
				}

				if(cur_timer > cur_state_end)
    1bc8:	20 91 64 01 	lds	r18, 0x0164
    1bcc:	30 91 65 01 	lds	r19, 0x0165
    1bd0:	40 91 66 01 	lds	r20, 0x0166
    1bd4:	50 91 67 01 	lds	r21, 0x0167
    1bd8:	80 91 c6 01 	lds	r24, 0x01C6
    1bdc:	90 91 c7 01 	lds	r25, 0x01C7
    1be0:	a0 91 c8 01 	lds	r26, 0x01C8
    1be4:	b0 91 c9 01 	lds	r27, 0x01C9
    1be8:	82 17       	cp	r24, r18
    1bea:	93 07       	cpc	r25, r19
    1bec:	a4 07       	cpc	r26, r20
    1bee:	b5 07       	cpc	r27, r21
    1bf0:	08 f0       	brcs	.+2      	; 0x1bf4 <main+0x6de>
    1bf2:	45 c0       	rjmp	.+138    	; 0x1c7e <main+0x768>
				{
					prev_state = DIT;
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DITDELAY;
    1bfa:	84 e0       	ldi	r24, 0x04	; 4
    1bfc:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + dit_length;
    1c00:	80 91 6f 01 	lds	r24, 0x016F
    1c04:	90 91 70 01 	lds	r25, 0x0170
    1c08:	9c 01       	movw	r18, r24
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	80 91 64 01 	lds	r24, 0x0164
    1c12:	90 91 65 01 	lds	r25, 0x0165
    1c16:	a0 91 66 01 	lds	r26, 0x0166
    1c1a:	b0 91 67 01 	lds	r27, 0x0167
    1c1e:	82 0f       	add	r24, r18
    1c20:	93 1f       	adc	r25, r19
    1c22:	a4 1f       	adc	r26, r20
    1c24:	b5 1f       	adc	r27, r21
    1c26:	80 93 c6 01 	sts	0x01C6, r24
    1c2a:	90 93 c7 01 	sts	0x01C7, r25
    1c2e:	a0 93 c8 01 	sts	0x01C8, r26
    1c32:	b0 93 c9 01 	sts	0x01C9, r27
					mute_start = cur_timer;
    1c36:	80 91 64 01 	lds	r24, 0x0164
    1c3a:	90 91 65 01 	lds	r25, 0x0165
    1c3e:	a0 91 66 01 	lds	r26, 0x0166
    1c42:	b0 91 67 01 	lds	r27, 0x0167
    1c46:	80 93 d5 01 	sts	0x01D5, r24
    1c4a:	90 93 d6 01 	sts	0x01D6, r25
    1c4e:	a0 93 d7 01 	sts	0x01D7, r26
    1c52:	b0 93 d8 01 	sts	0x01D8, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1c56:	80 91 c6 01 	lds	r24, 0x01C6
    1c5a:	90 91 c7 01 	lds	r25, 0x01C7
    1c5e:	a0 91 c8 01 	lds	r26, 0x01C8
    1c62:	b0 91 c9 01 	lds	r27, 0x01C9
    1c66:	8c 59       	subi	r24, 0x9C	; 156
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	af 4f       	sbci	r26, 0xFF	; 255
    1c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c6e:	80 93 ca 01 	sts	0x01CA, r24
    1c72:	90 93 cb 01 	sts	0x01CB, r25
    1c76:	a0 93 cc 01 	sts	0x01CC, r26
    1c7a:	b0 93 cd 01 	sts	0x01CD, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    1c7e:	80 91 bc 01 	lds	r24, 0x01BC
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	39 f4       	brne	.+14     	; 0x1c94 <main+0x77e>
    1c86:	80 91 a3 01 	lds	r24, 0x01A3
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	19 f4       	brne	.+6      	; 0x1c94 <main+0x77e>
					next_state = DAH;
    1c8e:	83 e0       	ldi	r24, 0x03	; 3
    1c90:	80 93 a3 01 	sts	0x01A3, r24

				break;
    1c94:	f9 c1       	rjmp	.+1010   	; 0x2088 <main+0xb72>

			case DAH:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1c96:	80 91 d0 01 	lds	r24, 0x01D0
    1c9a:	90 91 d1 01 	lds	r25, 0x01D1
    1c9e:	a0 91 d2 01 	lds	r26, 0x01D2
    1ca2:	b0 91 d3 01 	lds	r27, 0x01D3
    1ca6:	81 3b       	cpi	r24, 0xB1	; 177
    1ca8:	26 ef       	ldi	r18, 0xF6	; 246
    1caa:	92 07       	cpc	r25, r18
    1cac:	2a ed       	ldi	r18, 0xDA	; 218
    1cae:	a2 07       	cpc	r26, r18
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	b2 07       	cpc	r27, r18
    1cb4:	80 f4       	brcc	.+32     	; 0x1cd6 <main+0x7c0>
    1cb6:	80 91 d0 01 	lds	r24, 0x01D0
    1cba:	90 91 d1 01 	lds	r25, 0x01D1
    1cbe:	a0 91 d2 01 	lds	r26, 0x01D2
    1cc2:	b0 91 d3 01 	lds	r27, 0x01D3
    1cc6:	80 38       	cpi	r24, 0x80	; 128
    1cc8:	ef e9       	ldi	r30, 0x9F	; 159
    1cca:	9e 07       	cpc	r25, r30
    1ccc:	e5 ed       	ldi	r30, 0xD5	; 213
    1cce:	ae 07       	cpc	r26, r30
    1cd0:	e0 e0       	ldi	r30, 0x00	; 0
    1cd2:	be 07       	cpc	r27, r30
    1cd4:	38 f4       	brcc	.+14     	; 0x1ce4 <main+0x7ce>
				{
					key_down = FALSE;
    1cd6:	10 92 38 01 	sts	0x0138, r1
					sidetone_on = FALSE;
    1cda:	10 92 36 01 	sts	0x0136, r1
					mute_on = FALSE;
    1cde:	10 92 37 01 	sts	0x0137, r1
    1ce2:	09 c0       	rjmp	.+18     	; 0x1cf6 <main+0x7e0>
				}
				else
				{
					key_down = TRUE;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	80 93 38 01 	sts	0x0138, r24
					sidetone_on = TRUE;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	80 93 36 01 	sts	0x0136, r24
					mute_on = TRUE;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	80 93 37 01 	sts	0x0137, r24
				}

				if(cur_timer > cur_state_end)
    1cf6:	20 91 64 01 	lds	r18, 0x0164
    1cfa:	30 91 65 01 	lds	r19, 0x0165
    1cfe:	40 91 66 01 	lds	r20, 0x0166
    1d02:	50 91 67 01 	lds	r21, 0x0167
    1d06:	80 91 c6 01 	lds	r24, 0x01C6
    1d0a:	90 91 c7 01 	lds	r25, 0x01C7
    1d0e:	a0 91 c8 01 	lds	r26, 0x01C8
    1d12:	b0 91 c9 01 	lds	r27, 0x01C9
    1d16:	82 17       	cp	r24, r18
    1d18:	93 07       	cpc	r25, r19
    1d1a:	a4 07       	cpc	r26, r20
    1d1c:	b5 07       	cpc	r27, r21
    1d1e:	08 f0       	brcs	.+2      	; 0x1d22 <main+0x80c>
    1d20:	45 c0       	rjmp	.+138    	; 0x1dac <main+0x896>
				{
					prev_state = DAH;
    1d22:	83 e0       	ldi	r24, 0x03	; 3
    1d24:	80 93 6e 01 	sts	0x016E, r24
					cur_state = DITDELAY;
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + dit_length;
    1d2e:	80 91 6f 01 	lds	r24, 0x016F
    1d32:	90 91 70 01 	lds	r25, 0x0170
    1d36:	9c 01       	movw	r18, r24
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	80 91 64 01 	lds	r24, 0x0164
    1d40:	90 91 65 01 	lds	r25, 0x0165
    1d44:	a0 91 66 01 	lds	r26, 0x0166
    1d48:	b0 91 67 01 	lds	r27, 0x0167
    1d4c:	82 0f       	add	r24, r18
    1d4e:	93 1f       	adc	r25, r19
    1d50:	a4 1f       	adc	r26, r20
    1d52:	b5 1f       	adc	r27, r21
    1d54:	80 93 c6 01 	sts	0x01C6, r24
    1d58:	90 93 c7 01 	sts	0x01C7, r25
    1d5c:	a0 93 c8 01 	sts	0x01C8, r26
    1d60:	b0 93 c9 01 	sts	0x01C9, r27
					mute_start = cur_timer;
    1d64:	80 91 64 01 	lds	r24, 0x0164
    1d68:	90 91 65 01 	lds	r25, 0x0165
    1d6c:	a0 91 66 01 	lds	r26, 0x0166
    1d70:	b0 91 67 01 	lds	r27, 0x0167
    1d74:	80 93 d5 01 	sts	0x01D5, r24
    1d78:	90 93 d6 01 	sts	0x01D6, r25
    1d7c:	a0 93 d7 01 	sts	0x01D7, r26
    1d80:	b0 93 d8 01 	sts	0x01D8, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1d84:	80 91 c6 01 	lds	r24, 0x01C6
    1d88:	90 91 c7 01 	lds	r25, 0x01C7
    1d8c:	a0 91 c8 01 	lds	r26, 0x01C8
    1d90:	b0 91 c9 01 	lds	r27, 0x01C9
    1d94:	8c 59       	subi	r24, 0x9C	; 156
    1d96:	9f 4f       	sbci	r25, 0xFF	; 255
    1d98:	af 4f       	sbci	r26, 0xFF	; 255
    1d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9c:	80 93 ca 01 	sts	0x01CA, r24
    1da0:	90 93 cb 01 	sts	0x01CB, r25
    1da4:	a0 93 cc 01 	sts	0x01CC, r26
    1da8:	b0 93 cd 01 	sts	0x01CD, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    1dac:	80 91 ce 01 	lds	r24, 0x01CE
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	39 f4       	brne	.+14     	; 0x1dc2 <main+0x8ac>
    1db4:	80 91 a3 01 	lds	r24, 0x01A3
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	19 f4       	brne	.+6      	; 0x1dc2 <main+0x8ac>
					next_state = DIT;
    1dbc:	82 e0       	ldi	r24, 0x02	; 2
    1dbe:	80 93 a3 01 	sts	0x01A3, r24

				break;
    1dc2:	62 c1       	rjmp	.+708    	; 0x2088 <main+0xb72>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    1dc4:	20 91 64 01 	lds	r18, 0x0164
    1dc8:	30 91 65 01 	lds	r19, 0x0165
    1dcc:	40 91 66 01 	lds	r20, 0x0166
    1dd0:	50 91 67 01 	lds	r21, 0x0167
    1dd4:	80 91 c6 01 	lds	r24, 0x01C6
    1dd8:	90 91 c7 01 	lds	r25, 0x01C7
    1ddc:	a0 91 c8 01 	lds	r26, 0x01C8
    1de0:	b0 91 c9 01 	lds	r27, 0x01C9
    1de4:	82 17       	cp	r24, r18
    1de6:	93 07       	cpc	r25, r19
    1de8:	a4 07       	cpc	r26, r20
    1dea:	b5 07       	cpc	r27, r21
    1dec:	08 f0       	brcs	.+2      	; 0x1df0 <main+0x8da>
    1dee:	e2 c0       	rjmp	.+452    	; 0x1fb4 <main+0xa9e>
				{
					if(next_state == DIT)
    1df0:	80 91 a3 01 	lds	r24, 0x01A3
    1df4:	82 30       	cpi	r24, 0x02	; 2
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <main+0x8e4>
    1df8:	5d c0       	rjmp	.+186    	; 0x1eb4 <main+0x99e>
					{
						cur_state = DIT;
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer + dit_length;
    1e00:	80 91 6f 01 	lds	r24, 0x016F
    1e04:	90 91 70 01 	lds	r25, 0x0170
    1e08:	9c 01       	movw	r18, r24
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	80 91 64 01 	lds	r24, 0x0164
    1e12:	90 91 65 01 	lds	r25, 0x0165
    1e16:	a0 91 66 01 	lds	r26, 0x0166
    1e1a:	b0 91 67 01 	lds	r27, 0x0167
    1e1e:	82 0f       	add	r24, r18
    1e20:	93 1f       	adc	r25, r19
    1e22:	a4 1f       	adc	r26, r20
    1e24:	b5 1f       	adc	r27, r21
    1e26:	80 93 c6 01 	sts	0x01C6, r24
    1e2a:	90 93 c7 01 	sts	0x01C7, r25
    1e2e:	a0 93 c8 01 	sts	0x01C8, r26
    1e32:	b0 93 c9 01 	sts	0x01C9, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1e36:	80 91 64 01 	lds	r24, 0x0164
    1e3a:	90 91 65 01 	lds	r25, 0x0165
    1e3e:	a0 91 66 01 	lds	r26, 0x0166
    1e42:	b0 91 67 01 	lds	r27, 0x0167
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	a1 1d       	adc	r26, r1
    1e4a:	b1 1d       	adc	r27, r1
    1e4c:	80 93 a4 01 	sts	0x01A4, r24
    1e50:	90 93 a5 01 	sts	0x01A5, r25
    1e54:	a0 93 a6 01 	sts	0x01A6, r26
    1e58:	b0 93 a7 01 	sts	0x01A7, r27
						tx_end = cur_state_end;
    1e5c:	80 91 c6 01 	lds	r24, 0x01C6
    1e60:	90 91 c7 01 	lds	r25, 0x01C7
    1e64:	a0 91 c8 01 	lds	r26, 0x01C8
    1e68:	b0 91 c9 01 	lds	r27, 0x01C9
    1e6c:	80 93 db 01 	sts	0x01DB, r24
    1e70:	90 93 dc 01 	sts	0x01DC, r25
    1e74:	a0 93 dd 01 	sts	0x01DD, r26
    1e78:	b0 93 de 01 	sts	0x01DE, r27
						mute_start = cur_timer;
    1e7c:	80 91 64 01 	lds	r24, 0x0164
    1e80:	90 91 65 01 	lds	r25, 0x0165
    1e84:	a0 91 66 01 	lds	r26, 0x0166
    1e88:	b0 91 67 01 	lds	r27, 0x0167
    1e8c:	80 93 d5 01 	sts	0x01D5, r24
    1e90:	90 93 d6 01 	sts	0x01D6, r25
    1e94:	a0 93 d7 01 	sts	0x01D7, r26
    1e98:	b0 93 d8 01 	sts	0x01D8, r27
						mute_end = UINT32_MAX;
    1e9c:	8f ef       	ldi	r24, 0xFF	; 255
    1e9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	80 93 ca 01 	sts	0x01CA, r24
    1ea6:	90 93 cb 01 	sts	0x01CB, r25
    1eaa:	a0 93 cc 01 	sts	0x01CC, r26
    1eae:	b0 93 cd 01 	sts	0x01CD, r27
    1eb2:	7a c0       	rjmp	.+244    	; 0x1fa8 <main+0xa92>
					}
					else if(next_state == DAH)
    1eb4:	80 91 a3 01 	lds	r24, 0x01A3
    1eb8:	83 30       	cpi	r24, 0x03	; 3
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <main+0x9a8>
    1ebc:	62 c0       	rjmp	.+196    	; 0x1f82 <main+0xa6c>
					{
						cur_state = DAH;
    1ebe:	83 e0       	ldi	r24, 0x03	; 3
    1ec0:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer + (dit_length * 3);
    1ec4:	20 91 6f 01 	lds	r18, 0x016F
    1ec8:	30 91 70 01 	lds	r19, 0x0170
    1ecc:	c9 01       	movw	r24, r18
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	82 0f       	add	r24, r18
    1ed4:	93 1f       	adc	r25, r19
    1ed6:	9c 01       	movw	r18, r24
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	80 91 64 01 	lds	r24, 0x0164
    1ee0:	90 91 65 01 	lds	r25, 0x0165
    1ee4:	a0 91 66 01 	lds	r26, 0x0166
    1ee8:	b0 91 67 01 	lds	r27, 0x0167
    1eec:	82 0f       	add	r24, r18
    1eee:	93 1f       	adc	r25, r19
    1ef0:	a4 1f       	adc	r26, r20
    1ef2:	b5 1f       	adc	r27, r21
    1ef4:	80 93 c6 01 	sts	0x01C6, r24
    1ef8:	90 93 c7 01 	sts	0x01C7, r25
    1efc:	a0 93 c8 01 	sts	0x01C8, r26
    1f00:	b0 93 c9 01 	sts	0x01C9, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1f04:	80 91 64 01 	lds	r24, 0x0164
    1f08:	90 91 65 01 	lds	r25, 0x0165
    1f0c:	a0 91 66 01 	lds	r26, 0x0166
    1f10:	b0 91 67 01 	lds	r27, 0x0167
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	a1 1d       	adc	r26, r1
    1f18:	b1 1d       	adc	r27, r1
    1f1a:	80 93 a4 01 	sts	0x01A4, r24
    1f1e:	90 93 a5 01 	sts	0x01A5, r25
    1f22:	a0 93 a6 01 	sts	0x01A6, r26
    1f26:	b0 93 a7 01 	sts	0x01A7, r27
						tx_end = cur_state_end;
    1f2a:	80 91 c6 01 	lds	r24, 0x01C6
    1f2e:	90 91 c7 01 	lds	r25, 0x01C7
    1f32:	a0 91 c8 01 	lds	r26, 0x01C8
    1f36:	b0 91 c9 01 	lds	r27, 0x01C9
    1f3a:	80 93 db 01 	sts	0x01DB, r24
    1f3e:	90 93 dc 01 	sts	0x01DC, r25
    1f42:	a0 93 dd 01 	sts	0x01DD, r26
    1f46:	b0 93 de 01 	sts	0x01DE, r27
						mute_start = cur_timer;
    1f4a:	80 91 64 01 	lds	r24, 0x0164
    1f4e:	90 91 65 01 	lds	r25, 0x0165
    1f52:	a0 91 66 01 	lds	r26, 0x0166
    1f56:	b0 91 67 01 	lds	r27, 0x0167
    1f5a:	80 93 d5 01 	sts	0x01D5, r24
    1f5e:	90 93 d6 01 	sts	0x01D6, r25
    1f62:	a0 93 d7 01 	sts	0x01D7, r26
    1f66:	b0 93 d8 01 	sts	0x01D8, r27
						mute_end = UINT32_MAX;
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	9f ef       	ldi	r25, 0xFF	; 255
    1f6e:	dc 01       	movw	r26, r24
    1f70:	80 93 ca 01 	sts	0x01CA, r24
    1f74:	90 93 cb 01 	sts	0x01CB, r25
    1f78:	a0 93 cc 01 	sts	0x01CC, r26
    1f7c:	b0 93 cd 01 	sts	0x01CD, r27
    1f80:	13 c0       	rjmp	.+38     	; 0x1fa8 <main+0xa92>
					}
					else
					{
						cur_state = IDLE;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	80 93 c0 01 	sts	0x01C0, r24
						cur_state_end = cur_timer;
    1f88:	80 91 64 01 	lds	r24, 0x0164
    1f8c:	90 91 65 01 	lds	r25, 0x0165
    1f90:	a0 91 66 01 	lds	r26, 0x0166
    1f94:	b0 91 67 01 	lds	r27, 0x0167
    1f98:	80 93 c6 01 	sts	0x01C6, r24
    1f9c:	90 93 c7 01 	sts	0x01C7, r25
    1fa0:	a0 93 c8 01 	sts	0x01C8, r26
    1fa4:	b0 93 c9 01 	sts	0x01C9, r27
					}

					prev_state = DITDELAY;
    1fa8:	84 e0       	ldi	r24, 0x04	; 4
    1faa:	80 93 6e 01 	sts	0x016E, r24
					next_state = IDLE;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	80 93 a3 01 	sts	0x01A3, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    1fb4:	80 91 ce 01 	lds	r24, 0x01CE
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	61 f4       	brne	.+24     	; 0x1fd4 <main+0xabe>
    1fbc:	80 91 6e 01 	lds	r24, 0x016E
    1fc0:	83 30       	cpi	r24, 0x03	; 3
    1fc2:	41 f4       	brne	.+16     	; 0x1fd4 <main+0xabe>
    1fc4:	80 91 a3 01 	lds	r24, 0x01A3
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	21 f4       	brne	.+8      	; 0x1fd4 <main+0xabe>
					next_state = DIT;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	80 93 a3 01 	sts	0x01A3, r24
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <main+0xadc>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    1fd4:	80 91 bc 01 	lds	r24, 0x01BC
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	59 f4       	brne	.+22     	; 0x1ff2 <main+0xadc>
    1fdc:	80 91 6e 01 	lds	r24, 0x016E
    1fe0:	82 30       	cpi	r24, 0x02	; 2
    1fe2:	39 f4       	brne	.+14     	; 0x1ff2 <main+0xadc>
    1fe4:	80 91 a3 01 	lds	r24, 0x01A3
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	19 f4       	brne	.+6      	; 0x1ff2 <main+0xadc>
					next_state = DAH;
    1fec:	83 e0       	ldi	r24, 0x03	; 3
    1fee:	80 93 a3 01 	sts	0x01A3, r24

				key_down = FALSE;
    1ff2:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    1ff6:	10 92 36 01 	sts	0x0136, r1
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1ffa:	80 91 d0 01 	lds	r24, 0x01D0
    1ffe:	90 91 d1 01 	lds	r25, 0x01D1
    2002:	a0 91 d2 01 	lds	r26, 0x01D2
    2006:	b0 91 d3 01 	lds	r27, 0x01D3
    200a:	81 3b       	cpi	r24, 0xB1	; 177
    200c:	f6 ef       	ldi	r31, 0xF6	; 246
    200e:	9f 07       	cpc	r25, r31
    2010:	fa ed       	ldi	r31, 0xDA	; 218
    2012:	af 07       	cpc	r26, r31
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	bf 07       	cpc	r27, r31
    2018:	80 f4       	brcc	.+32     	; 0x203a <main+0xb24>
    201a:	80 91 d0 01 	lds	r24, 0x01D0
    201e:	90 91 d1 01 	lds	r25, 0x01D1
    2022:	a0 91 d2 01 	lds	r26, 0x01D2
    2026:	b0 91 d3 01 	lds	r27, 0x01D3
    202a:	80 38       	cpi	r24, 0x80	; 128
    202c:	2f e9       	ldi	r18, 0x9F	; 159
    202e:	92 07       	cpc	r25, r18
    2030:	25 ed       	ldi	r18, 0xD5	; 213
    2032:	a2 07       	cpc	r26, r18
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	b2 07       	cpc	r27, r18
    2038:	18 f4       	brcc	.+6      	; 0x2040 <main+0xb2a>
					mute_on = FALSE;
    203a:	10 92 37 01 	sts	0x0137, r1
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <main+0xb30>
				else
					mute_on = TRUE;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	80 93 37 01 	sts	0x0137, r24
				break;
    2046:	20 c0       	rjmp	.+64     	; 0x2088 <main+0xb72>

			case EXIT:
				key_down = FALSE;
    2048:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    204c:	10 92 36 01 	sts	0x0136, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    2050:	10 92 37 01 	sts	0x0137, r1

				if(cur_timer > cur_state_end)
    2054:	20 91 64 01 	lds	r18, 0x0164
    2058:	30 91 65 01 	lds	r19, 0x0165
    205c:	40 91 66 01 	lds	r20, 0x0166
    2060:	50 91 67 01 	lds	r21, 0x0167
    2064:	80 91 c6 01 	lds	r24, 0x01C6
    2068:	90 91 c7 01 	lds	r25, 0x01C7
    206c:	a0 91 c8 01 	lds	r26, 0x01C8
    2070:	b0 91 c9 01 	lds	r27, 0x01C9
    2074:	82 17       	cp	r24, r18
    2076:	93 07       	cpc	r25, r19
    2078:	a4 07       	cpc	r26, r20
    207a:	b5 07       	cpc	r27, r21
    207c:	18 f4       	brcc	.+6      	; 0x2084 <main+0xb6e>
				{
					cur_state = IDLE;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	80 93 c0 01 	sts	0x01C0, r24
				}
				break;
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <main+0xb72>

			default:
				break;
    2086:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    2088:	4d c7       	rjmp	.+3738   	; 0x2f24 <main+0x1a0e>

		case ANNOUNCE:
			switch(cur_state)
    208a:	80 91 c0 01 	lds	r24, 0x01C0
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	91 05       	cpc	r25, r1
    2096:	44 f4       	brge	.+16     	; 0x20a8 <main+0xb92>
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	91 05       	cpc	r25, r1
    209c:	0c f0       	brlt	.+2      	; 0x20a0 <main+0xb8a>
    209e:	49 c1       	rjmp	.+658    	; 0x2332 <main+0xe1c>
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	91 05       	cpc	r25, r1
    20a4:	31 f0       	breq	.+12     	; 0x20b2 <main+0xb9c>
    20a6:	a1 c1       	rjmp	.+834    	; 0x23ea <main+0xed4>
    20a8:	87 30       	cpi	r24, 0x07	; 7
    20aa:	91 05       	cpc	r25, r1
    20ac:	0c f0       	brlt	.+2      	; 0x20b0 <main+0xb9a>
    20ae:	9d c1       	rjmp	.+826    	; 0x23ea <main+0xed4>
    20b0:	7c c1       	rjmp	.+760    	; 0x23aa <main+0xe94>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    20b2:	20 91 3a 01 	lds	r18, 0x013A
    20b6:	30 91 3b 01 	lds	r19, 0x013B
    20ba:	80 91 d9 01 	lds	r24, 0x01D9
    20be:	90 91 da 01 	lds	r25, 0x01DA
    20c2:	28 17       	cp	r18, r24
    20c4:	39 07       	cpc	r19, r25
    20c6:	c9 f4       	brne	.+50     	; 0x20fa <main+0xbe4>
    20c8:	80 91 3e 01 	lds	r24, 0x013E
    20cc:	88 23       	and	r24, r24
    20ce:	a9 f4       	brne	.+42     	; 0x20fa <main+0xbe4>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    20d0:	80 91 3a 01 	lds	r24, 0x013A
    20d4:	90 91 3b 01 	lds	r25, 0x013B
    20d8:	fc 01       	movw	r30, r24
    20da:	80 81       	ld	r24, Z
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	80 97       	sbiw	r24, 0x20	; 32
    20e2:	88 59       	subi	r24, 0x98	; 152
    20e4:	9f 4f       	sbci	r25, 0xFF	; 255
    20e6:	9b 83       	std	Y+3, r25	; 0x03
    20e8:	8a 83       	std	Y+2, r24	; 0x02
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	fc 01       	movw	r30, r24
    20f0:	14 91       	lpm	r17, Z+
    20f2:	1c 83       	std	Y+4, r17	; 0x04
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	80 93 3e 01 	sts	0x013E, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    20fa:	80 91 3e 01 	lds	r24, 0x013E
    20fe:	88 23       	and	r24, r24
    2100:	09 f4       	brne	.+2      	; 0x2104 <main+0xbee>
    2102:	ce c0       	rjmp	.+412    	; 0x22a0 <main+0xd8a>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2104:	80 91 3e 01 	lds	r24, 0x013E
    2108:	80 38       	cpi	r24, 0x80	; 128
    210a:	29 f0       	breq	.+10     	; 0x2116 <main+0xc00>
    210c:	80 91 3e 01 	lds	r24, 0x013E
    2110:	8f 3f       	cpi	r24, 0xFF	; 255
    2112:	09 f0       	breq	.+2      	; 0x2116 <main+0xc00>
    2114:	79 c0       	rjmp	.+242    	; 0x2208 <main+0xcf2>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    2116:	80 91 3e 01 	lds	r24, 0x013E
    211a:	80 38       	cpi	r24, 0x80	; 128
    211c:	21 f5       	brne	.+72     	; 0x2166 <main+0xc50>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    211e:	20 91 6f 01 	lds	r18, 0x016F
    2122:	30 91 70 01 	lds	r19, 0x0170
    2126:	c9 01       	movw	r24, r18
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	82 0f       	add	r24, r18
    212e:	93 1f       	adc	r25, r19
    2130:	9c 01       	movw	r18, r24
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	80 91 64 01 	lds	r24, 0x0164
    213a:	90 91 65 01 	lds	r25, 0x0165
    213e:	a0 91 66 01 	lds	r26, 0x0166
    2142:	b0 91 67 01 	lds	r27, 0x0167
    2146:	82 0f       	add	r24, r18
    2148:	93 1f       	adc	r25, r19
    214a:	a4 1f       	adc	r26, r20
    214c:	b5 1f       	adc	r27, r21
    214e:	80 93 c6 01 	sts	0x01C6, r24
    2152:	90 93 c7 01 	sts	0x01C7, r25
    2156:	a0 93 c8 01 	sts	0x01C8, r26
    215a:	b0 93 c9 01 	sts	0x01C9, r27
							cur_state = DAHDELAY;
    215e:	85 e0       	ldi	r24, 0x05	; 5
    2160:	80 93 c0 01 	sts	0x01C0, r24
    2164:	27 c0       	rjmp	.+78     	; 0x21b4 <main+0xc9e>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2166:	20 91 6f 01 	lds	r18, 0x016F
    216a:	30 91 70 01 	lds	r19, 0x0170
    216e:	c9 01       	movw	r24, r18
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	82 1b       	sub	r24, r18
    217e:	93 0b       	sbc	r25, r19
    2180:	9c 01       	movw	r18, r24
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	80 91 64 01 	lds	r24, 0x0164
    218a:	90 91 65 01 	lds	r25, 0x0165
    218e:	a0 91 66 01 	lds	r26, 0x0166
    2192:	b0 91 67 01 	lds	r27, 0x0167
    2196:	82 0f       	add	r24, r18
    2198:	93 1f       	adc	r25, r19
    219a:	a4 1f       	adc	r26, r20
    219c:	b5 1f       	adc	r27, r21
    219e:	80 93 c6 01 	sts	0x01C6, r24
    21a2:	90 93 c7 01 	sts	0x01C7, r25
    21a6:	a0 93 c8 01 	sts	0x01C8, r26
    21aa:	b0 93 c9 01 	sts	0x01C9, r27
							cur_state = DAHDELAY;
    21ae:	85 e0       	ldi	r24, 0x05	; 5
    21b0:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    21b4:	80 91 3a 01 	lds	r24, 0x013A
    21b8:	90 91 3b 01 	lds	r25, 0x013B
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	90 93 3b 01 	sts	0x013B, r25
    21c2:	80 93 3a 01 	sts	0x013A, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    21c6:	80 91 3a 01 	lds	r24, 0x013A
    21ca:	90 91 3b 01 	lds	r25, 0x013B
    21ce:	fc 01       	movw	r30, r24
    21d0:	80 81       	ld	r24, Z
    21d2:	88 23       	and	r24, r24
    21d4:	19 f4       	brne	.+6      	; 0x21dc <main+0xcc6>
							cur_character = '\0';
    21d6:	10 92 3e 01 	sts	0x013E, r1
    21da:	15 c0       	rjmp	.+42     	; 0x2206 <main+0xcf0>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    21dc:	80 91 3a 01 	lds	r24, 0x013A
    21e0:	90 91 3b 01 	lds	r25, 0x013B
    21e4:	fc 01       	movw	r30, r24
    21e6:	80 81       	ld	r24, Z
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	80 97       	sbiw	r24, 0x20	; 32
    21ee:	88 59       	subi	r24, 0x98	; 152
    21f0:	9f 4f       	sbci	r25, 0xFF	; 255
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	fc 01       	movw	r30, r24
    21fc:	14 91       	lpm	r17, Z+
    21fe:	1f 83       	std	Y+7, r17	; 0x07
    2200:	8f 81       	ldd	r24, Y+7	; 0x07
    2202:	80 93 3e 01 	sts	0x013E, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2206:	4b c0       	rjmp	.+150    	; 0x229e <main+0xd88>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    2208:	80 91 3e 01 	lds	r24, 0x013E
    220c:	88 23       	and	r24, r24
    220e:	24 f5       	brge	.+72     	; 0x2258 <main+0xd42>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2210:	20 91 6f 01 	lds	r18, 0x016F
    2214:	30 91 70 01 	lds	r19, 0x0170
    2218:	c9 01       	movw	r24, r18
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	82 0f       	add	r24, r18
    2220:	93 1f       	adc	r25, r19
    2222:	9c 01       	movw	r18, r24
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	80 91 64 01 	lds	r24, 0x0164
    222c:	90 91 65 01 	lds	r25, 0x0165
    2230:	a0 91 66 01 	lds	r26, 0x0166
    2234:	b0 91 67 01 	lds	r27, 0x0167
    2238:	82 0f       	add	r24, r18
    223a:	93 1f       	adc	r25, r19
    223c:	a4 1f       	adc	r26, r20
    223e:	b5 1f       	adc	r27, r21
    2240:	80 93 c6 01 	sts	0x01C6, r24
    2244:	90 93 c7 01 	sts	0x01C7, r25
    2248:	a0 93 c8 01 	sts	0x01C8, r26
    224c:	b0 93 c9 01 	sts	0x01C9, r27
							cur_state = DAH;
    2250:	83 e0       	ldi	r24, 0x03	; 3
    2252:	80 93 c0 01 	sts	0x01C0, r24
    2256:	1e c0       	rjmp	.+60     	; 0x2294 <main+0xd7e>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    2258:	80 91 6f 01 	lds	r24, 0x016F
    225c:	90 91 70 01 	lds	r25, 0x0170
    2260:	9c 01       	movw	r18, r24
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	80 91 64 01 	lds	r24, 0x0164
    226a:	90 91 65 01 	lds	r25, 0x0165
    226e:	a0 91 66 01 	lds	r26, 0x0166
    2272:	b0 91 67 01 	lds	r27, 0x0167
    2276:	82 0f       	add	r24, r18
    2278:	93 1f       	adc	r25, r19
    227a:	a4 1f       	adc	r26, r20
    227c:	b5 1f       	adc	r27, r21
    227e:	80 93 c6 01 	sts	0x01C6, r24
    2282:	90 93 c7 01 	sts	0x01C7, r25
    2286:	a0 93 c8 01 	sts	0x01C8, r26
    228a:	b0 93 c9 01 	sts	0x01C9, r27
							cur_state = DIT;
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    2294:	80 91 3e 01 	lds	r24, 0x013E
    2298:	88 0f       	add	r24, r24
    229a:	80 93 3e 01 	sts	0x013E, r24
    229e:	48 c0       	rjmp	.+144    	; 0x2330 <main+0xe1a>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    22a0:	80 91 d9 01 	lds	r24, 0x01D9
    22a4:	90 91 da 01 	lds	r25, 0x01DA
    22a8:	24 e2       	ldi	r18, 0x24	; 36
    22aa:	31 e0       	ldi	r19, 0x01	; 1
    22ac:	b9 01       	movw	r22, r18
    22ae:	41 e0       	ldi	r20, 0x01	; 1
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	0e 94 2f 19 	call	0x325e	; 0x325e <memcpy>
					cur_char_p = announce_buffer;
    22b6:	80 91 d9 01 	lds	r24, 0x01D9
    22ba:	90 91 da 01 	lds	r25, 0x01DA
    22be:	90 93 3b 01 	sts	0x013B, r25
    22c2:	80 93 3a 01 	sts	0x013A, r24
					cur_character = '\0';
    22c6:	10 92 3e 01 	sts	0x013E, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    22ca:	80 91 c3 01 	lds	r24, 0x01C3
    22ce:	90 91 c4 01 	lds	r25, 0x01C4
    22d2:	90 93 b7 01 	sts	0x01B7, r25
    22d6:	80 93 b6 01 	sts	0x01B6, r24
					set_st_freq(st_freq);
    22da:	80 91 b6 01 	lds	r24, 0x01B6
    22de:	90 91 b7 01 	lds	r25, 0x01B7
    22e2:	cc 01       	movw	r24, r24
    22e4:	a0 e0       	ldi	r26, 0x00	; 0
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <set_st_freq>

					wpm = prev_wpm;
    22f0:	80 91 e1 01 	lds	r24, 0x01E1
    22f4:	80 93 d4 01 	sts	0x01D4, r24
					set_wpm(wpm);
    22f8:	80 91 d4 01 	lds	r24, 0x01D4
    22fc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <set_wpm>

					cur_mode = prev_mode;
    2300:	80 91 b4 01 	lds	r24, 0x01B4
    2304:	80 93 9e 01 	sts	0x019E, r24
					cur_state = prev_state;
    2308:	80 91 6e 01 	lds	r24, 0x016E
    230c:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = prev_state_end;
    2310:	80 91 b0 01 	lds	r24, 0x01B0
    2314:	90 91 b1 01 	lds	r25, 0x01B1
    2318:	a0 91 b2 01 	lds	r26, 0x01B2
    231c:	b0 91 b3 01 	lds	r27, 0x01B3
    2320:	80 93 c6 01 	sts	0x01C6, r24
    2324:	90 93 c7 01 	sts	0x01C7, r25
    2328:	a0 93 c8 01 	sts	0x01C8, r26
    232c:	b0 93 c9 01 	sts	0x01C9, r27
				}
				break;
    2330:	5d c0       	rjmp	.+186    	; 0x23ec <main+0xed6>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2332:	20 91 64 01 	lds	r18, 0x0164
    2336:	30 91 65 01 	lds	r19, 0x0165
    233a:	40 91 66 01 	lds	r20, 0x0166
    233e:	50 91 67 01 	lds	r21, 0x0167
    2342:	80 91 c6 01 	lds	r24, 0x01C6
    2346:	90 91 c7 01 	lds	r25, 0x01C7
    234a:	a0 91 c8 01 	lds	r26, 0x01C8
    234e:	b0 91 c9 01 	lds	r27, 0x01C9
    2352:	82 17       	cp	r24, r18
    2354:	93 07       	cpc	r25, r19
    2356:	a4 07       	cpc	r26, r20
    2358:	b5 07       	cpc	r27, r21
    235a:	f0 f4       	brcc	.+60     	; 0x2398 <main+0xe82>
				{
					cur_state_end = cur_timer + dit_length;
    235c:	80 91 6f 01 	lds	r24, 0x016F
    2360:	90 91 70 01 	lds	r25, 0x0170
    2364:	9c 01       	movw	r18, r24
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	50 e0       	ldi	r21, 0x00	; 0
    236a:	80 91 64 01 	lds	r24, 0x0164
    236e:	90 91 65 01 	lds	r25, 0x0165
    2372:	a0 91 66 01 	lds	r26, 0x0166
    2376:	b0 91 67 01 	lds	r27, 0x0167
    237a:	82 0f       	add	r24, r18
    237c:	93 1f       	adc	r25, r19
    237e:	a4 1f       	adc	r26, r20
    2380:	b5 1f       	adc	r27, r21
    2382:	80 93 c6 01 	sts	0x01C6, r24
    2386:	90 93 c7 01 	sts	0x01C7, r25
    238a:	a0 93 c8 01 	sts	0x01C8, r26
    238e:	b0 93 c9 01 	sts	0x01C9, r27
					cur_state = DITDELAY;
    2392:	84 e0       	ldi	r24, 0x04	; 4
    2394:	80 93 c0 01 	sts	0x01C0, r24
				}

				key_down = FALSE;
    2398:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = TRUE;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	80 93 37 01 	sts	0x0137, r24
				break;
    23a8:	21 c0       	rjmp	.+66     	; 0x23ec <main+0xed6>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    23aa:	20 91 64 01 	lds	r18, 0x0164
    23ae:	30 91 65 01 	lds	r19, 0x0165
    23b2:	40 91 66 01 	lds	r20, 0x0166
    23b6:	50 91 67 01 	lds	r21, 0x0167
    23ba:	80 91 c6 01 	lds	r24, 0x01C6
    23be:	90 91 c7 01 	lds	r25, 0x01C7
    23c2:	a0 91 c8 01 	lds	r26, 0x01C8
    23c6:	b0 91 c9 01 	lds	r27, 0x01C9
    23ca:	82 17       	cp	r24, r18
    23cc:	93 07       	cpc	r25, r19
    23ce:	a4 07       	cpc	r26, r20
    23d0:	b5 07       	cpc	r27, r21
    23d2:	18 f4       	brcc	.+6      	; 0x23da <main+0xec4>
					cur_state = IDLE;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	80 93 c0 01 	sts	0x01C0, r24

				key_down = FALSE;
    23da:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    23de:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	80 93 37 01 	sts	0x0137, r24
				break;
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <main+0xed6>

			default:
				break;
    23ea:	00 00       	nop
			}
			break;
    23ec:	9b c5       	rjmp	.+2870   	; 0x2f24 <main+0x1a0e>

		case TUNE:
			switch(cur_state)
    23ee:	80 91 c0 01 	lds	r24, 0x01C0
    23f2:	88 2f       	mov	r24, r24
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	87 30       	cpi	r24, 0x07	; 7
    23f8:	91 05       	cpc	r25, r1
    23fa:	09 f4       	brne	.+2      	; 0x23fe <main+0xee8>
    23fc:	50 c0       	rjmp	.+160    	; 0x249e <main+0xf88>
    23fe:	88 30       	cpi	r24, 0x08	; 8
    2400:	91 05       	cpc	r25, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <main+0xef0>
    2404:	8d c0       	rjmp	.+282    	; 0x2520 <main+0x100a>
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	91 05       	cpc	r25, r1
    240a:	09 f0       	breq	.+2      	; 0x240e <main+0xef8>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    240c:	af c0       	rjmp	.+350    	; 0x256c <main+0x1056>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    240e:	80 91 64 01 	lds	r24, 0x0164
    2412:	90 91 65 01 	lds	r25, 0x0165
    2416:	a0 91 66 01 	lds	r26, 0x0166
    241a:	b0 91 67 01 	lds	r27, 0x0167
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	a1 1d       	adc	r26, r1
    2422:	b1 1d       	adc	r27, r1
    2424:	80 93 a4 01 	sts	0x01A4, r24
    2428:	90 93 a5 01 	sts	0x01A5, r25
    242c:	a0 93 a6 01 	sts	0x01A6, r26
    2430:	b0 93 a7 01 	sts	0x01A7, r27
				tx_end = UINT32_MAX;
    2434:	8f ef       	ldi	r24, 0xFF	; 255
    2436:	9f ef       	ldi	r25, 0xFF	; 255
    2438:	dc 01       	movw	r26, r24
    243a:	80 93 db 01 	sts	0x01DB, r24
    243e:	90 93 dc 01 	sts	0x01DC, r25
    2442:	a0 93 dd 01 	sts	0x01DD, r26
    2446:	b0 93 de 01 	sts	0x01DE, r27
				cur_state_end = UINT32_MAX;
    244a:	8f ef       	ldi	r24, 0xFF	; 255
    244c:	9f ef       	ldi	r25, 0xFF	; 255
    244e:	dc 01       	movw	r26, r24
    2450:	80 93 c6 01 	sts	0x01C6, r24
    2454:	90 93 c7 01 	sts	0x01C7, r25
    2458:	a0 93 c8 01 	sts	0x01C8, r26
    245c:	b0 93 c9 01 	sts	0x01C9, r27
				mute_start = cur_timer;
    2460:	80 91 64 01 	lds	r24, 0x0164
    2464:	90 91 65 01 	lds	r25, 0x0165
    2468:	a0 91 66 01 	lds	r26, 0x0166
    246c:	b0 91 67 01 	lds	r27, 0x0167
    2470:	80 93 d5 01 	sts	0x01D5, r24
    2474:	90 93 d6 01 	sts	0x01D6, r25
    2478:	a0 93 d7 01 	sts	0x01D7, r26
    247c:	b0 93 d8 01 	sts	0x01D8, r27
				mute_end = UINT32_MAX;
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	9f ef       	ldi	r25, 0xFF	; 255
    2484:	dc 01       	movw	r26, r24
    2486:	80 93 ca 01 	sts	0x01CA, r24
    248a:	90 93 cb 01 	sts	0x01CB, r25
    248e:	a0 93 cc 01 	sts	0x01CC, r26
    2492:	b0 93 cd 01 	sts	0x01CD, r27

				cur_state = KEYDOWN;
    2496:	87 e0       	ldi	r24, 0x07	; 7
    2498:	80 93 c0 01 	sts	0x01C0, r24
				break;
    249c:	67 c0       	rjmp	.+206    	; 0x256c <main+0x1056>

			case KEYDOWN:
				key_down = TRUE;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	80 93 38 01 	sts	0x0138, r24
				sidetone_on = TRUE;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 37 01 	sts	0x0137, r24

				if(ANYBUTTON)
    24b0:	80 91 ce 01 	lds	r24, 0x01CE
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	61 f0       	breq	.+24     	; 0x24d0 <main+0xfba>
    24b8:	80 91 bc 01 	lds	r24, 0x01BC
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	41 f0       	breq	.+16     	; 0x24d0 <main+0xfba>
    24c0:	80 91 bf 01 	lds	r24, 0x01BF
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	21 f0       	breq	.+8      	; 0x24d0 <main+0xfba>
    24c8:	80 91 bd 01 	lds	r24, 0x01BD
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	39 f5       	brne	.+78     	; 0x251e <main+0x1008>
				{
					cur_state = ENDKEYDOWN;
    24d0:	88 e0       	ldi	r24, 0x08	; 8
    24d2:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    24d6:	80 91 64 01 	lds	r24, 0x0164
    24da:	90 91 65 01 	lds	r25, 0x0165
    24de:	a0 91 66 01 	lds	r26, 0x0166
    24e2:	b0 91 67 01 	lds	r27, 0x0167
    24e6:	8c 59       	subi	r24, 0x9C	; 156
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	af 4f       	sbci	r26, 0xFF	; 255
    24ec:	bf 4f       	sbci	r27, 0xFF	; 255
    24ee:	80 93 c6 01 	sts	0x01C6, r24
    24f2:	90 93 c7 01 	sts	0x01C7, r25
    24f6:	a0 93 c8 01 	sts	0x01C8, r26
    24fa:	b0 93 c9 01 	sts	0x01C9, r27
					tx_end = cur_timer;
    24fe:	80 91 64 01 	lds	r24, 0x0164
    2502:	90 91 65 01 	lds	r25, 0x0165
    2506:	a0 91 66 01 	lds	r26, 0x0166
    250a:	b0 91 67 01 	lds	r27, 0x0167
    250e:	80 93 db 01 	sts	0x01DB, r24
    2512:	90 93 dc 01 	sts	0x01DC, r25
    2516:	a0 93 dd 01 	sts	0x01DD, r26
    251a:	b0 93 de 01 	sts	0x01DE, r27
				}
				break;
    251e:	26 c0       	rjmp	.+76     	; 0x256c <main+0x1056>

			case ENDKEYDOWN:
				key_down = FALSE;
    2520:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    2524:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	80 93 37 01 	sts	0x0137, r24

				if(cur_timer >= cur_state_end)
    252e:	20 91 64 01 	lds	r18, 0x0164
    2532:	30 91 65 01 	lds	r19, 0x0165
    2536:	40 91 66 01 	lds	r20, 0x0166
    253a:	50 91 67 01 	lds	r21, 0x0167
    253e:	80 91 c6 01 	lds	r24, 0x01C6
    2542:	90 91 c7 01 	lds	r25, 0x01C7
    2546:	a0 91 c8 01 	lds	r26, 0x01C8
    254a:	b0 91 c9 01 	lds	r27, 0x01C9
    254e:	28 17       	cp	r18, r24
    2550:	39 07       	cpc	r19, r25
    2552:	4a 07       	cpc	r20, r26
    2554:	5b 07       	cpc	r21, r27
    2556:	48 f0       	brcs	.+18     	; 0x256a <main+0x1054>
				{
					mute_on = FALSE;
    2558:	10 92 37 01 	sts	0x0137, r1
					cur_state = IDLE;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	80 93 c0 01 	sts	0x01C0, r24
					cur_mode = default_mode;
    2562:	80 91 69 01 	lds	r24, 0x0169
    2566:	80 93 9e 01 	sts	0x019E, r24
				}
				break;
    256a:	00 00       	nop

			default:
				break;
			}
			break;
    256c:	db c4       	rjmp	.+2486   	; 0x2f24 <main+0x1a0e>

		case MENU:
			switch(cur_state)
    256e:	80 91 c0 01 	lds	r24, 0x01C0
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	89 30       	cpi	r24, 0x09	; 9
    2578:	91 05       	cpc	r25, r1
    257a:	91 f0       	breq	.+36     	; 0x25a0 <main+0x108a>
    257c:	8a 30       	cpi	r24, 0x0A	; 10
    257e:	91 05       	cpc	r25, r1
    2580:	09 f4       	brne	.+2      	; 0x2584 <main+0x106e>
    2582:	58 c0       	rjmp	.+176    	; 0x2634 <main+0x111e>
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	91 05       	cpc	r25, r1
    2588:	09 f0       	breq	.+2      	; 0x258c <main+0x1076>
    258a:	98 c1       	rjmp	.+816    	; 0x28bc <main+0x13a6>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	90 93 40 01 	sts	0x0140, r25
    2594:	80 93 3f 01 	sts	0x013F, r24
				cur_state = MENUANNOUNCE;
    2598:	89 e0       	ldi	r24, 0x09	; 9
    259a:	80 93 c0 01 	sts	0x01C0, r24
				break;
    259e:	96 c1       	rjmp	.+812    	; 0x28cc <main+0x13b6>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <malloc>
    25a8:	90 93 42 01 	sts	0x0142, r25
    25ac:	80 93 41 01 	sts	0x0141, r24
				memset(cur_menu, '\0', 2);
    25b0:	80 91 41 01 	lds	r24, 0x0141
    25b4:	90 91 42 01 	lds	r25, 0x0142
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	42 e0       	ldi	r20, 0x02	; 2
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	0e 94 38 19 	call	0x3270	; 0x3270 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    25c4:	80 91 41 01 	lds	r24, 0x0141
    25c8:	90 91 42 01 	lds	r25, 0x0142
    25cc:	20 91 3f 01 	lds	r18, 0x013F
    25d0:	30 91 40 01 	lds	r19, 0x0140
    25d4:	b9 01       	movw	r22, r18
    25d6:	41 e0       	ldi	r20, 0x01	; 1
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	0e 94 2f 19 	call	0x325e	; 0x325e <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    25de:	80 91 64 01 	lds	r24, 0x0164
    25e2:	90 91 65 01 	lds	r25, 0x0165
    25e6:	a0 91 66 01 	lds	r26, 0x0166
    25ea:	b0 91 67 01 	lds	r27, 0x0167
    25ee:	80 56       	subi	r24, 0x60	; 96
    25f0:	90 4f       	sbci	r25, 0xF0	; 240
    25f2:	af 4f       	sbci	r26, 0xFF	; 255
    25f4:	bf 4f       	sbci	r27, 0xFF	; 255
    25f6:	80 93 c6 01 	sts	0x01C6, r24
    25fa:	90 93 c7 01 	sts	0x01C7, r25
    25fe:	a0 93 c8 01 	sts	0x01C8, r26
    2602:	b0 93 c9 01 	sts	0x01C9, r27

				// Set next state
				cur_state = MENUINPUT;
    2606:	8a e0       	ldi	r24, 0x0A	; 10
    2608:	80 93 c0 01 	sts	0x01C0, r24

				// Announce the menu item
				announce(cur_menu, st_freq, wpm);
    260c:	80 91 41 01 	lds	r24, 0x0141
    2610:	90 91 42 01 	lds	r25, 0x0142
    2614:	20 91 b6 01 	lds	r18, 0x01B6
    2618:	30 91 b7 01 	lds	r19, 0x01B7
    261c:	40 91 d4 01 	lds	r20, 0x01D4
    2620:	b9 01       	movw	r22, r18
    2622:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>

				free(cur_menu);
    2626:	80 91 41 01 	lds	r24, 0x0141
    262a:	90 91 42 01 	lds	r25, 0x0142
    262e:	0e 94 96 18 	call	0x312c	; 0x312c <free>
				break;
    2632:	4c c1       	rjmp	.+664    	; 0x28cc <main+0x13b6>

			case MENUINPUT:
				text_buffer = malloc(20);
    2634:	84 e1       	ldi	r24, 0x14	; 20
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <malloc>
    263c:	90 93 3d 01 	sts	0x013D, r25
    2640:	80 93 3c 01 	sts	0x013C, r24
				memset(text_buffer, '\0', 20);
    2644:	80 91 3c 01 	lds	r24, 0x013C
    2648:	90 91 3d 01 	lds	r25, 0x013D
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	44 e1       	ldi	r20, 0x14	; 20
    2652:	50 e0       	ldi	r21, 0x00	; 0
    2654:	0e 94 38 19 	call	0x3270	; 0x3270 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    2658:	20 91 64 01 	lds	r18, 0x0164
    265c:	30 91 65 01 	lds	r19, 0x0165
    2660:	40 91 66 01 	lds	r20, 0x0166
    2664:	50 91 67 01 	lds	r21, 0x0167
    2668:	80 91 c6 01 	lds	r24, 0x01C6
    266c:	90 91 c7 01 	lds	r25, 0x01C7
    2670:	a0 91 c8 01 	lds	r26, 0x01C8
    2674:	b0 91 c9 01 	lds	r27, 0x01C9
    2678:	28 17       	cp	r18, r24
    267a:	39 07       	cpc	r19, r25
    267c:	4a 07       	cpc	r20, r26
    267e:	5b 07       	cpc	r21, r27
    2680:	08 f0       	brcs	.+2      	; 0x2684 <main+0x116e>
    2682:	03 c1       	rjmp	.+518    	; 0x288a <main+0x1374>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    2684:	80 91 bf 01 	lds	r24, 0x01BF
    2688:	81 30       	cpi	r24, 0x01	; 1
    268a:	49 f5       	brne	.+82     	; 0x26de <main+0x11c8>
					{
						debounce(TRUE);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>
						cur_menu_p++;
    2692:	80 91 3f 01 	lds	r24, 0x013F
    2696:	90 91 40 01 	lds	r25, 0x0140
    269a:	01 96       	adiw	r24, 0x01	; 1
    269c:	90 93 40 01 	sts	0x0140, r25
    26a0:	80 93 3f 01 	sts	0x013F, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    26a4:	80 91 3f 01 	lds	r24, 0x013F
    26a8:	90 91 40 01 	lds	r25, 0x0140
    26ac:	fc 01       	movw	r30, r24
    26ae:	80 81       	ld	r24, Z
    26b0:	88 23       	and	r24, r24
    26b2:	89 f4       	brne	.+34     	; 0x26d6 <main+0x11c0>
						{
							cur_state = IDLE;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    26ba:	80 91 69 01 	lds	r24, 0x0169
    26be:	80 93 9e 01 	sts	0x019E, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
    26c2:	20 91 d4 01 	lds	r18, 0x01D4
    26c6:	85 e2       	ldi	r24, 0x25	; 37
    26c8:	91 e0       	ldi	r25, 0x01	; 1
    26ca:	60 e9       	ldi	r22, 0x90	; 144
    26cc:	71 e0       	ldi	r23, 0x01	; 1
    26ce:	42 2f       	mov	r20, r18
    26d0:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    26d4:	ec c0       	rjmp	.+472    	; 0x28ae <main+0x1398>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
						}
						else
							cur_state = MENUANNOUNCE;
    26d6:	89 e0       	ldi	r24, 0x09	; 9
    26d8:	80 93 c0 01 	sts	0x01C0, r24
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    26dc:	e8 c0       	rjmp	.+464    	; 0x28ae <main+0x1398>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    26de:	80 91 bd 01 	lds	r24, 0x01BD
    26e2:	81 30       	cpi	r24, 0x01	; 1
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <main+0x11d2>
    26e6:	e2 c0       	rjmp	.+452    	; 0x28ac <main+0x1396>
					{
						// need to clear the button buffer
						debounce(TRUE);
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <debounce>

						switch(*cur_menu_p)
    26ee:	80 91 3f 01 	lds	r24, 0x013F
    26f2:	90 91 40 01 	lds	r25, 0x0140
    26f6:	fc 01       	movw	r30, r24
    26f8:	80 81       	ld	r24, Z
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	83 35       	cpi	r24, 0x53	; 83
    2700:	91 05       	cpc	r25, r1
    2702:	a1 f0       	breq	.+40     	; 0x272c <main+0x1216>
    2704:	84 35       	cpi	r24, 0x54	; 84
    2706:	91 05       	cpc	r25, r1
    2708:	4c f4       	brge	.+18     	; 0x271c <main+0x1206>
    270a:	8b 34       	cpi	r24, 0x4B	; 75
    270c:	91 05       	cpc	r25, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <main+0x11fc>
    2710:	83 c0       	rjmp	.+262    	; 0x2818 <main+0x1302>
    2712:	82 35       	cpi	r24, 0x52	; 82
    2714:	91 05       	cpc	r25, r1
    2716:	09 f4       	brne	.+2      	; 0x271a <main+0x1204>
    2718:	64 c0       	rjmp	.+200    	; 0x27e2 <main+0x12cc>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    271a:	c9 c0       	rjmp	.+402    	; 0x28ae <main+0x1398>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    271c:	86 35       	cpi	r24, 0x56	; 86
    271e:	91 05       	cpc	r25, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <main+0x120e>
    2722:	70 c0       	rjmp	.+224    	; 0x2804 <main+0x12ee>
    2724:	87 35       	cpi	r24, 0x57	; 87
    2726:	91 05       	cpc	r25, r1
    2728:	21 f1       	breq	.+72     	; 0x2772 <main+0x125c>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    272a:	c1 c0       	rjmp	.+386    	; 0x28ae <main+0x1398>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    272c:	80 91 64 01 	lds	r24, 0x0164
    2730:	90 91 65 01 	lds	r25, 0x0165
    2734:	a0 91 66 01 	lds	r26, 0x0166
    2738:	b0 91 67 01 	lds	r27, 0x0167
    273c:	80 56       	subi	r24, 0x60	; 96
    273e:	90 4f       	sbci	r25, 0xF0	; 240
    2740:	af 4f       	sbci	r26, 0xFF	; 255
    2742:	bf 4f       	sbci	r27, 0xFF	; 255
    2744:	80 93 c6 01 	sts	0x01C6, r24
    2748:	90 93 c7 01 	sts	0x01C7, r25
    274c:	a0 93 c8 01 	sts	0x01C8, r26
    2750:	b0 93 c9 01 	sts	0x01C9, r27
							cur_mode = SETWPM;
    2754:	85 e0       	ldi	r24, 0x05	; 5
    2756:	80 93 9e 01 	sts	0x019E, r24

							announce("R", st_freq, wpm);
    275a:	20 91 b6 01 	lds	r18, 0x01B6
    275e:	30 91 b7 01 	lds	r19, 0x01B7
    2762:	40 91 d4 01 	lds	r20, 0x01D4
    2766:	87 e2       	ldi	r24, 0x27	; 39
    2768:	91 e0       	ldi	r25, 0x01	; 1
    276a:	b9 01       	movw	r22, r18
    276c:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
							break;
    2770:	9e c0       	rjmp	.+316    	; 0x28ae <main+0x1398>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    2778:	80 91 69 01 	lds	r24, 0x0169
    277c:	80 93 9e 01 	sts	0x019E, r24

							sprintf(text_buffer, "%d", wpm);
    2780:	40 91 3c 01 	lds	r20, 0x013C
    2784:	50 91 3d 01 	lds	r21, 0x013D
    2788:	80 91 d4 01 	lds	r24, 0x01D4
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	00 d0       	rcall	.+0      	; 0x2792 <main+0x127c>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <main+0x127e>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <main+0x1280>
    2796:	8d b7       	in	r24, 0x3d	; 61
    2798:	9e b7       	in	r25, 0x3e	; 62
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	fc 01       	movw	r30, r24
    279e:	51 83       	std	Z+1, r21	; 0x01
    27a0:	40 83       	st	Z, r20
    27a2:	49 e2       	ldi	r20, 0x29	; 41
    27a4:	51 e0       	ldi	r21, 0x01	; 1
    27a6:	fc 01       	movw	r30, r24
    27a8:	53 83       	std	Z+3, r21	; 0x03
    27aa:	42 83       	std	Z+2, r20	; 0x02
    27ac:	fc 01       	movw	r30, r24
    27ae:	35 83       	std	Z+5, r19	; 0x05
    27b0:	24 83       	std	Z+4, r18	; 0x04
    27b2:	0e 94 50 19 	call	0x32a0	; 0x32a0 <sprintf>
    27b6:	8d b7       	in	r24, 0x3d	; 61
    27b8:	9e b7       	in	r25, 0x3e	; 62
    27ba:	06 96       	adiw	r24, 0x06	; 6
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	9e bf       	out	0x3e, r25	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq, wpm);
    27c6:	80 91 3c 01 	lds	r24, 0x013C
    27ca:	90 91 3d 01 	lds	r25, 0x013D
    27ce:	20 91 b6 01 	lds	r18, 0x01B6
    27d2:	30 91 b7 01 	lds	r19, 0x01B7
    27d6:	40 91 d4 01 	lds	r20, 0x01D4
    27da:	b9 01       	movw	r22, r18
    27dc:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
							break;
    27e0:	66 c0       	rjmp	.+204    	; 0x28ae <main+0x1398>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    27e2:	10 92 c0 01 	sts	0x01C0, r1
							cur_mode = RECORD;
    27e6:	87 e0       	ldi	r24, 0x07	; 7
    27e8:	80 93 9e 01 	sts	0x019E, r24

							announce("R", st_freq, wpm);
    27ec:	20 91 b6 01 	lds	r18, 0x01B6
    27f0:	30 91 b7 01 	lds	r19, 0x01B7
    27f4:	40 91 d4 01 	lds	r20, 0x01D4
    27f8:	87 e2       	ldi	r24, 0x27	; 39
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	b9 01       	movw	r22, r18
    27fe:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
							break;
    2802:	55 c0       	rjmp	.+170    	; 0x28ae <main+0x1398>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 c0 01 	sts	0x01C0, r24
							cur_mode = default_mode;
    280a:	80 91 69 01 	lds	r24, 0x0169
    280e:	80 93 9e 01 	sts	0x019E, r24

							read_voltage();
    2812:	0e 94 af 06 	call	0xd5e	; 0xd5e <read_voltage>
							break;
    2816:	4b c0       	rjmp	.+150    	; 0x28ae <main+0x1398>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    2818:	80 91 69 01 	lds	r24, 0x0169
    281c:	88 23       	and	r24, r24
    281e:	d9 f4       	brne	.+54     	; 0x2856 <main+0x1340>
							{
								default_mode = SK;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	80 93 69 01 	sts	0x0169, r24
								cur_state = IDLE;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	80 93 c0 01 	sts	0x01C0, r24
								cur_mode = default_mode;
    282c:	80 91 69 01 	lds	r24, 0x0169
    2830:	80 93 9e 01 	sts	0x019E, r24
								eeprom_write_byte(&ee_keyer, FALSE);
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__eewr_byte_m168>

								announce("S", st_freq, wpm);
    283e:	20 91 b6 01 	lds	r18, 0x01B6
    2842:	30 91 b7 01 	lds	r19, 0x01B7
    2846:	40 91 d4 01 	lds	r20, 0x01D4
    284a:	8b e1       	ldi	r24, 0x1B	; 27
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	b9 01       	movw	r22, r18
    2850:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
								cur_mode = default_mode;
								eeprom_write_byte(&ee_keyer, TRUE);

								announce("K", st_freq, wpm);
							}
							break;
    2854:	2c c0       	rjmp	.+88     	; 0x28ae <main+0x1398>

								announce("S", st_freq, wpm);
							}
							else
							{
								default_mode = KEYER;
    2856:	10 92 69 01 	sts	0x0169, r1
								cur_state = IDLE;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	80 93 c0 01 	sts	0x01C0, r24
								cur_mode = default_mode;
    2860:	80 91 69 01 	lds	r24, 0x0169
    2864:	80 93 9e 01 	sts	0x019E, r24
								eeprom_write_byte(&ee_keyer, TRUE);
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__eewr_byte_m168>

								announce("K", st_freq, wpm);
    2872:	20 91 b6 01 	lds	r18, 0x01B6
    2876:	30 91 b7 01 	lds	r19, 0x01B7
    287a:	40 91 d4 01 	lds	r20, 0x01D4
    287e:	8c e2       	ldi	r24, 0x2C	; 44
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	b9 01       	movw	r22, r18
    2884:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
							}
							break;
    2888:	12 c0       	rjmp	.+36     	; 0x28ae <main+0x1398>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	80 93 c0 01 	sts	0x01C0, r24
					cur_mode = default_mode;
    2890:	80 91 69 01 	lds	r24, 0x0169
    2894:	80 93 9e 01 	sts	0x019E, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    2898:	20 91 d4 01 	lds	r18, 0x01D4
    289c:	85 e2       	ldi	r24, 0x25	; 37
    289e:	91 e0       	ldi	r25, 0x01	; 1
    28a0:	60 e9       	ldi	r22, 0x90	; 144
    28a2:	71 e0       	ldi	r23, 0x01	; 1
    28a4:	42 2f       	mov	r20, r18
    28a6:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <main+0x1398>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    28ac:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
				}

				free(text_buffer);
    28ae:	80 91 3c 01 	lds	r24, 0x013C
    28b2:	90 91 3d 01 	lds	r25, 0x013D
    28b6:	0e 94 96 18 	call	0x312c	; 0x312c <free>
				break;
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <main+0x13b6>

			default:
				cur_state = IDLE;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	80 93 c0 01 	sts	0x01C0, r24
				cur_mode = default_mode;
    28c2:	80 91 69 01 	lds	r24, 0x0169
    28c6:	80 93 9e 01 	sts	0x019E, r24
				break;
    28ca:	00 00       	nop
			}
			break;
    28cc:	2b c3       	rjmp	.+1622   	; 0x2f24 <main+0x1a0e>

		case SETWPM:
			if(cur_timer < cur_state_end)
    28ce:	20 91 64 01 	lds	r18, 0x0164
    28d2:	30 91 65 01 	lds	r19, 0x0165
    28d6:	40 91 66 01 	lds	r20, 0x0166
    28da:	50 91 67 01 	lds	r21, 0x0167
    28de:	80 91 c6 01 	lds	r24, 0x01C6
    28e2:	90 91 c7 01 	lds	r25, 0x01C7
    28e6:	a0 91 c8 01 	lds	r26, 0x01C8
    28ea:	b0 91 c9 01 	lds	r27, 0x01C9
    28ee:	28 17       	cp	r18, r24
    28f0:	39 07       	cpc	r19, r25
    28f2:	4a 07       	cpc	r20, r26
    28f4:	5b 07       	cpc	r21, r27
    28f6:	08 f0       	brcs	.+2      	; 0x28fa <main+0x13e4>
    28f8:	63 c0       	rjmp	.+198    	; 0x29c0 <main+0x14aa>
			{
				if(cmd_btn == PRESS)
    28fa:	80 91 bf 01 	lds	r24, 0x01BF
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	69 f5       	brne	.+90     	; 0x295c <main+0x1446>
				{
					if(wpm < MAX_WPM)
    2902:	80 91 d4 01 	lds	r24, 0x01D4
    2906:	88 32       	cpi	r24, 0x28	; 40
    2908:	28 f4       	brcc	.+10     	; 0x2914 <main+0x13fe>
						wpm++;
    290a:	80 91 d4 01 	lds	r24, 0x01D4
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	80 93 d4 01 	sts	0x01D4, r24
					set_wpm(wpm);
    2914:	80 91 d4 01 	lds	r24, 0x01D4
    2918:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    291c:	80 91 64 01 	lds	r24, 0x0164
    2920:	90 91 65 01 	lds	r25, 0x0165
    2924:	a0 91 66 01 	lds	r26, 0x0166
    2928:	b0 91 67 01 	lds	r27, 0x0167
    292c:	80 56       	subi	r24, 0x60	; 96
    292e:	90 4f       	sbci	r25, 0xF0	; 240
    2930:	af 4f       	sbci	r26, 0xFF	; 255
    2932:	bf 4f       	sbci	r27, 0xFF	; 255
    2934:	80 93 c6 01 	sts	0x01C6, r24
    2938:	90 93 c7 01 	sts	0x01C7, r25
    293c:	a0 93 c8 01 	sts	0x01C8, r26
    2940:	b0 93 c9 01 	sts	0x01C9, r27
					announce("I", st_freq, wpm);
    2944:	20 91 b6 01 	lds	r18, 0x01B6
    2948:	30 91 b7 01 	lds	r19, 0x01B7
    294c:	40 91 d4 01 	lds	r20, 0x01D4
    2950:	8e e2       	ldi	r24, 0x2E	; 46
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	b9 01       	movw	r22, r18
    2956:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
    295a:	70 c0       	rjmp	.+224    	; 0x2a3c <main+0x1526>
				}
				else if(msg_btn == PRESS)
    295c:	80 91 bd 01 	lds	r24, 0x01BD
    2960:	81 30       	cpi	r24, 0x01	; 1
    2962:	09 f0       	breq	.+2      	; 0x2966 <main+0x1450>
    2964:	6b c0       	rjmp	.+214    	; 0x2a3c <main+0x1526>
				{
					if(wpm > MIN_WPM)
    2966:	80 91 d4 01 	lds	r24, 0x01D4
    296a:	86 30       	cpi	r24, 0x06	; 6
    296c:	28 f0       	brcs	.+10     	; 0x2978 <main+0x1462>
						wpm--;
    296e:	80 91 d4 01 	lds	r24, 0x01D4
    2972:	81 50       	subi	r24, 0x01	; 1
    2974:	80 93 d4 01 	sts	0x01D4, r24
					set_wpm(wpm);
    2978:	80 91 d4 01 	lds	r24, 0x01D4
    297c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2980:	80 91 64 01 	lds	r24, 0x0164
    2984:	90 91 65 01 	lds	r25, 0x0165
    2988:	a0 91 66 01 	lds	r26, 0x0166
    298c:	b0 91 67 01 	lds	r27, 0x0167
    2990:	80 56       	subi	r24, 0x60	; 96
    2992:	90 4f       	sbci	r25, 0xF0	; 240
    2994:	af 4f       	sbci	r26, 0xFF	; 255
    2996:	bf 4f       	sbci	r27, 0xFF	; 255
    2998:	80 93 c6 01 	sts	0x01C6, r24
    299c:	90 93 c7 01 	sts	0x01C7, r25
    29a0:	a0 93 c8 01 	sts	0x01C8, r26
    29a4:	b0 93 c9 01 	sts	0x01C9, r27
					announce("I", st_freq, wpm);
    29a8:	20 91 b6 01 	lds	r18, 0x01B6
    29ac:	30 91 b7 01 	lds	r19, 0x01B7
    29b0:	40 91 d4 01 	lds	r20, 0x01D4
    29b4:	8e e2       	ldi	r24, 0x2E	; 46
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	b9 01       	movw	r22, r18
    29ba:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
    29be:	3e c0       	rjmp	.+124    	; 0x2a3c <main+0x1526>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_write_byte(&ee_wpm, wpm);
    29c0:	20 91 d4 01 	lds	r18, 0x01D4
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	62 2f       	mov	r22, r18
    29ca:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__eewr_byte_m168>

				cur_state = IDLE;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	80 93 c0 01 	sts	0x01C0, r24
				cur_mode = default_mode;
    29d4:	80 91 69 01 	lds	r24, 0x0169
    29d8:	80 93 9e 01 	sts	0x019E, r24

				sprintf(text_buffer, "%d", wpm);
    29dc:	40 91 3c 01 	lds	r20, 0x013C
    29e0:	50 91 3d 01 	lds	r21, 0x013D
    29e4:	80 91 d4 01 	lds	r24, 0x01D4
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <main+0x14d8>
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <main+0x14da>
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <main+0x14dc>
    29f2:	8d b7       	in	r24, 0x3d	; 61
    29f4:	9e b7       	in	r25, 0x3e	; 62
    29f6:	01 96       	adiw	r24, 0x01	; 1
    29f8:	fc 01       	movw	r30, r24
    29fa:	51 83       	std	Z+1, r21	; 0x01
    29fc:	40 83       	st	Z, r20
    29fe:	49 e2       	ldi	r20, 0x29	; 41
    2a00:	51 e0       	ldi	r21, 0x01	; 1
    2a02:	fc 01       	movw	r30, r24
    2a04:	53 83       	std	Z+3, r21	; 0x03
    2a06:	42 83       	std	Z+2, r20	; 0x02
    2a08:	fc 01       	movw	r30, r24
    2a0a:	35 83       	std	Z+5, r19	; 0x05
    2a0c:	24 83       	std	Z+4, r18	; 0x04
    2a0e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <sprintf>
    2a12:	8d b7       	in	r24, 0x3d	; 61
    2a14:	9e b7       	in	r25, 0x3e	; 62
    2a16:	06 96       	adiw	r24, 0x06	; 6
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	9e bf       	out	0x3e, r25	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq, wpm);
    2a22:	80 91 3c 01 	lds	r24, 0x013C
    2a26:	90 91 3d 01 	lds	r25, 0x013D
    2a2a:	20 91 b6 01 	lds	r18, 0x01B6
    2a2e:	30 91 b7 01 	lds	r19, 0x01B7
    2a32:	40 91 d4 01 	lds	r20, 0x01D4
    2a36:	b9 01       	movw	r22, r18
    2a38:	0e 94 4c 06 	call	0xc98	; 0xc98 <announce>
			}
			break;
    2a3c:	73 c2       	rjmp	.+1254   	; 0x2f24 <main+0x1a0e>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    2a3e:	80 91 ce 01 	lds	r24, 0x01CE
    2a42:	81 30       	cpi	r24, 0x01	; 1
    2a44:	61 f0       	breq	.+24     	; 0x2a5e <main+0x1548>
    2a46:	80 91 bc 01 	lds	r24, 0x01BC
    2a4a:	81 30       	cpi	r24, 0x01	; 1
    2a4c:	41 f0       	breq	.+16     	; 0x2a5e <main+0x1548>
    2a4e:	80 91 bf 01 	lds	r24, 0x01BF
    2a52:	81 30       	cpi	r24, 0x01	; 1
    2a54:	21 f0       	breq	.+8      	; 0x2a5e <main+0x1548>
    2a56:	80 91 bd 01 	lds	r24, 0x01BD
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	e9 f5       	brne	.+122    	; 0x2ad8 <main+0x15c2>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    2a5e:	80 91 d9 01 	lds	r24, 0x01D9
    2a62:	90 91 da 01 	lds	r25, 0x01DA
    2a66:	24 e2       	ldi	r18, 0x24	; 36
    2a68:	31 e0       	ldi	r19, 0x01	; 1
    2a6a:	b9 01       	movw	r22, r18
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	0e 94 2f 19 	call	0x325e	; 0x325e <memcpy>
				cur_char_p = announce_buffer;
    2a74:	80 91 d9 01 	lds	r24, 0x01D9
    2a78:	90 91 da 01 	lds	r25, 0x01DA
    2a7c:	90 93 3b 01 	sts	0x013B, r25
    2a80:	80 93 3a 01 	sts	0x013A, r24
				cur_character = '\0';
    2a84:	10 92 3e 01 	sts	0x013E, r1

				// Set back into previous mode
				mute_end = cur_timer;
    2a88:	80 91 64 01 	lds	r24, 0x0164
    2a8c:	90 91 65 01 	lds	r25, 0x0165
    2a90:	a0 91 66 01 	lds	r26, 0x0166
    2a94:	b0 91 67 01 	lds	r27, 0x0167
    2a98:	80 93 ca 01 	sts	0x01CA, r24
    2a9c:	90 93 cb 01 	sts	0x01CB, r25
    2aa0:	a0 93 cc 01 	sts	0x01CC, r26
    2aa4:	b0 93 cd 01 	sts	0x01CD, r27
				cur_mode = prev_mode;
    2aa8:	80 91 b4 01 	lds	r24, 0x01B4
    2aac:	80 93 9e 01 	sts	0x019E, r24
				cur_state = prev_state;
    2ab0:	80 91 6e 01 	lds	r24, 0x016E
    2ab4:	80 93 c0 01 	sts	0x01C0, r24
				cur_state_end = prev_state_end;
    2ab8:	80 91 b0 01 	lds	r24, 0x01B0
    2abc:	90 91 b1 01 	lds	r25, 0x01B1
    2ac0:	a0 91 b2 01 	lds	r26, 0x01B2
    2ac4:	b0 91 b3 01 	lds	r27, 0x01B3
    2ac8:	80 93 c6 01 	sts	0x01C6, r24
    2acc:	90 93 c7 01 	sts	0x01C7, r25
    2ad0:	a0 93 c8 01 	sts	0x01C8, r26
    2ad4:	b0 93 c9 01 	sts	0x01C9, r27
			}

			switch(cur_state)
    2ad8:	80 91 c0 01 	lds	r24, 0x01C0
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	84 30       	cpi	r24, 0x04	; 4
    2ae2:	91 05       	cpc	r25, r1
    2ae4:	44 f4       	brge	.+16     	; 0x2af6 <main+0x15e0>
    2ae6:	82 30       	cpi	r24, 0x02	; 2
    2ae8:	91 05       	cpc	r25, r1
    2aea:	0c f0       	brlt	.+2      	; 0x2aee <main+0x15d8>
    2aec:	bb c1       	rjmp	.+886    	; 0x2e64 <main+0x194e>
    2aee:	81 30       	cpi	r24, 0x01	; 1
    2af0:	91 05       	cpc	r25, r1
    2af2:	31 f0       	breq	.+12     	; 0x2b00 <main+0x15ea>
    2af4:	14 c2       	rjmp	.+1064   	; 0x2f1e <main+0x1a08>
    2af6:	87 30       	cpi	r24, 0x07	; 7
    2af8:	91 05       	cpc	r25, r1
    2afa:	0c f0       	brlt	.+2      	; 0x2afe <main+0x15e8>
    2afc:	10 c2       	rjmp	.+1056   	; 0x2f1e <main+0x1a08>
    2afe:	ef c1       	rjmp	.+990    	; 0x2ede <main+0x19c8>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2b00:	20 91 3a 01 	lds	r18, 0x013A
    2b04:	30 91 3b 01 	lds	r19, 0x013B
    2b08:	80 91 d9 01 	lds	r24, 0x01D9
    2b0c:	90 91 da 01 	lds	r25, 0x01DA
    2b10:	28 17       	cp	r18, r24
    2b12:	39 07       	cpc	r19, r25
    2b14:	c9 f4       	brne	.+50     	; 0x2b48 <main+0x1632>
    2b16:	80 91 3e 01 	lds	r24, 0x013E
    2b1a:	88 23       	and	r24, r24
    2b1c:	a9 f4       	brne	.+42     	; 0x2b48 <main+0x1632>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2b1e:	80 91 3a 01 	lds	r24, 0x013A
    2b22:	90 91 3b 01 	lds	r25, 0x013B
    2b26:	fc 01       	movw	r30, r24
    2b28:	80 81       	ld	r24, Z
    2b2a:	88 2f       	mov	r24, r24
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	80 97       	sbiw	r24, 0x20	; 32
    2b30:	88 59       	subi	r24, 0x98	; 152
    2b32:	9f 4f       	sbci	r25, 0xFF	; 255
    2b34:	99 87       	std	Y+9, r25	; 0x09
    2b36:	88 87       	std	Y+8, r24	; 0x08
    2b38:	88 85       	ldd	r24, Y+8	; 0x08
    2b3a:	99 85       	ldd	r25, Y+9	; 0x09
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	14 91       	lpm	r17, Z+
    2b40:	1a 87       	std	Y+10, r17	; 0x0a
    2b42:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b44:	80 93 3e 01 	sts	0x013E, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2b48:	80 91 3e 01 	lds	r24, 0x013E
    2b4c:	88 23       	and	r24, r24
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <main+0x163c>
    2b50:	4b c1       	rjmp	.+662    	; 0x2de8 <main+0x18d2>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2b52:	80 91 3e 01 	lds	r24, 0x013E
    2b56:	80 38       	cpi	r24, 0x80	; 128
    2b58:	29 f0       	breq	.+10     	; 0x2b64 <main+0x164e>
    2b5a:	80 91 3e 01 	lds	r24, 0x013E
    2b5e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <main+0x164e>
    2b62:	79 c0       	rjmp	.+242    	; 0x2c56 <main+0x1740>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    2b64:	80 91 3e 01 	lds	r24, 0x013E
    2b68:	80 38       	cpi	r24, 0x80	; 128
    2b6a:	21 f5       	brne	.+72     	; 0x2bb4 <main+0x169e>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2b6c:	20 91 6f 01 	lds	r18, 0x016F
    2b70:	30 91 70 01 	lds	r19, 0x0170
    2b74:	c9 01       	movw	r24, r18
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	82 0f       	add	r24, r18
    2b7c:	93 1f       	adc	r25, r19
    2b7e:	9c 01       	movw	r18, r24
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	80 91 64 01 	lds	r24, 0x0164
    2b88:	90 91 65 01 	lds	r25, 0x0165
    2b8c:	a0 91 66 01 	lds	r26, 0x0166
    2b90:	b0 91 67 01 	lds	r27, 0x0167
    2b94:	82 0f       	add	r24, r18
    2b96:	93 1f       	adc	r25, r19
    2b98:	a4 1f       	adc	r26, r20
    2b9a:	b5 1f       	adc	r27, r21
    2b9c:	80 93 c6 01 	sts	0x01C6, r24
    2ba0:	90 93 c7 01 	sts	0x01C7, r25
    2ba4:	a0 93 c8 01 	sts	0x01C8, r26
    2ba8:	b0 93 c9 01 	sts	0x01C9, r27
							cur_state = DAHDELAY;
    2bac:	85 e0       	ldi	r24, 0x05	; 5
    2bae:	80 93 c0 01 	sts	0x01C0, r24
    2bb2:	27 c0       	rjmp	.+78     	; 0x2c02 <main+0x16ec>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2bb4:	20 91 6f 01 	lds	r18, 0x016F
    2bb8:	30 91 70 01 	lds	r19, 0x0170
    2bbc:	c9 01       	movw	r24, r18
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	88 0f       	add	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	82 1b       	sub	r24, r18
    2bcc:	93 0b       	sbc	r25, r19
    2bce:	9c 01       	movw	r18, r24
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	80 91 64 01 	lds	r24, 0x0164
    2bd8:	90 91 65 01 	lds	r25, 0x0165
    2bdc:	a0 91 66 01 	lds	r26, 0x0166
    2be0:	b0 91 67 01 	lds	r27, 0x0167
    2be4:	82 0f       	add	r24, r18
    2be6:	93 1f       	adc	r25, r19
    2be8:	a4 1f       	adc	r26, r20
    2bea:	b5 1f       	adc	r27, r21
    2bec:	80 93 c6 01 	sts	0x01C6, r24
    2bf0:	90 93 c7 01 	sts	0x01C7, r25
    2bf4:	a0 93 c8 01 	sts	0x01C8, r26
    2bf8:	b0 93 c9 01 	sts	0x01C9, r27
							cur_state = DAHDELAY;
    2bfc:	85 e0       	ldi	r24, 0x05	; 5
    2bfe:	80 93 c0 01 	sts	0x01C0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    2c02:	80 91 3a 01 	lds	r24, 0x013A
    2c06:	90 91 3b 01 	lds	r25, 0x013B
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	90 93 3b 01 	sts	0x013B, r25
    2c10:	80 93 3a 01 	sts	0x013A, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2c14:	80 91 3a 01 	lds	r24, 0x013A
    2c18:	90 91 3b 01 	lds	r25, 0x013B
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	19 f4       	brne	.+6      	; 0x2c2a <main+0x1714>
							cur_character = '\0';
    2c24:	10 92 3e 01 	sts	0x013E, r1
    2c28:	15 c0       	rjmp	.+42     	; 0x2c54 <main+0x173e>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2c2a:	80 91 3a 01 	lds	r24, 0x013A
    2c2e:	90 91 3b 01 	lds	r25, 0x013B
    2c32:	fc 01       	movw	r30, r24
    2c34:	80 81       	ld	r24, Z
    2c36:	88 2f       	mov	r24, r24
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	80 97       	sbiw	r24, 0x20	; 32
    2c3c:	88 59       	subi	r24, 0x98	; 152
    2c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c40:	9c 87       	std	Y+12, r25	; 0x0c
    2c42:	8b 87       	std	Y+11, r24	; 0x0b
    2c44:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c46:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c48:	fc 01       	movw	r30, r24
    2c4a:	14 91       	lpm	r17, Z+
    2c4c:	1d 87       	std	Y+13, r17	; 0x0d
    2c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c50:	80 93 3e 01 	sts	0x013E, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2c54:	c8 c0       	rjmp	.+400    	; 0x2de6 <main+0x18d0>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    2c56:	80 91 3e 01 	lds	r24, 0x013E
    2c5a:	88 23       	and	r24, r24
    2c5c:	0c f0       	brlt	.+2      	; 0x2c60 <main+0x174a>
    2c5e:	62 c0       	rjmp	.+196    	; 0x2d24 <main+0x180e>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2c60:	20 91 6f 01 	lds	r18, 0x016F
    2c64:	30 91 70 01 	lds	r19, 0x0170
    2c68:	c9 01       	movw	r24, r18
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	82 0f       	add	r24, r18
    2c70:	93 1f       	adc	r25, r19
    2c72:	9c 01       	movw	r18, r24
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	80 91 64 01 	lds	r24, 0x0164
    2c7c:	90 91 65 01 	lds	r25, 0x0165
    2c80:	a0 91 66 01 	lds	r26, 0x0166
    2c84:	b0 91 67 01 	lds	r27, 0x0167
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	a4 1f       	adc	r26, r20
    2c8e:	b5 1f       	adc	r27, r21
    2c90:	80 93 c6 01 	sts	0x01C6, r24
    2c94:	90 93 c7 01 	sts	0x01C7, r25
    2c98:	a0 93 c8 01 	sts	0x01C8, r26
    2c9c:	b0 93 c9 01 	sts	0x01C9, r27
							cur_state = DAH;
    2ca0:	83 e0       	ldi	r24, 0x03	; 3
    2ca2:	80 93 c0 01 	sts	0x01C0, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2ca6:	80 91 64 01 	lds	r24, 0x0164
    2caa:	90 91 65 01 	lds	r25, 0x0165
    2cae:	a0 91 66 01 	lds	r26, 0x0166
    2cb2:	b0 91 67 01 	lds	r27, 0x0167
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	a1 1d       	adc	r26, r1
    2cba:	b1 1d       	adc	r27, r1
    2cbc:	80 93 a4 01 	sts	0x01A4, r24
    2cc0:	90 93 a5 01 	sts	0x01A5, r25
    2cc4:	a0 93 a6 01 	sts	0x01A6, r26
    2cc8:	b0 93 a7 01 	sts	0x01A7, r27
							tx_end = cur_state_end;
    2ccc:	80 91 c6 01 	lds	r24, 0x01C6
    2cd0:	90 91 c7 01 	lds	r25, 0x01C7
    2cd4:	a0 91 c8 01 	lds	r26, 0x01C8
    2cd8:	b0 91 c9 01 	lds	r27, 0x01C9
    2cdc:	80 93 db 01 	sts	0x01DB, r24
    2ce0:	90 93 dc 01 	sts	0x01DC, r25
    2ce4:	a0 93 dd 01 	sts	0x01DD, r26
    2ce8:	b0 93 de 01 	sts	0x01DE, r27
							mute_start = cur_timer;
    2cec:	80 91 64 01 	lds	r24, 0x0164
    2cf0:	90 91 65 01 	lds	r25, 0x0165
    2cf4:	a0 91 66 01 	lds	r26, 0x0166
    2cf8:	b0 91 67 01 	lds	r27, 0x0167
    2cfc:	80 93 d5 01 	sts	0x01D5, r24
    2d00:	90 93 d6 01 	sts	0x01D6, r25
    2d04:	a0 93 d7 01 	sts	0x01D7, r26
    2d08:	b0 93 d8 01 	sts	0x01D8, r27
							mute_end = UINT32_MAX;
    2d0c:	8f ef       	ldi	r24, 0xFF	; 255
    2d0e:	9f ef       	ldi	r25, 0xFF	; 255
    2d10:	dc 01       	movw	r26, r24
    2d12:	80 93 ca 01 	sts	0x01CA, r24
    2d16:	90 93 cb 01 	sts	0x01CB, r25
    2d1a:	a0 93 cc 01 	sts	0x01CC, r26
    2d1e:	b0 93 cd 01 	sts	0x01CD, r27
    2d22:	5c c0       	rjmp	.+184    	; 0x2ddc <main+0x18c6>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    2d24:	80 91 6f 01 	lds	r24, 0x016F
    2d28:	90 91 70 01 	lds	r25, 0x0170
    2d2c:	9c 01       	movw	r18, r24
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	50 e0       	ldi	r21, 0x00	; 0
    2d32:	80 91 64 01 	lds	r24, 0x0164
    2d36:	90 91 65 01 	lds	r25, 0x0165
    2d3a:	a0 91 66 01 	lds	r26, 0x0166
    2d3e:	b0 91 67 01 	lds	r27, 0x0167
    2d42:	82 0f       	add	r24, r18
    2d44:	93 1f       	adc	r25, r19
    2d46:	a4 1f       	adc	r26, r20
    2d48:	b5 1f       	adc	r27, r21
    2d4a:	80 93 c6 01 	sts	0x01C6, r24
    2d4e:	90 93 c7 01 	sts	0x01C7, r25
    2d52:	a0 93 c8 01 	sts	0x01C8, r26
    2d56:	b0 93 c9 01 	sts	0x01C9, r27
							cur_state = DIT;
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	80 93 c0 01 	sts	0x01C0, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2d60:	80 91 64 01 	lds	r24, 0x0164
    2d64:	90 91 65 01 	lds	r25, 0x0165
    2d68:	a0 91 66 01 	lds	r26, 0x0166
    2d6c:	b0 91 67 01 	lds	r27, 0x0167
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	a1 1d       	adc	r26, r1
    2d74:	b1 1d       	adc	r27, r1
    2d76:	80 93 a4 01 	sts	0x01A4, r24
    2d7a:	90 93 a5 01 	sts	0x01A5, r25
    2d7e:	a0 93 a6 01 	sts	0x01A6, r26
    2d82:	b0 93 a7 01 	sts	0x01A7, r27
							tx_end = cur_state_end;
    2d86:	80 91 c6 01 	lds	r24, 0x01C6
    2d8a:	90 91 c7 01 	lds	r25, 0x01C7
    2d8e:	a0 91 c8 01 	lds	r26, 0x01C8
    2d92:	b0 91 c9 01 	lds	r27, 0x01C9
    2d96:	80 93 db 01 	sts	0x01DB, r24
    2d9a:	90 93 dc 01 	sts	0x01DC, r25
    2d9e:	a0 93 dd 01 	sts	0x01DD, r26
    2da2:	b0 93 de 01 	sts	0x01DE, r27
							mute_start = cur_timer;
    2da6:	80 91 64 01 	lds	r24, 0x0164
    2daa:	90 91 65 01 	lds	r25, 0x0165
    2dae:	a0 91 66 01 	lds	r26, 0x0166
    2db2:	b0 91 67 01 	lds	r27, 0x0167
    2db6:	80 93 d5 01 	sts	0x01D5, r24
    2dba:	90 93 d6 01 	sts	0x01D6, r25
    2dbe:	a0 93 d7 01 	sts	0x01D7, r26
    2dc2:	b0 93 d8 01 	sts	0x01D8, r27
							mute_end = UINT32_MAX;
    2dc6:	8f ef       	ldi	r24, 0xFF	; 255
    2dc8:	9f ef       	ldi	r25, 0xFF	; 255
    2dca:	dc 01       	movw	r26, r24
    2dcc:	80 93 ca 01 	sts	0x01CA, r24
    2dd0:	90 93 cb 01 	sts	0x01CB, r25
    2dd4:	a0 93 cc 01 	sts	0x01CC, r26
    2dd8:	b0 93 cd 01 	sts	0x01CD, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    2ddc:	80 91 3e 01 	lds	r24, 0x013E
    2de0:	88 0f       	add	r24, r24
    2de2:	80 93 3e 01 	sts	0x013E, r24
    2de6:	3d c0       	rjmp	.+122    	; 0x2e62 <main+0x194c>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2de8:	80 91 d9 01 	lds	r24, 0x01D9
    2dec:	90 91 da 01 	lds	r25, 0x01DA
    2df0:	24 e2       	ldi	r18, 0x24	; 36
    2df2:	31 e0       	ldi	r19, 0x01	; 1
    2df4:	b9 01       	movw	r22, r18
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	50 e0       	ldi	r21, 0x00	; 0
    2dfa:	0e 94 2f 19 	call	0x325e	; 0x325e <memcpy>
					cur_char_p = announce_buffer;
    2dfe:	80 91 d9 01 	lds	r24, 0x01D9
    2e02:	90 91 da 01 	lds	r25, 0x01DA
    2e06:	90 93 3b 01 	sts	0x013B, r25
    2e0a:	80 93 3a 01 	sts	0x013A, r24
					cur_character = '\0';
    2e0e:	10 92 3e 01 	sts	0x013E, r1

					// Set back into previous mode
					mute_end = cur_timer;
    2e12:	80 91 64 01 	lds	r24, 0x0164
    2e16:	90 91 65 01 	lds	r25, 0x0165
    2e1a:	a0 91 66 01 	lds	r26, 0x0166
    2e1e:	b0 91 67 01 	lds	r27, 0x0167
    2e22:	80 93 ca 01 	sts	0x01CA, r24
    2e26:	90 93 cb 01 	sts	0x01CB, r25
    2e2a:	a0 93 cc 01 	sts	0x01CC, r26
    2e2e:	b0 93 cd 01 	sts	0x01CD, r27
					cur_mode = prev_mode;
    2e32:	80 91 b4 01 	lds	r24, 0x01B4
    2e36:	80 93 9e 01 	sts	0x019E, r24
					cur_state = prev_state;
    2e3a:	80 91 6e 01 	lds	r24, 0x016E
    2e3e:	80 93 c0 01 	sts	0x01C0, r24
					cur_state_end = prev_state_end;
    2e42:	80 91 b0 01 	lds	r24, 0x01B0
    2e46:	90 91 b1 01 	lds	r25, 0x01B1
    2e4a:	a0 91 b2 01 	lds	r26, 0x01B2
    2e4e:	b0 91 b3 01 	lds	r27, 0x01B3
    2e52:	80 93 c6 01 	sts	0x01C6, r24
    2e56:	90 93 c7 01 	sts	0x01C7, r25
    2e5a:	a0 93 c8 01 	sts	0x01C8, r26
    2e5e:	b0 93 c9 01 	sts	0x01C9, r27
				}
				break;
    2e62:	5e c0       	rjmp	.+188    	; 0x2f20 <main+0x1a0a>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2e64:	20 91 64 01 	lds	r18, 0x0164
    2e68:	30 91 65 01 	lds	r19, 0x0165
    2e6c:	40 91 66 01 	lds	r20, 0x0166
    2e70:	50 91 67 01 	lds	r21, 0x0167
    2e74:	80 91 c6 01 	lds	r24, 0x01C6
    2e78:	90 91 c7 01 	lds	r25, 0x01C7
    2e7c:	a0 91 c8 01 	lds	r26, 0x01C8
    2e80:	b0 91 c9 01 	lds	r27, 0x01C9
    2e84:	82 17       	cp	r24, r18
    2e86:	93 07       	cpc	r25, r19
    2e88:	a4 07       	cpc	r26, r20
    2e8a:	b5 07       	cpc	r27, r21
    2e8c:	f0 f4       	brcc	.+60     	; 0x2eca <main+0x19b4>
				{
					cur_state_end = cur_timer + dit_length;
    2e8e:	80 91 6f 01 	lds	r24, 0x016F
    2e92:	90 91 70 01 	lds	r25, 0x0170
    2e96:	9c 01       	movw	r18, r24
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	50 e0       	ldi	r21, 0x00	; 0
    2e9c:	80 91 64 01 	lds	r24, 0x0164
    2ea0:	90 91 65 01 	lds	r25, 0x0165
    2ea4:	a0 91 66 01 	lds	r26, 0x0166
    2ea8:	b0 91 67 01 	lds	r27, 0x0167
    2eac:	82 0f       	add	r24, r18
    2eae:	93 1f       	adc	r25, r19
    2eb0:	a4 1f       	adc	r26, r20
    2eb2:	b5 1f       	adc	r27, r21
    2eb4:	80 93 c6 01 	sts	0x01C6, r24
    2eb8:	90 93 c7 01 	sts	0x01C7, r25
    2ebc:	a0 93 c8 01 	sts	0x01C8, r26
    2ec0:	b0 93 c9 01 	sts	0x01C9, r27
					cur_state = DITDELAY;
    2ec4:	84 e0       	ldi	r24, 0x04	; 4
    2ec6:	80 93 c0 01 	sts	0x01C0, r24
				}

				key_down = TRUE;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	80 93 38 01 	sts	0x0138, r24
				sidetone_on = TRUE;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	80 93 36 01 	sts	0x0136, r24
				mute_on = TRUE;
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	80 93 37 01 	sts	0x0137, r24
				break;
    2edc:	21 c0       	rjmp	.+66     	; 0x2f20 <main+0x1a0a>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    2ede:	20 91 64 01 	lds	r18, 0x0164
    2ee2:	30 91 65 01 	lds	r19, 0x0165
    2ee6:	40 91 66 01 	lds	r20, 0x0166
    2eea:	50 91 67 01 	lds	r21, 0x0167
    2eee:	80 91 c6 01 	lds	r24, 0x01C6
    2ef2:	90 91 c7 01 	lds	r25, 0x01C7
    2ef6:	a0 91 c8 01 	lds	r26, 0x01C8
    2efa:	b0 91 c9 01 	lds	r27, 0x01C9
    2efe:	82 17       	cp	r24, r18
    2f00:	93 07       	cpc	r25, r19
    2f02:	a4 07       	cpc	r26, r20
    2f04:	b5 07       	cpc	r27, r21
    2f06:	18 f4       	brcc	.+6      	; 0x2f0e <main+0x19f8>
					cur_state = IDLE;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	80 93 c0 01 	sts	0x01C0, r24

				key_down = FALSE;
    2f0e:	10 92 38 01 	sts	0x0138, r1
				sidetone_on = FALSE;
    2f12:	10 92 36 01 	sts	0x0136, r1
				mute_on = TRUE;
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	80 93 37 01 	sts	0x0137, r24
				break;
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <main+0x1a0a>

			default:
				break;
    2f1e:	00 00       	nop
			}
			break;
    2f20:	01 c0       	rjmp	.+2      	; 0x2f24 <main+0x1a0e>
				break;
			}
			break;
		*/
		default:
			break;
    2f22:	00 00       	nop
		} // END switch(cur_mode)

	}
    2f24:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <main+0xca>

00002f28 <__mulsi3>:
    2f28:	62 9f       	mul	r22, r18
    2f2a:	d0 01       	movw	r26, r0
    2f2c:	73 9f       	mul	r23, r19
    2f2e:	f0 01       	movw	r30, r0
    2f30:	82 9f       	mul	r24, r18
    2f32:	e0 0d       	add	r30, r0
    2f34:	f1 1d       	adc	r31, r1
    2f36:	64 9f       	mul	r22, r20
    2f38:	e0 0d       	add	r30, r0
    2f3a:	f1 1d       	adc	r31, r1
    2f3c:	92 9f       	mul	r25, r18
    2f3e:	f0 0d       	add	r31, r0
    2f40:	83 9f       	mul	r24, r19
    2f42:	f0 0d       	add	r31, r0
    2f44:	74 9f       	mul	r23, r20
    2f46:	f0 0d       	add	r31, r0
    2f48:	65 9f       	mul	r22, r21
    2f4a:	f0 0d       	add	r31, r0
    2f4c:	99 27       	eor	r25, r25
    2f4e:	72 9f       	mul	r23, r18
    2f50:	b0 0d       	add	r27, r0
    2f52:	e1 1d       	adc	r30, r1
    2f54:	f9 1f       	adc	r31, r25
    2f56:	63 9f       	mul	r22, r19
    2f58:	b0 0d       	add	r27, r0
    2f5a:	e1 1d       	adc	r30, r1
    2f5c:	f9 1f       	adc	r31, r25
    2f5e:	bd 01       	movw	r22, r26
    2f60:	cf 01       	movw	r24, r30
    2f62:	11 24       	eor	r1, r1
    2f64:	08 95       	ret

00002f66 <__udivmodhi4>:
    2f66:	aa 1b       	sub	r26, r26
    2f68:	bb 1b       	sub	r27, r27
    2f6a:	51 e1       	ldi	r21, 0x11	; 17
    2f6c:	07 c0       	rjmp	.+14     	; 0x2f7c <__udivmodhi4_ep>

00002f6e <__udivmodhi4_loop>:
    2f6e:	aa 1f       	adc	r26, r26
    2f70:	bb 1f       	adc	r27, r27
    2f72:	a6 17       	cp	r26, r22
    2f74:	b7 07       	cpc	r27, r23
    2f76:	10 f0       	brcs	.+4      	; 0x2f7c <__udivmodhi4_ep>
    2f78:	a6 1b       	sub	r26, r22
    2f7a:	b7 0b       	sbc	r27, r23

00002f7c <__udivmodhi4_ep>:
    2f7c:	88 1f       	adc	r24, r24
    2f7e:	99 1f       	adc	r25, r25
    2f80:	5a 95       	dec	r21
    2f82:	a9 f7       	brne	.-22     	; 0x2f6e <__udivmodhi4_loop>
    2f84:	80 95       	com	r24
    2f86:	90 95       	com	r25
    2f88:	bc 01       	movw	r22, r24
    2f8a:	cd 01       	movw	r24, r26
    2f8c:	08 95       	ret

00002f8e <__divmodhi4>:
    2f8e:	97 fb       	bst	r25, 7
    2f90:	09 2e       	mov	r0, r25
    2f92:	07 26       	eor	r0, r23
    2f94:	0a d0       	rcall	.+20     	; 0x2faa <__divmodhi4_neg1>
    2f96:	77 fd       	sbrc	r23, 7
    2f98:	04 d0       	rcall	.+8      	; 0x2fa2 <__divmodhi4_neg2>
    2f9a:	e5 df       	rcall	.-54     	; 0x2f66 <__udivmodhi4>
    2f9c:	06 d0       	rcall	.+12     	; 0x2faa <__divmodhi4_neg1>
    2f9e:	00 20       	and	r0, r0
    2fa0:	1a f4       	brpl	.+6      	; 0x2fa8 <__divmodhi4_exit>

00002fa2 <__divmodhi4_neg2>:
    2fa2:	70 95       	com	r23
    2fa4:	61 95       	neg	r22
    2fa6:	7f 4f       	sbci	r23, 0xFF	; 255

00002fa8 <__divmodhi4_exit>:
    2fa8:	08 95       	ret

00002faa <__divmodhi4_neg1>:
    2faa:	f6 f7       	brtc	.-4      	; 0x2fa8 <__divmodhi4_exit>
    2fac:	90 95       	com	r25
    2fae:	81 95       	neg	r24
    2fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb2:	08 95       	ret

00002fb4 <__udivmodsi4>:
    2fb4:	a1 e2       	ldi	r26, 0x21	; 33
    2fb6:	1a 2e       	mov	r1, r26
    2fb8:	aa 1b       	sub	r26, r26
    2fba:	bb 1b       	sub	r27, r27
    2fbc:	fd 01       	movw	r30, r26
    2fbe:	0d c0       	rjmp	.+26     	; 0x2fda <__udivmodsi4_ep>

00002fc0 <__udivmodsi4_loop>:
    2fc0:	aa 1f       	adc	r26, r26
    2fc2:	bb 1f       	adc	r27, r27
    2fc4:	ee 1f       	adc	r30, r30
    2fc6:	ff 1f       	adc	r31, r31
    2fc8:	a2 17       	cp	r26, r18
    2fca:	b3 07       	cpc	r27, r19
    2fcc:	e4 07       	cpc	r30, r20
    2fce:	f5 07       	cpc	r31, r21
    2fd0:	20 f0       	brcs	.+8      	; 0x2fda <__udivmodsi4_ep>
    2fd2:	a2 1b       	sub	r26, r18
    2fd4:	b3 0b       	sbc	r27, r19
    2fd6:	e4 0b       	sbc	r30, r20
    2fd8:	f5 0b       	sbc	r31, r21

00002fda <__udivmodsi4_ep>:
    2fda:	66 1f       	adc	r22, r22
    2fdc:	77 1f       	adc	r23, r23
    2fde:	88 1f       	adc	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	1a 94       	dec	r1
    2fe4:	69 f7       	brne	.-38     	; 0x2fc0 <__udivmodsi4_loop>
    2fe6:	60 95       	com	r22
    2fe8:	70 95       	com	r23
    2fea:	80 95       	com	r24
    2fec:	90 95       	com	r25
    2fee:	9b 01       	movw	r18, r22
    2ff0:	ac 01       	movw	r20, r24
    2ff2:	bd 01       	movw	r22, r26
    2ff4:	cf 01       	movw	r24, r30
    2ff6:	08 95       	ret

00002ff8 <malloc>:
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	82 30       	cpi	r24, 0x02	; 2
    2ffe:	91 05       	cpc	r25, r1
    3000:	10 f4       	brcc	.+4      	; 0x3006 <malloc+0xe>
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	e0 91 e4 01 	lds	r30, 0x01E4
    300a:	f0 91 e5 01 	lds	r31, 0x01E5
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	26 c0       	rjmp	.+76     	; 0x3064 <malloc+0x6c>
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	68 17       	cp	r22, r24
    301e:	79 07       	cpc	r23, r25
    3020:	e0 f0       	brcs	.+56     	; 0x305a <malloc+0x62>
    3022:	68 17       	cp	r22, r24
    3024:	79 07       	cpc	r23, r25
    3026:	81 f4       	brne	.+32     	; 0x3048 <malloc+0x50>
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	21 15       	cp	r18, r1
    302e:	31 05       	cpc	r19, r1
    3030:	31 f0       	breq	.+12     	; 0x303e <malloc+0x46>
    3032:	d9 01       	movw	r26, r18
    3034:	13 96       	adiw	r26, 0x03	; 3
    3036:	9c 93       	st	X, r25
    3038:	8e 93       	st	-X, r24
    303a:	12 97       	sbiw	r26, 0x02	; 2
    303c:	2b c0       	rjmp	.+86     	; 0x3094 <malloc+0x9c>
    303e:	90 93 e5 01 	sts	0x01E5, r25
    3042:	80 93 e4 01 	sts	0x01E4, r24
    3046:	26 c0       	rjmp	.+76     	; 0x3094 <malloc+0x9c>
    3048:	41 15       	cp	r20, r1
    304a:	51 05       	cpc	r21, r1
    304c:	19 f0       	breq	.+6      	; 0x3054 <malloc+0x5c>
    304e:	64 17       	cp	r22, r20
    3050:	75 07       	cpc	r23, r21
    3052:	18 f4       	brcc	.+6      	; 0x305a <malloc+0x62>
    3054:	ab 01       	movw	r20, r22
    3056:	e9 01       	movw	r28, r18
    3058:	df 01       	movw	r26, r30
    305a:	9f 01       	movw	r18, r30
    305c:	72 81       	ldd	r23, Z+2	; 0x02
    305e:	63 81       	ldd	r22, Z+3	; 0x03
    3060:	e7 2f       	mov	r30, r23
    3062:	f6 2f       	mov	r31, r22
    3064:	30 97       	sbiw	r30, 0x00	; 0
    3066:	c1 f6       	brne	.-80     	; 0x3018 <malloc+0x20>
    3068:	41 15       	cp	r20, r1
    306a:	51 05       	cpc	r21, r1
    306c:	01 f1       	breq	.+64     	; 0x30ae <malloc+0xb6>
    306e:	48 1b       	sub	r20, r24
    3070:	59 0b       	sbc	r21, r25
    3072:	44 30       	cpi	r20, 0x04	; 4
    3074:	51 05       	cpc	r21, r1
    3076:	80 f4       	brcc	.+32     	; 0x3098 <malloc+0xa0>
    3078:	12 96       	adiw	r26, 0x02	; 2
    307a:	8d 91       	ld	r24, X+
    307c:	9c 91       	ld	r25, X
    307e:	13 97       	sbiw	r26, 0x03	; 3
    3080:	20 97       	sbiw	r28, 0x00	; 0
    3082:	19 f0       	breq	.+6      	; 0x308a <malloc+0x92>
    3084:	9b 83       	std	Y+3, r25	; 0x03
    3086:	8a 83       	std	Y+2, r24	; 0x02
    3088:	04 c0       	rjmp	.+8      	; 0x3092 <malloc+0x9a>
    308a:	90 93 e5 01 	sts	0x01E5, r25
    308e:	80 93 e4 01 	sts	0x01E4, r24
    3092:	fd 01       	movw	r30, r26
    3094:	32 96       	adiw	r30, 0x02	; 2
    3096:	46 c0       	rjmp	.+140    	; 0x3124 <malloc+0x12c>
    3098:	fd 01       	movw	r30, r26
    309a:	e4 0f       	add	r30, r20
    309c:	f5 1f       	adc	r31, r21
    309e:	81 93       	st	Z+, r24
    30a0:	91 93       	st	Z+, r25
    30a2:	42 50       	subi	r20, 0x02	; 2
    30a4:	50 40       	sbci	r21, 0x00	; 0
    30a6:	11 96       	adiw	r26, 0x01	; 1
    30a8:	5c 93       	st	X, r21
    30aa:	4e 93       	st	-X, r20
    30ac:	3b c0       	rjmp	.+118    	; 0x3124 <malloc+0x12c>
    30ae:	20 91 e2 01 	lds	r18, 0x01E2
    30b2:	30 91 e3 01 	lds	r19, 0x01E3
    30b6:	21 15       	cp	r18, r1
    30b8:	31 05       	cpc	r19, r1
    30ba:	41 f4       	brne	.+16     	; 0x30cc <malloc+0xd4>
    30bc:	20 91 32 01 	lds	r18, 0x0132
    30c0:	30 91 33 01 	lds	r19, 0x0133
    30c4:	30 93 e3 01 	sts	0x01E3, r19
    30c8:	20 93 e2 01 	sts	0x01E2, r18
    30cc:	20 91 34 01 	lds	r18, 0x0134
    30d0:	30 91 35 01 	lds	r19, 0x0135
    30d4:	21 15       	cp	r18, r1
    30d6:	31 05       	cpc	r19, r1
    30d8:	41 f4       	brne	.+16     	; 0x30ea <malloc+0xf2>
    30da:	2d b7       	in	r18, 0x3d	; 61
    30dc:	3e b7       	in	r19, 0x3e	; 62
    30de:	40 91 30 01 	lds	r20, 0x0130
    30e2:	50 91 31 01 	lds	r21, 0x0131
    30e6:	24 1b       	sub	r18, r20
    30e8:	35 0b       	sbc	r19, r21
    30ea:	e0 91 e2 01 	lds	r30, 0x01E2
    30ee:	f0 91 e3 01 	lds	r31, 0x01E3
    30f2:	e2 17       	cp	r30, r18
    30f4:	f3 07       	cpc	r31, r19
    30f6:	a0 f4       	brcc	.+40     	; 0x3120 <malloc+0x128>
    30f8:	2e 1b       	sub	r18, r30
    30fa:	3f 0b       	sbc	r19, r31
    30fc:	28 17       	cp	r18, r24
    30fe:	39 07       	cpc	r19, r25
    3100:	78 f0       	brcs	.+30     	; 0x3120 <malloc+0x128>
    3102:	ac 01       	movw	r20, r24
    3104:	4e 5f       	subi	r20, 0xFE	; 254
    3106:	5f 4f       	sbci	r21, 0xFF	; 255
    3108:	24 17       	cp	r18, r20
    310a:	35 07       	cpc	r19, r21
    310c:	48 f0       	brcs	.+18     	; 0x3120 <malloc+0x128>
    310e:	4e 0f       	add	r20, r30
    3110:	5f 1f       	adc	r21, r31
    3112:	50 93 e3 01 	sts	0x01E3, r21
    3116:	40 93 e2 01 	sts	0x01E2, r20
    311a:	81 93       	st	Z+, r24
    311c:	91 93       	st	Z+, r25
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <malloc+0x12c>
    3120:	e0 e0       	ldi	r30, 0x00	; 0
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	cf 01       	movw	r24, r30
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	08 95       	ret

0000312c <free>:
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	09 f4       	brne	.+2      	; 0x3136 <free+0xa>
    3134:	91 c0       	rjmp	.+290    	; 0x3258 <free+0x12c>
    3136:	fc 01       	movw	r30, r24
    3138:	32 97       	sbiw	r30, 0x02	; 2
    313a:	13 82       	std	Z+3, r1	; 0x03
    313c:	12 82       	std	Z+2, r1	; 0x02
    313e:	60 91 e4 01 	lds	r22, 0x01E4
    3142:	70 91 e5 01 	lds	r23, 0x01E5
    3146:	61 15       	cp	r22, r1
    3148:	71 05       	cpc	r23, r1
    314a:	81 f4       	brne	.+32     	; 0x316c <free+0x40>
    314c:	20 81       	ld	r18, Z
    314e:	31 81       	ldd	r19, Z+1	; 0x01
    3150:	28 0f       	add	r18, r24
    3152:	39 1f       	adc	r19, r25
    3154:	80 91 e2 01 	lds	r24, 0x01E2
    3158:	90 91 e3 01 	lds	r25, 0x01E3
    315c:	82 17       	cp	r24, r18
    315e:	93 07       	cpc	r25, r19
    3160:	99 f5       	brne	.+102    	; 0x31c8 <free+0x9c>
    3162:	f0 93 e3 01 	sts	0x01E3, r31
    3166:	e0 93 e2 01 	sts	0x01E2, r30
    316a:	76 c0       	rjmp	.+236    	; 0x3258 <free+0x12c>
    316c:	db 01       	movw	r26, r22
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <free+0x4c>
    3174:	cd 01       	movw	r24, r26
    3176:	d9 01       	movw	r26, r18
    3178:	ae 17       	cp	r26, r30
    317a:	bf 07       	cpc	r27, r31
    317c:	48 f4       	brcc	.+18     	; 0x3190 <free+0x64>
    317e:	12 96       	adiw	r26, 0x02	; 2
    3180:	2d 91       	ld	r18, X+
    3182:	3c 91       	ld	r19, X
    3184:	13 97       	sbiw	r26, 0x03	; 3
    3186:	21 15       	cp	r18, r1
    3188:	31 05       	cpc	r19, r1
    318a:	a1 f7       	brne	.-24     	; 0x3174 <free+0x48>
    318c:	cd 01       	movw	r24, r26
    318e:	21 c0       	rjmp	.+66     	; 0x31d2 <free+0xa6>
    3190:	b3 83       	std	Z+3, r27	; 0x03
    3192:	a2 83       	std	Z+2, r26	; 0x02
    3194:	ef 01       	movw	r28, r30
    3196:	49 91       	ld	r20, Y+
    3198:	59 91       	ld	r21, Y+
    319a:	9e 01       	movw	r18, r28
    319c:	24 0f       	add	r18, r20
    319e:	35 1f       	adc	r19, r21
    31a0:	a2 17       	cp	r26, r18
    31a2:	b3 07       	cpc	r27, r19
    31a4:	79 f4       	brne	.+30     	; 0x31c4 <free+0x98>
    31a6:	2d 91       	ld	r18, X+
    31a8:	3c 91       	ld	r19, X
    31aa:	11 97       	sbiw	r26, 0x01	; 1
    31ac:	24 0f       	add	r18, r20
    31ae:	35 1f       	adc	r19, r21
    31b0:	2e 5f       	subi	r18, 0xFE	; 254
    31b2:	3f 4f       	sbci	r19, 0xFF	; 255
    31b4:	31 83       	std	Z+1, r19	; 0x01
    31b6:	20 83       	st	Z, r18
    31b8:	12 96       	adiw	r26, 0x02	; 2
    31ba:	2d 91       	ld	r18, X+
    31bc:	3c 91       	ld	r19, X
    31be:	13 97       	sbiw	r26, 0x03	; 3
    31c0:	33 83       	std	Z+3, r19	; 0x03
    31c2:	22 83       	std	Z+2, r18	; 0x02
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	29 f4       	brne	.+10     	; 0x31d2 <free+0xa6>
    31c8:	f0 93 e5 01 	sts	0x01E5, r31
    31cc:	e0 93 e4 01 	sts	0x01E4, r30
    31d0:	43 c0       	rjmp	.+134    	; 0x3258 <free+0x12c>
    31d2:	dc 01       	movw	r26, r24
    31d4:	13 96       	adiw	r26, 0x03	; 3
    31d6:	fc 93       	st	X, r31
    31d8:	ee 93       	st	-X, r30
    31da:	12 97       	sbiw	r26, 0x02	; 2
    31dc:	4d 91       	ld	r20, X+
    31de:	5d 91       	ld	r21, X+
    31e0:	a4 0f       	add	r26, r20
    31e2:	b5 1f       	adc	r27, r21
    31e4:	ea 17       	cp	r30, r26
    31e6:	fb 07       	cpc	r31, r27
    31e8:	69 f4       	brne	.+26     	; 0x3204 <free+0xd8>
    31ea:	20 81       	ld	r18, Z
    31ec:	31 81       	ldd	r19, Z+1	; 0x01
    31ee:	24 0f       	add	r18, r20
    31f0:	35 1f       	adc	r19, r21
    31f2:	2e 5f       	subi	r18, 0xFE	; 254
    31f4:	3f 4f       	sbci	r19, 0xFF	; 255
    31f6:	ec 01       	movw	r28, r24
    31f8:	39 83       	std	Y+1, r19	; 0x01
    31fa:	28 83       	st	Y, r18
    31fc:	22 81       	ldd	r18, Z+2	; 0x02
    31fe:	33 81       	ldd	r19, Z+3	; 0x03
    3200:	3b 83       	std	Y+3, r19	; 0x03
    3202:	2a 83       	std	Y+2, r18	; 0x02
    3204:	e0 e0       	ldi	r30, 0x00	; 0
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	02 c0       	rjmp	.+4      	; 0x320e <free+0xe2>
    320a:	fb 01       	movw	r30, r22
    320c:	bc 01       	movw	r22, r24
    320e:	db 01       	movw	r26, r22
    3210:	12 96       	adiw	r26, 0x02	; 2
    3212:	8d 91       	ld	r24, X+
    3214:	9c 91       	ld	r25, X
    3216:	13 97       	sbiw	r26, 0x03	; 3
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	b9 f7       	brne	.-18     	; 0x320a <free+0xde>
    321c:	9b 01       	movw	r18, r22
    321e:	2e 5f       	subi	r18, 0xFE	; 254
    3220:	3f 4f       	sbci	r19, 0xFF	; 255
    3222:	8d 91       	ld	r24, X+
    3224:	9c 91       	ld	r25, X
    3226:	11 97       	sbiw	r26, 0x01	; 1
    3228:	82 0f       	add	r24, r18
    322a:	93 1f       	adc	r25, r19
    322c:	40 91 e2 01 	lds	r20, 0x01E2
    3230:	50 91 e3 01 	lds	r21, 0x01E3
    3234:	48 17       	cp	r20, r24
    3236:	59 07       	cpc	r21, r25
    3238:	79 f4       	brne	.+30     	; 0x3258 <free+0x12c>
    323a:	30 97       	sbiw	r30, 0x00	; 0
    323c:	29 f4       	brne	.+10     	; 0x3248 <free+0x11c>
    323e:	10 92 e5 01 	sts	0x01E5, r1
    3242:	10 92 e4 01 	sts	0x01E4, r1
    3246:	02 c0       	rjmp	.+4      	; 0x324c <free+0x120>
    3248:	13 82       	std	Z+3, r1	; 0x03
    324a:	12 82       	std	Z+2, r1	; 0x02
    324c:	22 50       	subi	r18, 0x02	; 2
    324e:	30 40       	sbci	r19, 0x00	; 0
    3250:	30 93 e3 01 	sts	0x01E3, r19
    3254:	20 93 e2 01 	sts	0x01E2, r18
    3258:	df 91       	pop	r29
    325a:	cf 91       	pop	r28
    325c:	08 95       	ret

0000325e <memcpy>:
    325e:	fb 01       	movw	r30, r22
    3260:	dc 01       	movw	r26, r24
    3262:	02 c0       	rjmp	.+4      	; 0x3268 <memcpy+0xa>
    3264:	01 90       	ld	r0, Z+
    3266:	0d 92       	st	X+, r0
    3268:	41 50       	subi	r20, 0x01	; 1
    326a:	50 40       	sbci	r21, 0x00	; 0
    326c:	d8 f7       	brcc	.-10     	; 0x3264 <memcpy+0x6>
    326e:	08 95       	ret

00003270 <memset>:
    3270:	dc 01       	movw	r26, r24
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <memset+0x6>
    3274:	6d 93       	st	X+, r22
    3276:	41 50       	subi	r20, 0x01	; 1
    3278:	50 40       	sbci	r21, 0x00	; 0
    327a:	e0 f7       	brcc	.-8      	; 0x3274 <memset+0x4>
    327c:	08 95       	ret

0000327e <strcpy>:
    327e:	fb 01       	movw	r30, r22
    3280:	dc 01       	movw	r26, r24
    3282:	01 90       	ld	r0, Z+
    3284:	0d 92       	st	X+, r0
    3286:	00 20       	and	r0, r0
    3288:	e1 f7       	brne	.-8      	; 0x3282 <strcpy+0x4>
    328a:	08 95       	ret

0000328c <strupr>:
    328c:	dc 01       	movw	r26, r24
    328e:	6c 91       	ld	r22, X
    3290:	61 56       	subi	r22, 0x61	; 97
    3292:	6a 31       	cpi	r22, 0x1A	; 26
    3294:	08 f0       	brcs	.+2      	; 0x3298 <strupr+0xc>
    3296:	60 5e       	subi	r22, 0xE0	; 224
    3298:	6f 5b       	subi	r22, 0xBF	; 191
    329a:	6d 93       	st	X+, r22
    329c:	c1 f7       	brne	.-16     	; 0x328e <strupr+0x2>
    329e:	08 95       	ret

000032a0 <sprintf>:
    32a0:	ae e0       	ldi	r26, 0x0E	; 14
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e6 e5       	ldi	r30, 0x56	; 86
    32a6:	f9 e1       	ldi	r31, 0x19	; 25
    32a8:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__prologue_saves__+0x1c>
    32ac:	0d 89       	ldd	r16, Y+21	; 0x15
    32ae:	1e 89       	ldd	r17, Y+22	; 0x16
    32b0:	86 e0       	ldi	r24, 0x06	; 6
    32b2:	8c 83       	std	Y+4, r24	; 0x04
    32b4:	1a 83       	std	Y+2, r17	; 0x02
    32b6:	09 83       	std	Y+1, r16	; 0x01
    32b8:	8f ef       	ldi	r24, 0xFF	; 255
    32ba:	9f e7       	ldi	r25, 0x7F	; 127
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
    32c0:	9e 01       	movw	r18, r28
    32c2:	27 5e       	subi	r18, 0xE7	; 231
    32c4:	3f 4f       	sbci	r19, 0xFF	; 255
    32c6:	ce 01       	movw	r24, r28
    32c8:	01 96       	adiw	r24, 0x01	; 1
    32ca:	6f 89       	ldd	r22, Y+23	; 0x17
    32cc:	78 8d       	ldd	r23, Y+24	; 0x18
    32ce:	a9 01       	movw	r20, r18
    32d0:	0e 94 73 19 	call	0x32e6	; 0x32e6 <vfprintf>
    32d4:	ef 81       	ldd	r30, Y+7	; 0x07
    32d6:	f8 85       	ldd	r31, Y+8	; 0x08
    32d8:	e0 0f       	add	r30, r16
    32da:	f1 1f       	adc	r31, r17
    32dc:	10 82       	st	Z, r1
    32de:	2e 96       	adiw	r28, 0x0e	; 14
    32e0:	e4 e0       	ldi	r30, 0x04	; 4
    32e2:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__epilogue_restores__+0x1c>

000032e6 <vfprintf>:
    32e6:	ac e0       	ldi	r26, 0x0C	; 12
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	e9 e7       	ldi	r30, 0x79	; 121
    32ec:	f9 e1       	ldi	r31, 0x19	; 25
    32ee:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__prologue_saves__>
    32f2:	6c 01       	movw	r12, r24
    32f4:	1b 01       	movw	r2, r22
    32f6:	8a 01       	movw	r16, r20
    32f8:	fc 01       	movw	r30, r24
    32fa:	17 82       	std	Z+7, r1	; 0x07
    32fc:	16 82       	std	Z+6, r1	; 0x06
    32fe:	83 81       	ldd	r24, Z+3	; 0x03
    3300:	81 ff       	sbrs	r24, 1
    3302:	d1 c1       	rjmp	.+930    	; 0x36a6 <vfprintf+0x3c0>
    3304:	2e 01       	movw	r4, r28
    3306:	08 94       	sec
    3308:	41 1c       	adc	r4, r1
    330a:	51 1c       	adc	r5, r1
    330c:	f6 01       	movw	r30, r12
    330e:	93 81       	ldd	r25, Z+3	; 0x03
    3310:	f1 01       	movw	r30, r2
    3312:	93 fd       	sbrc	r25, 3
    3314:	85 91       	lpm	r24, Z+
    3316:	93 ff       	sbrs	r25, 3
    3318:	81 91       	ld	r24, Z+
    331a:	1f 01       	movw	r2, r30
    331c:	88 23       	and	r24, r24
    331e:	09 f4       	brne	.+2      	; 0x3322 <vfprintf+0x3c>
    3320:	be c1       	rjmp	.+892    	; 0x369e <vfprintf+0x3b8>
    3322:	85 32       	cpi	r24, 0x25	; 37
    3324:	39 f4       	brne	.+14     	; 0x3334 <vfprintf+0x4e>
    3326:	93 fd       	sbrc	r25, 3
    3328:	85 91       	lpm	r24, Z+
    332a:	93 ff       	sbrs	r25, 3
    332c:	81 91       	ld	r24, Z+
    332e:	1f 01       	movw	r2, r30
    3330:	85 32       	cpi	r24, 0x25	; 37
    3332:	29 f4       	brne	.+10     	; 0x333e <vfprintf+0x58>
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	b6 01       	movw	r22, r12
    3338:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    333c:	e7 cf       	rjmp	.-50     	; 0x330c <vfprintf+0x26>
    333e:	ee 24       	eor	r14, r14
    3340:	ff 24       	eor	r15, r15
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	20 32       	cpi	r18, 0x20	; 32
    3346:	b0 f4       	brcc	.+44     	; 0x3374 <vfprintf+0x8e>
    3348:	8b 32       	cpi	r24, 0x2B	; 43
    334a:	69 f0       	breq	.+26     	; 0x3366 <vfprintf+0x80>
    334c:	8c 32       	cpi	r24, 0x2C	; 44
    334e:	28 f4       	brcc	.+10     	; 0x335a <vfprintf+0x74>
    3350:	80 32       	cpi	r24, 0x20	; 32
    3352:	51 f0       	breq	.+20     	; 0x3368 <vfprintf+0x82>
    3354:	83 32       	cpi	r24, 0x23	; 35
    3356:	71 f4       	brne	.+28     	; 0x3374 <vfprintf+0x8e>
    3358:	0b c0       	rjmp	.+22     	; 0x3370 <vfprintf+0x8a>
    335a:	8d 32       	cpi	r24, 0x2D	; 45
    335c:	39 f0       	breq	.+14     	; 0x336c <vfprintf+0x86>
    335e:	80 33       	cpi	r24, 0x30	; 48
    3360:	49 f4       	brne	.+18     	; 0x3374 <vfprintf+0x8e>
    3362:	21 60       	ori	r18, 0x01	; 1
    3364:	2c c0       	rjmp	.+88     	; 0x33be <vfprintf+0xd8>
    3366:	22 60       	ori	r18, 0x02	; 2
    3368:	24 60       	ori	r18, 0x04	; 4
    336a:	29 c0       	rjmp	.+82     	; 0x33be <vfprintf+0xd8>
    336c:	28 60       	ori	r18, 0x08	; 8
    336e:	27 c0       	rjmp	.+78     	; 0x33be <vfprintf+0xd8>
    3370:	20 61       	ori	r18, 0x10	; 16
    3372:	25 c0       	rjmp	.+74     	; 0x33be <vfprintf+0xd8>
    3374:	27 fd       	sbrc	r18, 7
    3376:	2c c0       	rjmp	.+88     	; 0x33d0 <vfprintf+0xea>
    3378:	38 2f       	mov	r19, r24
    337a:	30 53       	subi	r19, 0x30	; 48
    337c:	3a 30       	cpi	r19, 0x0A	; 10
    337e:	98 f4       	brcc	.+38     	; 0x33a6 <vfprintf+0xc0>
    3380:	26 ff       	sbrs	r18, 6
    3382:	08 c0       	rjmp	.+16     	; 0x3394 <vfprintf+0xae>
    3384:	8e 2d       	mov	r24, r14
    3386:	88 0f       	add	r24, r24
    3388:	e8 2e       	mov	r14, r24
    338a:	ee 0c       	add	r14, r14
    338c:	ee 0c       	add	r14, r14
    338e:	e8 0e       	add	r14, r24
    3390:	e3 0e       	add	r14, r19
    3392:	15 c0       	rjmp	.+42     	; 0x33be <vfprintf+0xd8>
    3394:	8f 2d       	mov	r24, r15
    3396:	88 0f       	add	r24, r24
    3398:	f8 2e       	mov	r15, r24
    339a:	ff 0c       	add	r15, r15
    339c:	ff 0c       	add	r15, r15
    339e:	f8 0e       	add	r15, r24
    33a0:	f3 0e       	add	r15, r19
    33a2:	20 62       	ori	r18, 0x20	; 32
    33a4:	0c c0       	rjmp	.+24     	; 0x33be <vfprintf+0xd8>
    33a6:	8e 32       	cpi	r24, 0x2E	; 46
    33a8:	21 f4       	brne	.+8      	; 0x33b2 <vfprintf+0xcc>
    33aa:	26 fd       	sbrc	r18, 6
    33ac:	78 c1       	rjmp	.+752    	; 0x369e <vfprintf+0x3b8>
    33ae:	20 64       	ori	r18, 0x40	; 64
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <vfprintf+0xd8>
    33b2:	8c 36       	cpi	r24, 0x6C	; 108
    33b4:	11 f4       	brne	.+4      	; 0x33ba <vfprintf+0xd4>
    33b6:	20 68       	ori	r18, 0x80	; 128
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <vfprintf+0xd8>
    33ba:	88 36       	cpi	r24, 0x68	; 104
    33bc:	49 f4       	brne	.+18     	; 0x33d0 <vfprintf+0xea>
    33be:	f1 01       	movw	r30, r2
    33c0:	93 fd       	sbrc	r25, 3
    33c2:	85 91       	lpm	r24, Z+
    33c4:	93 ff       	sbrs	r25, 3
    33c6:	81 91       	ld	r24, Z+
    33c8:	1f 01       	movw	r2, r30
    33ca:	88 23       	and	r24, r24
    33cc:	09 f0       	breq	.+2      	; 0x33d0 <vfprintf+0xea>
    33ce:	ba cf       	rjmp	.-140    	; 0x3344 <vfprintf+0x5e>
    33d0:	98 2f       	mov	r25, r24
    33d2:	95 54       	subi	r25, 0x45	; 69
    33d4:	93 30       	cpi	r25, 0x03	; 3
    33d6:	18 f0       	brcs	.+6      	; 0x33de <vfprintf+0xf8>
    33d8:	90 52       	subi	r25, 0x20	; 32
    33da:	93 30       	cpi	r25, 0x03	; 3
    33dc:	28 f4       	brcc	.+10     	; 0x33e8 <vfprintf+0x102>
    33de:	0c 5f       	subi	r16, 0xFC	; 252
    33e0:	1f 4f       	sbci	r17, 0xFF	; 255
    33e2:	ff e3       	ldi	r31, 0x3F	; 63
    33e4:	f9 83       	std	Y+1, r31	; 0x01
    33e6:	0d c0       	rjmp	.+26     	; 0x3402 <vfprintf+0x11c>
    33e8:	83 36       	cpi	r24, 0x63	; 99
    33ea:	31 f0       	breq	.+12     	; 0x33f8 <vfprintf+0x112>
    33ec:	83 37       	cpi	r24, 0x73	; 115
    33ee:	71 f0       	breq	.+28     	; 0x340c <vfprintf+0x126>
    33f0:	83 35       	cpi	r24, 0x53	; 83
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <vfprintf+0x110>
    33f4:	60 c0       	rjmp	.+192    	; 0x34b6 <vfprintf+0x1d0>
    33f6:	22 c0       	rjmp	.+68     	; 0x343c <vfprintf+0x156>
    33f8:	f8 01       	movw	r30, r16
    33fa:	80 81       	ld	r24, Z
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	0e 5f       	subi	r16, 0xFE	; 254
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	42 01       	movw	r8, r4
    3404:	71 e0       	ldi	r23, 0x01	; 1
    3406:	a7 2e       	mov	r10, r23
    3408:	b1 2c       	mov	r11, r1
    340a:	16 c0       	rjmp	.+44     	; 0x3438 <vfprintf+0x152>
    340c:	62 e0       	ldi	r22, 0x02	; 2
    340e:	66 2e       	mov	r6, r22
    3410:	71 2c       	mov	r7, r1
    3412:	60 0e       	add	r6, r16
    3414:	71 1e       	adc	r7, r17
    3416:	f8 01       	movw	r30, r16
    3418:	80 80       	ld	r8, Z
    341a:	91 80       	ldd	r9, Z+1	; 0x01
    341c:	26 ff       	sbrs	r18, 6
    341e:	03 c0       	rjmp	.+6      	; 0x3426 <vfprintf+0x140>
    3420:	6e 2d       	mov	r22, r14
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	02 c0       	rjmp	.+4      	; 0x342a <vfprintf+0x144>
    3426:	6f ef       	ldi	r22, 0xFF	; 255
    3428:	7f ef       	ldi	r23, 0xFF	; 255
    342a:	c4 01       	movw	r24, r8
    342c:	2c 87       	std	Y+12, r18	; 0x0c
    342e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <strnlen>
    3432:	5c 01       	movw	r10, r24
    3434:	83 01       	movw	r16, r6
    3436:	2c 85       	ldd	r18, Y+12	; 0x0c
    3438:	2f 77       	andi	r18, 0x7F	; 127
    343a:	17 c0       	rjmp	.+46     	; 0x346a <vfprintf+0x184>
    343c:	52 e0       	ldi	r21, 0x02	; 2
    343e:	65 2e       	mov	r6, r21
    3440:	71 2c       	mov	r7, r1
    3442:	60 0e       	add	r6, r16
    3444:	71 1e       	adc	r7, r17
    3446:	f8 01       	movw	r30, r16
    3448:	80 80       	ld	r8, Z
    344a:	91 80       	ldd	r9, Z+1	; 0x01
    344c:	26 ff       	sbrs	r18, 6
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <vfprintf+0x170>
    3450:	6e 2d       	mov	r22, r14
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	02 c0       	rjmp	.+4      	; 0x345a <vfprintf+0x174>
    3456:	6f ef       	ldi	r22, 0xFF	; 255
    3458:	7f ef       	ldi	r23, 0xFF	; 255
    345a:	c4 01       	movw	r24, r8
    345c:	2c 87       	std	Y+12, r18	; 0x0c
    345e:	0e 94 80 1b 	call	0x3700	; 0x3700 <strnlen_P>
    3462:	5c 01       	movw	r10, r24
    3464:	2c 85       	ldd	r18, Y+12	; 0x0c
    3466:	20 68       	ori	r18, 0x80	; 128
    3468:	83 01       	movw	r16, r6
    346a:	23 fd       	sbrc	r18, 3
    346c:	20 c0       	rjmp	.+64     	; 0x34ae <vfprintf+0x1c8>
    346e:	08 c0       	rjmp	.+16     	; 0x3480 <vfprintf+0x19a>
    3470:	80 e2       	ldi	r24, 0x20	; 32
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	b6 01       	movw	r22, r12
    3476:	2c 87       	std	Y+12, r18	; 0x0c
    3478:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    347c:	fa 94       	dec	r15
    347e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3480:	8f 2d       	mov	r24, r15
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	a8 16       	cp	r10, r24
    3486:	b9 06       	cpc	r11, r25
    3488:	98 f3       	brcs	.-26     	; 0x3470 <vfprintf+0x18a>
    348a:	11 c0       	rjmp	.+34     	; 0x34ae <vfprintf+0x1c8>
    348c:	f4 01       	movw	r30, r8
    348e:	27 fd       	sbrc	r18, 7
    3490:	85 91       	lpm	r24, Z+
    3492:	27 ff       	sbrs	r18, 7
    3494:	81 91       	ld	r24, Z+
    3496:	4f 01       	movw	r8, r30
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	b6 01       	movw	r22, r12
    349c:	2c 87       	std	Y+12, r18	; 0x0c
    349e:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    34a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    34a4:	f1 10       	cpse	r15, r1
    34a6:	fa 94       	dec	r15
    34a8:	08 94       	sec
    34aa:	a1 08       	sbc	r10, r1
    34ac:	b1 08       	sbc	r11, r1
    34ae:	a1 14       	cp	r10, r1
    34b0:	b1 04       	cpc	r11, r1
    34b2:	61 f7       	brne	.-40     	; 0x348c <vfprintf+0x1a6>
    34b4:	f1 c0       	rjmp	.+482    	; 0x3698 <vfprintf+0x3b2>
    34b6:	84 36       	cpi	r24, 0x64	; 100
    34b8:	11 f0       	breq	.+4      	; 0x34be <vfprintf+0x1d8>
    34ba:	89 36       	cpi	r24, 0x69	; 105
    34bc:	49 f5       	brne	.+82     	; 0x3510 <vfprintf+0x22a>
    34be:	27 ff       	sbrs	r18, 7
    34c0:	08 c0       	rjmp	.+16     	; 0x34d2 <vfprintf+0x1ec>
    34c2:	f8 01       	movw	r30, r16
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	0c 5f       	subi	r16, 0xFC	; 252
    34ce:	1f 4f       	sbci	r17, 0xFF	; 255
    34d0:	09 c0       	rjmp	.+18     	; 0x34e4 <vfprintf+0x1fe>
    34d2:	f8 01       	movw	r30, r16
    34d4:	60 81       	ld	r22, Z
    34d6:	71 81       	ldd	r23, Z+1	; 0x01
    34d8:	88 27       	eor	r24, r24
    34da:	77 fd       	sbrc	r23, 7
    34dc:	80 95       	com	r24
    34de:	98 2f       	mov	r25, r24
    34e0:	0e 5f       	subi	r16, 0xFE	; 254
    34e2:	1f 4f       	sbci	r17, 0xFF	; 255
    34e4:	4f e6       	ldi	r20, 0x6F	; 111
    34e6:	b4 2e       	mov	r11, r20
    34e8:	b2 22       	and	r11, r18
    34ea:	97 ff       	sbrs	r25, 7
    34ec:	09 c0       	rjmp	.+18     	; 0x3500 <vfprintf+0x21a>
    34ee:	90 95       	com	r25
    34f0:	80 95       	com	r24
    34f2:	70 95       	com	r23
    34f4:	61 95       	neg	r22
    34f6:	7f 4f       	sbci	r23, 0xFF	; 255
    34f8:	8f 4f       	sbci	r24, 0xFF	; 255
    34fa:	9f 4f       	sbci	r25, 0xFF	; 255
    34fc:	f0 e8       	ldi	r31, 0x80	; 128
    34fe:	bf 2a       	or	r11, r31
    3500:	a2 01       	movw	r20, r4
    3502:	2a e0       	ldi	r18, 0x0A	; 10
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__ultoa_invert>
    350a:	78 2e       	mov	r7, r24
    350c:	74 18       	sub	r7, r4
    350e:	45 c0       	rjmp	.+138    	; 0x359a <vfprintf+0x2b4>
    3510:	85 37       	cpi	r24, 0x75	; 117
    3512:	31 f4       	brne	.+12     	; 0x3520 <vfprintf+0x23a>
    3514:	3f ee       	ldi	r19, 0xEF	; 239
    3516:	b3 2e       	mov	r11, r19
    3518:	b2 22       	and	r11, r18
    351a:	2a e0       	ldi	r18, 0x0A	; 10
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	25 c0       	rjmp	.+74     	; 0x356a <vfprintf+0x284>
    3520:	99 ef       	ldi	r25, 0xF9	; 249
    3522:	b9 2e       	mov	r11, r25
    3524:	b2 22       	and	r11, r18
    3526:	8f 36       	cpi	r24, 0x6F	; 111
    3528:	c1 f0       	breq	.+48     	; 0x355a <vfprintf+0x274>
    352a:	80 37       	cpi	r24, 0x70	; 112
    352c:	20 f4       	brcc	.+8      	; 0x3536 <vfprintf+0x250>
    352e:	88 35       	cpi	r24, 0x58	; 88
    3530:	09 f0       	breq	.+2      	; 0x3534 <vfprintf+0x24e>
    3532:	b5 c0       	rjmp	.+362    	; 0x369e <vfprintf+0x3b8>
    3534:	0d c0       	rjmp	.+26     	; 0x3550 <vfprintf+0x26a>
    3536:	80 37       	cpi	r24, 0x70	; 112
    3538:	21 f0       	breq	.+8      	; 0x3542 <vfprintf+0x25c>
    353a:	88 37       	cpi	r24, 0x78	; 120
    353c:	09 f0       	breq	.+2      	; 0x3540 <vfprintf+0x25a>
    353e:	af c0       	rjmp	.+350    	; 0x369e <vfprintf+0x3b8>
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <vfprintf+0x260>
    3542:	20 e1       	ldi	r18, 0x10	; 16
    3544:	b2 2a       	or	r11, r18
    3546:	b4 fe       	sbrs	r11, 4
    3548:	0b c0       	rjmp	.+22     	; 0x3560 <vfprintf+0x27a>
    354a:	84 e0       	ldi	r24, 0x04	; 4
    354c:	b8 2a       	or	r11, r24
    354e:	08 c0       	rjmp	.+16     	; 0x3560 <vfprintf+0x27a>
    3550:	b4 fe       	sbrs	r11, 4
    3552:	09 c0       	rjmp	.+18     	; 0x3566 <vfprintf+0x280>
    3554:	e6 e0       	ldi	r30, 0x06	; 6
    3556:	be 2a       	or	r11, r30
    3558:	06 c0       	rjmp	.+12     	; 0x3566 <vfprintf+0x280>
    355a:	28 e0       	ldi	r18, 0x08	; 8
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	05 c0       	rjmp	.+10     	; 0x356a <vfprintf+0x284>
    3560:	20 e1       	ldi	r18, 0x10	; 16
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	02 c0       	rjmp	.+4      	; 0x356a <vfprintf+0x284>
    3566:	20 e1       	ldi	r18, 0x10	; 16
    3568:	32 e0       	ldi	r19, 0x02	; 2
    356a:	b7 fe       	sbrs	r11, 7
    356c:	08 c0       	rjmp	.+16     	; 0x357e <vfprintf+0x298>
    356e:	f8 01       	movw	r30, r16
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	82 81       	ldd	r24, Z+2	; 0x02
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	0c 5f       	subi	r16, 0xFC	; 252
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	07 c0       	rjmp	.+14     	; 0x358c <vfprintf+0x2a6>
    357e:	f8 01       	movw	r30, r16
    3580:	60 81       	ld	r22, Z
    3582:	71 81       	ldd	r23, Z+1	; 0x01
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 5f       	subi	r16, 0xFE	; 254
    358a:	1f 4f       	sbci	r17, 0xFF	; 255
    358c:	a2 01       	movw	r20, r4
    358e:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__ultoa_invert>
    3592:	78 2e       	mov	r7, r24
    3594:	74 18       	sub	r7, r4
    3596:	ff e7       	ldi	r31, 0x7F	; 127
    3598:	bf 22       	and	r11, r31
    359a:	b6 fe       	sbrs	r11, 6
    359c:	0b c0       	rjmp	.+22     	; 0x35b4 <vfprintf+0x2ce>
    359e:	2e ef       	ldi	r18, 0xFE	; 254
    35a0:	b2 22       	and	r11, r18
    35a2:	7e 14       	cp	r7, r14
    35a4:	38 f4       	brcc	.+14     	; 0x35b4 <vfprintf+0x2ce>
    35a6:	b4 fe       	sbrs	r11, 4
    35a8:	07 c0       	rjmp	.+14     	; 0x35b8 <vfprintf+0x2d2>
    35aa:	b2 fc       	sbrc	r11, 2
    35ac:	05 c0       	rjmp	.+10     	; 0x35b8 <vfprintf+0x2d2>
    35ae:	8f ee       	ldi	r24, 0xEF	; 239
    35b0:	b8 22       	and	r11, r24
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <vfprintf+0x2d2>
    35b4:	a7 2c       	mov	r10, r7
    35b6:	01 c0       	rjmp	.+2      	; 0x35ba <vfprintf+0x2d4>
    35b8:	ae 2c       	mov	r10, r14
    35ba:	8b 2d       	mov	r24, r11
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	b4 fe       	sbrs	r11, 4
    35c0:	0d c0       	rjmp	.+26     	; 0x35dc <vfprintf+0x2f6>
    35c2:	fe 01       	movw	r30, r28
    35c4:	e7 0d       	add	r30, r7
    35c6:	f1 1d       	adc	r31, r1
    35c8:	20 81       	ld	r18, Z
    35ca:	20 33       	cpi	r18, 0x30	; 48
    35cc:	19 f4       	brne	.+6      	; 0x35d4 <vfprintf+0x2ee>
    35ce:	e9 ee       	ldi	r30, 0xE9	; 233
    35d0:	be 22       	and	r11, r30
    35d2:	09 c0       	rjmp	.+18     	; 0x35e6 <vfprintf+0x300>
    35d4:	a3 94       	inc	r10
    35d6:	b2 fe       	sbrs	r11, 2
    35d8:	06 c0       	rjmp	.+12     	; 0x35e6 <vfprintf+0x300>
    35da:	04 c0       	rjmp	.+8      	; 0x35e4 <vfprintf+0x2fe>
    35dc:	86 78       	andi	r24, 0x86	; 134
    35de:	90 70       	andi	r25, 0x00	; 0
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <vfprintf+0x300>
    35e4:	a3 94       	inc	r10
    35e6:	8b 2c       	mov	r8, r11
    35e8:	99 24       	eor	r9, r9
    35ea:	b3 fc       	sbrc	r11, 3
    35ec:	14 c0       	rjmp	.+40     	; 0x3616 <vfprintf+0x330>
    35ee:	b0 fe       	sbrs	r11, 0
    35f0:	0f c0       	rjmp	.+30     	; 0x3610 <vfprintf+0x32a>
    35f2:	af 14       	cp	r10, r15
    35f4:	28 f4       	brcc	.+10     	; 0x3600 <vfprintf+0x31a>
    35f6:	e7 2c       	mov	r14, r7
    35f8:	ef 0c       	add	r14, r15
    35fa:	ea 18       	sub	r14, r10
    35fc:	af 2c       	mov	r10, r15
    35fe:	08 c0       	rjmp	.+16     	; 0x3610 <vfprintf+0x32a>
    3600:	e7 2c       	mov	r14, r7
    3602:	06 c0       	rjmp	.+12     	; 0x3610 <vfprintf+0x32a>
    3604:	80 e2       	ldi	r24, 0x20	; 32
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	b6 01       	movw	r22, r12
    360a:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    360e:	a3 94       	inc	r10
    3610:	af 14       	cp	r10, r15
    3612:	c0 f3       	brcs	.-16     	; 0x3604 <vfprintf+0x31e>
    3614:	04 c0       	rjmp	.+8      	; 0x361e <vfprintf+0x338>
    3616:	af 14       	cp	r10, r15
    3618:	10 f4       	brcc	.+4      	; 0x361e <vfprintf+0x338>
    361a:	fa 18       	sub	r15, r10
    361c:	01 c0       	rjmp	.+2      	; 0x3620 <vfprintf+0x33a>
    361e:	ff 24       	eor	r15, r15
    3620:	84 fe       	sbrs	r8, 4
    3622:	0f c0       	rjmp	.+30     	; 0x3642 <vfprintf+0x35c>
    3624:	80 e3       	ldi	r24, 0x30	; 48
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	b6 01       	movw	r22, r12
    362a:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    362e:	82 fe       	sbrs	r8, 2
    3630:	1f c0       	rjmp	.+62     	; 0x3670 <vfprintf+0x38a>
    3632:	81 fe       	sbrs	r8, 1
    3634:	03 c0       	rjmp	.+6      	; 0x363c <vfprintf+0x356>
    3636:	88 e5       	ldi	r24, 0x58	; 88
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	10 c0       	rjmp	.+32     	; 0x365c <vfprintf+0x376>
    363c:	88 e7       	ldi	r24, 0x78	; 120
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	0d c0       	rjmp	.+26     	; 0x365c <vfprintf+0x376>
    3642:	c4 01       	movw	r24, r8
    3644:	86 78       	andi	r24, 0x86	; 134
    3646:	90 70       	andi	r25, 0x00	; 0
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	91 f0       	breq	.+36     	; 0x3670 <vfprintf+0x38a>
    364c:	81 fc       	sbrc	r8, 1
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <vfprintf+0x36e>
    3650:	80 e2       	ldi	r24, 0x20	; 32
    3652:	01 c0       	rjmp	.+2      	; 0x3656 <vfprintf+0x370>
    3654:	8b e2       	ldi	r24, 0x2B	; 43
    3656:	b7 fc       	sbrc	r11, 7
    3658:	8d e2       	ldi	r24, 0x2D	; 45
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	b6 01       	movw	r22, r12
    365e:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    3662:	06 c0       	rjmp	.+12     	; 0x3670 <vfprintf+0x38a>
    3664:	80 e3       	ldi	r24, 0x30	; 48
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	b6 01       	movw	r22, r12
    366a:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    366e:	ea 94       	dec	r14
    3670:	7e 14       	cp	r7, r14
    3672:	c0 f3       	brcs	.-16     	; 0x3664 <vfprintf+0x37e>
    3674:	7a 94       	dec	r7
    3676:	f2 01       	movw	r30, r4
    3678:	e7 0d       	add	r30, r7
    367a:	f1 1d       	adc	r31, r1
    367c:	80 81       	ld	r24, Z
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	b6 01       	movw	r22, r12
    3682:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    3686:	77 20       	and	r7, r7
    3688:	a9 f7       	brne	.-22     	; 0x3674 <vfprintf+0x38e>
    368a:	06 c0       	rjmp	.+12     	; 0x3698 <vfprintf+0x3b2>
    368c:	80 e2       	ldi	r24, 0x20	; 32
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	b6 01       	movw	r22, r12
    3692:	0e 94 96 1b 	call	0x372c	; 0x372c <fputc>
    3696:	fa 94       	dec	r15
    3698:	ff 20       	and	r15, r15
    369a:	c1 f7       	brne	.-16     	; 0x368c <vfprintf+0x3a6>
    369c:	37 ce       	rjmp	.-914    	; 0x330c <vfprintf+0x26>
    369e:	f6 01       	movw	r30, r12
    36a0:	26 81       	ldd	r18, Z+6	; 0x06
    36a2:	37 81       	ldd	r19, Z+7	; 0x07
    36a4:	02 c0       	rjmp	.+4      	; 0x36aa <vfprintf+0x3c4>
    36a6:	2f ef       	ldi	r18, 0xFF	; 255
    36a8:	3f ef       	ldi	r19, 0xFF	; 255
    36aa:	c9 01       	movw	r24, r18
    36ac:	2c 96       	adiw	r28, 0x0c	; 12
    36ae:	e2 e1       	ldi	r30, 0x12	; 18
    36b0:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__epilogue_restores__>

000036b4 <__eerd_block_m168>:
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22

000036b8 <__eerd_blraw_m168>:
    36b8:	fc 01       	movw	r30, r24
    36ba:	f9 99       	sbic	0x1f, 1	; 31
    36bc:	fe cf       	rjmp	.-4      	; 0x36ba <__eerd_blraw_m168+0x2>
    36be:	06 c0       	rjmp	.+12     	; 0x36cc <__eerd_blraw_m168+0x14>
    36c0:	f2 bd       	out	0x22, r31	; 34
    36c2:	e1 bd       	out	0x21, r30	; 33
    36c4:	f8 9a       	sbi	0x1f, 0	; 31
    36c6:	31 96       	adiw	r30, 0x01	; 1
    36c8:	00 b4       	in	r0, 0x20	; 32
    36ca:	0d 92       	st	X+, r0
    36cc:	41 50       	subi	r20, 0x01	; 1
    36ce:	50 40       	sbci	r21, 0x00	; 0
    36d0:	b8 f7       	brcc	.-18     	; 0x36c0 <__eerd_blraw_m168+0x8>
    36d2:	08 95       	ret

000036d4 <__eerd_byte_m168>:
    36d4:	f9 99       	sbic	0x1f, 1	; 31
    36d6:	fe cf       	rjmp	.-4      	; 0x36d4 <__eerd_byte_m168>
    36d8:	92 bd       	out	0x22, r25	; 34
    36da:	81 bd       	out	0x21, r24	; 33
    36dc:	f8 9a       	sbi	0x1f, 0	; 31
    36de:	99 27       	eor	r25, r25
    36e0:	80 b5       	in	r24, 0x20	; 32
    36e2:	08 95       	ret

000036e4 <__eewr_byte_m168>:
    36e4:	26 2f       	mov	r18, r22

000036e6 <__eewr_r18_m168>:
    36e6:	f9 99       	sbic	0x1f, 1	; 31
    36e8:	fe cf       	rjmp	.-4      	; 0x36e6 <__eewr_r18_m168>
    36ea:	1f ba       	out	0x1f, r1	; 31
    36ec:	92 bd       	out	0x22, r25	; 34
    36ee:	81 bd       	out	0x21, r24	; 33
    36f0:	20 bd       	out	0x20, r18	; 32
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	fa 9a       	sbi	0x1f, 2	; 31
    36f8:	f9 9a       	sbi	0x1f, 1	; 31
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	08 95       	ret

00003700 <strnlen_P>:
    3700:	fc 01       	movw	r30, r24
    3702:	05 90       	lpm	r0, Z+
    3704:	61 50       	subi	r22, 0x01	; 1
    3706:	70 40       	sbci	r23, 0x00	; 0
    3708:	01 10       	cpse	r0, r1
    370a:	d8 f7       	brcc	.-10     	; 0x3702 <strnlen_P+0x2>
    370c:	80 95       	com	r24
    370e:	90 95       	com	r25
    3710:	8e 0f       	add	r24, r30
    3712:	9f 1f       	adc	r25, r31
    3714:	08 95       	ret

00003716 <strnlen>:
    3716:	fc 01       	movw	r30, r24
    3718:	61 50       	subi	r22, 0x01	; 1
    371a:	70 40       	sbci	r23, 0x00	; 0
    371c:	01 90       	ld	r0, Z+
    371e:	01 10       	cpse	r0, r1
    3720:	d8 f7       	brcc	.-10     	; 0x3718 <strnlen+0x2>
    3722:	80 95       	com	r24
    3724:	90 95       	com	r25
    3726:	8e 0f       	add	r24, r30
    3728:	9f 1f       	adc	r25, r31
    372a:	08 95       	ret

0000372c <fputc>:
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	8c 01       	movw	r16, r24
    3736:	eb 01       	movw	r28, r22
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	81 ff       	sbrs	r24, 1
    373c:	1b c0       	rjmp	.+54     	; 0x3774 <fputc+0x48>
    373e:	82 ff       	sbrs	r24, 2
    3740:	0d c0       	rjmp	.+26     	; 0x375c <fputc+0x30>
    3742:	2e 81       	ldd	r18, Y+6	; 0x06
    3744:	3f 81       	ldd	r19, Y+7	; 0x07
    3746:	8c 81       	ldd	r24, Y+4	; 0x04
    3748:	9d 81       	ldd	r25, Y+5	; 0x05
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	64 f4       	brge	.+24     	; 0x3768 <fputc+0x3c>
    3750:	e8 81       	ld	r30, Y
    3752:	f9 81       	ldd	r31, Y+1	; 0x01
    3754:	01 93       	st	Z+, r16
    3756:	f9 83       	std	Y+1, r31	; 0x01
    3758:	e8 83       	st	Y, r30
    375a:	06 c0       	rjmp	.+12     	; 0x3768 <fputc+0x3c>
    375c:	e8 85       	ldd	r30, Y+8	; 0x08
    375e:	f9 85       	ldd	r31, Y+9	; 0x09
    3760:	80 2f       	mov	r24, r16
    3762:	09 95       	icall
    3764:	00 97       	sbiw	r24, 0x00	; 0
    3766:	31 f4       	brne	.+12     	; 0x3774 <fputc+0x48>
    3768:	8e 81       	ldd	r24, Y+6	; 0x06
    376a:	9f 81       	ldd	r25, Y+7	; 0x07
    376c:	01 96       	adiw	r24, 0x01	; 1
    376e:	9f 83       	std	Y+7, r25	; 0x07
    3770:	8e 83       	std	Y+6, r24	; 0x06
    3772:	02 c0       	rjmp	.+4      	; 0x3778 <fputc+0x4c>
    3774:	0f ef       	ldi	r16, 0xFF	; 255
    3776:	1f ef       	ldi	r17, 0xFF	; 255
    3778:	c8 01       	movw	r24, r16
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    3782:	08 95       	ret

00003784 <__ultoa_invert>:
    3784:	fa 01       	movw	r30, r20
    3786:	aa 27       	eor	r26, r26
    3788:	28 30       	cpi	r18, 0x08	; 8
    378a:	51 f1       	breq	.+84     	; 0x37e0 <__ultoa_invert+0x5c>
    378c:	20 31       	cpi	r18, 0x10	; 16
    378e:	81 f1       	breq	.+96     	; 0x37f0 <__ultoa_invert+0x6c>
    3790:	e8 94       	clt
    3792:	6f 93       	push	r22
    3794:	6e 7f       	andi	r22, 0xFE	; 254
    3796:	6e 5f       	subi	r22, 0xFE	; 254
    3798:	7f 4f       	sbci	r23, 0xFF	; 255
    379a:	8f 4f       	sbci	r24, 0xFF	; 255
    379c:	9f 4f       	sbci	r25, 0xFF	; 255
    379e:	af 4f       	sbci	r26, 0xFF	; 255
    37a0:	b1 e0       	ldi	r27, 0x01	; 1
    37a2:	3e d0       	rcall	.+124    	; 0x3820 <__ultoa_invert+0x9c>
    37a4:	b4 e0       	ldi	r27, 0x04	; 4
    37a6:	3c d0       	rcall	.+120    	; 0x3820 <__ultoa_invert+0x9c>
    37a8:	67 0f       	add	r22, r23
    37aa:	78 1f       	adc	r23, r24
    37ac:	89 1f       	adc	r24, r25
    37ae:	9a 1f       	adc	r25, r26
    37b0:	a1 1d       	adc	r26, r1
    37b2:	68 0f       	add	r22, r24
    37b4:	79 1f       	adc	r23, r25
    37b6:	8a 1f       	adc	r24, r26
    37b8:	91 1d       	adc	r25, r1
    37ba:	a1 1d       	adc	r26, r1
    37bc:	6a 0f       	add	r22, r26
    37be:	71 1d       	adc	r23, r1
    37c0:	81 1d       	adc	r24, r1
    37c2:	91 1d       	adc	r25, r1
    37c4:	a1 1d       	adc	r26, r1
    37c6:	20 d0       	rcall	.+64     	; 0x3808 <__ultoa_invert+0x84>
    37c8:	09 f4       	brne	.+2      	; 0x37cc <__ultoa_invert+0x48>
    37ca:	68 94       	set
    37cc:	3f 91       	pop	r19
    37ce:	2a e0       	ldi	r18, 0x0A	; 10
    37d0:	26 9f       	mul	r18, r22
    37d2:	11 24       	eor	r1, r1
    37d4:	30 19       	sub	r19, r0
    37d6:	30 5d       	subi	r19, 0xD0	; 208
    37d8:	31 93       	st	Z+, r19
    37da:	de f6       	brtc	.-74     	; 0x3792 <__ultoa_invert+0xe>
    37dc:	cf 01       	movw	r24, r30
    37de:	08 95       	ret
    37e0:	46 2f       	mov	r20, r22
    37e2:	47 70       	andi	r20, 0x07	; 7
    37e4:	40 5d       	subi	r20, 0xD0	; 208
    37e6:	41 93       	st	Z+, r20
    37e8:	b3 e0       	ldi	r27, 0x03	; 3
    37ea:	0f d0       	rcall	.+30     	; 0x380a <__ultoa_invert+0x86>
    37ec:	c9 f7       	brne	.-14     	; 0x37e0 <__ultoa_invert+0x5c>
    37ee:	f6 cf       	rjmp	.-20     	; 0x37dc <__ultoa_invert+0x58>
    37f0:	46 2f       	mov	r20, r22
    37f2:	4f 70       	andi	r20, 0x0F	; 15
    37f4:	40 5d       	subi	r20, 0xD0	; 208
    37f6:	4a 33       	cpi	r20, 0x3A	; 58
    37f8:	18 f0       	brcs	.+6      	; 0x3800 <__ultoa_invert+0x7c>
    37fa:	49 5d       	subi	r20, 0xD9	; 217
    37fc:	31 fd       	sbrc	r19, 1
    37fe:	40 52       	subi	r20, 0x20	; 32
    3800:	41 93       	st	Z+, r20
    3802:	02 d0       	rcall	.+4      	; 0x3808 <__ultoa_invert+0x84>
    3804:	a9 f7       	brne	.-22     	; 0x37f0 <__ultoa_invert+0x6c>
    3806:	ea cf       	rjmp	.-44     	; 0x37dc <__ultoa_invert+0x58>
    3808:	b4 e0       	ldi	r27, 0x04	; 4
    380a:	a6 95       	lsr	r26
    380c:	97 95       	ror	r25
    380e:	87 95       	ror	r24
    3810:	77 95       	ror	r23
    3812:	67 95       	ror	r22
    3814:	ba 95       	dec	r27
    3816:	c9 f7       	brne	.-14     	; 0x380a <__ultoa_invert+0x86>
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	61 05       	cpc	r22, r1
    381c:	71 05       	cpc	r23, r1
    381e:	08 95       	ret
    3820:	9b 01       	movw	r18, r22
    3822:	ac 01       	movw	r20, r24
    3824:	0a 2e       	mov	r0, r26
    3826:	06 94       	lsr	r0
    3828:	57 95       	ror	r21
    382a:	47 95       	ror	r20
    382c:	37 95       	ror	r19
    382e:	27 95       	ror	r18
    3830:	ba 95       	dec	r27
    3832:	c9 f7       	brne	.-14     	; 0x3826 <__ultoa_invert+0xa2>
    3834:	62 0f       	add	r22, r18
    3836:	73 1f       	adc	r23, r19
    3838:	84 1f       	adc	r24, r20
    383a:	95 1f       	adc	r25, r21
    383c:	a0 1d       	adc	r26, r0
    383e:	08 95       	ret

00003840 <__prologue_saves__>:
    3840:	2f 92       	push	r2
    3842:	3f 92       	push	r3
    3844:	4f 92       	push	r4
    3846:	5f 92       	push	r5
    3848:	6f 92       	push	r6
    384a:	7f 92       	push	r7
    384c:	8f 92       	push	r8
    384e:	9f 92       	push	r9
    3850:	af 92       	push	r10
    3852:	bf 92       	push	r11
    3854:	cf 92       	push	r12
    3856:	df 92       	push	r13
    3858:	ef 92       	push	r14
    385a:	ff 92       	push	r15
    385c:	0f 93       	push	r16
    385e:	1f 93       	push	r17
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	ca 1b       	sub	r28, r26
    386a:	db 0b       	sbc	r29, r27
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	09 94       	ijmp

00003878 <__epilogue_restores__>:
    3878:	2a 88       	ldd	r2, Y+18	; 0x12
    387a:	39 88       	ldd	r3, Y+17	; 0x11
    387c:	48 88       	ldd	r4, Y+16	; 0x10
    387e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3880:	6e 84       	ldd	r6, Y+14	; 0x0e
    3882:	7d 84       	ldd	r7, Y+13	; 0x0d
    3884:	8c 84       	ldd	r8, Y+12	; 0x0c
    3886:	9b 84       	ldd	r9, Y+11	; 0x0b
    3888:	aa 84       	ldd	r10, Y+10	; 0x0a
    388a:	b9 84       	ldd	r11, Y+9	; 0x09
    388c:	c8 84       	ldd	r12, Y+8	; 0x08
    388e:	df 80       	ldd	r13, Y+7	; 0x07
    3890:	ee 80       	ldd	r14, Y+6	; 0x06
    3892:	fd 80       	ldd	r15, Y+5	; 0x05
    3894:	0c 81       	ldd	r16, Y+4	; 0x04
    3896:	1b 81       	ldd	r17, Y+3	; 0x03
    3898:	aa 81       	ldd	r26, Y+2	; 0x02
    389a:	b9 81       	ldd	r27, Y+1	; 0x01
    389c:	ce 0f       	add	r28, r30
    389e:	d1 1d       	adc	r29, r1
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	ed 01       	movw	r28, r26
    38ac:	08 95       	ret

000038ae <_exit>:
    38ae:	f8 94       	cli

000038b0 <__stop_program>:
    38b0:	ff cf       	rjmp	.-2      	; 0x38b0 <__stop_program>
