
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00003d24  00003dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d24  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ab  00800132  00800132  00003e0a  2**0
                  ALLOC
  3 .eeprom       00000029  00810000  00810000  00003e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005bec  00000000  00000000  00003e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000237c  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_16>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e4 e2       	ldi	r30, 0x24	; 36
     1b8:	fd e3       	ldi	r31, 0x3D	; 61
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a2 33       	cpi	r26, 0x32	; 50
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	a2 e3       	ldi	r26, 0x32	; 50
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	ad 3d       	cpi	r26, 0xDD	; 221
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <main>
     1da:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_16>:
// Timer0 ISR
//
// Timer0 does double duty as the PWM register and also as the sinewave generator during the
// overflow ISR.
ISR(TIMER0_OVF_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_16+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 32 01 	lds	r24, 0x0132
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_16+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_16+0xae>
	{
		//SIDETONE_DDR |= _BV(SIDETONE);

		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 96 01 	lds	r18, 0x0196
     21c:	30 91 97 01 	lds	r19, 0x0197
     220:	40 91 98 01 	lds	r20, 0x0198
     224:	50 91 99 01 	lds	r21, 0x0199
     228:	80 91 a8 01 	lds	r24, 0x01A8
     22c:	90 91 a9 01 	lds	r25, 0x01A9
     230:	a0 91 aa 01 	lds	r26, 0x01AA
     234:	b0 91 ab 01 	lds	r27, 0x01AB
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 96 01 	sts	0x0196, r24
     244:	90 93 97 01 	sts	0x0197, r25
     248:	a0 93 98 01 	sts	0x0198, r26
     24c:	b0 93 99 01 	sts	0x0199, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 96 01 	lds	r24, 0x0196
     254:	90 91 97 01 	lds	r25, 0x0197
     258:	a0 91 98 01 	lds	r26, 0x0198
     25c:	b0 91 99 01 	lds	r27, 0x0199
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 64 01 	sts	0x0164, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 64 01 	lds	r18, 0x0164
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
		// Hi-Z the port when not using
		SIDETONE_DDR &= ~(_BV(SIDETONE));
		OCR0A = 0;
	}
	*/
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(((timer > mute_start) && (timer < mute_end)) || (mute_on == TRUE))
     2e4:	20 91 66 01 	lds	r18, 0x0166
     2e8:	30 91 67 01 	lds	r19, 0x0167
     2ec:	40 91 68 01 	lds	r20, 0x0168
     2f0:	50 91 69 01 	lds	r21, 0x0169
     2f4:	80 91 cd 01 	lds	r24, 0x01CD
     2f8:	90 91 ce 01 	lds	r25, 0x01CE
     2fc:	a0 91 cf 01 	lds	r26, 0x01CF
     300:	b0 91 d0 01 	lds	r27, 0x01D0
     304:	82 17       	cp	r24, r18
     306:	93 07       	cpc	r25, r19
     308:	a4 07       	cpc	r26, r20
     30a:	b5 07       	cpc	r27, r21
     30c:	a8 f4       	brcc	.+42     	; 0x338 <__vector_7+0x7e>
     30e:	20 91 66 01 	lds	r18, 0x0166
     312:	30 91 67 01 	lds	r19, 0x0167
     316:	40 91 68 01 	lds	r20, 0x0168
     31a:	50 91 69 01 	lds	r21, 0x0169
     31e:	80 91 c2 01 	lds	r24, 0x01C2
     322:	90 91 c3 01 	lds	r25, 0x01C3
     326:	a0 91 c4 01 	lds	r26, 0x01C4
     32a:	b0 91 c5 01 	lds	r27, 0x01C5
     32e:	28 17       	cp	r18, r24
     330:	39 07       	cpc	r19, r25
     332:	4a 07       	cpc	r20, r26
     334:	5b 07       	cpc	r21, r27
     336:	20 f0       	brcs	.+8      	; 0x340 <__vector_7+0x86>
     338:	80 91 33 01 	lds	r24, 0x0133
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	51 f4       	brne	.+20     	; 0x354 <__vector_7+0x9a>
		MUTE_PORT |= _BV(MUTE);
     340:	88 e2       	ldi	r24, 0x28	; 40
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	28 e2       	ldi	r18, 0x28	; 40
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	f9 01       	movw	r30, r18
     34a:	20 81       	ld	r18, Z
     34c:	20 62       	ori	r18, 0x20	; 32
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
     352:	09 c0       	rjmp	.+18     	; 0x366 <__vector_7+0xac>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     354:	88 e2       	ldi	r24, 0x28	; 40
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	28 e2       	ldi	r18, 0x28	; 40
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	f9 01       	movw	r30, r18
     35e:	20 81       	ld	r18, Z
     360:	2f 7d       	andi	r18, 0xDF	; 223
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
	else
		set_dds_freq_reg(REG_0);
		*/

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     366:	80 91 34 01 	lds	r24, 0x0134
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	d9 f5       	brne	.+118    	; 0x3e4 <__vector_7+0x12a>
     36e:	20 91 66 01 	lds	r18, 0x0166
     372:	30 91 67 01 	lds	r19, 0x0167
     376:	40 91 68 01 	lds	r20, 0x0168
     37a:	50 91 69 01 	lds	r21, 0x0169
     37e:	80 91 d3 01 	lds	r24, 0x01D3
     382:	90 91 d4 01 	lds	r25, 0x01D4
     386:	a0 91 d5 01 	lds	r26, 0x01D5
     38a:	b0 91 d6 01 	lds	r27, 0x01D6
     38e:	28 17       	cp	r18, r24
     390:	39 07       	cpc	r19, r25
     392:	4a 07       	cpc	r20, r26
     394:	5b 07       	cpc	r21, r27
     396:	30 f5       	brcc	.+76     	; 0x3e4 <__vector_7+0x12a>
     398:	20 91 66 01 	lds	r18, 0x0166
     39c:	30 91 67 01 	lds	r19, 0x0167
     3a0:	40 91 68 01 	lds	r20, 0x0168
     3a4:	50 91 69 01 	lds	r21, 0x0169
     3a8:	80 91 a0 01 	lds	r24, 0x01A0
     3ac:	90 91 a1 01 	lds	r25, 0x01A1
     3b0:	a0 91 a2 01 	lds	r26, 0x01A2
     3b4:	b0 91 a3 01 	lds	r27, 0x01A3
     3b8:	82 17       	cp	r24, r18
     3ba:	93 07       	cpc	r25, r19
     3bc:	a4 07       	cpc	r26, r20
     3be:	b5 07       	cpc	r27, r21
     3c0:	88 f4       	brcc	.+34     	; 0x3e4 <__vector_7+0x12a>
	{
		if(rit_enable == TRUE)
     3c2:	80 91 d8 01 	lds	r24, 0x01D8
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	19 f4       	brne	.+6      	; 0x3d0 <__vector_7+0x116>
			set_dds_freq_reg(REG_1);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 19 0a 	call	0x1432	; 0x1432 <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     3d0:	88 e2       	ldi	r24, 0x28	; 40
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	28 e2       	ldi	r18, 0x28	; 40
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	20 61       	ori	r18, 0x10	; 16
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
     3e2:	0c c0       	rjmp	.+24     	; 0x3fc <__vector_7+0x142>
	}
	else
	{
		set_dds_freq_reg(REG_0);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	0e 94 19 0a 	call	0x1432	; 0x1432 <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     3ea:	88 e2       	ldi	r24, 0x28	; 40
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	28 e2       	ldi	r18, 0x28	; 40
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	f9 01       	movw	r30, r18
     3f4:	20 81       	ld	r18, Z
     3f6:	2f 7e       	andi	r18, 0xEF	; 239
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
	}

	debounce(FALSE);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 04 04 	call	0x808	; 0x808 <debounce>

	// Need to consider timer overflow?
	timer++;
     402:	80 91 66 01 	lds	r24, 0x0166
     406:	90 91 67 01 	lds	r25, 0x0167
     40a:	a0 91 68 01 	lds	r26, 0x0168
     40e:	b0 91 69 01 	lds	r27, 0x0169
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	80 93 66 01 	sts	0x0166, r24
     41c:	90 93 67 01 	sts	0x0167, r25
     420:	a0 93 68 01 	sts	0x0168, r26
     424:	b0 93 69 01 	sts	0x0169, r27
}
     428:	cf 91       	pop	r28
     42a:	df 91       	pop	r29
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     46c:	88 e6       	ldi	r24, 0x68	; 104
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	fc 01       	movw	r30, r24
     472:	10 82       	st	Z, r1

	cur_mode = default_mode;
     474:	80 91 65 01 	lds	r24, 0x0165
     478:	80 93 9a 01 	sts	0x019A, r24
	cur_state = IDLE;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 ba 01 	sts	0x01BA, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 20;
     482:	80 91 60 01 	lds	r24, 0x0160
     486:	90 91 61 01 	lds	r25, 0x0161
     48a:	a0 91 62 01 	lds	r26, 0x0162
     48e:	b0 91 63 01 	lds	r27, 0x0163
     492:	44 96       	adiw	r24, 0x14	; 20
     494:	a1 1d       	adc	r26, r1
     496:	b1 1d       	adc	r27, r1
     498:	80 93 be 01 	sts	0x01BE, r24
     49c:	90 93 bf 01 	sts	0x01BF, r25
     4a0:	a0 93 c0 01 	sts	0x01C0, r26
     4a4:	b0 93 c1 01 	sts	0x01C1, r27
	//mute_on = TRUE;
}
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <init>:

void init(void)
{
     4c2:	df 93       	push	r29
     4c4:	cf 93       	push	r28
     4c6:	0f 92       	push	r0
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     4cc:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     4ce:	81 e6       	ldi	r24, 0x61	; 97
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	20 e8       	ldi	r18, 0x80	; 128
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
	CLKPR = 0;
     4d8:	81 e6       	ldi	r24, 0x61	; 97
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     4e0:	84 e4       	ldi	r24, 0x44	; 68
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	21 e8       	ldi	r18, 0x81	; 129
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     4ea:	85 e4       	ldi	r24, 0x45	; 69
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
	TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt
     4f4:	8e e6       	ldi	r24, 0x6E	; 110
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	2e e6       	ldi	r18, 0x6E	; 110
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	f9 01       	movw	r30, r18
     4fe:	20 81       	ld	r18, Z
     500:	21 60       	ori	r18, 0x01	; 1
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     506:	80 eb       	ldi	r24, 0xB0	; 176
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	22 e0       	ldi	r18, 0x02	; 2
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     510:	81 eb       	ldi	r24, 0xB1	; 177
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	24 e0       	ldi	r18, 0x04	; 4
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     51a:	80 e7       	ldi	r24, 0x70	; 112
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	20 e7       	ldi	r18, 0x70	; 112
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	f9 01       	movw	r30, r18
     524:	20 81       	ld	r18, Z
     526:	22 60       	ori	r18, 0x02	; 2
     528:	fc 01       	movw	r30, r24
     52a:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     52c:	83 eb       	ldi	r24, 0xB3	; 179
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	29 ef       	ldi	r18, 0xF9	; 249
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     536:	8a e7       	ldi	r24, 0x7A	; 122
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	2a e7       	ldi	r18, 0x7A	; 122
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	f9 01       	movw	r30, r18
     540:	20 81       	ld	r18, Z
     542:	24 68       	ori	r18, 0x84	; 132
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     548:	8c e7       	ldi	r24, 0x7C	; 124
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	20 e6       	ldi	r18, 0x60	; 96
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     552:	8b e6       	ldi	r24, 0x6B	; 107
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	21 e0       	ldi	r18, 0x01	; 1
     558:	fc 01       	movw	r30, r24
     55a:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) | _BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     55c:	8d e6       	ldi	r24, 0x6D	; 109
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	2f e9       	ldi	r18, 0x9F	; 159
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     566:	8a e2       	ldi	r24, 0x2A	; 42
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	2a e2       	ldi	r18, 0x2A	; 42
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	20 64       	ori	r18, 0x40	; 64
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     578:	87 e2       	ldi	r24, 0x27	; 39
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	27 e2       	ldi	r18, 0x27	; 39
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	f9 01       	movw	r30, r18
     582:	20 81       	ld	r18, Z
     584:	20 62       	ori	r18, 0x20	; 32
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     58a:	87 e2       	ldi	r24, 0x27	; 39
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	27 e2       	ldi	r18, 0x27	; 39
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	f9 01       	movw	r30, r18
     594:	20 81       	ld	r18, Z
     596:	20 61       	ori	r18, 0x10	; 16
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     59c:	87 e2       	ldi	r24, 0x27	; 39
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	27 e2       	ldi	r18, 0x27	; 39
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	f9 01       	movw	r30, r18
     5a6:	20 81       	ld	r18, Z
     5a8:	2d 7f       	andi	r18, 0xFD	; 253
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     5ae:	88 e2       	ldi	r24, 0x28	; 40
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	28 e2       	ldi	r18, 0x28	; 40
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	2d 7f       	andi	r18, 0xFD	; 253
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     5c0:	8a e2       	ldi	r24, 0x2A	; 42
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	2a e2       	ldi	r18, 0x2A	; 42
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	20 81       	ld	r18, Z
     5cc:	27 7f       	andi	r18, 0xF7	; 247
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     5d2:	8b e2       	ldi	r24, 0x2B	; 43
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	2b e2       	ldi	r18, 0x2B	; 43
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	f9 01       	movw	r30, r18
     5dc:	20 81       	ld	r18, Z
     5de:	28 60       	ori	r18, 0x08	; 8
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     5e4:	8a e2       	ldi	r24, 0x2A	; 42
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	2a e2       	ldi	r18, 0x2A	; 42
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	f9 01       	movw	r30, r18
     5ee:	20 81       	ld	r18, Z
     5f0:	2f 7e       	andi	r18, 0xEF	; 239
     5f2:	fc 01       	movw	r30, r24
     5f4:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     5f6:	8b e2       	ldi	r24, 0x2B	; 43
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	2b e2       	ldi	r18, 0x2B	; 43
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	f9 01       	movw	r30, r18
     600:	20 81       	ld	r18, Z
     602:	20 61       	ori	r18, 0x10	; 16
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     608:	8a e2       	ldi	r24, 0x2A	; 42
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	2a e2       	ldi	r18, 0x2A	; 42
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	f9 01       	movw	r30, r18
     612:	20 81       	ld	r18, Z
     614:	2b 7f       	andi	r18, 0xFB	; 251
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     61a:	8b e2       	ldi	r24, 0x2B	; 43
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	2b e2       	ldi	r18, 0x2B	; 43
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	f9 01       	movw	r30, r18
     624:	20 81       	ld	r18, Z
     626:	24 60       	ori	r18, 0x04	; 4
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     62c:	8a e2       	ldi	r24, 0x2A	; 42
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	2a e2       	ldi	r18, 0x2A	; 42
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	2d 7f       	andi	r18, 0xFD	; 253
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     63e:	8b e2       	ldi	r24, 0x2B	; 43
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	2b e2       	ldi	r18, 0x2B	; 43
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	f9 01       	movw	r30, r18
     648:	20 81       	ld	r18, Z
     64a:	22 60       	ori	r18, 0x02	; 2
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     650:	84 e2       	ldi	r24, 0x24	; 36
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	24 e2       	ldi	r18, 0x24	; 36
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	2e 7f       	andi	r18, 0xFE	; 254
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     662:	85 e2       	ldi	r24, 0x25	; 37
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	25 e2       	ldi	r18, 0x25	; 37
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	f9 01       	movw	r30, r18
     66c:	20 81       	ld	r18, Z
     66e:	21 60       	ori	r18, 0x01	; 1
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     674:	8a e2       	ldi	r24, 0x2A	; 42
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	2a e2       	ldi	r18, 0x2A	; 42
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	20 81       	ld	r18, Z
     680:	2f 77       	andi	r18, 0x7F	; 127
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     686:	8b e2       	ldi	r24, 0x2B	; 43
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	2b e2       	ldi	r18, 0x2B	; 43
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	20 68       	ori	r18, 0x80	; 128
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     698:	8a e2       	ldi	r24, 0x2A	; 42
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	2a e2       	ldi	r18, 0x2A	; 42
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	2e 7f       	andi	r18, 0xFE	; 254
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     6aa:	8b e2       	ldi	r24, 0x2B	; 43
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2b e2       	ldi	r18, 0x2B	; 43
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	21 60       	ori	r18, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     6bc:	84 e2       	ldi	r24, 0x24	; 36
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	24 e2       	ldi	r18, 0x24	; 36
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	2e 62       	ori	r18, 0x2E	; 46
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     6ce:	8c e4       	ldi	r24, 0x4C	; 76
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	29 e5       	ldi	r18, 0x59	; 89
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     6d8:	8d e4       	ldi	r24, 0x4D	; 77
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	fc 01       	movw	r30, r24
     6de:	80 81       	ld	r24, Z
     6e0:	89 83       	std	Y+1, r24	; 0x01
	spi_data = SPDR;
     6e2:	8e e4       	ldi	r24, 0x4E	; 78
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	89 83       	std	Y+1, r24	; 0x01

	// Power saving
	power_twi_disable();
     6ec:	84 e6       	ldi	r24, 0x64	; 100
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	24 e6       	ldi	r18, 0x64	; 100
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	20 81       	ld	r18, Z
     6f8:	20 68       	ori	r18, 0x80	; 128
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
	power_usart0_disable();
     6fe:	84 e6       	ldi	r24, 0x64	; 100
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	24 e6       	ldi	r18, 0x64	; 100
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	f9 01       	movw	r30, r18
     708:	20 81       	ld	r18, Z
     70a:	22 60       	ori	r18, 0x02	; 2
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 6a 01 	sts	0x016A, r24
	cur_state = IDLE;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 ba 01 	sts	0x01BA, r24
	next_state = IDLE;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 9f 01 	sts	0x019F, r24

	timer = 0;
     722:	10 92 66 01 	sts	0x0166, r1
     726:	10 92 67 01 	sts	0x0167, r1
     72a:	10 92 68 01 	sts	0x0168, r1
     72e:	10 92 69 01 	sts	0x0169, r1

	eeprom_busy_wait();
     732:	8f e3       	ldi	r24, 0x3F	; 63
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	82 70       	andi	r24, 0x02	; 2
     740:	90 70       	andi	r25, 0x00	; 0
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	b1 f7       	brne	.-20     	; 0x732 <__stack+0x233>
	wpm = eeprom_read_byte(&ee_wpm);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <__eerd_byte_m168>
     74e:	80 93 cc 01 	sts	0x01CC, r24
	set_wpm(wpm);
     752:	80 91 cc 01 	lds	r24, 0x01CC
     756:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <set_wpm>

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = 0x05111F0C;
     75a:	8c e0       	ldi	r24, 0x0C	; 12
     75c:	9f e1       	ldi	r25, 0x1F	; 31
     75e:	a1 e1       	ldi	r26, 0x11	; 17
     760:	b5 e0       	ldi	r27, 0x05	; 5
     762:	80 93 a4 01 	sts	0x01A4, r24
     766:	90 93 a5 01 	sts	0x01A5, r25
     76a:	a0 93 a6 01 	sts	0x01A6, r26
     76e:	b0 93 a7 01 	sts	0x01A7, r27
	tune_freq = 14060000;
     772:	80 ee       	ldi	r24, 0xE0	; 224
     774:	99 e8       	ldi	r25, 0x89	; 137
     776:	a6 ed       	ldi	r26, 0xD6	; 214
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	80 93 c8 01 	sts	0x01C8, r24
     77e:	90 93 c9 01 	sts	0x01C9, r25
     782:	a0 93 ca 01 	sts	0x01CA, r26
     786:	b0 93 cb 01 	sts	0x01CB, r27
	init_dds(dds_freq_word, REG_0);
     78a:	80 91 a4 01 	lds	r24, 0x01A4
     78e:	90 91 a5 01 	lds	r25, 0x01A5
     792:	a0 91 a6 01 	lds	r26, 0x01A6
     796:	b0 91 a7 01 	lds	r27, 0x01A7
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	0e 94 80 09 	call	0x1300	; 0x1300 <init_dds>
	tune_dds(dds_freq_word, REG_1);
     7a4:	80 91 a4 01 	lds	r24, 0x01A4
     7a8:	90 91 a5 01 	lds	r25, 0x01A5
     7ac:	a0 91 a6 01 	lds	r26, 0x01A6
     7b0:	b0 91 a7 01 	lds	r27, 0x01A7
     7b4:	bc 01       	movw	r22, r24
     7b6:	cd 01       	movw	r24, r26
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	0e 94 35 09 	call	0x126a	; 0x126a <tune_dds>
	set_st_freq(ST_DEFAULT);
     7be:	68 e5       	ldi	r22, 0x58	; 88
     7c0:	72 e0       	ldi	r23, 0x02	; 2
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 2f 0a 	call	0x145e	; 0x145e <set_st_freq>

	rit_enable = FALSE;
     7ca:	10 92 d8 01 	sts	0x01D8, r1

	// Enable interrupts
	sei();
     7ce:	78 94       	sei
}
     7d0:	0f 90       	pop	r0
     7d2:	cf 91       	pop	r28
     7d4:	df 91       	pop	r29
     7d6:	08 95       	ret

000007d8 <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	0f 92       	push	r0
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 100 us per timer tick (dividing by 0.1 ms, so multiply by 10)
	dit_length = (1200 / new_wpm);
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	80 eb       	ldi	r24, 0xB0	; 176
     7ec:	94 e0       	ldi	r25, 0x04	; 4
     7ee:	b9 01       	movw	r22, r18
     7f0:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__divmodhi4>
     7f4:	9b 01       	movw	r18, r22
     7f6:	c9 01       	movw	r24, r18
     7f8:	90 93 6c 01 	sts	0x016C, r25
     7fc:	80 93 6b 01 	sts	0x016B, r24
}
     800:	0f 90       	pop	r0
     802:	cf 91       	pop	r28
     804:	df 91       	pop	r29
     806:	08 95       	ret

00000808 <debounce>:

void debounce(enum BOOL flush)
{
     808:	df 93       	push	r29
     80a:	cf 93       	push	r28
     80c:	0f 92       	push	r0
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	01 f5       	brne	.+64     	; 0x85a <debounce+0x52>
	{
		dit_on_count = 0;
     81a:	10 92 48 01 	sts	0x0148, r1
     81e:	10 92 47 01 	sts	0x0147, r1
		dah_on_count = 0;
     822:	10 92 4a 01 	sts	0x014A, r1
     826:	10 92 49 01 	sts	0x0149, r1
		dit_off_count = 0;
     82a:	10 92 4c 01 	sts	0x014C, r1
     82e:	10 92 4b 01 	sts	0x014B, r1
		dah_off_count = 0;
     832:	10 92 4e 01 	sts	0x014E, r1
     836:	10 92 4d 01 	sts	0x014D, r1
		cmd_on_count = 0;
     83a:	10 92 50 01 	sts	0x0150, r1
     83e:	10 92 4f 01 	sts	0x014F, r1
		msg_on_count = 0;
     842:	10 92 52 01 	sts	0x0152, r1
     846:	10 92 51 01 	sts	0x0151, r1
		both_on_count = 0;
     84a:	10 92 54 01 	sts	0x0154, r1
     84e:	10 92 53 01 	sts	0x0153, r1
		enc_on_count = 0;
     852:	10 92 56 01 	sts	0x0156, r1
     856:	10 92 55 01 	sts	0x0155, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     85a:	89 e2       	ldi	r24, 0x29	; 41
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	88 70       	andi	r24, 0x08	; 8
     868:	90 70       	andi	r25, 0x00	; 0
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	a9 f4       	brne	.+42     	; 0x898 <debounce+0x90>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     86e:	80 91 47 01 	lds	r24, 0x0147
     872:	90 91 48 01 	lds	r25, 0x0148
     876:	85 30       	cpi	r24, 0x05	; 5
     878:	91 05       	cpc	r25, r1
     87a:	48 f4       	brcc	.+18     	; 0x88e <debounce+0x86>
			dit_on_count++;
     87c:	80 91 47 01 	lds	r24, 0x0147
     880:	90 91 48 01 	lds	r25, 0x0148
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	90 93 48 01 	sts	0x0148, r25
     88a:	80 93 47 01 	sts	0x0147, r24
		dit_off_count = 0;
     88e:	10 92 4c 01 	sts	0x014C, r1
     892:	10 92 4b 01 	sts	0x014B, r1
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <debounce+0xb8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     898:	80 91 4b 01 	lds	r24, 0x014B
     89c:	90 91 4c 01 	lds	r25, 0x014C
     8a0:	85 30       	cpi	r24, 0x05	; 5
     8a2:	91 05       	cpc	r25, r1
     8a4:	48 f4       	brcc	.+18     	; 0x8b8 <debounce+0xb0>
			dit_off_count++;
     8a6:	80 91 4b 01 	lds	r24, 0x014B
     8aa:	90 91 4c 01 	lds	r25, 0x014C
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	90 93 4c 01 	sts	0x014C, r25
     8b4:	80 93 4b 01 	sts	0x014B, r24
		dit_on_count = 0;
     8b8:	10 92 48 01 	sts	0x0148, r1
     8bc:	10 92 47 01 	sts	0x0147, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     8c0:	89 e2       	ldi	r24, 0x29	; 41
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	80 71       	andi	r24, 0x10	; 16
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	a9 f4       	brne	.+42     	; 0x8fe <debounce+0xf6>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     8d4:	80 91 49 01 	lds	r24, 0x0149
     8d8:	90 91 4a 01 	lds	r25, 0x014A
     8dc:	85 30       	cpi	r24, 0x05	; 5
     8de:	91 05       	cpc	r25, r1
     8e0:	48 f4       	brcc	.+18     	; 0x8f4 <debounce+0xec>
			dah_on_count++;
     8e2:	80 91 49 01 	lds	r24, 0x0149
     8e6:	90 91 4a 01 	lds	r25, 0x014A
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	90 93 4a 01 	sts	0x014A, r25
     8f0:	80 93 49 01 	sts	0x0149, r24
		dah_off_count = 0;
     8f4:	10 92 4e 01 	sts	0x014E, r1
     8f8:	10 92 4d 01 	sts	0x014D, r1
     8fc:	14 c0       	rjmp	.+40     	; 0x926 <debounce+0x11e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     8fe:	80 91 4d 01 	lds	r24, 0x014D
     902:	90 91 4e 01 	lds	r25, 0x014E
     906:	85 30       	cpi	r24, 0x05	; 5
     908:	91 05       	cpc	r25, r1
     90a:	48 f4       	brcc	.+18     	; 0x91e <debounce+0x116>
			dah_off_count++;
     90c:	80 91 4d 01 	lds	r24, 0x014D
     910:	90 91 4e 01 	lds	r25, 0x014E
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	90 93 4e 01 	sts	0x014E, r25
     91a:	80 93 4d 01 	sts	0x014D, r24
		dah_on_count = 0;
     91e:	10 92 4a 01 	sts	0x014A, r1
     922:	10 92 49 01 	sts	0x0149, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     926:	80 91 47 01 	lds	r24, 0x0147
     92a:	90 91 48 01 	lds	r25, 0x0148
     92e:	85 30       	cpi	r24, 0x05	; 5
     930:	91 05       	cpc	r25, r1
     932:	18 f0       	brcs	.+6      	; 0x93a <debounce+0x132>
		dit_active = TRUE;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 c6 01 	sts	0x01C6, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     93a:	80 91 4b 01 	lds	r24, 0x014B
     93e:	90 91 4c 01 	lds	r25, 0x014C
     942:	85 30       	cpi	r24, 0x05	; 5
     944:	91 05       	cpc	r25, r1
     946:	10 f0       	brcs	.+4      	; 0x94c <debounce+0x144>
		dit_active = FALSE;
     948:	10 92 c6 01 	sts	0x01C6, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     94c:	80 91 49 01 	lds	r24, 0x0149
     950:	90 91 4a 01 	lds	r25, 0x014A
     954:	85 30       	cpi	r24, 0x05	; 5
     956:	91 05       	cpc	r25, r1
     958:	18 f0       	brcs	.+6      	; 0x960 <debounce+0x158>
		dah_active = TRUE;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 b6 01 	sts	0x01B6, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     960:	80 91 4d 01 	lds	r24, 0x014D
     964:	90 91 4e 01 	lds	r25, 0x014E
     968:	85 30       	cpi	r24, 0x05	; 5
     96a:	91 05       	cpc	r25, r1
     96c:	10 f0       	brcs	.+4      	; 0x972 <debounce+0x16a>
		dah_active = FALSE;
     96e:	10 92 b6 01 	sts	0x01B6, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     972:	89 e2       	ldi	r24, 0x29	; 41
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	fc 01       	movw	r30, r24
     978:	80 81       	ld	r24, Z
     97a:	88 2f       	mov	r24, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	84 70       	andi	r24, 0x04	; 4
     980:	90 70       	andi	r25, 0x00	; 0
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	a1 f4       	brne	.+40     	; 0x9ae <debounce+0x1a6>
     986:	89 e2       	ldi	r24, 0x29	; 41
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	80 81       	ld	r24, Z
     98e:	88 2f       	mov	r24, r24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	82 70       	andi	r24, 0x02	; 2
     994:	90 70       	andi	r25, 0x00	; 0
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	51 f4       	brne	.+20     	; 0x9ae <debounce+0x1a6>
		both_on_count++;
     99a:	80 91 53 01 	lds	r24, 0x0153
     99e:	90 91 54 01 	lds	r25, 0x0154
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	90 93 54 01 	sts	0x0154, r25
     9a8:	80 93 53 01 	sts	0x0153, r24
     9ac:	25 c0       	rjmp	.+74     	; 0x9f8 <debounce+0x1f0>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     9ae:	80 91 53 01 	lds	r24, 0x0153
     9b2:	90 91 54 01 	lds	r25, 0x0154
     9b6:	85 30       	cpi	r24, 0x05	; 5
     9b8:	91 05       	cpc	r25, r1
     9ba:	60 f0       	brcs	.+24     	; 0x9d4 <debounce+0x1cc>
     9bc:	80 91 53 01 	lds	r24, 0x0153
     9c0:	90 91 54 01 	lds	r25, 0x0154
     9c4:	f3 e0       	ldi	r31, 0x03	; 3
     9c6:	80 32       	cpi	r24, 0x20	; 32
     9c8:	9f 07       	cpc	r25, r31
     9ca:	20 f4       	brcc	.+8      	; 0x9d4 <debounce+0x1cc>
			both_btn = PRESS;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 b8 01 	sts	0x01B8, r24
     9d2:	0e c0       	rjmp	.+28     	; 0x9f0 <debounce+0x1e8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     9d4:	80 91 53 01 	lds	r24, 0x0153
     9d8:	90 91 54 01 	lds	r25, 0x0154
     9dc:	23 e0       	ldi	r18, 0x03	; 3
     9de:	80 32       	cpi	r24, 0x20	; 32
     9e0:	92 07       	cpc	r25, r18
     9e2:	20 f0       	brcs	.+8      	; 0x9ec <debounce+0x1e4>
			both_btn = HOLD;
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	80 93 b8 01 	sts	0x01B8, r24
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <debounce+0x1e8>
		else
			both_btn = OFF;
     9ec:	10 92 b8 01 	sts	0x01B8, r1

		both_on_count = 0;
     9f0:	10 92 54 01 	sts	0x0154, r1
     9f4:	10 92 53 01 	sts	0x0153, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     9f8:	89 e2       	ldi	r24, 0x29	; 41
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	fc 01       	movw	r30, r24
     9fe:	80 81       	ld	r24, Z
     a00:	88 2f       	mov	r24, r24
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	84 70       	andi	r24, 0x04	; 4
     a06:	90 70       	andi	r25, 0x00	; 0
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	51 f4       	brne	.+20     	; 0xa20 <debounce+0x218>
	{
		cmd_on_count++;
     a0c:	80 91 4f 01 	lds	r24, 0x014F
     a10:	90 91 50 01 	lds	r25, 0x0150
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	90 93 50 01 	sts	0x0150, r25
     a1a:	80 93 4f 01 	sts	0x014F, r24
     a1e:	25 c0       	rjmp	.+74     	; 0xa6a <debounce+0x262>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     a20:	80 91 4f 01 	lds	r24, 0x014F
     a24:	90 91 50 01 	lds	r25, 0x0150
     a28:	85 30       	cpi	r24, 0x05	; 5
     a2a:	91 05       	cpc	r25, r1
     a2c:	60 f0       	brcs	.+24     	; 0xa46 <debounce+0x23e>
     a2e:	80 91 4f 01 	lds	r24, 0x014F
     a32:	90 91 50 01 	lds	r25, 0x0150
     a36:	f3 e0       	ldi	r31, 0x03	; 3
     a38:	80 32       	cpi	r24, 0x20	; 32
     a3a:	9f 07       	cpc	r25, r31
     a3c:	20 f4       	brcc	.+8      	; 0xa46 <debounce+0x23e>
			cmd_btn = PRESS;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 b9 01 	sts	0x01B9, r24
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <debounce+0x25a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     a46:	80 91 4f 01 	lds	r24, 0x014F
     a4a:	90 91 50 01 	lds	r25, 0x0150
     a4e:	23 e0       	ldi	r18, 0x03	; 3
     a50:	80 32       	cpi	r24, 0x20	; 32
     a52:	92 07       	cpc	r25, r18
     a54:	20 f0       	brcs	.+8      	; 0xa5e <debounce+0x256>
			cmd_btn = HOLD;
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	80 93 b9 01 	sts	0x01B9, r24
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <debounce+0x25a>
		else
			cmd_btn = OFF;
     a5e:	10 92 b9 01 	sts	0x01B9, r1

		cmd_on_count = 0;
     a62:	10 92 50 01 	sts	0x0150, r1
     a66:	10 92 4f 01 	sts	0x014F, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     a6a:	89 e2       	ldi	r24, 0x29	; 41
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	fc 01       	movw	r30, r24
     a70:	80 81       	ld	r24, Z
     a72:	88 2f       	mov	r24, r24
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	82 70       	andi	r24, 0x02	; 2
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	51 f4       	brne	.+20     	; 0xa92 <debounce+0x28a>
		msg_on_count++;
     a7e:	80 91 51 01 	lds	r24, 0x0151
     a82:	90 91 52 01 	lds	r25, 0x0152
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	90 93 52 01 	sts	0x0152, r25
     a8c:	80 93 51 01 	sts	0x0151, r24
     a90:	25 c0       	rjmp	.+74     	; 0xadc <debounce+0x2d4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     a92:	80 91 51 01 	lds	r24, 0x0151
     a96:	90 91 52 01 	lds	r25, 0x0152
     a9a:	85 30       	cpi	r24, 0x05	; 5
     a9c:	91 05       	cpc	r25, r1
     a9e:	60 f0       	brcs	.+24     	; 0xab8 <debounce+0x2b0>
     aa0:	80 91 51 01 	lds	r24, 0x0151
     aa4:	90 91 52 01 	lds	r25, 0x0152
     aa8:	f3 e0       	ldi	r31, 0x03	; 3
     aaa:	80 32       	cpi	r24, 0x20	; 32
     aac:	9f 07       	cpc	r25, r31
     aae:	20 f4       	brcc	.+8      	; 0xab8 <debounce+0x2b0>
			msg_btn = PRESS;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 93 b7 01 	sts	0x01B7, r24
     ab6:	0e c0       	rjmp	.+28     	; 0xad4 <debounce+0x2cc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     ab8:	80 91 51 01 	lds	r24, 0x0151
     abc:	90 91 52 01 	lds	r25, 0x0152
     ac0:	23 e0       	ldi	r18, 0x03	; 3
     ac2:	80 32       	cpi	r24, 0x20	; 32
     ac4:	92 07       	cpc	r25, r18
     ac6:	20 f0       	brcs	.+8      	; 0xad0 <debounce+0x2c8>
			msg_btn = HOLD;
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	80 93 b7 01 	sts	0x01B7, r24
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <debounce+0x2cc>
		else
			msg_btn = OFF;
     ad0:	10 92 b7 01 	sts	0x01B7, r1

		msg_on_count = 0;
     ad4:	10 92 52 01 	sts	0x0152, r1
     ad8:	10 92 51 01 	sts	0x0151, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     adc:	89 e2       	ldi	r24, 0x29	; 41
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	88 2f       	mov	r24, r24
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	81 70       	andi	r24, 0x01	; 1
     aea:	90 70       	andi	r25, 0x00	; 0
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	51 f4       	brne	.+20     	; 0xb04 <debounce+0x2fc>
		enc_on_count++;
     af0:	80 91 55 01 	lds	r24, 0x0155
     af4:	90 91 56 01 	lds	r25, 0x0156
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	90 93 56 01 	sts	0x0156, r25
     afe:	80 93 55 01 	sts	0x0155, r24
     b02:	25 c0       	rjmp	.+74     	; 0xb4e <debounce+0x346>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     b04:	80 91 55 01 	lds	r24, 0x0155
     b08:	90 91 56 01 	lds	r25, 0x0156
     b0c:	85 30       	cpi	r24, 0x05	; 5
     b0e:	91 05       	cpc	r25, r1
     b10:	60 f0       	brcs	.+24     	; 0xb2a <debounce+0x322>
     b12:	80 91 55 01 	lds	r24, 0x0155
     b16:	90 91 56 01 	lds	r25, 0x0156
     b1a:	f3 e0       	ldi	r31, 0x03	; 3
     b1c:	80 32       	cpi	r24, 0x20	; 32
     b1e:	9f 07       	cpc	r25, r31
     b20:	20 f4       	brcc	.+8      	; 0xb2a <debounce+0x322>
			enc_btn = PRESS;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 bd 01 	sts	0x01BD, r24
     b28:	0e c0       	rjmp	.+28     	; 0xb46 <debounce+0x33e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     b2a:	80 91 55 01 	lds	r24, 0x0155
     b2e:	90 91 56 01 	lds	r25, 0x0156
     b32:	23 e0       	ldi	r18, 0x03	; 3
     b34:	80 32       	cpi	r24, 0x20	; 32
     b36:	92 07       	cpc	r25, r18
     b38:	20 f0       	brcs	.+8      	; 0xb42 <debounce+0x33a>
			enc_btn = HOLD;
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	80 93 bd 01 	sts	0x01BD, r24
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <debounce+0x33e>
		else
			enc_btn = OFF;
     b42:	10 92 bd 01 	sts	0x01BD, r1

		enc_on_count = 0;
     b46:	10 92 56 01 	sts	0x0156, r1
     b4a:	10 92 55 01 	sts	0x0155, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     b4e:	83 e2       	ldi	r24, 0x23	; 35
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	fc 01       	movw	r30, r24
     b54:	80 81       	ld	r24, Z
     b56:	88 2f       	mov	r24, r24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	81 70       	andi	r24, 0x01	; 1
     b5c:	90 70       	andi	r25, 0x00	; 0
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	a9 f4       	brne	.+42     	; 0xb8c <debounce+0x384>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     b62:	80 91 57 01 	lds	r24, 0x0157
     b66:	90 91 58 01 	lds	r25, 0x0158
     b6a:	85 30       	cpi	r24, 0x05	; 5
     b6c:	91 05       	cpc	r25, r1
     b6e:	48 f4       	brcc	.+18     	; 0xb82 <debounce+0x37a>
			enca_on_count++;
     b70:	80 91 57 01 	lds	r24, 0x0157
     b74:	90 91 58 01 	lds	r25, 0x0158
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	90 93 58 01 	sts	0x0158, r25
     b7e:	80 93 57 01 	sts	0x0157, r24
		enca_off_count = 0;
     b82:	10 92 5a 01 	sts	0x015A, r1
     b86:	10 92 59 01 	sts	0x0159, r1
     b8a:	14 c0       	rjmp	.+40     	; 0xbb4 <debounce+0x3ac>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     b8c:	80 91 59 01 	lds	r24, 0x0159
     b90:	90 91 5a 01 	lds	r25, 0x015A
     b94:	85 30       	cpi	r24, 0x05	; 5
     b96:	91 05       	cpc	r25, r1
     b98:	48 f4       	brcc	.+18     	; 0xbac <debounce+0x3a4>
			enca_off_count++;
     b9a:	80 91 59 01 	lds	r24, 0x0159
     b9e:	90 91 5a 01 	lds	r25, 0x015A
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	90 93 5a 01 	sts	0x015A, r25
     ba8:	80 93 59 01 	sts	0x0159, r24
		enca_on_count = 0;
     bac:	10 92 58 01 	sts	0x0158, r1
     bb0:	10 92 57 01 	sts	0x0157, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     bb4:	89 e2       	ldi	r24, 0x29	; 41
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	88 23       	and	r24, r24
     bbe:	ac f0       	brlt	.+42     	; 0xbea <debounce+0x3e2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     bc0:	80 91 5b 01 	lds	r24, 0x015B
     bc4:	90 91 5c 01 	lds	r25, 0x015C
     bc8:	85 30       	cpi	r24, 0x05	; 5
     bca:	91 05       	cpc	r25, r1
     bcc:	48 f4       	brcc	.+18     	; 0xbe0 <debounce+0x3d8>
			encb_on_count++;
     bce:	80 91 5b 01 	lds	r24, 0x015B
     bd2:	90 91 5c 01 	lds	r25, 0x015C
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	90 93 5c 01 	sts	0x015C, r25
     bdc:	80 93 5b 01 	sts	0x015B, r24
		encb_off_count = 0;
     be0:	10 92 5e 01 	sts	0x015E, r1
     be4:	10 92 5d 01 	sts	0x015D, r1
     be8:	14 c0       	rjmp	.+40     	; 0xc12 <debounce+0x40a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     bea:	80 91 5d 01 	lds	r24, 0x015D
     bee:	90 91 5e 01 	lds	r25, 0x015E
     bf2:	85 30       	cpi	r24, 0x05	; 5
     bf4:	91 05       	cpc	r25, r1
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <debounce+0x402>
			encb_off_count++;
     bf8:	80 91 5d 01 	lds	r24, 0x015D
     bfc:	90 91 5e 01 	lds	r25, 0x015E
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	90 93 5e 01 	sts	0x015E, r25
     c06:	80 93 5d 01 	sts	0x015D, r24
		encb_on_count = 0;
     c0a:	10 92 5c 01 	sts	0x015C, r1
     c0e:	10 92 5b 01 	sts	0x015B, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     c12:	80 91 57 01 	lds	r24, 0x0157
     c16:	90 91 58 01 	lds	r25, 0x0158
     c1a:	85 30       	cpi	r24, 0x05	; 5
     c1c:	91 05       	cpc	r25, r1
     c1e:	18 f0       	brcs	.+6      	; 0xc26 <debounce+0x41e>
		enc_a = TRUE;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 5f 01 	sts	0x015F, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     c26:	80 91 59 01 	lds	r24, 0x0159
     c2a:	90 91 5a 01 	lds	r25, 0x015A
     c2e:	85 30       	cpi	r24, 0x05	; 5
     c30:	91 05       	cpc	r25, r1
     c32:	10 f0       	brcs	.+4      	; 0xc38 <debounce+0x430>
		enc_a = FALSE;
     c34:	10 92 5f 01 	sts	0x015F, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     c38:	80 91 5b 01 	lds	r24, 0x015B
     c3c:	90 91 5c 01 	lds	r25, 0x015C
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	91 05       	cpc	r25, r1
     c44:	18 f0       	brcs	.+6      	; 0xc4c <debounce+0x444>
		enc_b = TRUE;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 d7 01 	sts	0x01D7, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     c4c:	80 91 5d 01 	lds	r24, 0x015D
     c50:	90 91 5e 01 	lds	r25, 0x015E
     c54:	85 30       	cpi	r24, 0x05	; 5
     c56:	91 05       	cpc	r25, r1
     c58:	10 f0       	brcs	.+4      	; 0xc5e <debounce+0x456>
		enc_b = FALSE;
     c5a:	10 92 d7 01 	sts	0x01D7, r1

	// Don't go to sleep if there are any paddle or button presses
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
     c5e:	80 91 47 01 	lds	r24, 0x0147
     c62:	90 91 48 01 	lds	r25, 0x0148
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	c1 f4       	brne	.+48     	; 0xc9a <debounce+0x492>
     c6a:	80 91 49 01 	lds	r24, 0x0149
     c6e:	90 91 4a 01 	lds	r25, 0x014A
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	91 f4       	brne	.+36     	; 0xc9a <debounce+0x492>
     c76:	80 91 4f 01 	lds	r24, 0x014F
     c7a:	90 91 50 01 	lds	r25, 0x0150
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	61 f4       	brne	.+24     	; 0xc9a <debounce+0x492>
     c82:	80 91 51 01 	lds	r24, 0x0151
     c86:	90 91 52 01 	lds	r25, 0x0152
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	31 f4       	brne	.+12     	; 0xc9a <debounce+0x492>
     c8e:	80 91 53 01 	lds	r24, 0x0153
     c92:	90 91 54 01 	lds	r25, 0x0154
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	19 f0       	breq	.+6      	; 0xca0 <debounce+0x498>
		allow_sleep = FALSE;
     c9a:	10 92 0a 01 	sts	0x010A, r1
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <debounce+0x49e>
	else
		allow_sleep = TRUE;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 0a 01 	sts	0x010A, r24
}
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <announce>:

void announce(char * msg)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <announce+0x6>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	9a 83       	std	Y+2, r25	; 0x02
     cba:	89 83       	std	Y+1, r24	; 0x01
	// Convert to uppercase
	strupr(msg);
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     cc4:	80 91 d1 01 	lds	r24, 0x01D1
     cc8:	90 91 d2 01 	lds	r25, 0x01D2
     ccc:	29 81       	ldd	r18, Y+1	; 0x01
     cce:	3a 81       	ldd	r19, Y+2	; 0x02
     cd0:	b9 01       	movw	r22, r18
     cd2:	0e 94 56 1b 	call	0x36ac	; 0x36ac <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     cd6:	80 91 ba 01 	lds	r24, 0x01BA
     cda:	80 93 6a 01 	sts	0x016A, r24
	prev_state_end = cur_state_end;
     cde:	80 91 be 01 	lds	r24, 0x01BE
     ce2:	90 91 bf 01 	lds	r25, 0x01BF
     ce6:	a0 91 c0 01 	lds	r26, 0x01C0
     cea:	b0 91 c1 01 	lds	r27, 0x01C1
     cee:	80 93 ac 01 	sts	0x01AC, r24
     cf2:	90 93 ad 01 	sts	0x01AD, r25
     cf6:	a0 93 ae 01 	sts	0x01AE, r26
     cfa:	b0 93 af 01 	sts	0x01AF, r27
	prev_mode = cur_mode;
     cfe:	80 91 9a 01 	lds	r24, 0x019A
     d02:	80 93 b0 01 	sts	0x01B0, r24

	// Set into announce mode
	cur_state = IDLE;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 ba 01 	sts	0x01BA, r24
	cur_mode = ANNOUNCE;
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	80 93 9a 01 	sts	0x019A, r24
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <read_voltage>:

void read_voltage(void)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <read_voltage+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <read_voltage+0x8>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <read_voltage+0xa>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     d2a:	8a e0       	ldi	r24, 0x0A	; 10
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 08 1a 	call	0x3410	; 0x3410 <malloc>
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     d36:	8a e7       	ldi	r24, 0x7A	; 122
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	2a e7       	ldi	r18, 0x7A	; 122
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	d9 01       	movw	r26, r18
     d40:	2c 91       	ld	r18, X
     d42:	20 64       	ori	r18, 0x40	; 64
     d44:	fc 01       	movw	r30, r24
     d46:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     d48:	8a e7       	ldi	r24, 0x7A	; 122
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	dc 01       	movw	r26, r24
     d4e:	8c 91       	ld	r24, X
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	80 74       	andi	r24, 0x40	; 64
     d56:	90 70       	andi	r25, 0x00	; 0
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	b1 f7       	brne	.-20     	; 0xd48 <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     d5c:	89 e7       	ldi	r24, 0x79	; 121
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	fc 01       	movw	r30, r24
     d62:	80 81       	ld	r24, Z
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 15.7 V
	// Well use fixed point numbers, so full scale is 157 * 0.1 V
	vcc = (vcc_mon * 157) / 256;
     d6c:	4b 81       	ldd	r20, Y+3	; 0x03
     d6e:	5c 81       	ldd	r21, Y+4	; 0x04
     d70:	2d e9       	ldi	r18, 0x9D	; 157
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	42 9f       	mul	r20, r18
     d76:	c0 01       	movw	r24, r0
     d78:	43 9f       	mul	r20, r19
     d7a:	90 0d       	add	r25, r0
     d7c:	52 9f       	mul	r21, r18
     d7e:	90 0d       	add	r25, r0
     d80:	11 24       	eor	r1, r1
     d82:	89 2f       	mov	r24, r25
     d84:	99 27       	eor	r25, r25
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     d8a:	8d 81       	ldd	r24, Y+5	; 0x05
     d8c:	9e 81       	ldd	r25, Y+6	; 0x06
     d8e:	2a e0       	ldi	r18, 0x0A	; 10
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	b9 01       	movw	r22, r18
     d94:	0e 94 bf 19 	call	0x337e	; 0x337e <__udivmodhi4>
     d98:	9b 01       	movw	r18, r22
     d9a:	f9 01       	movw	r30, r18
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	2a e0       	ldi	r18, 0x0A	; 10
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	b9 01       	movw	r22, r18
     da6:	0e 94 bf 19 	call	0x337e	; 0x337e <__udivmodhi4>
     daa:	9c 01       	movw	r18, r24
     dac:	8d b7       	in	r24, 0x3d	; 61
     dae:	9e b7       	in	r25, 0x3e	; 62
     db0:	08 97       	sbiw	r24, 0x08	; 8
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	9e bf       	out	0x3e, r25	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	8d bf       	out	0x3d, r24	; 61
     dbc:	8d b7       	in	r24, 0x3d	; 61
     dbe:	9e b7       	in	r25, 0x3e	; 62
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	49 81       	ldd	r20, Y+1	; 0x01
     dc4:	5a 81       	ldd	r21, Y+2	; 0x02
     dc6:	dc 01       	movw	r26, r24
     dc8:	4d 93       	st	X+, r20
     dca:	5c 93       	st	X, r21
     dcc:	4b e0       	ldi	r20, 0x0B	; 11
     dce:	51 e0       	ldi	r21, 0x01	; 1
     dd0:	dc 01       	movw	r26, r24
     dd2:	13 96       	adiw	r26, 0x03	; 3
     dd4:	5c 93       	st	X, r21
     dd6:	4e 93       	st	-X, r20
     dd8:	12 97       	sbiw	r26, 0x02	; 2
     dda:	dc 01       	movw	r26, r24
     ddc:	15 96       	adiw	r26, 0x05	; 5
     dde:	fc 93       	st	X, r31
     de0:	ee 93       	st	-X, r30
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	fc 01       	movw	r30, r24
     de6:	37 83       	std	Z+7, r19	; 0x07
     de8:	26 83       	std	Z+6, r18	; 0x06
     dea:	0e 94 67 1b 	call	0x36ce	; 0x36ce <sprintf>
     dee:	8d b7       	in	r24, 0x3d	; 61
     df0:	9e b7       	in	r25, 0x3e	; 62
     df2:	08 96       	adiw	r24, 0x08	; 8
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	9e bf       	out	0x3e, r25	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out);
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	0e 94 57 06 	call	0xcae	; 0xcae <announce>

	free(vcc_out);
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <free>
}
     e0e:	26 96       	adiw	r28, 0x06	; 6
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <count_frequency>:

void count_frequency(void)
{
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <count_frequency+0xa>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     e2e:	8f e0       	ldi	r24, 0x0F	; 15
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 08 1a 	call	0x3410	; 0x3410 <malloc>
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     e3a:	80 91 c8 01 	lds	r24, 0x01C8
     e3e:	90 91 c9 01 	lds	r25, 0x01C9
     e42:	a0 91 ca 01 	lds	r26, 0x01CA
     e46:	b0 91 cb 01 	lds	r27, 0x01CB
     e4a:	28 ee       	ldi	r18, 0xE8	; 232
     e4c:	33 e0       	ldi	r19, 0x03	; 3
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__udivmodsi4>
     e5a:	da 01       	movw	r26, r20
     e5c:	c9 01       	movw	r24, r18
     e5e:	24 e6       	ldi	r18, 0x64	; 100
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__udivmodsi4>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	8c 01       	movw	r16, r24
     e74:	80 91 c8 01 	lds	r24, 0x01C8
     e78:	90 91 c9 01 	lds	r25, 0x01C9
     e7c:	a0 91 ca 01 	lds	r26, 0x01CA
     e80:	b0 91 cb 01 	lds	r27, 0x01CB
     e84:	28 ee       	ldi	r18, 0xE8	; 232
     e86:	33 e0       	ldi	r19, 0x03	; 3
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__udivmodsi4>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	2a e0       	ldi	r18, 0x0A	; 10
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	bc 01       	movw	r22, r24
     ea2:	cd 01       	movw	r24, r26
     ea4:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__udivmodsi4>
     ea8:	da 01       	movw	r26, r20
     eaa:	c9 01       	movw	r24, r18
     eac:	9c 01       	movw	r18, r24
     eae:	8d b7       	in	r24, 0x3d	; 61
     eb0:	9e b7       	in	r25, 0x3e	; 62
     eb2:	08 97       	sbiw	r24, 0x08	; 8
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	9e bf       	out	0x3e, r25	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	8d bf       	out	0x3d, r24	; 61
     ebe:	8d b7       	in	r24, 0x3d	; 61
     ec0:	9e b7       	in	r25, 0x3e	; 62
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	49 81       	ldd	r20, Y+1	; 0x01
     ec6:	5a 81       	ldd	r21, Y+2	; 0x02
     ec8:	fc 01       	movw	r30, r24
     eca:	51 83       	std	Z+1, r21	; 0x01
     ecc:	40 83       	st	Z, r20
     ece:	41 e1       	ldi	r20, 0x11	; 17
     ed0:	51 e0       	ldi	r21, 0x01	; 1
     ed2:	fc 01       	movw	r30, r24
     ed4:	53 83       	std	Z+3, r21	; 0x03
     ed6:	42 83       	std	Z+2, r20	; 0x02
     ed8:	fc 01       	movw	r30, r24
     eda:	15 83       	std	Z+5, r17	; 0x05
     edc:	04 83       	std	Z+4, r16	; 0x04
     ede:	fc 01       	movw	r30, r24
     ee0:	37 83       	std	Z+7, r19	; 0x07
     ee2:	26 83       	std	Z+6, r18	; 0x06
     ee4:	0e 94 67 1b 	call	0x36ce	; 0x36ce <sprintf>
     ee8:	8d b7       	in	r24, 0x3d	; 61
     eea:	9e b7       	in	r25, 0x3e	; 62
     eec:	08 96       	adiw	r24, 0x08	; 8
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	9e bf       	out	0x3e, r25	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out);
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	0e 94 57 06 	call	0xcae	; 0xcae <announce>

	free(freq_out);
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	0e 94 a2 1a 	call	0x3544	; 0x3544 <free>
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <poll_buttons>:

void poll_buttons(void)
{
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
     f28:	80 91 b8 01 	lds	r24, 0x01B8
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	59 f4       	brne	.+22     	; 0xf46 <poll_buttons+0x30>
	{
		cur_state = IDLE;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	80 93 ba 01 	sts	0x01BA, r24
		prev_mode = cur_mode;
     f36:	80 91 9a 01 	lds	r24, 0x019A
     f3a:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = TUNE;
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	80 93 9a 01 	sts	0x019A, r24
     f44:	36 c0       	rjmp	.+108    	; 0xfb2 <poll_buttons+0x9c>
	}
	else if(cmd_btn == PRESS)
     f46:	80 91 b9 01 	lds	r24, 0x01B9
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	59 f4       	brne	.+22     	; 0xf64 <poll_buttons+0x4e>
	{
		prev_mode = cur_mode;
     f4e:	80 91 9a 01 	lds	r24, 0x019A
     f52:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = MENU;
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	80 93 9a 01 	sts	0x019A, r24
		cur_state = IDLE;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	80 93 ba 01 	sts	0x01BA, r24
     f62:	27 c0       	rjmp	.+78     	; 0xfb2 <poll_buttons+0x9c>
	}
	else if(msg_btn == PRESS)
     f64:	80 91 b7 01 	lds	r24, 0x01B7
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	19 f4       	brne	.+6      	; 0xf72 <poll_buttons+0x5c>
		count_frequency();
     f6c:	0e 94 10 07 	call	0xe20	; 0xe20 <count_frequency>
     f70:	20 c0       	rjmp	.+64     	; 0xfb2 <poll_buttons+0x9c>
	else if(msg_btn == HOLD)
     f72:	80 91 b7 01 	lds	r24, 0x01B7
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	e1 f4       	brne	.+56     	; 0xfb2 <poll_buttons+0x9c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
     f7a:	8d e6       	ldi	r24, 0x6D	; 109
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	b9 01       	movw	r22, r18
     f84:	48 e2       	ldi	r20, 0x28	; 40
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
     f8c:	80 91 d1 01 	lds	r24, 0x01D1
     f90:	90 91 d2 01 	lds	r25, 0x01D2
     f94:	2d e6       	ldi	r18, 0x6D	; 109
     f96:	31 e0       	ldi	r19, 0x01	; 1
     f98:	b9 01       	movw	r22, r18
     f9a:	0e 94 56 1b 	call	0x36ac	; 0x36ac <strcpy>
		cur_state = IDLE;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 93 ba 01 	sts	0x01BA, r24
		prev_mode = cur_mode;
     fa4:	80 91 9a 01 	lds	r24, 0x019A
     fa8:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = PLAYBACK;
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	80 93 9a 01 	sts	0x019A, r24
	}

	if(enc_btn == PRESS)
     fb2:	80 91 bd 01 	lds	r24, 0x01BD
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	19 f5       	brne	.+70     	; 0x1000 <poll_buttons+0xea>
	{
		if(tune_rate == FAST)
     fba:	80 91 06 01 	lds	r24, 0x0106
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	79 f4       	brne	.+30     	; 0xfe0 <poll_buttons+0xca>
		{
			tune_rate = SLOW;
     fc2:	10 92 06 01 	sts	0x0106, r1
			tune_step = DDS_20HZ;
     fc6:	84 e3       	ldi	r24, 0x34	; 52
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	90 93 08 01 	sts	0x0108, r25
     fce:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 5;
     fd2:	85 e0       	ldi	r24, 0x05	; 5
     fd4:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	0e 94 04 04 	call	0x808	; 0x808 <debounce>
     fde:	83 c0       	rjmp	.+262    	; 0x10e6 <poll_buttons+0x1d0>
		}
		else
		{
			tune_rate = FAST;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 06 01 	sts	0x0106, r24
			tune_step = DDS_100HZ;
     fe6:	8c e0       	ldi	r24, 0x0C	; 12
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	90 93 08 01 	sts	0x0108, r25
     fee:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 25;
     ff2:	89 e1       	ldi	r24, 0x19	; 25
     ff4:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	0e 94 04 04 	call	0x808	; 0x808 <debounce>
     ffe:	73 c0       	rjmp	.+230    	; 0x10e6 <poll_buttons+0x1d0>
		}
	}
	else if(enc_btn == HOLD)
    1000:	80 91 bd 01 	lds	r24, 0x01BD
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	09 f0       	breq	.+2      	; 0x100a <poll_buttons+0xf4>
    1008:	6e c0       	rjmp	.+220    	; 0x10e6 <poll_buttons+0x1d0>
	{
		if(rit_enable == FALSE)
    100a:	80 91 d8 01 	lds	r24, 0x01D8
    100e:	88 23       	and	r24, r24
    1010:	b1 f5       	brne	.+108    	; 0x107e <poll_buttons+0x168>
		{
			RIT_LED_DDR |= _BV(RIT_LED);
    1012:	87 e2       	ldi	r24, 0x27	; 39
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	27 e2       	ldi	r18, 0x27	; 39
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	f9 01       	movw	r30, r18
    101c:	20 81       	ld	r18, Z
    101e:	22 60       	ori	r18, 0x02	; 2
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
			RIT_LED_PORT |= _BV(RIT_LED);
    1024:	88 e2       	ldi	r24, 0x28	; 40
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	28 e2       	ldi	r18, 0x28	; 40
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	f9 01       	movw	r30, r18
    102e:	20 81       	ld	r18, Z
    1030:	22 60       	ori	r18, 0x02	; 2
    1032:	fc 01       	movw	r30, r24
    1034:	20 83       	st	Z, r18
			rit_enable = TRUE;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	80 93 d8 01 	sts	0x01D8, r24
			dds_rit_freq_word = dds_freq_word;
    103c:	80 91 a4 01 	lds	r24, 0x01A4
    1040:	90 91 a5 01 	lds	r25, 0x01A5
    1044:	a0 91 a6 01 	lds	r26, 0x01A6
    1048:	b0 91 a7 01 	lds	r27, 0x01A7
    104c:	80 93 b2 01 	sts	0x01B2, r24
    1050:	90 93 b3 01 	sts	0x01B3, r25
    1054:	a0 93 b4 01 	sts	0x01B4, r26
    1058:	b0 93 b5 01 	sts	0x01B5, r27
			tune_dds(dds_rit_freq_word, REG_1);
    105c:	80 91 b2 01 	lds	r24, 0x01B2
    1060:	90 91 b3 01 	lds	r25, 0x01B3
    1064:	a0 91 b4 01 	lds	r26, 0x01B4
    1068:	b0 91 b5 01 	lds	r27, 0x01B5
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	41 e0       	ldi	r20, 0x01	; 1
    1072:	0e 94 35 09 	call	0x126a	; 0x126a <tune_dds>
			debounce(TRUE);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	0e 94 04 04 	call	0x808	; 0x808 <debounce>
    107c:	34 c0       	rjmp	.+104    	; 0x10e6 <poll_buttons+0x1d0>
		}
		else
		{

			RIT_LED_DDR &= ~(_BV(RIT_LED));
    107e:	87 e2       	ldi	r24, 0x27	; 39
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	27 e2       	ldi	r18, 0x27	; 39
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	2d 7f       	andi	r18, 0xFD	; 253
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
			RIT_LED_PORT &= ~(_BV(RIT_LED));
    1090:	88 e2       	ldi	r24, 0x28	; 40
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	28 e2       	ldi	r18, 0x28	; 40
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	f9 01       	movw	r30, r18
    109a:	20 81       	ld	r18, Z
    109c:	2d 7f       	andi	r18, 0xFD	; 253
    109e:	fc 01       	movw	r30, r24
    10a0:	20 83       	st	Z, r18
			rit_enable = FALSE;
    10a2:	10 92 d8 01 	sts	0x01D8, r1
			dds_freq_word = dds_rit_freq_word;
    10a6:	80 91 b2 01 	lds	r24, 0x01B2
    10aa:	90 91 b3 01 	lds	r25, 0x01B3
    10ae:	a0 91 b4 01 	lds	r26, 0x01B4
    10b2:	b0 91 b5 01 	lds	r27, 0x01B5
    10b6:	80 93 a4 01 	sts	0x01A4, r24
    10ba:	90 93 a5 01 	sts	0x01A5, r25
    10be:	a0 93 a6 01 	sts	0x01A6, r26
    10c2:	b0 93 a7 01 	sts	0x01A7, r27
			tune_dds(dds_freq_word, REG_0);
    10c6:	80 91 a4 01 	lds	r24, 0x01A4
    10ca:	90 91 a5 01 	lds	r25, 0x01A5
    10ce:	a0 91 a6 01 	lds	r26, 0x01A6
    10d2:	b0 91 a7 01 	lds	r27, 0x01A7
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	0e 94 35 09 	call	0x126a	; 0x126a <tune_dds>
			debounce(TRUE);
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	0e 94 04 04 	call	0x808	; 0x808 <debounce>
		}
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    10e6:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    10e8:	80 91 5f 01 	lds	r24, 0x015F
    10ec:	88 23       	and	r24, r24
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <poll_buttons+0x1e0>
		cur_enc_state += 0x02;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	8e 5f       	subi	r24, 0xFE	; 254
    10f4:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    10f6:	80 91 d7 01 	lds	r24, 0x01D7
    10fa:	88 23       	and	r24, r24
    10fc:	19 f0       	breq	.+6      	; 0x1104 <poll_buttons+0x1ee>
		cur_enc_state += 0x01;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    1104:	80 91 46 01 	lds	r24, 0x0146
    1108:	99 81       	ldd	r25, Y+1	; 0x01
    110a:	98 17       	cp	r25, r24
    110c:	09 f4       	brne	.+2      	; 0x1110 <poll_buttons+0x1fa>
    110e:	a2 c0       	rjmp	.+324    	; 0x1254 <poll_buttons+0x33e>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    1110:	80 91 46 01 	lds	r24, 0x0146
    1114:	86 95       	lsr	r24
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	80 93 46 01 	sts	0x0146, r24

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    111c:	80 91 46 01 	lds	r24, 0x0146
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	90 70       	andi	r25, 0x00	; 0
    112e:	82 27       	eor	r24, r18
    1130:	93 27       	eor	r25, r19
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	09 f0       	breq	.+2      	; 0x113a <poll_buttons+0x224>
    1138:	4b c0       	rjmp	.+150    	; 0x11d0 <poll_buttons+0x2ba>
		{

			dds_freq_word -= tune_step;
    113a:	20 91 a4 01 	lds	r18, 0x01A4
    113e:	30 91 a5 01 	lds	r19, 0x01A5
    1142:	40 91 a6 01 	lds	r20, 0x01A6
    1146:	50 91 a7 01 	lds	r21, 0x01A7
    114a:	80 91 07 01 	lds	r24, 0x0107
    114e:	90 91 08 01 	lds	r25, 0x0108
    1152:	cc 01       	movw	r24, r24
    1154:	a0 e0       	ldi	r26, 0x00	; 0
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	79 01       	movw	r14, r18
    115a:	8a 01       	movw	r16, r20
    115c:	e8 1a       	sub	r14, r24
    115e:	f9 0a       	sbc	r15, r25
    1160:	0a 0b       	sbc	r16, r26
    1162:	1b 0b       	sbc	r17, r27
    1164:	d8 01       	movw	r26, r16
    1166:	c7 01       	movw	r24, r14
    1168:	80 93 a4 01 	sts	0x01A4, r24
    116c:	90 93 a5 01 	sts	0x01A5, r25
    1170:	a0 93 a6 01 	sts	0x01A6, r26
    1174:	b0 93 a7 01 	sts	0x01A7, r27
			tune_freq -= tune_freq_step;
    1178:	20 91 c8 01 	lds	r18, 0x01C8
    117c:	30 91 c9 01 	lds	r19, 0x01C9
    1180:	40 91 ca 01 	lds	r20, 0x01CA
    1184:	50 91 cb 01 	lds	r21, 0x01CB
    1188:	80 91 09 01 	lds	r24, 0x0109
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a0 e0       	ldi	r26, 0x00	; 0
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	79 01       	movw	r14, r18
    1196:	8a 01       	movw	r16, r20
    1198:	e8 1a       	sub	r14, r24
    119a:	f9 0a       	sbc	r15, r25
    119c:	0a 0b       	sbc	r16, r26
    119e:	1b 0b       	sbc	r17, r27
    11a0:	d8 01       	movw	r26, r16
    11a2:	c7 01       	movw	r24, r14
    11a4:	80 93 c8 01 	sts	0x01C8, r24
    11a8:	90 93 c9 01 	sts	0x01C9, r25
    11ac:	a0 93 ca 01 	sts	0x01CA, r26
    11b0:	b0 93 cb 01 	sts	0x01CB, r27
			tune_dds(dds_freq_word, REG_0);
    11b4:	80 91 a4 01 	lds	r24, 0x01A4
    11b8:	90 91 a5 01 	lds	r25, 0x01A5
    11bc:	a0 91 a6 01 	lds	r26, 0x01A6
    11c0:	b0 91 a7 01 	lds	r27, 0x01A7
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	0e 94 35 09 	call	0x126a	; 0x126a <tune_dds>
    11ce:	42 c0       	rjmp	.+132    	; 0x1254 <poll_buttons+0x33e>
		}
		else
		{
			dds_freq_word += tune_step;
    11d0:	80 91 07 01 	lds	r24, 0x0107
    11d4:	90 91 08 01 	lds	r25, 0x0108
    11d8:	9c 01       	movw	r18, r24
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	80 91 a4 01 	lds	r24, 0x01A4
    11e2:	90 91 a5 01 	lds	r25, 0x01A5
    11e6:	a0 91 a6 01 	lds	r26, 0x01A6
    11ea:	b0 91 a7 01 	lds	r27, 0x01A7
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	a4 1f       	adc	r26, r20
    11f4:	b5 1f       	adc	r27, r21
    11f6:	80 93 a4 01 	sts	0x01A4, r24
    11fa:	90 93 a5 01 	sts	0x01A5, r25
    11fe:	a0 93 a6 01 	sts	0x01A6, r26
    1202:	b0 93 a7 01 	sts	0x01A7, r27
			tune_freq += tune_freq_step;
    1206:	80 91 09 01 	lds	r24, 0x0109
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e0       	ldi	r20, 0x00	; 0
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	80 91 c8 01 	lds	r24, 0x01C8
    1216:	90 91 c9 01 	lds	r25, 0x01C9
    121a:	a0 91 ca 01 	lds	r26, 0x01CA
    121e:	b0 91 cb 01 	lds	r27, 0x01CB
    1222:	82 0f       	add	r24, r18
    1224:	93 1f       	adc	r25, r19
    1226:	a4 1f       	adc	r26, r20
    1228:	b5 1f       	adc	r27, r21
    122a:	80 93 c8 01 	sts	0x01C8, r24
    122e:	90 93 c9 01 	sts	0x01C9, r25
    1232:	a0 93 ca 01 	sts	0x01CA, r26
    1236:	b0 93 cb 01 	sts	0x01CB, r27
			tune_dds(dds_freq_word, REG_0);
    123a:	80 91 a4 01 	lds	r24, 0x01A4
    123e:	90 91 a5 01 	lds	r25, 0x01A5
    1242:	a0 91 a6 01 	lds	r26, 0x01A6
    1246:	b0 91 a7 01 	lds	r27, 0x01A7
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	0e 94 35 09 	call	0x126a	; 0x126a <tune_dds>
		}
	}

	prev_enc_state = cur_enc_state;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	80 93 46 01 	sts	0x0146, r24
}
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	08 95       	ret

0000126a <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	2b 97       	sbiw	r28, 0x0b	; 11
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	6f 83       	std	Y+7, r22	; 0x07
    1280:	78 87       	std	Y+8, r23	; 0x08
    1282:	89 87       	std	Y+9, r24	; 0x09
    1284:	9a 87       	std	Y+10, r25	; 0x0a
    1286:	4b 87       	std	Y+11, r20	; 0x0b
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    1288:	8b 85       	ldd	r24, Y+11	; 0x0b
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	29 f4       	brne	.+10     	; 0x1298 <tune_dds+0x2e>
		freq_reg = 0x8000;
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e8       	ldi	r25, 0x80	; 128
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <tune_dds+0x36>
	else
		freq_reg = 0x4000;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e4       	ldi	r25, 0x40	; 64
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    12a0:	8f 81       	ldd	r24, Y+7	; 0x07
    12a2:	98 85       	ldd	r25, Y+8	; 0x08
    12a4:	9c 01       	movw	r18, r24
    12a6:	3f 73       	andi	r19, 0x3F	; 63
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	82 0f       	add	r24, r18
    12ae:	93 1f       	adc	r25, r19
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    12b4:	8f 81       	ldd	r24, Y+7	; 0x07
    12b6:	98 85       	ldd	r25, Y+8	; 0x08
    12b8:	a9 85       	ldd	r26, Y+9	; 0x09
    12ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    12bc:	07 2e       	mov	r0, r23
    12be:	7e e0       	ldi	r23, 0x0E	; 14
    12c0:	b6 95       	lsr	r27
    12c2:	a7 95       	ror	r26
    12c4:	97 95       	ror	r25
    12c6:	87 95       	ror	r24
    12c8:	7a 95       	dec	r23
    12ca:	d1 f7       	brne	.-12     	; 0x12c0 <tune_dds+0x56>
    12cc:	70 2d       	mov	r23, r0
    12ce:	9c 01       	movw	r18, r24
    12d0:	3f 73       	andi	r19, 0x3F	; 63
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	82 0f       	add	r24, r18
    12d8:	93 1f       	adc	r25, r19
    12da:	9e 83       	std	Y+6, r25	; 0x06
    12dc:	8d 83       	std	Y+5, r24	; 0x05
		//send_dds_word(0x2800);
	//else
		//send_dds_word(0x2000);

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>
}
    12ee:	2b 96       	adiw	r28, 0x0b	; 11
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <init_dds>:

void init_dds(uint32_t dds_word, enum FREQREG reg)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	2b 97       	sbiw	r28, 0x0b	; 11
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	6f 83       	std	Y+7, r22	; 0x07
    1316:	78 87       	std	Y+8, r23	; 0x08
    1318:	89 87       	std	Y+9, r24	; 0x09
    131a:	9a 87       	std	Y+10, r25	; 0x0a
    131c:	4b 87       	std	Y+11, r20	; 0x0b
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    131e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	29 f4       	brne	.+10     	; 0x132e <init_dds+0x2e>
		freq_reg = 0x8000;
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e8       	ldi	r25, 0x80	; 128
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <init_dds+0x36>
	else
		freq_reg = 0x4000;
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e4       	ldi	r25, 0x40	; 64
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    1336:	8f 81       	ldd	r24, Y+7	; 0x07
    1338:	98 85       	ldd	r25, Y+8	; 0x08
    133a:	9c 01       	movw	r18, r24
    133c:	3f 73       	andi	r19, 0x3F	; 63
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	82 0f       	add	r24, r18
    1344:	93 1f       	adc	r25, r19
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    134a:	8f 81       	ldd	r24, Y+7	; 0x07
    134c:	98 85       	ldd	r25, Y+8	; 0x08
    134e:	a9 85       	ldd	r26, Y+9	; 0x09
    1350:	ba 85       	ldd	r27, Y+10	; 0x0a
    1352:	07 2e       	mov	r0, r23
    1354:	7e e0       	ldi	r23, 0x0E	; 14
    1356:	b6 95       	lsr	r27
    1358:	a7 95       	ror	r26
    135a:	97 95       	ror	r25
    135c:	87 95       	ror	r24
    135e:	7a 95       	dec	r23
    1360:	d1 f7       	brne	.-12     	; 0x1356 <init_dds+0x56>
    1362:	70 2d       	mov	r23, r0
    1364:	9c 01       	movw	r18, r24
    1366:	3f 73       	andi	r19, 0x3F	; 63
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	82 0f       	add	r24, r18
    136e:	93 1f       	adc	r25, r19
    1370:	9e 83       	std	Y+6, r25	; 0x06
    1372:	8d 83       	std	Y+5, r24	; 0x05

	// Control register
	//if(reg == REG_1)
		//send_dds_word(0x2900);
	//else
		send_dds_word(0x2100);
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	91 e2       	ldi	r25, 0x21	; 33
    1378:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>

	// Send phase
	send_dds_word(0xC000);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 ec       	ldi	r25, 0xC0	; 192
    1390:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>

	// Exit reset
	send_dds_word(0x2000);
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e2       	ldi	r25, 0x20	; 32
    1398:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>
}
    139c:	2b 96       	adiw	r28, 0x0b	; 11
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <send_dds_word>:

void send_dds_word(uint16_t dds_word)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <send_dds_word+0x6>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    13bc:	85 e2       	ldi	r24, 0x25	; 37
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	25 e2       	ldi	r18, 0x25	; 37
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	f9 01       	movw	r30, r18
    13c6:	20 81       	ld	r18, Z
    13c8:	20 62       	ori	r18, 0x20	; 32
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    13ce:	85 e2       	ldi	r24, 0x25	; 37
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	25 e2       	ldi	r18, 0x25	; 37
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	f9 01       	movw	r30, r18
    13d8:	20 81       	ld	r18, Z
    13da:	2d 7f       	andi	r18, 0xFD	; 253
    13dc:	fc 01       	movw	r30, r24
    13de:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    13e0:	8e e4       	ldi	r24, 0x4E	; 78
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	29 81       	ldd	r18, Y+1	; 0x01
    13e6:	3a 81       	ldd	r19, Y+2	; 0x02
    13e8:	23 2f       	mov	r18, r19
    13ea:	33 27       	eor	r19, r19
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    13f0:	00 00       	nop
    13f2:	8d e4       	ldi	r24, 0x4D	; 77
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	fc 01       	movw	r30, r24
    13f8:	80 81       	ld	r24, Z
    13fa:	88 23       	and	r24, r24
    13fc:	d4 f7       	brge	.-12     	; 0x13f2 <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    13fe:	8e e4       	ldi	r24, 0x4E	; 78
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	29 81       	ldd	r18, Y+1	; 0x01
    1404:	fc 01       	movw	r30, r24
    1406:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1408:	00 00       	nop
    140a:	8d e4       	ldi	r24, 0x4D	; 77
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	fc 01       	movw	r30, r24
    1410:	80 81       	ld	r24, Z
    1412:	88 23       	and	r24, r24
    1414:	d4 f7       	brge	.-12     	; 0x140a <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    1416:	85 e2       	ldi	r24, 0x25	; 37
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	25 e2       	ldi	r18, 0x25	; 37
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	f9 01       	movw	r30, r18
    1420:	20 81       	ld	r18, Z
    1422:	22 60       	ori	r18, 0x02	; 2
    1424:	fc 01       	movw	r30, r24
    1426:	20 83       	st	Z, r18
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	0f 92       	push	r0
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	29 f4       	brne	.+10     	; 0x144e <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	98 e2       	ldi	r25, 0x28	; 40
    1448:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e2       	ldi	r25, 0x20	; 32
    1452:	0e 94 d7 09 	call	0x13ae	; 0x13ae <send_dds_word>
}
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <set_st_freq+0x6>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <set_st_freq+0x8>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	69 83       	std	Y+1, r22	; 0x01
    146c:	7a 83       	std	Y+2, r23	; 0x02
    146e:	8b 83       	std	Y+3, r24	; 0x03
    1470:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	ab 81       	ldd	r26, Y+3	; 0x03
    1478:	bc 81       	ldd	r27, Y+4	; 0x04
    147a:	28 ec       	ldi	r18, 0xC8	; 200
    147c:	36 e1       	ldi	r19, 0x16	; 22
    147e:	42 e0       	ldi	r20, 0x02	; 2
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 a0 19 	call	0x3340	; 0x3340 <__mulsi3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	80 93 a8 01 	sts	0x01A8, r24
    1492:	90 93 a9 01 	sts	0x01A9, r25
    1496:	a0 93 aa 01 	sts	0x01AA, r26
    149a:	b0 93 ab 01 	sts	0x01AB, r27
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <main>:

int main(void)
{
    14ac:	1f 93       	push	r17
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	62 97       	sbiw	r28, 0x12	; 18
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    14c2:	89 e2       	ldi	r24, 0x29	; 41
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 08 1a 	call	0x3410	; 0x3410 <malloc>
    14ca:	90 93 d2 01 	sts	0x01D2, r25
    14ce:	80 93 d1 01 	sts	0x01D1, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    14d2:	80 91 d1 01 	lds	r24, 0x01D1
    14d6:	90 91 d2 01 	lds	r25, 0x01D2
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	49 e2       	ldi	r20, 0x29	; 41
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	0e 94 44 1b 	call	0x3688	; 0x3688 <memset>
	cur_char_p = announce_buffer;
    14e6:	80 91 d1 01 	lds	r24, 0x01D1
    14ea:	90 91 d2 01 	lds	r25, 0x01D2
    14ee:	90 93 37 01 	sts	0x0137, r25
    14f2:	80 93 36 01 	sts	0x0136, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    14f6:	89 e2       	ldi	r24, 0x29	; 41
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 08 1a 	call	0x3410	; 0x3410 <malloc>
    14fe:	90 93 39 01 	sts	0x0139, r25
    1502:	80 93 38 01 	sts	0x0138, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    1506:	80 91 38 01 	lds	r24, 0x0138
    150a:	90 91 39 01 	lds	r25, 0x0139
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	49 e2       	ldi	r20, 0x29	; 41
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	0e 94 44 1b 	call	0x3688	; 0x3688 <memset>

	init();
    151a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <init>

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    151e:	19 82       	std	Y+1, r1	; 0x01
    1520:	06 c0       	rjmp	.+12     	; 0x152e <main+0x82>
		debounce(FALSE);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0e 94 04 04 	call	0x808	; 0x808 <debounce>
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);

	init();

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	8f 30       	cpi	r24, 0x0F	; 15
    1532:	b8 f3       	brcs	.-18     	; 0x1522 <main+0x76>
		debounce(FALSE);

	if((dah_active == TRUE) && (dit_active == FALSE))
    1534:	80 91 b6 01 	lds	r24, 0x01B6
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	41 f4       	brne	.+16     	; 0x154c <main+0xa0>
    153c:	80 91 c6 01 	lds	r24, 0x01C6
    1540:	88 23       	and	r24, r24
    1542:	21 f4       	brne	.+8      	; 0x154c <main+0xa0>
		cur_mode = SK;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 9a 01 	sts	0x019A, r24
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <main+0xa4>
	else
		cur_mode = KEYER;
    154c:	10 92 9a 01 	sts	0x019A, r1

	announce("CC");
    1550:	8b e1       	ldi	r24, 0x1B	; 27
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    1558:	f8 94       	cli
		cur_timer = timer;
    155a:	80 91 66 01 	lds	r24, 0x0166
    155e:	90 91 67 01 	lds	r25, 0x0167
    1562:	a0 91 68 01 	lds	r26, 0x0168
    1566:	b0 91 69 01 	lds	r27, 0x0169
    156a:	80 93 60 01 	sts	0x0160, r24
    156e:	90 93 61 01 	sts	0x0161, r25
    1572:	a0 93 62 01 	sts	0x0162, r26
    1576:	b0 93 63 01 	sts	0x0163, r27
		sei();
    157a:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    157c:	80 91 9a 01 	lds	r24, 0x019A
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <main+0xe0>
    158a:	2c c6       	rjmp	.+3160   	; 0x21e4 <main+0xd38>
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	91 05       	cpc	r25, r1
    1590:	64 f4       	brge	.+24     	; 0x15aa <main+0xfe>
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	f1 f0       	breq	.+60     	; 0x15d4 <main+0x128>
    1598:	82 30       	cpi	r24, 0x02	; 2
    159a:	91 05       	cpc	r25, r1
    159c:	0c f0       	brlt	.+2      	; 0x15a0 <main+0xf4>
    159e:	84 c4       	rjmp	.+2312   	; 0x1ea8 <main+0x9fc>
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <main+0xfa>
    15a4:	d5 c0       	rjmp	.+426    	; 0x1750 <main+0x2a4>
    15a6:	0c 94 9d 19 	jmp	0x333a	; 0x333a <main+0x1e8e>
    15aa:	85 30       	cpi	r24, 0x05	; 5
    15ac:	91 05       	cpc	r25, r1
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <main+0x108>
    15b0:	0c 94 31 13 	jmp	0x2662	; 0x2662 <main+0x11b6>
    15b4:	85 30       	cpi	r24, 0x05	; 5
    15b6:	91 05       	cpc	r25, r1
    15b8:	0c f4       	brge	.+2      	; 0x15bc <main+0x110>
    15ba:	d5 c6       	rjmp	.+3498   	; 0x2366 <main+0xeba>
    15bc:	86 30       	cpi	r24, 0x06	; 6
    15be:	91 05       	cpc	r25, r1
    15c0:	11 f4       	brne	.+4      	; 0x15c6 <main+0x11a>
    15c2:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <main+0x12fc>
    15c6:	87 30       	cpi	r24, 0x07	; 7
    15c8:	91 05       	cpc	r25, r1
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <main+0x124>
    15cc:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <main+0x17e0>
    15d0:	0c 94 9d 19 	jmp	0x333a	; 0x333a <main+0x1e8e>
		{
		case SK:
			default_mode = SK;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 65 01 	sts	0x0165, r24
			switch(cur_state)
    15da:	80 91 ba 01 	lds	r24, 0x01BA
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	87 30       	cpi	r24, 0x07	; 7
    15e4:	91 05       	cpc	r25, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <main+0x13e>
    15e8:	4b c0       	rjmp	.+150    	; 0x1680 <main+0x1d4>
    15ea:	8c 30       	cpi	r24, 0x0C	; 12
    15ec:	91 05       	cpc	r25, r1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <main+0x146>
    15f0:	88 c0       	rjmp	.+272    	; 0x1702 <main+0x256>
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	09 f0       	breq	.+2      	; 0x15fa <main+0x14e>
    15f8:	a4 c0       	rjmp	.+328    	; 0x1742 <main+0x296>
			{
			case IDLE:
				key_down = FALSE;
    15fa:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    15fe:	10 92 32 01 	sts	0x0132, r1
				if(allow_sleep == TRUE)
    1602:	80 91 0a 01 	lds	r24, 0x010A
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	19 f4       	brne	.+6      	; 0x1610 <main+0x164>
					mute_on = FALSE;
    160a:	10 92 33 01 	sts	0x0133, r1
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <main+0x16a>
				else
					mute_on = TRUE;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	80 93 33 01 	sts	0x0133, r24

				if(dit_active == TRUE)
    1616:	80 91 c6 01 	lds	r24, 0x01C6
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	69 f5       	brne	.+90     	; 0x1678 <main+0x1cc>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    161e:	80 91 60 01 	lds	r24, 0x0160
    1622:	90 91 61 01 	lds	r25, 0x0161
    1626:	a0 91 62 01 	lds	r26, 0x0162
    162a:	b0 91 63 01 	lds	r27, 0x0163
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	a1 1d       	adc	r26, r1
    1632:	b1 1d       	adc	r27, r1
    1634:	80 93 a0 01 	sts	0x01A0, r24
    1638:	90 93 a1 01 	sts	0x01A1, r25
    163c:	a0 93 a2 01 	sts	0x01A2, r26
    1640:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = UINT32_MAX;
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	dc 01       	movw	r26, r24
    164a:	80 93 d3 01 	sts	0x01D3, r24
    164e:	90 93 d4 01 	sts	0x01D4, r25
    1652:	a0 93 d5 01 	sts	0x01D5, r26
    1656:	b0 93 d6 01 	sts	0x01D6, r27
					cur_state_end = UINT32_MAX;
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	9f ef       	ldi	r25, 0xFF	; 255
    165e:	dc 01       	movw	r26, r24
    1660:	80 93 be 01 	sts	0x01BE, r24
    1664:	90 93 bf 01 	sts	0x01BF, r25
    1668:	a0 93 c0 01 	sts	0x01C0, r26
    166c:	b0 93 c1 01 	sts	0x01C1, r27
					cur_state = KEYDOWN;
    1670:	87 e0       	ldi	r24, 0x07	; 7
    1672:	80 93 ba 01 	sts	0x01BA, r24
				}
				else
				{
					cur_state = IDLE;
				}
				break;
    1676:	68 c0       	rjmp	.+208    	; 0x1748 <main+0x29c>
					cur_state_end = UINT32_MAX;
					cur_state = KEYDOWN;
				}
				else
				{
					cur_state = IDLE;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 ba 01 	sts	0x01BA, r24
				}
				break;
    167e:	64 c0       	rjmp	.+200    	; 0x1748 <main+0x29c>

			case KEYDOWN:
				key_down = TRUE;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 33 01 	sts	0x0133, r24

				if(dit_active == FALSE)
    1692:	80 91 c6 01 	lds	r24, 0x01C6
    1696:	88 23       	and	r24, r24
    1698:	41 f5       	brne	.+80     	; 0x16ea <main+0x23e>
				{
					cur_state = EXIT;
    169a:	8c e0       	ldi	r24, 0x0C	; 12
    169c:	80 93 ba 01 	sts	0x01BA, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    16a0:	80 91 60 01 	lds	r24, 0x0160
    16a4:	90 91 61 01 	lds	r25, 0x0161
    16a8:	a0 91 62 01 	lds	r26, 0x0162
    16ac:	b0 91 63 01 	lds	r27, 0x0163
    16b0:	8c 59       	subi	r24, 0x9C	; 156
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	af 4f       	sbci	r26, 0xFF	; 255
    16b6:	bf 4f       	sbci	r27, 0xFF	; 255
    16b8:	80 93 be 01 	sts	0x01BE, r24
    16bc:	90 93 bf 01 	sts	0x01BF, r25
    16c0:	a0 93 c0 01 	sts	0x01C0, r26
    16c4:	b0 93 c1 01 	sts	0x01C1, r27
					tx_end = cur_timer;
    16c8:	80 91 60 01 	lds	r24, 0x0160
    16cc:	90 91 61 01 	lds	r25, 0x0161
    16d0:	a0 91 62 01 	lds	r26, 0x0162
    16d4:	b0 91 63 01 	lds	r27, 0x0163
    16d8:	80 93 d3 01 	sts	0x01D3, r24
    16dc:	90 93 d4 01 	sts	0x01D4, r25
    16e0:	a0 93 d5 01 	sts	0x01D5, r26
    16e4:	b0 93 d6 01 	sts	0x01D6, r27
				}
				else
					tx_end = UINT32_MAX;
				break;
    16e8:	2f c0       	rjmp	.+94     	; 0x1748 <main+0x29c>
					cur_state = EXIT;
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
					tx_end = cur_timer;
				}
				else
					tx_end = UINT32_MAX;
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	9f ef       	ldi	r25, 0xFF	; 255
    16ee:	dc 01       	movw	r26, r24
    16f0:	80 93 d3 01 	sts	0x01D3, r24
    16f4:	90 93 d4 01 	sts	0x01D4, r25
    16f8:	a0 93 d5 01 	sts	0x01D5, r26
    16fc:	b0 93 d6 01 	sts	0x01D6, r27
				break;
    1700:	23 c0       	rjmp	.+70     	; 0x1748 <main+0x29c>

			case EXIT:
				key_down = FALSE;
    1702:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1706:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer >= cur_state_end)
    1710:	20 91 60 01 	lds	r18, 0x0160
    1714:	30 91 61 01 	lds	r19, 0x0161
    1718:	40 91 62 01 	lds	r20, 0x0162
    171c:	50 91 63 01 	lds	r21, 0x0163
    1720:	80 91 be 01 	lds	r24, 0x01BE
    1724:	90 91 bf 01 	lds	r25, 0x01BF
    1728:	a0 91 c0 01 	lds	r26, 0x01C0
    172c:	b0 91 c1 01 	lds	r27, 0x01C1
    1730:	28 17       	cp	r18, r24
    1732:	39 07       	cpc	r19, r25
    1734:	4a 07       	cpc	r20, r26
    1736:	5b 07       	cpc	r21, r27
    1738:	30 f0       	brcs	.+12     	; 0x1746 <main+0x29a>
					cur_state = IDLE;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	80 93 ba 01 	sts	0x01BA, r24
				break;
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <main+0x29c>

			default:
				break;
    1742:	00 00       	nop
    1744:	01 c0       	rjmp	.+2      	; 0x1748 <main+0x29c>
				sidetone_on = FALSE;
				mute_on = TRUE;

				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;
    1746:	00 00       	nop

			default:
				break;
			}

			poll_buttons();
    1748:	0e 94 8b 07 	call	0xf16	; 0xf16 <poll_buttons>
				sleep_disable();
			}
			sei();
			*/

			break;
    174c:	0c 94 9e 19 	jmp	0x333c	; 0x333c <main+0x1e90>

		case KEYER:
			default_mode = KEYER;
    1750:	10 92 65 01 	sts	0x0165, r1
			poll_buttons();
    1754:	0e 94 8b 07 	call	0xf16	; 0xf16 <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    1758:	80 91 ba 01 	lds	r24, 0x01BA
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <main+0x2bc>
    1766:	ef c1       	rjmp	.+990    	; 0x1b46 <main+0x69a>
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	91 05       	cpc	r25, r1
    176c:	44 f4       	brge	.+16     	; 0x177e <main+0x2d2>
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	91 05       	cpc	r25, r1
    1772:	71 f0       	breq	.+28     	; 0x1790 <main+0x2e4>
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	91 05       	cpc	r25, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <main+0x2d0>
    177a:	75 c1       	rjmp	.+746    	; 0x1a66 <main+0x5ba>
    177c:	92 c3       	rjmp	.+1828   	; 0x1ea2 <main+0x9f6>
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	91 05       	cpc	r25, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <main+0x2da>
    1784:	50 c2       	rjmp	.+1184   	; 0x1c26 <main+0x77a>
    1786:	8c 30       	cpi	r24, 0x0C	; 12
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <main+0x2e2>
    178c:	6b c3       	rjmp	.+1750   	; 0x1e64 <main+0x9b8>
    178e:	89 c3       	rjmp	.+1810   	; 0x1ea2 <main+0x9f6>
			{
			case IDLE:
				key_down = FALSE;
    1790:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1794:	10 92 32 01 	sts	0x0132, r1
				mute_on = FALSE;
    1798:	10 92 33 01 	sts	0x0133, r1
				mute_end = cur_timer;
    179c:	80 91 60 01 	lds	r24, 0x0160
    17a0:	90 91 61 01 	lds	r25, 0x0161
    17a4:	a0 91 62 01 	lds	r26, 0x0162
    17a8:	b0 91 63 01 	lds	r27, 0x0163
    17ac:	80 93 c2 01 	sts	0x01C2, r24
    17b0:	90 93 c3 01 	sts	0x01C3, r25
    17b4:	a0 93 c4 01 	sts	0x01C4, r26
    17b8:	b0 93 c5 01 	sts	0x01C5, r27
					mute_on = FALSE;
				else
					mute_on = TRUE;
				*/
				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    17bc:	80 91 c6 01 	lds	r24, 0x01C6
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <main+0x31a>
    17c4:	68 c0       	rjmp	.+208    	; 0x1896 <main+0x3ea>
    17c6:	80 91 b6 01 	lds	r24, 0x01B6
    17ca:	88 23       	and	r24, r24
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <main+0x324>
    17ce:	63 c0       	rjmp	.+198    	; 0x1896 <main+0x3ea>
				{
					prev_state = IDLE;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	80 93 ba 01 	sts	0x01BA, r24
					next_state = IDLE;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    17e2:	80 91 6b 01 	lds	r24, 0x016B
    17e6:	90 91 6c 01 	lds	r25, 0x016C
    17ea:	9c 01       	movw	r18, r24
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	80 91 60 01 	lds	r24, 0x0160
    17f4:	90 91 61 01 	lds	r25, 0x0161
    17f8:	a0 91 62 01 	lds	r26, 0x0162
    17fc:	b0 91 63 01 	lds	r27, 0x0163
    1800:	82 0f       	add	r24, r18
    1802:	93 1f       	adc	r25, r19
    1804:	a4 1f       	adc	r26, r20
    1806:	b5 1f       	adc	r27, r21
    1808:	80 93 be 01 	sts	0x01BE, r24
    180c:	90 93 bf 01 	sts	0x01BF, r25
    1810:	a0 93 c0 01 	sts	0x01C0, r26
    1814:	b0 93 c1 01 	sts	0x01C1, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1818:	80 91 60 01 	lds	r24, 0x0160
    181c:	90 91 61 01 	lds	r25, 0x0161
    1820:	a0 91 62 01 	lds	r26, 0x0162
    1824:	b0 91 63 01 	lds	r27, 0x0163
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	a1 1d       	adc	r26, r1
    182c:	b1 1d       	adc	r27, r1
    182e:	80 93 a0 01 	sts	0x01A0, r24
    1832:	90 93 a1 01 	sts	0x01A1, r25
    1836:	a0 93 a2 01 	sts	0x01A2, r26
    183a:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    183e:	80 91 be 01 	lds	r24, 0x01BE
    1842:	90 91 bf 01 	lds	r25, 0x01BF
    1846:	a0 91 c0 01 	lds	r26, 0x01C0
    184a:	b0 91 c1 01 	lds	r27, 0x01C1
    184e:	80 93 d3 01 	sts	0x01D3, r24
    1852:	90 93 d4 01 	sts	0x01D4, r25
    1856:	a0 93 d5 01 	sts	0x01D5, r26
    185a:	b0 93 d6 01 	sts	0x01D6, r27
					mute_start = cur_timer;
    185e:	80 91 60 01 	lds	r24, 0x0160
    1862:	90 91 61 01 	lds	r25, 0x0161
    1866:	a0 91 62 01 	lds	r26, 0x0162
    186a:	b0 91 63 01 	lds	r27, 0x0163
    186e:	80 93 cd 01 	sts	0x01CD, r24
    1872:	90 93 ce 01 	sts	0x01CE, r25
    1876:	a0 93 cf 01 	sts	0x01CF, r26
    187a:	b0 93 d0 01 	sts	0x01D0, r27
					mute_end = UINT32_MAX;
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	9f ef       	ldi	r25, 0xFF	; 255
    1882:	dc 01       	movw	r26, r24
    1884:	80 93 c2 01 	sts	0x01C2, r24
    1888:	90 93 c3 01 	sts	0x01C3, r25
    188c:	a0 93 c4 01 	sts	0x01C4, r26
    1890:	b0 93 c5 01 	sts	0x01C5, r27
    1894:	e7 c0       	rjmp	.+462    	; 0x1a64 <main+0x5b8>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    1896:	80 91 b6 01 	lds	r24, 0x01B6
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	09 f0       	breq	.+2      	; 0x18a0 <main+0x3f4>
    189e:	6d c0       	rjmp	.+218    	; 0x197a <main+0x4ce>
    18a0:	80 91 c6 01 	lds	r24, 0x01C6
    18a4:	88 23       	and	r24, r24
    18a6:	09 f0       	breq	.+2      	; 0x18aa <main+0x3fe>
    18a8:	68 c0       	rjmp	.+208    	; 0x197a <main+0x4ce>
				{
					prev_state = IDLE;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DAH;
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	80 93 ba 01 	sts	0x01BA, r24
					next_state = IDLE;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + (dit_length * 3);
    18bc:	20 91 6b 01 	lds	r18, 0x016B
    18c0:	30 91 6c 01 	lds	r19, 0x016C
    18c4:	c9 01       	movw	r24, r18
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	82 0f       	add	r24, r18
    18cc:	93 1f       	adc	r25, r19
    18ce:	9c 01       	movw	r18, r24
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	80 91 60 01 	lds	r24, 0x0160
    18d8:	90 91 61 01 	lds	r25, 0x0161
    18dc:	a0 91 62 01 	lds	r26, 0x0162
    18e0:	b0 91 63 01 	lds	r27, 0x0163
    18e4:	82 0f       	add	r24, r18
    18e6:	93 1f       	adc	r25, r19
    18e8:	a4 1f       	adc	r26, r20
    18ea:	b5 1f       	adc	r27, r21
    18ec:	80 93 be 01 	sts	0x01BE, r24
    18f0:	90 93 bf 01 	sts	0x01BF, r25
    18f4:	a0 93 c0 01 	sts	0x01C0, r26
    18f8:	b0 93 c1 01 	sts	0x01C1, r27
					tx_start = cur_timer + TX_ON_DELAY;
    18fc:	80 91 60 01 	lds	r24, 0x0160
    1900:	90 91 61 01 	lds	r25, 0x0161
    1904:	a0 91 62 01 	lds	r26, 0x0162
    1908:	b0 91 63 01 	lds	r27, 0x0163
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	a1 1d       	adc	r26, r1
    1910:	b1 1d       	adc	r27, r1
    1912:	80 93 a0 01 	sts	0x01A0, r24
    1916:	90 93 a1 01 	sts	0x01A1, r25
    191a:	a0 93 a2 01 	sts	0x01A2, r26
    191e:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    1922:	80 91 be 01 	lds	r24, 0x01BE
    1926:	90 91 bf 01 	lds	r25, 0x01BF
    192a:	a0 91 c0 01 	lds	r26, 0x01C0
    192e:	b0 91 c1 01 	lds	r27, 0x01C1
    1932:	80 93 d3 01 	sts	0x01D3, r24
    1936:	90 93 d4 01 	sts	0x01D4, r25
    193a:	a0 93 d5 01 	sts	0x01D5, r26
    193e:	b0 93 d6 01 	sts	0x01D6, r27
					mute_start = cur_timer;
    1942:	80 91 60 01 	lds	r24, 0x0160
    1946:	90 91 61 01 	lds	r25, 0x0161
    194a:	a0 91 62 01 	lds	r26, 0x0162
    194e:	b0 91 63 01 	lds	r27, 0x0163
    1952:	80 93 cd 01 	sts	0x01CD, r24
    1956:	90 93 ce 01 	sts	0x01CE, r25
    195a:	a0 93 cf 01 	sts	0x01CF, r26
    195e:	b0 93 d0 01 	sts	0x01D0, r27
					mute_end = UINT32_MAX;
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	9f ef       	ldi	r25, 0xFF	; 255
    1966:	dc 01       	movw	r26, r24
    1968:	80 93 c2 01 	sts	0x01C2, r24
    196c:	90 93 c3 01 	sts	0x01C3, r25
    1970:	a0 93 c4 01 	sts	0x01C4, r26
    1974:	b0 93 c5 01 	sts	0x01C5, r27
    1978:	75 c0       	rjmp	.+234    	; 0x1a64 <main+0x5b8>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    197a:	80 91 c6 01 	lds	r24, 0x01C6
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	09 f0       	breq	.+2      	; 0x1984 <main+0x4d8>
    1982:	6d c0       	rjmp	.+218    	; 0x1a5e <main+0x5b2>
    1984:	80 91 b6 01 	lds	r24, 0x01B6
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	09 f0       	breq	.+2      	; 0x198e <main+0x4e2>
    198c:	68 c0       	rjmp	.+208    	; 0x1a5e <main+0x5b2>
    198e:	80 91 9f 01 	lds	r24, 0x019F
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	09 f0       	breq	.+2      	; 0x1998 <main+0x4ec>
    1996:	63 c0       	rjmp	.+198    	; 0x1a5e <main+0x5b2>
				{
					prev_state = IDLE;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	80 93 ba 01 	sts	0x01BA, r24
					next_state = DAH;
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    19aa:	80 91 6b 01 	lds	r24, 0x016B
    19ae:	90 91 6c 01 	lds	r25, 0x016C
    19b2:	9c 01       	movw	r18, r24
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	80 91 60 01 	lds	r24, 0x0160
    19bc:	90 91 61 01 	lds	r25, 0x0161
    19c0:	a0 91 62 01 	lds	r26, 0x0162
    19c4:	b0 91 63 01 	lds	r27, 0x0163
    19c8:	82 0f       	add	r24, r18
    19ca:	93 1f       	adc	r25, r19
    19cc:	a4 1f       	adc	r26, r20
    19ce:	b5 1f       	adc	r27, r21
    19d0:	80 93 be 01 	sts	0x01BE, r24
    19d4:	90 93 bf 01 	sts	0x01BF, r25
    19d8:	a0 93 c0 01 	sts	0x01C0, r26
    19dc:	b0 93 c1 01 	sts	0x01C1, r27
					tx_start = cur_timer + TX_ON_DELAY;
    19e0:	80 91 60 01 	lds	r24, 0x0160
    19e4:	90 91 61 01 	lds	r25, 0x0161
    19e8:	a0 91 62 01 	lds	r26, 0x0162
    19ec:	b0 91 63 01 	lds	r27, 0x0163
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	a1 1d       	adc	r26, r1
    19f4:	b1 1d       	adc	r27, r1
    19f6:	80 93 a0 01 	sts	0x01A0, r24
    19fa:	90 93 a1 01 	sts	0x01A1, r25
    19fe:	a0 93 a2 01 	sts	0x01A2, r26
    1a02:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    1a06:	80 91 be 01 	lds	r24, 0x01BE
    1a0a:	90 91 bf 01 	lds	r25, 0x01BF
    1a0e:	a0 91 c0 01 	lds	r26, 0x01C0
    1a12:	b0 91 c1 01 	lds	r27, 0x01C1
    1a16:	80 93 d3 01 	sts	0x01D3, r24
    1a1a:	90 93 d4 01 	sts	0x01D4, r25
    1a1e:	a0 93 d5 01 	sts	0x01D5, r26
    1a22:	b0 93 d6 01 	sts	0x01D6, r27
					mute_start = cur_timer;
    1a26:	80 91 60 01 	lds	r24, 0x0160
    1a2a:	90 91 61 01 	lds	r25, 0x0161
    1a2e:	a0 91 62 01 	lds	r26, 0x0162
    1a32:	b0 91 63 01 	lds	r27, 0x0163
    1a36:	80 93 cd 01 	sts	0x01CD, r24
    1a3a:	90 93 ce 01 	sts	0x01CE, r25
    1a3e:	a0 93 cf 01 	sts	0x01CF, r26
    1a42:	b0 93 d0 01 	sts	0x01D0, r27
					mute_end = UINT32_MAX;
    1a46:	8f ef       	ldi	r24, 0xFF	; 255
    1a48:	9f ef       	ldi	r25, 0xFF	; 255
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	80 93 c2 01 	sts	0x01C2, r24
    1a50:	90 93 c3 01 	sts	0x01C3, r25
    1a54:	a0 93 c4 01 	sts	0x01C4, r26
    1a58:	b0 93 c5 01 	sts	0x01C5, r27
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <main+0x5b8>
				}
				else
				{
					cur_state = IDLE;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 93 ba 01 	sts	0x01BA, r24
				}

				break;
    1a64:	1f c2       	rjmp	.+1086   	; 0x1ea4 <main+0x9f8>

			case DIT:
				key_down = TRUE;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer > cur_state_end)
    1a78:	20 91 60 01 	lds	r18, 0x0160
    1a7c:	30 91 61 01 	lds	r19, 0x0161
    1a80:	40 91 62 01 	lds	r20, 0x0162
    1a84:	50 91 63 01 	lds	r21, 0x0163
    1a88:	80 91 be 01 	lds	r24, 0x01BE
    1a8c:	90 91 bf 01 	lds	r25, 0x01BF
    1a90:	a0 91 c0 01 	lds	r26, 0x01C0
    1a94:	b0 91 c1 01 	lds	r27, 0x01C1
    1a98:	82 17       	cp	r24, r18
    1a9a:	93 07       	cpc	r25, r19
    1a9c:	a4 07       	cpc	r26, r20
    1a9e:	b5 07       	cpc	r27, r21
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <main+0x5f8>
    1aa2:	45 c0       	rjmp	.+138    	; 0x1b2e <main+0x682>
				{
					prev_state = DIT;
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	80 93 ba 01 	sts	0x01BA, r24
					cur_state_end = cur_timer + dit_length;
    1ab0:	80 91 6b 01 	lds	r24, 0x016B
    1ab4:	90 91 6c 01 	lds	r25, 0x016C
    1ab8:	9c 01       	movw	r18, r24
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	80 91 60 01 	lds	r24, 0x0160
    1ac2:	90 91 61 01 	lds	r25, 0x0161
    1ac6:	a0 91 62 01 	lds	r26, 0x0162
    1aca:	b0 91 63 01 	lds	r27, 0x0163
    1ace:	82 0f       	add	r24, r18
    1ad0:	93 1f       	adc	r25, r19
    1ad2:	a4 1f       	adc	r26, r20
    1ad4:	b5 1f       	adc	r27, r21
    1ad6:	80 93 be 01 	sts	0x01BE, r24
    1ada:	90 93 bf 01 	sts	0x01BF, r25
    1ade:	a0 93 c0 01 	sts	0x01C0, r26
    1ae2:	b0 93 c1 01 	sts	0x01C1, r27
					mute_start = cur_timer;
    1ae6:	80 91 60 01 	lds	r24, 0x0160
    1aea:	90 91 61 01 	lds	r25, 0x0161
    1aee:	a0 91 62 01 	lds	r26, 0x0162
    1af2:	b0 91 63 01 	lds	r27, 0x0163
    1af6:	80 93 cd 01 	sts	0x01CD, r24
    1afa:	90 93 ce 01 	sts	0x01CE, r25
    1afe:	a0 93 cf 01 	sts	0x01CF, r26
    1b02:	b0 93 d0 01 	sts	0x01D0, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1b06:	80 91 be 01 	lds	r24, 0x01BE
    1b0a:	90 91 bf 01 	lds	r25, 0x01BF
    1b0e:	a0 91 c0 01 	lds	r26, 0x01C0
    1b12:	b0 91 c1 01 	lds	r27, 0x01C1
    1b16:	8c 59       	subi	r24, 0x9C	; 156
    1b18:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1a:	af 4f       	sbci	r26, 0xFF	; 255
    1b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1e:	80 93 c2 01 	sts	0x01C2, r24
    1b22:	90 93 c3 01 	sts	0x01C3, r25
    1b26:	a0 93 c4 01 	sts	0x01C4, r26
    1b2a:	b0 93 c5 01 	sts	0x01C5, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    1b2e:	80 91 b6 01 	lds	r24, 0x01B6
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	39 f4       	brne	.+14     	; 0x1b44 <main+0x698>
    1b36:	80 91 9f 01 	lds	r24, 0x019F
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	19 f4       	brne	.+6      	; 0x1b44 <main+0x698>
					next_state = DAH;
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	80 93 9f 01 	sts	0x019F, r24

				break;
    1b44:	af c1       	rjmp	.+862    	; 0x1ea4 <main+0x9f8>

			case DAH:
				if(cur_timer > cur_state_end)
    1b46:	20 91 60 01 	lds	r18, 0x0160
    1b4a:	30 91 61 01 	lds	r19, 0x0161
    1b4e:	40 91 62 01 	lds	r20, 0x0162
    1b52:	50 91 63 01 	lds	r21, 0x0163
    1b56:	80 91 be 01 	lds	r24, 0x01BE
    1b5a:	90 91 bf 01 	lds	r25, 0x01BF
    1b5e:	a0 91 c0 01 	lds	r26, 0x01C0
    1b62:	b0 91 c1 01 	lds	r27, 0x01C1
    1b66:	82 17       	cp	r24, r18
    1b68:	93 07       	cpc	r25, r19
    1b6a:	a4 07       	cpc	r26, r20
    1b6c:	b5 07       	cpc	r27, r21
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <main+0x6c6>
    1b70:	45 c0       	rjmp	.+138    	; 0x1bfc <main+0x750>
				{
					prev_state = DAH;
    1b72:	83 e0       	ldi	r24, 0x03	; 3
    1b74:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    1b78:	84 e0       	ldi	r24, 0x04	; 4
    1b7a:	80 93 ba 01 	sts	0x01BA, r24
					cur_state_end = cur_timer + dit_length;
    1b7e:	80 91 6b 01 	lds	r24, 0x016B
    1b82:	90 91 6c 01 	lds	r25, 0x016C
    1b86:	9c 01       	movw	r18, r24
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	80 91 60 01 	lds	r24, 0x0160
    1b90:	90 91 61 01 	lds	r25, 0x0161
    1b94:	a0 91 62 01 	lds	r26, 0x0162
    1b98:	b0 91 63 01 	lds	r27, 0x0163
    1b9c:	82 0f       	add	r24, r18
    1b9e:	93 1f       	adc	r25, r19
    1ba0:	a4 1f       	adc	r26, r20
    1ba2:	b5 1f       	adc	r27, r21
    1ba4:	80 93 be 01 	sts	0x01BE, r24
    1ba8:	90 93 bf 01 	sts	0x01BF, r25
    1bac:	a0 93 c0 01 	sts	0x01C0, r26
    1bb0:	b0 93 c1 01 	sts	0x01C1, r27
					mute_start = cur_timer;
    1bb4:	80 91 60 01 	lds	r24, 0x0160
    1bb8:	90 91 61 01 	lds	r25, 0x0161
    1bbc:	a0 91 62 01 	lds	r26, 0x0162
    1bc0:	b0 91 63 01 	lds	r27, 0x0163
    1bc4:	80 93 cd 01 	sts	0x01CD, r24
    1bc8:	90 93 ce 01 	sts	0x01CE, r25
    1bcc:	a0 93 cf 01 	sts	0x01CF, r26
    1bd0:	b0 93 d0 01 	sts	0x01D0, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1bd4:	80 91 be 01 	lds	r24, 0x01BE
    1bd8:	90 91 bf 01 	lds	r25, 0x01BF
    1bdc:	a0 91 c0 01 	lds	r26, 0x01C0
    1be0:	b0 91 c1 01 	lds	r27, 0x01C1
    1be4:	8c 59       	subi	r24, 0x9C	; 156
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	af 4f       	sbci	r26, 0xFF	; 255
    1bea:	bf 4f       	sbci	r27, 0xFF	; 255
    1bec:	80 93 c2 01 	sts	0x01C2, r24
    1bf0:	90 93 c3 01 	sts	0x01C3, r25
    1bf4:	a0 93 c4 01 	sts	0x01C4, r26
    1bf8:	b0 93 c5 01 	sts	0x01C5, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    1bfc:	80 91 c6 01 	lds	r24, 0x01C6
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	39 f4       	brne	.+14     	; 0x1c12 <main+0x766>
    1c04:	80 91 9f 01 	lds	r24, 0x019F
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	19 f4       	brne	.+6      	; 0x1c12 <main+0x766>
					next_state = DIT;
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	80 93 9f 01 	sts	0x019F, r24

				key_down = TRUE;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	80 93 33 01 	sts	0x0133, r24
				break;
    1c24:	3f c1       	rjmp	.+638    	; 0x1ea4 <main+0x9f8>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    1c26:	20 91 60 01 	lds	r18, 0x0160
    1c2a:	30 91 61 01 	lds	r19, 0x0161
    1c2e:	40 91 62 01 	lds	r20, 0x0162
    1c32:	50 91 63 01 	lds	r21, 0x0163
    1c36:	80 91 be 01 	lds	r24, 0x01BE
    1c3a:	90 91 bf 01 	lds	r25, 0x01BF
    1c3e:	a0 91 c0 01 	lds	r26, 0x01C0
    1c42:	b0 91 c1 01 	lds	r27, 0x01C1
    1c46:	82 17       	cp	r24, r18
    1c48:	93 07       	cpc	r25, r19
    1c4a:	a4 07       	cpc	r26, r20
    1c4c:	b5 07       	cpc	r27, r21
    1c4e:	08 f0       	brcs	.+2      	; 0x1c52 <main+0x7a6>
    1c50:	e2 c0       	rjmp	.+452    	; 0x1e16 <main+0x96a>
				{
					if(next_state == DIT)
    1c52:	80 91 9f 01 	lds	r24, 0x019F
    1c56:	82 30       	cpi	r24, 0x02	; 2
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <main+0x7b0>
    1c5a:	5d c0       	rjmp	.+186    	; 0x1d16 <main+0x86a>
					{
						cur_state = DIT;
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	80 93 ba 01 	sts	0x01BA, r24
						cur_state_end = cur_timer + dit_length;
    1c62:	80 91 6b 01 	lds	r24, 0x016B
    1c66:	90 91 6c 01 	lds	r25, 0x016C
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	80 91 60 01 	lds	r24, 0x0160
    1c74:	90 91 61 01 	lds	r25, 0x0161
    1c78:	a0 91 62 01 	lds	r26, 0x0162
    1c7c:	b0 91 63 01 	lds	r27, 0x0163
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	a4 1f       	adc	r26, r20
    1c86:	b5 1f       	adc	r27, r21
    1c88:	80 93 be 01 	sts	0x01BE, r24
    1c8c:	90 93 bf 01 	sts	0x01BF, r25
    1c90:	a0 93 c0 01 	sts	0x01C0, r26
    1c94:	b0 93 c1 01 	sts	0x01C1, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1c98:	80 91 60 01 	lds	r24, 0x0160
    1c9c:	90 91 61 01 	lds	r25, 0x0161
    1ca0:	a0 91 62 01 	lds	r26, 0x0162
    1ca4:	b0 91 63 01 	lds	r27, 0x0163
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	a1 1d       	adc	r26, r1
    1cac:	b1 1d       	adc	r27, r1
    1cae:	80 93 a0 01 	sts	0x01A0, r24
    1cb2:	90 93 a1 01 	sts	0x01A1, r25
    1cb6:	a0 93 a2 01 	sts	0x01A2, r26
    1cba:	b0 93 a3 01 	sts	0x01A3, r27
						tx_end = cur_state_end;
    1cbe:	80 91 be 01 	lds	r24, 0x01BE
    1cc2:	90 91 bf 01 	lds	r25, 0x01BF
    1cc6:	a0 91 c0 01 	lds	r26, 0x01C0
    1cca:	b0 91 c1 01 	lds	r27, 0x01C1
    1cce:	80 93 d3 01 	sts	0x01D3, r24
    1cd2:	90 93 d4 01 	sts	0x01D4, r25
    1cd6:	a0 93 d5 01 	sts	0x01D5, r26
    1cda:	b0 93 d6 01 	sts	0x01D6, r27
						mute_start = cur_timer;
    1cde:	80 91 60 01 	lds	r24, 0x0160
    1ce2:	90 91 61 01 	lds	r25, 0x0161
    1ce6:	a0 91 62 01 	lds	r26, 0x0162
    1cea:	b0 91 63 01 	lds	r27, 0x0163
    1cee:	80 93 cd 01 	sts	0x01CD, r24
    1cf2:	90 93 ce 01 	sts	0x01CE, r25
    1cf6:	a0 93 cf 01 	sts	0x01CF, r26
    1cfa:	b0 93 d0 01 	sts	0x01D0, r27
						mute_end = UINT32_MAX;
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	9f ef       	ldi	r25, 0xFF	; 255
    1d02:	dc 01       	movw	r26, r24
    1d04:	80 93 c2 01 	sts	0x01C2, r24
    1d08:	90 93 c3 01 	sts	0x01C3, r25
    1d0c:	a0 93 c4 01 	sts	0x01C4, r26
    1d10:	b0 93 c5 01 	sts	0x01C5, r27
    1d14:	7a c0       	rjmp	.+244    	; 0x1e0a <main+0x95e>
					}
					else if(next_state == DAH)
    1d16:	80 91 9f 01 	lds	r24, 0x019F
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	09 f0       	breq	.+2      	; 0x1d20 <main+0x874>
    1d1e:	62 c0       	rjmp	.+196    	; 0x1de4 <main+0x938>
					{
						cur_state = DAH;
    1d20:	83 e0       	ldi	r24, 0x03	; 3
    1d22:	80 93 ba 01 	sts	0x01BA, r24
						cur_state_end = cur_timer + (dit_length * 3);
    1d26:	20 91 6b 01 	lds	r18, 0x016B
    1d2a:	30 91 6c 01 	lds	r19, 0x016C
    1d2e:	c9 01       	movw	r24, r18
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	82 0f       	add	r24, r18
    1d36:	93 1f       	adc	r25, r19
    1d38:	9c 01       	movw	r18, r24
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	80 91 60 01 	lds	r24, 0x0160
    1d42:	90 91 61 01 	lds	r25, 0x0161
    1d46:	a0 91 62 01 	lds	r26, 0x0162
    1d4a:	b0 91 63 01 	lds	r27, 0x0163
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	a4 1f       	adc	r26, r20
    1d54:	b5 1f       	adc	r27, r21
    1d56:	80 93 be 01 	sts	0x01BE, r24
    1d5a:	90 93 bf 01 	sts	0x01BF, r25
    1d5e:	a0 93 c0 01 	sts	0x01C0, r26
    1d62:	b0 93 c1 01 	sts	0x01C1, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1d66:	80 91 60 01 	lds	r24, 0x0160
    1d6a:	90 91 61 01 	lds	r25, 0x0161
    1d6e:	a0 91 62 01 	lds	r26, 0x0162
    1d72:	b0 91 63 01 	lds	r27, 0x0163
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	b1 1d       	adc	r27, r1
    1d7c:	80 93 a0 01 	sts	0x01A0, r24
    1d80:	90 93 a1 01 	sts	0x01A1, r25
    1d84:	a0 93 a2 01 	sts	0x01A2, r26
    1d88:	b0 93 a3 01 	sts	0x01A3, r27
						tx_end = cur_state_end;
    1d8c:	80 91 be 01 	lds	r24, 0x01BE
    1d90:	90 91 bf 01 	lds	r25, 0x01BF
    1d94:	a0 91 c0 01 	lds	r26, 0x01C0
    1d98:	b0 91 c1 01 	lds	r27, 0x01C1
    1d9c:	80 93 d3 01 	sts	0x01D3, r24
    1da0:	90 93 d4 01 	sts	0x01D4, r25
    1da4:	a0 93 d5 01 	sts	0x01D5, r26
    1da8:	b0 93 d6 01 	sts	0x01D6, r27
						mute_start = cur_timer;
    1dac:	80 91 60 01 	lds	r24, 0x0160
    1db0:	90 91 61 01 	lds	r25, 0x0161
    1db4:	a0 91 62 01 	lds	r26, 0x0162
    1db8:	b0 91 63 01 	lds	r27, 0x0163
    1dbc:	80 93 cd 01 	sts	0x01CD, r24
    1dc0:	90 93 ce 01 	sts	0x01CE, r25
    1dc4:	a0 93 cf 01 	sts	0x01CF, r26
    1dc8:	b0 93 d0 01 	sts	0x01D0, r27
						mute_end = UINT32_MAX;
    1dcc:	8f ef       	ldi	r24, 0xFF	; 255
    1dce:	9f ef       	ldi	r25, 0xFF	; 255
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	80 93 c2 01 	sts	0x01C2, r24
    1dd6:	90 93 c3 01 	sts	0x01C3, r25
    1dda:	a0 93 c4 01 	sts	0x01C4, r26
    1dde:	b0 93 c5 01 	sts	0x01C5, r27
    1de2:	13 c0       	rjmp	.+38     	; 0x1e0a <main+0x95e>
					}
					else
					{
						cur_state = IDLE;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 ba 01 	sts	0x01BA, r24
						cur_state_end = cur_timer;
    1dea:	80 91 60 01 	lds	r24, 0x0160
    1dee:	90 91 61 01 	lds	r25, 0x0161
    1df2:	a0 91 62 01 	lds	r26, 0x0162
    1df6:	b0 91 63 01 	lds	r27, 0x0163
    1dfa:	80 93 be 01 	sts	0x01BE, r24
    1dfe:	90 93 bf 01 	sts	0x01BF, r25
    1e02:	a0 93 c0 01 	sts	0x01C0, r26
    1e06:	b0 93 c1 01 	sts	0x01C1, r27
					}

					prev_state = DITDELAY;
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	80 93 6a 01 	sts	0x016A, r24
					next_state = IDLE;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 93 9f 01 	sts	0x019F, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    1e16:	80 91 c6 01 	lds	r24, 0x01C6
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	61 f4       	brne	.+24     	; 0x1e36 <main+0x98a>
    1e1e:	80 91 6a 01 	lds	r24, 0x016A
    1e22:	83 30       	cpi	r24, 0x03	; 3
    1e24:	41 f4       	brne	.+16     	; 0x1e36 <main+0x98a>
    1e26:	80 91 9f 01 	lds	r24, 0x019F
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <main+0x98a>
					next_state = DIT;
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	80 93 9f 01 	sts	0x019F, r24
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <main+0x9a8>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    1e36:	80 91 b6 01 	lds	r24, 0x01B6
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	59 f4       	brne	.+22     	; 0x1e54 <main+0x9a8>
    1e3e:	80 91 6a 01 	lds	r24, 0x016A
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	39 f4       	brne	.+14     	; 0x1e54 <main+0x9a8>
    1e46:	80 91 9f 01 	lds	r24, 0x019F
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	19 f4       	brne	.+6      	; 0x1e54 <main+0x9a8>
					next_state = DAH;
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    1e54:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1e58:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	80 93 33 01 	sts	0x0133, r24
				break;
    1e62:	20 c0       	rjmp	.+64     	; 0x1ea4 <main+0x9f8>

			case EXIT:
				key_down = FALSE;
    1e64:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1e68:	10 92 32 01 	sts	0x0132, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    1e6c:	10 92 33 01 	sts	0x0133, r1

				if(cur_timer > cur_state_end)
    1e70:	20 91 60 01 	lds	r18, 0x0160
    1e74:	30 91 61 01 	lds	r19, 0x0161
    1e78:	40 91 62 01 	lds	r20, 0x0162
    1e7c:	50 91 63 01 	lds	r21, 0x0163
    1e80:	80 91 be 01 	lds	r24, 0x01BE
    1e84:	90 91 bf 01 	lds	r25, 0x01BF
    1e88:	a0 91 c0 01 	lds	r26, 0x01C0
    1e8c:	b0 91 c1 01 	lds	r27, 0x01C1
    1e90:	82 17       	cp	r24, r18
    1e92:	93 07       	cpc	r25, r19
    1e94:	a4 07       	cpc	r26, r20
    1e96:	b5 07       	cpc	r27, r21
    1e98:	18 f4       	brcc	.+6      	; 0x1ea0 <main+0x9f4>
				{
					cur_state = IDLE;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	80 93 ba 01 	sts	0x01BA, r24
				}
				break;
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <main+0x9f8>

			default:
				break;
    1ea2:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    1ea4:	0c 94 9e 19 	jmp	0x333c	; 0x333c <main+0x1e90>

		case ANNOUNCE:
			switch(cur_state)
    1ea8:	80 91 ba 01 	lds	r24, 0x01BA
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	84 30       	cpi	r24, 0x04	; 4
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	44 f4       	brge	.+16     	; 0x1ec6 <main+0xa1a>
    1eb6:	82 30       	cpi	r24, 0x02	; 2
    1eb8:	91 05       	cpc	r25, r1
    1eba:	0c f0       	brlt	.+2      	; 0x1ebe <main+0xa12>
    1ebc:	34 c1       	rjmp	.+616    	; 0x2126 <main+0xc7a>
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	31 f0       	breq	.+12     	; 0x1ed0 <main+0xa24>
    1ec4:	8c c1       	rjmp	.+792    	; 0x21de <main+0xd32>
    1ec6:	87 30       	cpi	r24, 0x07	; 7
    1ec8:	91 05       	cpc	r25, r1
    1eca:	0c f0       	brlt	.+2      	; 0x1ece <main+0xa22>
    1ecc:	88 c1       	rjmp	.+784    	; 0x21de <main+0xd32>
    1ece:	67 c1       	rjmp	.+718    	; 0x219e <main+0xcf2>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    1ed0:	20 91 36 01 	lds	r18, 0x0136
    1ed4:	30 91 37 01 	lds	r19, 0x0137
    1ed8:	80 91 d1 01 	lds	r24, 0x01D1
    1edc:	90 91 d2 01 	lds	r25, 0x01D2
    1ee0:	28 17       	cp	r18, r24
    1ee2:	39 07       	cpc	r19, r25
    1ee4:	c9 f4       	brne	.+50     	; 0x1f18 <main+0xa6c>
    1ee6:	80 91 3a 01 	lds	r24, 0x013A
    1eea:	88 23       	and	r24, r24
    1eec:	a9 f4       	brne	.+42     	; 0x1f18 <main+0xa6c>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    1eee:	80 91 36 01 	lds	r24, 0x0136
    1ef2:	90 91 37 01 	lds	r25, 0x0137
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	80 81       	ld	r24, Z
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	80 97       	sbiw	r24, 0x20	; 32
    1f00:	88 59       	subi	r24, 0x98	; 152
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	9b 83       	std	Y+3, r25	; 0x03
    1f06:	8a 83       	std	Y+2, r24	; 0x02
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	14 91       	lpm	r17, Z+
    1f10:	1c 83       	std	Y+4, r17	; 0x04
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	80 93 3a 01 	sts	0x013A, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    1f18:	80 91 3a 01 	lds	r24, 0x013A
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <main+0xa76>
    1f20:	ce c0       	rjmp	.+412    	; 0x20be <main+0xc12>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    1f22:	80 91 3a 01 	lds	r24, 0x013A
    1f26:	80 38       	cpi	r24, 0x80	; 128
    1f28:	29 f0       	breq	.+10     	; 0x1f34 <main+0xa88>
    1f2a:	80 91 3a 01 	lds	r24, 0x013A
    1f2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <main+0xa88>
    1f32:	79 c0       	rjmp	.+242    	; 0x2026 <main+0xb7a>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    1f34:	80 91 3a 01 	lds	r24, 0x013A
    1f38:	80 38       	cpi	r24, 0x80	; 128
    1f3a:	21 f5       	brne	.+72     	; 0x1f84 <main+0xad8>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    1f3c:	20 91 6b 01 	lds	r18, 0x016B
    1f40:	30 91 6c 01 	lds	r19, 0x016C
    1f44:	c9 01       	movw	r24, r18
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	82 0f       	add	r24, r18
    1f4c:	93 1f       	adc	r25, r19
    1f4e:	9c 01       	movw	r18, r24
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	80 91 60 01 	lds	r24, 0x0160
    1f58:	90 91 61 01 	lds	r25, 0x0161
    1f5c:	a0 91 62 01 	lds	r26, 0x0162
    1f60:	b0 91 63 01 	lds	r27, 0x0163
    1f64:	82 0f       	add	r24, r18
    1f66:	93 1f       	adc	r25, r19
    1f68:	a4 1f       	adc	r26, r20
    1f6a:	b5 1f       	adc	r27, r21
    1f6c:	80 93 be 01 	sts	0x01BE, r24
    1f70:	90 93 bf 01 	sts	0x01BF, r25
    1f74:	a0 93 c0 01 	sts	0x01C0, r26
    1f78:	b0 93 c1 01 	sts	0x01C1, r27
							cur_state = DAHDELAY;
    1f7c:	85 e0       	ldi	r24, 0x05	; 5
    1f7e:	80 93 ba 01 	sts	0x01BA, r24
    1f82:	27 c0       	rjmp	.+78     	; 0x1fd2 <main+0xb26>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    1f84:	20 91 6b 01 	lds	r18, 0x016B
    1f88:	30 91 6c 01 	lds	r19, 0x016C
    1f8c:	c9 01       	movw	r24, r18
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	82 1b       	sub	r24, r18
    1f9c:	93 0b       	sbc	r25, r19
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	80 91 60 01 	lds	r24, 0x0160
    1fa8:	90 91 61 01 	lds	r25, 0x0161
    1fac:	a0 91 62 01 	lds	r26, 0x0162
    1fb0:	b0 91 63 01 	lds	r27, 0x0163
    1fb4:	82 0f       	add	r24, r18
    1fb6:	93 1f       	adc	r25, r19
    1fb8:	a4 1f       	adc	r26, r20
    1fba:	b5 1f       	adc	r27, r21
    1fbc:	80 93 be 01 	sts	0x01BE, r24
    1fc0:	90 93 bf 01 	sts	0x01BF, r25
    1fc4:	a0 93 c0 01 	sts	0x01C0, r26
    1fc8:	b0 93 c1 01 	sts	0x01C1, r27
							cur_state = DAHDELAY;
    1fcc:	85 e0       	ldi	r24, 0x05	; 5
    1fce:	80 93 ba 01 	sts	0x01BA, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    1fd2:	80 91 36 01 	lds	r24, 0x0136
    1fd6:	90 91 37 01 	lds	r25, 0x0137
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	90 93 37 01 	sts	0x0137, r25
    1fe0:	80 93 36 01 	sts	0x0136, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    1fe4:	80 91 36 01 	lds	r24, 0x0136
    1fe8:	90 91 37 01 	lds	r25, 0x0137
    1fec:	fc 01       	movw	r30, r24
    1fee:	80 81       	ld	r24, Z
    1ff0:	88 23       	and	r24, r24
    1ff2:	19 f4       	brne	.+6      	; 0x1ffa <main+0xb4e>
							cur_character = '\0';
    1ff4:	10 92 3a 01 	sts	0x013A, r1
    1ff8:	15 c0       	rjmp	.+42     	; 0x2024 <main+0xb78>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    1ffa:	80 91 36 01 	lds	r24, 0x0136
    1ffe:	90 91 37 01 	lds	r25, 0x0137
    2002:	fc 01       	movw	r30, r24
    2004:	80 81       	ld	r24, Z
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	80 97       	sbiw	r24, 0x20	; 32
    200c:	88 59       	subi	r24, 0x98	; 152
    200e:	9f 4f       	sbci	r25, 0xFF	; 255
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	fc 01       	movw	r30, r24
    201a:	14 91       	lpm	r17, Z+
    201c:	1f 83       	std	Y+7, r17	; 0x07
    201e:	8f 81       	ldd	r24, Y+7	; 0x07
    2020:	80 93 3a 01 	sts	0x013A, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2024:	4b c0       	rjmp	.+150    	; 0x20bc <main+0xc10>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    2026:	80 91 3a 01 	lds	r24, 0x013A
    202a:	88 23       	and	r24, r24
    202c:	24 f5       	brge	.+72     	; 0x2076 <main+0xbca>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    202e:	20 91 6b 01 	lds	r18, 0x016B
    2032:	30 91 6c 01 	lds	r19, 0x016C
    2036:	c9 01       	movw	r24, r18
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	82 0f       	add	r24, r18
    203e:	93 1f       	adc	r25, r19
    2040:	9c 01       	movw	r18, r24
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	80 91 60 01 	lds	r24, 0x0160
    204a:	90 91 61 01 	lds	r25, 0x0161
    204e:	a0 91 62 01 	lds	r26, 0x0162
    2052:	b0 91 63 01 	lds	r27, 0x0163
    2056:	82 0f       	add	r24, r18
    2058:	93 1f       	adc	r25, r19
    205a:	a4 1f       	adc	r26, r20
    205c:	b5 1f       	adc	r27, r21
    205e:	80 93 be 01 	sts	0x01BE, r24
    2062:	90 93 bf 01 	sts	0x01BF, r25
    2066:	a0 93 c0 01 	sts	0x01C0, r26
    206a:	b0 93 c1 01 	sts	0x01C1, r27
							cur_state = DAH;
    206e:	83 e0       	ldi	r24, 0x03	; 3
    2070:	80 93 ba 01 	sts	0x01BA, r24
    2074:	1e c0       	rjmp	.+60     	; 0x20b2 <main+0xc06>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    2076:	80 91 6b 01 	lds	r24, 0x016B
    207a:	90 91 6c 01 	lds	r25, 0x016C
    207e:	9c 01       	movw	r18, r24
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	80 91 60 01 	lds	r24, 0x0160
    2088:	90 91 61 01 	lds	r25, 0x0161
    208c:	a0 91 62 01 	lds	r26, 0x0162
    2090:	b0 91 63 01 	lds	r27, 0x0163
    2094:	82 0f       	add	r24, r18
    2096:	93 1f       	adc	r25, r19
    2098:	a4 1f       	adc	r26, r20
    209a:	b5 1f       	adc	r27, r21
    209c:	80 93 be 01 	sts	0x01BE, r24
    20a0:	90 93 bf 01 	sts	0x01BF, r25
    20a4:	a0 93 c0 01 	sts	0x01C0, r26
    20a8:	b0 93 c1 01 	sts	0x01C1, r27
							cur_state = DIT;
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	80 93 ba 01 	sts	0x01BA, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    20b2:	80 91 3a 01 	lds	r24, 0x013A
    20b6:	88 0f       	add	r24, r24
    20b8:	80 93 3a 01 	sts	0x013A, r24
    20bc:	33 c0       	rjmp	.+102    	; 0x2124 <main+0xc78>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    20be:	80 91 d1 01 	lds	r24, 0x01D1
    20c2:	90 91 d2 01 	lds	r25, 0x01D2
    20c6:	2e e1       	ldi	r18, 0x1E	; 30
    20c8:	31 e0       	ldi	r19, 0x01	; 1
    20ca:	b9 01       	movw	r22, r18
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	0e 94 3b 1b 	call	0x3676	; 0x3676 <memcpy>
					cur_char_p = announce_buffer;
    20d4:	80 91 d1 01 	lds	r24, 0x01D1
    20d8:	90 91 d2 01 	lds	r25, 0x01D2
    20dc:	90 93 37 01 	sts	0x0137, r25
    20e0:	80 93 36 01 	sts	0x0136, r24
					cur_character = '\0';
    20e4:	10 92 3a 01 	sts	0x013A, r1

					// Set back into previous mode
					set_st_freq(ST_DEFAULT);
    20e8:	68 e5       	ldi	r22, 0x58	; 88
    20ea:	72 e0       	ldi	r23, 0x02	; 2
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	0e 94 2f 0a 	call	0x145e	; 0x145e <set_st_freq>
					cur_mode = prev_mode;
    20f4:	80 91 b0 01 	lds	r24, 0x01B0
    20f8:	80 93 9a 01 	sts	0x019A, r24
					cur_state = prev_state;
    20fc:	80 91 6a 01 	lds	r24, 0x016A
    2100:	80 93 ba 01 	sts	0x01BA, r24
					cur_state_end = prev_state_end;
    2104:	80 91 ac 01 	lds	r24, 0x01AC
    2108:	90 91 ad 01 	lds	r25, 0x01AD
    210c:	a0 91 ae 01 	lds	r26, 0x01AE
    2110:	b0 91 af 01 	lds	r27, 0x01AF
    2114:	80 93 be 01 	sts	0x01BE, r24
    2118:	90 93 bf 01 	sts	0x01BF, r25
    211c:	a0 93 c0 01 	sts	0x01C0, r26
    2120:	b0 93 c1 01 	sts	0x01C1, r27
				}
				break;
    2124:	5d c0       	rjmp	.+186    	; 0x21e0 <main+0xd34>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2126:	20 91 60 01 	lds	r18, 0x0160
    212a:	30 91 61 01 	lds	r19, 0x0161
    212e:	40 91 62 01 	lds	r20, 0x0162
    2132:	50 91 63 01 	lds	r21, 0x0163
    2136:	80 91 be 01 	lds	r24, 0x01BE
    213a:	90 91 bf 01 	lds	r25, 0x01BF
    213e:	a0 91 c0 01 	lds	r26, 0x01C0
    2142:	b0 91 c1 01 	lds	r27, 0x01C1
    2146:	82 17       	cp	r24, r18
    2148:	93 07       	cpc	r25, r19
    214a:	a4 07       	cpc	r26, r20
    214c:	b5 07       	cpc	r27, r21
    214e:	f0 f4       	brcc	.+60     	; 0x218c <main+0xce0>
				{
					cur_state_end = cur_timer + dit_length;
    2150:	80 91 6b 01 	lds	r24, 0x016B
    2154:	90 91 6c 01 	lds	r25, 0x016C
    2158:	9c 01       	movw	r18, r24
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	80 91 60 01 	lds	r24, 0x0160
    2162:	90 91 61 01 	lds	r25, 0x0161
    2166:	a0 91 62 01 	lds	r26, 0x0162
    216a:	b0 91 63 01 	lds	r27, 0x0163
    216e:	82 0f       	add	r24, r18
    2170:	93 1f       	adc	r25, r19
    2172:	a4 1f       	adc	r26, r20
    2174:	b5 1f       	adc	r27, r21
    2176:	80 93 be 01 	sts	0x01BE, r24
    217a:	90 93 bf 01 	sts	0x01BF, r25
    217e:	a0 93 c0 01 	sts	0x01C0, r26
    2182:	b0 93 c1 01 	sts	0x01C1, r27
					cur_state = DITDELAY;
    2186:	84 e0       	ldi	r24, 0x04	; 4
    2188:	80 93 ba 01 	sts	0x01BA, r24
				}

				key_down = FALSE;
    218c:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	80 93 33 01 	sts	0x0133, r24
				break;
    219c:	21 c0       	rjmp	.+66     	; 0x21e0 <main+0xd34>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    219e:	20 91 60 01 	lds	r18, 0x0160
    21a2:	30 91 61 01 	lds	r19, 0x0161
    21a6:	40 91 62 01 	lds	r20, 0x0162
    21aa:	50 91 63 01 	lds	r21, 0x0163
    21ae:	80 91 be 01 	lds	r24, 0x01BE
    21b2:	90 91 bf 01 	lds	r25, 0x01BF
    21b6:	a0 91 c0 01 	lds	r26, 0x01C0
    21ba:	b0 91 c1 01 	lds	r27, 0x01C1
    21be:	82 17       	cp	r24, r18
    21c0:	93 07       	cpc	r25, r19
    21c2:	a4 07       	cpc	r26, r20
    21c4:	b5 07       	cpc	r27, r21
    21c6:	18 f4       	brcc	.+6      	; 0x21ce <main+0xd22>
					cur_state = IDLE;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	80 93 ba 01 	sts	0x01BA, r24

				key_down = FALSE;
    21ce:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    21d2:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	80 93 33 01 	sts	0x0133, r24
				break;
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <main+0xd34>

			default:
				break;
    21de:	00 00       	nop
			}
			break;
    21e0:	0c 94 9e 19 	jmp	0x333c	; 0x333c <main+0x1e90>

		case TUNE:
			switch(cur_state)
    21e4:	80 91 ba 01 	lds	r24, 0x01BA
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	87 30       	cpi	r24, 0x07	; 7
    21ee:	91 05       	cpc	r25, r1
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <main+0xd48>
    21f2:	50 c0       	rjmp	.+160    	; 0x2294 <main+0xde8>
    21f4:	88 30       	cpi	r24, 0x08	; 8
    21f6:	91 05       	cpc	r25, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <main+0xd50>
    21fa:	8d c0       	rjmp	.+282    	; 0x2316 <main+0xe6a>
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	91 05       	cpc	r25, r1
    2200:	09 f0       	breq	.+2      	; 0x2204 <main+0xd58>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    2202:	af c0       	rjmp	.+350    	; 0x2362 <main+0xeb6>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    2204:	80 91 60 01 	lds	r24, 0x0160
    2208:	90 91 61 01 	lds	r25, 0x0161
    220c:	a0 91 62 01 	lds	r26, 0x0162
    2210:	b0 91 63 01 	lds	r27, 0x0163
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	a1 1d       	adc	r26, r1
    2218:	b1 1d       	adc	r27, r1
    221a:	80 93 a0 01 	sts	0x01A0, r24
    221e:	90 93 a1 01 	sts	0x01A1, r25
    2222:	a0 93 a2 01 	sts	0x01A2, r26
    2226:	b0 93 a3 01 	sts	0x01A3, r27
				tx_end = UINT32_MAX;
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	9f ef       	ldi	r25, 0xFF	; 255
    222e:	dc 01       	movw	r26, r24
    2230:	80 93 d3 01 	sts	0x01D3, r24
    2234:	90 93 d4 01 	sts	0x01D4, r25
    2238:	a0 93 d5 01 	sts	0x01D5, r26
    223c:	b0 93 d6 01 	sts	0x01D6, r27
				cur_state_end = UINT32_MAX;
    2240:	8f ef       	ldi	r24, 0xFF	; 255
    2242:	9f ef       	ldi	r25, 0xFF	; 255
    2244:	dc 01       	movw	r26, r24
    2246:	80 93 be 01 	sts	0x01BE, r24
    224a:	90 93 bf 01 	sts	0x01BF, r25
    224e:	a0 93 c0 01 	sts	0x01C0, r26
    2252:	b0 93 c1 01 	sts	0x01C1, r27
				mute_start = cur_timer;
    2256:	80 91 60 01 	lds	r24, 0x0160
    225a:	90 91 61 01 	lds	r25, 0x0161
    225e:	a0 91 62 01 	lds	r26, 0x0162
    2262:	b0 91 63 01 	lds	r27, 0x0163
    2266:	80 93 cd 01 	sts	0x01CD, r24
    226a:	90 93 ce 01 	sts	0x01CE, r25
    226e:	a0 93 cf 01 	sts	0x01CF, r26
    2272:	b0 93 d0 01 	sts	0x01D0, r27
				mute_end = UINT32_MAX;
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	9f ef       	ldi	r25, 0xFF	; 255
    227a:	dc 01       	movw	r26, r24
    227c:	80 93 c2 01 	sts	0x01C2, r24
    2280:	90 93 c3 01 	sts	0x01C3, r25
    2284:	a0 93 c4 01 	sts	0x01C4, r26
    2288:	b0 93 c5 01 	sts	0x01C5, r27

				cur_state = KEYDOWN;
    228c:	87 e0       	ldi	r24, 0x07	; 7
    228e:	80 93 ba 01 	sts	0x01BA, r24
				break;
    2292:	67 c0       	rjmp	.+206    	; 0x2362 <main+0xeb6>

			case KEYDOWN:
				key_down = TRUE;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	80 93 33 01 	sts	0x0133, r24

				if(ANYBUTTON)
    22a6:	80 91 c6 01 	lds	r24, 0x01C6
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	61 f0       	breq	.+24     	; 0x22c6 <main+0xe1a>
    22ae:	80 91 b6 01 	lds	r24, 0x01B6
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	41 f0       	breq	.+16     	; 0x22c6 <main+0xe1a>
    22b6:	80 91 b9 01 	lds	r24, 0x01B9
    22ba:	81 30       	cpi	r24, 0x01	; 1
    22bc:	21 f0       	breq	.+8      	; 0x22c6 <main+0xe1a>
    22be:	80 91 b7 01 	lds	r24, 0x01B7
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	39 f5       	brne	.+78     	; 0x2314 <main+0xe68>
				{
					cur_state = ENDKEYDOWN;
    22c6:	88 e0       	ldi	r24, 0x08	; 8
    22c8:	80 93 ba 01 	sts	0x01BA, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    22cc:	80 91 60 01 	lds	r24, 0x0160
    22d0:	90 91 61 01 	lds	r25, 0x0161
    22d4:	a0 91 62 01 	lds	r26, 0x0162
    22d8:	b0 91 63 01 	lds	r27, 0x0163
    22dc:	8c 59       	subi	r24, 0x9C	; 156
    22de:	9f 4f       	sbci	r25, 0xFF	; 255
    22e0:	af 4f       	sbci	r26, 0xFF	; 255
    22e2:	bf 4f       	sbci	r27, 0xFF	; 255
    22e4:	80 93 be 01 	sts	0x01BE, r24
    22e8:	90 93 bf 01 	sts	0x01BF, r25
    22ec:	a0 93 c0 01 	sts	0x01C0, r26
    22f0:	b0 93 c1 01 	sts	0x01C1, r27
					tx_end = cur_timer;
    22f4:	80 91 60 01 	lds	r24, 0x0160
    22f8:	90 91 61 01 	lds	r25, 0x0161
    22fc:	a0 91 62 01 	lds	r26, 0x0162
    2300:	b0 91 63 01 	lds	r27, 0x0163
    2304:	80 93 d3 01 	sts	0x01D3, r24
    2308:	90 93 d4 01 	sts	0x01D4, r25
    230c:	a0 93 d5 01 	sts	0x01D5, r26
    2310:	b0 93 d6 01 	sts	0x01D6, r27
				}
				break;
    2314:	26 c0       	rjmp	.+76     	; 0x2362 <main+0xeb6>

			case ENDKEYDOWN:
				key_down = FALSE;
    2316:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    231a:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer >= cur_state_end)
    2324:	20 91 60 01 	lds	r18, 0x0160
    2328:	30 91 61 01 	lds	r19, 0x0161
    232c:	40 91 62 01 	lds	r20, 0x0162
    2330:	50 91 63 01 	lds	r21, 0x0163
    2334:	80 91 be 01 	lds	r24, 0x01BE
    2338:	90 91 bf 01 	lds	r25, 0x01BF
    233c:	a0 91 c0 01 	lds	r26, 0x01C0
    2340:	b0 91 c1 01 	lds	r27, 0x01C1
    2344:	28 17       	cp	r18, r24
    2346:	39 07       	cpc	r19, r25
    2348:	4a 07       	cpc	r20, r26
    234a:	5b 07       	cpc	r21, r27
    234c:	48 f0       	brcs	.+18     	; 0x2360 <main+0xeb4>
				{
					mute_on = FALSE;
    234e:	10 92 33 01 	sts	0x0133, r1
					cur_state = IDLE;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 ba 01 	sts	0x01BA, r24
					cur_mode = default_mode;
    2358:	80 91 65 01 	lds	r24, 0x0165
    235c:	80 93 9a 01 	sts	0x019A, r24
				}
				break;
    2360:	00 00       	nop

			default:
				break;
			}
			break;
    2362:	0c 94 9e 19 	jmp	0x333c	; 0x333c <main+0x1e90>

		case MENU:
			switch(cur_state)
    2366:	80 91 ba 01 	lds	r24, 0x01BA
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	89 30       	cpi	r24, 0x09	; 9
    2370:	91 05       	cpc	r25, r1
    2372:	91 f0       	breq	.+36     	; 0x2398 <main+0xeec>
    2374:	8a 30       	cpi	r24, 0x0A	; 10
    2376:	91 05       	cpc	r25, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <main+0xed0>
    237a:	51 c0       	rjmp	.+162    	; 0x241e <main+0xf72>
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	91 05       	cpc	r25, r1
    2380:	09 f0       	breq	.+2      	; 0x2384 <main+0xed8>
    2382:	66 c1       	rjmp	.+716    	; 0x2650 <main+0x11a4>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	90 93 3c 01 	sts	0x013C, r25
    238c:	80 93 3b 01 	sts	0x013B, r24
				cur_state = MENUANNOUNCE;
    2390:	89 e0       	ldi	r24, 0x09	; 9
    2392:	80 93 ba 01 	sts	0x01BA, r24
				break;
    2396:	64 c1       	rjmp	.+712    	; 0x2660 <main+0x11b4>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 08 1a 	call	0x3410	; 0x3410 <malloc>
    23a0:	90 93 3e 01 	sts	0x013E, r25
    23a4:	80 93 3d 01 	sts	0x013D, r24
				memset(cur_menu, '\0', 2);
    23a8:	80 91 3d 01 	lds	r24, 0x013D
    23ac:	90 91 3e 01 	lds	r25, 0x013E
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	70 e0       	ldi	r23, 0x00	; 0
    23b4:	42 e0       	ldi	r20, 0x02	; 2
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	0e 94 44 1b 	call	0x3688	; 0x3688 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    23bc:	80 91 3d 01 	lds	r24, 0x013D
    23c0:	90 91 3e 01 	lds	r25, 0x013E
    23c4:	20 91 3b 01 	lds	r18, 0x013B
    23c8:	30 91 3c 01 	lds	r19, 0x013C
    23cc:	b9 01       	movw	r22, r18
    23ce:	41 e0       	ldi	r20, 0x01	; 1
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    23d6:	80 91 60 01 	lds	r24, 0x0160
    23da:	90 91 61 01 	lds	r25, 0x0161
    23de:	a0 91 62 01 	lds	r26, 0x0162
    23e2:	b0 91 63 01 	lds	r27, 0x0163
    23e6:	80 56       	subi	r24, 0x60	; 96
    23e8:	90 4f       	sbci	r25, 0xF0	; 240
    23ea:	af 4f       	sbci	r26, 0xFF	; 255
    23ec:	bf 4f       	sbci	r27, 0xFF	; 255
    23ee:	80 93 be 01 	sts	0x01BE, r24
    23f2:	90 93 bf 01 	sts	0x01BF, r25
    23f6:	a0 93 c0 01 	sts	0x01C0, r26
    23fa:	b0 93 c1 01 	sts	0x01C1, r27

				// Set next state
				cur_state = MENUINPUT;
    23fe:	8a e0       	ldi	r24, 0x0A	; 10
    2400:	80 93 ba 01 	sts	0x01BA, r24

				// Announce the menu item
				announce(cur_menu);
    2404:	80 91 3d 01 	lds	r24, 0x013D
    2408:	90 91 3e 01 	lds	r25, 0x013E
    240c:	0e 94 57 06 	call	0xcae	; 0xcae <announce>

				free(cur_menu);
    2410:	80 91 3d 01 	lds	r24, 0x013D
    2414:	90 91 3e 01 	lds	r25, 0x013E
    2418:	0e 94 a2 1a 	call	0x3544	; 0x3544 <free>
				break;
    241c:	21 c1       	rjmp	.+578    	; 0x2660 <main+0x11b4>

			case MENUINPUT:
				text_buffer = malloc(20);
    241e:	84 e1       	ldi	r24, 0x14	; 20
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 08 1a 	call	0x3410	; 0x3410 <malloc>
    2426:	90 93 39 01 	sts	0x0139, r25
    242a:	80 93 38 01 	sts	0x0138, r24
				memset(text_buffer, '\0', 20);
    242e:	80 91 38 01 	lds	r24, 0x0138
    2432:	90 91 39 01 	lds	r25, 0x0139
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	44 e1       	ldi	r20, 0x14	; 20
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	0e 94 44 1b 	call	0x3688	; 0x3688 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    2442:	20 91 60 01 	lds	r18, 0x0160
    2446:	30 91 61 01 	lds	r19, 0x0161
    244a:	40 91 62 01 	lds	r20, 0x0162
    244e:	50 91 63 01 	lds	r21, 0x0163
    2452:	80 91 be 01 	lds	r24, 0x01BE
    2456:	90 91 bf 01 	lds	r25, 0x01BF
    245a:	a0 91 c0 01 	lds	r26, 0x01C0
    245e:	b0 91 c1 01 	lds	r27, 0x01C1
    2462:	28 17       	cp	r18, r24
    2464:	39 07       	cpc	r19, r25
    2466:	4a 07       	cpc	r20, r26
    2468:	5b 07       	cpc	r21, r27
    246a:	08 f0       	brcs	.+2      	; 0x246e <main+0xfc2>
    246c:	d7 c0       	rjmp	.+430    	; 0x261c <main+0x1170>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    246e:	80 91 b9 01 	lds	r24, 0x01B9
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	51 f5       	brne	.+84     	; 0x24ca <main+0x101e>
					{
						debounce(TRUE);
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	0e 94 04 04 	call	0x808	; 0x808 <debounce>
						cur_menu_p++;
    247c:	80 91 3b 01 	lds	r24, 0x013B
    2480:	90 91 3c 01 	lds	r25, 0x013C
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	90 93 3c 01 	sts	0x013C, r25
    248a:	80 93 3b 01 	sts	0x013B, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    248e:	80 91 3b 01 	lds	r24, 0x013B
    2492:	90 91 3c 01 	lds	r25, 0x013C
    2496:	fc 01       	movw	r30, r24
    2498:	80 81       	ld	r24, Z
    249a:	88 23       	and	r24, r24
    249c:	91 f4       	brne	.+36     	; 0x24c2 <main+0x1016>
						{
							cur_state = IDLE;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	80 93 ba 01 	sts	0x01BA, r24
							cur_mode = default_mode;
    24a4:	80 91 65 01 	lds	r24, 0x0165
    24a8:	80 93 9a 01 	sts	0x019A, r24

							set_st_freq(ST_LOW);
    24ac:	60 e9       	ldi	r22, 0x90	; 144
    24ae:	71 e0       	ldi	r23, 0x01	; 1
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 2f 0a 	call	0x145e	; 0x145e <set_st_freq>
							announce("X");
    24b8:	8f e1       	ldi	r24, 0x1F	; 31
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
								announce("P");
							}
							break;

						default:
							break;
    24c0:	c0 c0       	rjmp	.+384    	; 0x2642 <main+0x1196>

							set_st_freq(ST_LOW);
							announce("X");
						}
						else
							cur_state = MENUANNOUNCE;
    24c2:	89 e0       	ldi	r24, 0x09	; 9
    24c4:	80 93 ba 01 	sts	0x01BA, r24
								announce("P");
							}
							break;

						default:
							break;
    24c8:	bc c0       	rjmp	.+376    	; 0x2642 <main+0x1196>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    24ca:	80 91 b7 01 	lds	r24, 0x01B7
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <main+0x1028>
    24d2:	b6 c0       	rjmp	.+364    	; 0x2640 <main+0x1194>
					{
						// need to clear the button buffer
						debounce(TRUE);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	0e 94 04 04 	call	0x808	; 0x808 <debounce>

						switch(*cur_menu_p)
    24da:	80 91 3b 01 	lds	r24, 0x013B
    24de:	90 91 3c 01 	lds	r25, 0x013C
    24e2:	fc 01       	movw	r30, r24
    24e4:	80 81       	ld	r24, Z
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	83 35       	cpi	r24, 0x53	; 83
    24ec:	91 05       	cpc	r25, r1
    24ee:	a1 f0       	breq	.+40     	; 0x2518 <main+0x106c>
    24f0:	84 35       	cpi	r24, 0x54	; 84
    24f2:	91 05       	cpc	r25, r1
    24f4:	4c f4       	brge	.+18     	; 0x2508 <main+0x105c>
    24f6:	8b 34       	cpi	r24, 0x4B	; 75
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <main+0x1052>
    24fc:	6e c0       	rjmp	.+220    	; 0x25da <main+0x112e>
    24fe:	82 35       	cpi	r24, 0x52	; 82
    2500:	91 05       	cpc	r25, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <main+0x105a>
    2504:	56 c0       	rjmp	.+172    	; 0x25b2 <main+0x1106>
								announce("P");
							}
							break;

						default:
							break;
    2506:	9d c0       	rjmp	.+314    	; 0x2642 <main+0x1196>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    2508:	86 35       	cpi	r24, 0x56	; 86
    250a:	91 05       	cpc	r25, r1
    250c:	09 f4       	brne	.+2      	; 0x2510 <main+0x1064>
    250e:	5b c0       	rjmp	.+182    	; 0x25c6 <main+0x111a>
    2510:	87 35       	cpi	r24, 0x57	; 87
    2512:	91 05       	cpc	r25, r1
    2514:	e9 f0       	breq	.+58     	; 0x2550 <main+0x10a4>
								announce("P");
							}
							break;

						default:
							break;
    2516:	95 c0       	rjmp	.+298    	; 0x2642 <main+0x1196>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    2518:	80 91 60 01 	lds	r24, 0x0160
    251c:	90 91 61 01 	lds	r25, 0x0161
    2520:	a0 91 62 01 	lds	r26, 0x0162
    2524:	b0 91 63 01 	lds	r27, 0x0163
    2528:	80 56       	subi	r24, 0x60	; 96
    252a:	90 4f       	sbci	r25, 0xF0	; 240
    252c:	af 4f       	sbci	r26, 0xFF	; 255
    252e:	bf 4f       	sbci	r27, 0xFF	; 255
    2530:	80 93 be 01 	sts	0x01BE, r24
    2534:	90 93 bf 01 	sts	0x01BF, r25
    2538:	a0 93 c0 01 	sts	0x01C0, r26
    253c:	b0 93 c1 01 	sts	0x01C1, r27
							cur_mode = SETWPM;
    2540:	85 e0       	ldi	r24, 0x05	; 5
    2542:	80 93 9a 01 	sts	0x019A, r24

							announce("R");
    2546:	81 e2       	ldi	r24, 0x21	; 33
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
							break;
    254e:	79 c0       	rjmp	.+242    	; 0x2642 <main+0x1196>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	80 93 ba 01 	sts	0x01BA, r24
							cur_mode = default_mode;
    2556:	80 91 65 01 	lds	r24, 0x0165
    255a:	80 93 9a 01 	sts	0x019A, r24

							sprintf(text_buffer, "%d", wpm);
    255e:	40 91 38 01 	lds	r20, 0x0138
    2562:	50 91 39 01 	lds	r21, 0x0139
    2566:	80 91 cc 01 	lds	r24, 0x01CC
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	00 d0       	rcall	.+0      	; 0x2570 <main+0x10c4>
    2570:	00 d0       	rcall	.+0      	; 0x2572 <main+0x10c6>
    2572:	00 d0       	rcall	.+0      	; 0x2574 <main+0x10c8>
    2574:	8d b7       	in	r24, 0x3d	; 61
    2576:	9e b7       	in	r25, 0x3e	; 62
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	fc 01       	movw	r30, r24
    257c:	51 83       	std	Z+1, r21	; 0x01
    257e:	40 83       	st	Z, r20
    2580:	43 e2       	ldi	r20, 0x23	; 35
    2582:	51 e0       	ldi	r21, 0x01	; 1
    2584:	fc 01       	movw	r30, r24
    2586:	53 83       	std	Z+3, r21	; 0x03
    2588:	42 83       	std	Z+2, r20	; 0x02
    258a:	fc 01       	movw	r30, r24
    258c:	35 83       	std	Z+5, r19	; 0x05
    258e:	24 83       	std	Z+4, r18	; 0x04
    2590:	0e 94 67 1b 	call	0x36ce	; 0x36ce <sprintf>
    2594:	8d b7       	in	r24, 0x3d	; 61
    2596:	9e b7       	in	r25, 0x3e	; 62
    2598:	06 96       	adiw	r24, 0x06	; 6
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	9e bf       	out	0x3e, r25	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer);
    25a4:	80 91 38 01 	lds	r24, 0x0138
    25a8:	90 91 39 01 	lds	r25, 0x0139
    25ac:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
							break;
    25b0:	48 c0       	rjmp	.+144    	; 0x2642 <main+0x1196>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    25b2:	10 92 ba 01 	sts	0x01BA, r1
							cur_mode = RECORD;
    25b6:	87 e0       	ldi	r24, 0x07	; 7
    25b8:	80 93 9a 01 	sts	0x019A, r24

							announce("R");
    25bc:	81 e2       	ldi	r24, 0x21	; 33
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
							break;
    25c4:	3e c0       	rjmp	.+124    	; 0x2642 <main+0x1196>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	80 93 ba 01 	sts	0x01BA, r24
							cur_mode = default_mode;
    25cc:	80 91 65 01 	lds	r24, 0x0165
    25d0:	80 93 9a 01 	sts	0x019A, r24

							read_voltage();
    25d4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <read_voltage>
							break;
    25d8:	34 c0       	rjmp	.+104    	; 0x2642 <main+0x1196>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    25da:	80 91 65 01 	lds	r24, 0x0165
    25de:	88 23       	and	r24, r24
    25e0:	79 f4       	brne	.+30     	; 0x2600 <main+0x1154>
							{
								default_mode = SK;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	80 93 65 01 	sts	0x0165, r24
								cur_state = IDLE;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 ba 01 	sts	0x01BA, r24
								cur_mode = default_mode;
    25ee:	80 91 65 01 	lds	r24, 0x0165
    25f2:	80 93 9a 01 	sts	0x019A, r24

								announce("S");
    25f6:	86 e2       	ldi	r24, 0x26	; 38
    25f8:	91 e0       	ldi	r25, 0x01	; 1
    25fa:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
								cur_state = IDLE;
								cur_mode = default_mode;

								announce("P");
							}
							break;
    25fe:	21 c0       	rjmp	.+66     	; 0x2642 <main+0x1196>

								announce("S");
							}
							else
							{
								default_mode = KEYER;
    2600:	10 92 65 01 	sts	0x0165, r1
								cur_state = IDLE;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 ba 01 	sts	0x01BA, r24
								cur_mode = default_mode;
    260a:	80 91 65 01 	lds	r24, 0x0165
    260e:	80 93 9a 01 	sts	0x019A, r24

								announce("P");
    2612:	88 e2       	ldi	r24, 0x28	; 40
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
							}
							break;
    261a:	13 c0       	rjmp	.+38     	; 0x2642 <main+0x1196>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	80 93 ba 01 	sts	0x01BA, r24
					cur_mode = default_mode;
    2622:	80 91 65 01 	lds	r24, 0x0165
    2626:	80 93 9a 01 	sts	0x019A, r24

					// Send "X" to indicate expiration
					set_st_freq(ST_LOW);
    262a:	60 e9       	ldi	r22, 0x90	; 144
    262c:	71 e0       	ldi	r23, 0x01	; 1
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 2f 0a 	call	0x145e	; 0x145e <set_st_freq>
					announce("X");
    2636:	8f e1       	ldi	r24, 0x1F	; 31
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <main+0x1196>
								announce("P");
							}
							break;

						default:
							break;
    2640:	00 00       	nop
					// Send "X" to indicate expiration
					set_st_freq(ST_LOW);
					announce("X");
				}

				free(text_buffer);
    2642:	80 91 38 01 	lds	r24, 0x0138
    2646:	90 91 39 01 	lds	r25, 0x0139
    264a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <free>
				break;
    264e:	08 c0       	rjmp	.+16     	; 0x2660 <main+0x11b4>

			default:
				cur_state = IDLE;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	80 93 ba 01 	sts	0x01BA, r24
				cur_mode = default_mode;
    2656:	80 91 65 01 	lds	r24, 0x0165
    265a:	80 93 9a 01 	sts	0x019A, r24
				break;
    265e:	00 00       	nop
			}
			break;
    2660:	6d c6       	rjmp	.+3290   	; 0x333c <main+0x1e90>

		case SETWPM:
			if(cur_timer < cur_state_end)
    2662:	20 91 60 01 	lds	r18, 0x0160
    2666:	30 91 61 01 	lds	r19, 0x0161
    266a:	40 91 62 01 	lds	r20, 0x0162
    266e:	50 91 63 01 	lds	r21, 0x0163
    2672:	80 91 be 01 	lds	r24, 0x01BE
    2676:	90 91 bf 01 	lds	r25, 0x01BF
    267a:	a0 91 c0 01 	lds	r26, 0x01C0
    267e:	b0 91 c1 01 	lds	r27, 0x01C1
    2682:	28 17       	cp	r18, r24
    2684:	39 07       	cpc	r19, r25
    2686:	4a 07       	cpc	r20, r26
    2688:	5b 07       	cpc	r21, r27
    268a:	08 f0       	brcs	.+2      	; 0x268e <main+0x11e2>
    268c:	55 c0       	rjmp	.+170    	; 0x2738 <main+0x128c>
			{
				if(cmd_btn == PRESS)
    268e:	80 91 b9 01 	lds	r24, 0x01B9
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	31 f5       	brne	.+76     	; 0x26e2 <main+0x1236>
				{
					if(wpm < MAX_WPM)
    2696:	80 91 cc 01 	lds	r24, 0x01CC
    269a:	88 32       	cpi	r24, 0x28	; 40
    269c:	28 f4       	brcc	.+10     	; 0x26a8 <main+0x11fc>
						wpm++;
    269e:	80 91 cc 01 	lds	r24, 0x01CC
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	80 93 cc 01 	sts	0x01CC, r24
					set_wpm(wpm);
    26a8:	80 91 cc 01 	lds	r24, 0x01CC
    26ac:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    26b0:	80 91 60 01 	lds	r24, 0x0160
    26b4:	90 91 61 01 	lds	r25, 0x0161
    26b8:	a0 91 62 01 	lds	r26, 0x0162
    26bc:	b0 91 63 01 	lds	r27, 0x0163
    26c0:	80 56       	subi	r24, 0x60	; 96
    26c2:	90 4f       	sbci	r25, 0xF0	; 240
    26c4:	af 4f       	sbci	r26, 0xFF	; 255
    26c6:	bf 4f       	sbci	r27, 0xFF	; 255
    26c8:	80 93 be 01 	sts	0x01BE, r24
    26cc:	90 93 bf 01 	sts	0x01BF, r25
    26d0:	a0 93 c0 01 	sts	0x01C0, r26
    26d4:	b0 93 c1 01 	sts	0x01C1, r27
					announce("I");
    26d8:	8a e2       	ldi	r24, 0x2A	; 42
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
    26e0:	62 c0       	rjmp	.+196    	; 0x27a6 <main+0x12fa>
				}
				else if(msg_btn == PRESS)
    26e2:	80 91 b7 01 	lds	r24, 0x01B7
    26e6:	81 30       	cpi	r24, 0x01	; 1
    26e8:	09 f0       	breq	.+2      	; 0x26ec <main+0x1240>
    26ea:	5d c0       	rjmp	.+186    	; 0x27a6 <main+0x12fa>
				{
					if(wpm > MIN_WPM)
    26ec:	80 91 cc 01 	lds	r24, 0x01CC
    26f0:	86 30       	cpi	r24, 0x06	; 6
    26f2:	28 f0       	brcs	.+10     	; 0x26fe <main+0x1252>
						wpm--;
    26f4:	80 91 cc 01 	lds	r24, 0x01CC
    26f8:	81 50       	subi	r24, 0x01	; 1
    26fa:	80 93 cc 01 	sts	0x01CC, r24
					set_wpm(wpm);
    26fe:	80 91 cc 01 	lds	r24, 0x01CC
    2702:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2706:	80 91 60 01 	lds	r24, 0x0160
    270a:	90 91 61 01 	lds	r25, 0x0161
    270e:	a0 91 62 01 	lds	r26, 0x0162
    2712:	b0 91 63 01 	lds	r27, 0x0163
    2716:	80 56       	subi	r24, 0x60	; 96
    2718:	90 4f       	sbci	r25, 0xF0	; 240
    271a:	af 4f       	sbci	r26, 0xFF	; 255
    271c:	bf 4f       	sbci	r27, 0xFF	; 255
    271e:	80 93 be 01 	sts	0x01BE, r24
    2722:	90 93 bf 01 	sts	0x01BF, r25
    2726:	a0 93 c0 01 	sts	0x01C0, r26
    272a:	b0 93 c1 01 	sts	0x01C1, r27
					announce("I");
    272e:	8a e2       	ldi	r24, 0x2A	; 42
    2730:	91 e0       	ldi	r25, 0x01	; 1
    2732:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
    2736:	37 c0       	rjmp	.+110    	; 0x27a6 <main+0x12fa>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_write_byte(&ee_wpm, wpm);
    2738:	20 91 cc 01 	lds	r18, 0x01CC
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	62 2f       	mov	r22, r18
    2742:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <__eewr_byte_m168>

				cur_state = IDLE;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	80 93 ba 01 	sts	0x01BA, r24
				cur_mode = default_mode;
    274c:	80 91 65 01 	lds	r24, 0x0165
    2750:	80 93 9a 01 	sts	0x019A, r24

				sprintf(text_buffer, "%d", wpm);
    2754:	40 91 38 01 	lds	r20, 0x0138
    2758:	50 91 39 01 	lds	r21, 0x0139
    275c:	80 91 cc 01 	lds	r24, 0x01CC
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	00 d0       	rcall	.+0      	; 0x2766 <main+0x12ba>
    2766:	00 d0       	rcall	.+0      	; 0x2768 <main+0x12bc>
    2768:	00 d0       	rcall	.+0      	; 0x276a <main+0x12be>
    276a:	8d b7       	in	r24, 0x3d	; 61
    276c:	9e b7       	in	r25, 0x3e	; 62
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	fc 01       	movw	r30, r24
    2772:	51 83       	std	Z+1, r21	; 0x01
    2774:	40 83       	st	Z, r20
    2776:	43 e2       	ldi	r20, 0x23	; 35
    2778:	51 e0       	ldi	r21, 0x01	; 1
    277a:	fc 01       	movw	r30, r24
    277c:	53 83       	std	Z+3, r21	; 0x03
    277e:	42 83       	std	Z+2, r20	; 0x02
    2780:	fc 01       	movw	r30, r24
    2782:	35 83       	std	Z+5, r19	; 0x05
    2784:	24 83       	std	Z+4, r18	; 0x04
    2786:	0e 94 67 1b 	call	0x36ce	; 0x36ce <sprintf>
    278a:	8d b7       	in	r24, 0x3d	; 61
    278c:	9e b7       	in	r25, 0x3e	; 62
    278e:	06 96       	adiw	r24, 0x06	; 6
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	9e bf       	out	0x3e, r25	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer);
    279a:	80 91 38 01 	lds	r24, 0x0138
    279e:	90 91 39 01 	lds	r25, 0x0139
    27a2:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
			}
			break;
    27a6:	ca c5       	rjmp	.+2964   	; 0x333c <main+0x1e90>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    27a8:	80 91 c6 01 	lds	r24, 0x01C6
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	61 f0       	breq	.+24     	; 0x27c8 <main+0x131c>
    27b0:	80 91 b6 01 	lds	r24, 0x01B6
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	41 f0       	breq	.+16     	; 0x27c8 <main+0x131c>
    27b8:	80 91 b9 01 	lds	r24, 0x01B9
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	21 f0       	breq	.+8      	; 0x27c8 <main+0x131c>
    27c0:	80 91 b7 01 	lds	r24, 0x01B7
    27c4:	81 30       	cpi	r24, 0x01	; 1
    27c6:	e9 f5       	brne	.+122    	; 0x2842 <main+0x1396>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    27c8:	80 91 d1 01 	lds	r24, 0x01D1
    27cc:	90 91 d2 01 	lds	r25, 0x01D2
    27d0:	2e e1       	ldi	r18, 0x1E	; 30
    27d2:	31 e0       	ldi	r19, 0x01	; 1
    27d4:	b9 01       	movw	r22, r18
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	0e 94 3b 1b 	call	0x3676	; 0x3676 <memcpy>
				cur_char_p = announce_buffer;
    27de:	80 91 d1 01 	lds	r24, 0x01D1
    27e2:	90 91 d2 01 	lds	r25, 0x01D2
    27e6:	90 93 37 01 	sts	0x0137, r25
    27ea:	80 93 36 01 	sts	0x0136, r24
				cur_character = '\0';
    27ee:	10 92 3a 01 	sts	0x013A, r1

				// Set back into previous mode
				mute_end = cur_timer;
    27f2:	80 91 60 01 	lds	r24, 0x0160
    27f6:	90 91 61 01 	lds	r25, 0x0161
    27fa:	a0 91 62 01 	lds	r26, 0x0162
    27fe:	b0 91 63 01 	lds	r27, 0x0163
    2802:	80 93 c2 01 	sts	0x01C2, r24
    2806:	90 93 c3 01 	sts	0x01C3, r25
    280a:	a0 93 c4 01 	sts	0x01C4, r26
    280e:	b0 93 c5 01 	sts	0x01C5, r27
				cur_mode = prev_mode;
    2812:	80 91 b0 01 	lds	r24, 0x01B0
    2816:	80 93 9a 01 	sts	0x019A, r24
				cur_state = prev_state;
    281a:	80 91 6a 01 	lds	r24, 0x016A
    281e:	80 93 ba 01 	sts	0x01BA, r24
				cur_state_end = prev_state_end;
    2822:	80 91 ac 01 	lds	r24, 0x01AC
    2826:	90 91 ad 01 	lds	r25, 0x01AD
    282a:	a0 91 ae 01 	lds	r26, 0x01AE
    282e:	b0 91 af 01 	lds	r27, 0x01AF
    2832:	80 93 be 01 	sts	0x01BE, r24
    2836:	90 93 bf 01 	sts	0x01BF, r25
    283a:	a0 93 c0 01 	sts	0x01C0, r26
    283e:	b0 93 c1 01 	sts	0x01C1, r27
			}

			switch(cur_state)
    2842:	80 91 ba 01 	lds	r24, 0x01BA
    2846:	88 2f       	mov	r24, r24
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	84 30       	cpi	r24, 0x04	; 4
    284c:	91 05       	cpc	r25, r1
    284e:	44 f4       	brge	.+16     	; 0x2860 <main+0x13b4>
    2850:	82 30       	cpi	r24, 0x02	; 2
    2852:	91 05       	cpc	r25, r1
    2854:	0c f0       	brlt	.+2      	; 0x2858 <main+0x13ac>
    2856:	bb c1       	rjmp	.+886    	; 0x2bce <main+0x1722>
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	91 05       	cpc	r25, r1
    285c:	31 f0       	breq	.+12     	; 0x286a <main+0x13be>
    285e:	14 c2       	rjmp	.+1064   	; 0x2c88 <main+0x17dc>
    2860:	87 30       	cpi	r24, 0x07	; 7
    2862:	91 05       	cpc	r25, r1
    2864:	0c f0       	brlt	.+2      	; 0x2868 <main+0x13bc>
    2866:	10 c2       	rjmp	.+1056   	; 0x2c88 <main+0x17dc>
    2868:	ef c1       	rjmp	.+990    	; 0x2c48 <main+0x179c>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    286a:	20 91 36 01 	lds	r18, 0x0136
    286e:	30 91 37 01 	lds	r19, 0x0137
    2872:	80 91 d1 01 	lds	r24, 0x01D1
    2876:	90 91 d2 01 	lds	r25, 0x01D2
    287a:	28 17       	cp	r18, r24
    287c:	39 07       	cpc	r19, r25
    287e:	c9 f4       	brne	.+50     	; 0x28b2 <main+0x1406>
    2880:	80 91 3a 01 	lds	r24, 0x013A
    2884:	88 23       	and	r24, r24
    2886:	a9 f4       	brne	.+42     	; 0x28b2 <main+0x1406>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2888:	80 91 36 01 	lds	r24, 0x0136
    288c:	90 91 37 01 	lds	r25, 0x0137
    2890:	fc 01       	movw	r30, r24
    2892:	80 81       	ld	r24, Z
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	80 97       	sbiw	r24, 0x20	; 32
    289a:	88 59       	subi	r24, 0x98	; 152
    289c:	9f 4f       	sbci	r25, 0xFF	; 255
    289e:	99 87       	std	Y+9, r25	; 0x09
    28a0:	88 87       	std	Y+8, r24	; 0x08
    28a2:	88 85       	ldd	r24, Y+8	; 0x08
    28a4:	99 85       	ldd	r25, Y+9	; 0x09
    28a6:	fc 01       	movw	r30, r24
    28a8:	14 91       	lpm	r17, Z+
    28aa:	1a 87       	std	Y+10, r17	; 0x0a
    28ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ae:	80 93 3a 01 	sts	0x013A, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    28b2:	80 91 3a 01 	lds	r24, 0x013A
    28b6:	88 23       	and	r24, r24
    28b8:	09 f4       	brne	.+2      	; 0x28bc <main+0x1410>
    28ba:	4b c1       	rjmp	.+662    	; 0x2b52 <main+0x16a6>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    28bc:	80 91 3a 01 	lds	r24, 0x013A
    28c0:	80 38       	cpi	r24, 0x80	; 128
    28c2:	29 f0       	breq	.+10     	; 0x28ce <main+0x1422>
    28c4:	80 91 3a 01 	lds	r24, 0x013A
    28c8:	8f 3f       	cpi	r24, 0xFF	; 255
    28ca:	09 f0       	breq	.+2      	; 0x28ce <main+0x1422>
    28cc:	79 c0       	rjmp	.+242    	; 0x29c0 <main+0x1514>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    28ce:	80 91 3a 01 	lds	r24, 0x013A
    28d2:	80 38       	cpi	r24, 0x80	; 128
    28d4:	21 f5       	brne	.+72     	; 0x291e <main+0x1472>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    28d6:	20 91 6b 01 	lds	r18, 0x016B
    28da:	30 91 6c 01 	lds	r19, 0x016C
    28de:	c9 01       	movw	r24, r18
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	82 0f       	add	r24, r18
    28e6:	93 1f       	adc	r25, r19
    28e8:	9c 01       	movw	r18, r24
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	80 91 60 01 	lds	r24, 0x0160
    28f2:	90 91 61 01 	lds	r25, 0x0161
    28f6:	a0 91 62 01 	lds	r26, 0x0162
    28fa:	b0 91 63 01 	lds	r27, 0x0163
    28fe:	82 0f       	add	r24, r18
    2900:	93 1f       	adc	r25, r19
    2902:	a4 1f       	adc	r26, r20
    2904:	b5 1f       	adc	r27, r21
    2906:	80 93 be 01 	sts	0x01BE, r24
    290a:	90 93 bf 01 	sts	0x01BF, r25
    290e:	a0 93 c0 01 	sts	0x01C0, r26
    2912:	b0 93 c1 01 	sts	0x01C1, r27
							cur_state = DAHDELAY;
    2916:	85 e0       	ldi	r24, 0x05	; 5
    2918:	80 93 ba 01 	sts	0x01BA, r24
    291c:	27 c0       	rjmp	.+78     	; 0x296c <main+0x14c0>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    291e:	20 91 6b 01 	lds	r18, 0x016B
    2922:	30 91 6c 01 	lds	r19, 0x016C
    2926:	c9 01       	movw	r24, r18
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	82 1b       	sub	r24, r18
    2936:	93 0b       	sbc	r25, r19
    2938:	9c 01       	movw	r18, r24
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	80 91 60 01 	lds	r24, 0x0160
    2942:	90 91 61 01 	lds	r25, 0x0161
    2946:	a0 91 62 01 	lds	r26, 0x0162
    294a:	b0 91 63 01 	lds	r27, 0x0163
    294e:	82 0f       	add	r24, r18
    2950:	93 1f       	adc	r25, r19
    2952:	a4 1f       	adc	r26, r20
    2954:	b5 1f       	adc	r27, r21
    2956:	80 93 be 01 	sts	0x01BE, r24
    295a:	90 93 bf 01 	sts	0x01BF, r25
    295e:	a0 93 c0 01 	sts	0x01C0, r26
    2962:	b0 93 c1 01 	sts	0x01C1, r27
							cur_state = DAHDELAY;
    2966:	85 e0       	ldi	r24, 0x05	; 5
    2968:	80 93 ba 01 	sts	0x01BA, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    296c:	80 91 36 01 	lds	r24, 0x0136
    2970:	90 91 37 01 	lds	r25, 0x0137
    2974:	01 96       	adiw	r24, 0x01	; 1
    2976:	90 93 37 01 	sts	0x0137, r25
    297a:	80 93 36 01 	sts	0x0136, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    297e:	80 91 36 01 	lds	r24, 0x0136
    2982:	90 91 37 01 	lds	r25, 0x0137
    2986:	fc 01       	movw	r30, r24
    2988:	80 81       	ld	r24, Z
    298a:	88 23       	and	r24, r24
    298c:	19 f4       	brne	.+6      	; 0x2994 <main+0x14e8>
							cur_character = '\0';
    298e:	10 92 3a 01 	sts	0x013A, r1
    2992:	15 c0       	rjmp	.+42     	; 0x29be <main+0x1512>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2994:	80 91 36 01 	lds	r24, 0x0136
    2998:	90 91 37 01 	lds	r25, 0x0137
    299c:	fc 01       	movw	r30, r24
    299e:	80 81       	ld	r24, Z
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	80 97       	sbiw	r24, 0x20	; 32
    29a6:	88 59       	subi	r24, 0x98	; 152
    29a8:	9f 4f       	sbci	r25, 0xFF	; 255
    29aa:	9c 87       	std	Y+12, r25	; 0x0c
    29ac:	8b 87       	std	Y+11, r24	; 0x0b
    29ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    29b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    29b2:	fc 01       	movw	r30, r24
    29b4:	14 91       	lpm	r17, Z+
    29b6:	1d 87       	std	Y+13, r17	; 0x0d
    29b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ba:	80 93 3a 01 	sts	0x013A, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    29be:	c8 c0       	rjmp	.+400    	; 0x2b50 <main+0x16a4>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    29c0:	80 91 3a 01 	lds	r24, 0x013A
    29c4:	88 23       	and	r24, r24
    29c6:	0c f0       	brlt	.+2      	; 0x29ca <main+0x151e>
    29c8:	62 c0       	rjmp	.+196    	; 0x2a8e <main+0x15e2>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    29ca:	20 91 6b 01 	lds	r18, 0x016B
    29ce:	30 91 6c 01 	lds	r19, 0x016C
    29d2:	c9 01       	movw	r24, r18
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	82 0f       	add	r24, r18
    29da:	93 1f       	adc	r25, r19
    29dc:	9c 01       	movw	r18, r24
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	50 e0       	ldi	r21, 0x00	; 0
    29e2:	80 91 60 01 	lds	r24, 0x0160
    29e6:	90 91 61 01 	lds	r25, 0x0161
    29ea:	a0 91 62 01 	lds	r26, 0x0162
    29ee:	b0 91 63 01 	lds	r27, 0x0163
    29f2:	82 0f       	add	r24, r18
    29f4:	93 1f       	adc	r25, r19
    29f6:	a4 1f       	adc	r26, r20
    29f8:	b5 1f       	adc	r27, r21
    29fa:	80 93 be 01 	sts	0x01BE, r24
    29fe:	90 93 bf 01 	sts	0x01BF, r25
    2a02:	a0 93 c0 01 	sts	0x01C0, r26
    2a06:	b0 93 c1 01 	sts	0x01C1, r27
							cur_state = DAH;
    2a0a:	83 e0       	ldi	r24, 0x03	; 3
    2a0c:	80 93 ba 01 	sts	0x01BA, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2a10:	80 91 60 01 	lds	r24, 0x0160
    2a14:	90 91 61 01 	lds	r25, 0x0161
    2a18:	a0 91 62 01 	lds	r26, 0x0162
    2a1c:	b0 91 63 01 	lds	r27, 0x0163
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	a1 1d       	adc	r26, r1
    2a24:	b1 1d       	adc	r27, r1
    2a26:	80 93 a0 01 	sts	0x01A0, r24
    2a2a:	90 93 a1 01 	sts	0x01A1, r25
    2a2e:	a0 93 a2 01 	sts	0x01A2, r26
    2a32:	b0 93 a3 01 	sts	0x01A3, r27
							tx_end = cur_state_end;
    2a36:	80 91 be 01 	lds	r24, 0x01BE
    2a3a:	90 91 bf 01 	lds	r25, 0x01BF
    2a3e:	a0 91 c0 01 	lds	r26, 0x01C0
    2a42:	b0 91 c1 01 	lds	r27, 0x01C1
    2a46:	80 93 d3 01 	sts	0x01D3, r24
    2a4a:	90 93 d4 01 	sts	0x01D4, r25
    2a4e:	a0 93 d5 01 	sts	0x01D5, r26
    2a52:	b0 93 d6 01 	sts	0x01D6, r27
							mute_start = cur_timer;
    2a56:	80 91 60 01 	lds	r24, 0x0160
    2a5a:	90 91 61 01 	lds	r25, 0x0161
    2a5e:	a0 91 62 01 	lds	r26, 0x0162
    2a62:	b0 91 63 01 	lds	r27, 0x0163
    2a66:	80 93 cd 01 	sts	0x01CD, r24
    2a6a:	90 93 ce 01 	sts	0x01CE, r25
    2a6e:	a0 93 cf 01 	sts	0x01CF, r26
    2a72:	b0 93 d0 01 	sts	0x01D0, r27
							mute_end = UINT32_MAX;
    2a76:	8f ef       	ldi	r24, 0xFF	; 255
    2a78:	9f ef       	ldi	r25, 0xFF	; 255
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	80 93 c2 01 	sts	0x01C2, r24
    2a80:	90 93 c3 01 	sts	0x01C3, r25
    2a84:	a0 93 c4 01 	sts	0x01C4, r26
    2a88:	b0 93 c5 01 	sts	0x01C5, r27
    2a8c:	5c c0       	rjmp	.+184    	; 0x2b46 <main+0x169a>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    2a8e:	80 91 6b 01 	lds	r24, 0x016B
    2a92:	90 91 6c 01 	lds	r25, 0x016C
    2a96:	9c 01       	movw	r18, r24
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	80 91 60 01 	lds	r24, 0x0160
    2aa0:	90 91 61 01 	lds	r25, 0x0161
    2aa4:	a0 91 62 01 	lds	r26, 0x0162
    2aa8:	b0 91 63 01 	lds	r27, 0x0163
    2aac:	82 0f       	add	r24, r18
    2aae:	93 1f       	adc	r25, r19
    2ab0:	a4 1f       	adc	r26, r20
    2ab2:	b5 1f       	adc	r27, r21
    2ab4:	80 93 be 01 	sts	0x01BE, r24
    2ab8:	90 93 bf 01 	sts	0x01BF, r25
    2abc:	a0 93 c0 01 	sts	0x01C0, r26
    2ac0:	b0 93 c1 01 	sts	0x01C1, r27
							cur_state = DIT;
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	80 93 ba 01 	sts	0x01BA, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2aca:	80 91 60 01 	lds	r24, 0x0160
    2ace:	90 91 61 01 	lds	r25, 0x0161
    2ad2:	a0 91 62 01 	lds	r26, 0x0162
    2ad6:	b0 91 63 01 	lds	r27, 0x0163
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	a1 1d       	adc	r26, r1
    2ade:	b1 1d       	adc	r27, r1
    2ae0:	80 93 a0 01 	sts	0x01A0, r24
    2ae4:	90 93 a1 01 	sts	0x01A1, r25
    2ae8:	a0 93 a2 01 	sts	0x01A2, r26
    2aec:	b0 93 a3 01 	sts	0x01A3, r27
							tx_end = cur_state_end;
    2af0:	80 91 be 01 	lds	r24, 0x01BE
    2af4:	90 91 bf 01 	lds	r25, 0x01BF
    2af8:	a0 91 c0 01 	lds	r26, 0x01C0
    2afc:	b0 91 c1 01 	lds	r27, 0x01C1
    2b00:	80 93 d3 01 	sts	0x01D3, r24
    2b04:	90 93 d4 01 	sts	0x01D4, r25
    2b08:	a0 93 d5 01 	sts	0x01D5, r26
    2b0c:	b0 93 d6 01 	sts	0x01D6, r27
							mute_start = cur_timer;
    2b10:	80 91 60 01 	lds	r24, 0x0160
    2b14:	90 91 61 01 	lds	r25, 0x0161
    2b18:	a0 91 62 01 	lds	r26, 0x0162
    2b1c:	b0 91 63 01 	lds	r27, 0x0163
    2b20:	80 93 cd 01 	sts	0x01CD, r24
    2b24:	90 93 ce 01 	sts	0x01CE, r25
    2b28:	a0 93 cf 01 	sts	0x01CF, r26
    2b2c:	b0 93 d0 01 	sts	0x01D0, r27
							mute_end = UINT32_MAX;
    2b30:	8f ef       	ldi	r24, 0xFF	; 255
    2b32:	9f ef       	ldi	r25, 0xFF	; 255
    2b34:	dc 01       	movw	r26, r24
    2b36:	80 93 c2 01 	sts	0x01C2, r24
    2b3a:	90 93 c3 01 	sts	0x01C3, r25
    2b3e:	a0 93 c4 01 	sts	0x01C4, r26
    2b42:	b0 93 c5 01 	sts	0x01C5, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    2b46:	80 91 3a 01 	lds	r24, 0x013A
    2b4a:	88 0f       	add	r24, r24
    2b4c:	80 93 3a 01 	sts	0x013A, r24
    2b50:	3d c0       	rjmp	.+122    	; 0x2bcc <main+0x1720>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2b52:	80 91 d1 01 	lds	r24, 0x01D1
    2b56:	90 91 d2 01 	lds	r25, 0x01D2
    2b5a:	2e e1       	ldi	r18, 0x1E	; 30
    2b5c:	31 e0       	ldi	r19, 0x01	; 1
    2b5e:	b9 01       	movw	r22, r18
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	50 e0       	ldi	r21, 0x00	; 0
    2b64:	0e 94 3b 1b 	call	0x3676	; 0x3676 <memcpy>
					cur_char_p = announce_buffer;
    2b68:	80 91 d1 01 	lds	r24, 0x01D1
    2b6c:	90 91 d2 01 	lds	r25, 0x01D2
    2b70:	90 93 37 01 	sts	0x0137, r25
    2b74:	80 93 36 01 	sts	0x0136, r24
					cur_character = '\0';
    2b78:	10 92 3a 01 	sts	0x013A, r1

					// Set back into previous mode
					mute_end = cur_timer;
    2b7c:	80 91 60 01 	lds	r24, 0x0160
    2b80:	90 91 61 01 	lds	r25, 0x0161
    2b84:	a0 91 62 01 	lds	r26, 0x0162
    2b88:	b0 91 63 01 	lds	r27, 0x0163
    2b8c:	80 93 c2 01 	sts	0x01C2, r24
    2b90:	90 93 c3 01 	sts	0x01C3, r25
    2b94:	a0 93 c4 01 	sts	0x01C4, r26
    2b98:	b0 93 c5 01 	sts	0x01C5, r27
					cur_mode = prev_mode;
    2b9c:	80 91 b0 01 	lds	r24, 0x01B0
    2ba0:	80 93 9a 01 	sts	0x019A, r24
					cur_state = prev_state;
    2ba4:	80 91 6a 01 	lds	r24, 0x016A
    2ba8:	80 93 ba 01 	sts	0x01BA, r24
					cur_state_end = prev_state_end;
    2bac:	80 91 ac 01 	lds	r24, 0x01AC
    2bb0:	90 91 ad 01 	lds	r25, 0x01AD
    2bb4:	a0 91 ae 01 	lds	r26, 0x01AE
    2bb8:	b0 91 af 01 	lds	r27, 0x01AF
    2bbc:	80 93 be 01 	sts	0x01BE, r24
    2bc0:	90 93 bf 01 	sts	0x01BF, r25
    2bc4:	a0 93 c0 01 	sts	0x01C0, r26
    2bc8:	b0 93 c1 01 	sts	0x01C1, r27
				}
				break;
    2bcc:	5e c0       	rjmp	.+188    	; 0x2c8a <main+0x17de>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2bce:	20 91 60 01 	lds	r18, 0x0160
    2bd2:	30 91 61 01 	lds	r19, 0x0161
    2bd6:	40 91 62 01 	lds	r20, 0x0162
    2bda:	50 91 63 01 	lds	r21, 0x0163
    2bde:	80 91 be 01 	lds	r24, 0x01BE
    2be2:	90 91 bf 01 	lds	r25, 0x01BF
    2be6:	a0 91 c0 01 	lds	r26, 0x01C0
    2bea:	b0 91 c1 01 	lds	r27, 0x01C1
    2bee:	82 17       	cp	r24, r18
    2bf0:	93 07       	cpc	r25, r19
    2bf2:	a4 07       	cpc	r26, r20
    2bf4:	b5 07       	cpc	r27, r21
    2bf6:	f0 f4       	brcc	.+60     	; 0x2c34 <main+0x1788>
				{
					cur_state_end = cur_timer + dit_length;
    2bf8:	80 91 6b 01 	lds	r24, 0x016B
    2bfc:	90 91 6c 01 	lds	r25, 0x016C
    2c00:	9c 01       	movw	r18, r24
    2c02:	40 e0       	ldi	r20, 0x00	; 0
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	80 91 60 01 	lds	r24, 0x0160
    2c0a:	90 91 61 01 	lds	r25, 0x0161
    2c0e:	a0 91 62 01 	lds	r26, 0x0162
    2c12:	b0 91 63 01 	lds	r27, 0x0163
    2c16:	82 0f       	add	r24, r18
    2c18:	93 1f       	adc	r25, r19
    2c1a:	a4 1f       	adc	r26, r20
    2c1c:	b5 1f       	adc	r27, r21
    2c1e:	80 93 be 01 	sts	0x01BE, r24
    2c22:	90 93 bf 01 	sts	0x01BF, r25
    2c26:	a0 93 c0 01 	sts	0x01C0, r26
    2c2a:	b0 93 c1 01 	sts	0x01C1, r27
					cur_state = DITDELAY;
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	80 93 ba 01 	sts	0x01BA, r24
				}

				key_down = TRUE;
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	80 93 33 01 	sts	0x0133, r24
				break;
    2c46:	21 c0       	rjmp	.+66     	; 0x2c8a <main+0x17de>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    2c48:	20 91 60 01 	lds	r18, 0x0160
    2c4c:	30 91 61 01 	lds	r19, 0x0161
    2c50:	40 91 62 01 	lds	r20, 0x0162
    2c54:	50 91 63 01 	lds	r21, 0x0163
    2c58:	80 91 be 01 	lds	r24, 0x01BE
    2c5c:	90 91 bf 01 	lds	r25, 0x01BF
    2c60:	a0 91 c0 01 	lds	r26, 0x01C0
    2c64:	b0 91 c1 01 	lds	r27, 0x01C1
    2c68:	82 17       	cp	r24, r18
    2c6a:	93 07       	cpc	r25, r19
    2c6c:	a4 07       	cpc	r26, r20
    2c6e:	b5 07       	cpc	r27, r21
    2c70:	18 f4       	brcc	.+6      	; 0x2c78 <main+0x17cc>
					cur_state = IDLE;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	80 93 ba 01 	sts	0x01BA, r24

				key_down = FALSE;
    2c78:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    2c7c:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	80 93 33 01 	sts	0x0133, r24
				break;
    2c86:	01 c0       	rjmp	.+2      	; 0x2c8a <main+0x17de>

			default:
				break;
    2c88:	00 00       	nop
			}
			break;
    2c8a:	58 c3       	rjmp	.+1712   	; 0x333c <main+0x1e90>

		case RECORD:
			switch(cur_state)
    2c8c:	80 91 ba 01 	lds	r24, 0x01BA
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	83 30       	cpi	r24, 0x03	; 3
    2c96:	91 05       	cpc	r25, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <main+0x17f0>
    2c9a:	e3 c1       	rjmp	.+966    	; 0x3062 <main+0x1bb6>
    2c9c:	84 30       	cpi	r24, 0x04	; 4
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	5c f4       	brge	.+22     	; 0x2cb8 <main+0x180c>
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <main+0x17fe>
    2ca8:	4c c0       	rjmp	.+152    	; 0x2d42 <main+0x1896>
    2caa:	82 30       	cpi	r24, 0x02	; 2
    2cac:	91 05       	cpc	r25, r1
    2cae:	0c f0       	brlt	.+2      	; 0x2cb2 <main+0x1806>
    2cb0:	8e c1       	rjmp	.+796    	; 0x2fce <main+0x1b22>
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	71 f0       	breq	.+28     	; 0x2cd2 <main+0x1826>
    2cb6:	3f c3       	rjmp	.+1662   	; 0x3336 <main+0x1e8a>
    2cb8:	8b 30       	cpi	r24, 0x0B	; 11
    2cba:	91 05       	cpc	r25, r1
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <main+0x1814>
    2cbe:	b4 c2       	rjmp	.+1384   	; 0x3228 <main+0x1d7c>
    2cc0:	8c 30       	cpi	r24, 0x0C	; 12
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <main+0x181c>
    2cc6:	10 c3       	rjmp	.+1568   	; 0x32e8 <main+0x1e3c>
    2cc8:	84 30       	cpi	r24, 0x04	; 4
    2cca:	91 05       	cpc	r25, r1
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <main+0x1824>
    2cce:	13 c2       	rjmp	.+1062   	; 0x30f6 <main+0x1c4a>
    2cd0:	32 c3       	rjmp	.+1636   	; 0x3336 <main+0x1e8a>
			{
			case INIT:
				mute_start = cur_timer;
    2cd2:	80 91 60 01 	lds	r24, 0x0160
    2cd6:	90 91 61 01 	lds	r25, 0x0161
    2cda:	a0 91 62 01 	lds	r26, 0x0162
    2cde:	b0 91 63 01 	lds	r27, 0x0163
    2ce2:	80 93 cd 01 	sts	0x01CD, r24
    2ce6:	90 93 ce 01 	sts	0x01CE, r25
    2cea:	a0 93 cf 01 	sts	0x01CF, r26
    2cee:	b0 93 d0 01 	sts	0x01D0, r27
				mute_end = UINT32_MAX;
    2cf2:	8f ef       	ldi	r24, 0xFF	; 255
    2cf4:	9f ef       	ldi	r25, 0xFF	; 255
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	80 93 c2 01 	sts	0x01C2, r24
    2cfc:	90 93 c3 01 	sts	0x01C3, r25
    2d00:	a0 93 c4 01 	sts	0x01C4, r26
    2d04:	b0 93 c5 01 	sts	0x01C5, r27

				// Initialize the current recorded character
				rec_input = 0;
    2d08:	10 92 3f 01 	sts	0x013F, r1
				rec_count = 0;
    2d0c:	10 92 40 01 	sts	0x0140, r1
				rec_timeout = UINT32_MAX;
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	9f ef       	ldi	r25, 0xFF	; 255
    2d14:	dc 01       	movw	r26, r24
    2d16:	80 93 41 01 	sts	0x0141, r24
    2d1a:	90 93 42 01 	sts	0x0142, r25
    2d1e:	a0 93 43 01 	sts	0x0143, r26
    2d22:	b0 93 44 01 	sts	0x0144, r27

				memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    2d26:	80 91 38 01 	lds	r24, 0x0138
    2d2a:	90 91 39 01 	lds	r25, 0x0139
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	49 e2       	ldi	r20, 0x29	; 41
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	0e 94 44 1b 	call	0x3688	; 0x3688 <memset>

				cur_state = IDLE;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	80 93 ba 01 	sts	0x01BA, r24
				break;
    2d40:	fb c2       	rjmp	.+1526   	; 0x3338 <main+0x1e8c>

			case IDLE:
				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    2d42:	80 91 c6 01 	lds	r24, 0x01C6
    2d46:	81 30       	cpi	r24, 0x01	; 1
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <main+0x18a0>
    2d4a:	4b c0       	rjmp	.+150    	; 0x2de2 <main+0x1936>
    2d4c:	80 91 b6 01 	lds	r24, 0x01B6
    2d50:	88 23       	and	r24, r24
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <main+0x18aa>
    2d54:	46 c0       	rjmp	.+140    	; 0x2de2 <main+0x1936>
				{
					prev_state = IDLE;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	80 93 ba 01 	sts	0x01BA, r24
					next_state = IDLE;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    2d68:	80 91 6b 01 	lds	r24, 0x016B
    2d6c:	90 91 6c 01 	lds	r25, 0x016C
    2d70:	9c 01       	movw	r18, r24
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	80 91 60 01 	lds	r24, 0x0160
    2d7a:	90 91 61 01 	lds	r25, 0x0161
    2d7e:	a0 91 62 01 	lds	r26, 0x0162
    2d82:	b0 91 63 01 	lds	r27, 0x0163
    2d86:	82 0f       	add	r24, r18
    2d88:	93 1f       	adc	r25, r19
    2d8a:	a4 1f       	adc	r26, r20
    2d8c:	b5 1f       	adc	r27, r21
    2d8e:	80 93 be 01 	sts	0x01BE, r24
    2d92:	90 93 bf 01 	sts	0x01BF, r25
    2d96:	a0 93 c0 01 	sts	0x01C0, r26
    2d9a:	b0 93 c1 01 	sts	0x01C1, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    2d9e:	80 91 60 01 	lds	r24, 0x0160
    2da2:	90 91 61 01 	lds	r25, 0x0161
    2da6:	a0 91 62 01 	lds	r26, 0x0162
    2daa:	b0 91 63 01 	lds	r27, 0x0163
    2dae:	88 51       	subi	r24, 0x18	; 24
    2db0:	9c 4f       	sbci	r25, 0xFC	; 252
    2db2:	af 4f       	sbci	r26, 0xFF	; 255
    2db4:	bf 4f       	sbci	r27, 0xFF	; 255
    2db6:	80 93 41 01 	sts	0x0141, r24
    2dba:	90 93 42 01 	sts	0x0142, r25
    2dbe:	a0 93 43 01 	sts	0x0143, r26
    2dc2:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_count++;
    2dc6:	80 91 40 01 	lds	r24, 0x0140
    2dca:	8f 5f       	subi	r24, 0xFF	; 255
    2dcc:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    2dd0:	80 91 40 01 	lds	r24, 0x0140
    2dd4:	86 30       	cpi	r24, 0x06	; 6
    2dd6:	08 f4       	brcc	.+2      	; 0x2dda <main+0x192e>
    2dd8:	d3 c0       	rjmp	.+422    	; 0x2f80 <main+0x1ad4>
						next_state = VALIDATECHAR;
    2dda:	8b e0       	ldi	r24, 0x0B	; 11
    2ddc:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
					rec_timeout = cur_timer + REC_EXPIRATION;

					// Add this element to the recorded character
					rec_count++;
					if(rec_count >= 6)
    2de0:	cf c0       	rjmp	.+414    	; 0x2f80 <main+0x1ad4>
						next_state = VALIDATECHAR;

				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    2de2:	80 91 b6 01 	lds	r24, 0x01B6
    2de6:	81 30       	cpi	r24, 0x01	; 1
    2de8:	09 f0       	breq	.+2      	; 0x2dec <main+0x1940>
    2dea:	62 c0       	rjmp	.+196    	; 0x2eb0 <main+0x1a04>
    2dec:	80 91 c6 01 	lds	r24, 0x01C6
    2df0:	88 23       	and	r24, r24
    2df2:	09 f0       	breq	.+2      	; 0x2df6 <main+0x194a>
    2df4:	5d c0       	rjmp	.+186    	; 0x2eb0 <main+0x1a04>
				{
					prev_state = IDLE;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DAH;
    2dfc:	83 e0       	ldi	r24, 0x03	; 3
    2dfe:	80 93 ba 01 	sts	0x01BA, r24
					next_state = IDLE;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + (dit_length * 3);
    2e08:	20 91 6b 01 	lds	r18, 0x016B
    2e0c:	30 91 6c 01 	lds	r19, 0x016C
    2e10:	c9 01       	movw	r24, r18
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	82 0f       	add	r24, r18
    2e18:	93 1f       	adc	r25, r19
    2e1a:	9c 01       	movw	r18, r24
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	80 91 60 01 	lds	r24, 0x0160
    2e24:	90 91 61 01 	lds	r25, 0x0161
    2e28:	a0 91 62 01 	lds	r26, 0x0162
    2e2c:	b0 91 63 01 	lds	r27, 0x0163
    2e30:	82 0f       	add	r24, r18
    2e32:	93 1f       	adc	r25, r19
    2e34:	a4 1f       	adc	r26, r20
    2e36:	b5 1f       	adc	r27, r21
    2e38:	80 93 be 01 	sts	0x01BE, r24
    2e3c:	90 93 bf 01 	sts	0x01BF, r25
    2e40:	a0 93 c0 01 	sts	0x01C0, r26
    2e44:	b0 93 c1 01 	sts	0x01C1, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    2e48:	80 91 60 01 	lds	r24, 0x0160
    2e4c:	90 91 61 01 	lds	r25, 0x0161
    2e50:	a0 91 62 01 	lds	r26, 0x0162
    2e54:	b0 91 63 01 	lds	r27, 0x0163
    2e58:	88 51       	subi	r24, 0x18	; 24
    2e5a:	9c 4f       	sbci	r25, 0xFC	; 252
    2e5c:	af 4f       	sbci	r26, 0xFF	; 255
    2e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e60:	80 93 41 01 	sts	0x0141, r24
    2e64:	90 93 42 01 	sts	0x0142, r25
    2e68:	a0 93 43 01 	sts	0x0143, r26
    2e6c:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> rec_count);
    2e70:	80 91 40 01 	lds	r24, 0x0140
    2e74:	28 2f       	mov	r18, r24
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	80 e8       	ldi	r24, 0x80	; 128
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	02 2e       	mov	r0, r18
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <main+0x19d8>
    2e80:	95 95       	asr	r25
    2e82:	87 95       	ror	r24
    2e84:	0a 94       	dec	r0
    2e86:	e2 f7       	brpl	.-8      	; 0x2e80 <main+0x19d4>
    2e88:	98 2f       	mov	r25, r24
    2e8a:	80 91 3f 01 	lds	r24, 0x013F
    2e8e:	89 0f       	add	r24, r25
    2e90:	80 93 3f 01 	sts	0x013F, r24
					rec_count++;
    2e94:	80 91 40 01 	lds	r24, 0x0140
    2e98:	8f 5f       	subi	r24, 0xFF	; 255
    2e9a:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    2e9e:	80 91 40 01 	lds	r24, 0x0140
    2ea2:	86 30       	cpi	r24, 0x06	; 6
    2ea4:	08 f4       	brcc	.+2      	; 0x2ea8 <main+0x19fc>
    2ea6:	6c c0       	rjmp	.+216    	; 0x2f80 <main+0x1ad4>
						next_state = VALIDATECHAR;
    2ea8:	8b e0       	ldi	r24, 0x0B	; 11
    2eaa:	80 93 9f 01 	sts	0x019F, r24
					rec_timeout = cur_timer + REC_EXPIRATION;

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> rec_count);
					rec_count++;
					if(rec_count >= 6)
    2eae:	68 c0       	rjmp	.+208    	; 0x2f80 <main+0x1ad4>
						next_state = VALIDATECHAR;
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    2eb0:	80 91 c6 01 	lds	r24, 0x01C6
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	09 f0       	breq	.+2      	; 0x2eba <main+0x1a0e>
    2eb8:	63 c0       	rjmp	.+198    	; 0x2f80 <main+0x1ad4>
    2eba:	80 91 b6 01 	lds	r24, 0x01B6
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <main+0x1a18>
    2ec2:	5e c0       	rjmp	.+188    	; 0x2f80 <main+0x1ad4>
    2ec4:	80 91 9f 01 	lds	r24, 0x019F
    2ec8:	81 30       	cpi	r24, 0x01	; 1
    2eca:	09 f0       	breq	.+2      	; 0x2ece <main+0x1a22>
    2ecc:	59 c0       	rjmp	.+178    	; 0x2f80 <main+0x1ad4>
				{
					prev_state = IDLE;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    2ed4:	82 e0       	ldi	r24, 0x02	; 2
    2ed6:	80 93 ba 01 	sts	0x01BA, r24
					next_state = DAH;
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    2ee0:	80 91 6b 01 	lds	r24, 0x016B
    2ee4:	90 91 6c 01 	lds	r25, 0x016C
    2ee8:	9c 01       	movw	r18, r24
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	80 91 60 01 	lds	r24, 0x0160
    2ef2:	90 91 61 01 	lds	r25, 0x0161
    2ef6:	a0 91 62 01 	lds	r26, 0x0162
    2efa:	b0 91 63 01 	lds	r27, 0x0163
    2efe:	82 0f       	add	r24, r18
    2f00:	93 1f       	adc	r25, r19
    2f02:	a4 1f       	adc	r26, r20
    2f04:	b5 1f       	adc	r27, r21
    2f06:	80 93 be 01 	sts	0x01BE, r24
    2f0a:	90 93 bf 01 	sts	0x01BF, r25
    2f0e:	a0 93 c0 01 	sts	0x01C0, r26
    2f12:	b0 93 c1 01 	sts	0x01C1, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    2f16:	80 91 60 01 	lds	r24, 0x0160
    2f1a:	90 91 61 01 	lds	r25, 0x0161
    2f1e:	a0 91 62 01 	lds	r26, 0x0162
    2f22:	b0 91 63 01 	lds	r27, 0x0163
    2f26:	88 51       	subi	r24, 0x18	; 24
    2f28:	9c 4f       	sbci	r25, 0xFC	; 252
    2f2a:	af 4f       	sbci	r26, 0xFF	; 255
    2f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2e:	80 93 41 01 	sts	0x0141, r24
    2f32:	90 93 42 01 	sts	0x0142, r25
    2f36:	a0 93 43 01 	sts	0x0143, r26
    2f3a:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> (rec_count + 1));
    2f3e:	80 91 40 01 	lds	r24, 0x0140
    2f42:	88 2f       	mov	r24, r24
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9c 01       	movw	r18, r24
    2f48:	2f 5f       	subi	r18, 0xFF	; 255
    2f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4c:	80 e8       	ldi	r24, 0x80	; 128
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	02 2e       	mov	r0, r18
    2f52:	02 c0       	rjmp	.+4      	; 0x2f58 <main+0x1aac>
    2f54:	95 95       	asr	r25
    2f56:	87 95       	ror	r24
    2f58:	0a 94       	dec	r0
    2f5a:	e2 f7       	brpl	.-8      	; 0x2f54 <main+0x1aa8>
    2f5c:	98 2f       	mov	r25, r24
    2f5e:	80 91 3f 01 	lds	r24, 0x013F
    2f62:	89 0f       	add	r24, r25
    2f64:	80 93 3f 01 	sts	0x013F, r24
					rec_count += 2;
    2f68:	80 91 40 01 	lds	r24, 0x0140
    2f6c:	8e 5f       	subi	r24, 0xFE	; 254
    2f6e:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    2f72:	80 91 40 01 	lds	r24, 0x0140
    2f76:	86 30       	cpi	r24, 0x06	; 6
    2f78:	18 f0       	brcs	.+6      	; 0x2f80 <main+0x1ad4>
						next_state = VALIDATECHAR;
    2f7a:	8b e0       	ldi	r24, 0x0B	; 11
    2f7c:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer;
				}*/

				// Handle character record timeout
				// Need to handle SPACE
				if((cur_timer > rec_timeout)/* && (rec_input > 0)*/)
    2f80:	20 91 60 01 	lds	r18, 0x0160
    2f84:	30 91 61 01 	lds	r19, 0x0161
    2f88:	40 91 62 01 	lds	r20, 0x0162
    2f8c:	50 91 63 01 	lds	r21, 0x0163
    2f90:	80 91 41 01 	lds	r24, 0x0141
    2f94:	90 91 42 01 	lds	r25, 0x0142
    2f98:	a0 91 43 01 	lds	r26, 0x0143
    2f9c:	b0 91 44 01 	lds	r27, 0x0144
    2fa0:	82 17       	cp	r24, r18
    2fa2:	93 07       	cpc	r25, r19
    2fa4:	a4 07       	cpc	r26, r20
    2fa6:	b5 07       	cpc	r27, r21
    2fa8:	18 f4       	brcc	.+6      	; 0x2fb0 <main+0x1b04>
					cur_state = VALIDATECHAR;
    2faa:	8b e0       	ldi	r24, 0x0B	; 11
    2fac:	80 93 ba 01 	sts	0x01BA, r24

				// If CMD is pressed, we are done recording
				if(cmd_btn == PRESS)
    2fb0:	80 91 b9 01 	lds	r24, 0x01B9
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	19 f4       	brne	.+6      	; 0x2fbe <main+0x1b12>
					cur_state = EXIT;
    2fb8:	8c e0       	ldi	r24, 0x0C	; 12
    2fba:	80 93 ba 01 	sts	0x01BA, r24

				key_down = FALSE;
    2fbe:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    2fc2:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	80 93 33 01 	sts	0x0133, r24
				break;
    2fcc:	b5 c1       	rjmp	.+874    	; 0x3338 <main+0x1e8c>

			case DIT:
				if(cur_timer > cur_state_end)
    2fce:	20 91 60 01 	lds	r18, 0x0160
    2fd2:	30 91 61 01 	lds	r19, 0x0161
    2fd6:	40 91 62 01 	lds	r20, 0x0162
    2fda:	50 91 63 01 	lds	r21, 0x0163
    2fde:	80 91 be 01 	lds	r24, 0x01BE
    2fe2:	90 91 bf 01 	lds	r25, 0x01BF
    2fe6:	a0 91 c0 01 	lds	r26, 0x01C0
    2fea:	b0 91 c1 01 	lds	r27, 0x01C1
    2fee:	82 17       	cp	r24, r18
    2ff0:	93 07       	cpc	r25, r19
    2ff2:	a4 07       	cpc	r26, r20
    2ff4:	b5 07       	cpc	r27, r21
    2ff6:	08 f5       	brcc	.+66     	; 0x303a <main+0x1b8e>
				{
					prev_state = DIT;
    2ff8:	82 e0       	ldi	r24, 0x02	; 2
    2ffa:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    2ffe:	84 e0       	ldi	r24, 0x04	; 4
    3000:	80 93 ba 01 	sts	0x01BA, r24
					cur_state_end = cur_timer + dit_length;
    3004:	80 91 6b 01 	lds	r24, 0x016B
    3008:	90 91 6c 01 	lds	r25, 0x016C
    300c:	9c 01       	movw	r18, r24
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	80 91 60 01 	lds	r24, 0x0160
    3016:	90 91 61 01 	lds	r25, 0x0161
    301a:	a0 91 62 01 	lds	r26, 0x0162
    301e:	b0 91 63 01 	lds	r27, 0x0163
    3022:	82 0f       	add	r24, r18
    3024:	93 1f       	adc	r25, r19
    3026:	a4 1f       	adc	r26, r20
    3028:	b5 1f       	adc	r27, r21
    302a:	80 93 be 01 	sts	0x01BE, r24
    302e:	90 93 bf 01 	sts	0x01BF, r25
    3032:	a0 93 c0 01 	sts	0x01C0, r26
    3036:	b0 93 c1 01 	sts	0x01C1, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    303a:	80 91 b6 01 	lds	r24, 0x01B6
    303e:	81 30       	cpi	r24, 0x01	; 1
    3040:	39 f4       	brne	.+14     	; 0x3050 <main+0x1ba4>
    3042:	80 91 9f 01 	lds	r24, 0x019F
    3046:	81 30       	cpi	r24, 0x01	; 1
    3048:	19 f4       	brne	.+6      	; 0x3050 <main+0x1ba4>
					next_state = DAH;
    304a:	83 e0       	ldi	r24, 0x03	; 3
    304c:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    3050:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	80 93 33 01 	sts	0x0133, r24
				break;
    3060:	6b c1       	rjmp	.+726    	; 0x3338 <main+0x1e8c>

			case DAH:
				if(cur_timer > cur_state_end)
    3062:	20 91 60 01 	lds	r18, 0x0160
    3066:	30 91 61 01 	lds	r19, 0x0161
    306a:	40 91 62 01 	lds	r20, 0x0162
    306e:	50 91 63 01 	lds	r21, 0x0163
    3072:	80 91 be 01 	lds	r24, 0x01BE
    3076:	90 91 bf 01 	lds	r25, 0x01BF
    307a:	a0 91 c0 01 	lds	r26, 0x01C0
    307e:	b0 91 c1 01 	lds	r27, 0x01C1
    3082:	82 17       	cp	r24, r18
    3084:	93 07       	cpc	r25, r19
    3086:	a4 07       	cpc	r26, r20
    3088:	b5 07       	cpc	r27, r21
    308a:	08 f5       	brcc	.+66     	; 0x30ce <main+0x1c22>
				{
					prev_state = DAH;
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    3092:	84 e0       	ldi	r24, 0x04	; 4
    3094:	80 93 ba 01 	sts	0x01BA, r24
					cur_state_end = cur_timer + dit_length;
    3098:	80 91 6b 01 	lds	r24, 0x016B
    309c:	90 91 6c 01 	lds	r25, 0x016C
    30a0:	9c 01       	movw	r18, r24
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	80 91 60 01 	lds	r24, 0x0160
    30aa:	90 91 61 01 	lds	r25, 0x0161
    30ae:	a0 91 62 01 	lds	r26, 0x0162
    30b2:	b0 91 63 01 	lds	r27, 0x0163
    30b6:	82 0f       	add	r24, r18
    30b8:	93 1f       	adc	r25, r19
    30ba:	a4 1f       	adc	r26, r20
    30bc:	b5 1f       	adc	r27, r21
    30be:	80 93 be 01 	sts	0x01BE, r24
    30c2:	90 93 bf 01 	sts	0x01BF, r25
    30c6:	a0 93 c0 01 	sts	0x01C0, r26
    30ca:	b0 93 c1 01 	sts	0x01C1, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    30ce:	80 91 c6 01 	lds	r24, 0x01C6
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	39 f4       	brne	.+14     	; 0x30e4 <main+0x1c38>
    30d6:	80 91 9f 01 	lds	r24, 0x019F
    30da:	81 30       	cpi	r24, 0x01	; 1
    30dc:	19 f4       	brne	.+6      	; 0x30e4 <main+0x1c38>
					next_state = DIT;
    30de:	82 e0       	ldi	r24, 0x02	; 2
    30e0:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    30e4:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	80 93 33 01 	sts	0x0133, r24
				break;
    30f4:	21 c1       	rjmp	.+578    	; 0x3338 <main+0x1e8c>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    30f6:	20 91 60 01 	lds	r18, 0x0160
    30fa:	30 91 61 01 	lds	r19, 0x0161
    30fe:	40 91 62 01 	lds	r20, 0x0162
    3102:	50 91 63 01 	lds	r21, 0x0163
    3106:	80 91 be 01 	lds	r24, 0x01BE
    310a:	90 91 bf 01 	lds	r25, 0x01BF
    310e:	a0 91 c0 01 	lds	r26, 0x01C0
    3112:	b0 91 c1 01 	lds	r27, 0x01C1
    3116:	82 17       	cp	r24, r18
    3118:	93 07       	cpc	r25, r19
    311a:	a4 07       	cpc	r26, r20
    311c:	b5 07       	cpc	r27, r21
    311e:	08 f0       	brcs	.+2      	; 0x3122 <main+0x1c76>
    3120:	5c c0       	rjmp	.+184    	; 0x31da <main+0x1d2e>
				{
					if(next_state == DIT)
    3122:	80 91 9f 01 	lds	r24, 0x019F
    3126:	82 30       	cpi	r24, 0x02	; 2
    3128:	f9 f4       	brne	.+62     	; 0x3168 <main+0x1cbc>
					{
						cur_state = DIT;
    312a:	82 e0       	ldi	r24, 0x02	; 2
    312c:	80 93 ba 01 	sts	0x01BA, r24
						cur_state_end = cur_timer + dit_length;
    3130:	80 91 6b 01 	lds	r24, 0x016B
    3134:	90 91 6c 01 	lds	r25, 0x016C
    3138:	9c 01       	movw	r18, r24
    313a:	40 e0       	ldi	r20, 0x00	; 0
    313c:	50 e0       	ldi	r21, 0x00	; 0
    313e:	80 91 60 01 	lds	r24, 0x0160
    3142:	90 91 61 01 	lds	r25, 0x0161
    3146:	a0 91 62 01 	lds	r26, 0x0162
    314a:	b0 91 63 01 	lds	r27, 0x0163
    314e:	82 0f       	add	r24, r18
    3150:	93 1f       	adc	r25, r19
    3152:	a4 1f       	adc	r26, r20
    3154:	b5 1f       	adc	r27, r21
    3156:	80 93 be 01 	sts	0x01BE, r24
    315a:	90 93 bf 01 	sts	0x01BF, r25
    315e:	a0 93 c0 01 	sts	0x01C0, r26
    3162:	b0 93 c1 01 	sts	0x01C1, r27
    3166:	33 c0       	rjmp	.+102    	; 0x31ce <main+0x1d22>
					}
					else if(next_state == DAH)
    3168:	80 91 9f 01 	lds	r24, 0x019F
    316c:	83 30       	cpi	r24, 0x03	; 3
    316e:	21 f5       	brne	.+72     	; 0x31b8 <main+0x1d0c>
					{
						cur_state = DAH;
    3170:	83 e0       	ldi	r24, 0x03	; 3
    3172:	80 93 ba 01 	sts	0x01BA, r24
						cur_state_end = cur_timer + (dit_length * 3);
    3176:	20 91 6b 01 	lds	r18, 0x016B
    317a:	30 91 6c 01 	lds	r19, 0x016C
    317e:	c9 01       	movw	r24, r18
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	82 0f       	add	r24, r18
    3186:	93 1f       	adc	r25, r19
    3188:	9c 01       	movw	r18, r24
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	80 91 60 01 	lds	r24, 0x0160
    3192:	90 91 61 01 	lds	r25, 0x0161
    3196:	a0 91 62 01 	lds	r26, 0x0162
    319a:	b0 91 63 01 	lds	r27, 0x0163
    319e:	82 0f       	add	r24, r18
    31a0:	93 1f       	adc	r25, r19
    31a2:	a4 1f       	adc	r26, r20
    31a4:	b5 1f       	adc	r27, r21
    31a6:	80 93 be 01 	sts	0x01BE, r24
    31aa:	90 93 bf 01 	sts	0x01BF, r25
    31ae:	a0 93 c0 01 	sts	0x01C0, r26
    31b2:	b0 93 c1 01 	sts	0x01C1, r27
    31b6:	0b c0       	rjmp	.+22     	; 0x31ce <main+0x1d22>
					}
					else if(next_state == VALIDATECHAR)
    31b8:	80 91 9f 01 	lds	r24, 0x019F
    31bc:	8b 30       	cpi	r24, 0x0B	; 11
    31be:	21 f4       	brne	.+8      	; 0x31c8 <main+0x1d1c>
						cur_state = VALIDATECHAR;
    31c0:	8b e0       	ldi	r24, 0x0B	; 11
    31c2:	80 93 ba 01 	sts	0x01BA, r24
    31c6:	03 c0       	rjmp	.+6      	; 0x31ce <main+0x1d22>
					else
						cur_state = IDLE;
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	80 93 ba 01 	sts	0x01BA, r24

					prev_state = DITDELAY;
    31ce:	84 e0       	ldi	r24, 0x04	; 4
    31d0:	80 93 6a 01 	sts	0x016A, r24
					next_state = IDLE;
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	80 93 9f 01 	sts	0x019F, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    31da:	80 91 c6 01 	lds	r24, 0x01C6
    31de:	81 30       	cpi	r24, 0x01	; 1
    31e0:	61 f4       	brne	.+24     	; 0x31fa <main+0x1d4e>
    31e2:	80 91 6a 01 	lds	r24, 0x016A
    31e6:	83 30       	cpi	r24, 0x03	; 3
    31e8:	41 f4       	brne	.+16     	; 0x31fa <main+0x1d4e>
    31ea:	80 91 9f 01 	lds	r24, 0x019F
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	21 f4       	brne	.+8      	; 0x31fa <main+0x1d4e>
					next_state = DIT;
    31f2:	82 e0       	ldi	r24, 0x02	; 2
    31f4:	80 93 9f 01 	sts	0x019F, r24
    31f8:	0f c0       	rjmp	.+30     	; 0x3218 <main+0x1d6c>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    31fa:	80 91 b6 01 	lds	r24, 0x01B6
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	59 f4       	brne	.+22     	; 0x3218 <main+0x1d6c>
    3202:	80 91 6a 01 	lds	r24, 0x016A
    3206:	82 30       	cpi	r24, 0x02	; 2
    3208:	39 f4       	brne	.+14     	; 0x3218 <main+0x1d6c>
    320a:	80 91 9f 01 	lds	r24, 0x019F
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	19 f4       	brne	.+6      	; 0x3218 <main+0x1d6c>
					next_state = DAH;
    3212:	83 e0       	ldi	r24, 0x03	; 3
    3214:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    3218:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    321c:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	80 93 33 01 	sts	0x0133, r24
				break;
    3226:	88 c0       	rjmp	.+272    	; 0x3338 <main+0x1e8c>
				// Compare recorded character with the Morse Code table

				// If rec_input is 0, dump to invalid

				// Tack a trailing "1" onto rec_input to indicate end of character
				rec_input = rec_input + (0b10000000 >> rec_count);
    3228:	80 91 40 01 	lds	r24, 0x0140
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	80 e8       	ldi	r24, 0x80	; 128
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	02 2e       	mov	r0, r18
    3236:	02 c0       	rjmp	.+4      	; 0x323c <main+0x1d90>
    3238:	95 95       	asr	r25
    323a:	87 95       	ror	r24
    323c:	0a 94       	dec	r0
    323e:	e2 f7       	brpl	.-8      	; 0x3238 <main+0x1d8c>
    3240:	98 2f       	mov	r25, r24
    3242:	80 91 3f 01 	lds	r24, 0x013F
    3246:	89 0f       	add	r24, r25
    3248:	80 93 3f 01 	sts	0x013F, r24

				for(val_index = MORSE_CHAR_START; val_index <= 'Z'; val_index++)
    324c:	80 e2       	ldi	r24, 0x20	; 32
    324e:	80 93 45 01 	sts	0x0145, r24
    3252:	2c c0       	rjmp	.+88     	; 0x32ac <main+0x1e00>
				{
					if(rec_input == pgm_read_byte(&morsechar[val_index]))
    3254:	80 91 45 01 	lds	r24, 0x0145
    3258:	88 2f       	mov	r24, r24
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	88 59       	subi	r24, 0x98	; 152
    325e:	9f 4f       	sbci	r25, 0xFF	; 255
    3260:	9f 87       	std	Y+15, r25	; 0x0f
    3262:	8e 87       	std	Y+14, r24	; 0x0e
    3264:	8e 85       	ldd	r24, Y+14	; 0x0e
    3266:	9f 85       	ldd	r25, Y+15	; 0x0f
    3268:	fc 01       	movw	r30, r24
    326a:	14 91       	lpm	r17, Z+
    326c:	18 8b       	std	Y+16, r17	; 0x10
    326e:	98 89       	ldd	r25, Y+16	; 0x10
    3270:	80 91 3f 01 	lds	r24, 0x013F
    3274:	98 17       	cp	r25, r24
    3276:	a9 f4       	brne	.+42     	; 0x32a2 <main+0x1df6>
					{
						// Add recorded character to text buffer
						char temp_str[2] = {val_index, '\0'};
    3278:	80 91 45 01 	lds	r24, 0x0145
    327c:	89 8b       	std	Y+17, r24	; 0x11
    327e:	1a 8a       	std	Y+18, r1	; 0x12
						//temp_str[0] = val_index;
						//temp_str[1] = '\0';
						strcat(text_buffer, temp_str);
    3280:	80 91 38 01 	lds	r24, 0x0138
    3284:	90 91 39 01 	lds	r25, 0x0139
    3288:	9e 01       	movw	r18, r28
    328a:	2f 5e       	subi	r18, 0xEF	; 239
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	b9 01       	movw	r22, r18
    3290:	0e 94 4b 1b 	call	0x3696	; 0x3696 <strcat>

						// Reinitialize the current recorded character
						rec_input = 0;
    3294:	10 92 3f 01 	sts	0x013F, r1
						rec_count = 0;
    3298:	10 92 40 01 	sts	0x0140, r1
						cur_state = IDLE;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	80 93 ba 01 	sts	0x01BA, r24
				// If rec_input is 0, dump to invalid

				// Tack a trailing "1" onto rec_input to indicate end of character
				rec_input = rec_input + (0b10000000 >> rec_count);

				for(val_index = MORSE_CHAR_START; val_index <= 'Z'; val_index++)
    32a2:	80 91 45 01 	lds	r24, 0x0145
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	80 93 45 01 	sts	0x0145, r24
    32ac:	80 91 45 01 	lds	r24, 0x0145
    32b0:	8b 35       	cpi	r24, 0x5B	; 91
    32b2:	80 f2       	brcs	.-96     	; 0x3254 <main+0x1da8>
					}
				}

				// If no match, the character isn't valid. Toss it out and announce error
				// No match if rec_input is not reset to 0
				if(rec_input != 0)
    32b4:	80 91 3f 01 	lds	r24, 0x013F
    32b8:	88 23       	and	r24, r24
    32ba:	91 f0       	breq	.+36     	; 0x32e0 <main+0x1e34>
				{
					// Reinitialize the current recorded character
					rec_input = 0b10000000;
    32bc:	80 e8       	ldi	r24, 0x80	; 128
    32be:	80 93 3f 01 	sts	0x013F, r24
					rec_count = 0;
    32c2:	10 92 40 01 	sts	0x0140, r1
					cur_state = IDLE;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	80 93 ba 01 	sts	0x01BA, r24

					// Indicate an error
					set_st_freq(ST_LOW);
    32cc:	60 e9       	ldi	r22, 0x90	; 144
    32ce:	71 e0       	ldi	r23, 0x01	; 1
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 2f 0a 	call	0x145e	; 0x145e <set_st_freq>
					announce("X");
    32d8:	8f e1       	ldi	r24, 0x1F	; 31
    32da:	91 e0       	ldi	r25, 0x01	; 1
    32dc:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
				}

				cur_state = IDLE;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	80 93 ba 01 	sts	0x01BA, r24

				break;
    32e6:	28 c0       	rjmp	.+80     	; 0x3338 <main+0x1e8c>

			case EXIT:
				// Write the memory to EEPROM
				eeprom_update_block((const void*)&text_buffer, (void*)&ee_msg_mem_1, 40);
    32e8:	88 e3       	ldi	r24, 0x38	; 56
    32ea:	91 e0       	ldi	r25, 0x01	; 1
    32ec:	21 e0       	ldi	r18, 0x01	; 1
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	b9 01       	movw	r22, r18
    32f2:	48 e2       	ldi	r20, 0x28	; 40
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <__eeupd_block_m168>

				// Unmute and reset back to default mode
				mute_end = cur_timer;
    32fa:	80 91 60 01 	lds	r24, 0x0160
    32fe:	90 91 61 01 	lds	r25, 0x0161
    3302:	a0 91 62 01 	lds	r26, 0x0162
    3306:	b0 91 63 01 	lds	r27, 0x0163
    330a:	80 93 c2 01 	sts	0x01C2, r24
    330e:	90 93 c3 01 	sts	0x01C3, r25
    3312:	a0 93 c4 01 	sts	0x01C4, r26
    3316:	b0 93 c5 01 	sts	0x01C5, r27
				mute_on = FALSE;
    331a:	10 92 33 01 	sts	0x0133, r1
				cur_state = IDLE;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	80 93 ba 01 	sts	0x01BA, r24
				cur_mode = default_mode;
    3324:	80 91 65 01 	lds	r24, 0x0165
    3328:	80 93 9a 01 	sts	0x019A, r24

				// Announce successful recording
				announce("R");
    332c:	81 e2       	ldi	r24, 0x21	; 33
    332e:	91 e0       	ldi	r25, 0x01	; 1
    3330:	0e 94 57 06 	call	0xcae	; 0xcae <announce>
				break;
    3334:	01 c0       	rjmp	.+2      	; 0x3338 <main+0x1e8c>

			default:
				break;
    3336:	00 00       	nop
			}
			break;
    3338:	01 c0       	rjmp	.+2      	; 0x333c <main+0x1e90>

		default:
			break;
    333a:	00 00       	nop
		} // END switch(cur_mode)

	}
    333c:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <main+0xac>

00003340 <__mulsi3>:
    3340:	62 9f       	mul	r22, r18
    3342:	d0 01       	movw	r26, r0
    3344:	73 9f       	mul	r23, r19
    3346:	f0 01       	movw	r30, r0
    3348:	82 9f       	mul	r24, r18
    334a:	e0 0d       	add	r30, r0
    334c:	f1 1d       	adc	r31, r1
    334e:	64 9f       	mul	r22, r20
    3350:	e0 0d       	add	r30, r0
    3352:	f1 1d       	adc	r31, r1
    3354:	92 9f       	mul	r25, r18
    3356:	f0 0d       	add	r31, r0
    3358:	83 9f       	mul	r24, r19
    335a:	f0 0d       	add	r31, r0
    335c:	74 9f       	mul	r23, r20
    335e:	f0 0d       	add	r31, r0
    3360:	65 9f       	mul	r22, r21
    3362:	f0 0d       	add	r31, r0
    3364:	99 27       	eor	r25, r25
    3366:	72 9f       	mul	r23, r18
    3368:	b0 0d       	add	r27, r0
    336a:	e1 1d       	adc	r30, r1
    336c:	f9 1f       	adc	r31, r25
    336e:	63 9f       	mul	r22, r19
    3370:	b0 0d       	add	r27, r0
    3372:	e1 1d       	adc	r30, r1
    3374:	f9 1f       	adc	r31, r25
    3376:	bd 01       	movw	r22, r26
    3378:	cf 01       	movw	r24, r30
    337a:	11 24       	eor	r1, r1
    337c:	08 95       	ret

0000337e <__udivmodhi4>:
    337e:	aa 1b       	sub	r26, r26
    3380:	bb 1b       	sub	r27, r27
    3382:	51 e1       	ldi	r21, 0x11	; 17
    3384:	07 c0       	rjmp	.+14     	; 0x3394 <__udivmodhi4_ep>

00003386 <__udivmodhi4_loop>:
    3386:	aa 1f       	adc	r26, r26
    3388:	bb 1f       	adc	r27, r27
    338a:	a6 17       	cp	r26, r22
    338c:	b7 07       	cpc	r27, r23
    338e:	10 f0       	brcs	.+4      	; 0x3394 <__udivmodhi4_ep>
    3390:	a6 1b       	sub	r26, r22
    3392:	b7 0b       	sbc	r27, r23

00003394 <__udivmodhi4_ep>:
    3394:	88 1f       	adc	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	5a 95       	dec	r21
    339a:	a9 f7       	brne	.-22     	; 0x3386 <__udivmodhi4_loop>
    339c:	80 95       	com	r24
    339e:	90 95       	com	r25
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	08 95       	ret

000033a6 <__divmodhi4>:
    33a6:	97 fb       	bst	r25, 7
    33a8:	09 2e       	mov	r0, r25
    33aa:	07 26       	eor	r0, r23
    33ac:	0a d0       	rcall	.+20     	; 0x33c2 <__divmodhi4_neg1>
    33ae:	77 fd       	sbrc	r23, 7
    33b0:	04 d0       	rcall	.+8      	; 0x33ba <__divmodhi4_neg2>
    33b2:	e5 df       	rcall	.-54     	; 0x337e <__udivmodhi4>
    33b4:	06 d0       	rcall	.+12     	; 0x33c2 <__divmodhi4_neg1>
    33b6:	00 20       	and	r0, r0
    33b8:	1a f4       	brpl	.+6      	; 0x33c0 <__divmodhi4_exit>

000033ba <__divmodhi4_neg2>:
    33ba:	70 95       	com	r23
    33bc:	61 95       	neg	r22
    33be:	7f 4f       	sbci	r23, 0xFF	; 255

000033c0 <__divmodhi4_exit>:
    33c0:	08 95       	ret

000033c2 <__divmodhi4_neg1>:
    33c2:	f6 f7       	brtc	.-4      	; 0x33c0 <__divmodhi4_exit>
    33c4:	90 95       	com	r25
    33c6:	81 95       	neg	r24
    33c8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ca:	08 95       	ret

000033cc <__udivmodsi4>:
    33cc:	a1 e2       	ldi	r26, 0x21	; 33
    33ce:	1a 2e       	mov	r1, r26
    33d0:	aa 1b       	sub	r26, r26
    33d2:	bb 1b       	sub	r27, r27
    33d4:	fd 01       	movw	r30, r26
    33d6:	0d c0       	rjmp	.+26     	; 0x33f2 <__udivmodsi4_ep>

000033d8 <__udivmodsi4_loop>:
    33d8:	aa 1f       	adc	r26, r26
    33da:	bb 1f       	adc	r27, r27
    33dc:	ee 1f       	adc	r30, r30
    33de:	ff 1f       	adc	r31, r31
    33e0:	a2 17       	cp	r26, r18
    33e2:	b3 07       	cpc	r27, r19
    33e4:	e4 07       	cpc	r30, r20
    33e6:	f5 07       	cpc	r31, r21
    33e8:	20 f0       	brcs	.+8      	; 0x33f2 <__udivmodsi4_ep>
    33ea:	a2 1b       	sub	r26, r18
    33ec:	b3 0b       	sbc	r27, r19
    33ee:	e4 0b       	sbc	r30, r20
    33f0:	f5 0b       	sbc	r31, r21

000033f2 <__udivmodsi4_ep>:
    33f2:	66 1f       	adc	r22, r22
    33f4:	77 1f       	adc	r23, r23
    33f6:	88 1f       	adc	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	1a 94       	dec	r1
    33fc:	69 f7       	brne	.-38     	; 0x33d8 <__udivmodsi4_loop>
    33fe:	60 95       	com	r22
    3400:	70 95       	com	r23
    3402:	80 95       	com	r24
    3404:	90 95       	com	r25
    3406:	9b 01       	movw	r18, r22
    3408:	ac 01       	movw	r20, r24
    340a:	bd 01       	movw	r22, r26
    340c:	cf 01       	movw	r24, r30
    340e:	08 95       	ret

00003410 <malloc>:
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	82 30       	cpi	r24, 0x02	; 2
    3416:	91 05       	cpc	r25, r1
    3418:	10 f4       	brcc	.+4      	; 0x341e <malloc+0xe>
    341a:	82 e0       	ldi	r24, 0x02	; 2
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	e0 91 db 01 	lds	r30, 0x01DB
    3422:	f0 91 dc 01 	lds	r31, 0x01DC
    3426:	40 e0       	ldi	r20, 0x00	; 0
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	26 c0       	rjmp	.+76     	; 0x347c <malloc+0x6c>
    3430:	60 81       	ld	r22, Z
    3432:	71 81       	ldd	r23, Z+1	; 0x01
    3434:	68 17       	cp	r22, r24
    3436:	79 07       	cpc	r23, r25
    3438:	e0 f0       	brcs	.+56     	; 0x3472 <malloc+0x62>
    343a:	68 17       	cp	r22, r24
    343c:	79 07       	cpc	r23, r25
    343e:	81 f4       	brne	.+32     	; 0x3460 <malloc+0x50>
    3440:	82 81       	ldd	r24, Z+2	; 0x02
    3442:	93 81       	ldd	r25, Z+3	; 0x03
    3444:	21 15       	cp	r18, r1
    3446:	31 05       	cpc	r19, r1
    3448:	31 f0       	breq	.+12     	; 0x3456 <malloc+0x46>
    344a:	d9 01       	movw	r26, r18
    344c:	13 96       	adiw	r26, 0x03	; 3
    344e:	9c 93       	st	X, r25
    3450:	8e 93       	st	-X, r24
    3452:	12 97       	sbiw	r26, 0x02	; 2
    3454:	2b c0       	rjmp	.+86     	; 0x34ac <malloc+0x9c>
    3456:	90 93 dc 01 	sts	0x01DC, r25
    345a:	80 93 db 01 	sts	0x01DB, r24
    345e:	26 c0       	rjmp	.+76     	; 0x34ac <malloc+0x9c>
    3460:	41 15       	cp	r20, r1
    3462:	51 05       	cpc	r21, r1
    3464:	19 f0       	breq	.+6      	; 0x346c <malloc+0x5c>
    3466:	64 17       	cp	r22, r20
    3468:	75 07       	cpc	r23, r21
    346a:	18 f4       	brcc	.+6      	; 0x3472 <malloc+0x62>
    346c:	ab 01       	movw	r20, r22
    346e:	e9 01       	movw	r28, r18
    3470:	df 01       	movw	r26, r30
    3472:	9f 01       	movw	r18, r30
    3474:	72 81       	ldd	r23, Z+2	; 0x02
    3476:	63 81       	ldd	r22, Z+3	; 0x03
    3478:	e7 2f       	mov	r30, r23
    347a:	f6 2f       	mov	r31, r22
    347c:	30 97       	sbiw	r30, 0x00	; 0
    347e:	c1 f6       	brne	.-80     	; 0x3430 <malloc+0x20>
    3480:	41 15       	cp	r20, r1
    3482:	51 05       	cpc	r21, r1
    3484:	01 f1       	breq	.+64     	; 0x34c6 <malloc+0xb6>
    3486:	48 1b       	sub	r20, r24
    3488:	59 0b       	sbc	r21, r25
    348a:	44 30       	cpi	r20, 0x04	; 4
    348c:	51 05       	cpc	r21, r1
    348e:	80 f4       	brcc	.+32     	; 0x34b0 <malloc+0xa0>
    3490:	12 96       	adiw	r26, 0x02	; 2
    3492:	8d 91       	ld	r24, X+
    3494:	9c 91       	ld	r25, X
    3496:	13 97       	sbiw	r26, 0x03	; 3
    3498:	20 97       	sbiw	r28, 0x00	; 0
    349a:	19 f0       	breq	.+6      	; 0x34a2 <malloc+0x92>
    349c:	9b 83       	std	Y+3, r25	; 0x03
    349e:	8a 83       	std	Y+2, r24	; 0x02
    34a0:	04 c0       	rjmp	.+8      	; 0x34aa <malloc+0x9a>
    34a2:	90 93 dc 01 	sts	0x01DC, r25
    34a6:	80 93 db 01 	sts	0x01DB, r24
    34aa:	fd 01       	movw	r30, r26
    34ac:	32 96       	adiw	r30, 0x02	; 2
    34ae:	46 c0       	rjmp	.+140    	; 0x353c <malloc+0x12c>
    34b0:	fd 01       	movw	r30, r26
    34b2:	e4 0f       	add	r30, r20
    34b4:	f5 1f       	adc	r31, r21
    34b6:	81 93       	st	Z+, r24
    34b8:	91 93       	st	Z+, r25
    34ba:	42 50       	subi	r20, 0x02	; 2
    34bc:	50 40       	sbci	r21, 0x00	; 0
    34be:	11 96       	adiw	r26, 0x01	; 1
    34c0:	5c 93       	st	X, r21
    34c2:	4e 93       	st	-X, r20
    34c4:	3b c0       	rjmp	.+118    	; 0x353c <malloc+0x12c>
    34c6:	20 91 d9 01 	lds	r18, 0x01D9
    34ca:	30 91 da 01 	lds	r19, 0x01DA
    34ce:	21 15       	cp	r18, r1
    34d0:	31 05       	cpc	r19, r1
    34d2:	41 f4       	brne	.+16     	; 0x34e4 <malloc+0xd4>
    34d4:	20 91 2e 01 	lds	r18, 0x012E
    34d8:	30 91 2f 01 	lds	r19, 0x012F
    34dc:	30 93 da 01 	sts	0x01DA, r19
    34e0:	20 93 d9 01 	sts	0x01D9, r18
    34e4:	20 91 30 01 	lds	r18, 0x0130
    34e8:	30 91 31 01 	lds	r19, 0x0131
    34ec:	21 15       	cp	r18, r1
    34ee:	31 05       	cpc	r19, r1
    34f0:	41 f4       	brne	.+16     	; 0x3502 <malloc+0xf2>
    34f2:	2d b7       	in	r18, 0x3d	; 61
    34f4:	3e b7       	in	r19, 0x3e	; 62
    34f6:	40 91 2c 01 	lds	r20, 0x012C
    34fa:	50 91 2d 01 	lds	r21, 0x012D
    34fe:	24 1b       	sub	r18, r20
    3500:	35 0b       	sbc	r19, r21
    3502:	e0 91 d9 01 	lds	r30, 0x01D9
    3506:	f0 91 da 01 	lds	r31, 0x01DA
    350a:	e2 17       	cp	r30, r18
    350c:	f3 07       	cpc	r31, r19
    350e:	a0 f4       	brcc	.+40     	; 0x3538 <malloc+0x128>
    3510:	2e 1b       	sub	r18, r30
    3512:	3f 0b       	sbc	r19, r31
    3514:	28 17       	cp	r18, r24
    3516:	39 07       	cpc	r19, r25
    3518:	78 f0       	brcs	.+30     	; 0x3538 <malloc+0x128>
    351a:	ac 01       	movw	r20, r24
    351c:	4e 5f       	subi	r20, 0xFE	; 254
    351e:	5f 4f       	sbci	r21, 0xFF	; 255
    3520:	24 17       	cp	r18, r20
    3522:	35 07       	cpc	r19, r21
    3524:	48 f0       	brcs	.+18     	; 0x3538 <malloc+0x128>
    3526:	4e 0f       	add	r20, r30
    3528:	5f 1f       	adc	r21, r31
    352a:	50 93 da 01 	sts	0x01DA, r21
    352e:	40 93 d9 01 	sts	0x01D9, r20
    3532:	81 93       	st	Z+, r24
    3534:	91 93       	st	Z+, r25
    3536:	02 c0       	rjmp	.+4      	; 0x353c <malloc+0x12c>
    3538:	e0 e0       	ldi	r30, 0x00	; 0
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	cf 01       	movw	r24, r30
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	08 95       	ret

00003544 <free>:
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	09 f4       	brne	.+2      	; 0x354e <free+0xa>
    354c:	91 c0       	rjmp	.+290    	; 0x3670 <free+0x12c>
    354e:	fc 01       	movw	r30, r24
    3550:	32 97       	sbiw	r30, 0x02	; 2
    3552:	13 82       	std	Z+3, r1	; 0x03
    3554:	12 82       	std	Z+2, r1	; 0x02
    3556:	60 91 db 01 	lds	r22, 0x01DB
    355a:	70 91 dc 01 	lds	r23, 0x01DC
    355e:	61 15       	cp	r22, r1
    3560:	71 05       	cpc	r23, r1
    3562:	81 f4       	brne	.+32     	; 0x3584 <free+0x40>
    3564:	20 81       	ld	r18, Z
    3566:	31 81       	ldd	r19, Z+1	; 0x01
    3568:	28 0f       	add	r18, r24
    356a:	39 1f       	adc	r19, r25
    356c:	80 91 d9 01 	lds	r24, 0x01D9
    3570:	90 91 da 01 	lds	r25, 0x01DA
    3574:	82 17       	cp	r24, r18
    3576:	93 07       	cpc	r25, r19
    3578:	99 f5       	brne	.+102    	; 0x35e0 <free+0x9c>
    357a:	f0 93 da 01 	sts	0x01DA, r31
    357e:	e0 93 d9 01 	sts	0x01D9, r30
    3582:	76 c0       	rjmp	.+236    	; 0x3670 <free+0x12c>
    3584:	db 01       	movw	r26, r22
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	02 c0       	rjmp	.+4      	; 0x3590 <free+0x4c>
    358c:	cd 01       	movw	r24, r26
    358e:	d9 01       	movw	r26, r18
    3590:	ae 17       	cp	r26, r30
    3592:	bf 07       	cpc	r27, r31
    3594:	48 f4       	brcc	.+18     	; 0x35a8 <free+0x64>
    3596:	12 96       	adiw	r26, 0x02	; 2
    3598:	2d 91       	ld	r18, X+
    359a:	3c 91       	ld	r19, X
    359c:	13 97       	sbiw	r26, 0x03	; 3
    359e:	21 15       	cp	r18, r1
    35a0:	31 05       	cpc	r19, r1
    35a2:	a1 f7       	brne	.-24     	; 0x358c <free+0x48>
    35a4:	cd 01       	movw	r24, r26
    35a6:	21 c0       	rjmp	.+66     	; 0x35ea <free+0xa6>
    35a8:	b3 83       	std	Z+3, r27	; 0x03
    35aa:	a2 83       	std	Z+2, r26	; 0x02
    35ac:	ef 01       	movw	r28, r30
    35ae:	49 91       	ld	r20, Y+
    35b0:	59 91       	ld	r21, Y+
    35b2:	9e 01       	movw	r18, r28
    35b4:	24 0f       	add	r18, r20
    35b6:	35 1f       	adc	r19, r21
    35b8:	a2 17       	cp	r26, r18
    35ba:	b3 07       	cpc	r27, r19
    35bc:	79 f4       	brne	.+30     	; 0x35dc <free+0x98>
    35be:	2d 91       	ld	r18, X+
    35c0:	3c 91       	ld	r19, X
    35c2:	11 97       	sbiw	r26, 0x01	; 1
    35c4:	24 0f       	add	r18, r20
    35c6:	35 1f       	adc	r19, r21
    35c8:	2e 5f       	subi	r18, 0xFE	; 254
    35ca:	3f 4f       	sbci	r19, 0xFF	; 255
    35cc:	31 83       	std	Z+1, r19	; 0x01
    35ce:	20 83       	st	Z, r18
    35d0:	12 96       	adiw	r26, 0x02	; 2
    35d2:	2d 91       	ld	r18, X+
    35d4:	3c 91       	ld	r19, X
    35d6:	13 97       	sbiw	r26, 0x03	; 3
    35d8:	33 83       	std	Z+3, r19	; 0x03
    35da:	22 83       	std	Z+2, r18	; 0x02
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	29 f4       	brne	.+10     	; 0x35ea <free+0xa6>
    35e0:	f0 93 dc 01 	sts	0x01DC, r31
    35e4:	e0 93 db 01 	sts	0x01DB, r30
    35e8:	43 c0       	rjmp	.+134    	; 0x3670 <free+0x12c>
    35ea:	dc 01       	movw	r26, r24
    35ec:	13 96       	adiw	r26, 0x03	; 3
    35ee:	fc 93       	st	X, r31
    35f0:	ee 93       	st	-X, r30
    35f2:	12 97       	sbiw	r26, 0x02	; 2
    35f4:	4d 91       	ld	r20, X+
    35f6:	5d 91       	ld	r21, X+
    35f8:	a4 0f       	add	r26, r20
    35fa:	b5 1f       	adc	r27, r21
    35fc:	ea 17       	cp	r30, r26
    35fe:	fb 07       	cpc	r31, r27
    3600:	69 f4       	brne	.+26     	; 0x361c <free+0xd8>
    3602:	20 81       	ld	r18, Z
    3604:	31 81       	ldd	r19, Z+1	; 0x01
    3606:	24 0f       	add	r18, r20
    3608:	35 1f       	adc	r19, r21
    360a:	2e 5f       	subi	r18, 0xFE	; 254
    360c:	3f 4f       	sbci	r19, 0xFF	; 255
    360e:	ec 01       	movw	r28, r24
    3610:	39 83       	std	Y+1, r19	; 0x01
    3612:	28 83       	st	Y, r18
    3614:	22 81       	ldd	r18, Z+2	; 0x02
    3616:	33 81       	ldd	r19, Z+3	; 0x03
    3618:	3b 83       	std	Y+3, r19	; 0x03
    361a:	2a 83       	std	Y+2, r18	; 0x02
    361c:	e0 e0       	ldi	r30, 0x00	; 0
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	02 c0       	rjmp	.+4      	; 0x3626 <free+0xe2>
    3622:	fb 01       	movw	r30, r22
    3624:	bc 01       	movw	r22, r24
    3626:	db 01       	movw	r26, r22
    3628:	12 96       	adiw	r26, 0x02	; 2
    362a:	8d 91       	ld	r24, X+
    362c:	9c 91       	ld	r25, X
    362e:	13 97       	sbiw	r26, 0x03	; 3
    3630:	00 97       	sbiw	r24, 0x00	; 0
    3632:	b9 f7       	brne	.-18     	; 0x3622 <free+0xde>
    3634:	9b 01       	movw	r18, r22
    3636:	2e 5f       	subi	r18, 0xFE	; 254
    3638:	3f 4f       	sbci	r19, 0xFF	; 255
    363a:	8d 91       	ld	r24, X+
    363c:	9c 91       	ld	r25, X
    363e:	11 97       	sbiw	r26, 0x01	; 1
    3640:	82 0f       	add	r24, r18
    3642:	93 1f       	adc	r25, r19
    3644:	40 91 d9 01 	lds	r20, 0x01D9
    3648:	50 91 da 01 	lds	r21, 0x01DA
    364c:	48 17       	cp	r20, r24
    364e:	59 07       	cpc	r21, r25
    3650:	79 f4       	brne	.+30     	; 0x3670 <free+0x12c>
    3652:	30 97       	sbiw	r30, 0x00	; 0
    3654:	29 f4       	brne	.+10     	; 0x3660 <free+0x11c>
    3656:	10 92 dc 01 	sts	0x01DC, r1
    365a:	10 92 db 01 	sts	0x01DB, r1
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <free+0x120>
    3660:	13 82       	std	Z+3, r1	; 0x03
    3662:	12 82       	std	Z+2, r1	; 0x02
    3664:	22 50       	subi	r18, 0x02	; 2
    3666:	30 40       	sbci	r19, 0x00	; 0
    3668:	30 93 da 01 	sts	0x01DA, r19
    366c:	20 93 d9 01 	sts	0x01D9, r18
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	08 95       	ret

00003676 <memcpy>:
    3676:	fb 01       	movw	r30, r22
    3678:	dc 01       	movw	r26, r24
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <memcpy+0xa>
    367c:	01 90       	ld	r0, Z+
    367e:	0d 92       	st	X+, r0
    3680:	41 50       	subi	r20, 0x01	; 1
    3682:	50 40       	sbci	r21, 0x00	; 0
    3684:	d8 f7       	brcc	.-10     	; 0x367c <memcpy+0x6>
    3686:	08 95       	ret

00003688 <memset>:
    3688:	dc 01       	movw	r26, r24
    368a:	01 c0       	rjmp	.+2      	; 0x368e <memset+0x6>
    368c:	6d 93       	st	X+, r22
    368e:	41 50       	subi	r20, 0x01	; 1
    3690:	50 40       	sbci	r21, 0x00	; 0
    3692:	e0 f7       	brcc	.-8      	; 0x368c <memset+0x4>
    3694:	08 95       	ret

00003696 <strcat>:
    3696:	fb 01       	movw	r30, r22
    3698:	dc 01       	movw	r26, r24
    369a:	0d 90       	ld	r0, X+
    369c:	00 20       	and	r0, r0
    369e:	e9 f7       	brne	.-6      	; 0x369a <strcat+0x4>
    36a0:	11 97       	sbiw	r26, 0x01	; 1
    36a2:	01 90       	ld	r0, Z+
    36a4:	0d 92       	st	X+, r0
    36a6:	00 20       	and	r0, r0
    36a8:	e1 f7       	brne	.-8      	; 0x36a2 <strcat+0xc>
    36aa:	08 95       	ret

000036ac <strcpy>:
    36ac:	fb 01       	movw	r30, r22
    36ae:	dc 01       	movw	r26, r24
    36b0:	01 90       	ld	r0, Z+
    36b2:	0d 92       	st	X+, r0
    36b4:	00 20       	and	r0, r0
    36b6:	e1 f7       	brne	.-8      	; 0x36b0 <strcpy+0x4>
    36b8:	08 95       	ret

000036ba <strupr>:
    36ba:	dc 01       	movw	r26, r24
    36bc:	6c 91       	ld	r22, X
    36be:	61 56       	subi	r22, 0x61	; 97
    36c0:	6a 31       	cpi	r22, 0x1A	; 26
    36c2:	08 f0       	brcs	.+2      	; 0x36c6 <strupr+0xc>
    36c4:	60 5e       	subi	r22, 0xE0	; 224
    36c6:	6f 5b       	subi	r22, 0xBF	; 191
    36c8:	6d 93       	st	X+, r22
    36ca:	c1 f7       	brne	.-16     	; 0x36bc <strupr+0x2>
    36cc:	08 95       	ret

000036ce <sprintf>:
    36ce:	ae e0       	ldi	r26, 0x0E	; 14
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	ed e6       	ldi	r30, 0x6D	; 109
    36d4:	fb e1       	ldi	r31, 0x1B	; 27
    36d6:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__prologue_saves__+0x1c>
    36da:	0d 89       	ldd	r16, Y+21	; 0x15
    36dc:	1e 89       	ldd	r17, Y+22	; 0x16
    36de:	86 e0       	ldi	r24, 0x06	; 6
    36e0:	8c 83       	std	Y+4, r24	; 0x04
    36e2:	1a 83       	std	Y+2, r17	; 0x02
    36e4:	09 83       	std	Y+1, r16	; 0x01
    36e6:	8f ef       	ldi	r24, 0xFF	; 255
    36e8:	9f e7       	ldi	r25, 0x7F	; 127
    36ea:	9e 83       	std	Y+6, r25	; 0x06
    36ec:	8d 83       	std	Y+5, r24	; 0x05
    36ee:	9e 01       	movw	r18, r28
    36f0:	27 5e       	subi	r18, 0xE7	; 231
    36f2:	3f 4f       	sbci	r19, 0xFF	; 255
    36f4:	ce 01       	movw	r24, r28
    36f6:	01 96       	adiw	r24, 0x01	; 1
    36f8:	6f 89       	ldd	r22, Y+23	; 0x17
    36fa:	78 8d       	ldd	r23, Y+24	; 0x18
    36fc:	a9 01       	movw	r20, r18
    36fe:	0e 94 8a 1b 	call	0x3714	; 0x3714 <vfprintf>
    3702:	ef 81       	ldd	r30, Y+7	; 0x07
    3704:	f8 85       	ldd	r31, Y+8	; 0x08
    3706:	e0 0f       	add	r30, r16
    3708:	f1 1f       	adc	r31, r17
    370a:	10 82       	st	Z, r1
    370c:	2e 96       	adiw	r28, 0x0e	; 14
    370e:	e4 e0       	ldi	r30, 0x04	; 4
    3710:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__epilogue_restores__+0x1c>

00003714 <vfprintf>:
    3714:	ac e0       	ldi	r26, 0x0C	; 12
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	e0 e9       	ldi	r30, 0x90	; 144
    371a:	fb e1       	ldi	r31, 0x1B	; 27
    371c:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__prologue_saves__>
    3720:	6c 01       	movw	r12, r24
    3722:	1b 01       	movw	r2, r22
    3724:	8a 01       	movw	r16, r20
    3726:	fc 01       	movw	r30, r24
    3728:	17 82       	std	Z+7, r1	; 0x07
    372a:	16 82       	std	Z+6, r1	; 0x06
    372c:	83 81       	ldd	r24, Z+3	; 0x03
    372e:	81 ff       	sbrs	r24, 1
    3730:	d1 c1       	rjmp	.+930    	; 0x3ad4 <vfprintf+0x3c0>
    3732:	2e 01       	movw	r4, r28
    3734:	08 94       	sec
    3736:	41 1c       	adc	r4, r1
    3738:	51 1c       	adc	r5, r1
    373a:	f6 01       	movw	r30, r12
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	f1 01       	movw	r30, r2
    3740:	93 fd       	sbrc	r25, 3
    3742:	85 91       	lpm	r24, Z+
    3744:	93 ff       	sbrs	r25, 3
    3746:	81 91       	ld	r24, Z+
    3748:	1f 01       	movw	r2, r30
    374a:	88 23       	and	r24, r24
    374c:	09 f4       	brne	.+2      	; 0x3750 <vfprintf+0x3c>
    374e:	be c1       	rjmp	.+892    	; 0x3acc <vfprintf+0x3b8>
    3750:	85 32       	cpi	r24, 0x25	; 37
    3752:	39 f4       	brne	.+14     	; 0x3762 <vfprintf+0x4e>
    3754:	93 fd       	sbrc	r25, 3
    3756:	85 91       	lpm	r24, Z+
    3758:	93 ff       	sbrs	r25, 3
    375a:	81 91       	ld	r24, Z+
    375c:	1f 01       	movw	r2, r30
    375e:	85 32       	cpi	r24, 0x25	; 37
    3760:	29 f4       	brne	.+10     	; 0x376c <vfprintf+0x58>
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	b6 01       	movw	r22, r12
    3766:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    376a:	e7 cf       	rjmp	.-50     	; 0x373a <vfprintf+0x26>
    376c:	ee 24       	eor	r14, r14
    376e:	ff 24       	eor	r15, r15
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	20 32       	cpi	r18, 0x20	; 32
    3774:	b0 f4       	brcc	.+44     	; 0x37a2 <vfprintf+0x8e>
    3776:	8b 32       	cpi	r24, 0x2B	; 43
    3778:	69 f0       	breq	.+26     	; 0x3794 <vfprintf+0x80>
    377a:	8c 32       	cpi	r24, 0x2C	; 44
    377c:	28 f4       	brcc	.+10     	; 0x3788 <vfprintf+0x74>
    377e:	80 32       	cpi	r24, 0x20	; 32
    3780:	51 f0       	breq	.+20     	; 0x3796 <vfprintf+0x82>
    3782:	83 32       	cpi	r24, 0x23	; 35
    3784:	71 f4       	brne	.+28     	; 0x37a2 <vfprintf+0x8e>
    3786:	0b c0       	rjmp	.+22     	; 0x379e <vfprintf+0x8a>
    3788:	8d 32       	cpi	r24, 0x2D	; 45
    378a:	39 f0       	breq	.+14     	; 0x379a <vfprintf+0x86>
    378c:	80 33       	cpi	r24, 0x30	; 48
    378e:	49 f4       	brne	.+18     	; 0x37a2 <vfprintf+0x8e>
    3790:	21 60       	ori	r18, 0x01	; 1
    3792:	2c c0       	rjmp	.+88     	; 0x37ec <vfprintf+0xd8>
    3794:	22 60       	ori	r18, 0x02	; 2
    3796:	24 60       	ori	r18, 0x04	; 4
    3798:	29 c0       	rjmp	.+82     	; 0x37ec <vfprintf+0xd8>
    379a:	28 60       	ori	r18, 0x08	; 8
    379c:	27 c0       	rjmp	.+78     	; 0x37ec <vfprintf+0xd8>
    379e:	20 61       	ori	r18, 0x10	; 16
    37a0:	25 c0       	rjmp	.+74     	; 0x37ec <vfprintf+0xd8>
    37a2:	27 fd       	sbrc	r18, 7
    37a4:	2c c0       	rjmp	.+88     	; 0x37fe <vfprintf+0xea>
    37a6:	38 2f       	mov	r19, r24
    37a8:	30 53       	subi	r19, 0x30	; 48
    37aa:	3a 30       	cpi	r19, 0x0A	; 10
    37ac:	98 f4       	brcc	.+38     	; 0x37d4 <vfprintf+0xc0>
    37ae:	26 ff       	sbrs	r18, 6
    37b0:	08 c0       	rjmp	.+16     	; 0x37c2 <vfprintf+0xae>
    37b2:	8e 2d       	mov	r24, r14
    37b4:	88 0f       	add	r24, r24
    37b6:	e8 2e       	mov	r14, r24
    37b8:	ee 0c       	add	r14, r14
    37ba:	ee 0c       	add	r14, r14
    37bc:	e8 0e       	add	r14, r24
    37be:	e3 0e       	add	r14, r19
    37c0:	15 c0       	rjmp	.+42     	; 0x37ec <vfprintf+0xd8>
    37c2:	8f 2d       	mov	r24, r15
    37c4:	88 0f       	add	r24, r24
    37c6:	f8 2e       	mov	r15, r24
    37c8:	ff 0c       	add	r15, r15
    37ca:	ff 0c       	add	r15, r15
    37cc:	f8 0e       	add	r15, r24
    37ce:	f3 0e       	add	r15, r19
    37d0:	20 62       	ori	r18, 0x20	; 32
    37d2:	0c c0       	rjmp	.+24     	; 0x37ec <vfprintf+0xd8>
    37d4:	8e 32       	cpi	r24, 0x2E	; 46
    37d6:	21 f4       	brne	.+8      	; 0x37e0 <vfprintf+0xcc>
    37d8:	26 fd       	sbrc	r18, 6
    37da:	78 c1       	rjmp	.+752    	; 0x3acc <vfprintf+0x3b8>
    37dc:	20 64       	ori	r18, 0x40	; 64
    37de:	06 c0       	rjmp	.+12     	; 0x37ec <vfprintf+0xd8>
    37e0:	8c 36       	cpi	r24, 0x6C	; 108
    37e2:	11 f4       	brne	.+4      	; 0x37e8 <vfprintf+0xd4>
    37e4:	20 68       	ori	r18, 0x80	; 128
    37e6:	02 c0       	rjmp	.+4      	; 0x37ec <vfprintf+0xd8>
    37e8:	88 36       	cpi	r24, 0x68	; 104
    37ea:	49 f4       	brne	.+18     	; 0x37fe <vfprintf+0xea>
    37ec:	f1 01       	movw	r30, r2
    37ee:	93 fd       	sbrc	r25, 3
    37f0:	85 91       	lpm	r24, Z+
    37f2:	93 ff       	sbrs	r25, 3
    37f4:	81 91       	ld	r24, Z+
    37f6:	1f 01       	movw	r2, r30
    37f8:	88 23       	and	r24, r24
    37fa:	09 f0       	breq	.+2      	; 0x37fe <vfprintf+0xea>
    37fc:	ba cf       	rjmp	.-140    	; 0x3772 <vfprintf+0x5e>
    37fe:	98 2f       	mov	r25, r24
    3800:	95 54       	subi	r25, 0x45	; 69
    3802:	93 30       	cpi	r25, 0x03	; 3
    3804:	18 f0       	brcs	.+6      	; 0x380c <vfprintf+0xf8>
    3806:	90 52       	subi	r25, 0x20	; 32
    3808:	93 30       	cpi	r25, 0x03	; 3
    380a:	28 f4       	brcc	.+10     	; 0x3816 <vfprintf+0x102>
    380c:	0c 5f       	subi	r16, 0xFC	; 252
    380e:	1f 4f       	sbci	r17, 0xFF	; 255
    3810:	ff e3       	ldi	r31, 0x3F	; 63
    3812:	f9 83       	std	Y+1, r31	; 0x01
    3814:	0d c0       	rjmp	.+26     	; 0x3830 <vfprintf+0x11c>
    3816:	83 36       	cpi	r24, 0x63	; 99
    3818:	31 f0       	breq	.+12     	; 0x3826 <vfprintf+0x112>
    381a:	83 37       	cpi	r24, 0x73	; 115
    381c:	71 f0       	breq	.+28     	; 0x383a <vfprintf+0x126>
    381e:	83 35       	cpi	r24, 0x53	; 83
    3820:	09 f0       	breq	.+2      	; 0x3824 <vfprintf+0x110>
    3822:	60 c0       	rjmp	.+192    	; 0x38e4 <vfprintf+0x1d0>
    3824:	22 c0       	rjmp	.+68     	; 0x386a <vfprintf+0x156>
    3826:	f8 01       	movw	r30, r16
    3828:	80 81       	ld	r24, Z
    382a:	89 83       	std	Y+1, r24	; 0x01
    382c:	0e 5f       	subi	r16, 0xFE	; 254
    382e:	1f 4f       	sbci	r17, 0xFF	; 255
    3830:	42 01       	movw	r8, r4
    3832:	71 e0       	ldi	r23, 0x01	; 1
    3834:	a7 2e       	mov	r10, r23
    3836:	b1 2c       	mov	r11, r1
    3838:	16 c0       	rjmp	.+44     	; 0x3866 <vfprintf+0x152>
    383a:	62 e0       	ldi	r22, 0x02	; 2
    383c:	66 2e       	mov	r6, r22
    383e:	71 2c       	mov	r7, r1
    3840:	60 0e       	add	r6, r16
    3842:	71 1e       	adc	r7, r17
    3844:	f8 01       	movw	r30, r16
    3846:	80 80       	ld	r8, Z
    3848:	91 80       	ldd	r9, Z+1	; 0x01
    384a:	26 ff       	sbrs	r18, 6
    384c:	03 c0       	rjmp	.+6      	; 0x3854 <vfprintf+0x140>
    384e:	6e 2d       	mov	r22, r14
    3850:	70 e0       	ldi	r23, 0x00	; 0
    3852:	02 c0       	rjmp	.+4      	; 0x3858 <vfprintf+0x144>
    3854:	6f ef       	ldi	r22, 0xFF	; 255
    3856:	7f ef       	ldi	r23, 0xFF	; 255
    3858:	c4 01       	movw	r24, r8
    385a:	2c 87       	std	Y+12, r18	; 0x0c
    385c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <strnlen>
    3860:	5c 01       	movw	r10, r24
    3862:	83 01       	movw	r16, r6
    3864:	2c 85       	ldd	r18, Y+12	; 0x0c
    3866:	2f 77       	andi	r18, 0x7F	; 127
    3868:	17 c0       	rjmp	.+46     	; 0x3898 <vfprintf+0x184>
    386a:	52 e0       	ldi	r21, 0x02	; 2
    386c:	65 2e       	mov	r6, r21
    386e:	71 2c       	mov	r7, r1
    3870:	60 0e       	add	r6, r16
    3872:	71 1e       	adc	r7, r17
    3874:	f8 01       	movw	r30, r16
    3876:	80 80       	ld	r8, Z
    3878:	91 80       	ldd	r9, Z+1	; 0x01
    387a:	26 ff       	sbrs	r18, 6
    387c:	03 c0       	rjmp	.+6      	; 0x3884 <vfprintf+0x170>
    387e:	6e 2d       	mov	r22, r14
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	02 c0       	rjmp	.+4      	; 0x3888 <vfprintf+0x174>
    3884:	6f ef       	ldi	r22, 0xFF	; 255
    3886:	7f ef       	ldi	r23, 0xFF	; 255
    3888:	c4 01       	movw	r24, r8
    388a:	2c 87       	std	Y+12, r18	; 0x0c
    388c:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <strnlen_P>
    3890:	5c 01       	movw	r10, r24
    3892:	2c 85       	ldd	r18, Y+12	; 0x0c
    3894:	20 68       	ori	r18, 0x80	; 128
    3896:	83 01       	movw	r16, r6
    3898:	23 fd       	sbrc	r18, 3
    389a:	20 c0       	rjmp	.+64     	; 0x38dc <vfprintf+0x1c8>
    389c:	08 c0       	rjmp	.+16     	; 0x38ae <vfprintf+0x19a>
    389e:	80 e2       	ldi	r24, 0x20	; 32
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	b6 01       	movw	r22, r12
    38a4:	2c 87       	std	Y+12, r18	; 0x0c
    38a6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    38aa:	fa 94       	dec	r15
    38ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    38ae:	8f 2d       	mov	r24, r15
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	a8 16       	cp	r10, r24
    38b4:	b9 06       	cpc	r11, r25
    38b6:	98 f3       	brcs	.-26     	; 0x389e <vfprintf+0x18a>
    38b8:	11 c0       	rjmp	.+34     	; 0x38dc <vfprintf+0x1c8>
    38ba:	f4 01       	movw	r30, r8
    38bc:	27 fd       	sbrc	r18, 7
    38be:	85 91       	lpm	r24, Z+
    38c0:	27 ff       	sbrs	r18, 7
    38c2:	81 91       	ld	r24, Z+
    38c4:	4f 01       	movw	r8, r30
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	b6 01       	movw	r22, r12
    38ca:	2c 87       	std	Y+12, r18	; 0x0c
    38cc:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    38d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    38d2:	f1 10       	cpse	r15, r1
    38d4:	fa 94       	dec	r15
    38d6:	08 94       	sec
    38d8:	a1 08       	sbc	r10, r1
    38da:	b1 08       	sbc	r11, r1
    38dc:	a1 14       	cp	r10, r1
    38de:	b1 04       	cpc	r11, r1
    38e0:	61 f7       	brne	.-40     	; 0x38ba <vfprintf+0x1a6>
    38e2:	f1 c0       	rjmp	.+482    	; 0x3ac6 <vfprintf+0x3b2>
    38e4:	84 36       	cpi	r24, 0x64	; 100
    38e6:	11 f0       	breq	.+4      	; 0x38ec <vfprintf+0x1d8>
    38e8:	89 36       	cpi	r24, 0x69	; 105
    38ea:	49 f5       	brne	.+82     	; 0x393e <vfprintf+0x22a>
    38ec:	27 ff       	sbrs	r18, 7
    38ee:	08 c0       	rjmp	.+16     	; 0x3900 <vfprintf+0x1ec>
    38f0:	f8 01       	movw	r30, r16
    38f2:	60 81       	ld	r22, Z
    38f4:	71 81       	ldd	r23, Z+1	; 0x01
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	0c 5f       	subi	r16, 0xFC	; 252
    38fc:	1f 4f       	sbci	r17, 0xFF	; 255
    38fe:	09 c0       	rjmp	.+18     	; 0x3912 <vfprintf+0x1fe>
    3900:	f8 01       	movw	r30, r16
    3902:	60 81       	ld	r22, Z
    3904:	71 81       	ldd	r23, Z+1	; 0x01
    3906:	88 27       	eor	r24, r24
    3908:	77 fd       	sbrc	r23, 7
    390a:	80 95       	com	r24
    390c:	98 2f       	mov	r25, r24
    390e:	0e 5f       	subi	r16, 0xFE	; 254
    3910:	1f 4f       	sbci	r17, 0xFF	; 255
    3912:	4f e6       	ldi	r20, 0x6F	; 111
    3914:	b4 2e       	mov	r11, r20
    3916:	b2 22       	and	r11, r18
    3918:	97 ff       	sbrs	r25, 7
    391a:	09 c0       	rjmp	.+18     	; 0x392e <vfprintf+0x21a>
    391c:	90 95       	com	r25
    391e:	80 95       	com	r24
    3920:	70 95       	com	r23
    3922:	61 95       	neg	r22
    3924:	7f 4f       	sbci	r23, 0xFF	; 255
    3926:	8f 4f       	sbci	r24, 0xFF	; 255
    3928:	9f 4f       	sbci	r25, 0xFF	; 255
    392a:	f0 e8       	ldi	r31, 0x80	; 128
    392c:	bf 2a       	or	r11, r31
    392e:	a2 01       	movw	r20, r4
    3930:	2a e0       	ldi	r18, 0x0A	; 10
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__ultoa_invert>
    3938:	78 2e       	mov	r7, r24
    393a:	74 18       	sub	r7, r4
    393c:	45 c0       	rjmp	.+138    	; 0x39c8 <vfprintf+0x2b4>
    393e:	85 37       	cpi	r24, 0x75	; 117
    3940:	31 f4       	brne	.+12     	; 0x394e <vfprintf+0x23a>
    3942:	3f ee       	ldi	r19, 0xEF	; 239
    3944:	b3 2e       	mov	r11, r19
    3946:	b2 22       	and	r11, r18
    3948:	2a e0       	ldi	r18, 0x0A	; 10
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	25 c0       	rjmp	.+74     	; 0x3998 <vfprintf+0x284>
    394e:	99 ef       	ldi	r25, 0xF9	; 249
    3950:	b9 2e       	mov	r11, r25
    3952:	b2 22       	and	r11, r18
    3954:	8f 36       	cpi	r24, 0x6F	; 111
    3956:	c1 f0       	breq	.+48     	; 0x3988 <vfprintf+0x274>
    3958:	80 37       	cpi	r24, 0x70	; 112
    395a:	20 f4       	brcc	.+8      	; 0x3964 <vfprintf+0x250>
    395c:	88 35       	cpi	r24, 0x58	; 88
    395e:	09 f0       	breq	.+2      	; 0x3962 <vfprintf+0x24e>
    3960:	b5 c0       	rjmp	.+362    	; 0x3acc <vfprintf+0x3b8>
    3962:	0d c0       	rjmp	.+26     	; 0x397e <vfprintf+0x26a>
    3964:	80 37       	cpi	r24, 0x70	; 112
    3966:	21 f0       	breq	.+8      	; 0x3970 <vfprintf+0x25c>
    3968:	88 37       	cpi	r24, 0x78	; 120
    396a:	09 f0       	breq	.+2      	; 0x396e <vfprintf+0x25a>
    396c:	af c0       	rjmp	.+350    	; 0x3acc <vfprintf+0x3b8>
    396e:	02 c0       	rjmp	.+4      	; 0x3974 <vfprintf+0x260>
    3970:	20 e1       	ldi	r18, 0x10	; 16
    3972:	b2 2a       	or	r11, r18
    3974:	b4 fe       	sbrs	r11, 4
    3976:	0b c0       	rjmp	.+22     	; 0x398e <vfprintf+0x27a>
    3978:	84 e0       	ldi	r24, 0x04	; 4
    397a:	b8 2a       	or	r11, r24
    397c:	08 c0       	rjmp	.+16     	; 0x398e <vfprintf+0x27a>
    397e:	b4 fe       	sbrs	r11, 4
    3980:	09 c0       	rjmp	.+18     	; 0x3994 <vfprintf+0x280>
    3982:	e6 e0       	ldi	r30, 0x06	; 6
    3984:	be 2a       	or	r11, r30
    3986:	06 c0       	rjmp	.+12     	; 0x3994 <vfprintf+0x280>
    3988:	28 e0       	ldi	r18, 0x08	; 8
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	05 c0       	rjmp	.+10     	; 0x3998 <vfprintf+0x284>
    398e:	20 e1       	ldi	r18, 0x10	; 16
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	02 c0       	rjmp	.+4      	; 0x3998 <vfprintf+0x284>
    3994:	20 e1       	ldi	r18, 0x10	; 16
    3996:	32 e0       	ldi	r19, 0x02	; 2
    3998:	b7 fe       	sbrs	r11, 7
    399a:	08 c0       	rjmp	.+16     	; 0x39ac <vfprintf+0x298>
    399c:	f8 01       	movw	r30, r16
    399e:	60 81       	ld	r22, Z
    39a0:	71 81       	ldd	r23, Z+1	; 0x01
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	93 81       	ldd	r25, Z+3	; 0x03
    39a6:	0c 5f       	subi	r16, 0xFC	; 252
    39a8:	1f 4f       	sbci	r17, 0xFF	; 255
    39aa:	07 c0       	rjmp	.+14     	; 0x39ba <vfprintf+0x2a6>
    39ac:	f8 01       	movw	r30, r16
    39ae:	60 81       	ld	r22, Z
    39b0:	71 81       	ldd	r23, Z+1	; 0x01
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 5f       	subi	r16, 0xFE	; 254
    39b8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ba:	a2 01       	movw	r20, r4
    39bc:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__ultoa_invert>
    39c0:	78 2e       	mov	r7, r24
    39c2:	74 18       	sub	r7, r4
    39c4:	ff e7       	ldi	r31, 0x7F	; 127
    39c6:	bf 22       	and	r11, r31
    39c8:	b6 fe       	sbrs	r11, 6
    39ca:	0b c0       	rjmp	.+22     	; 0x39e2 <vfprintf+0x2ce>
    39cc:	2e ef       	ldi	r18, 0xFE	; 254
    39ce:	b2 22       	and	r11, r18
    39d0:	7e 14       	cp	r7, r14
    39d2:	38 f4       	brcc	.+14     	; 0x39e2 <vfprintf+0x2ce>
    39d4:	b4 fe       	sbrs	r11, 4
    39d6:	07 c0       	rjmp	.+14     	; 0x39e6 <vfprintf+0x2d2>
    39d8:	b2 fc       	sbrc	r11, 2
    39da:	05 c0       	rjmp	.+10     	; 0x39e6 <vfprintf+0x2d2>
    39dc:	8f ee       	ldi	r24, 0xEF	; 239
    39de:	b8 22       	and	r11, r24
    39e0:	02 c0       	rjmp	.+4      	; 0x39e6 <vfprintf+0x2d2>
    39e2:	a7 2c       	mov	r10, r7
    39e4:	01 c0       	rjmp	.+2      	; 0x39e8 <vfprintf+0x2d4>
    39e6:	ae 2c       	mov	r10, r14
    39e8:	8b 2d       	mov	r24, r11
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	b4 fe       	sbrs	r11, 4
    39ee:	0d c0       	rjmp	.+26     	; 0x3a0a <vfprintf+0x2f6>
    39f0:	fe 01       	movw	r30, r28
    39f2:	e7 0d       	add	r30, r7
    39f4:	f1 1d       	adc	r31, r1
    39f6:	20 81       	ld	r18, Z
    39f8:	20 33       	cpi	r18, 0x30	; 48
    39fa:	19 f4       	brne	.+6      	; 0x3a02 <vfprintf+0x2ee>
    39fc:	e9 ee       	ldi	r30, 0xE9	; 233
    39fe:	be 22       	and	r11, r30
    3a00:	09 c0       	rjmp	.+18     	; 0x3a14 <vfprintf+0x300>
    3a02:	a3 94       	inc	r10
    3a04:	b2 fe       	sbrs	r11, 2
    3a06:	06 c0       	rjmp	.+12     	; 0x3a14 <vfprintf+0x300>
    3a08:	04 c0       	rjmp	.+8      	; 0x3a12 <vfprintf+0x2fe>
    3a0a:	86 78       	andi	r24, 0x86	; 134
    3a0c:	90 70       	andi	r25, 0x00	; 0
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	09 f0       	breq	.+2      	; 0x3a14 <vfprintf+0x300>
    3a12:	a3 94       	inc	r10
    3a14:	8b 2c       	mov	r8, r11
    3a16:	99 24       	eor	r9, r9
    3a18:	b3 fc       	sbrc	r11, 3
    3a1a:	14 c0       	rjmp	.+40     	; 0x3a44 <vfprintf+0x330>
    3a1c:	b0 fe       	sbrs	r11, 0
    3a1e:	0f c0       	rjmp	.+30     	; 0x3a3e <vfprintf+0x32a>
    3a20:	af 14       	cp	r10, r15
    3a22:	28 f4       	brcc	.+10     	; 0x3a2e <vfprintf+0x31a>
    3a24:	e7 2c       	mov	r14, r7
    3a26:	ef 0c       	add	r14, r15
    3a28:	ea 18       	sub	r14, r10
    3a2a:	af 2c       	mov	r10, r15
    3a2c:	08 c0       	rjmp	.+16     	; 0x3a3e <vfprintf+0x32a>
    3a2e:	e7 2c       	mov	r14, r7
    3a30:	06 c0       	rjmp	.+12     	; 0x3a3e <vfprintf+0x32a>
    3a32:	80 e2       	ldi	r24, 0x20	; 32
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	b6 01       	movw	r22, r12
    3a38:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    3a3c:	a3 94       	inc	r10
    3a3e:	af 14       	cp	r10, r15
    3a40:	c0 f3       	brcs	.-16     	; 0x3a32 <vfprintf+0x31e>
    3a42:	04 c0       	rjmp	.+8      	; 0x3a4c <vfprintf+0x338>
    3a44:	af 14       	cp	r10, r15
    3a46:	10 f4       	brcc	.+4      	; 0x3a4c <vfprintf+0x338>
    3a48:	fa 18       	sub	r15, r10
    3a4a:	01 c0       	rjmp	.+2      	; 0x3a4e <vfprintf+0x33a>
    3a4c:	ff 24       	eor	r15, r15
    3a4e:	84 fe       	sbrs	r8, 4
    3a50:	0f c0       	rjmp	.+30     	; 0x3a70 <vfprintf+0x35c>
    3a52:	80 e3       	ldi	r24, 0x30	; 48
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	b6 01       	movw	r22, r12
    3a58:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    3a5c:	82 fe       	sbrs	r8, 2
    3a5e:	1f c0       	rjmp	.+62     	; 0x3a9e <vfprintf+0x38a>
    3a60:	81 fe       	sbrs	r8, 1
    3a62:	03 c0       	rjmp	.+6      	; 0x3a6a <vfprintf+0x356>
    3a64:	88 e5       	ldi	r24, 0x58	; 88
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	10 c0       	rjmp	.+32     	; 0x3a8a <vfprintf+0x376>
    3a6a:	88 e7       	ldi	r24, 0x78	; 120
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	0d c0       	rjmp	.+26     	; 0x3a8a <vfprintf+0x376>
    3a70:	c4 01       	movw	r24, r8
    3a72:	86 78       	andi	r24, 0x86	; 134
    3a74:	90 70       	andi	r25, 0x00	; 0
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	91 f0       	breq	.+36     	; 0x3a9e <vfprintf+0x38a>
    3a7a:	81 fc       	sbrc	r8, 1
    3a7c:	02 c0       	rjmp	.+4      	; 0x3a82 <vfprintf+0x36e>
    3a7e:	80 e2       	ldi	r24, 0x20	; 32
    3a80:	01 c0       	rjmp	.+2      	; 0x3a84 <vfprintf+0x370>
    3a82:	8b e2       	ldi	r24, 0x2B	; 43
    3a84:	b7 fc       	sbrc	r11, 7
    3a86:	8d e2       	ldi	r24, 0x2D	; 45
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	b6 01       	movw	r22, r12
    3a8c:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    3a90:	06 c0       	rjmp	.+12     	; 0x3a9e <vfprintf+0x38a>
    3a92:	80 e3       	ldi	r24, 0x30	; 48
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	b6 01       	movw	r22, r12
    3a98:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    3a9c:	ea 94       	dec	r14
    3a9e:	7e 14       	cp	r7, r14
    3aa0:	c0 f3       	brcs	.-16     	; 0x3a92 <vfprintf+0x37e>
    3aa2:	7a 94       	dec	r7
    3aa4:	f2 01       	movw	r30, r4
    3aa6:	e7 0d       	add	r30, r7
    3aa8:	f1 1d       	adc	r31, r1
    3aaa:	80 81       	ld	r24, Z
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	b6 01       	movw	r22, r12
    3ab0:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    3ab4:	77 20       	and	r7, r7
    3ab6:	a9 f7       	brne	.-22     	; 0x3aa2 <vfprintf+0x38e>
    3ab8:	06 c0       	rjmp	.+12     	; 0x3ac6 <vfprintf+0x3b2>
    3aba:	80 e2       	ldi	r24, 0x20	; 32
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	b6 01       	movw	r22, r12
    3ac0:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <fputc>
    3ac4:	fa 94       	dec	r15
    3ac6:	ff 20       	and	r15, r15
    3ac8:	c1 f7       	brne	.-16     	; 0x3aba <vfprintf+0x3a6>
    3aca:	37 ce       	rjmp	.-914    	; 0x373a <vfprintf+0x26>
    3acc:	f6 01       	movw	r30, r12
    3ace:	26 81       	ldd	r18, Z+6	; 0x06
    3ad0:	37 81       	ldd	r19, Z+7	; 0x07
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <vfprintf+0x3c4>
    3ad4:	2f ef       	ldi	r18, 0xFF	; 255
    3ad6:	3f ef       	ldi	r19, 0xFF	; 255
    3ad8:	c9 01       	movw	r24, r18
    3ada:	2c 96       	adiw	r28, 0x0c	; 12
    3adc:	e2 e1       	ldi	r30, 0x12	; 18
    3ade:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__epilogue_restores__>

00003ae2 <__eerd_block_m168>:
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22

00003ae6 <__eerd_blraw_m168>:
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	f9 99       	sbic	0x1f, 1	; 31
    3aea:	fe cf       	rjmp	.-4      	; 0x3ae8 <__eerd_blraw_m168+0x2>
    3aec:	06 c0       	rjmp	.+12     	; 0x3afa <__eerd_blraw_m168+0x14>
    3aee:	f2 bd       	out	0x22, r31	; 34
    3af0:	e1 bd       	out	0x21, r30	; 33
    3af2:	f8 9a       	sbi	0x1f, 0	; 31
    3af4:	31 96       	adiw	r30, 0x01	; 1
    3af6:	00 b4       	in	r0, 0x20	; 32
    3af8:	0d 92       	st	X+, r0
    3afa:	41 50       	subi	r20, 0x01	; 1
    3afc:	50 40       	sbci	r21, 0x00	; 0
    3afe:	b8 f7       	brcc	.-18     	; 0x3aee <__eerd_blraw_m168+0x8>
    3b00:	08 95       	ret

00003b02 <__eerd_byte_m168>:
    3b02:	f9 99       	sbic	0x1f, 1	; 31
    3b04:	fe cf       	rjmp	.-4      	; 0x3b02 <__eerd_byte_m168>
    3b06:	92 bd       	out	0x22, r25	; 34
    3b08:	81 bd       	out	0x21, r24	; 33
    3b0a:	f8 9a       	sbi	0x1f, 0	; 31
    3b0c:	99 27       	eor	r25, r25
    3b0e:	80 b5       	in	r24, 0x20	; 32
    3b10:	08 95       	ret

00003b12 <__eeupd_block_m168>:
    3b12:	dc 01       	movw	r26, r24
    3b14:	a4 0f       	add	r26, r20
    3b16:	b5 1f       	adc	r27, r21
    3b18:	41 50       	subi	r20, 0x01	; 1
    3b1a:	50 40       	sbci	r21, 0x00	; 0
    3b1c:	48 f0       	brcs	.+18     	; 0x3b30 <__eeupd_block_m168+0x1e>
    3b1e:	cb 01       	movw	r24, r22
    3b20:	84 0f       	add	r24, r20
    3b22:	95 1f       	adc	r25, r21
    3b24:	2e 91       	ld	r18, -X
    3b26:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__eeupd_r18_m168>
    3b2a:	41 50       	subi	r20, 0x01	; 1
    3b2c:	50 40       	sbci	r21, 0x00	; 0
    3b2e:	d0 f7       	brcc	.-12     	; 0x3b24 <__eeupd_block_m168+0x12>
    3b30:	08 95       	ret

00003b32 <__eeupd_byte_m168>:
    3b32:	26 2f       	mov	r18, r22

00003b34 <__eeupd_r18_m168>:
    3b34:	f9 99       	sbic	0x1f, 1	; 31
    3b36:	fe cf       	rjmp	.-4      	; 0x3b34 <__eeupd_r18_m168>
    3b38:	92 bd       	out	0x22, r25	; 34
    3b3a:	81 bd       	out	0x21, r24	; 33
    3b3c:	f8 9a       	sbi	0x1f, 0	; 31
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	00 b4       	in	r0, 0x20	; 32
    3b42:	02 16       	cp	r0, r18
    3b44:	39 f0       	breq	.+14     	; 0x3b54 <__eeupd_r18_m168+0x20>
    3b46:	1f ba       	out	0x1f, r1	; 31
    3b48:	20 bd       	out	0x20, r18	; 32
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	fa 9a       	sbi	0x1f, 2	; 31
    3b50:	f9 9a       	sbi	0x1f, 1	; 31
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	08 95       	ret

00003b56 <__eewr_byte_m168>:
    3b56:	26 2f       	mov	r18, r22

00003b58 <__eewr_r18_m168>:
    3b58:	f9 99       	sbic	0x1f, 1	; 31
    3b5a:	fe cf       	rjmp	.-4      	; 0x3b58 <__eewr_r18_m168>
    3b5c:	1f ba       	out	0x1f, r1	; 31
    3b5e:	92 bd       	out	0x22, r25	; 34
    3b60:	81 bd       	out	0x21, r24	; 33
    3b62:	20 bd       	out	0x20, r18	; 32
    3b64:	0f b6       	in	r0, 0x3f	; 63
    3b66:	f8 94       	cli
    3b68:	fa 9a       	sbi	0x1f, 2	; 31
    3b6a:	f9 9a       	sbi	0x1f, 1	; 31
    3b6c:	0f be       	out	0x3f, r0	; 63
    3b6e:	01 96       	adiw	r24, 0x01	; 1
    3b70:	08 95       	ret

00003b72 <strnlen_P>:
    3b72:	fc 01       	movw	r30, r24
    3b74:	05 90       	lpm	r0, Z+
    3b76:	61 50       	subi	r22, 0x01	; 1
    3b78:	70 40       	sbci	r23, 0x00	; 0
    3b7a:	01 10       	cpse	r0, r1
    3b7c:	d8 f7       	brcc	.-10     	; 0x3b74 <strnlen_P+0x2>
    3b7e:	80 95       	com	r24
    3b80:	90 95       	com	r25
    3b82:	8e 0f       	add	r24, r30
    3b84:	9f 1f       	adc	r25, r31
    3b86:	08 95       	ret

00003b88 <strnlen>:
    3b88:	fc 01       	movw	r30, r24
    3b8a:	61 50       	subi	r22, 0x01	; 1
    3b8c:	70 40       	sbci	r23, 0x00	; 0
    3b8e:	01 90       	ld	r0, Z+
    3b90:	01 10       	cpse	r0, r1
    3b92:	d8 f7       	brcc	.-10     	; 0x3b8a <strnlen+0x2>
    3b94:	80 95       	com	r24
    3b96:	90 95       	com	r25
    3b98:	8e 0f       	add	r24, r30
    3b9a:	9f 1f       	adc	r25, r31
    3b9c:	08 95       	ret

00003b9e <fputc>:
    3b9e:	0f 93       	push	r16
    3ba0:	1f 93       	push	r17
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	8c 01       	movw	r16, r24
    3ba8:	eb 01       	movw	r28, r22
    3baa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bac:	81 ff       	sbrs	r24, 1
    3bae:	1b c0       	rjmp	.+54     	; 0x3be6 <fputc+0x48>
    3bb0:	82 ff       	sbrs	r24, 2
    3bb2:	0d c0       	rjmp	.+26     	; 0x3bce <fputc+0x30>
    3bb4:	2e 81       	ldd	r18, Y+6	; 0x06
    3bb6:	3f 81       	ldd	r19, Y+7	; 0x07
    3bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bba:	9d 81       	ldd	r25, Y+5	; 0x05
    3bbc:	28 17       	cp	r18, r24
    3bbe:	39 07       	cpc	r19, r25
    3bc0:	64 f4       	brge	.+24     	; 0x3bda <fputc+0x3c>
    3bc2:	e8 81       	ld	r30, Y
    3bc4:	f9 81       	ldd	r31, Y+1	; 0x01
    3bc6:	01 93       	st	Z+, r16
    3bc8:	f9 83       	std	Y+1, r31	; 0x01
    3bca:	e8 83       	st	Y, r30
    3bcc:	06 c0       	rjmp	.+12     	; 0x3bda <fputc+0x3c>
    3bce:	e8 85       	ldd	r30, Y+8	; 0x08
    3bd0:	f9 85       	ldd	r31, Y+9	; 0x09
    3bd2:	80 2f       	mov	r24, r16
    3bd4:	09 95       	icall
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	31 f4       	brne	.+12     	; 0x3be6 <fputc+0x48>
    3bda:	8e 81       	ldd	r24, Y+6	; 0x06
    3bdc:	9f 81       	ldd	r25, Y+7	; 0x07
    3bde:	01 96       	adiw	r24, 0x01	; 1
    3be0:	9f 83       	std	Y+7, r25	; 0x07
    3be2:	8e 83       	std	Y+6, r24	; 0x06
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <fputc+0x4c>
    3be6:	0f ef       	ldi	r16, 0xFF	; 255
    3be8:	1f ef       	ldi	r17, 0xFF	; 255
    3bea:	c8 01       	movw	r24, r16
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	1f 91       	pop	r17
    3bf2:	0f 91       	pop	r16
    3bf4:	08 95       	ret

00003bf6 <__ultoa_invert>:
    3bf6:	fa 01       	movw	r30, r20
    3bf8:	aa 27       	eor	r26, r26
    3bfa:	28 30       	cpi	r18, 0x08	; 8
    3bfc:	51 f1       	breq	.+84     	; 0x3c52 <__ultoa_invert+0x5c>
    3bfe:	20 31       	cpi	r18, 0x10	; 16
    3c00:	81 f1       	breq	.+96     	; 0x3c62 <__ultoa_invert+0x6c>
    3c02:	e8 94       	clt
    3c04:	6f 93       	push	r22
    3c06:	6e 7f       	andi	r22, 0xFE	; 254
    3c08:	6e 5f       	subi	r22, 0xFE	; 254
    3c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c10:	af 4f       	sbci	r26, 0xFF	; 255
    3c12:	b1 e0       	ldi	r27, 0x01	; 1
    3c14:	3e d0       	rcall	.+124    	; 0x3c92 <__ultoa_invert+0x9c>
    3c16:	b4 e0       	ldi	r27, 0x04	; 4
    3c18:	3c d0       	rcall	.+120    	; 0x3c92 <__ultoa_invert+0x9c>
    3c1a:	67 0f       	add	r22, r23
    3c1c:	78 1f       	adc	r23, r24
    3c1e:	89 1f       	adc	r24, r25
    3c20:	9a 1f       	adc	r25, r26
    3c22:	a1 1d       	adc	r26, r1
    3c24:	68 0f       	add	r22, r24
    3c26:	79 1f       	adc	r23, r25
    3c28:	8a 1f       	adc	r24, r26
    3c2a:	91 1d       	adc	r25, r1
    3c2c:	a1 1d       	adc	r26, r1
    3c2e:	6a 0f       	add	r22, r26
    3c30:	71 1d       	adc	r23, r1
    3c32:	81 1d       	adc	r24, r1
    3c34:	91 1d       	adc	r25, r1
    3c36:	a1 1d       	adc	r26, r1
    3c38:	20 d0       	rcall	.+64     	; 0x3c7a <__ultoa_invert+0x84>
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <__ultoa_invert+0x48>
    3c3c:	68 94       	set
    3c3e:	3f 91       	pop	r19
    3c40:	2a e0       	ldi	r18, 0x0A	; 10
    3c42:	26 9f       	mul	r18, r22
    3c44:	11 24       	eor	r1, r1
    3c46:	30 19       	sub	r19, r0
    3c48:	30 5d       	subi	r19, 0xD0	; 208
    3c4a:	31 93       	st	Z+, r19
    3c4c:	de f6       	brtc	.-74     	; 0x3c04 <__ultoa_invert+0xe>
    3c4e:	cf 01       	movw	r24, r30
    3c50:	08 95       	ret
    3c52:	46 2f       	mov	r20, r22
    3c54:	47 70       	andi	r20, 0x07	; 7
    3c56:	40 5d       	subi	r20, 0xD0	; 208
    3c58:	41 93       	st	Z+, r20
    3c5a:	b3 e0       	ldi	r27, 0x03	; 3
    3c5c:	0f d0       	rcall	.+30     	; 0x3c7c <__ultoa_invert+0x86>
    3c5e:	c9 f7       	brne	.-14     	; 0x3c52 <__ultoa_invert+0x5c>
    3c60:	f6 cf       	rjmp	.-20     	; 0x3c4e <__ultoa_invert+0x58>
    3c62:	46 2f       	mov	r20, r22
    3c64:	4f 70       	andi	r20, 0x0F	; 15
    3c66:	40 5d       	subi	r20, 0xD0	; 208
    3c68:	4a 33       	cpi	r20, 0x3A	; 58
    3c6a:	18 f0       	brcs	.+6      	; 0x3c72 <__ultoa_invert+0x7c>
    3c6c:	49 5d       	subi	r20, 0xD9	; 217
    3c6e:	31 fd       	sbrc	r19, 1
    3c70:	40 52       	subi	r20, 0x20	; 32
    3c72:	41 93       	st	Z+, r20
    3c74:	02 d0       	rcall	.+4      	; 0x3c7a <__ultoa_invert+0x84>
    3c76:	a9 f7       	brne	.-22     	; 0x3c62 <__ultoa_invert+0x6c>
    3c78:	ea cf       	rjmp	.-44     	; 0x3c4e <__ultoa_invert+0x58>
    3c7a:	b4 e0       	ldi	r27, 0x04	; 4
    3c7c:	a6 95       	lsr	r26
    3c7e:	97 95       	ror	r25
    3c80:	87 95       	ror	r24
    3c82:	77 95       	ror	r23
    3c84:	67 95       	ror	r22
    3c86:	ba 95       	dec	r27
    3c88:	c9 f7       	brne	.-14     	; 0x3c7c <__ultoa_invert+0x86>
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	61 05       	cpc	r22, r1
    3c8e:	71 05       	cpc	r23, r1
    3c90:	08 95       	ret
    3c92:	9b 01       	movw	r18, r22
    3c94:	ac 01       	movw	r20, r24
    3c96:	0a 2e       	mov	r0, r26
    3c98:	06 94       	lsr	r0
    3c9a:	57 95       	ror	r21
    3c9c:	47 95       	ror	r20
    3c9e:	37 95       	ror	r19
    3ca0:	27 95       	ror	r18
    3ca2:	ba 95       	dec	r27
    3ca4:	c9 f7       	brne	.-14     	; 0x3c98 <__ultoa_invert+0xa2>
    3ca6:	62 0f       	add	r22, r18
    3ca8:	73 1f       	adc	r23, r19
    3caa:	84 1f       	adc	r24, r20
    3cac:	95 1f       	adc	r25, r21
    3cae:	a0 1d       	adc	r26, r0
    3cb0:	08 95       	ret

00003cb2 <__prologue_saves__>:
    3cb2:	2f 92       	push	r2
    3cb4:	3f 92       	push	r3
    3cb6:	4f 92       	push	r4
    3cb8:	5f 92       	push	r5
    3cba:	6f 92       	push	r6
    3cbc:	7f 92       	push	r7
    3cbe:	8f 92       	push	r8
    3cc0:	9f 92       	push	r9
    3cc2:	af 92       	push	r10
    3cc4:	bf 92       	push	r11
    3cc6:	cf 92       	push	r12
    3cc8:	df 92       	push	r13
    3cca:	ef 92       	push	r14
    3ccc:	ff 92       	push	r15
    3cce:	0f 93       	push	r16
    3cd0:	1f 93       	push	r17
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
    3cda:	ca 1b       	sub	r28, r26
    3cdc:	db 0b       	sbc	r29, r27
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	de bf       	out	0x3e, r29	; 62
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	cd bf       	out	0x3d, r28	; 61
    3ce8:	09 94       	ijmp

00003cea <__epilogue_restores__>:
    3cea:	2a 88       	ldd	r2, Y+18	; 0x12
    3cec:	39 88       	ldd	r3, Y+17	; 0x11
    3cee:	48 88       	ldd	r4, Y+16	; 0x10
    3cf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cfc:	b9 84       	ldd	r11, Y+9	; 0x09
    3cfe:	c8 84       	ldd	r12, Y+8	; 0x08
    3d00:	df 80       	ldd	r13, Y+7	; 0x07
    3d02:	ee 80       	ldd	r14, Y+6	; 0x06
    3d04:	fd 80       	ldd	r15, Y+5	; 0x05
    3d06:	0c 81       	ldd	r16, Y+4	; 0x04
    3d08:	1b 81       	ldd	r17, Y+3	; 0x03
    3d0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3d0c:	b9 81       	ldd	r27, Y+1	; 0x01
    3d0e:	ce 0f       	add	r28, r30
    3d10:	d1 1d       	adc	r29, r1
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	f8 94       	cli
    3d16:	de bf       	out	0x3e, r29	; 62
    3d18:	0f be       	out	0x3f, r0	; 63
    3d1a:	cd bf       	out	0x3d, r28	; 61
    3d1c:	ed 01       	movw	r28, r26
    3d1e:	08 95       	ret

00003d20 <_exit>:
    3d20:	f8 94       	cli

00003d22 <__stop_program>:
    3d22:	ff cf       	rjmp	.-2      	; 0x3d22 <__stop_program>
