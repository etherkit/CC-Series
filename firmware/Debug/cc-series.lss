
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00003e0e  00003ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e0e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000af  00800132  00800132  00003ef4  2**0
                  ALLOC
  3 .eeprom       00000029  00810000  00810000  00003ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005c34  00000000  00000000  00003f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000023ab  00000000  00000000  00009b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_16>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	ee e0       	ldi	r30, 0x0E	; 14
     1b8:	fe e3       	ldi	r31, 0x3E	; 62
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a2 33       	cpi	r26, 0x32	; 50
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	a2 e3       	ldi	r26, 0x32	; 50
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a1 3e       	cpi	r26, 0xE1	; 225
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 93 0a 	call	0x1526	; 0x1526 <main>
     1da:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_16>:
// Timer0 ISR
//
// Timer0 does double duty as the PWM register and also as the sinewave generator during the
// overflow ISR.
ISR(TIMER0_OVF_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_16+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 32 01 	lds	r24, 0x0132
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_16+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_16+0xae>
	{
		//SIDETONE_DDR |= _BV(SIDETONE);

		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 96 01 	lds	r18, 0x0196
     21c:	30 91 97 01 	lds	r19, 0x0197
     220:	40 91 98 01 	lds	r20, 0x0198
     224:	50 91 99 01 	lds	r21, 0x0199
     228:	80 91 a8 01 	lds	r24, 0x01A8
     22c:	90 91 a9 01 	lds	r25, 0x01A9
     230:	a0 91 aa 01 	lds	r26, 0x01AA
     234:	b0 91 ab 01 	lds	r27, 0x01AB
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 96 01 	sts	0x0196, r24
     244:	90 93 97 01 	sts	0x0197, r25
     248:	a0 93 98 01 	sts	0x0198, r26
     24c:	b0 93 99 01 	sts	0x0199, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 96 01 	lds	r24, 0x0196
     254:	90 91 97 01 	lds	r25, 0x0197
     258:	a0 91 98 01 	lds	r26, 0x0198
     25c:	b0 91 99 01 	lds	r27, 0x0199
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 64 01 	sts	0x0164, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 64 01 	lds	r18, 0x0164
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
		// Hi-Z the port when not using
		SIDETONE_DDR &= ~(_BV(SIDETONE));
		OCR0A = 0;
	}
	*/
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(((timer > mute_start) && (timer < mute_end)) || (mute_on == TRUE))
     2e4:	20 91 66 01 	lds	r18, 0x0166
     2e8:	30 91 67 01 	lds	r19, 0x0167
     2ec:	40 91 68 01 	lds	r20, 0x0168
     2f0:	50 91 69 01 	lds	r21, 0x0169
     2f4:	80 91 d1 01 	lds	r24, 0x01D1
     2f8:	90 91 d2 01 	lds	r25, 0x01D2
     2fc:	a0 91 d3 01 	lds	r26, 0x01D3
     300:	b0 91 d4 01 	lds	r27, 0x01D4
     304:	82 17       	cp	r24, r18
     306:	93 07       	cpc	r25, r19
     308:	a4 07       	cpc	r26, r20
     30a:	b5 07       	cpc	r27, r21
     30c:	a8 f4       	brcc	.+42     	; 0x338 <__vector_7+0x7e>
     30e:	20 91 66 01 	lds	r18, 0x0166
     312:	30 91 67 01 	lds	r19, 0x0167
     316:	40 91 68 01 	lds	r20, 0x0168
     31a:	50 91 69 01 	lds	r21, 0x0169
     31e:	80 91 c6 01 	lds	r24, 0x01C6
     322:	90 91 c7 01 	lds	r25, 0x01C7
     326:	a0 91 c8 01 	lds	r26, 0x01C8
     32a:	b0 91 c9 01 	lds	r27, 0x01C9
     32e:	28 17       	cp	r18, r24
     330:	39 07       	cpc	r19, r25
     332:	4a 07       	cpc	r20, r26
     334:	5b 07       	cpc	r21, r27
     336:	20 f0       	brcs	.+8      	; 0x340 <__vector_7+0x86>
     338:	80 91 33 01 	lds	r24, 0x0133
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	51 f4       	brne	.+20     	; 0x354 <__vector_7+0x9a>
		MUTE_PORT |= _BV(MUTE);
     340:	88 e2       	ldi	r24, 0x28	; 40
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	28 e2       	ldi	r18, 0x28	; 40
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	f9 01       	movw	r30, r18
     34a:	20 81       	ld	r18, Z
     34c:	20 62       	ori	r18, 0x20	; 32
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
     352:	09 c0       	rjmp	.+18     	; 0x366 <__vector_7+0xac>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     354:	88 e2       	ldi	r24, 0x28	; 40
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	28 e2       	ldi	r18, 0x28	; 40
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	f9 01       	movw	r30, r18
     35e:	20 81       	ld	r18, Z
     360:	2f 7d       	andi	r18, 0xDF	; 223
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
	else
		set_dds_freq_reg(REG_0);
		*/

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     366:	80 91 34 01 	lds	r24, 0x0134
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	d9 f5       	brne	.+118    	; 0x3e4 <__vector_7+0x12a>
     36e:	20 91 66 01 	lds	r18, 0x0166
     372:	30 91 67 01 	lds	r19, 0x0167
     376:	40 91 68 01 	lds	r20, 0x0168
     37a:	50 91 69 01 	lds	r21, 0x0169
     37e:	80 91 d7 01 	lds	r24, 0x01D7
     382:	90 91 d8 01 	lds	r25, 0x01D8
     386:	a0 91 d9 01 	lds	r26, 0x01D9
     38a:	b0 91 da 01 	lds	r27, 0x01DA
     38e:	28 17       	cp	r18, r24
     390:	39 07       	cpc	r19, r25
     392:	4a 07       	cpc	r20, r26
     394:	5b 07       	cpc	r21, r27
     396:	30 f5       	brcc	.+76     	; 0x3e4 <__vector_7+0x12a>
     398:	20 91 66 01 	lds	r18, 0x0166
     39c:	30 91 67 01 	lds	r19, 0x0167
     3a0:	40 91 68 01 	lds	r20, 0x0168
     3a4:	50 91 69 01 	lds	r21, 0x0169
     3a8:	80 91 a0 01 	lds	r24, 0x01A0
     3ac:	90 91 a1 01 	lds	r25, 0x01A1
     3b0:	a0 91 a2 01 	lds	r26, 0x01A2
     3b4:	b0 91 a3 01 	lds	r27, 0x01A3
     3b8:	82 17       	cp	r24, r18
     3ba:	93 07       	cpc	r25, r19
     3bc:	a4 07       	cpc	r26, r20
     3be:	b5 07       	cpc	r27, r21
     3c0:	88 f4       	brcc	.+34     	; 0x3e4 <__vector_7+0x12a>
	{
		if(rit_enable == TRUE)
     3c2:	80 91 dc 01 	lds	r24, 0x01DC
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	19 f4       	brne	.+6      	; 0x3d0 <__vector_7+0x116>
			set_dds_freq_reg(REG_1);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     3d0:	88 e2       	ldi	r24, 0x28	; 40
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	28 e2       	ldi	r18, 0x28	; 40
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	20 61       	ori	r18, 0x10	; 16
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
     3e2:	0c c0       	rjmp	.+24     	; 0x3fc <__vector_7+0x142>
	}
	else
	{
		set_dds_freq_reg(REG_0);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     3ea:	88 e2       	ldi	r24, 0x28	; 40
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	28 e2       	ldi	r18, 0x28	; 40
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	f9 01       	movw	r30, r18
     3f4:	20 81       	ld	r18, Z
     3f6:	2f 7e       	andi	r18, 0xEF	; 239
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
	}

	debounce(FALSE);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 0d 04 	call	0x81a	; 0x81a <debounce>

	// Need to consider timer overflow?
	timer++;
     402:	80 91 66 01 	lds	r24, 0x0166
     406:	90 91 67 01 	lds	r25, 0x0167
     40a:	a0 91 68 01 	lds	r26, 0x0168
     40e:	b0 91 69 01 	lds	r27, 0x0169
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	80 93 66 01 	sts	0x0166, r24
     41c:	90 93 67 01 	sts	0x0167, r25
     420:	a0 93 68 01 	sts	0x0168, r26
     424:	b0 93 69 01 	sts	0x0169, r27
}
     428:	cf 91       	pop	r28
     42a:	df 91       	pop	r29
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     46c:	88 e6       	ldi	r24, 0x68	; 104
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	fc 01       	movw	r30, r24
     472:	10 82       	st	Z, r1

	cur_mode = default_mode;
     474:	80 91 65 01 	lds	r24, 0x0165
     478:	80 93 9a 01 	sts	0x019A, r24
	cur_state = IDLE;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 bc 01 	sts	0x01BC, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 20;
     482:	80 91 60 01 	lds	r24, 0x0160
     486:	90 91 61 01 	lds	r25, 0x0161
     48a:	a0 91 62 01 	lds	r26, 0x0162
     48e:	b0 91 63 01 	lds	r27, 0x0163
     492:	44 96       	adiw	r24, 0x14	; 20
     494:	a1 1d       	adc	r26, r1
     496:	b1 1d       	adc	r27, r1
     498:	80 93 c2 01 	sts	0x01C2, r24
     49c:	90 93 c3 01 	sts	0x01C3, r25
     4a0:	a0 93 c4 01 	sts	0x01C4, r26
     4a4:	b0 93 c5 01 	sts	0x01C5, r27
	//mute_on = TRUE;
}
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <init>:

void init(void)
{
     4c2:	df 93       	push	r29
     4c4:	cf 93       	push	r28
     4c6:	0f 92       	push	r0
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     4cc:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     4ce:	81 e6       	ldi	r24, 0x61	; 97
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	20 e8       	ldi	r18, 0x80	; 128
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
	CLKPR = 0;
     4d8:	81 e6       	ldi	r24, 0x61	; 97
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     4e0:	84 e4       	ldi	r24, 0x44	; 68
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	21 e8       	ldi	r18, 0x81	; 129
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     4ea:	85 e4       	ldi	r24, 0x45	; 69
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
	TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt
     4f4:	8e e6       	ldi	r24, 0x6E	; 110
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	2e e6       	ldi	r18, 0x6E	; 110
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	f9 01       	movw	r30, r18
     4fe:	20 81       	ld	r18, Z
     500:	21 60       	ori	r18, 0x01	; 1
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     506:	80 eb       	ldi	r24, 0xB0	; 176
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	22 e0       	ldi	r18, 0x02	; 2
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     510:	81 eb       	ldi	r24, 0xB1	; 177
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	24 e0       	ldi	r18, 0x04	; 4
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     51a:	80 e7       	ldi	r24, 0x70	; 112
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	20 e7       	ldi	r18, 0x70	; 112
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	f9 01       	movw	r30, r18
     524:	20 81       	ld	r18, Z
     526:	22 60       	ori	r18, 0x02	; 2
     528:	fc 01       	movw	r30, r24
     52a:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     52c:	83 eb       	ldi	r24, 0xB3	; 179
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	29 ef       	ldi	r18, 0xF9	; 249
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     536:	8a e7       	ldi	r24, 0x7A	; 122
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	2a e7       	ldi	r18, 0x7A	; 122
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	f9 01       	movw	r30, r18
     540:	20 81       	ld	r18, Z
     542:	24 68       	ori	r18, 0x84	; 132
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     548:	8c e7       	ldi	r24, 0x7C	; 124
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	20 e6       	ldi	r18, 0x60	; 96
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     552:	8b e6       	ldi	r24, 0x6B	; 107
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	21 e0       	ldi	r18, 0x01	; 1
     558:	fc 01       	movw	r30, r24
     55a:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) | _BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     55c:	8d e6       	ldi	r24, 0x6D	; 109
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	2f e9       	ldi	r18, 0x9F	; 159
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     566:	8a e2       	ldi	r24, 0x2A	; 42
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	2a e2       	ldi	r18, 0x2A	; 42
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	20 64       	ori	r18, 0x40	; 64
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     578:	87 e2       	ldi	r24, 0x27	; 39
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	27 e2       	ldi	r18, 0x27	; 39
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	f9 01       	movw	r30, r18
     582:	20 81       	ld	r18, Z
     584:	20 62       	ori	r18, 0x20	; 32
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     58a:	87 e2       	ldi	r24, 0x27	; 39
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	27 e2       	ldi	r18, 0x27	; 39
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	f9 01       	movw	r30, r18
     594:	20 81       	ld	r18, Z
     596:	20 61       	ori	r18, 0x10	; 16
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     59c:	87 e2       	ldi	r24, 0x27	; 39
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	27 e2       	ldi	r18, 0x27	; 39
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	f9 01       	movw	r30, r18
     5a6:	20 81       	ld	r18, Z
     5a8:	2d 7f       	andi	r18, 0xFD	; 253
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     5ae:	88 e2       	ldi	r24, 0x28	; 40
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	28 e2       	ldi	r18, 0x28	; 40
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	2d 7f       	andi	r18, 0xFD	; 253
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     5c0:	8a e2       	ldi	r24, 0x2A	; 42
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	2a e2       	ldi	r18, 0x2A	; 42
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	20 81       	ld	r18, Z
     5cc:	27 7f       	andi	r18, 0xF7	; 247
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     5d2:	8b e2       	ldi	r24, 0x2B	; 43
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	2b e2       	ldi	r18, 0x2B	; 43
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	f9 01       	movw	r30, r18
     5dc:	20 81       	ld	r18, Z
     5de:	28 60       	ori	r18, 0x08	; 8
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     5e4:	8a e2       	ldi	r24, 0x2A	; 42
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	2a e2       	ldi	r18, 0x2A	; 42
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	f9 01       	movw	r30, r18
     5ee:	20 81       	ld	r18, Z
     5f0:	2f 7e       	andi	r18, 0xEF	; 239
     5f2:	fc 01       	movw	r30, r24
     5f4:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     5f6:	8b e2       	ldi	r24, 0x2B	; 43
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	2b e2       	ldi	r18, 0x2B	; 43
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	f9 01       	movw	r30, r18
     600:	20 81       	ld	r18, Z
     602:	20 61       	ori	r18, 0x10	; 16
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     608:	8a e2       	ldi	r24, 0x2A	; 42
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	2a e2       	ldi	r18, 0x2A	; 42
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	f9 01       	movw	r30, r18
     612:	20 81       	ld	r18, Z
     614:	2b 7f       	andi	r18, 0xFB	; 251
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     61a:	8b e2       	ldi	r24, 0x2B	; 43
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	2b e2       	ldi	r18, 0x2B	; 43
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	f9 01       	movw	r30, r18
     624:	20 81       	ld	r18, Z
     626:	24 60       	ori	r18, 0x04	; 4
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     62c:	8a e2       	ldi	r24, 0x2A	; 42
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	2a e2       	ldi	r18, 0x2A	; 42
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	2d 7f       	andi	r18, 0xFD	; 253
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     63e:	8b e2       	ldi	r24, 0x2B	; 43
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	2b e2       	ldi	r18, 0x2B	; 43
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	f9 01       	movw	r30, r18
     648:	20 81       	ld	r18, Z
     64a:	22 60       	ori	r18, 0x02	; 2
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     650:	84 e2       	ldi	r24, 0x24	; 36
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	24 e2       	ldi	r18, 0x24	; 36
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	2e 7f       	andi	r18, 0xFE	; 254
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     662:	85 e2       	ldi	r24, 0x25	; 37
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	25 e2       	ldi	r18, 0x25	; 37
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	f9 01       	movw	r30, r18
     66c:	20 81       	ld	r18, Z
     66e:	21 60       	ori	r18, 0x01	; 1
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     674:	8a e2       	ldi	r24, 0x2A	; 42
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	2a e2       	ldi	r18, 0x2A	; 42
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	20 81       	ld	r18, Z
     680:	2f 77       	andi	r18, 0x7F	; 127
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     686:	8b e2       	ldi	r24, 0x2B	; 43
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	2b e2       	ldi	r18, 0x2B	; 43
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	20 68       	ori	r18, 0x80	; 128
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     698:	8a e2       	ldi	r24, 0x2A	; 42
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	2a e2       	ldi	r18, 0x2A	; 42
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	2e 7f       	andi	r18, 0xFE	; 254
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     6aa:	8b e2       	ldi	r24, 0x2B	; 43
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2b e2       	ldi	r18, 0x2B	; 43
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	21 60       	ori	r18, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     6bc:	84 e2       	ldi	r24, 0x24	; 36
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	24 e2       	ldi	r18, 0x24	; 36
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	2e 62       	ori	r18, 0x2E	; 46
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     6ce:	8c e4       	ldi	r24, 0x4C	; 76
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	29 e5       	ldi	r18, 0x59	; 89
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     6d8:	8d e4       	ldi	r24, 0x4D	; 77
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	fc 01       	movw	r30, r24
     6de:	80 81       	ld	r24, Z
     6e0:	89 83       	std	Y+1, r24	; 0x01
	spi_data = SPDR;
     6e2:	8e e4       	ldi	r24, 0x4E	; 78
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	89 83       	std	Y+1, r24	; 0x01

	// Power saving
	power_twi_disable();
     6ec:	84 e6       	ldi	r24, 0x64	; 100
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	24 e6       	ldi	r18, 0x64	; 100
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	20 81       	ld	r18, Z
     6f8:	20 68       	ori	r18, 0x80	; 128
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
	power_usart0_disable();
     6fe:	84 e6       	ldi	r24, 0x64	; 100
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	24 e6       	ldi	r18, 0x64	; 100
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	f9 01       	movw	r30, r18
     708:	20 81       	ld	r18, Z
     70a:	22 60       	ori	r18, 0x02	; 2
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 6a 01 	sts	0x016A, r24
	cur_state = IDLE;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 bc 01 	sts	0x01BC, r24
	next_state = IDLE;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 9f 01 	sts	0x019F, r24

	timer = 0;
     722:	10 92 66 01 	sts	0x0166, r1
     726:	10 92 67 01 	sts	0x0167, r1
     72a:	10 92 68 01 	sts	0x0168, r1
     72e:	10 92 69 01 	sts	0x0169, r1

	eeprom_busy_wait();
     732:	8f e3       	ldi	r24, 0x3F	; 63
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	82 70       	andi	r24, 0x02	; 2
     740:	90 70       	andi	r25, 0x00	; 0
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	b1 f7       	brne	.-20     	; 0x732 <__stack+0x233>
	wpm = eeprom_read_byte(&ee_wpm);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__eerd_byte_m168>
     74e:	80 93 d0 01 	sts	0x01D0, r24
	set_wpm(wpm);
     752:	80 91 d0 01 	lds	r24, 0x01D0
     756:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_wpm>

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = 0x05111F0C;
     75a:	8c e0       	ldi	r24, 0x0C	; 12
     75c:	9f e1       	ldi	r25, 0x1F	; 31
     75e:	a1 e1       	ldi	r26, 0x11	; 17
     760:	b5 e0       	ldi	r27, 0x05	; 5
     762:	80 93 a4 01 	sts	0x01A4, r24
     766:	90 93 a5 01 	sts	0x01A5, r25
     76a:	a0 93 a6 01 	sts	0x01A6, r26
     76e:	b0 93 a7 01 	sts	0x01A7, r27
	tune_freq = 14060000;
     772:	80 ee       	ldi	r24, 0xE0	; 224
     774:	99 e8       	ldi	r25, 0x89	; 137
     776:	a6 ed       	ldi	r26, 0xD6	; 214
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	80 93 cc 01 	sts	0x01CC, r24
     77e:	90 93 cd 01 	sts	0x01CD, r25
     782:	a0 93 ce 01 	sts	0x01CE, r26
     786:	b0 93 cf 01 	sts	0x01CF, r27
	init_dds(dds_freq_word, REG_0);
     78a:	80 91 a4 01 	lds	r24, 0x01A4
     78e:	90 91 a5 01 	lds	r25, 0x01A5
     792:	a0 91 a6 01 	lds	r26, 0x01A6
     796:	b0 91 a7 01 	lds	r27, 0x01A7
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	0e 94 bd 09 	call	0x137a	; 0x137a <init_dds>
	tune_dds(dds_freq_word, REG_1);
     7a4:	80 91 a4 01 	lds	r24, 0x01A4
     7a8:	90 91 a5 01 	lds	r25, 0x01A5
     7ac:	a0 91 a6 01 	lds	r26, 0x01A6
     7b0:	b0 91 a7 01 	lds	r27, 0x01A7
     7b4:	bc 01       	movw	r22, r24
     7b6:	cd 01       	movw	r24, r26
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	0e 94 72 09 	call	0x12e4	; 0x12e4 <tune_dds>

	st_freq = ST_DEFAULT;
     7be:	88 e5       	ldi	r24, 0x58	; 88
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	90 93 b3 01 	sts	0x01B3, r25
     7c6:	80 93 b2 01 	sts	0x01B2, r24
	set_st_freq(st_freq);
     7ca:	80 91 b2 01 	lds	r24, 0x01B2
     7ce:	90 91 b3 01 	lds	r25, 0x01B3
     7d2:	cc 01       	movw	r24, r24
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	bc 01       	movw	r22, r24
     7da:	cd 01       	movw	r24, r26
     7dc:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <set_st_freq>

	// Enable interrupts
	sei();
     7e0:	78 94       	sei
}
     7e2:	0f 90       	pop	r0
     7e4:	cf 91       	pop	r28
     7e6:	df 91       	pop	r29
     7e8:	08 95       	ret

000007ea <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     7ea:	df 93       	push	r29
     7ec:	cf 93       	push	r28
     7ee:	0f 92       	push	r0
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 100 us per timer tick (dividing by 0.1 ms, so multiply by 10)
	dit_length = (1200 / new_wpm);
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	28 2f       	mov	r18, r24
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	80 eb       	ldi	r24, 0xB0	; 176
     7fe:	94 e0       	ldi	r25, 0x04	; 4
     800:	b9 01       	movw	r22, r18
     802:	0e 94 48 1a 	call	0x3490	; 0x3490 <__divmodhi4>
     806:	9b 01       	movw	r18, r22
     808:	c9 01       	movw	r24, r18
     80a:	90 93 6c 01 	sts	0x016C, r25
     80e:	80 93 6b 01 	sts	0x016B, r24
}
     812:	0f 90       	pop	r0
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <debounce>:

void debounce(enum BOOL flush)
{
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	0f 92       	push	r0
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	81 30       	cpi	r24, 0x01	; 1
     82a:	01 f5       	brne	.+64     	; 0x86c <debounce+0x52>
	{
		dit_on_count = 0;
     82c:	10 92 48 01 	sts	0x0148, r1
     830:	10 92 47 01 	sts	0x0147, r1
		dah_on_count = 0;
     834:	10 92 4a 01 	sts	0x014A, r1
     838:	10 92 49 01 	sts	0x0149, r1
		dit_off_count = 0;
     83c:	10 92 4c 01 	sts	0x014C, r1
     840:	10 92 4b 01 	sts	0x014B, r1
		dah_off_count = 0;
     844:	10 92 4e 01 	sts	0x014E, r1
     848:	10 92 4d 01 	sts	0x014D, r1
		cmd_on_count = 0;
     84c:	10 92 50 01 	sts	0x0150, r1
     850:	10 92 4f 01 	sts	0x014F, r1
		msg_on_count = 0;
     854:	10 92 52 01 	sts	0x0152, r1
     858:	10 92 51 01 	sts	0x0151, r1
		both_on_count = 0;
     85c:	10 92 54 01 	sts	0x0154, r1
     860:	10 92 53 01 	sts	0x0153, r1
		enc_on_count = 0;
     864:	10 92 56 01 	sts	0x0156, r1
     868:	10 92 55 01 	sts	0x0155, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     86c:	89 e2       	ldi	r24, 0x29	; 41
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	88 70       	andi	r24, 0x08	; 8
     87a:	90 70       	andi	r25, 0x00	; 0
     87c:	00 97       	sbiw	r24, 0x00	; 0
     87e:	a9 f4       	brne	.+42     	; 0x8aa <debounce+0x90>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     880:	80 91 47 01 	lds	r24, 0x0147
     884:	90 91 48 01 	lds	r25, 0x0148
     888:	85 30       	cpi	r24, 0x05	; 5
     88a:	91 05       	cpc	r25, r1
     88c:	48 f4       	brcc	.+18     	; 0x8a0 <debounce+0x86>
			dit_on_count++;
     88e:	80 91 47 01 	lds	r24, 0x0147
     892:	90 91 48 01 	lds	r25, 0x0148
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	90 93 48 01 	sts	0x0148, r25
     89c:	80 93 47 01 	sts	0x0147, r24
		dit_off_count = 0;
     8a0:	10 92 4c 01 	sts	0x014C, r1
     8a4:	10 92 4b 01 	sts	0x014B, r1
     8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <debounce+0xb8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     8aa:	80 91 4b 01 	lds	r24, 0x014B
     8ae:	90 91 4c 01 	lds	r25, 0x014C
     8b2:	85 30       	cpi	r24, 0x05	; 5
     8b4:	91 05       	cpc	r25, r1
     8b6:	48 f4       	brcc	.+18     	; 0x8ca <debounce+0xb0>
			dit_off_count++;
     8b8:	80 91 4b 01 	lds	r24, 0x014B
     8bc:	90 91 4c 01 	lds	r25, 0x014C
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 4c 01 	sts	0x014C, r25
     8c6:	80 93 4b 01 	sts	0x014B, r24
		dit_on_count = 0;
     8ca:	10 92 48 01 	sts	0x0148, r1
     8ce:	10 92 47 01 	sts	0x0147, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     8d2:	89 e2       	ldi	r24, 0x29	; 41
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	fc 01       	movw	r30, r24
     8d8:	80 81       	ld	r24, Z
     8da:	88 2f       	mov	r24, r24
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	80 71       	andi	r24, 0x10	; 16
     8e0:	90 70       	andi	r25, 0x00	; 0
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	a9 f4       	brne	.+42     	; 0x910 <debounce+0xf6>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     8e6:	80 91 49 01 	lds	r24, 0x0149
     8ea:	90 91 4a 01 	lds	r25, 0x014A
     8ee:	85 30       	cpi	r24, 0x05	; 5
     8f0:	91 05       	cpc	r25, r1
     8f2:	48 f4       	brcc	.+18     	; 0x906 <debounce+0xec>
			dah_on_count++;
     8f4:	80 91 49 01 	lds	r24, 0x0149
     8f8:	90 91 4a 01 	lds	r25, 0x014A
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	90 93 4a 01 	sts	0x014A, r25
     902:	80 93 49 01 	sts	0x0149, r24
		dah_off_count = 0;
     906:	10 92 4e 01 	sts	0x014E, r1
     90a:	10 92 4d 01 	sts	0x014D, r1
     90e:	14 c0       	rjmp	.+40     	; 0x938 <debounce+0x11e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     910:	80 91 4d 01 	lds	r24, 0x014D
     914:	90 91 4e 01 	lds	r25, 0x014E
     918:	85 30       	cpi	r24, 0x05	; 5
     91a:	91 05       	cpc	r25, r1
     91c:	48 f4       	brcc	.+18     	; 0x930 <debounce+0x116>
			dah_off_count++;
     91e:	80 91 4d 01 	lds	r24, 0x014D
     922:	90 91 4e 01 	lds	r25, 0x014E
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	90 93 4e 01 	sts	0x014E, r25
     92c:	80 93 4d 01 	sts	0x014D, r24
		dah_on_count = 0;
     930:	10 92 4a 01 	sts	0x014A, r1
     934:	10 92 49 01 	sts	0x0149, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     938:	80 91 47 01 	lds	r24, 0x0147
     93c:	90 91 48 01 	lds	r25, 0x0148
     940:	85 30       	cpi	r24, 0x05	; 5
     942:	91 05       	cpc	r25, r1
     944:	18 f0       	brcs	.+6      	; 0x94c <debounce+0x132>
		dit_active = TRUE;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 93 ca 01 	sts	0x01CA, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     94c:	80 91 4b 01 	lds	r24, 0x014B
     950:	90 91 4c 01 	lds	r25, 0x014C
     954:	85 30       	cpi	r24, 0x05	; 5
     956:	91 05       	cpc	r25, r1
     958:	10 f0       	brcs	.+4      	; 0x95e <debounce+0x144>
		dit_active = FALSE;
     95a:	10 92 ca 01 	sts	0x01CA, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     95e:	80 91 49 01 	lds	r24, 0x0149
     962:	90 91 4a 01 	lds	r25, 0x014A
     966:	85 30       	cpi	r24, 0x05	; 5
     968:	91 05       	cpc	r25, r1
     96a:	18 f0       	brcs	.+6      	; 0x972 <debounce+0x158>
		dah_active = TRUE;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 b8 01 	sts	0x01B8, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     972:	80 91 4d 01 	lds	r24, 0x014D
     976:	90 91 4e 01 	lds	r25, 0x014E
     97a:	85 30       	cpi	r24, 0x05	; 5
     97c:	91 05       	cpc	r25, r1
     97e:	10 f0       	brcs	.+4      	; 0x984 <debounce+0x16a>
		dah_active = FALSE;
     980:	10 92 b8 01 	sts	0x01B8, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     984:	89 e2       	ldi	r24, 0x29	; 41
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	84 70       	andi	r24, 0x04	; 4
     992:	90 70       	andi	r25, 0x00	; 0
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	a1 f4       	brne	.+40     	; 0x9c0 <debounce+0x1a6>
     998:	89 e2       	ldi	r24, 0x29	; 41
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	fc 01       	movw	r30, r24
     99e:	80 81       	ld	r24, Z
     9a0:	88 2f       	mov	r24, r24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	82 70       	andi	r24, 0x02	; 2
     9a6:	90 70       	andi	r25, 0x00	; 0
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	51 f4       	brne	.+20     	; 0x9c0 <debounce+0x1a6>
		both_on_count++;
     9ac:	80 91 53 01 	lds	r24, 0x0153
     9b0:	90 91 54 01 	lds	r25, 0x0154
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	90 93 54 01 	sts	0x0154, r25
     9ba:	80 93 53 01 	sts	0x0153, r24
     9be:	25 c0       	rjmp	.+74     	; 0xa0a <debounce+0x1f0>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     9c0:	80 91 53 01 	lds	r24, 0x0153
     9c4:	90 91 54 01 	lds	r25, 0x0154
     9c8:	85 30       	cpi	r24, 0x05	; 5
     9ca:	91 05       	cpc	r25, r1
     9cc:	60 f0       	brcs	.+24     	; 0x9e6 <debounce+0x1cc>
     9ce:	80 91 53 01 	lds	r24, 0x0153
     9d2:	90 91 54 01 	lds	r25, 0x0154
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	84 3f       	cpi	r24, 0xF4	; 244
     9da:	9f 07       	cpc	r25, r31
     9dc:	20 f4       	brcc	.+8      	; 0x9e6 <debounce+0x1cc>
			both_btn = PRESS;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 ba 01 	sts	0x01BA, r24
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <debounce+0x1e8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     9e6:	80 91 53 01 	lds	r24, 0x0153
     9ea:	90 91 54 01 	lds	r25, 0x0154
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	84 3f       	cpi	r24, 0xF4	; 244
     9f2:	92 07       	cpc	r25, r18
     9f4:	20 f0       	brcs	.+8      	; 0x9fe <debounce+0x1e4>
			both_btn = HOLD;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	80 93 ba 01 	sts	0x01BA, r24
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <debounce+0x1e8>
		else
			both_btn = OFF;
     9fe:	10 92 ba 01 	sts	0x01BA, r1

		both_on_count = 0;
     a02:	10 92 54 01 	sts	0x0154, r1
     a06:	10 92 53 01 	sts	0x0153, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     a0a:	89 e2       	ldi	r24, 0x29	; 41
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	fc 01       	movw	r30, r24
     a10:	80 81       	ld	r24, Z
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	84 70       	andi	r24, 0x04	; 4
     a18:	90 70       	andi	r25, 0x00	; 0
     a1a:	00 97       	sbiw	r24, 0x00	; 0
     a1c:	51 f4       	brne	.+20     	; 0xa32 <debounce+0x218>
	{
		cmd_on_count++;
     a1e:	80 91 4f 01 	lds	r24, 0x014F
     a22:	90 91 50 01 	lds	r25, 0x0150
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	90 93 50 01 	sts	0x0150, r25
     a2c:	80 93 4f 01 	sts	0x014F, r24
     a30:	25 c0       	rjmp	.+74     	; 0xa7c <debounce+0x262>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     a32:	80 91 4f 01 	lds	r24, 0x014F
     a36:	90 91 50 01 	lds	r25, 0x0150
     a3a:	85 30       	cpi	r24, 0x05	; 5
     a3c:	91 05       	cpc	r25, r1
     a3e:	60 f0       	brcs	.+24     	; 0xa58 <debounce+0x23e>
     a40:	80 91 4f 01 	lds	r24, 0x014F
     a44:	90 91 50 01 	lds	r25, 0x0150
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	84 3f       	cpi	r24, 0xF4	; 244
     a4c:	9f 07       	cpc	r25, r31
     a4e:	20 f4       	brcc	.+8      	; 0xa58 <debounce+0x23e>
			cmd_btn = PRESS;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 bb 01 	sts	0x01BB, r24
     a56:	0e c0       	rjmp	.+28     	; 0xa74 <debounce+0x25a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     a58:	80 91 4f 01 	lds	r24, 0x014F
     a5c:	90 91 50 01 	lds	r25, 0x0150
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	84 3f       	cpi	r24, 0xF4	; 244
     a64:	92 07       	cpc	r25, r18
     a66:	20 f0       	brcs	.+8      	; 0xa70 <debounce+0x256>
			cmd_btn = HOLD;
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	80 93 bb 01 	sts	0x01BB, r24
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <debounce+0x25a>
		else
			cmd_btn = OFF;
     a70:	10 92 bb 01 	sts	0x01BB, r1

		cmd_on_count = 0;
     a74:	10 92 50 01 	sts	0x0150, r1
     a78:	10 92 4f 01 	sts	0x014F, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     a7c:	89 e2       	ldi	r24, 0x29	; 41
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	82 70       	andi	r24, 0x02	; 2
     a8a:	90 70       	andi	r25, 0x00	; 0
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	51 f4       	brne	.+20     	; 0xaa4 <debounce+0x28a>
		msg_on_count++;
     a90:	80 91 51 01 	lds	r24, 0x0151
     a94:	90 91 52 01 	lds	r25, 0x0152
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	90 93 52 01 	sts	0x0152, r25
     a9e:	80 93 51 01 	sts	0x0151, r24
     aa2:	25 c0       	rjmp	.+74     	; 0xaee <debounce+0x2d4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     aa4:	80 91 51 01 	lds	r24, 0x0151
     aa8:	90 91 52 01 	lds	r25, 0x0152
     aac:	85 30       	cpi	r24, 0x05	; 5
     aae:	91 05       	cpc	r25, r1
     ab0:	60 f0       	brcs	.+24     	; 0xaca <debounce+0x2b0>
     ab2:	80 91 51 01 	lds	r24, 0x0151
     ab6:	90 91 52 01 	lds	r25, 0x0152
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	84 3f       	cpi	r24, 0xF4	; 244
     abe:	9f 07       	cpc	r25, r31
     ac0:	20 f4       	brcc	.+8      	; 0xaca <debounce+0x2b0>
			msg_btn = PRESS;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 b9 01 	sts	0x01B9, r24
     ac8:	0e c0       	rjmp	.+28     	; 0xae6 <debounce+0x2cc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     aca:	80 91 51 01 	lds	r24, 0x0151
     ace:	90 91 52 01 	lds	r25, 0x0152
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	84 3f       	cpi	r24, 0xF4	; 244
     ad6:	92 07       	cpc	r25, r18
     ad8:	20 f0       	brcs	.+8      	; 0xae2 <debounce+0x2c8>
			msg_btn = HOLD;
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	80 93 b9 01 	sts	0x01B9, r24
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <debounce+0x2cc>
		else
			msg_btn = OFF;
     ae2:	10 92 b9 01 	sts	0x01B9, r1

		msg_on_count = 0;
     ae6:	10 92 52 01 	sts	0x0152, r1
     aea:	10 92 51 01 	sts	0x0151, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     aee:	89 e2       	ldi	r24, 0x29	; 41
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	fc 01       	movw	r30, r24
     af4:	80 81       	ld	r24, Z
     af6:	88 2f       	mov	r24, r24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	81 70       	andi	r24, 0x01	; 1
     afc:	90 70       	andi	r25, 0x00	; 0
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	51 f4       	brne	.+20     	; 0xb16 <debounce+0x2fc>
		enc_on_count++;
     b02:	80 91 55 01 	lds	r24, 0x0155
     b06:	90 91 56 01 	lds	r25, 0x0156
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	90 93 56 01 	sts	0x0156, r25
     b10:	80 93 55 01 	sts	0x0155, r24
     b14:	25 c0       	rjmp	.+74     	; 0xb60 <debounce+0x346>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     b16:	80 91 55 01 	lds	r24, 0x0155
     b1a:	90 91 56 01 	lds	r25, 0x0156
     b1e:	85 30       	cpi	r24, 0x05	; 5
     b20:	91 05       	cpc	r25, r1
     b22:	60 f0       	brcs	.+24     	; 0xb3c <debounce+0x322>
     b24:	80 91 55 01 	lds	r24, 0x0155
     b28:	90 91 56 01 	lds	r25, 0x0156
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	84 3f       	cpi	r24, 0xF4	; 244
     b30:	9f 07       	cpc	r25, r31
     b32:	20 f4       	brcc	.+8      	; 0xb3c <debounce+0x322>
			enc_btn = PRESS;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 c1 01 	sts	0x01C1, r24
     b3a:	0e c0       	rjmp	.+28     	; 0xb58 <debounce+0x33e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     b3c:	80 91 55 01 	lds	r24, 0x0155
     b40:	90 91 56 01 	lds	r25, 0x0156
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	84 3f       	cpi	r24, 0xF4	; 244
     b48:	92 07       	cpc	r25, r18
     b4a:	20 f0       	brcs	.+8      	; 0xb54 <debounce+0x33a>
			enc_btn = HOLD;
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	80 93 c1 01 	sts	0x01C1, r24
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <debounce+0x33e>
		else
			enc_btn = OFF;
     b54:	10 92 c1 01 	sts	0x01C1, r1

		enc_on_count = 0;
     b58:	10 92 56 01 	sts	0x0156, r1
     b5c:	10 92 55 01 	sts	0x0155, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     b60:	83 e2       	ldi	r24, 0x23	; 35
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	fc 01       	movw	r30, r24
     b66:	80 81       	ld	r24, Z
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	81 70       	andi	r24, 0x01	; 1
     b6e:	90 70       	andi	r25, 0x00	; 0
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	a9 f4       	brne	.+42     	; 0xb9e <debounce+0x384>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     b74:	80 91 57 01 	lds	r24, 0x0157
     b78:	90 91 58 01 	lds	r25, 0x0158
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	91 05       	cpc	r25, r1
     b80:	48 f4       	brcc	.+18     	; 0xb94 <debounce+0x37a>
			enca_on_count++;
     b82:	80 91 57 01 	lds	r24, 0x0157
     b86:	90 91 58 01 	lds	r25, 0x0158
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	90 93 58 01 	sts	0x0158, r25
     b90:	80 93 57 01 	sts	0x0157, r24
		enca_off_count = 0;
     b94:	10 92 5a 01 	sts	0x015A, r1
     b98:	10 92 59 01 	sts	0x0159, r1
     b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <debounce+0x3ac>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     b9e:	80 91 59 01 	lds	r24, 0x0159
     ba2:	90 91 5a 01 	lds	r25, 0x015A
     ba6:	85 30       	cpi	r24, 0x05	; 5
     ba8:	91 05       	cpc	r25, r1
     baa:	48 f4       	brcc	.+18     	; 0xbbe <debounce+0x3a4>
			enca_off_count++;
     bac:	80 91 59 01 	lds	r24, 0x0159
     bb0:	90 91 5a 01 	lds	r25, 0x015A
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	90 93 5a 01 	sts	0x015A, r25
     bba:	80 93 59 01 	sts	0x0159, r24
		enca_on_count = 0;
     bbe:	10 92 58 01 	sts	0x0158, r1
     bc2:	10 92 57 01 	sts	0x0157, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     bc6:	89 e2       	ldi	r24, 0x29	; 41
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	fc 01       	movw	r30, r24
     bcc:	80 81       	ld	r24, Z
     bce:	88 23       	and	r24, r24
     bd0:	ac f0       	brlt	.+42     	; 0xbfc <debounce+0x3e2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     bd2:	80 91 5b 01 	lds	r24, 0x015B
     bd6:	90 91 5c 01 	lds	r25, 0x015C
     bda:	85 30       	cpi	r24, 0x05	; 5
     bdc:	91 05       	cpc	r25, r1
     bde:	48 f4       	brcc	.+18     	; 0xbf2 <debounce+0x3d8>
			encb_on_count++;
     be0:	80 91 5b 01 	lds	r24, 0x015B
     be4:	90 91 5c 01 	lds	r25, 0x015C
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	90 93 5c 01 	sts	0x015C, r25
     bee:	80 93 5b 01 	sts	0x015B, r24
		encb_off_count = 0;
     bf2:	10 92 5e 01 	sts	0x015E, r1
     bf6:	10 92 5d 01 	sts	0x015D, r1
     bfa:	14 c0       	rjmp	.+40     	; 0xc24 <debounce+0x40a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     bfc:	80 91 5d 01 	lds	r24, 0x015D
     c00:	90 91 5e 01 	lds	r25, 0x015E
     c04:	85 30       	cpi	r24, 0x05	; 5
     c06:	91 05       	cpc	r25, r1
     c08:	48 f4       	brcc	.+18     	; 0xc1c <debounce+0x402>
			encb_off_count++;
     c0a:	80 91 5d 01 	lds	r24, 0x015D
     c0e:	90 91 5e 01 	lds	r25, 0x015E
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	90 93 5e 01 	sts	0x015E, r25
     c18:	80 93 5d 01 	sts	0x015D, r24
		encb_on_count = 0;
     c1c:	10 92 5c 01 	sts	0x015C, r1
     c20:	10 92 5b 01 	sts	0x015B, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     c24:	80 91 57 01 	lds	r24, 0x0157
     c28:	90 91 58 01 	lds	r25, 0x0158
     c2c:	85 30       	cpi	r24, 0x05	; 5
     c2e:	91 05       	cpc	r25, r1
     c30:	18 f0       	brcs	.+6      	; 0xc38 <debounce+0x41e>
		enc_a = TRUE;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 5f 01 	sts	0x015F, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     c38:	80 91 59 01 	lds	r24, 0x0159
     c3c:	90 91 5a 01 	lds	r25, 0x015A
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	91 05       	cpc	r25, r1
     c44:	10 f0       	brcs	.+4      	; 0xc4a <debounce+0x430>
		enc_a = FALSE;
     c46:	10 92 5f 01 	sts	0x015F, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     c4a:	80 91 5b 01 	lds	r24, 0x015B
     c4e:	90 91 5c 01 	lds	r25, 0x015C
     c52:	85 30       	cpi	r24, 0x05	; 5
     c54:	91 05       	cpc	r25, r1
     c56:	18 f0       	brcs	.+6      	; 0xc5e <debounce+0x444>
		enc_b = TRUE;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	80 93 db 01 	sts	0x01DB, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     c5e:	80 91 5d 01 	lds	r24, 0x015D
     c62:	90 91 5e 01 	lds	r25, 0x015E
     c66:	85 30       	cpi	r24, 0x05	; 5
     c68:	91 05       	cpc	r25, r1
     c6a:	10 f0       	brcs	.+4      	; 0xc70 <debounce+0x456>
		enc_b = FALSE;
     c6c:	10 92 db 01 	sts	0x01DB, r1

	// Don't go to sleep if there are any paddle or button presses
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
     c70:	80 91 47 01 	lds	r24, 0x0147
     c74:	90 91 48 01 	lds	r25, 0x0148
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	c1 f4       	brne	.+48     	; 0xcac <debounce+0x492>
     c7c:	80 91 49 01 	lds	r24, 0x0149
     c80:	90 91 4a 01 	lds	r25, 0x014A
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	91 f4       	brne	.+36     	; 0xcac <debounce+0x492>
     c88:	80 91 4f 01 	lds	r24, 0x014F
     c8c:	90 91 50 01 	lds	r25, 0x0150
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	61 f4       	brne	.+24     	; 0xcac <debounce+0x492>
     c94:	80 91 51 01 	lds	r24, 0x0151
     c98:	90 91 52 01 	lds	r25, 0x0152
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	31 f4       	brne	.+12     	; 0xcac <debounce+0x492>
     ca0:	80 91 53 01 	lds	r24, 0x0153
     ca4:	90 91 54 01 	lds	r25, 0x0154
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	19 f0       	breq	.+6      	; 0xcb2 <debounce+0x498>
		allow_sleep = FALSE;
     cac:	10 92 0a 01 	sts	0x010A, r1
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <debounce+0x49e>
	else
		allow_sleep = TRUE;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 0a 01 	sts	0x010A, r24
}
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <announce>:

void announce(char * msg, uint16_t freq)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <announce+0x6>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <announce+0x8>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	7c 83       	std	Y+4, r23	; 0x04
     cd2:	6b 83       	std	Y+3, r22	; 0x03
	// Convert to uppercase
	strupr(msg);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     cdc:	80 91 d5 01 	lds	r24, 0x01D5
     ce0:	90 91 d6 01 	lds	r25, 0x01D6
     ce4:	29 81       	ldd	r18, Y+1	; 0x01
     ce6:	3a 81       	ldd	r19, Y+2	; 0x02
     ce8:	b9 01       	movw	r22, r18
     cea:	0e 94 cb 1b 	call	0x3796	; 0x3796 <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     cee:	80 91 bc 01 	lds	r24, 0x01BC
     cf2:	80 93 6a 01 	sts	0x016A, r24
	prev_state_end = cur_state_end;
     cf6:	80 91 c2 01 	lds	r24, 0x01C2
     cfa:	90 91 c3 01 	lds	r25, 0x01C3
     cfe:	a0 91 c4 01 	lds	r26, 0x01C4
     d02:	b0 91 c5 01 	lds	r27, 0x01C5
     d06:	80 93 ac 01 	sts	0x01AC, r24
     d0a:	90 93 ad 01 	sts	0x01AD, r25
     d0e:	a0 93 ae 01 	sts	0x01AE, r26
     d12:	b0 93 af 01 	sts	0x01AF, r27
	prev_mode = cur_mode;
     d16:	80 91 9a 01 	lds	r24, 0x019A
     d1a:	80 93 b0 01 	sts	0x01B0, r24
	prev_st_freq = st_freq;
     d1e:	80 91 b2 01 	lds	r24, 0x01B2
     d22:	90 91 b3 01 	lds	r25, 0x01B3
     d26:	90 93 c0 01 	sts	0x01C0, r25
     d2a:	80 93 bf 01 	sts	0x01BF, r24
	st_freq = freq;
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	9c 81       	ldd	r25, Y+4	; 0x04
     d32:	90 93 b3 01 	sts	0x01B3, r25
     d36:	80 93 b2 01 	sts	0x01B2, r24

	set_st_freq(st_freq);
     d3a:	80 91 b2 01 	lds	r24, 0x01B2
     d3e:	90 91 b3 01 	lds	r25, 0x01B3
     d42:	cc 01       	movw	r24, r24
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <set_st_freq>

	// Set into announce mode
	cur_state = IDLE;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 bc 01 	sts	0x01BC, r24
	cur_mode = ANNOUNCE;
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	80 93 9a 01 	sts	0x019A, r24
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <read_voltage>:

void read_voltage(void)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <read_voltage+0x6>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <read_voltage+0x8>
     d72:	00 d0       	rcall	.+0      	; 0xd74 <read_voltage+0xa>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     d78:	8a e0       	ldi	r24, 0x0A	; 10
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <malloc>
     d80:	9a 83       	std	Y+2, r25	; 0x02
     d82:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     d84:	8a e7       	ldi	r24, 0x7A	; 122
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	2a e7       	ldi	r18, 0x7A	; 122
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	d9 01       	movw	r26, r18
     d8e:	2c 91       	ld	r18, X
     d90:	20 64       	ori	r18, 0x40	; 64
     d92:	fc 01       	movw	r30, r24
     d94:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     d96:	8a e7       	ldi	r24, 0x7A	; 122
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	dc 01       	movw	r26, r24
     d9c:	8c 91       	ld	r24, X
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	80 74       	andi	r24, 0x40	; 64
     da4:	90 70       	andi	r25, 0x00	; 0
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	b1 f7       	brne	.-20     	; 0xd96 <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     daa:	89 e7       	ldi	r24, 0x79	; 121
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	fc 01       	movw	r30, r24
     db0:	80 81       	ld	r24, Z
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9c 83       	std	Y+4, r25	; 0x04
     db8:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 15.7 V
	// Well use fixed point numbers, so full scale is 157 * 0.1 V
	vcc = (vcc_mon * 157) / 256;
     dba:	4b 81       	ldd	r20, Y+3	; 0x03
     dbc:	5c 81       	ldd	r21, Y+4	; 0x04
     dbe:	2d e9       	ldi	r18, 0x9D	; 157
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	42 9f       	mul	r20, r18
     dc4:	c0 01       	movw	r24, r0
     dc6:	43 9f       	mul	r20, r19
     dc8:	90 0d       	add	r25, r0
     dca:	52 9f       	mul	r21, r18
     dcc:	90 0d       	add	r25, r0
     dce:	11 24       	eor	r1, r1
     dd0:	89 2f       	mov	r24, r25
     dd2:	99 27       	eor	r25, r25
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	2a e0       	ldi	r18, 0x0A	; 10
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	b9 01       	movw	r22, r18
     de2:	0e 94 34 1a 	call	0x3468	; 0x3468 <__udivmodhi4>
     de6:	9b 01       	movw	r18, r22
     de8:	f9 01       	movw	r30, r18
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	2a e0       	ldi	r18, 0x0A	; 10
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	b9 01       	movw	r22, r18
     df4:	0e 94 34 1a 	call	0x3468	; 0x3468 <__udivmodhi4>
     df8:	9c 01       	movw	r18, r24
     dfa:	8d b7       	in	r24, 0x3d	; 61
     dfc:	9e b7       	in	r25, 0x3e	; 62
     dfe:	08 97       	sbiw	r24, 0x08	; 8
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	9e bf       	out	0x3e, r25	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	8d bf       	out	0x3d, r24	; 61
     e0a:	8d b7       	in	r24, 0x3d	; 61
     e0c:	9e b7       	in	r25, 0x3e	; 62
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	49 81       	ldd	r20, Y+1	; 0x01
     e12:	5a 81       	ldd	r21, Y+2	; 0x02
     e14:	dc 01       	movw	r26, r24
     e16:	4d 93       	st	X+, r20
     e18:	5c 93       	st	X, r21
     e1a:	4b e0       	ldi	r20, 0x0B	; 11
     e1c:	51 e0       	ldi	r21, 0x01	; 1
     e1e:	dc 01       	movw	r26, r24
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	5c 93       	st	X, r21
     e24:	4e 93       	st	-X, r20
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	dc 01       	movw	r26, r24
     e2a:	15 96       	adiw	r26, 0x05	; 5
     e2c:	fc 93       	st	X, r31
     e2e:	ee 93       	st	-X, r30
     e30:	14 97       	sbiw	r26, 0x04	; 4
     e32:	fc 01       	movw	r30, r24
     e34:	37 83       	std	Z+7, r19	; 0x07
     e36:	26 83       	std	Z+6, r18	; 0x06
     e38:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <sprintf>
     e3c:	8d b7       	in	r24, 0x3d	; 61
     e3e:	9e b7       	in	r25, 0x3e	; 62
     e40:	08 96       	adiw	r24, 0x08	; 8
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	9e bf       	out	0x3e, r25	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq);
     e4c:	20 91 b2 01 	lds	r18, 0x01B2
     e50:	30 91 b3 01 	lds	r19, 0x01B3
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	b9 01       	movw	r22, r18
     e5a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>

	free(vcc_out);
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	0e 94 17 1b 	call	0x362e	; 0x362e <free>
}
     e66:	26 96       	adiw	r28, 0x06	; 6
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <count_frequency>:

void count_frequency(void)
{
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <count_frequency+0xa>
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     e86:	8f e0       	ldi	r24, 0x0F	; 15
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <malloc>
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     e92:	80 91 cc 01 	lds	r24, 0x01CC
     e96:	90 91 cd 01 	lds	r25, 0x01CD
     e9a:	a0 91 ce 01 	lds	r26, 0x01CE
     e9e:	b0 91 cf 01 	lds	r27, 0x01CF
     ea2:	28 ee       	ldi	r18, 0xE8	; 232
     ea4:	33 e0       	ldi	r19, 0x03	; 3
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__udivmodsi4>
     eb2:	da 01       	movw	r26, r20
     eb4:	c9 01       	movw	r24, r18
     eb6:	24 e6       	ldi	r18, 0x64	; 100
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__udivmodsi4>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	8c 01       	movw	r16, r24
     ecc:	80 91 cc 01 	lds	r24, 0x01CC
     ed0:	90 91 cd 01 	lds	r25, 0x01CD
     ed4:	a0 91 ce 01 	lds	r26, 0x01CE
     ed8:	b0 91 cf 01 	lds	r27, 0x01CF
     edc:	28 ee       	ldi	r18, 0xE8	; 232
     ede:	33 e0       	ldi	r19, 0x03	; 3
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__udivmodsi4>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	2a e0       	ldi	r18, 0x0A	; 10
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__udivmodsi4>
     f00:	da 01       	movw	r26, r20
     f02:	c9 01       	movw	r24, r18
     f04:	9c 01       	movw	r18, r24
     f06:	8d b7       	in	r24, 0x3d	; 61
     f08:	9e b7       	in	r25, 0x3e	; 62
     f0a:	08 97       	sbiw	r24, 0x08	; 8
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	9e bf       	out	0x3e, r25	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	8d bf       	out	0x3d, r24	; 61
     f16:	8d b7       	in	r24, 0x3d	; 61
     f18:	9e b7       	in	r25, 0x3e	; 62
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	49 81       	ldd	r20, Y+1	; 0x01
     f1e:	5a 81       	ldd	r21, Y+2	; 0x02
     f20:	fc 01       	movw	r30, r24
     f22:	51 83       	std	Z+1, r21	; 0x01
     f24:	40 83       	st	Z, r20
     f26:	41 e1       	ldi	r20, 0x11	; 17
     f28:	51 e0       	ldi	r21, 0x01	; 1
     f2a:	fc 01       	movw	r30, r24
     f2c:	53 83       	std	Z+3, r21	; 0x03
     f2e:	42 83       	std	Z+2, r20	; 0x02
     f30:	fc 01       	movw	r30, r24
     f32:	15 83       	std	Z+5, r17	; 0x05
     f34:	04 83       	std	Z+4, r16	; 0x04
     f36:	fc 01       	movw	r30, r24
     f38:	37 83       	std	Z+7, r19	; 0x07
     f3a:	26 83       	std	Z+6, r18	; 0x06
     f3c:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <sprintf>
     f40:	8d b7       	in	r24, 0x3d	; 61
     f42:	9e b7       	in	r25, 0x3e	; 62
     f44:	08 96       	adiw	r24, 0x08	; 8
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	9e bf       	out	0x3e, r25	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out, st_freq);
     f50:	20 91 b2 01 	lds	r18, 0x01B2
     f54:	30 91 b3 01 	lds	r19, 0x01B3
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	b9 01       	movw	r22, r18
     f5e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>

	free(freq_out);
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	0e 94 17 1b 	call	0x362e	; 0x362e <free>
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <poll_buttons>:

void poll_buttons(void)
{
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
     f8a:	80 91 ba 01 	lds	r24, 0x01BA
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	59 f4       	brne	.+22     	; 0xfa8 <poll_buttons+0x30>
	{
		cur_state = IDLE;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	80 93 bc 01 	sts	0x01BC, r24
		prev_mode = cur_mode;
     f98:	80 91 9a 01 	lds	r24, 0x019A
     f9c:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = TUNE;
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	80 93 9a 01 	sts	0x019A, r24
     fa6:	36 c0       	rjmp	.+108    	; 0x1014 <poll_buttons+0x9c>
	}
	else if(cmd_btn == PRESS)
     fa8:	80 91 bb 01 	lds	r24, 0x01BB
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	59 f4       	brne	.+22     	; 0xfc6 <poll_buttons+0x4e>
	{
		prev_mode = cur_mode;
     fb0:	80 91 9a 01 	lds	r24, 0x019A
     fb4:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = MENU;
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	80 93 9a 01 	sts	0x019A, r24
		cur_state = IDLE;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 bc 01 	sts	0x01BC, r24
     fc4:	27 c0       	rjmp	.+78     	; 0x1014 <poll_buttons+0x9c>
	}
	else if(msg_btn == PRESS)
     fc6:	80 91 b9 01 	lds	r24, 0x01B9
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	19 f4       	brne	.+6      	; 0xfd4 <poll_buttons+0x5c>
		count_frequency();
     fce:	0e 94 3c 07 	call	0xe78	; 0xe78 <count_frequency>
     fd2:	20 c0       	rjmp	.+64     	; 0x1014 <poll_buttons+0x9c>
	else if(msg_btn == HOLD)
     fd4:	80 91 b9 01 	lds	r24, 0x01B9
     fd8:	82 30       	cpi	r24, 0x02	; 2
     fda:	e1 f4       	brne	.+56     	; 0x1014 <poll_buttons+0x9c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
     fdc:	8d e6       	ldi	r24, 0x6D	; 109
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	21 e0       	ldi	r18, 0x01	; 1
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	b9 01       	movw	r22, r18
     fe6:	48 e2       	ldi	r20, 0x28	; 40
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
     fee:	80 91 d5 01 	lds	r24, 0x01D5
     ff2:	90 91 d6 01 	lds	r25, 0x01D6
     ff6:	2d e6       	ldi	r18, 0x6D	; 109
     ff8:	31 e0       	ldi	r19, 0x01	; 1
     ffa:	b9 01       	movw	r22, r18
     ffc:	0e 94 cb 1b 	call	0x3796	; 0x3796 <strcpy>
		cur_state = IDLE;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 bc 01 	sts	0x01BC, r24
		prev_mode = cur_mode;
    1006:	80 91 9a 01 	lds	r24, 0x019A
    100a:	80 93 b0 01 	sts	0x01B0, r24
		cur_mode = PLAYBACK;
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	80 93 9a 01 	sts	0x019A, r24
	}

	if(enc_btn == PRESS)
    1014:	80 91 c1 01 	lds	r24, 0x01C1
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	79 f5       	brne	.+94     	; 0x107a <poll_buttons+0x102>
	{
		if(tune_rate == FAST)
    101c:	80 91 06 01 	lds	r24, 0x0106
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	a9 f4       	brne	.+42     	; 0x104e <poll_buttons+0xd6>
		{
			tune_rate = SLOW;
    1024:	10 92 06 01 	sts	0x0106, r1
			tune_step = DDS_20HZ;
    1028:	84 e3       	ldi	r24, 0x34	; 52
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	90 93 08 01 	sts	0x0108, r25
    1030:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 5;
    1034:	85 e0       	ldi	r24, 0x05	; 5
    1036:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 0d 04 	call	0x81a	; 0x81a <debounce>
			announce("S", ST_LOW);
    1040:	8b e1       	ldi	r24, 0x1B	; 27
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	60 e9       	ldi	r22, 0x90	; 144
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    104c:	89 c0       	rjmp	.+274    	; 0x1160 <poll_buttons+0x1e8>
		}
		else
		{
			tune_rate = FAST;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	80 93 06 01 	sts	0x0106, r24
			tune_step = DDS_100HZ;
    1054:	8c e0       	ldi	r24, 0x0C	; 12
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	90 93 08 01 	sts	0x0108, r25
    105c:	80 93 07 01 	sts	0x0107, r24
			tune_freq_step = 25;
    1060:	89 e1       	ldi	r24, 0x19	; 25
    1062:	80 93 09 01 	sts	0x0109, r24
			debounce(TRUE);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 0d 04 	call	0x81a	; 0x81a <debounce>
			announce("S", ST_HIGH);
    106c:	8b e1       	ldi	r24, 0x1B	; 27
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	64 e8       	ldi	r22, 0x84	; 132
    1072:	73 e0       	ldi	r23, 0x03	; 3
    1074:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    1078:	73 c0       	rjmp	.+230    	; 0x1160 <poll_buttons+0x1e8>
		}
	}
	else if(enc_btn == HOLD)
    107a:	80 91 c1 01 	lds	r24, 0x01C1
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	09 f0       	breq	.+2      	; 0x1084 <poll_buttons+0x10c>
    1082:	6e c0       	rjmp	.+220    	; 0x1160 <poll_buttons+0x1e8>
	{
		if(rit_enable == FALSE)
    1084:	80 91 dc 01 	lds	r24, 0x01DC
    1088:	88 23       	and	r24, r24
    108a:	b1 f5       	brne	.+108    	; 0x10f8 <poll_buttons+0x180>
		{
			RIT_LED_DDR |= _BV(RIT_LED);
    108c:	87 e2       	ldi	r24, 0x27	; 39
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	27 e2       	ldi	r18, 0x27	; 39
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	f9 01       	movw	r30, r18
    1096:	20 81       	ld	r18, Z
    1098:	22 60       	ori	r18, 0x02	; 2
    109a:	fc 01       	movw	r30, r24
    109c:	20 83       	st	Z, r18
			RIT_LED_PORT |= _BV(RIT_LED);
    109e:	88 e2       	ldi	r24, 0x28	; 40
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	28 e2       	ldi	r18, 0x28	; 40
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	f9 01       	movw	r30, r18
    10a8:	20 81       	ld	r18, Z
    10aa:	22 60       	ori	r18, 0x02	; 2
    10ac:	fc 01       	movw	r30, r24
    10ae:	20 83       	st	Z, r18
			rit_enable = TRUE;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 dc 01 	sts	0x01DC, r24
			dds_rit_freq_word = dds_freq_word;
    10b6:	80 91 a4 01 	lds	r24, 0x01A4
    10ba:	90 91 a5 01 	lds	r25, 0x01A5
    10be:	a0 91 a6 01 	lds	r26, 0x01A6
    10c2:	b0 91 a7 01 	lds	r27, 0x01A7
    10c6:	80 93 b4 01 	sts	0x01B4, r24
    10ca:	90 93 b5 01 	sts	0x01B5, r25
    10ce:	a0 93 b6 01 	sts	0x01B6, r26
    10d2:	b0 93 b7 01 	sts	0x01B7, r27
			tune_dds(dds_rit_freq_word, REG_1);
    10d6:	80 91 b4 01 	lds	r24, 0x01B4
    10da:	90 91 b5 01 	lds	r25, 0x01B5
    10de:	a0 91 b6 01 	lds	r26, 0x01B6
    10e2:	b0 91 b7 01 	lds	r27, 0x01B7
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	41 e0       	ldi	r20, 0x01	; 1
    10ec:	0e 94 72 09 	call	0x12e4	; 0x12e4 <tune_dds>
			debounce(TRUE);
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	0e 94 0d 04 	call	0x81a	; 0x81a <debounce>
    10f6:	34 c0       	rjmp	.+104    	; 0x1160 <poll_buttons+0x1e8>
		}
		else
		{

			RIT_LED_DDR &= ~(_BV(RIT_LED));
    10f8:	87 e2       	ldi	r24, 0x27	; 39
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	27 e2       	ldi	r18, 0x27	; 39
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	f9 01       	movw	r30, r18
    1102:	20 81       	ld	r18, Z
    1104:	2d 7f       	andi	r18, 0xFD	; 253
    1106:	fc 01       	movw	r30, r24
    1108:	20 83       	st	Z, r18
			RIT_LED_PORT &= ~(_BV(RIT_LED));
    110a:	88 e2       	ldi	r24, 0x28	; 40
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	28 e2       	ldi	r18, 0x28	; 40
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	f9 01       	movw	r30, r18
    1114:	20 81       	ld	r18, Z
    1116:	2d 7f       	andi	r18, 0xFD	; 253
    1118:	fc 01       	movw	r30, r24
    111a:	20 83       	st	Z, r18
			rit_enable = FALSE;
    111c:	10 92 dc 01 	sts	0x01DC, r1
			dds_freq_word = dds_rit_freq_word;
    1120:	80 91 b4 01 	lds	r24, 0x01B4
    1124:	90 91 b5 01 	lds	r25, 0x01B5
    1128:	a0 91 b6 01 	lds	r26, 0x01B6
    112c:	b0 91 b7 01 	lds	r27, 0x01B7
    1130:	80 93 a4 01 	sts	0x01A4, r24
    1134:	90 93 a5 01 	sts	0x01A5, r25
    1138:	a0 93 a6 01 	sts	0x01A6, r26
    113c:	b0 93 a7 01 	sts	0x01A7, r27
			tune_dds(dds_freq_word, REG_0);
    1140:	80 91 a4 01 	lds	r24, 0x01A4
    1144:	90 91 a5 01 	lds	r25, 0x01A5
    1148:	a0 91 a6 01 	lds	r26, 0x01A6
    114c:	b0 91 a7 01 	lds	r27, 0x01A7
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	0e 94 72 09 	call	0x12e4	; 0x12e4 <tune_dds>
			debounce(TRUE);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	0e 94 0d 04 	call	0x81a	; 0x81a <debounce>
		}
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    1160:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    1162:	80 91 5f 01 	lds	r24, 0x015F
    1166:	88 23       	and	r24, r24
    1168:	19 f0       	breq	.+6      	; 0x1170 <poll_buttons+0x1f8>
		cur_enc_state += 0x02;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	8e 5f       	subi	r24, 0xFE	; 254
    116e:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    1170:	80 91 db 01 	lds	r24, 0x01DB
    1174:	88 23       	and	r24, r24
    1176:	19 f0       	breq	.+6      	; 0x117e <poll_buttons+0x206>
		cur_enc_state += 0x01;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    117e:	80 91 46 01 	lds	r24, 0x0146
    1182:	99 81       	ldd	r25, Y+1	; 0x01
    1184:	98 17       	cp	r25, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <poll_buttons+0x212>
    1188:	a2 c0       	rjmp	.+324    	; 0x12ce <poll_buttons+0x356>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    118a:	80 91 46 01 	lds	r24, 0x0146
    118e:	86 95       	lsr	r24
    1190:	81 70       	andi	r24, 0x01	; 1
    1192:	80 93 46 01 	sts	0x0146, r24

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    1196:	80 91 46 01 	lds	r24, 0x0146
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	81 70       	andi	r24, 0x01	; 1
    11a6:	90 70       	andi	r25, 0x00	; 0
    11a8:	82 27       	eor	r24, r18
    11aa:	93 27       	eor	r25, r19
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	91 05       	cpc	r25, r1
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <poll_buttons+0x23c>
    11b2:	4b c0       	rjmp	.+150    	; 0x124a <poll_buttons+0x2d2>
		{

			dds_freq_word -= tune_step;
    11b4:	20 91 a4 01 	lds	r18, 0x01A4
    11b8:	30 91 a5 01 	lds	r19, 0x01A5
    11bc:	40 91 a6 01 	lds	r20, 0x01A6
    11c0:	50 91 a7 01 	lds	r21, 0x01A7
    11c4:	80 91 07 01 	lds	r24, 0x0107
    11c8:	90 91 08 01 	lds	r25, 0x0108
    11cc:	cc 01       	movw	r24, r24
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	79 01       	movw	r14, r18
    11d4:	8a 01       	movw	r16, r20
    11d6:	e8 1a       	sub	r14, r24
    11d8:	f9 0a       	sbc	r15, r25
    11da:	0a 0b       	sbc	r16, r26
    11dc:	1b 0b       	sbc	r17, r27
    11de:	d8 01       	movw	r26, r16
    11e0:	c7 01       	movw	r24, r14
    11e2:	80 93 a4 01 	sts	0x01A4, r24
    11e6:	90 93 a5 01 	sts	0x01A5, r25
    11ea:	a0 93 a6 01 	sts	0x01A6, r26
    11ee:	b0 93 a7 01 	sts	0x01A7, r27
			tune_freq -= tune_freq_step;
    11f2:	20 91 cc 01 	lds	r18, 0x01CC
    11f6:	30 91 cd 01 	lds	r19, 0x01CD
    11fa:	40 91 ce 01 	lds	r20, 0x01CE
    11fe:	50 91 cf 01 	lds	r21, 0x01CF
    1202:	80 91 09 01 	lds	r24, 0x0109
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 e0       	ldi	r26, 0x00	; 0
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	79 01       	movw	r14, r18
    1210:	8a 01       	movw	r16, r20
    1212:	e8 1a       	sub	r14, r24
    1214:	f9 0a       	sbc	r15, r25
    1216:	0a 0b       	sbc	r16, r26
    1218:	1b 0b       	sbc	r17, r27
    121a:	d8 01       	movw	r26, r16
    121c:	c7 01       	movw	r24, r14
    121e:	80 93 cc 01 	sts	0x01CC, r24
    1222:	90 93 cd 01 	sts	0x01CD, r25
    1226:	a0 93 ce 01 	sts	0x01CE, r26
    122a:	b0 93 cf 01 	sts	0x01CF, r27
			tune_dds(dds_freq_word, REG_0);
    122e:	80 91 a4 01 	lds	r24, 0x01A4
    1232:	90 91 a5 01 	lds	r25, 0x01A5
    1236:	a0 91 a6 01 	lds	r26, 0x01A6
    123a:	b0 91 a7 01 	lds	r27, 0x01A7
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	0e 94 72 09 	call	0x12e4	; 0x12e4 <tune_dds>
    1248:	42 c0       	rjmp	.+132    	; 0x12ce <poll_buttons+0x356>
		}
		else
		{
			dds_freq_word += tune_step;
    124a:	80 91 07 01 	lds	r24, 0x0107
    124e:	90 91 08 01 	lds	r25, 0x0108
    1252:	9c 01       	movw	r18, r24
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	80 91 a4 01 	lds	r24, 0x01A4
    125c:	90 91 a5 01 	lds	r25, 0x01A5
    1260:	a0 91 a6 01 	lds	r26, 0x01A6
    1264:	b0 91 a7 01 	lds	r27, 0x01A7
    1268:	82 0f       	add	r24, r18
    126a:	93 1f       	adc	r25, r19
    126c:	a4 1f       	adc	r26, r20
    126e:	b5 1f       	adc	r27, r21
    1270:	80 93 a4 01 	sts	0x01A4, r24
    1274:	90 93 a5 01 	sts	0x01A5, r25
    1278:	a0 93 a6 01 	sts	0x01A6, r26
    127c:	b0 93 a7 01 	sts	0x01A7, r27
			tune_freq += tune_freq_step;
    1280:	80 91 09 01 	lds	r24, 0x0109
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	80 91 cc 01 	lds	r24, 0x01CC
    1290:	90 91 cd 01 	lds	r25, 0x01CD
    1294:	a0 91 ce 01 	lds	r26, 0x01CE
    1298:	b0 91 cf 01 	lds	r27, 0x01CF
    129c:	82 0f       	add	r24, r18
    129e:	93 1f       	adc	r25, r19
    12a0:	a4 1f       	adc	r26, r20
    12a2:	b5 1f       	adc	r27, r21
    12a4:	80 93 cc 01 	sts	0x01CC, r24
    12a8:	90 93 cd 01 	sts	0x01CD, r25
    12ac:	a0 93 ce 01 	sts	0x01CE, r26
    12b0:	b0 93 cf 01 	sts	0x01CF, r27
			tune_dds(dds_freq_word, REG_0);
    12b4:	80 91 a4 01 	lds	r24, 0x01A4
    12b8:	90 91 a5 01 	lds	r25, 0x01A5
    12bc:	a0 91 a6 01 	lds	r26, 0x01A6
    12c0:	b0 91 a7 01 	lds	r27, 0x01A7
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	0e 94 72 09 	call	0x12e4	; 0x12e4 <tune_dds>
		}
	}

	prev_enc_state = cur_enc_state;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	80 93 46 01 	sts	0x0146, r24
}
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	08 95       	ret

000012e4 <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	2b 97       	sbiw	r28, 0x0b	; 11
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	6f 83       	std	Y+7, r22	; 0x07
    12fa:	78 87       	std	Y+8, r23	; 0x08
    12fc:	89 87       	std	Y+9, r24	; 0x09
    12fe:	9a 87       	std	Y+10, r25	; 0x0a
    1300:	4b 87       	std	Y+11, r20	; 0x0b
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    1302:	8b 85       	ldd	r24, Y+11	; 0x0b
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	29 f4       	brne	.+10     	; 0x1312 <tune_dds+0x2e>
		freq_reg = 0x8000;
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e8       	ldi	r25, 0x80	; 128
    130c:	9a 83       	std	Y+2, r25	; 0x02
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	04 c0       	rjmp	.+8      	; 0x131a <tune_dds+0x36>
	else
		freq_reg = 0x4000;
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e4       	ldi	r25, 0x40	; 64
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    131a:	8f 81       	ldd	r24, Y+7	; 0x07
    131c:	98 85       	ldd	r25, Y+8	; 0x08
    131e:	9c 01       	movw	r18, r24
    1320:	3f 73       	andi	r19, 0x3F	; 63
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a9 85       	ldd	r26, Y+9	; 0x09
    1334:	ba 85       	ldd	r27, Y+10	; 0x0a
    1336:	07 2e       	mov	r0, r23
    1338:	7e e0       	ldi	r23, 0x0E	; 14
    133a:	b6 95       	lsr	r27
    133c:	a7 95       	ror	r26
    133e:	97 95       	ror	r25
    1340:	87 95       	ror	r24
    1342:	7a 95       	dec	r23
    1344:	d1 f7       	brne	.-12     	; 0x133a <tune_dds+0x56>
    1346:	70 2d       	mov	r23, r0
    1348:	9c 01       	movw	r18, r24
    134a:	3f 73       	andi	r19, 0x3F	; 63
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	9e 83       	std	Y+6, r25	; 0x06
    1356:	8d 83       	std	Y+5, r24	; 0x05
		//send_dds_word(0x2800);
	//else
		//send_dds_word(0x2000);

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>
}
    1368:	2b 96       	adiw	r28, 0x0b	; 11
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <init_dds>:

void init_dds(uint32_t dds_word, enum FREQREG reg)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	2b 97       	sbiw	r28, 0x0b	; 11
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	6f 83       	std	Y+7, r22	; 0x07
    1390:	78 87       	std	Y+8, r23	; 0x08
    1392:	89 87       	std	Y+9, r24	; 0x09
    1394:	9a 87       	std	Y+10, r25	; 0x0a
    1396:	4b 87       	std	Y+11, r20	; 0x0b
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    1398:	8b 85       	ldd	r24, Y+11	; 0x0b
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	29 f4       	brne	.+10     	; 0x13a8 <init_dds+0x2e>
		freq_reg = 0x8000;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e8       	ldi	r25, 0x80	; 128
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <init_dds+0x36>
	else
		freq_reg = 0x4000;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e4       	ldi	r25, 0x40	; 64
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    13b0:	8f 81       	ldd	r24, Y+7	; 0x07
    13b2:	98 85       	ldd	r25, Y+8	; 0x08
    13b4:	9c 01       	movw	r18, r24
    13b6:	3f 73       	andi	r19, 0x3F	; 63
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	82 0f       	add	r24, r18
    13be:	93 1f       	adc	r25, r19
    13c0:	9c 83       	std	Y+4, r25	; 0x04
    13c2:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    13c4:	8f 81       	ldd	r24, Y+7	; 0x07
    13c6:	98 85       	ldd	r25, Y+8	; 0x08
    13c8:	a9 85       	ldd	r26, Y+9	; 0x09
    13ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    13cc:	07 2e       	mov	r0, r23
    13ce:	7e e0       	ldi	r23, 0x0E	; 14
    13d0:	b6 95       	lsr	r27
    13d2:	a7 95       	ror	r26
    13d4:	97 95       	ror	r25
    13d6:	87 95       	ror	r24
    13d8:	7a 95       	dec	r23
    13da:	d1 f7       	brne	.-12     	; 0x13d0 <init_dds+0x56>
    13dc:	70 2d       	mov	r23, r0
    13de:	9c 01       	movw	r18, r24
    13e0:	3f 73       	andi	r19, 0x3F	; 63
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05

	// Control register
	//if(reg == REG_1)
		//send_dds_word(0x2900);
	//else
		send_dds_word(0x2100);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	91 e2       	ldi	r25, 0x21	; 33
    13f2:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>

	// Send phase
	send_dds_word(0xC000);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 ec       	ldi	r25, 0xC0	; 192
    140a:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>

	// Exit reset
	send_dds_word(0x2000);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e2       	ldi	r25, 0x20	; 32
    1412:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>
}
    1416:	2b 96       	adiw	r28, 0x0b	; 11
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <send_dds_word>:

void send_dds_word(uint16_t dds_word)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <send_dds_word+0x6>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    1436:	85 e2       	ldi	r24, 0x25	; 37
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	25 e2       	ldi	r18, 0x25	; 37
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	f9 01       	movw	r30, r18
    1440:	20 81       	ld	r18, Z
    1442:	20 62       	ori	r18, 0x20	; 32
    1444:	fc 01       	movw	r30, r24
    1446:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    1448:	85 e2       	ldi	r24, 0x25	; 37
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	25 e2       	ldi	r18, 0x25	; 37
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	f9 01       	movw	r30, r18
    1452:	20 81       	ld	r18, Z
    1454:	2d 7f       	andi	r18, 0xFD	; 253
    1456:	fc 01       	movw	r30, r24
    1458:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    145a:	8e e4       	ldi	r24, 0x4E	; 78
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	29 81       	ldd	r18, Y+1	; 0x01
    1460:	3a 81       	ldd	r19, Y+2	; 0x02
    1462:	23 2f       	mov	r18, r19
    1464:	33 27       	eor	r19, r19
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    146a:	00 00       	nop
    146c:	8d e4       	ldi	r24, 0x4D	; 77
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	fc 01       	movw	r30, r24
    1472:	80 81       	ld	r24, Z
    1474:	88 23       	and	r24, r24
    1476:	d4 f7       	brge	.-12     	; 0x146c <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    1478:	8e e4       	ldi	r24, 0x4E	; 78
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	29 81       	ldd	r18, Y+1	; 0x01
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1482:	00 00       	nop
    1484:	8d e4       	ldi	r24, 0x4D	; 77
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	fc 01       	movw	r30, r24
    148a:	80 81       	ld	r24, Z
    148c:	88 23       	and	r24, r24
    148e:	d4 f7       	brge	.-12     	; 0x1484 <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    1490:	85 e2       	ldi	r24, 0x25	; 37
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	25 e2       	ldi	r18, 0x25	; 37
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	f9 01       	movw	r30, r18
    149a:	20 81       	ld	r18, Z
    149c:	22 60       	ori	r18, 0x02	; 2
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	98 e2       	ldi	r25, 0x28	; 40
    14c2:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e2       	ldi	r25, 0x20	; 32
    14cc:	0e 94 14 0a 	call	0x1428	; 0x1428 <send_dds_word>
}
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <set_st_freq+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <set_st_freq+0x8>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	69 83       	std	Y+1, r22	; 0x01
    14e6:	7a 83       	std	Y+2, r23	; 0x02
    14e8:	8b 83       	std	Y+3, r24	; 0x03
    14ea:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	ab 81       	ldd	r26, Y+3	; 0x03
    14f2:	bc 81       	ldd	r27, Y+4	; 0x04
    14f4:	28 ec       	ldi	r18, 0xC8	; 200
    14f6:	36 e1       	ldi	r19, 0x16	; 22
    14f8:	42 e0       	ldi	r20, 0x02	; 2
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	bc 01       	movw	r22, r24
    14fe:	cd 01       	movw	r24, r26
    1500:	0e 94 15 1a 	call	0x342a	; 0x342a <__mulsi3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	80 93 a8 01 	sts	0x01A8, r24
    150c:	90 93 a9 01 	sts	0x01A9, r25
    1510:	a0 93 aa 01 	sts	0x01AA, r26
    1514:	b0 93 ab 01 	sts	0x01AB, r27
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <main>:

int main(void)
{
    1526:	1f 93       	push	r17
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	62 97       	sbiw	r28, 0x12	; 18
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    153c:	89 e2       	ldi	r24, 0x29	; 41
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <malloc>
    1544:	90 93 d6 01 	sts	0x01D6, r25
    1548:	80 93 d5 01 	sts	0x01D5, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    154c:	80 91 d5 01 	lds	r24, 0x01D5
    1550:	90 91 d6 01 	lds	r25, 0x01D6
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	49 e2       	ldi	r20, 0x29	; 41
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <memset>
	cur_char_p = announce_buffer;
    1560:	80 91 d5 01 	lds	r24, 0x01D5
    1564:	90 91 d6 01 	lds	r25, 0x01D6
    1568:	90 93 37 01 	sts	0x0137, r25
    156c:	80 93 36 01 	sts	0x0136, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    1570:	89 e2       	ldi	r24, 0x29	; 41
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <malloc>
    1578:	90 93 39 01 	sts	0x0139, r25
    157c:	80 93 38 01 	sts	0x0138, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    1580:	80 91 38 01 	lds	r24, 0x0138
    1584:	90 91 39 01 	lds	r25, 0x0139
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	49 e2       	ldi	r20, 0x29	; 41
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	0e 94 b9 1b 	call	0x3772	; 0x3772 <memset>

	init();
    1594:	0e 94 61 02 	call	0x4c2	; 0x4c2 <init>

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    1598:	19 82       	std	Y+1, r1	; 0x01
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <main+0x82>
		debounce(FALSE);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	0e 94 0d 04 	call	0x81a	; 0x81a <debounce>
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);

	init();

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	8f 30       	cpi	r24, 0x0F	; 15
    15ac:	b8 f3       	brcs	.-18     	; 0x159c <main+0x76>
		debounce(FALSE);

	if((dah_active == TRUE) && (dit_active == FALSE))
    15ae:	80 91 b8 01 	lds	r24, 0x01B8
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	41 f4       	brne	.+16     	; 0x15c6 <main+0xa0>
    15b6:	80 91 ca 01 	lds	r24, 0x01CA
    15ba:	88 23       	and	r24, r24
    15bc:	21 f4       	brne	.+8      	; 0x15c6 <main+0xa0>
		cur_mode = SK;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	80 93 9a 01 	sts	0x019A, r24
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <main+0xa4>
	else
		cur_mode = KEYER;
    15c6:	10 92 9a 01 	sts	0x019A, r1

	announce("CC", st_freq);
    15ca:	20 91 b2 01 	lds	r18, 0x01B2
    15ce:	30 91 b3 01 	lds	r19, 0x01B3
    15d2:	8d e1       	ldi	r24, 0x1D	; 29
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	b9 01       	movw	r22, r18
    15d8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    15dc:	f8 94       	cli
		cur_timer = timer;
    15de:	80 91 66 01 	lds	r24, 0x0166
    15e2:	90 91 67 01 	lds	r25, 0x0167
    15e6:	a0 91 68 01 	lds	r26, 0x0168
    15ea:	b0 91 69 01 	lds	r27, 0x0169
    15ee:	80 93 60 01 	sts	0x0160, r24
    15f2:	90 93 61 01 	sts	0x0161, r25
    15f6:	a0 93 62 01 	sts	0x0162, r26
    15fa:	b0 93 63 01 	sts	0x0163, r27
		sei();
    15fe:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    1600:	80 91 9a 01 	lds	r24, 0x019A
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <main+0xea>
    160e:	39 c6       	rjmp	.+3186   	; 0x2282 <main+0xd5c>
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	91 05       	cpc	r25, r1
    1614:	64 f4       	brge	.+24     	; 0x162e <main+0x108>
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	f1 f0       	breq	.+60     	; 0x1658 <main+0x132>
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	91 05       	cpc	r25, r1
    1620:	0c f0       	brlt	.+2      	; 0x1624 <main+0xfe>
    1622:	84 c4       	rjmp	.+2312   	; 0x1f2c <main+0xa06>
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	09 f4       	brne	.+2      	; 0x162a <main+0x104>
    1628:	d5 c0       	rjmp	.+426    	; 0x17d4 <main+0x2ae>
    162a:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <main+0x1efe>
    162e:	85 30       	cpi	r24, 0x05	; 5
    1630:	91 05       	cpc	r25, r1
    1632:	11 f4       	brne	.+4      	; 0x1638 <main+0x112>
    1634:	0c 94 96 13 	jmp	0x272c	; 0x272c <main+0x1206>
    1638:	85 30       	cpi	r24, 0x05	; 5
    163a:	91 05       	cpc	r25, r1
    163c:	0c f4       	brge	.+2      	; 0x1640 <main+0x11a>
    163e:	e2 c6       	rjmp	.+3524   	; 0x2404 <main+0xede>
    1640:	86 30       	cpi	r24, 0x06	; 6
    1642:	91 05       	cpc	r25, r1
    1644:	11 f4       	brne	.+4      	; 0x164a <main+0x124>
    1646:	0c 94 48 14 	jmp	0x2890	; 0x2890 <main+0x136a>
    164a:	87 30       	cpi	r24, 0x07	; 7
    164c:	91 05       	cpc	r25, r1
    164e:	11 f4       	brne	.+4      	; 0x1654 <main+0x12e>
    1650:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <main+0x184e>
    1654:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <main+0x1efe>
		{
		case SK:
			default_mode = SK;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	80 93 65 01 	sts	0x0165, r24
			switch(cur_state)
    165e:	80 91 bc 01 	lds	r24, 0x01BC
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	87 30       	cpi	r24, 0x07	; 7
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <main+0x148>
    166c:	4b c0       	rjmp	.+150    	; 0x1704 <main+0x1de>
    166e:	8c 30       	cpi	r24, 0x0C	; 12
    1670:	91 05       	cpc	r25, r1
    1672:	09 f4       	brne	.+2      	; 0x1676 <main+0x150>
    1674:	88 c0       	rjmp	.+272    	; 0x1786 <main+0x260>
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	09 f0       	breq	.+2      	; 0x167e <main+0x158>
    167c:	a4 c0       	rjmp	.+328    	; 0x17c6 <main+0x2a0>
			{
			case IDLE:
				key_down = FALSE;
    167e:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1682:	10 92 32 01 	sts	0x0132, r1
				if(allow_sleep == TRUE)
    1686:	80 91 0a 01 	lds	r24, 0x010A
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	19 f4       	brne	.+6      	; 0x1694 <main+0x16e>
					mute_on = FALSE;
    168e:	10 92 33 01 	sts	0x0133, r1
    1692:	03 c0       	rjmp	.+6      	; 0x169a <main+0x174>
				else
					mute_on = TRUE;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	80 93 33 01 	sts	0x0133, r24

				if(dit_active == TRUE)
    169a:	80 91 ca 01 	lds	r24, 0x01CA
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	69 f5       	brne	.+90     	; 0x16fc <main+0x1d6>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    16a2:	80 91 60 01 	lds	r24, 0x0160
    16a6:	90 91 61 01 	lds	r25, 0x0161
    16aa:	a0 91 62 01 	lds	r26, 0x0162
    16ae:	b0 91 63 01 	lds	r27, 0x0163
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	a1 1d       	adc	r26, r1
    16b6:	b1 1d       	adc	r27, r1
    16b8:	80 93 a0 01 	sts	0x01A0, r24
    16bc:	90 93 a1 01 	sts	0x01A1, r25
    16c0:	a0 93 a2 01 	sts	0x01A2, r26
    16c4:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = UINT32_MAX;
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	dc 01       	movw	r26, r24
    16ce:	80 93 d7 01 	sts	0x01D7, r24
    16d2:	90 93 d8 01 	sts	0x01D8, r25
    16d6:	a0 93 d9 01 	sts	0x01D9, r26
    16da:	b0 93 da 01 	sts	0x01DA, r27
					cur_state_end = UINT32_MAX;
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	9f ef       	ldi	r25, 0xFF	; 255
    16e2:	dc 01       	movw	r26, r24
    16e4:	80 93 c2 01 	sts	0x01C2, r24
    16e8:	90 93 c3 01 	sts	0x01C3, r25
    16ec:	a0 93 c4 01 	sts	0x01C4, r26
    16f0:	b0 93 c5 01 	sts	0x01C5, r27
					cur_state = KEYDOWN;
    16f4:	87 e0       	ldi	r24, 0x07	; 7
    16f6:	80 93 bc 01 	sts	0x01BC, r24
				}
				else
				{
					cur_state = IDLE;
				}
				break;
    16fa:	68 c0       	rjmp	.+208    	; 0x17cc <main+0x2a6>
					cur_state_end = UINT32_MAX;
					cur_state = KEYDOWN;
				}
				else
				{
					cur_state = IDLE;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	80 93 bc 01 	sts	0x01BC, r24
				}
				break;
    1702:	64 c0       	rjmp	.+200    	; 0x17cc <main+0x2a6>

			case KEYDOWN:
				key_down = TRUE;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 33 01 	sts	0x0133, r24

				if(dit_active == FALSE)
    1716:	80 91 ca 01 	lds	r24, 0x01CA
    171a:	88 23       	and	r24, r24
    171c:	41 f5       	brne	.+80     	; 0x176e <main+0x248>
				{
					cur_state = EXIT;
    171e:	8c e0       	ldi	r24, 0x0C	; 12
    1720:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    1724:	80 91 60 01 	lds	r24, 0x0160
    1728:	90 91 61 01 	lds	r25, 0x0161
    172c:	a0 91 62 01 	lds	r26, 0x0162
    1730:	b0 91 63 01 	lds	r27, 0x0163
    1734:	8c 59       	subi	r24, 0x9C	; 156
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	af 4f       	sbci	r26, 0xFF	; 255
    173a:	bf 4f       	sbci	r27, 0xFF	; 255
    173c:	80 93 c2 01 	sts	0x01C2, r24
    1740:	90 93 c3 01 	sts	0x01C3, r25
    1744:	a0 93 c4 01 	sts	0x01C4, r26
    1748:	b0 93 c5 01 	sts	0x01C5, r27
					tx_end = cur_timer;
    174c:	80 91 60 01 	lds	r24, 0x0160
    1750:	90 91 61 01 	lds	r25, 0x0161
    1754:	a0 91 62 01 	lds	r26, 0x0162
    1758:	b0 91 63 01 	lds	r27, 0x0163
    175c:	80 93 d7 01 	sts	0x01D7, r24
    1760:	90 93 d8 01 	sts	0x01D8, r25
    1764:	a0 93 d9 01 	sts	0x01D9, r26
    1768:	b0 93 da 01 	sts	0x01DA, r27
				}
				else
					tx_end = UINT32_MAX;
				break;
    176c:	2f c0       	rjmp	.+94     	; 0x17cc <main+0x2a6>
					cur_state = EXIT;
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
					tx_end = cur_timer;
				}
				else
					tx_end = UINT32_MAX;
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	9f ef       	ldi	r25, 0xFF	; 255
    1772:	dc 01       	movw	r26, r24
    1774:	80 93 d7 01 	sts	0x01D7, r24
    1778:	90 93 d8 01 	sts	0x01D8, r25
    177c:	a0 93 d9 01 	sts	0x01D9, r26
    1780:	b0 93 da 01 	sts	0x01DA, r27
				break;
    1784:	23 c0       	rjmp	.+70     	; 0x17cc <main+0x2a6>

			case EXIT:
				key_down = FALSE;
    1786:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    178a:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer >= cur_state_end)
    1794:	20 91 60 01 	lds	r18, 0x0160
    1798:	30 91 61 01 	lds	r19, 0x0161
    179c:	40 91 62 01 	lds	r20, 0x0162
    17a0:	50 91 63 01 	lds	r21, 0x0163
    17a4:	80 91 c2 01 	lds	r24, 0x01C2
    17a8:	90 91 c3 01 	lds	r25, 0x01C3
    17ac:	a0 91 c4 01 	lds	r26, 0x01C4
    17b0:	b0 91 c5 01 	lds	r27, 0x01C5
    17b4:	28 17       	cp	r18, r24
    17b6:	39 07       	cpc	r19, r25
    17b8:	4a 07       	cpc	r20, r26
    17ba:	5b 07       	cpc	r21, r27
    17bc:	30 f0       	brcs	.+12     	; 0x17ca <main+0x2a4>
					cur_state = IDLE;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 93 bc 01 	sts	0x01BC, r24
				break;
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <main+0x2a6>

			default:
				break;
    17c6:	00 00       	nop
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <main+0x2a6>
				sidetone_on = FALSE;
				mute_on = TRUE;

				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;
    17ca:	00 00       	nop

			default:
				break;
			}

			poll_buttons();
    17cc:	0e 94 bc 07 	call	0xf78	; 0xf78 <poll_buttons>
				sleep_disable();
			}
			sei();
			*/

			break;
    17d0:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <main+0x1f00>

		case KEYER:
			default_mode = KEYER;
    17d4:	10 92 65 01 	sts	0x0165, r1
			poll_buttons();
    17d8:	0e 94 bc 07 	call	0xf78	; 0xf78 <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    17dc:	80 91 bc 01 	lds	r24, 0x01BC
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	83 30       	cpi	r24, 0x03	; 3
    17e6:	91 05       	cpc	r25, r1
    17e8:	09 f4       	brne	.+2      	; 0x17ec <main+0x2c6>
    17ea:	ef c1       	rjmp	.+990    	; 0x1bca <main+0x6a4>
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	91 05       	cpc	r25, r1
    17f0:	44 f4       	brge	.+16     	; 0x1802 <main+0x2dc>
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	71 f0       	breq	.+28     	; 0x1814 <main+0x2ee>
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	91 05       	cpc	r25, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <main+0x2da>
    17fe:	75 c1       	rjmp	.+746    	; 0x1aea <main+0x5c4>
    1800:	92 c3       	rjmp	.+1828   	; 0x1f26 <main+0xa00>
    1802:	84 30       	cpi	r24, 0x04	; 4
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <main+0x2e4>
    1808:	50 c2       	rjmp	.+1184   	; 0x1caa <main+0x784>
    180a:	8c 30       	cpi	r24, 0x0C	; 12
    180c:	91 05       	cpc	r25, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <main+0x2ec>
    1810:	6b c3       	rjmp	.+1750   	; 0x1ee8 <main+0x9c2>
    1812:	89 c3       	rjmp	.+1810   	; 0x1f26 <main+0xa00>
			{
			case IDLE:
				key_down = FALSE;
    1814:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1818:	10 92 32 01 	sts	0x0132, r1
				mute_on = FALSE;
    181c:	10 92 33 01 	sts	0x0133, r1
				mute_end = cur_timer;
    1820:	80 91 60 01 	lds	r24, 0x0160
    1824:	90 91 61 01 	lds	r25, 0x0161
    1828:	a0 91 62 01 	lds	r26, 0x0162
    182c:	b0 91 63 01 	lds	r27, 0x0163
    1830:	80 93 c6 01 	sts	0x01C6, r24
    1834:	90 93 c7 01 	sts	0x01C7, r25
    1838:	a0 93 c8 01 	sts	0x01C8, r26
    183c:	b0 93 c9 01 	sts	0x01C9, r27
					mute_on = FALSE;
				else
					mute_on = TRUE;
				*/
				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    1840:	80 91 ca 01 	lds	r24, 0x01CA
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	09 f0       	breq	.+2      	; 0x184a <main+0x324>
    1848:	68 c0       	rjmp	.+208    	; 0x191a <main+0x3f4>
    184a:	80 91 b8 01 	lds	r24, 0x01B8
    184e:	88 23       	and	r24, r24
    1850:	09 f0       	breq	.+2      	; 0x1854 <main+0x32e>
    1852:	63 c0       	rjmp	.+198    	; 0x191a <main+0x3f4>
				{
					prev_state = IDLE;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	80 93 bc 01 	sts	0x01BC, r24
					next_state = IDLE;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    1866:	80 91 6b 01 	lds	r24, 0x016B
    186a:	90 91 6c 01 	lds	r25, 0x016C
    186e:	9c 01       	movw	r18, r24
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	80 91 60 01 	lds	r24, 0x0160
    1878:	90 91 61 01 	lds	r25, 0x0161
    187c:	a0 91 62 01 	lds	r26, 0x0162
    1880:	b0 91 63 01 	lds	r27, 0x0163
    1884:	82 0f       	add	r24, r18
    1886:	93 1f       	adc	r25, r19
    1888:	a4 1f       	adc	r26, r20
    188a:	b5 1f       	adc	r27, r21
    188c:	80 93 c2 01 	sts	0x01C2, r24
    1890:	90 93 c3 01 	sts	0x01C3, r25
    1894:	a0 93 c4 01 	sts	0x01C4, r26
    1898:	b0 93 c5 01 	sts	0x01C5, r27
					tx_start = cur_timer + TX_ON_DELAY;
    189c:	80 91 60 01 	lds	r24, 0x0160
    18a0:	90 91 61 01 	lds	r25, 0x0161
    18a4:	a0 91 62 01 	lds	r26, 0x0162
    18a8:	b0 91 63 01 	lds	r27, 0x0163
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	a1 1d       	adc	r26, r1
    18b0:	b1 1d       	adc	r27, r1
    18b2:	80 93 a0 01 	sts	0x01A0, r24
    18b6:	90 93 a1 01 	sts	0x01A1, r25
    18ba:	a0 93 a2 01 	sts	0x01A2, r26
    18be:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    18c2:	80 91 c2 01 	lds	r24, 0x01C2
    18c6:	90 91 c3 01 	lds	r25, 0x01C3
    18ca:	a0 91 c4 01 	lds	r26, 0x01C4
    18ce:	b0 91 c5 01 	lds	r27, 0x01C5
    18d2:	80 93 d7 01 	sts	0x01D7, r24
    18d6:	90 93 d8 01 	sts	0x01D8, r25
    18da:	a0 93 d9 01 	sts	0x01D9, r26
    18de:	b0 93 da 01 	sts	0x01DA, r27
					mute_start = cur_timer;
    18e2:	80 91 60 01 	lds	r24, 0x0160
    18e6:	90 91 61 01 	lds	r25, 0x0161
    18ea:	a0 91 62 01 	lds	r26, 0x0162
    18ee:	b0 91 63 01 	lds	r27, 0x0163
    18f2:	80 93 d1 01 	sts	0x01D1, r24
    18f6:	90 93 d2 01 	sts	0x01D2, r25
    18fa:	a0 93 d3 01 	sts	0x01D3, r26
    18fe:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = UINT32_MAX;
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	9f ef       	ldi	r25, 0xFF	; 255
    1906:	dc 01       	movw	r26, r24
    1908:	80 93 c6 01 	sts	0x01C6, r24
    190c:	90 93 c7 01 	sts	0x01C7, r25
    1910:	a0 93 c8 01 	sts	0x01C8, r26
    1914:	b0 93 c9 01 	sts	0x01C9, r27
    1918:	e7 c0       	rjmp	.+462    	; 0x1ae8 <main+0x5c2>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    191a:	80 91 b8 01 	lds	r24, 0x01B8
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	09 f0       	breq	.+2      	; 0x1924 <main+0x3fe>
    1922:	6d c0       	rjmp	.+218    	; 0x19fe <main+0x4d8>
    1924:	80 91 ca 01 	lds	r24, 0x01CA
    1928:	88 23       	and	r24, r24
    192a:	09 f0       	breq	.+2      	; 0x192e <main+0x408>
    192c:	68 c0       	rjmp	.+208    	; 0x19fe <main+0x4d8>
				{
					prev_state = IDLE;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DAH;
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	80 93 bc 01 	sts	0x01BC, r24
					next_state = IDLE;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + (dit_length * 3);
    1940:	20 91 6b 01 	lds	r18, 0x016B
    1944:	30 91 6c 01 	lds	r19, 0x016C
    1948:	c9 01       	movw	r24, r18
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	82 0f       	add	r24, r18
    1950:	93 1f       	adc	r25, r19
    1952:	9c 01       	movw	r18, r24
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	80 91 60 01 	lds	r24, 0x0160
    195c:	90 91 61 01 	lds	r25, 0x0161
    1960:	a0 91 62 01 	lds	r26, 0x0162
    1964:	b0 91 63 01 	lds	r27, 0x0163
    1968:	82 0f       	add	r24, r18
    196a:	93 1f       	adc	r25, r19
    196c:	a4 1f       	adc	r26, r20
    196e:	b5 1f       	adc	r27, r21
    1970:	80 93 c2 01 	sts	0x01C2, r24
    1974:	90 93 c3 01 	sts	0x01C3, r25
    1978:	a0 93 c4 01 	sts	0x01C4, r26
    197c:	b0 93 c5 01 	sts	0x01C5, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1980:	80 91 60 01 	lds	r24, 0x0160
    1984:	90 91 61 01 	lds	r25, 0x0161
    1988:	a0 91 62 01 	lds	r26, 0x0162
    198c:	b0 91 63 01 	lds	r27, 0x0163
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	a1 1d       	adc	r26, r1
    1994:	b1 1d       	adc	r27, r1
    1996:	80 93 a0 01 	sts	0x01A0, r24
    199a:	90 93 a1 01 	sts	0x01A1, r25
    199e:	a0 93 a2 01 	sts	0x01A2, r26
    19a2:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    19a6:	80 91 c2 01 	lds	r24, 0x01C2
    19aa:	90 91 c3 01 	lds	r25, 0x01C3
    19ae:	a0 91 c4 01 	lds	r26, 0x01C4
    19b2:	b0 91 c5 01 	lds	r27, 0x01C5
    19b6:	80 93 d7 01 	sts	0x01D7, r24
    19ba:	90 93 d8 01 	sts	0x01D8, r25
    19be:	a0 93 d9 01 	sts	0x01D9, r26
    19c2:	b0 93 da 01 	sts	0x01DA, r27
					mute_start = cur_timer;
    19c6:	80 91 60 01 	lds	r24, 0x0160
    19ca:	90 91 61 01 	lds	r25, 0x0161
    19ce:	a0 91 62 01 	lds	r26, 0x0162
    19d2:	b0 91 63 01 	lds	r27, 0x0163
    19d6:	80 93 d1 01 	sts	0x01D1, r24
    19da:	90 93 d2 01 	sts	0x01D2, r25
    19de:	a0 93 d3 01 	sts	0x01D3, r26
    19e2:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = UINT32_MAX;
    19e6:	8f ef       	ldi	r24, 0xFF	; 255
    19e8:	9f ef       	ldi	r25, 0xFF	; 255
    19ea:	dc 01       	movw	r26, r24
    19ec:	80 93 c6 01 	sts	0x01C6, r24
    19f0:	90 93 c7 01 	sts	0x01C7, r25
    19f4:	a0 93 c8 01 	sts	0x01C8, r26
    19f8:	b0 93 c9 01 	sts	0x01C9, r27
    19fc:	75 c0       	rjmp	.+234    	; 0x1ae8 <main+0x5c2>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    19fe:	80 91 ca 01 	lds	r24, 0x01CA
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <main+0x4e2>
    1a06:	6d c0       	rjmp	.+218    	; 0x1ae2 <main+0x5bc>
    1a08:	80 91 b8 01 	lds	r24, 0x01B8
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <main+0x4ec>
    1a10:	68 c0       	rjmp	.+208    	; 0x1ae2 <main+0x5bc>
    1a12:	80 91 9f 01 	lds	r24, 0x019F
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <main+0x4f6>
    1a1a:	63 c0       	rjmp	.+198    	; 0x1ae2 <main+0x5bc>
				{
					prev_state = IDLE;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	80 93 bc 01 	sts	0x01BC, r24
					next_state = DAH;
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    1a2e:	80 91 6b 01 	lds	r24, 0x016B
    1a32:	90 91 6c 01 	lds	r25, 0x016C
    1a36:	9c 01       	movw	r18, r24
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	80 91 60 01 	lds	r24, 0x0160
    1a40:	90 91 61 01 	lds	r25, 0x0161
    1a44:	a0 91 62 01 	lds	r26, 0x0162
    1a48:	b0 91 63 01 	lds	r27, 0x0163
    1a4c:	82 0f       	add	r24, r18
    1a4e:	93 1f       	adc	r25, r19
    1a50:	a4 1f       	adc	r26, r20
    1a52:	b5 1f       	adc	r27, r21
    1a54:	80 93 c2 01 	sts	0x01C2, r24
    1a58:	90 93 c3 01 	sts	0x01C3, r25
    1a5c:	a0 93 c4 01 	sts	0x01C4, r26
    1a60:	b0 93 c5 01 	sts	0x01C5, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1a64:	80 91 60 01 	lds	r24, 0x0160
    1a68:	90 91 61 01 	lds	r25, 0x0161
    1a6c:	a0 91 62 01 	lds	r26, 0x0162
    1a70:	b0 91 63 01 	lds	r27, 0x0163
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	a1 1d       	adc	r26, r1
    1a78:	b1 1d       	adc	r27, r1
    1a7a:	80 93 a0 01 	sts	0x01A0, r24
    1a7e:	90 93 a1 01 	sts	0x01A1, r25
    1a82:	a0 93 a2 01 	sts	0x01A2, r26
    1a86:	b0 93 a3 01 	sts	0x01A3, r27
					tx_end = cur_state_end;
    1a8a:	80 91 c2 01 	lds	r24, 0x01C2
    1a8e:	90 91 c3 01 	lds	r25, 0x01C3
    1a92:	a0 91 c4 01 	lds	r26, 0x01C4
    1a96:	b0 91 c5 01 	lds	r27, 0x01C5
    1a9a:	80 93 d7 01 	sts	0x01D7, r24
    1a9e:	90 93 d8 01 	sts	0x01D8, r25
    1aa2:	a0 93 d9 01 	sts	0x01D9, r26
    1aa6:	b0 93 da 01 	sts	0x01DA, r27
					mute_start = cur_timer;
    1aaa:	80 91 60 01 	lds	r24, 0x0160
    1aae:	90 91 61 01 	lds	r25, 0x0161
    1ab2:	a0 91 62 01 	lds	r26, 0x0162
    1ab6:	b0 91 63 01 	lds	r27, 0x0163
    1aba:	80 93 d1 01 	sts	0x01D1, r24
    1abe:	90 93 d2 01 	sts	0x01D2, r25
    1ac2:	a0 93 d3 01 	sts	0x01D3, r26
    1ac6:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = UINT32_MAX;
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	9f ef       	ldi	r25, 0xFF	; 255
    1ace:	dc 01       	movw	r26, r24
    1ad0:	80 93 c6 01 	sts	0x01C6, r24
    1ad4:	90 93 c7 01 	sts	0x01C7, r25
    1ad8:	a0 93 c8 01 	sts	0x01C8, r26
    1adc:	b0 93 c9 01 	sts	0x01C9, r27
    1ae0:	03 c0       	rjmp	.+6      	; 0x1ae8 <main+0x5c2>
				}
				else
				{
					cur_state = IDLE;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	80 93 bc 01 	sts	0x01BC, r24
				}

				break;
    1ae8:	1f c2       	rjmp	.+1086   	; 0x1f28 <main+0xa02>

			case DIT:
				key_down = TRUE;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer > cur_state_end)
    1afc:	20 91 60 01 	lds	r18, 0x0160
    1b00:	30 91 61 01 	lds	r19, 0x0161
    1b04:	40 91 62 01 	lds	r20, 0x0162
    1b08:	50 91 63 01 	lds	r21, 0x0163
    1b0c:	80 91 c2 01 	lds	r24, 0x01C2
    1b10:	90 91 c3 01 	lds	r25, 0x01C3
    1b14:	a0 91 c4 01 	lds	r26, 0x01C4
    1b18:	b0 91 c5 01 	lds	r27, 0x01C5
    1b1c:	82 17       	cp	r24, r18
    1b1e:	93 07       	cpc	r25, r19
    1b20:	a4 07       	cpc	r26, r20
    1b22:	b5 07       	cpc	r27, r21
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <main+0x602>
    1b26:	45 c0       	rjmp	.+138    	; 0x1bb2 <main+0x68c>
				{
					prev_state = DIT;
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    1b2e:	84 e0       	ldi	r24, 0x04	; 4
    1b30:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + dit_length;
    1b34:	80 91 6b 01 	lds	r24, 0x016B
    1b38:	90 91 6c 01 	lds	r25, 0x016C
    1b3c:	9c 01       	movw	r18, r24
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	80 91 60 01 	lds	r24, 0x0160
    1b46:	90 91 61 01 	lds	r25, 0x0161
    1b4a:	a0 91 62 01 	lds	r26, 0x0162
    1b4e:	b0 91 63 01 	lds	r27, 0x0163
    1b52:	82 0f       	add	r24, r18
    1b54:	93 1f       	adc	r25, r19
    1b56:	a4 1f       	adc	r26, r20
    1b58:	b5 1f       	adc	r27, r21
    1b5a:	80 93 c2 01 	sts	0x01C2, r24
    1b5e:	90 93 c3 01 	sts	0x01C3, r25
    1b62:	a0 93 c4 01 	sts	0x01C4, r26
    1b66:	b0 93 c5 01 	sts	0x01C5, r27
					mute_start = cur_timer;
    1b6a:	80 91 60 01 	lds	r24, 0x0160
    1b6e:	90 91 61 01 	lds	r25, 0x0161
    1b72:	a0 91 62 01 	lds	r26, 0x0162
    1b76:	b0 91 63 01 	lds	r27, 0x0163
    1b7a:	80 93 d1 01 	sts	0x01D1, r24
    1b7e:	90 93 d2 01 	sts	0x01D2, r25
    1b82:	a0 93 d3 01 	sts	0x01D3, r26
    1b86:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1b8a:	80 91 c2 01 	lds	r24, 0x01C2
    1b8e:	90 91 c3 01 	lds	r25, 0x01C3
    1b92:	a0 91 c4 01 	lds	r26, 0x01C4
    1b96:	b0 91 c5 01 	lds	r27, 0x01C5
    1b9a:	8c 59       	subi	r24, 0x9C	; 156
    1b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9e:	af 4f       	sbci	r26, 0xFF	; 255
    1ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba2:	80 93 c6 01 	sts	0x01C6, r24
    1ba6:	90 93 c7 01 	sts	0x01C7, r25
    1baa:	a0 93 c8 01 	sts	0x01C8, r26
    1bae:	b0 93 c9 01 	sts	0x01C9, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    1bb2:	80 91 b8 01 	lds	r24, 0x01B8
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	39 f4       	brne	.+14     	; 0x1bc8 <main+0x6a2>
    1bba:	80 91 9f 01 	lds	r24, 0x019F
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	19 f4       	brne	.+6      	; 0x1bc8 <main+0x6a2>
					next_state = DAH;
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	80 93 9f 01 	sts	0x019F, r24

				break;
    1bc8:	af c1       	rjmp	.+862    	; 0x1f28 <main+0xa02>

			case DAH:
				if(cur_timer > cur_state_end)
    1bca:	20 91 60 01 	lds	r18, 0x0160
    1bce:	30 91 61 01 	lds	r19, 0x0161
    1bd2:	40 91 62 01 	lds	r20, 0x0162
    1bd6:	50 91 63 01 	lds	r21, 0x0163
    1bda:	80 91 c2 01 	lds	r24, 0x01C2
    1bde:	90 91 c3 01 	lds	r25, 0x01C3
    1be2:	a0 91 c4 01 	lds	r26, 0x01C4
    1be6:	b0 91 c5 01 	lds	r27, 0x01C5
    1bea:	82 17       	cp	r24, r18
    1bec:	93 07       	cpc	r25, r19
    1bee:	a4 07       	cpc	r26, r20
    1bf0:	b5 07       	cpc	r27, r21
    1bf2:	08 f0       	brcs	.+2      	; 0x1bf6 <main+0x6d0>
    1bf4:	45 c0       	rjmp	.+138    	; 0x1c80 <main+0x75a>
				{
					prev_state = DAH;
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    1bfc:	84 e0       	ldi	r24, 0x04	; 4
    1bfe:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + dit_length;
    1c02:	80 91 6b 01 	lds	r24, 0x016B
    1c06:	90 91 6c 01 	lds	r25, 0x016C
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	80 91 60 01 	lds	r24, 0x0160
    1c14:	90 91 61 01 	lds	r25, 0x0161
    1c18:	a0 91 62 01 	lds	r26, 0x0162
    1c1c:	b0 91 63 01 	lds	r27, 0x0163
    1c20:	82 0f       	add	r24, r18
    1c22:	93 1f       	adc	r25, r19
    1c24:	a4 1f       	adc	r26, r20
    1c26:	b5 1f       	adc	r27, r21
    1c28:	80 93 c2 01 	sts	0x01C2, r24
    1c2c:	90 93 c3 01 	sts	0x01C3, r25
    1c30:	a0 93 c4 01 	sts	0x01C4, r26
    1c34:	b0 93 c5 01 	sts	0x01C5, r27
					mute_start = cur_timer;
    1c38:	80 91 60 01 	lds	r24, 0x0160
    1c3c:	90 91 61 01 	lds	r25, 0x0161
    1c40:	a0 91 62 01 	lds	r26, 0x0162
    1c44:	b0 91 63 01 	lds	r27, 0x0163
    1c48:	80 93 d1 01 	sts	0x01D1, r24
    1c4c:	90 93 d2 01 	sts	0x01D2, r25
    1c50:	a0 93 d3 01 	sts	0x01D3, r26
    1c54:	b0 93 d4 01 	sts	0x01D4, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    1c58:	80 91 c2 01 	lds	r24, 0x01C2
    1c5c:	90 91 c3 01 	lds	r25, 0x01C3
    1c60:	a0 91 c4 01 	lds	r26, 0x01C4
    1c64:	b0 91 c5 01 	lds	r27, 0x01C5
    1c68:	8c 59       	subi	r24, 0x9C	; 156
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	af 4f       	sbci	r26, 0xFF	; 255
    1c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c70:	80 93 c6 01 	sts	0x01C6, r24
    1c74:	90 93 c7 01 	sts	0x01C7, r25
    1c78:	a0 93 c8 01 	sts	0x01C8, r26
    1c7c:	b0 93 c9 01 	sts	0x01C9, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    1c80:	80 91 ca 01 	lds	r24, 0x01CA
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	39 f4       	brne	.+14     	; 0x1c96 <main+0x770>
    1c88:	80 91 9f 01 	lds	r24, 0x019F
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	19 f4       	brne	.+6      	; 0x1c96 <main+0x770>
					next_state = DIT;
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	80 93 9f 01 	sts	0x019F, r24

				key_down = TRUE;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	80 93 33 01 	sts	0x0133, r24
				break;
    1ca8:	3f c1       	rjmp	.+638    	; 0x1f28 <main+0xa02>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    1caa:	20 91 60 01 	lds	r18, 0x0160
    1cae:	30 91 61 01 	lds	r19, 0x0161
    1cb2:	40 91 62 01 	lds	r20, 0x0162
    1cb6:	50 91 63 01 	lds	r21, 0x0163
    1cba:	80 91 c2 01 	lds	r24, 0x01C2
    1cbe:	90 91 c3 01 	lds	r25, 0x01C3
    1cc2:	a0 91 c4 01 	lds	r26, 0x01C4
    1cc6:	b0 91 c5 01 	lds	r27, 0x01C5
    1cca:	82 17       	cp	r24, r18
    1ccc:	93 07       	cpc	r25, r19
    1cce:	a4 07       	cpc	r26, r20
    1cd0:	b5 07       	cpc	r27, r21
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <main+0x7b0>
    1cd4:	e2 c0       	rjmp	.+452    	; 0x1e9a <main+0x974>
				{
					if(next_state == DIT)
    1cd6:	80 91 9f 01 	lds	r24, 0x019F
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <main+0x7ba>
    1cde:	5d c0       	rjmp	.+186    	; 0x1d9a <main+0x874>
					{
						cur_state = DIT;
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer + dit_length;
    1ce6:	80 91 6b 01 	lds	r24, 0x016B
    1cea:	90 91 6c 01 	lds	r25, 0x016C
    1cee:	9c 01       	movw	r18, r24
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	80 91 60 01 	lds	r24, 0x0160
    1cf8:	90 91 61 01 	lds	r25, 0x0161
    1cfc:	a0 91 62 01 	lds	r26, 0x0162
    1d00:	b0 91 63 01 	lds	r27, 0x0163
    1d04:	82 0f       	add	r24, r18
    1d06:	93 1f       	adc	r25, r19
    1d08:	a4 1f       	adc	r26, r20
    1d0a:	b5 1f       	adc	r27, r21
    1d0c:	80 93 c2 01 	sts	0x01C2, r24
    1d10:	90 93 c3 01 	sts	0x01C3, r25
    1d14:	a0 93 c4 01 	sts	0x01C4, r26
    1d18:	b0 93 c5 01 	sts	0x01C5, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1d1c:	80 91 60 01 	lds	r24, 0x0160
    1d20:	90 91 61 01 	lds	r25, 0x0161
    1d24:	a0 91 62 01 	lds	r26, 0x0162
    1d28:	b0 91 63 01 	lds	r27, 0x0163
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	a1 1d       	adc	r26, r1
    1d30:	b1 1d       	adc	r27, r1
    1d32:	80 93 a0 01 	sts	0x01A0, r24
    1d36:	90 93 a1 01 	sts	0x01A1, r25
    1d3a:	a0 93 a2 01 	sts	0x01A2, r26
    1d3e:	b0 93 a3 01 	sts	0x01A3, r27
						tx_end = cur_state_end;
    1d42:	80 91 c2 01 	lds	r24, 0x01C2
    1d46:	90 91 c3 01 	lds	r25, 0x01C3
    1d4a:	a0 91 c4 01 	lds	r26, 0x01C4
    1d4e:	b0 91 c5 01 	lds	r27, 0x01C5
    1d52:	80 93 d7 01 	sts	0x01D7, r24
    1d56:	90 93 d8 01 	sts	0x01D8, r25
    1d5a:	a0 93 d9 01 	sts	0x01D9, r26
    1d5e:	b0 93 da 01 	sts	0x01DA, r27
						mute_start = cur_timer;
    1d62:	80 91 60 01 	lds	r24, 0x0160
    1d66:	90 91 61 01 	lds	r25, 0x0161
    1d6a:	a0 91 62 01 	lds	r26, 0x0162
    1d6e:	b0 91 63 01 	lds	r27, 0x0163
    1d72:	80 93 d1 01 	sts	0x01D1, r24
    1d76:	90 93 d2 01 	sts	0x01D2, r25
    1d7a:	a0 93 d3 01 	sts	0x01D3, r26
    1d7e:	b0 93 d4 01 	sts	0x01D4, r27
						mute_end = UINT32_MAX;
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	9f ef       	ldi	r25, 0xFF	; 255
    1d86:	dc 01       	movw	r26, r24
    1d88:	80 93 c6 01 	sts	0x01C6, r24
    1d8c:	90 93 c7 01 	sts	0x01C7, r25
    1d90:	a0 93 c8 01 	sts	0x01C8, r26
    1d94:	b0 93 c9 01 	sts	0x01C9, r27
    1d98:	7a c0       	rjmp	.+244    	; 0x1e8e <main+0x968>
					}
					else if(next_state == DAH)
    1d9a:	80 91 9f 01 	lds	r24, 0x019F
    1d9e:	83 30       	cpi	r24, 0x03	; 3
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <main+0x87e>
    1da2:	62 c0       	rjmp	.+196    	; 0x1e68 <main+0x942>
					{
						cur_state = DAH;
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer + (dit_length * 3);
    1daa:	20 91 6b 01 	lds	r18, 0x016B
    1dae:	30 91 6c 01 	lds	r19, 0x016C
    1db2:	c9 01       	movw	r24, r18
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	82 0f       	add	r24, r18
    1dba:	93 1f       	adc	r25, r19
    1dbc:	9c 01       	movw	r18, r24
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	80 91 60 01 	lds	r24, 0x0160
    1dc6:	90 91 61 01 	lds	r25, 0x0161
    1dca:	a0 91 62 01 	lds	r26, 0x0162
    1dce:	b0 91 63 01 	lds	r27, 0x0163
    1dd2:	82 0f       	add	r24, r18
    1dd4:	93 1f       	adc	r25, r19
    1dd6:	a4 1f       	adc	r26, r20
    1dd8:	b5 1f       	adc	r27, r21
    1dda:	80 93 c2 01 	sts	0x01C2, r24
    1dde:	90 93 c3 01 	sts	0x01C3, r25
    1de2:	a0 93 c4 01 	sts	0x01C4, r26
    1de6:	b0 93 c5 01 	sts	0x01C5, r27
						tx_start = cur_timer + TX_ON_DELAY;
    1dea:	80 91 60 01 	lds	r24, 0x0160
    1dee:	90 91 61 01 	lds	r25, 0x0161
    1df2:	a0 91 62 01 	lds	r26, 0x0162
    1df6:	b0 91 63 01 	lds	r27, 0x0163
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	b1 1d       	adc	r27, r1
    1e00:	80 93 a0 01 	sts	0x01A0, r24
    1e04:	90 93 a1 01 	sts	0x01A1, r25
    1e08:	a0 93 a2 01 	sts	0x01A2, r26
    1e0c:	b0 93 a3 01 	sts	0x01A3, r27
						tx_end = cur_state_end;
    1e10:	80 91 c2 01 	lds	r24, 0x01C2
    1e14:	90 91 c3 01 	lds	r25, 0x01C3
    1e18:	a0 91 c4 01 	lds	r26, 0x01C4
    1e1c:	b0 91 c5 01 	lds	r27, 0x01C5
    1e20:	80 93 d7 01 	sts	0x01D7, r24
    1e24:	90 93 d8 01 	sts	0x01D8, r25
    1e28:	a0 93 d9 01 	sts	0x01D9, r26
    1e2c:	b0 93 da 01 	sts	0x01DA, r27
						mute_start = cur_timer;
    1e30:	80 91 60 01 	lds	r24, 0x0160
    1e34:	90 91 61 01 	lds	r25, 0x0161
    1e38:	a0 91 62 01 	lds	r26, 0x0162
    1e3c:	b0 91 63 01 	lds	r27, 0x0163
    1e40:	80 93 d1 01 	sts	0x01D1, r24
    1e44:	90 93 d2 01 	sts	0x01D2, r25
    1e48:	a0 93 d3 01 	sts	0x01D3, r26
    1e4c:	b0 93 d4 01 	sts	0x01D4, r27
						mute_end = UINT32_MAX;
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	9f ef       	ldi	r25, 0xFF	; 255
    1e54:	dc 01       	movw	r26, r24
    1e56:	80 93 c6 01 	sts	0x01C6, r24
    1e5a:	90 93 c7 01 	sts	0x01C7, r25
    1e5e:	a0 93 c8 01 	sts	0x01C8, r26
    1e62:	b0 93 c9 01 	sts	0x01C9, r27
    1e66:	13 c0       	rjmp	.+38     	; 0x1e8e <main+0x968>
					}
					else
					{
						cur_state = IDLE;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer;
    1e6e:	80 91 60 01 	lds	r24, 0x0160
    1e72:	90 91 61 01 	lds	r25, 0x0161
    1e76:	a0 91 62 01 	lds	r26, 0x0162
    1e7a:	b0 91 63 01 	lds	r27, 0x0163
    1e7e:	80 93 c2 01 	sts	0x01C2, r24
    1e82:	90 93 c3 01 	sts	0x01C3, r25
    1e86:	a0 93 c4 01 	sts	0x01C4, r26
    1e8a:	b0 93 c5 01 	sts	0x01C5, r27
					}

					prev_state = DITDELAY;
    1e8e:	84 e0       	ldi	r24, 0x04	; 4
    1e90:	80 93 6a 01 	sts	0x016A, r24
					next_state = IDLE;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 9f 01 	sts	0x019F, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    1e9a:	80 91 ca 01 	lds	r24, 0x01CA
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	61 f4       	brne	.+24     	; 0x1eba <main+0x994>
    1ea2:	80 91 6a 01 	lds	r24, 0x016A
    1ea6:	83 30       	cpi	r24, 0x03	; 3
    1ea8:	41 f4       	brne	.+16     	; 0x1eba <main+0x994>
    1eaa:	80 91 9f 01 	lds	r24, 0x019F
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	21 f4       	brne	.+8      	; 0x1eba <main+0x994>
					next_state = DIT;
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	80 93 9f 01 	sts	0x019F, r24
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <main+0x9b2>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    1eba:	80 91 b8 01 	lds	r24, 0x01B8
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	59 f4       	brne	.+22     	; 0x1ed8 <main+0x9b2>
    1ec2:	80 91 6a 01 	lds	r24, 0x016A
    1ec6:	82 30       	cpi	r24, 0x02	; 2
    1ec8:	39 f4       	brne	.+14     	; 0x1ed8 <main+0x9b2>
    1eca:	80 91 9f 01 	lds	r24, 0x019F
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	19 f4       	brne	.+6      	; 0x1ed8 <main+0x9b2>
					next_state = DAH;
    1ed2:	83 e0       	ldi	r24, 0x03	; 3
    1ed4:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    1ed8:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1edc:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	80 93 33 01 	sts	0x0133, r24
				break;
    1ee6:	20 c0       	rjmp	.+64     	; 0x1f28 <main+0xa02>

			case EXIT:
				key_down = FALSE;
    1ee8:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    1eec:	10 92 32 01 	sts	0x0132, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    1ef0:	10 92 33 01 	sts	0x0133, r1

				if(cur_timer > cur_state_end)
    1ef4:	20 91 60 01 	lds	r18, 0x0160
    1ef8:	30 91 61 01 	lds	r19, 0x0161
    1efc:	40 91 62 01 	lds	r20, 0x0162
    1f00:	50 91 63 01 	lds	r21, 0x0163
    1f04:	80 91 c2 01 	lds	r24, 0x01C2
    1f08:	90 91 c3 01 	lds	r25, 0x01C3
    1f0c:	a0 91 c4 01 	lds	r26, 0x01C4
    1f10:	b0 91 c5 01 	lds	r27, 0x01C5
    1f14:	82 17       	cp	r24, r18
    1f16:	93 07       	cpc	r25, r19
    1f18:	a4 07       	cpc	r26, r20
    1f1a:	b5 07       	cpc	r27, r21
    1f1c:	18 f4       	brcc	.+6      	; 0x1f24 <main+0x9fe>
				{
					cur_state = IDLE;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 bc 01 	sts	0x01BC, r24
				}
				break;
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <main+0xa02>

			default:
				break;
    1f26:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    1f28:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <main+0x1f00>

		case ANNOUNCE:
			switch(cur_state)
    1f2c:	80 91 bc 01 	lds	r24, 0x01BC
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	84 30       	cpi	r24, 0x04	; 4
    1f36:	91 05       	cpc	r25, r1
    1f38:	44 f4       	brge	.+16     	; 0x1f4a <main+0xa24>
    1f3a:	82 30       	cpi	r24, 0x02	; 2
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	0c f0       	brlt	.+2      	; 0x1f42 <main+0xa1c>
    1f40:	41 c1       	rjmp	.+642    	; 0x21c4 <main+0xc9e>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	91 05       	cpc	r25, r1
    1f46:	31 f0       	breq	.+12     	; 0x1f54 <main+0xa2e>
    1f48:	99 c1       	rjmp	.+818    	; 0x227c <main+0xd56>
    1f4a:	87 30       	cpi	r24, 0x07	; 7
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	0c f0       	brlt	.+2      	; 0x1f52 <main+0xa2c>
    1f50:	95 c1       	rjmp	.+810    	; 0x227c <main+0xd56>
    1f52:	74 c1       	rjmp	.+744    	; 0x223c <main+0xd16>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    1f54:	20 91 36 01 	lds	r18, 0x0136
    1f58:	30 91 37 01 	lds	r19, 0x0137
    1f5c:	80 91 d5 01 	lds	r24, 0x01D5
    1f60:	90 91 d6 01 	lds	r25, 0x01D6
    1f64:	28 17       	cp	r18, r24
    1f66:	39 07       	cpc	r19, r25
    1f68:	c9 f4       	brne	.+50     	; 0x1f9c <main+0xa76>
    1f6a:	80 91 3a 01 	lds	r24, 0x013A
    1f6e:	88 23       	and	r24, r24
    1f70:	a9 f4       	brne	.+42     	; 0x1f9c <main+0xa76>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    1f72:	80 91 36 01 	lds	r24, 0x0136
    1f76:	90 91 37 01 	lds	r25, 0x0137
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	80 97       	sbiw	r24, 0x20	; 32
    1f84:	88 59       	subi	r24, 0x98	; 152
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	9b 83       	std	Y+3, r25	; 0x03
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	fc 01       	movw	r30, r24
    1f92:	14 91       	lpm	r17, Z+
    1f94:	1c 83       	std	Y+4, r17	; 0x04
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	80 93 3a 01 	sts	0x013A, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    1f9c:	80 91 3a 01 	lds	r24, 0x013A
    1fa0:	88 23       	and	r24, r24
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <main+0xa80>
    1fa4:	ce c0       	rjmp	.+412    	; 0x2142 <main+0xc1c>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    1fa6:	80 91 3a 01 	lds	r24, 0x013A
    1faa:	80 38       	cpi	r24, 0x80	; 128
    1fac:	29 f0       	breq	.+10     	; 0x1fb8 <main+0xa92>
    1fae:	80 91 3a 01 	lds	r24, 0x013A
    1fb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <main+0xa92>
    1fb6:	79 c0       	rjmp	.+242    	; 0x20aa <main+0xb84>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    1fb8:	80 91 3a 01 	lds	r24, 0x013A
    1fbc:	80 38       	cpi	r24, 0x80	; 128
    1fbe:	21 f5       	brne	.+72     	; 0x2008 <main+0xae2>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    1fc0:	20 91 6b 01 	lds	r18, 0x016B
    1fc4:	30 91 6c 01 	lds	r19, 0x016C
    1fc8:	c9 01       	movw	r24, r18
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	82 0f       	add	r24, r18
    1fd0:	93 1f       	adc	r25, r19
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	80 91 60 01 	lds	r24, 0x0160
    1fdc:	90 91 61 01 	lds	r25, 0x0161
    1fe0:	a0 91 62 01 	lds	r26, 0x0162
    1fe4:	b0 91 63 01 	lds	r27, 0x0163
    1fe8:	82 0f       	add	r24, r18
    1fea:	93 1f       	adc	r25, r19
    1fec:	a4 1f       	adc	r26, r20
    1fee:	b5 1f       	adc	r27, r21
    1ff0:	80 93 c2 01 	sts	0x01C2, r24
    1ff4:	90 93 c3 01 	sts	0x01C3, r25
    1ff8:	a0 93 c4 01 	sts	0x01C4, r26
    1ffc:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAHDELAY;
    2000:	85 e0       	ldi	r24, 0x05	; 5
    2002:	80 93 bc 01 	sts	0x01BC, r24
    2006:	27 c0       	rjmp	.+78     	; 0x2056 <main+0xb30>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2008:	20 91 6b 01 	lds	r18, 0x016B
    200c:	30 91 6c 01 	lds	r19, 0x016C
    2010:	c9 01       	movw	r24, r18
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	82 1b       	sub	r24, r18
    2020:	93 0b       	sbc	r25, r19
    2022:	9c 01       	movw	r18, r24
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	80 91 60 01 	lds	r24, 0x0160
    202c:	90 91 61 01 	lds	r25, 0x0161
    2030:	a0 91 62 01 	lds	r26, 0x0162
    2034:	b0 91 63 01 	lds	r27, 0x0163
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	a4 1f       	adc	r26, r20
    203e:	b5 1f       	adc	r27, r21
    2040:	80 93 c2 01 	sts	0x01C2, r24
    2044:	90 93 c3 01 	sts	0x01C3, r25
    2048:	a0 93 c4 01 	sts	0x01C4, r26
    204c:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAHDELAY;
    2050:	85 e0       	ldi	r24, 0x05	; 5
    2052:	80 93 bc 01 	sts	0x01BC, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    2056:	80 91 36 01 	lds	r24, 0x0136
    205a:	90 91 37 01 	lds	r25, 0x0137
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	90 93 37 01 	sts	0x0137, r25
    2064:	80 93 36 01 	sts	0x0136, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2068:	80 91 36 01 	lds	r24, 0x0136
    206c:	90 91 37 01 	lds	r25, 0x0137
    2070:	fc 01       	movw	r30, r24
    2072:	80 81       	ld	r24, Z
    2074:	88 23       	and	r24, r24
    2076:	19 f4       	brne	.+6      	; 0x207e <main+0xb58>
							cur_character = '\0';
    2078:	10 92 3a 01 	sts	0x013A, r1
    207c:	15 c0       	rjmp	.+42     	; 0x20a8 <main+0xb82>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    207e:	80 91 36 01 	lds	r24, 0x0136
    2082:	90 91 37 01 	lds	r25, 0x0137
    2086:	fc 01       	movw	r30, r24
    2088:	80 81       	ld	r24, Z
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	80 97       	sbiw	r24, 0x20	; 32
    2090:	88 59       	subi	r24, 0x98	; 152
    2092:	9f 4f       	sbci	r25, 0xFF	; 255
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	fc 01       	movw	r30, r24
    209e:	14 91       	lpm	r17, Z+
    20a0:	1f 83       	std	Y+7, r17	; 0x07
    20a2:	8f 81       	ldd	r24, Y+7	; 0x07
    20a4:	80 93 3a 01 	sts	0x013A, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    20a8:	4b c0       	rjmp	.+150    	; 0x2140 <main+0xc1a>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    20aa:	80 91 3a 01 	lds	r24, 0x013A
    20ae:	88 23       	and	r24, r24
    20b0:	24 f5       	brge	.+72     	; 0x20fa <main+0xbd4>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    20b2:	20 91 6b 01 	lds	r18, 0x016B
    20b6:	30 91 6c 01 	lds	r19, 0x016C
    20ba:	c9 01       	movw	r24, r18
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	82 0f       	add	r24, r18
    20c2:	93 1f       	adc	r25, r19
    20c4:	9c 01       	movw	r18, r24
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	80 91 60 01 	lds	r24, 0x0160
    20ce:	90 91 61 01 	lds	r25, 0x0161
    20d2:	a0 91 62 01 	lds	r26, 0x0162
    20d6:	b0 91 63 01 	lds	r27, 0x0163
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	a4 1f       	adc	r26, r20
    20e0:	b5 1f       	adc	r27, r21
    20e2:	80 93 c2 01 	sts	0x01C2, r24
    20e6:	90 93 c3 01 	sts	0x01C3, r25
    20ea:	a0 93 c4 01 	sts	0x01C4, r26
    20ee:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAH;
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	80 93 bc 01 	sts	0x01BC, r24
    20f8:	1e c0       	rjmp	.+60     	; 0x2136 <main+0xc10>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    20fa:	80 91 6b 01 	lds	r24, 0x016B
    20fe:	90 91 6c 01 	lds	r25, 0x016C
    2102:	9c 01       	movw	r18, r24
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	80 91 60 01 	lds	r24, 0x0160
    210c:	90 91 61 01 	lds	r25, 0x0161
    2110:	a0 91 62 01 	lds	r26, 0x0162
    2114:	b0 91 63 01 	lds	r27, 0x0163
    2118:	82 0f       	add	r24, r18
    211a:	93 1f       	adc	r25, r19
    211c:	a4 1f       	adc	r26, r20
    211e:	b5 1f       	adc	r27, r21
    2120:	80 93 c2 01 	sts	0x01C2, r24
    2124:	90 93 c3 01 	sts	0x01C3, r25
    2128:	a0 93 c4 01 	sts	0x01C4, r26
    212c:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DIT;
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	80 93 bc 01 	sts	0x01BC, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    2136:	80 91 3a 01 	lds	r24, 0x013A
    213a:	88 0f       	add	r24, r24
    213c:	80 93 3a 01 	sts	0x013A, r24
    2140:	40 c0       	rjmp	.+128    	; 0x21c2 <main+0xc9c>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2142:	80 91 d5 01 	lds	r24, 0x01D5
    2146:	90 91 d6 01 	lds	r25, 0x01D6
    214a:	20 e2       	ldi	r18, 0x20	; 32
    214c:	31 e0       	ldi	r19, 0x01	; 1
    214e:	b9 01       	movw	r22, r18
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	0e 94 b0 1b 	call	0x3760	; 0x3760 <memcpy>
					cur_char_p = announce_buffer;
    2158:	80 91 d5 01 	lds	r24, 0x01D5
    215c:	90 91 d6 01 	lds	r25, 0x01D6
    2160:	90 93 37 01 	sts	0x0137, r25
    2164:	80 93 36 01 	sts	0x0136, r24
					cur_character = '\0';
    2168:	10 92 3a 01 	sts	0x013A, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    216c:	80 91 bf 01 	lds	r24, 0x01BF
    2170:	90 91 c0 01 	lds	r25, 0x01C0
    2174:	90 93 b3 01 	sts	0x01B3, r25
    2178:	80 93 b2 01 	sts	0x01B2, r24
					set_st_freq(st_freq);
    217c:	80 91 b2 01 	lds	r24, 0x01B2
    2180:	90 91 b3 01 	lds	r25, 0x01B3
    2184:	cc 01       	movw	r24, r24
    2186:	a0 e0       	ldi	r26, 0x00	; 0
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <set_st_freq>
					cur_mode = prev_mode;
    2192:	80 91 b0 01 	lds	r24, 0x01B0
    2196:	80 93 9a 01 	sts	0x019A, r24
					cur_state = prev_state;
    219a:	80 91 6a 01 	lds	r24, 0x016A
    219e:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = prev_state_end;
    21a2:	80 91 ac 01 	lds	r24, 0x01AC
    21a6:	90 91 ad 01 	lds	r25, 0x01AD
    21aa:	a0 91 ae 01 	lds	r26, 0x01AE
    21ae:	b0 91 af 01 	lds	r27, 0x01AF
    21b2:	80 93 c2 01 	sts	0x01C2, r24
    21b6:	90 93 c3 01 	sts	0x01C3, r25
    21ba:	a0 93 c4 01 	sts	0x01C4, r26
    21be:	b0 93 c5 01 	sts	0x01C5, r27
				}
				break;
    21c2:	5d c0       	rjmp	.+186    	; 0x227e <main+0xd58>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    21c4:	20 91 60 01 	lds	r18, 0x0160
    21c8:	30 91 61 01 	lds	r19, 0x0161
    21cc:	40 91 62 01 	lds	r20, 0x0162
    21d0:	50 91 63 01 	lds	r21, 0x0163
    21d4:	80 91 c2 01 	lds	r24, 0x01C2
    21d8:	90 91 c3 01 	lds	r25, 0x01C3
    21dc:	a0 91 c4 01 	lds	r26, 0x01C4
    21e0:	b0 91 c5 01 	lds	r27, 0x01C5
    21e4:	82 17       	cp	r24, r18
    21e6:	93 07       	cpc	r25, r19
    21e8:	a4 07       	cpc	r26, r20
    21ea:	b5 07       	cpc	r27, r21
    21ec:	f0 f4       	brcc	.+60     	; 0x222a <main+0xd04>
				{
					cur_state_end = cur_timer + dit_length;
    21ee:	80 91 6b 01 	lds	r24, 0x016B
    21f2:	90 91 6c 01 	lds	r25, 0x016C
    21f6:	9c 01       	movw	r18, r24
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	80 91 60 01 	lds	r24, 0x0160
    2200:	90 91 61 01 	lds	r25, 0x0161
    2204:	a0 91 62 01 	lds	r26, 0x0162
    2208:	b0 91 63 01 	lds	r27, 0x0163
    220c:	82 0f       	add	r24, r18
    220e:	93 1f       	adc	r25, r19
    2210:	a4 1f       	adc	r26, r20
    2212:	b5 1f       	adc	r27, r21
    2214:	80 93 c2 01 	sts	0x01C2, r24
    2218:	90 93 c3 01 	sts	0x01C3, r25
    221c:	a0 93 c4 01 	sts	0x01C4, r26
    2220:	b0 93 c5 01 	sts	0x01C5, r27
					cur_state = DITDELAY;
    2224:	84 e0       	ldi	r24, 0x04	; 4
    2226:	80 93 bc 01 	sts	0x01BC, r24
				}

				key_down = FALSE;
    222a:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	80 93 33 01 	sts	0x0133, r24
				break;
    223a:	21 c0       	rjmp	.+66     	; 0x227e <main+0xd58>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    223c:	20 91 60 01 	lds	r18, 0x0160
    2240:	30 91 61 01 	lds	r19, 0x0161
    2244:	40 91 62 01 	lds	r20, 0x0162
    2248:	50 91 63 01 	lds	r21, 0x0163
    224c:	80 91 c2 01 	lds	r24, 0x01C2
    2250:	90 91 c3 01 	lds	r25, 0x01C3
    2254:	a0 91 c4 01 	lds	r26, 0x01C4
    2258:	b0 91 c5 01 	lds	r27, 0x01C5
    225c:	82 17       	cp	r24, r18
    225e:	93 07       	cpc	r25, r19
    2260:	a4 07       	cpc	r26, r20
    2262:	b5 07       	cpc	r27, r21
    2264:	18 f4       	brcc	.+6      	; 0x226c <main+0xd46>
					cur_state = IDLE;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	80 93 bc 01 	sts	0x01BC, r24

				key_down = FALSE;
    226c:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    2270:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	80 93 33 01 	sts	0x0133, r24
				break;
    227a:	01 c0       	rjmp	.+2      	; 0x227e <main+0xd58>

			default:
				break;
    227c:	00 00       	nop
			}
			break;
    227e:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <main+0x1f00>

		case TUNE:
			switch(cur_state)
    2282:	80 91 bc 01 	lds	r24, 0x01BC
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	87 30       	cpi	r24, 0x07	; 7
    228c:	91 05       	cpc	r25, r1
    228e:	09 f4       	brne	.+2      	; 0x2292 <main+0xd6c>
    2290:	50 c0       	rjmp	.+160    	; 0x2332 <main+0xe0c>
    2292:	88 30       	cpi	r24, 0x08	; 8
    2294:	91 05       	cpc	r25, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <main+0xd74>
    2298:	8d c0       	rjmp	.+282    	; 0x23b4 <main+0xe8e>
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	91 05       	cpc	r25, r1
    229e:	09 f0       	breq	.+2      	; 0x22a2 <main+0xd7c>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    22a0:	af c0       	rjmp	.+350    	; 0x2400 <main+0xeda>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    22a2:	80 91 60 01 	lds	r24, 0x0160
    22a6:	90 91 61 01 	lds	r25, 0x0161
    22aa:	a0 91 62 01 	lds	r26, 0x0162
    22ae:	b0 91 63 01 	lds	r27, 0x0163
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	a1 1d       	adc	r26, r1
    22b6:	b1 1d       	adc	r27, r1
    22b8:	80 93 a0 01 	sts	0x01A0, r24
    22bc:	90 93 a1 01 	sts	0x01A1, r25
    22c0:	a0 93 a2 01 	sts	0x01A2, r26
    22c4:	b0 93 a3 01 	sts	0x01A3, r27
				tx_end = UINT32_MAX;
    22c8:	8f ef       	ldi	r24, 0xFF	; 255
    22ca:	9f ef       	ldi	r25, 0xFF	; 255
    22cc:	dc 01       	movw	r26, r24
    22ce:	80 93 d7 01 	sts	0x01D7, r24
    22d2:	90 93 d8 01 	sts	0x01D8, r25
    22d6:	a0 93 d9 01 	sts	0x01D9, r26
    22da:	b0 93 da 01 	sts	0x01DA, r27
				cur_state_end = UINT32_MAX;
    22de:	8f ef       	ldi	r24, 0xFF	; 255
    22e0:	9f ef       	ldi	r25, 0xFF	; 255
    22e2:	dc 01       	movw	r26, r24
    22e4:	80 93 c2 01 	sts	0x01C2, r24
    22e8:	90 93 c3 01 	sts	0x01C3, r25
    22ec:	a0 93 c4 01 	sts	0x01C4, r26
    22f0:	b0 93 c5 01 	sts	0x01C5, r27
				mute_start = cur_timer;
    22f4:	80 91 60 01 	lds	r24, 0x0160
    22f8:	90 91 61 01 	lds	r25, 0x0161
    22fc:	a0 91 62 01 	lds	r26, 0x0162
    2300:	b0 91 63 01 	lds	r27, 0x0163
    2304:	80 93 d1 01 	sts	0x01D1, r24
    2308:	90 93 d2 01 	sts	0x01D2, r25
    230c:	a0 93 d3 01 	sts	0x01D3, r26
    2310:	b0 93 d4 01 	sts	0x01D4, r27
				mute_end = UINT32_MAX;
    2314:	8f ef       	ldi	r24, 0xFF	; 255
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	dc 01       	movw	r26, r24
    231a:	80 93 c6 01 	sts	0x01C6, r24
    231e:	90 93 c7 01 	sts	0x01C7, r25
    2322:	a0 93 c8 01 	sts	0x01C8, r26
    2326:	b0 93 c9 01 	sts	0x01C9, r27

				cur_state = KEYDOWN;
    232a:	87 e0       	ldi	r24, 0x07	; 7
    232c:	80 93 bc 01 	sts	0x01BC, r24
				break;
    2330:	67 c0       	rjmp	.+206    	; 0x2400 <main+0xeda>

			case KEYDOWN:
				key_down = TRUE;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	80 93 33 01 	sts	0x0133, r24

				if(ANYBUTTON)
    2344:	80 91 ca 01 	lds	r24, 0x01CA
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	61 f0       	breq	.+24     	; 0x2364 <main+0xe3e>
    234c:	80 91 b8 01 	lds	r24, 0x01B8
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	41 f0       	breq	.+16     	; 0x2364 <main+0xe3e>
    2354:	80 91 bb 01 	lds	r24, 0x01BB
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	21 f0       	breq	.+8      	; 0x2364 <main+0xe3e>
    235c:	80 91 b9 01 	lds	r24, 0x01B9
    2360:	81 30       	cpi	r24, 0x01	; 1
    2362:	39 f5       	brne	.+78     	; 0x23b2 <main+0xe8c>
				{
					cur_state = ENDKEYDOWN;
    2364:	88 e0       	ldi	r24, 0x08	; 8
    2366:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    236a:	80 91 60 01 	lds	r24, 0x0160
    236e:	90 91 61 01 	lds	r25, 0x0161
    2372:	a0 91 62 01 	lds	r26, 0x0162
    2376:	b0 91 63 01 	lds	r27, 0x0163
    237a:	8c 59       	subi	r24, 0x9C	; 156
    237c:	9f 4f       	sbci	r25, 0xFF	; 255
    237e:	af 4f       	sbci	r26, 0xFF	; 255
    2380:	bf 4f       	sbci	r27, 0xFF	; 255
    2382:	80 93 c2 01 	sts	0x01C2, r24
    2386:	90 93 c3 01 	sts	0x01C3, r25
    238a:	a0 93 c4 01 	sts	0x01C4, r26
    238e:	b0 93 c5 01 	sts	0x01C5, r27
					tx_end = cur_timer;
    2392:	80 91 60 01 	lds	r24, 0x0160
    2396:	90 91 61 01 	lds	r25, 0x0161
    239a:	a0 91 62 01 	lds	r26, 0x0162
    239e:	b0 91 63 01 	lds	r27, 0x0163
    23a2:	80 93 d7 01 	sts	0x01D7, r24
    23a6:	90 93 d8 01 	sts	0x01D8, r25
    23aa:	a0 93 d9 01 	sts	0x01D9, r26
    23ae:	b0 93 da 01 	sts	0x01DA, r27
				}
				break;
    23b2:	26 c0       	rjmp	.+76     	; 0x2400 <main+0xeda>

			case ENDKEYDOWN:
				key_down = FALSE;
    23b4:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    23b8:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	80 93 33 01 	sts	0x0133, r24

				if(cur_timer >= cur_state_end)
    23c2:	20 91 60 01 	lds	r18, 0x0160
    23c6:	30 91 61 01 	lds	r19, 0x0161
    23ca:	40 91 62 01 	lds	r20, 0x0162
    23ce:	50 91 63 01 	lds	r21, 0x0163
    23d2:	80 91 c2 01 	lds	r24, 0x01C2
    23d6:	90 91 c3 01 	lds	r25, 0x01C3
    23da:	a0 91 c4 01 	lds	r26, 0x01C4
    23de:	b0 91 c5 01 	lds	r27, 0x01C5
    23e2:	28 17       	cp	r18, r24
    23e4:	39 07       	cpc	r19, r25
    23e6:	4a 07       	cpc	r20, r26
    23e8:	5b 07       	cpc	r21, r27
    23ea:	48 f0       	brcs	.+18     	; 0x23fe <main+0xed8>
				{
					mute_on = FALSE;
    23ec:	10 92 33 01 	sts	0x0133, r1
					cur_state = IDLE;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	80 93 bc 01 	sts	0x01BC, r24
					cur_mode = default_mode;
    23f6:	80 91 65 01 	lds	r24, 0x0165
    23fa:	80 93 9a 01 	sts	0x019A, r24
				}
				break;
    23fe:	00 00       	nop

			default:
				break;
			}
			break;
    2400:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <main+0x1f00>

		case MENU:
			switch(cur_state)
    2404:	80 91 bc 01 	lds	r24, 0x01BC
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	89 30       	cpi	r24, 0x09	; 9
    240e:	91 05       	cpc	r25, r1
    2410:	91 f0       	breq	.+36     	; 0x2436 <main+0xf10>
    2412:	8a 30       	cpi	r24, 0x0A	; 10
    2414:	91 05       	cpc	r25, r1
    2416:	09 f4       	brne	.+2      	; 0x241a <main+0xef4>
    2418:	56 c0       	rjmp	.+172    	; 0x24c6 <main+0xfa0>
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	91 05       	cpc	r25, r1
    241e:	09 f0       	breq	.+2      	; 0x2422 <main+0xefc>
    2420:	7c c1       	rjmp	.+760    	; 0x271a <main+0x11f4>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	91 e0       	ldi	r25, 0x01	; 1
    2426:	90 93 3c 01 	sts	0x013C, r25
    242a:	80 93 3b 01 	sts	0x013B, r24
				cur_state = MENUANNOUNCE;
    242e:	89 e0       	ldi	r24, 0x09	; 9
    2430:	80 93 bc 01 	sts	0x01BC, r24
				break;
    2434:	7a c1       	rjmp	.+756    	; 0x272a <main+0x1204>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <malloc>
    243e:	90 93 3e 01 	sts	0x013E, r25
    2442:	80 93 3d 01 	sts	0x013D, r24
				memset(cur_menu, '\0', 2);
    2446:	80 91 3d 01 	lds	r24, 0x013D
    244a:	90 91 3e 01 	lds	r25, 0x013E
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	42 e0       	ldi	r20, 0x02	; 2
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	0e 94 b9 1b 	call	0x3772	; 0x3772 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    245a:	80 91 3d 01 	lds	r24, 0x013D
    245e:	90 91 3e 01 	lds	r25, 0x013E
    2462:	20 91 3b 01 	lds	r18, 0x013B
    2466:	30 91 3c 01 	lds	r19, 0x013C
    246a:	b9 01       	movw	r22, r18
    246c:	41 e0       	ldi	r20, 0x01	; 1
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	0e 94 b0 1b 	call	0x3760	; 0x3760 <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    2474:	80 91 60 01 	lds	r24, 0x0160
    2478:	90 91 61 01 	lds	r25, 0x0161
    247c:	a0 91 62 01 	lds	r26, 0x0162
    2480:	b0 91 63 01 	lds	r27, 0x0163
    2484:	80 56       	subi	r24, 0x60	; 96
    2486:	90 4f       	sbci	r25, 0xF0	; 240
    2488:	af 4f       	sbci	r26, 0xFF	; 255
    248a:	bf 4f       	sbci	r27, 0xFF	; 255
    248c:	80 93 c2 01 	sts	0x01C2, r24
    2490:	90 93 c3 01 	sts	0x01C3, r25
    2494:	a0 93 c4 01 	sts	0x01C4, r26
    2498:	b0 93 c5 01 	sts	0x01C5, r27

				// Set next state
				cur_state = MENUINPUT;
    249c:	8a e0       	ldi	r24, 0x0A	; 10
    249e:	80 93 bc 01 	sts	0x01BC, r24

				// Announce the menu item
				announce(cur_menu, st_freq);
    24a2:	80 91 3d 01 	lds	r24, 0x013D
    24a6:	90 91 3e 01 	lds	r25, 0x013E
    24aa:	20 91 b2 01 	lds	r18, 0x01B2
    24ae:	30 91 b3 01 	lds	r19, 0x01B3
    24b2:	b9 01       	movw	r22, r18
    24b4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>

				free(cur_menu);
    24b8:	80 91 3d 01 	lds	r24, 0x013D
    24bc:	90 91 3e 01 	lds	r25, 0x013E
    24c0:	0e 94 17 1b 	call	0x362e	; 0x362e <free>
				break;
    24c4:	32 c1       	rjmp	.+612    	; 0x272a <main+0x1204>

			case MENUINPUT:
				text_buffer = malloc(20);
    24c6:	84 e1       	ldi	r24, 0x14	; 20
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <malloc>
    24ce:	90 93 39 01 	sts	0x0139, r25
    24d2:	80 93 38 01 	sts	0x0138, r24
				memset(text_buffer, '\0', 20);
    24d6:	80 91 38 01 	lds	r24, 0x0138
    24da:	90 91 39 01 	lds	r25, 0x0139
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	44 e1       	ldi	r20, 0x14	; 20
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	0e 94 b9 1b 	call	0x3772	; 0x3772 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    24ea:	20 91 60 01 	lds	r18, 0x0160
    24ee:	30 91 61 01 	lds	r19, 0x0161
    24f2:	40 91 62 01 	lds	r20, 0x0162
    24f6:	50 91 63 01 	lds	r21, 0x0163
    24fa:	80 91 c2 01 	lds	r24, 0x01C2
    24fe:	90 91 c3 01 	lds	r25, 0x01C3
    2502:	a0 91 c4 01 	lds	r26, 0x01C4
    2506:	b0 91 c5 01 	lds	r27, 0x01C5
    250a:	28 17       	cp	r18, r24
    250c:	39 07       	cpc	r19, r25
    250e:	4a 07       	cpc	r20, r26
    2510:	5b 07       	cpc	r21, r27
    2512:	08 f0       	brcs	.+2      	; 0x2516 <main+0xff0>
    2514:	ec c0       	rjmp	.+472    	; 0x26ee <main+0x11c8>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    2516:	80 91 bb 01 	lds	r24, 0x01BB
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	31 f5       	brne	.+76     	; 0x256a <main+0x1044>
					{
						debounce(TRUE);
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	0e 94 0d 04 	call	0x81a	; 0x81a <debounce>
						cur_menu_p++;
    2524:	80 91 3b 01 	lds	r24, 0x013B
    2528:	90 91 3c 01 	lds	r25, 0x013C
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	90 93 3c 01 	sts	0x013C, r25
    2532:	80 93 3b 01 	sts	0x013B, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    2536:	80 91 3b 01 	lds	r24, 0x013B
    253a:	90 91 3c 01 	lds	r25, 0x013C
    253e:	fc 01       	movw	r30, r24
    2540:	80 81       	ld	r24, Z
    2542:	88 23       	and	r24, r24
    2544:	71 f4       	brne	.+28     	; 0x2562 <main+0x103c>
						{
							cur_state = IDLE;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	80 93 bc 01 	sts	0x01BC, r24
							cur_mode = default_mode;
    254c:	80 91 65 01 	lds	r24, 0x0165
    2550:	80 93 9a 01 	sts	0x019A, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW);
    2554:	81 e2       	ldi	r24, 0x21	; 33
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	60 e9       	ldi	r22, 0x90	; 144
    255a:	71 e0       	ldi	r23, 0x01	; 1
    255c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
								announce("P", st_freq);
							}
							break;

						default:
							break;
    2560:	d5 c0       	rjmp	.+426    	; 0x270c <main+0x11e6>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW);
						}
						else
							cur_state = MENUANNOUNCE;
    2562:	89 e0       	ldi	r24, 0x09	; 9
    2564:	80 93 bc 01 	sts	0x01BC, r24
								announce("P", st_freq);
							}
							break;

						default:
							break;
    2568:	d1 c0       	rjmp	.+418    	; 0x270c <main+0x11e6>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    256a:	80 91 b9 01 	lds	r24, 0x01B9
    256e:	81 30       	cpi	r24, 0x01	; 1
    2570:	09 f0       	breq	.+2      	; 0x2574 <main+0x104e>
    2572:	cb c0       	rjmp	.+406    	; 0x270a <main+0x11e4>
					{
						// need to clear the button buffer
						debounce(TRUE);
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	0e 94 0d 04 	call	0x81a	; 0x81a <debounce>

						switch(*cur_menu_p)
    257a:	80 91 3b 01 	lds	r24, 0x013B
    257e:	90 91 3c 01 	lds	r25, 0x013C
    2582:	fc 01       	movw	r30, r24
    2584:	80 81       	ld	r24, Z
    2586:	88 2f       	mov	r24, r24
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	83 35       	cpi	r24, 0x53	; 83
    258c:	91 05       	cpc	r25, r1
    258e:	a1 f0       	breq	.+40     	; 0x25b8 <main+0x1092>
    2590:	84 35       	cpi	r24, 0x54	; 84
    2592:	91 05       	cpc	r25, r1
    2594:	4c f4       	brge	.+18     	; 0x25a8 <main+0x1082>
    2596:	8b 34       	cpi	r24, 0x4B	; 75
    2598:	91 05       	cpc	r25, r1
    259a:	09 f4       	brne	.+2      	; 0x259e <main+0x1078>
    259c:	7d c0       	rjmp	.+250    	; 0x2698 <main+0x1172>
    259e:	82 35       	cpi	r24, 0x52	; 82
    25a0:	91 05       	cpc	r25, r1
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <main+0x1080>
    25a4:	60 c0       	rjmp	.+192    	; 0x2666 <main+0x1140>
								announce("P", st_freq);
							}
							break;

						default:
							break;
    25a6:	b2 c0       	rjmp	.+356    	; 0x270c <main+0x11e6>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    25a8:	86 35       	cpi	r24, 0x56	; 86
    25aa:	91 05       	cpc	r25, r1
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <main+0x108a>
    25ae:	6a c0       	rjmp	.+212    	; 0x2684 <main+0x115e>
    25b0:	87 35       	cpi	r24, 0x57	; 87
    25b2:	91 05       	cpc	r25, r1
    25b4:	11 f1       	breq	.+68     	; 0x25fa <main+0x10d4>
								announce("P", st_freq);
							}
							break;

						default:
							break;
    25b6:	aa c0       	rjmp	.+340    	; 0x270c <main+0x11e6>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    25b8:	80 91 60 01 	lds	r24, 0x0160
    25bc:	90 91 61 01 	lds	r25, 0x0161
    25c0:	a0 91 62 01 	lds	r26, 0x0162
    25c4:	b0 91 63 01 	lds	r27, 0x0163
    25c8:	80 56       	subi	r24, 0x60	; 96
    25ca:	90 4f       	sbci	r25, 0xF0	; 240
    25cc:	af 4f       	sbci	r26, 0xFF	; 255
    25ce:	bf 4f       	sbci	r27, 0xFF	; 255
    25d0:	80 93 c2 01 	sts	0x01C2, r24
    25d4:	90 93 c3 01 	sts	0x01C3, r25
    25d8:	a0 93 c4 01 	sts	0x01C4, r26
    25dc:	b0 93 c5 01 	sts	0x01C5, r27
							cur_mode = SETWPM;
    25e0:	85 e0       	ldi	r24, 0x05	; 5
    25e2:	80 93 9a 01 	sts	0x019A, r24

							announce("R", st_freq);
    25e6:	20 91 b2 01 	lds	r18, 0x01B2
    25ea:	30 91 b3 01 	lds	r19, 0x01B3
    25ee:	83 e2       	ldi	r24, 0x23	; 35
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	b9 01       	movw	r22, r18
    25f4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
							break;
    25f8:	89 c0       	rjmp	.+274    	; 0x270c <main+0x11e6>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	80 93 bc 01 	sts	0x01BC, r24
							cur_mode = default_mode;
    2600:	80 91 65 01 	lds	r24, 0x0165
    2604:	80 93 9a 01 	sts	0x019A, r24

							sprintf(text_buffer, "%d", wpm);
    2608:	40 91 38 01 	lds	r20, 0x0138
    260c:	50 91 39 01 	lds	r21, 0x0139
    2610:	80 91 d0 01 	lds	r24, 0x01D0
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	00 d0       	rcall	.+0      	; 0x261a <main+0x10f4>
    261a:	00 d0       	rcall	.+0      	; 0x261c <main+0x10f6>
    261c:	00 d0       	rcall	.+0      	; 0x261e <main+0x10f8>
    261e:	8d b7       	in	r24, 0x3d	; 61
    2620:	9e b7       	in	r25, 0x3e	; 62
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	fc 01       	movw	r30, r24
    2626:	51 83       	std	Z+1, r21	; 0x01
    2628:	40 83       	st	Z, r20
    262a:	45 e2       	ldi	r20, 0x25	; 37
    262c:	51 e0       	ldi	r21, 0x01	; 1
    262e:	fc 01       	movw	r30, r24
    2630:	53 83       	std	Z+3, r21	; 0x03
    2632:	42 83       	std	Z+2, r20	; 0x02
    2634:	fc 01       	movw	r30, r24
    2636:	35 83       	std	Z+5, r19	; 0x05
    2638:	24 83       	std	Z+4, r18	; 0x04
    263a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <sprintf>
    263e:	8d b7       	in	r24, 0x3d	; 61
    2640:	9e b7       	in	r25, 0x3e	; 62
    2642:	06 96       	adiw	r24, 0x06	; 6
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	9e bf       	out	0x3e, r25	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq);
    264e:	80 91 38 01 	lds	r24, 0x0138
    2652:	90 91 39 01 	lds	r25, 0x0139
    2656:	20 91 b2 01 	lds	r18, 0x01B2
    265a:	30 91 b3 01 	lds	r19, 0x01B3
    265e:	b9 01       	movw	r22, r18
    2660:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
							break;
    2664:	53 c0       	rjmp	.+166    	; 0x270c <main+0x11e6>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    2666:	10 92 bc 01 	sts	0x01BC, r1
							cur_mode = RECORD;
    266a:	87 e0       	ldi	r24, 0x07	; 7
    266c:	80 93 9a 01 	sts	0x019A, r24

							announce("R", st_freq);
    2670:	20 91 b2 01 	lds	r18, 0x01B2
    2674:	30 91 b3 01 	lds	r19, 0x01B3
    2678:	83 e2       	ldi	r24, 0x23	; 35
    267a:	91 e0       	ldi	r25, 0x01	; 1
    267c:	b9 01       	movw	r22, r18
    267e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
							break;
    2682:	44 c0       	rjmp	.+136    	; 0x270c <main+0x11e6>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	80 93 bc 01 	sts	0x01BC, r24
							cur_mode = default_mode;
    268a:	80 91 65 01 	lds	r24, 0x0165
    268e:	80 93 9a 01 	sts	0x019A, r24

							read_voltage();
    2692:	0e 94 b5 06 	call	0xd6a	; 0xd6a <read_voltage>
							break;
    2696:	3a c0       	rjmp	.+116    	; 0x270c <main+0x11e6>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    2698:	80 91 65 01 	lds	r24, 0x0165
    269c:	88 23       	and	r24, r24
    269e:	a1 f4       	brne	.+40     	; 0x26c8 <main+0x11a2>
							{
								default_mode = SK;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	80 93 65 01 	sts	0x0165, r24
								cur_state = IDLE;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	80 93 bc 01 	sts	0x01BC, r24
								cur_mode = default_mode;
    26ac:	80 91 65 01 	lds	r24, 0x0165
    26b0:	80 93 9a 01 	sts	0x019A, r24

								announce("S", st_freq);
    26b4:	20 91 b2 01 	lds	r18, 0x01B2
    26b8:	30 91 b3 01 	lds	r19, 0x01B3
    26bc:	8b e1       	ldi	r24, 0x1B	; 27
    26be:	91 e0       	ldi	r25, 0x01	; 1
    26c0:	b9 01       	movw	r22, r18
    26c2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
								cur_state = IDLE;
								cur_mode = default_mode;

								announce("P", st_freq);
							}
							break;
    26c6:	22 c0       	rjmp	.+68     	; 0x270c <main+0x11e6>

								announce("S", st_freq);
							}
							else
							{
								default_mode = KEYER;
    26c8:	10 92 65 01 	sts	0x0165, r1
								cur_state = IDLE;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	80 93 bc 01 	sts	0x01BC, r24
								cur_mode = default_mode;
    26d2:	80 91 65 01 	lds	r24, 0x0165
    26d6:	80 93 9a 01 	sts	0x019A, r24

								announce("P", st_freq);
    26da:	20 91 b2 01 	lds	r18, 0x01B2
    26de:	30 91 b3 01 	lds	r19, 0x01B3
    26e2:	88 e2       	ldi	r24, 0x28	; 40
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	b9 01       	movw	r22, r18
    26e8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
							}
							break;
    26ec:	0f c0       	rjmp	.+30     	; 0x270c <main+0x11e6>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	80 93 bc 01 	sts	0x01BC, r24
					cur_mode = default_mode;
    26f4:	80 91 65 01 	lds	r24, 0x0165
    26f8:	80 93 9a 01 	sts	0x019A, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW);
    26fc:	81 e2       	ldi	r24, 0x21	; 33
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	60 e9       	ldi	r22, 0x90	; 144
    2702:	71 e0       	ldi	r23, 0x01	; 1
    2704:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    2708:	01 c0       	rjmp	.+2      	; 0x270c <main+0x11e6>
								announce("P", st_freq);
							}
							break;

						default:
							break;
    270a:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW);
				}

				free(text_buffer);
    270c:	80 91 38 01 	lds	r24, 0x0138
    2710:	90 91 39 01 	lds	r25, 0x0139
    2714:	0e 94 17 1b 	call	0x362e	; 0x362e <free>
				break;
    2718:	08 c0       	rjmp	.+16     	; 0x272a <main+0x1204>

			default:
				cur_state = IDLE;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	80 93 bc 01 	sts	0x01BC, r24
				cur_mode = default_mode;
    2720:	80 91 65 01 	lds	r24, 0x0165
    2724:	80 93 9a 01 	sts	0x019A, r24
				break;
    2728:	00 00       	nop
			}
			break;
    272a:	7d c6       	rjmp	.+3322   	; 0x3426 <main+0x1f00>

		case SETWPM:
			if(cur_timer < cur_state_end)
    272c:	20 91 60 01 	lds	r18, 0x0160
    2730:	30 91 61 01 	lds	r19, 0x0161
    2734:	40 91 62 01 	lds	r20, 0x0162
    2738:	50 91 63 01 	lds	r21, 0x0163
    273c:	80 91 c2 01 	lds	r24, 0x01C2
    2740:	90 91 c3 01 	lds	r25, 0x01C3
    2744:	a0 91 c4 01 	lds	r26, 0x01C4
    2748:	b0 91 c5 01 	lds	r27, 0x01C5
    274c:	28 17       	cp	r18, r24
    274e:	39 07       	cpc	r19, r25
    2750:	4a 07       	cpc	r20, r26
    2752:	5b 07       	cpc	r21, r27
    2754:	08 f0       	brcs	.+2      	; 0x2758 <main+0x1232>
    2756:	5f c0       	rjmp	.+190    	; 0x2816 <main+0x12f0>
			{
				if(cmd_btn == PRESS)
    2758:	80 91 bb 01 	lds	r24, 0x01BB
    275c:	81 30       	cpi	r24, 0x01	; 1
    275e:	59 f5       	brne	.+86     	; 0x27b6 <main+0x1290>
				{
					if(wpm < MAX_WPM)
    2760:	80 91 d0 01 	lds	r24, 0x01D0
    2764:	88 32       	cpi	r24, 0x28	; 40
    2766:	28 f4       	brcc	.+10     	; 0x2772 <main+0x124c>
						wpm++;
    2768:	80 91 d0 01 	lds	r24, 0x01D0
    276c:	8f 5f       	subi	r24, 0xFF	; 255
    276e:	80 93 d0 01 	sts	0x01D0, r24
					set_wpm(wpm);
    2772:	80 91 d0 01 	lds	r24, 0x01D0
    2776:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    277a:	80 91 60 01 	lds	r24, 0x0160
    277e:	90 91 61 01 	lds	r25, 0x0161
    2782:	a0 91 62 01 	lds	r26, 0x0162
    2786:	b0 91 63 01 	lds	r27, 0x0163
    278a:	80 56       	subi	r24, 0x60	; 96
    278c:	90 4f       	sbci	r25, 0xF0	; 240
    278e:	af 4f       	sbci	r26, 0xFF	; 255
    2790:	bf 4f       	sbci	r27, 0xFF	; 255
    2792:	80 93 c2 01 	sts	0x01C2, r24
    2796:	90 93 c3 01 	sts	0x01C3, r25
    279a:	a0 93 c4 01 	sts	0x01C4, r26
    279e:	b0 93 c5 01 	sts	0x01C5, r27
					announce("I", st_freq);
    27a2:	20 91 b2 01 	lds	r18, 0x01B2
    27a6:	30 91 b3 01 	lds	r19, 0x01B3
    27aa:	8a e2       	ldi	r24, 0x2A	; 42
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	b9 01       	movw	r22, r18
    27b0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    27b4:	6c c0       	rjmp	.+216    	; 0x288e <main+0x1368>
				}
				else if(msg_btn == PRESS)
    27b6:	80 91 b9 01 	lds	r24, 0x01B9
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <main+0x129a>
    27be:	67 c0       	rjmp	.+206    	; 0x288e <main+0x1368>
				{
					if(wpm > MIN_WPM)
    27c0:	80 91 d0 01 	lds	r24, 0x01D0
    27c4:	86 30       	cpi	r24, 0x06	; 6
    27c6:	28 f0       	brcs	.+10     	; 0x27d2 <main+0x12ac>
						wpm--;
    27c8:	80 91 d0 01 	lds	r24, 0x01D0
    27cc:	81 50       	subi	r24, 0x01	; 1
    27ce:	80 93 d0 01 	sts	0x01D0, r24
					set_wpm(wpm);
    27d2:	80 91 d0 01 	lds	r24, 0x01D0
    27d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    27da:	80 91 60 01 	lds	r24, 0x0160
    27de:	90 91 61 01 	lds	r25, 0x0161
    27e2:	a0 91 62 01 	lds	r26, 0x0162
    27e6:	b0 91 63 01 	lds	r27, 0x0163
    27ea:	80 56       	subi	r24, 0x60	; 96
    27ec:	90 4f       	sbci	r25, 0xF0	; 240
    27ee:	af 4f       	sbci	r26, 0xFF	; 255
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	80 93 c2 01 	sts	0x01C2, r24
    27f6:	90 93 c3 01 	sts	0x01C3, r25
    27fa:	a0 93 c4 01 	sts	0x01C4, r26
    27fe:	b0 93 c5 01 	sts	0x01C5, r27
					announce("I", st_freq);
    2802:	20 91 b2 01 	lds	r18, 0x01B2
    2806:	30 91 b3 01 	lds	r19, 0x01B3
    280a:	8a e2       	ldi	r24, 0x2A	; 42
    280c:	91 e0       	ldi	r25, 0x01	; 1
    280e:	b9 01       	movw	r22, r18
    2810:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
    2814:	3c c0       	rjmp	.+120    	; 0x288e <main+0x1368>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_write_byte(&ee_wpm, wpm);
    2816:	20 91 d0 01 	lds	r18, 0x01D0
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	62 2f       	mov	r22, r18
    2820:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__eewr_byte_m168>

				cur_state = IDLE;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	80 93 bc 01 	sts	0x01BC, r24
				cur_mode = default_mode;
    282a:	80 91 65 01 	lds	r24, 0x0165
    282e:	80 93 9a 01 	sts	0x019A, r24

				sprintf(text_buffer, "%d", wpm);
    2832:	40 91 38 01 	lds	r20, 0x0138
    2836:	50 91 39 01 	lds	r21, 0x0139
    283a:	80 91 d0 01 	lds	r24, 0x01D0
    283e:	28 2f       	mov	r18, r24
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	00 d0       	rcall	.+0      	; 0x2844 <main+0x131e>
    2844:	00 d0       	rcall	.+0      	; 0x2846 <main+0x1320>
    2846:	00 d0       	rcall	.+0      	; 0x2848 <main+0x1322>
    2848:	8d b7       	in	r24, 0x3d	; 61
    284a:	9e b7       	in	r25, 0x3e	; 62
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	fc 01       	movw	r30, r24
    2850:	51 83       	std	Z+1, r21	; 0x01
    2852:	40 83       	st	Z, r20
    2854:	45 e2       	ldi	r20, 0x25	; 37
    2856:	51 e0       	ldi	r21, 0x01	; 1
    2858:	fc 01       	movw	r30, r24
    285a:	53 83       	std	Z+3, r21	; 0x03
    285c:	42 83       	std	Z+2, r20	; 0x02
    285e:	fc 01       	movw	r30, r24
    2860:	35 83       	std	Z+5, r19	; 0x05
    2862:	24 83       	std	Z+4, r18	; 0x04
    2864:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <sprintf>
    2868:	8d b7       	in	r24, 0x3d	; 61
    286a:	9e b7       	in	r25, 0x3e	; 62
    286c:	06 96       	adiw	r24, 0x06	; 6
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	9e bf       	out	0x3e, r25	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq);
    2878:	80 91 38 01 	lds	r24, 0x0138
    287c:	90 91 39 01 	lds	r25, 0x0139
    2880:	20 91 b2 01 	lds	r18, 0x01B2
    2884:	30 91 b3 01 	lds	r19, 0x01B3
    2888:	b9 01       	movw	r22, r18
    288a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
			}
			break;
    288e:	cb c5       	rjmp	.+2966   	; 0x3426 <main+0x1f00>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    2890:	80 91 ca 01 	lds	r24, 0x01CA
    2894:	81 30       	cpi	r24, 0x01	; 1
    2896:	61 f0       	breq	.+24     	; 0x28b0 <main+0x138a>
    2898:	80 91 b8 01 	lds	r24, 0x01B8
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	41 f0       	breq	.+16     	; 0x28b0 <main+0x138a>
    28a0:	80 91 bb 01 	lds	r24, 0x01BB
    28a4:	81 30       	cpi	r24, 0x01	; 1
    28a6:	21 f0       	breq	.+8      	; 0x28b0 <main+0x138a>
    28a8:	80 91 b9 01 	lds	r24, 0x01B9
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	e9 f5       	brne	.+122    	; 0x292a <main+0x1404>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    28b0:	80 91 d5 01 	lds	r24, 0x01D5
    28b4:	90 91 d6 01 	lds	r25, 0x01D6
    28b8:	20 e2       	ldi	r18, 0x20	; 32
    28ba:	31 e0       	ldi	r19, 0x01	; 1
    28bc:	b9 01       	movw	r22, r18
    28be:	41 e0       	ldi	r20, 0x01	; 1
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	0e 94 b0 1b 	call	0x3760	; 0x3760 <memcpy>
				cur_char_p = announce_buffer;
    28c6:	80 91 d5 01 	lds	r24, 0x01D5
    28ca:	90 91 d6 01 	lds	r25, 0x01D6
    28ce:	90 93 37 01 	sts	0x0137, r25
    28d2:	80 93 36 01 	sts	0x0136, r24
				cur_character = '\0';
    28d6:	10 92 3a 01 	sts	0x013A, r1

				// Set back into previous mode
				mute_end = cur_timer;
    28da:	80 91 60 01 	lds	r24, 0x0160
    28de:	90 91 61 01 	lds	r25, 0x0161
    28e2:	a0 91 62 01 	lds	r26, 0x0162
    28e6:	b0 91 63 01 	lds	r27, 0x0163
    28ea:	80 93 c6 01 	sts	0x01C6, r24
    28ee:	90 93 c7 01 	sts	0x01C7, r25
    28f2:	a0 93 c8 01 	sts	0x01C8, r26
    28f6:	b0 93 c9 01 	sts	0x01C9, r27
				cur_mode = prev_mode;
    28fa:	80 91 b0 01 	lds	r24, 0x01B0
    28fe:	80 93 9a 01 	sts	0x019A, r24
				cur_state = prev_state;
    2902:	80 91 6a 01 	lds	r24, 0x016A
    2906:	80 93 bc 01 	sts	0x01BC, r24
				cur_state_end = prev_state_end;
    290a:	80 91 ac 01 	lds	r24, 0x01AC
    290e:	90 91 ad 01 	lds	r25, 0x01AD
    2912:	a0 91 ae 01 	lds	r26, 0x01AE
    2916:	b0 91 af 01 	lds	r27, 0x01AF
    291a:	80 93 c2 01 	sts	0x01C2, r24
    291e:	90 93 c3 01 	sts	0x01C3, r25
    2922:	a0 93 c4 01 	sts	0x01C4, r26
    2926:	b0 93 c5 01 	sts	0x01C5, r27
			}

			switch(cur_state)
    292a:	80 91 bc 01 	lds	r24, 0x01BC
    292e:	88 2f       	mov	r24, r24
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	84 30       	cpi	r24, 0x04	; 4
    2934:	91 05       	cpc	r25, r1
    2936:	44 f4       	brge	.+16     	; 0x2948 <main+0x1422>
    2938:	82 30       	cpi	r24, 0x02	; 2
    293a:	91 05       	cpc	r25, r1
    293c:	0c f0       	brlt	.+2      	; 0x2940 <main+0x141a>
    293e:	bb c1       	rjmp	.+886    	; 0x2cb6 <main+0x1790>
    2940:	81 30       	cpi	r24, 0x01	; 1
    2942:	91 05       	cpc	r25, r1
    2944:	31 f0       	breq	.+12     	; 0x2952 <main+0x142c>
    2946:	14 c2       	rjmp	.+1064   	; 0x2d70 <main+0x184a>
    2948:	87 30       	cpi	r24, 0x07	; 7
    294a:	91 05       	cpc	r25, r1
    294c:	0c f0       	brlt	.+2      	; 0x2950 <main+0x142a>
    294e:	10 c2       	rjmp	.+1056   	; 0x2d70 <main+0x184a>
    2950:	ef c1       	rjmp	.+990    	; 0x2d30 <main+0x180a>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2952:	20 91 36 01 	lds	r18, 0x0136
    2956:	30 91 37 01 	lds	r19, 0x0137
    295a:	80 91 d5 01 	lds	r24, 0x01D5
    295e:	90 91 d6 01 	lds	r25, 0x01D6
    2962:	28 17       	cp	r18, r24
    2964:	39 07       	cpc	r19, r25
    2966:	c9 f4       	brne	.+50     	; 0x299a <main+0x1474>
    2968:	80 91 3a 01 	lds	r24, 0x013A
    296c:	88 23       	and	r24, r24
    296e:	a9 f4       	brne	.+42     	; 0x299a <main+0x1474>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2970:	80 91 36 01 	lds	r24, 0x0136
    2974:	90 91 37 01 	lds	r25, 0x0137
    2978:	fc 01       	movw	r30, r24
    297a:	80 81       	ld	r24, Z
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	80 97       	sbiw	r24, 0x20	; 32
    2982:	88 59       	subi	r24, 0x98	; 152
    2984:	9f 4f       	sbci	r25, 0xFF	; 255
    2986:	99 87       	std	Y+9, r25	; 0x09
    2988:	88 87       	std	Y+8, r24	; 0x08
    298a:	88 85       	ldd	r24, Y+8	; 0x08
    298c:	99 85       	ldd	r25, Y+9	; 0x09
    298e:	fc 01       	movw	r30, r24
    2990:	14 91       	lpm	r17, Z+
    2992:	1a 87       	std	Y+10, r17	; 0x0a
    2994:	8a 85       	ldd	r24, Y+10	; 0x0a
    2996:	80 93 3a 01 	sts	0x013A, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    299a:	80 91 3a 01 	lds	r24, 0x013A
    299e:	88 23       	and	r24, r24
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <main+0x147e>
    29a2:	4b c1       	rjmp	.+662    	; 0x2c3a <main+0x1714>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    29a4:	80 91 3a 01 	lds	r24, 0x013A
    29a8:	80 38       	cpi	r24, 0x80	; 128
    29aa:	29 f0       	breq	.+10     	; 0x29b6 <main+0x1490>
    29ac:	80 91 3a 01 	lds	r24, 0x013A
    29b0:	8f 3f       	cpi	r24, 0xFF	; 255
    29b2:	09 f0       	breq	.+2      	; 0x29b6 <main+0x1490>
    29b4:	79 c0       	rjmp	.+242    	; 0x2aa8 <main+0x1582>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    29b6:	80 91 3a 01 	lds	r24, 0x013A
    29ba:	80 38       	cpi	r24, 0x80	; 128
    29bc:	21 f5       	brne	.+72     	; 0x2a06 <main+0x14e0>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    29be:	20 91 6b 01 	lds	r18, 0x016B
    29c2:	30 91 6c 01 	lds	r19, 0x016C
    29c6:	c9 01       	movw	r24, r18
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	82 0f       	add	r24, r18
    29ce:	93 1f       	adc	r25, r19
    29d0:	9c 01       	movw	r18, r24
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	80 91 60 01 	lds	r24, 0x0160
    29da:	90 91 61 01 	lds	r25, 0x0161
    29de:	a0 91 62 01 	lds	r26, 0x0162
    29e2:	b0 91 63 01 	lds	r27, 0x0163
    29e6:	82 0f       	add	r24, r18
    29e8:	93 1f       	adc	r25, r19
    29ea:	a4 1f       	adc	r26, r20
    29ec:	b5 1f       	adc	r27, r21
    29ee:	80 93 c2 01 	sts	0x01C2, r24
    29f2:	90 93 c3 01 	sts	0x01C3, r25
    29f6:	a0 93 c4 01 	sts	0x01C4, r26
    29fa:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAHDELAY;
    29fe:	85 e0       	ldi	r24, 0x05	; 5
    2a00:	80 93 bc 01 	sts	0x01BC, r24
    2a04:	27 c0       	rjmp	.+78     	; 0x2a54 <main+0x152e>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2a06:	20 91 6b 01 	lds	r18, 0x016B
    2a0a:	30 91 6c 01 	lds	r19, 0x016C
    2a0e:	c9 01       	movw	r24, r18
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	88 0f       	add	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	82 1b       	sub	r24, r18
    2a1e:	93 0b       	sbc	r25, r19
    2a20:	9c 01       	movw	r18, r24
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	80 91 60 01 	lds	r24, 0x0160
    2a2a:	90 91 61 01 	lds	r25, 0x0161
    2a2e:	a0 91 62 01 	lds	r26, 0x0162
    2a32:	b0 91 63 01 	lds	r27, 0x0163
    2a36:	82 0f       	add	r24, r18
    2a38:	93 1f       	adc	r25, r19
    2a3a:	a4 1f       	adc	r26, r20
    2a3c:	b5 1f       	adc	r27, r21
    2a3e:	80 93 c2 01 	sts	0x01C2, r24
    2a42:	90 93 c3 01 	sts	0x01C3, r25
    2a46:	a0 93 c4 01 	sts	0x01C4, r26
    2a4a:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAHDELAY;
    2a4e:	85 e0       	ldi	r24, 0x05	; 5
    2a50:	80 93 bc 01 	sts	0x01BC, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    2a54:	80 91 36 01 	lds	r24, 0x0136
    2a58:	90 91 37 01 	lds	r25, 0x0137
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	90 93 37 01 	sts	0x0137, r25
    2a62:	80 93 36 01 	sts	0x0136, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2a66:	80 91 36 01 	lds	r24, 0x0136
    2a6a:	90 91 37 01 	lds	r25, 0x0137
    2a6e:	fc 01       	movw	r30, r24
    2a70:	80 81       	ld	r24, Z
    2a72:	88 23       	and	r24, r24
    2a74:	19 f4       	brne	.+6      	; 0x2a7c <main+0x1556>
							cur_character = '\0';
    2a76:	10 92 3a 01 	sts	0x013A, r1
    2a7a:	15 c0       	rjmp	.+42     	; 0x2aa6 <main+0x1580>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2a7c:	80 91 36 01 	lds	r24, 0x0136
    2a80:	90 91 37 01 	lds	r25, 0x0137
    2a84:	fc 01       	movw	r30, r24
    2a86:	80 81       	ld	r24, Z
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	80 97       	sbiw	r24, 0x20	; 32
    2a8e:	88 59       	subi	r24, 0x98	; 152
    2a90:	9f 4f       	sbci	r25, 0xFF	; 255
    2a92:	9c 87       	std	Y+12, r25	; 0x0c
    2a94:	8b 87       	std	Y+11, r24	; 0x0b
    2a96:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a98:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	14 91       	lpm	r17, Z+
    2a9e:	1d 87       	std	Y+13, r17	; 0x0d
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	80 93 3a 01 	sts	0x013A, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    2aa6:	c8 c0       	rjmp	.+400    	; 0x2c38 <main+0x1712>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    2aa8:	80 91 3a 01 	lds	r24, 0x013A
    2aac:	88 23       	and	r24, r24
    2aae:	0c f0       	brlt	.+2      	; 0x2ab2 <main+0x158c>
    2ab0:	62 c0       	rjmp	.+196    	; 0x2b76 <main+0x1650>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2ab2:	20 91 6b 01 	lds	r18, 0x016B
    2ab6:	30 91 6c 01 	lds	r19, 0x016C
    2aba:	c9 01       	movw	r24, r18
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	82 0f       	add	r24, r18
    2ac2:	93 1f       	adc	r25, r19
    2ac4:	9c 01       	movw	r18, r24
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	80 91 60 01 	lds	r24, 0x0160
    2ace:	90 91 61 01 	lds	r25, 0x0161
    2ad2:	a0 91 62 01 	lds	r26, 0x0162
    2ad6:	b0 91 63 01 	lds	r27, 0x0163
    2ada:	82 0f       	add	r24, r18
    2adc:	93 1f       	adc	r25, r19
    2ade:	a4 1f       	adc	r26, r20
    2ae0:	b5 1f       	adc	r27, r21
    2ae2:	80 93 c2 01 	sts	0x01C2, r24
    2ae6:	90 93 c3 01 	sts	0x01C3, r25
    2aea:	a0 93 c4 01 	sts	0x01C4, r26
    2aee:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DAH;
    2af2:	83 e0       	ldi	r24, 0x03	; 3
    2af4:	80 93 bc 01 	sts	0x01BC, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2af8:	80 91 60 01 	lds	r24, 0x0160
    2afc:	90 91 61 01 	lds	r25, 0x0161
    2b00:	a0 91 62 01 	lds	r26, 0x0162
    2b04:	b0 91 63 01 	lds	r27, 0x0163
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	a1 1d       	adc	r26, r1
    2b0c:	b1 1d       	adc	r27, r1
    2b0e:	80 93 a0 01 	sts	0x01A0, r24
    2b12:	90 93 a1 01 	sts	0x01A1, r25
    2b16:	a0 93 a2 01 	sts	0x01A2, r26
    2b1a:	b0 93 a3 01 	sts	0x01A3, r27
							tx_end = cur_state_end;
    2b1e:	80 91 c2 01 	lds	r24, 0x01C2
    2b22:	90 91 c3 01 	lds	r25, 0x01C3
    2b26:	a0 91 c4 01 	lds	r26, 0x01C4
    2b2a:	b0 91 c5 01 	lds	r27, 0x01C5
    2b2e:	80 93 d7 01 	sts	0x01D7, r24
    2b32:	90 93 d8 01 	sts	0x01D8, r25
    2b36:	a0 93 d9 01 	sts	0x01D9, r26
    2b3a:	b0 93 da 01 	sts	0x01DA, r27
							mute_start = cur_timer;
    2b3e:	80 91 60 01 	lds	r24, 0x0160
    2b42:	90 91 61 01 	lds	r25, 0x0161
    2b46:	a0 91 62 01 	lds	r26, 0x0162
    2b4a:	b0 91 63 01 	lds	r27, 0x0163
    2b4e:	80 93 d1 01 	sts	0x01D1, r24
    2b52:	90 93 d2 01 	sts	0x01D2, r25
    2b56:	a0 93 d3 01 	sts	0x01D3, r26
    2b5a:	b0 93 d4 01 	sts	0x01D4, r27
							mute_end = UINT32_MAX;
    2b5e:	8f ef       	ldi	r24, 0xFF	; 255
    2b60:	9f ef       	ldi	r25, 0xFF	; 255
    2b62:	dc 01       	movw	r26, r24
    2b64:	80 93 c6 01 	sts	0x01C6, r24
    2b68:	90 93 c7 01 	sts	0x01C7, r25
    2b6c:	a0 93 c8 01 	sts	0x01C8, r26
    2b70:	b0 93 c9 01 	sts	0x01C9, r27
    2b74:	5c c0       	rjmp	.+184    	; 0x2c2e <main+0x1708>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    2b76:	80 91 6b 01 	lds	r24, 0x016B
    2b7a:	90 91 6c 01 	lds	r25, 0x016C
    2b7e:	9c 01       	movw	r18, r24
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	80 91 60 01 	lds	r24, 0x0160
    2b88:	90 91 61 01 	lds	r25, 0x0161
    2b8c:	a0 91 62 01 	lds	r26, 0x0162
    2b90:	b0 91 63 01 	lds	r27, 0x0163
    2b94:	82 0f       	add	r24, r18
    2b96:	93 1f       	adc	r25, r19
    2b98:	a4 1f       	adc	r26, r20
    2b9a:	b5 1f       	adc	r27, r21
    2b9c:	80 93 c2 01 	sts	0x01C2, r24
    2ba0:	90 93 c3 01 	sts	0x01C3, r25
    2ba4:	a0 93 c4 01 	sts	0x01C4, r26
    2ba8:	b0 93 c5 01 	sts	0x01C5, r27
							cur_state = DIT;
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	80 93 bc 01 	sts	0x01BC, r24
							tx_start = cur_timer + TX_ON_DELAY;
    2bb2:	80 91 60 01 	lds	r24, 0x0160
    2bb6:	90 91 61 01 	lds	r25, 0x0161
    2bba:	a0 91 62 01 	lds	r26, 0x0162
    2bbe:	b0 91 63 01 	lds	r27, 0x0163
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	a1 1d       	adc	r26, r1
    2bc6:	b1 1d       	adc	r27, r1
    2bc8:	80 93 a0 01 	sts	0x01A0, r24
    2bcc:	90 93 a1 01 	sts	0x01A1, r25
    2bd0:	a0 93 a2 01 	sts	0x01A2, r26
    2bd4:	b0 93 a3 01 	sts	0x01A3, r27
							tx_end = cur_state_end;
    2bd8:	80 91 c2 01 	lds	r24, 0x01C2
    2bdc:	90 91 c3 01 	lds	r25, 0x01C3
    2be0:	a0 91 c4 01 	lds	r26, 0x01C4
    2be4:	b0 91 c5 01 	lds	r27, 0x01C5
    2be8:	80 93 d7 01 	sts	0x01D7, r24
    2bec:	90 93 d8 01 	sts	0x01D8, r25
    2bf0:	a0 93 d9 01 	sts	0x01D9, r26
    2bf4:	b0 93 da 01 	sts	0x01DA, r27
							mute_start = cur_timer;
    2bf8:	80 91 60 01 	lds	r24, 0x0160
    2bfc:	90 91 61 01 	lds	r25, 0x0161
    2c00:	a0 91 62 01 	lds	r26, 0x0162
    2c04:	b0 91 63 01 	lds	r27, 0x0163
    2c08:	80 93 d1 01 	sts	0x01D1, r24
    2c0c:	90 93 d2 01 	sts	0x01D2, r25
    2c10:	a0 93 d3 01 	sts	0x01D3, r26
    2c14:	b0 93 d4 01 	sts	0x01D4, r27
							mute_end = UINT32_MAX;
    2c18:	8f ef       	ldi	r24, 0xFF	; 255
    2c1a:	9f ef       	ldi	r25, 0xFF	; 255
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	80 93 c6 01 	sts	0x01C6, r24
    2c22:	90 93 c7 01 	sts	0x01C7, r25
    2c26:	a0 93 c8 01 	sts	0x01C8, r26
    2c2a:	b0 93 c9 01 	sts	0x01C9, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    2c2e:	80 91 3a 01 	lds	r24, 0x013A
    2c32:	88 0f       	add	r24, r24
    2c34:	80 93 3a 01 	sts	0x013A, r24
    2c38:	3d c0       	rjmp	.+122    	; 0x2cb4 <main+0x178e>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    2c3a:	80 91 d5 01 	lds	r24, 0x01D5
    2c3e:	90 91 d6 01 	lds	r25, 0x01D6
    2c42:	20 e2       	ldi	r18, 0x20	; 32
    2c44:	31 e0       	ldi	r19, 0x01	; 1
    2c46:	b9 01       	movw	r22, r18
    2c48:	41 e0       	ldi	r20, 0x01	; 1
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	0e 94 b0 1b 	call	0x3760	; 0x3760 <memcpy>
					cur_char_p = announce_buffer;
    2c50:	80 91 d5 01 	lds	r24, 0x01D5
    2c54:	90 91 d6 01 	lds	r25, 0x01D6
    2c58:	90 93 37 01 	sts	0x0137, r25
    2c5c:	80 93 36 01 	sts	0x0136, r24
					cur_character = '\0';
    2c60:	10 92 3a 01 	sts	0x013A, r1

					// Set back into previous mode
					mute_end = cur_timer;
    2c64:	80 91 60 01 	lds	r24, 0x0160
    2c68:	90 91 61 01 	lds	r25, 0x0161
    2c6c:	a0 91 62 01 	lds	r26, 0x0162
    2c70:	b0 91 63 01 	lds	r27, 0x0163
    2c74:	80 93 c6 01 	sts	0x01C6, r24
    2c78:	90 93 c7 01 	sts	0x01C7, r25
    2c7c:	a0 93 c8 01 	sts	0x01C8, r26
    2c80:	b0 93 c9 01 	sts	0x01C9, r27
					cur_mode = prev_mode;
    2c84:	80 91 b0 01 	lds	r24, 0x01B0
    2c88:	80 93 9a 01 	sts	0x019A, r24
					cur_state = prev_state;
    2c8c:	80 91 6a 01 	lds	r24, 0x016A
    2c90:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = prev_state_end;
    2c94:	80 91 ac 01 	lds	r24, 0x01AC
    2c98:	90 91 ad 01 	lds	r25, 0x01AD
    2c9c:	a0 91 ae 01 	lds	r26, 0x01AE
    2ca0:	b0 91 af 01 	lds	r27, 0x01AF
    2ca4:	80 93 c2 01 	sts	0x01C2, r24
    2ca8:	90 93 c3 01 	sts	0x01C3, r25
    2cac:	a0 93 c4 01 	sts	0x01C4, r26
    2cb0:	b0 93 c5 01 	sts	0x01C5, r27
				}
				break;
    2cb4:	5e c0       	rjmp	.+188    	; 0x2d72 <main+0x184c>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2cb6:	20 91 60 01 	lds	r18, 0x0160
    2cba:	30 91 61 01 	lds	r19, 0x0161
    2cbe:	40 91 62 01 	lds	r20, 0x0162
    2cc2:	50 91 63 01 	lds	r21, 0x0163
    2cc6:	80 91 c2 01 	lds	r24, 0x01C2
    2cca:	90 91 c3 01 	lds	r25, 0x01C3
    2cce:	a0 91 c4 01 	lds	r26, 0x01C4
    2cd2:	b0 91 c5 01 	lds	r27, 0x01C5
    2cd6:	82 17       	cp	r24, r18
    2cd8:	93 07       	cpc	r25, r19
    2cda:	a4 07       	cpc	r26, r20
    2cdc:	b5 07       	cpc	r27, r21
    2cde:	f0 f4       	brcc	.+60     	; 0x2d1c <main+0x17f6>
				{
					cur_state_end = cur_timer + dit_length;
    2ce0:	80 91 6b 01 	lds	r24, 0x016B
    2ce4:	90 91 6c 01 	lds	r25, 0x016C
    2ce8:	9c 01       	movw	r18, r24
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	80 91 60 01 	lds	r24, 0x0160
    2cf2:	90 91 61 01 	lds	r25, 0x0161
    2cf6:	a0 91 62 01 	lds	r26, 0x0162
    2cfa:	b0 91 63 01 	lds	r27, 0x0163
    2cfe:	82 0f       	add	r24, r18
    2d00:	93 1f       	adc	r25, r19
    2d02:	a4 1f       	adc	r26, r20
    2d04:	b5 1f       	adc	r27, r21
    2d06:	80 93 c2 01 	sts	0x01C2, r24
    2d0a:	90 93 c3 01 	sts	0x01C3, r25
    2d0e:	a0 93 c4 01 	sts	0x01C4, r26
    2d12:	b0 93 c5 01 	sts	0x01C5, r27
					cur_state = DITDELAY;
    2d16:	84 e0       	ldi	r24, 0x04	; 4
    2d18:	80 93 bc 01 	sts	0x01BC, r24
				}

				key_down = TRUE;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	80 93 34 01 	sts	0x0134, r24
				sidetone_on = TRUE;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	80 93 33 01 	sts	0x0133, r24
				break;
    2d2e:	21 c0       	rjmp	.+66     	; 0x2d72 <main+0x184c>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    2d30:	20 91 60 01 	lds	r18, 0x0160
    2d34:	30 91 61 01 	lds	r19, 0x0161
    2d38:	40 91 62 01 	lds	r20, 0x0162
    2d3c:	50 91 63 01 	lds	r21, 0x0163
    2d40:	80 91 c2 01 	lds	r24, 0x01C2
    2d44:	90 91 c3 01 	lds	r25, 0x01C3
    2d48:	a0 91 c4 01 	lds	r26, 0x01C4
    2d4c:	b0 91 c5 01 	lds	r27, 0x01C5
    2d50:	82 17       	cp	r24, r18
    2d52:	93 07       	cpc	r25, r19
    2d54:	a4 07       	cpc	r26, r20
    2d56:	b5 07       	cpc	r27, r21
    2d58:	18 f4       	brcc	.+6      	; 0x2d60 <main+0x183a>
					cur_state = IDLE;
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	80 93 bc 01 	sts	0x01BC, r24

				key_down = FALSE;
    2d60:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    2d64:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	80 93 33 01 	sts	0x0133, r24
				break;
    2d6e:	01 c0       	rjmp	.+2      	; 0x2d72 <main+0x184c>

			default:
				break;
    2d70:	00 00       	nop
			}
			break;
    2d72:	59 c3       	rjmp	.+1714   	; 0x3426 <main+0x1f00>

		case RECORD:
			switch(cur_state)
    2d74:	80 91 bc 01 	lds	r24, 0x01BC
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	83 30       	cpi	r24, 0x03	; 3
    2d7e:	91 05       	cpc	r25, r1
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <main+0x185e>
    2d82:	e3 c1       	rjmp	.+966    	; 0x314a <main+0x1c24>
    2d84:	84 30       	cpi	r24, 0x04	; 4
    2d86:	91 05       	cpc	r25, r1
    2d88:	5c f4       	brge	.+22     	; 0x2da0 <main+0x187a>
    2d8a:	81 30       	cpi	r24, 0x01	; 1
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <main+0x186c>
    2d90:	4c c0       	rjmp	.+152    	; 0x2e2a <main+0x1904>
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	91 05       	cpc	r25, r1
    2d96:	0c f0       	brlt	.+2      	; 0x2d9a <main+0x1874>
    2d98:	8e c1       	rjmp	.+796    	; 0x30b6 <main+0x1b90>
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	71 f0       	breq	.+28     	; 0x2dba <main+0x1894>
    2d9e:	40 c3       	rjmp	.+1664   	; 0x3420 <main+0x1efa>
    2da0:	8b 30       	cpi	r24, 0x0B	; 11
    2da2:	91 05       	cpc	r25, r1
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <main+0x1882>
    2da6:	b4 c2       	rjmp	.+1384   	; 0x3310 <main+0x1dea>
    2da8:	8c 30       	cpi	r24, 0x0C	; 12
    2daa:	91 05       	cpc	r25, r1
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <main+0x188a>
    2dae:	0c c3       	rjmp	.+1560   	; 0x33c8 <main+0x1ea2>
    2db0:	84 30       	cpi	r24, 0x04	; 4
    2db2:	91 05       	cpc	r25, r1
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <main+0x1892>
    2db6:	13 c2       	rjmp	.+1062   	; 0x31de <main+0x1cb8>
    2db8:	33 c3       	rjmp	.+1638   	; 0x3420 <main+0x1efa>
			{
			case INIT:
				mute_start = cur_timer;
    2dba:	80 91 60 01 	lds	r24, 0x0160
    2dbe:	90 91 61 01 	lds	r25, 0x0161
    2dc2:	a0 91 62 01 	lds	r26, 0x0162
    2dc6:	b0 91 63 01 	lds	r27, 0x0163
    2dca:	80 93 d1 01 	sts	0x01D1, r24
    2dce:	90 93 d2 01 	sts	0x01D2, r25
    2dd2:	a0 93 d3 01 	sts	0x01D3, r26
    2dd6:	b0 93 d4 01 	sts	0x01D4, r27
				mute_end = UINT32_MAX;
    2dda:	8f ef       	ldi	r24, 0xFF	; 255
    2ddc:	9f ef       	ldi	r25, 0xFF	; 255
    2dde:	dc 01       	movw	r26, r24
    2de0:	80 93 c6 01 	sts	0x01C6, r24
    2de4:	90 93 c7 01 	sts	0x01C7, r25
    2de8:	a0 93 c8 01 	sts	0x01C8, r26
    2dec:	b0 93 c9 01 	sts	0x01C9, r27

				// Initialize the current recorded character
				rec_input = 0;
    2df0:	10 92 3f 01 	sts	0x013F, r1
				rec_count = 0;
    2df4:	10 92 40 01 	sts	0x0140, r1
				rec_timeout = UINT32_MAX;
    2df8:	8f ef       	ldi	r24, 0xFF	; 255
    2dfa:	9f ef       	ldi	r25, 0xFF	; 255
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	80 93 41 01 	sts	0x0141, r24
    2e02:	90 93 42 01 	sts	0x0142, r25
    2e06:	a0 93 43 01 	sts	0x0143, r26
    2e0a:	b0 93 44 01 	sts	0x0144, r27

				memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    2e0e:	80 91 38 01 	lds	r24, 0x0138
    2e12:	90 91 39 01 	lds	r25, 0x0139
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	49 e2       	ldi	r20, 0x29	; 41
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	0e 94 b9 1b 	call	0x3772	; 0x3772 <memset>

				cur_state = IDLE;
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	80 93 bc 01 	sts	0x01BC, r24
				break;
    2e28:	fc c2       	rjmp	.+1528   	; 0x3422 <main+0x1efc>

			case IDLE:
				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    2e2a:	80 91 ca 01 	lds	r24, 0x01CA
    2e2e:	81 30       	cpi	r24, 0x01	; 1
    2e30:	09 f0       	breq	.+2      	; 0x2e34 <main+0x190e>
    2e32:	4b c0       	rjmp	.+150    	; 0x2eca <main+0x19a4>
    2e34:	80 91 b8 01 	lds	r24, 0x01B8
    2e38:	88 23       	and	r24, r24
    2e3a:	09 f0       	breq	.+2      	; 0x2e3e <main+0x1918>
    2e3c:	46 c0       	rjmp	.+140    	; 0x2eca <main+0x19a4>
				{
					prev_state = IDLE;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	80 93 bc 01 	sts	0x01BC, r24
					next_state = IDLE;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    2e50:	80 91 6b 01 	lds	r24, 0x016B
    2e54:	90 91 6c 01 	lds	r25, 0x016C
    2e58:	9c 01       	movw	r18, r24
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	50 e0       	ldi	r21, 0x00	; 0
    2e5e:	80 91 60 01 	lds	r24, 0x0160
    2e62:	90 91 61 01 	lds	r25, 0x0161
    2e66:	a0 91 62 01 	lds	r26, 0x0162
    2e6a:	b0 91 63 01 	lds	r27, 0x0163
    2e6e:	82 0f       	add	r24, r18
    2e70:	93 1f       	adc	r25, r19
    2e72:	a4 1f       	adc	r26, r20
    2e74:	b5 1f       	adc	r27, r21
    2e76:	80 93 c2 01 	sts	0x01C2, r24
    2e7a:	90 93 c3 01 	sts	0x01C3, r25
    2e7e:	a0 93 c4 01 	sts	0x01C4, r26
    2e82:	b0 93 c5 01 	sts	0x01C5, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    2e86:	80 91 60 01 	lds	r24, 0x0160
    2e8a:	90 91 61 01 	lds	r25, 0x0161
    2e8e:	a0 91 62 01 	lds	r26, 0x0162
    2e92:	b0 91 63 01 	lds	r27, 0x0163
    2e96:	88 51       	subi	r24, 0x18	; 24
    2e98:	9c 4f       	sbci	r25, 0xFC	; 252
    2e9a:	af 4f       	sbci	r26, 0xFF	; 255
    2e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9e:	80 93 41 01 	sts	0x0141, r24
    2ea2:	90 93 42 01 	sts	0x0142, r25
    2ea6:	a0 93 43 01 	sts	0x0143, r26
    2eaa:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_count++;
    2eae:	80 91 40 01 	lds	r24, 0x0140
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    2eb8:	80 91 40 01 	lds	r24, 0x0140
    2ebc:	86 30       	cpi	r24, 0x06	; 6
    2ebe:	08 f4       	brcc	.+2      	; 0x2ec2 <main+0x199c>
    2ec0:	d3 c0       	rjmp	.+422    	; 0x3068 <main+0x1b42>
						next_state = VALIDATECHAR;
    2ec2:	8b e0       	ldi	r24, 0x0B	; 11
    2ec4:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
					rec_timeout = cur_timer + REC_EXPIRATION;

					// Add this element to the recorded character
					rec_count++;
					if(rec_count >= 6)
    2ec8:	cf c0       	rjmp	.+414    	; 0x3068 <main+0x1b42>
						next_state = VALIDATECHAR;

				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    2eca:	80 91 b8 01 	lds	r24, 0x01B8
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <main+0x19ae>
    2ed2:	62 c0       	rjmp	.+196    	; 0x2f98 <main+0x1a72>
    2ed4:	80 91 ca 01 	lds	r24, 0x01CA
    2ed8:	88 23       	and	r24, r24
    2eda:	09 f0       	breq	.+2      	; 0x2ede <main+0x19b8>
    2edc:	5d c0       	rjmp	.+186    	; 0x2f98 <main+0x1a72>
				{
					prev_state = IDLE;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DAH;
    2ee4:	83 e0       	ldi	r24, 0x03	; 3
    2ee6:	80 93 bc 01 	sts	0x01BC, r24
					next_state = IDLE;
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + (dit_length * 3);
    2ef0:	20 91 6b 01 	lds	r18, 0x016B
    2ef4:	30 91 6c 01 	lds	r19, 0x016C
    2ef8:	c9 01       	movw	r24, r18
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	82 0f       	add	r24, r18
    2f00:	93 1f       	adc	r25, r19
    2f02:	9c 01       	movw	r18, r24
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	80 91 60 01 	lds	r24, 0x0160
    2f0c:	90 91 61 01 	lds	r25, 0x0161
    2f10:	a0 91 62 01 	lds	r26, 0x0162
    2f14:	b0 91 63 01 	lds	r27, 0x0163
    2f18:	82 0f       	add	r24, r18
    2f1a:	93 1f       	adc	r25, r19
    2f1c:	a4 1f       	adc	r26, r20
    2f1e:	b5 1f       	adc	r27, r21
    2f20:	80 93 c2 01 	sts	0x01C2, r24
    2f24:	90 93 c3 01 	sts	0x01C3, r25
    2f28:	a0 93 c4 01 	sts	0x01C4, r26
    2f2c:	b0 93 c5 01 	sts	0x01C5, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    2f30:	80 91 60 01 	lds	r24, 0x0160
    2f34:	90 91 61 01 	lds	r25, 0x0161
    2f38:	a0 91 62 01 	lds	r26, 0x0162
    2f3c:	b0 91 63 01 	lds	r27, 0x0163
    2f40:	88 51       	subi	r24, 0x18	; 24
    2f42:	9c 4f       	sbci	r25, 0xFC	; 252
    2f44:	af 4f       	sbci	r26, 0xFF	; 255
    2f46:	bf 4f       	sbci	r27, 0xFF	; 255
    2f48:	80 93 41 01 	sts	0x0141, r24
    2f4c:	90 93 42 01 	sts	0x0142, r25
    2f50:	a0 93 43 01 	sts	0x0143, r26
    2f54:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> rec_count);
    2f58:	80 91 40 01 	lds	r24, 0x0140
    2f5c:	28 2f       	mov	r18, r24
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	80 e8       	ldi	r24, 0x80	; 128
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	02 2e       	mov	r0, r18
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <main+0x1a46>
    2f68:	95 95       	asr	r25
    2f6a:	87 95       	ror	r24
    2f6c:	0a 94       	dec	r0
    2f6e:	e2 f7       	brpl	.-8      	; 0x2f68 <main+0x1a42>
    2f70:	98 2f       	mov	r25, r24
    2f72:	80 91 3f 01 	lds	r24, 0x013F
    2f76:	89 0f       	add	r24, r25
    2f78:	80 93 3f 01 	sts	0x013F, r24
					rec_count++;
    2f7c:	80 91 40 01 	lds	r24, 0x0140
    2f80:	8f 5f       	subi	r24, 0xFF	; 255
    2f82:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    2f86:	80 91 40 01 	lds	r24, 0x0140
    2f8a:	86 30       	cpi	r24, 0x06	; 6
    2f8c:	08 f4       	brcc	.+2      	; 0x2f90 <main+0x1a6a>
    2f8e:	6c c0       	rjmp	.+216    	; 0x3068 <main+0x1b42>
						next_state = VALIDATECHAR;
    2f90:	8b e0       	ldi	r24, 0x0B	; 11
    2f92:	80 93 9f 01 	sts	0x019F, r24
					rec_timeout = cur_timer + REC_EXPIRATION;

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> rec_count);
					rec_count++;
					if(rec_count >= 6)
    2f96:	68 c0       	rjmp	.+208    	; 0x3068 <main+0x1b42>
						next_state = VALIDATECHAR;
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    2f98:	80 91 ca 01 	lds	r24, 0x01CA
    2f9c:	81 30       	cpi	r24, 0x01	; 1
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <main+0x1a7c>
    2fa0:	63 c0       	rjmp	.+198    	; 0x3068 <main+0x1b42>
    2fa2:	80 91 b8 01 	lds	r24, 0x01B8
    2fa6:	81 30       	cpi	r24, 0x01	; 1
    2fa8:	09 f0       	breq	.+2      	; 0x2fac <main+0x1a86>
    2faa:	5e c0       	rjmp	.+188    	; 0x3068 <main+0x1b42>
    2fac:	80 91 9f 01 	lds	r24, 0x019F
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	09 f0       	breq	.+2      	; 0x2fb6 <main+0x1a90>
    2fb4:	59 c0       	rjmp	.+178    	; 0x3068 <main+0x1b42>
				{
					prev_state = IDLE;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DIT;
    2fbc:	82 e0       	ldi	r24, 0x02	; 2
    2fbe:	80 93 bc 01 	sts	0x01BC, r24
					next_state = DAH;
    2fc2:	83 e0       	ldi	r24, 0x03	; 3
    2fc4:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer + dit_length;
    2fc8:	80 91 6b 01 	lds	r24, 0x016B
    2fcc:	90 91 6c 01 	lds	r25, 0x016C
    2fd0:	9c 01       	movw	r18, r24
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	80 91 60 01 	lds	r24, 0x0160
    2fda:	90 91 61 01 	lds	r25, 0x0161
    2fde:	a0 91 62 01 	lds	r26, 0x0162
    2fe2:	b0 91 63 01 	lds	r27, 0x0163
    2fe6:	82 0f       	add	r24, r18
    2fe8:	93 1f       	adc	r25, r19
    2fea:	a4 1f       	adc	r26, r20
    2fec:	b5 1f       	adc	r27, r21
    2fee:	80 93 c2 01 	sts	0x01C2, r24
    2ff2:	90 93 c3 01 	sts	0x01C3, r25
    2ff6:	a0 93 c4 01 	sts	0x01C4, r26
    2ffa:	b0 93 c5 01 	sts	0x01C5, r27
					rec_timeout = cur_timer + REC_EXPIRATION;
    2ffe:	80 91 60 01 	lds	r24, 0x0160
    3002:	90 91 61 01 	lds	r25, 0x0161
    3006:	a0 91 62 01 	lds	r26, 0x0162
    300a:	b0 91 63 01 	lds	r27, 0x0163
    300e:	88 51       	subi	r24, 0x18	; 24
    3010:	9c 4f       	sbci	r25, 0xFC	; 252
    3012:	af 4f       	sbci	r26, 0xFF	; 255
    3014:	bf 4f       	sbci	r27, 0xFF	; 255
    3016:	80 93 41 01 	sts	0x0141, r24
    301a:	90 93 42 01 	sts	0x0142, r25
    301e:	a0 93 43 01 	sts	0x0143, r26
    3022:	b0 93 44 01 	sts	0x0144, r27

					// Add this element to the recorded character
					rec_input = rec_input + (0b10000000 >> (rec_count + 1));
    3026:	80 91 40 01 	lds	r24, 0x0140
    302a:	88 2f       	mov	r24, r24
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	9c 01       	movw	r18, r24
    3030:	2f 5f       	subi	r18, 0xFF	; 255
    3032:	3f 4f       	sbci	r19, 0xFF	; 255
    3034:	80 e8       	ldi	r24, 0x80	; 128
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	02 2e       	mov	r0, r18
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <main+0x1b1a>
    303c:	95 95       	asr	r25
    303e:	87 95       	ror	r24
    3040:	0a 94       	dec	r0
    3042:	e2 f7       	brpl	.-8      	; 0x303c <main+0x1b16>
    3044:	98 2f       	mov	r25, r24
    3046:	80 91 3f 01 	lds	r24, 0x013F
    304a:	89 0f       	add	r24, r25
    304c:	80 93 3f 01 	sts	0x013F, r24
					rec_count += 2;
    3050:	80 91 40 01 	lds	r24, 0x0140
    3054:	8e 5f       	subi	r24, 0xFE	; 254
    3056:	80 93 40 01 	sts	0x0140, r24
					if(rec_count >= 6)
    305a:	80 91 40 01 	lds	r24, 0x0140
    305e:	86 30       	cpi	r24, 0x06	; 6
    3060:	18 f0       	brcs	.+6      	; 0x3068 <main+0x1b42>
						next_state = VALIDATECHAR;
    3062:	8b e0       	ldi	r24, 0x0B	; 11
    3064:	80 93 9f 01 	sts	0x019F, r24
					cur_state_end = cur_timer;
				}*/

				// Handle character record timeout
				// Need to handle SPACE
				if((cur_timer > rec_timeout)/* && (rec_input > 0)*/)
    3068:	20 91 60 01 	lds	r18, 0x0160
    306c:	30 91 61 01 	lds	r19, 0x0161
    3070:	40 91 62 01 	lds	r20, 0x0162
    3074:	50 91 63 01 	lds	r21, 0x0163
    3078:	80 91 41 01 	lds	r24, 0x0141
    307c:	90 91 42 01 	lds	r25, 0x0142
    3080:	a0 91 43 01 	lds	r26, 0x0143
    3084:	b0 91 44 01 	lds	r27, 0x0144
    3088:	82 17       	cp	r24, r18
    308a:	93 07       	cpc	r25, r19
    308c:	a4 07       	cpc	r26, r20
    308e:	b5 07       	cpc	r27, r21
    3090:	18 f4       	brcc	.+6      	; 0x3098 <main+0x1b72>
					cur_state = VALIDATECHAR;
    3092:	8b e0       	ldi	r24, 0x0B	; 11
    3094:	80 93 bc 01 	sts	0x01BC, r24

				// If CMD is pressed, we are done recording
				if(cmd_btn == PRESS)
    3098:	80 91 bb 01 	lds	r24, 0x01BB
    309c:	81 30       	cpi	r24, 0x01	; 1
    309e:	19 f4       	brne	.+6      	; 0x30a6 <main+0x1b80>
					cur_state = EXIT;
    30a0:	8c e0       	ldi	r24, 0x0C	; 12
    30a2:	80 93 bc 01 	sts	0x01BC, r24

				key_down = FALSE;
    30a6:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    30aa:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	80 93 33 01 	sts	0x0133, r24
				break;
    30b4:	b6 c1       	rjmp	.+876    	; 0x3422 <main+0x1efc>

			case DIT:
				if(cur_timer > cur_state_end)
    30b6:	20 91 60 01 	lds	r18, 0x0160
    30ba:	30 91 61 01 	lds	r19, 0x0161
    30be:	40 91 62 01 	lds	r20, 0x0162
    30c2:	50 91 63 01 	lds	r21, 0x0163
    30c6:	80 91 c2 01 	lds	r24, 0x01C2
    30ca:	90 91 c3 01 	lds	r25, 0x01C3
    30ce:	a0 91 c4 01 	lds	r26, 0x01C4
    30d2:	b0 91 c5 01 	lds	r27, 0x01C5
    30d6:	82 17       	cp	r24, r18
    30d8:	93 07       	cpc	r25, r19
    30da:	a4 07       	cpc	r26, r20
    30dc:	b5 07       	cpc	r27, r21
    30de:	08 f5       	brcc	.+66     	; 0x3122 <main+0x1bfc>
				{
					prev_state = DIT;
    30e0:	82 e0       	ldi	r24, 0x02	; 2
    30e2:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    30e6:	84 e0       	ldi	r24, 0x04	; 4
    30e8:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + dit_length;
    30ec:	80 91 6b 01 	lds	r24, 0x016B
    30f0:	90 91 6c 01 	lds	r25, 0x016C
    30f4:	9c 01       	movw	r18, r24
    30f6:	40 e0       	ldi	r20, 0x00	; 0
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	80 91 60 01 	lds	r24, 0x0160
    30fe:	90 91 61 01 	lds	r25, 0x0161
    3102:	a0 91 62 01 	lds	r26, 0x0162
    3106:	b0 91 63 01 	lds	r27, 0x0163
    310a:	82 0f       	add	r24, r18
    310c:	93 1f       	adc	r25, r19
    310e:	a4 1f       	adc	r26, r20
    3110:	b5 1f       	adc	r27, r21
    3112:	80 93 c2 01 	sts	0x01C2, r24
    3116:	90 93 c3 01 	sts	0x01C3, r25
    311a:	a0 93 c4 01 	sts	0x01C4, r26
    311e:	b0 93 c5 01 	sts	0x01C5, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    3122:	80 91 b8 01 	lds	r24, 0x01B8
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	39 f4       	brne	.+14     	; 0x3138 <main+0x1c12>
    312a:	80 91 9f 01 	lds	r24, 0x019F
    312e:	81 30       	cpi	r24, 0x01	; 1
    3130:	19 f4       	brne	.+6      	; 0x3138 <main+0x1c12>
					next_state = DAH;
    3132:	83 e0       	ldi	r24, 0x03	; 3
    3134:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    3138:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	80 93 33 01 	sts	0x0133, r24
				break;
    3148:	6c c1       	rjmp	.+728    	; 0x3422 <main+0x1efc>

			case DAH:
				if(cur_timer > cur_state_end)
    314a:	20 91 60 01 	lds	r18, 0x0160
    314e:	30 91 61 01 	lds	r19, 0x0161
    3152:	40 91 62 01 	lds	r20, 0x0162
    3156:	50 91 63 01 	lds	r21, 0x0163
    315a:	80 91 c2 01 	lds	r24, 0x01C2
    315e:	90 91 c3 01 	lds	r25, 0x01C3
    3162:	a0 91 c4 01 	lds	r26, 0x01C4
    3166:	b0 91 c5 01 	lds	r27, 0x01C5
    316a:	82 17       	cp	r24, r18
    316c:	93 07       	cpc	r25, r19
    316e:	a4 07       	cpc	r26, r20
    3170:	b5 07       	cpc	r27, r21
    3172:	08 f5       	brcc	.+66     	; 0x31b6 <main+0x1c90>
				{
					prev_state = DAH;
    3174:	83 e0       	ldi	r24, 0x03	; 3
    3176:	80 93 6a 01 	sts	0x016A, r24
					cur_state = DITDELAY;
    317a:	84 e0       	ldi	r24, 0x04	; 4
    317c:	80 93 bc 01 	sts	0x01BC, r24
					cur_state_end = cur_timer + dit_length;
    3180:	80 91 6b 01 	lds	r24, 0x016B
    3184:	90 91 6c 01 	lds	r25, 0x016C
    3188:	9c 01       	movw	r18, r24
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	80 91 60 01 	lds	r24, 0x0160
    3192:	90 91 61 01 	lds	r25, 0x0161
    3196:	a0 91 62 01 	lds	r26, 0x0162
    319a:	b0 91 63 01 	lds	r27, 0x0163
    319e:	82 0f       	add	r24, r18
    31a0:	93 1f       	adc	r25, r19
    31a2:	a4 1f       	adc	r26, r20
    31a4:	b5 1f       	adc	r27, r21
    31a6:	80 93 c2 01 	sts	0x01C2, r24
    31aa:	90 93 c3 01 	sts	0x01C3, r25
    31ae:	a0 93 c4 01 	sts	0x01C4, r26
    31b2:	b0 93 c5 01 	sts	0x01C5, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    31b6:	80 91 ca 01 	lds	r24, 0x01CA
    31ba:	81 30       	cpi	r24, 0x01	; 1
    31bc:	39 f4       	brne	.+14     	; 0x31cc <main+0x1ca6>
    31be:	80 91 9f 01 	lds	r24, 0x019F
    31c2:	81 30       	cpi	r24, 0x01	; 1
    31c4:	19 f4       	brne	.+6      	; 0x31cc <main+0x1ca6>
					next_state = DIT;
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    31cc:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = TRUE;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	80 93 32 01 	sts	0x0132, r24
				mute_on = TRUE;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	80 93 33 01 	sts	0x0133, r24
				break;
    31dc:	22 c1       	rjmp	.+580    	; 0x3422 <main+0x1efc>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    31de:	20 91 60 01 	lds	r18, 0x0160
    31e2:	30 91 61 01 	lds	r19, 0x0161
    31e6:	40 91 62 01 	lds	r20, 0x0162
    31ea:	50 91 63 01 	lds	r21, 0x0163
    31ee:	80 91 c2 01 	lds	r24, 0x01C2
    31f2:	90 91 c3 01 	lds	r25, 0x01C3
    31f6:	a0 91 c4 01 	lds	r26, 0x01C4
    31fa:	b0 91 c5 01 	lds	r27, 0x01C5
    31fe:	82 17       	cp	r24, r18
    3200:	93 07       	cpc	r25, r19
    3202:	a4 07       	cpc	r26, r20
    3204:	b5 07       	cpc	r27, r21
    3206:	08 f0       	brcs	.+2      	; 0x320a <main+0x1ce4>
    3208:	5c c0       	rjmp	.+184    	; 0x32c2 <main+0x1d9c>
				{
					if(next_state == DIT)
    320a:	80 91 9f 01 	lds	r24, 0x019F
    320e:	82 30       	cpi	r24, 0x02	; 2
    3210:	f9 f4       	brne	.+62     	; 0x3250 <main+0x1d2a>
					{
						cur_state = DIT;
    3212:	82 e0       	ldi	r24, 0x02	; 2
    3214:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer + dit_length;
    3218:	80 91 6b 01 	lds	r24, 0x016B
    321c:	90 91 6c 01 	lds	r25, 0x016C
    3220:	9c 01       	movw	r18, r24
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	50 e0       	ldi	r21, 0x00	; 0
    3226:	80 91 60 01 	lds	r24, 0x0160
    322a:	90 91 61 01 	lds	r25, 0x0161
    322e:	a0 91 62 01 	lds	r26, 0x0162
    3232:	b0 91 63 01 	lds	r27, 0x0163
    3236:	82 0f       	add	r24, r18
    3238:	93 1f       	adc	r25, r19
    323a:	a4 1f       	adc	r26, r20
    323c:	b5 1f       	adc	r27, r21
    323e:	80 93 c2 01 	sts	0x01C2, r24
    3242:	90 93 c3 01 	sts	0x01C3, r25
    3246:	a0 93 c4 01 	sts	0x01C4, r26
    324a:	b0 93 c5 01 	sts	0x01C5, r27
    324e:	33 c0       	rjmp	.+102    	; 0x32b6 <main+0x1d90>
					}
					else if(next_state == DAH)
    3250:	80 91 9f 01 	lds	r24, 0x019F
    3254:	83 30       	cpi	r24, 0x03	; 3
    3256:	21 f5       	brne	.+72     	; 0x32a0 <main+0x1d7a>
					{
						cur_state = DAH;
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	80 93 bc 01 	sts	0x01BC, r24
						cur_state_end = cur_timer + (dit_length * 3);
    325e:	20 91 6b 01 	lds	r18, 0x016B
    3262:	30 91 6c 01 	lds	r19, 0x016C
    3266:	c9 01       	movw	r24, r18
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	82 0f       	add	r24, r18
    326e:	93 1f       	adc	r25, r19
    3270:	9c 01       	movw	r18, r24
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	80 91 60 01 	lds	r24, 0x0160
    327a:	90 91 61 01 	lds	r25, 0x0161
    327e:	a0 91 62 01 	lds	r26, 0x0162
    3282:	b0 91 63 01 	lds	r27, 0x0163
    3286:	82 0f       	add	r24, r18
    3288:	93 1f       	adc	r25, r19
    328a:	a4 1f       	adc	r26, r20
    328c:	b5 1f       	adc	r27, r21
    328e:	80 93 c2 01 	sts	0x01C2, r24
    3292:	90 93 c3 01 	sts	0x01C3, r25
    3296:	a0 93 c4 01 	sts	0x01C4, r26
    329a:	b0 93 c5 01 	sts	0x01C5, r27
    329e:	0b c0       	rjmp	.+22     	; 0x32b6 <main+0x1d90>
					}
					else if(next_state == VALIDATECHAR)
    32a0:	80 91 9f 01 	lds	r24, 0x019F
    32a4:	8b 30       	cpi	r24, 0x0B	; 11
    32a6:	21 f4       	brne	.+8      	; 0x32b0 <main+0x1d8a>
						cur_state = VALIDATECHAR;
    32a8:	8b e0       	ldi	r24, 0x0B	; 11
    32aa:	80 93 bc 01 	sts	0x01BC, r24
    32ae:	03 c0       	rjmp	.+6      	; 0x32b6 <main+0x1d90>
					else
						cur_state = IDLE;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	80 93 bc 01 	sts	0x01BC, r24

					prev_state = DITDELAY;
    32b6:	84 e0       	ldi	r24, 0x04	; 4
    32b8:	80 93 6a 01 	sts	0x016A, r24
					next_state = IDLE;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	80 93 9f 01 	sts	0x019F, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    32c2:	80 91 ca 01 	lds	r24, 0x01CA
    32c6:	81 30       	cpi	r24, 0x01	; 1
    32c8:	61 f4       	brne	.+24     	; 0x32e2 <main+0x1dbc>
    32ca:	80 91 6a 01 	lds	r24, 0x016A
    32ce:	83 30       	cpi	r24, 0x03	; 3
    32d0:	41 f4       	brne	.+16     	; 0x32e2 <main+0x1dbc>
    32d2:	80 91 9f 01 	lds	r24, 0x019F
    32d6:	81 30       	cpi	r24, 0x01	; 1
    32d8:	21 f4       	brne	.+8      	; 0x32e2 <main+0x1dbc>
					next_state = DIT;
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	80 93 9f 01 	sts	0x019F, r24
    32e0:	0f c0       	rjmp	.+30     	; 0x3300 <main+0x1dda>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    32e2:	80 91 b8 01 	lds	r24, 0x01B8
    32e6:	81 30       	cpi	r24, 0x01	; 1
    32e8:	59 f4       	brne	.+22     	; 0x3300 <main+0x1dda>
    32ea:	80 91 6a 01 	lds	r24, 0x016A
    32ee:	82 30       	cpi	r24, 0x02	; 2
    32f0:	39 f4       	brne	.+14     	; 0x3300 <main+0x1dda>
    32f2:	80 91 9f 01 	lds	r24, 0x019F
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	19 f4       	brne	.+6      	; 0x3300 <main+0x1dda>
					next_state = DAH;
    32fa:	83 e0       	ldi	r24, 0x03	; 3
    32fc:	80 93 9f 01 	sts	0x019F, r24

				key_down = FALSE;
    3300:	10 92 34 01 	sts	0x0134, r1
				sidetone_on = FALSE;
    3304:	10 92 32 01 	sts	0x0132, r1
				mute_on = TRUE;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	80 93 33 01 	sts	0x0133, r24
				break;
    330e:	89 c0       	rjmp	.+274    	; 0x3422 <main+0x1efc>
				// Compare recorded character with the Morse Code table

				// If rec_input is 0, dump to invalid

				// Tack a trailing "1" onto rec_input to indicate end of character
				rec_input = rec_input + (0b10000000 >> rec_count);
    3310:	80 91 40 01 	lds	r24, 0x0140
    3314:	28 2f       	mov	r18, r24
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	80 e8       	ldi	r24, 0x80	; 128
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	02 2e       	mov	r0, r18
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <main+0x1dfe>
    3320:	95 95       	asr	r25
    3322:	87 95       	ror	r24
    3324:	0a 94       	dec	r0
    3326:	e2 f7       	brpl	.-8      	; 0x3320 <main+0x1dfa>
    3328:	98 2f       	mov	r25, r24
    332a:	80 91 3f 01 	lds	r24, 0x013F
    332e:	89 0f       	add	r24, r25
    3330:	80 93 3f 01 	sts	0x013F, r24

				for(val_index = MORSE_CHAR_START; val_index <= 'Z'; val_index++)
    3334:	80 e2       	ldi	r24, 0x20	; 32
    3336:	80 93 45 01 	sts	0x0145, r24
    333a:	2c c0       	rjmp	.+88     	; 0x3394 <main+0x1e6e>
				{
					if(rec_input == pgm_read_byte(&morsechar[val_index]))
    333c:	80 91 45 01 	lds	r24, 0x0145
    3340:	88 2f       	mov	r24, r24
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	88 59       	subi	r24, 0x98	; 152
    3346:	9f 4f       	sbci	r25, 0xFF	; 255
    3348:	9f 87       	std	Y+15, r25	; 0x0f
    334a:	8e 87       	std	Y+14, r24	; 0x0e
    334c:	8e 85       	ldd	r24, Y+14	; 0x0e
    334e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3350:	fc 01       	movw	r30, r24
    3352:	14 91       	lpm	r17, Z+
    3354:	18 8b       	std	Y+16, r17	; 0x10
    3356:	98 89       	ldd	r25, Y+16	; 0x10
    3358:	80 91 3f 01 	lds	r24, 0x013F
    335c:	98 17       	cp	r25, r24
    335e:	a9 f4       	brne	.+42     	; 0x338a <main+0x1e64>
					{
						// Add recorded character to text buffer
						char temp_str[2] = {val_index, '\0'};
    3360:	80 91 45 01 	lds	r24, 0x0145
    3364:	89 8b       	std	Y+17, r24	; 0x11
    3366:	1a 8a       	std	Y+18, r1	; 0x12
						//temp_str[0] = val_index;
						//temp_str[1] = '\0';
						strcat(text_buffer, temp_str);
    3368:	80 91 38 01 	lds	r24, 0x0138
    336c:	90 91 39 01 	lds	r25, 0x0139
    3370:	9e 01       	movw	r18, r28
    3372:	2f 5e       	subi	r18, 0xEF	; 239
    3374:	3f 4f       	sbci	r19, 0xFF	; 255
    3376:	b9 01       	movw	r22, r18
    3378:	0e 94 c0 1b 	call	0x3780	; 0x3780 <strcat>

						// Reinitialize the current recorded character
						rec_input = 0;
    337c:	10 92 3f 01 	sts	0x013F, r1
						rec_count = 0;
    3380:	10 92 40 01 	sts	0x0140, r1
						cur_state = IDLE;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	80 93 bc 01 	sts	0x01BC, r24
				// If rec_input is 0, dump to invalid

				// Tack a trailing "1" onto rec_input to indicate end of character
				rec_input = rec_input + (0b10000000 >> rec_count);

				for(val_index = MORSE_CHAR_START; val_index <= 'Z'; val_index++)
    338a:	80 91 45 01 	lds	r24, 0x0145
    338e:	8f 5f       	subi	r24, 0xFF	; 255
    3390:	80 93 45 01 	sts	0x0145, r24
    3394:	80 91 45 01 	lds	r24, 0x0145
    3398:	8b 35       	cpi	r24, 0x5B	; 91
    339a:	80 f2       	brcs	.-96     	; 0x333c <main+0x1e16>
					}
				}

				// If no match, the character isn't valid. Toss it out and announce error
				// No match if rec_input is not reset to 0
				if(rec_input != 0)
    339c:	80 91 3f 01 	lds	r24, 0x013F
    33a0:	88 23       	and	r24, r24
    33a2:	71 f0       	breq	.+28     	; 0x33c0 <main+0x1e9a>
				{
					// Reinitialize the current recorded character
					rec_input = 0b10000000;
    33a4:	80 e8       	ldi	r24, 0x80	; 128
    33a6:	80 93 3f 01 	sts	0x013F, r24
					rec_count = 0;
    33aa:	10 92 40 01 	sts	0x0140, r1
					cur_state = IDLE;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	80 93 bc 01 	sts	0x01BC, r24

					// Indicate an error
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW);
    33b4:	81 e2       	ldi	r24, 0x21	; 33
    33b6:	91 e0       	ldi	r25, 0x01	; 1
    33b8:	60 e9       	ldi	r22, 0x90	; 144
    33ba:	71 e0       	ldi	r23, 0x01	; 1
    33bc:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
				}

				cur_state = IDLE;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	80 93 bc 01 	sts	0x01BC, r24

				break;
    33c6:	2d c0       	rjmp	.+90     	; 0x3422 <main+0x1efc>

			case EXIT:
				// Write the memory to EEPROM
				eeprom_update_block((const void*)&text_buffer, (void*)&ee_msg_mem_1, 40);
    33c8:	88 e3       	ldi	r24, 0x38	; 56
    33ca:	91 e0       	ldi	r25, 0x01	; 1
    33cc:	21 e0       	ldi	r18, 0x01	; 1
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	b9 01       	movw	r22, r18
    33d2:	48 e2       	ldi	r20, 0x28	; 40
    33d4:	50 e0       	ldi	r21, 0x00	; 0
    33d6:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__eeupd_block_m168>

				// Unmute and reset back to default mode
				mute_end = cur_timer;
    33da:	80 91 60 01 	lds	r24, 0x0160
    33de:	90 91 61 01 	lds	r25, 0x0161
    33e2:	a0 91 62 01 	lds	r26, 0x0162
    33e6:	b0 91 63 01 	lds	r27, 0x0163
    33ea:	80 93 c6 01 	sts	0x01C6, r24
    33ee:	90 93 c7 01 	sts	0x01C7, r25
    33f2:	a0 93 c8 01 	sts	0x01C8, r26
    33f6:	b0 93 c9 01 	sts	0x01C9, r27
				mute_on = FALSE;
    33fa:	10 92 33 01 	sts	0x0133, r1
				cur_state = IDLE;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	80 93 bc 01 	sts	0x01BC, r24
				cur_mode = default_mode;
    3404:	80 91 65 01 	lds	r24, 0x0165
    3408:	80 93 9a 01 	sts	0x019A, r24

				// Announce successful recording
				announce("R", st_freq);
    340c:	20 91 b2 01 	lds	r18, 0x01B2
    3410:	30 91 b3 01 	lds	r19, 0x01B3
    3414:	83 e2       	ldi	r24, 0x23	; 35
    3416:	91 e0       	ldi	r25, 0x01	; 1
    3418:	b9 01       	movw	r22, r18
    341a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <announce>
				break;
    341e:	01 c0       	rjmp	.+2      	; 0x3422 <main+0x1efc>

			default:
				break;
    3420:	00 00       	nop
			}
			break;
    3422:	01 c0       	rjmp	.+2      	; 0x3426 <main+0x1f00>

		default:
			break;
    3424:	00 00       	nop
		} // END switch(cur_mode)

	}
    3426:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <main+0xb6>

0000342a <__mulsi3>:
    342a:	62 9f       	mul	r22, r18
    342c:	d0 01       	movw	r26, r0
    342e:	73 9f       	mul	r23, r19
    3430:	f0 01       	movw	r30, r0
    3432:	82 9f       	mul	r24, r18
    3434:	e0 0d       	add	r30, r0
    3436:	f1 1d       	adc	r31, r1
    3438:	64 9f       	mul	r22, r20
    343a:	e0 0d       	add	r30, r0
    343c:	f1 1d       	adc	r31, r1
    343e:	92 9f       	mul	r25, r18
    3440:	f0 0d       	add	r31, r0
    3442:	83 9f       	mul	r24, r19
    3444:	f0 0d       	add	r31, r0
    3446:	74 9f       	mul	r23, r20
    3448:	f0 0d       	add	r31, r0
    344a:	65 9f       	mul	r22, r21
    344c:	f0 0d       	add	r31, r0
    344e:	99 27       	eor	r25, r25
    3450:	72 9f       	mul	r23, r18
    3452:	b0 0d       	add	r27, r0
    3454:	e1 1d       	adc	r30, r1
    3456:	f9 1f       	adc	r31, r25
    3458:	63 9f       	mul	r22, r19
    345a:	b0 0d       	add	r27, r0
    345c:	e1 1d       	adc	r30, r1
    345e:	f9 1f       	adc	r31, r25
    3460:	bd 01       	movw	r22, r26
    3462:	cf 01       	movw	r24, r30
    3464:	11 24       	eor	r1, r1
    3466:	08 95       	ret

00003468 <__udivmodhi4>:
    3468:	aa 1b       	sub	r26, r26
    346a:	bb 1b       	sub	r27, r27
    346c:	51 e1       	ldi	r21, 0x11	; 17
    346e:	07 c0       	rjmp	.+14     	; 0x347e <__udivmodhi4_ep>

00003470 <__udivmodhi4_loop>:
    3470:	aa 1f       	adc	r26, r26
    3472:	bb 1f       	adc	r27, r27
    3474:	a6 17       	cp	r26, r22
    3476:	b7 07       	cpc	r27, r23
    3478:	10 f0       	brcs	.+4      	; 0x347e <__udivmodhi4_ep>
    347a:	a6 1b       	sub	r26, r22
    347c:	b7 0b       	sbc	r27, r23

0000347e <__udivmodhi4_ep>:
    347e:	88 1f       	adc	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	5a 95       	dec	r21
    3484:	a9 f7       	brne	.-22     	; 0x3470 <__udivmodhi4_loop>
    3486:	80 95       	com	r24
    3488:	90 95       	com	r25
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	08 95       	ret

00003490 <__divmodhi4>:
    3490:	97 fb       	bst	r25, 7
    3492:	09 2e       	mov	r0, r25
    3494:	07 26       	eor	r0, r23
    3496:	0a d0       	rcall	.+20     	; 0x34ac <__divmodhi4_neg1>
    3498:	77 fd       	sbrc	r23, 7
    349a:	04 d0       	rcall	.+8      	; 0x34a4 <__divmodhi4_neg2>
    349c:	e5 df       	rcall	.-54     	; 0x3468 <__udivmodhi4>
    349e:	06 d0       	rcall	.+12     	; 0x34ac <__divmodhi4_neg1>
    34a0:	00 20       	and	r0, r0
    34a2:	1a f4       	brpl	.+6      	; 0x34aa <__divmodhi4_exit>

000034a4 <__divmodhi4_neg2>:
    34a4:	70 95       	com	r23
    34a6:	61 95       	neg	r22
    34a8:	7f 4f       	sbci	r23, 0xFF	; 255

000034aa <__divmodhi4_exit>:
    34aa:	08 95       	ret

000034ac <__divmodhi4_neg1>:
    34ac:	f6 f7       	brtc	.-4      	; 0x34aa <__divmodhi4_exit>
    34ae:	90 95       	com	r25
    34b0:	81 95       	neg	r24
    34b2:	9f 4f       	sbci	r25, 0xFF	; 255
    34b4:	08 95       	ret

000034b6 <__udivmodsi4>:
    34b6:	a1 e2       	ldi	r26, 0x21	; 33
    34b8:	1a 2e       	mov	r1, r26
    34ba:	aa 1b       	sub	r26, r26
    34bc:	bb 1b       	sub	r27, r27
    34be:	fd 01       	movw	r30, r26
    34c0:	0d c0       	rjmp	.+26     	; 0x34dc <__udivmodsi4_ep>

000034c2 <__udivmodsi4_loop>:
    34c2:	aa 1f       	adc	r26, r26
    34c4:	bb 1f       	adc	r27, r27
    34c6:	ee 1f       	adc	r30, r30
    34c8:	ff 1f       	adc	r31, r31
    34ca:	a2 17       	cp	r26, r18
    34cc:	b3 07       	cpc	r27, r19
    34ce:	e4 07       	cpc	r30, r20
    34d0:	f5 07       	cpc	r31, r21
    34d2:	20 f0       	brcs	.+8      	; 0x34dc <__udivmodsi4_ep>
    34d4:	a2 1b       	sub	r26, r18
    34d6:	b3 0b       	sbc	r27, r19
    34d8:	e4 0b       	sbc	r30, r20
    34da:	f5 0b       	sbc	r31, r21

000034dc <__udivmodsi4_ep>:
    34dc:	66 1f       	adc	r22, r22
    34de:	77 1f       	adc	r23, r23
    34e0:	88 1f       	adc	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	1a 94       	dec	r1
    34e6:	69 f7       	brne	.-38     	; 0x34c2 <__udivmodsi4_loop>
    34e8:	60 95       	com	r22
    34ea:	70 95       	com	r23
    34ec:	80 95       	com	r24
    34ee:	90 95       	com	r25
    34f0:	9b 01       	movw	r18, r22
    34f2:	ac 01       	movw	r20, r24
    34f4:	bd 01       	movw	r22, r26
    34f6:	cf 01       	movw	r24, r30
    34f8:	08 95       	ret

000034fa <malloc>:
    34fa:	cf 93       	push	r28
    34fc:	df 93       	push	r29
    34fe:	82 30       	cpi	r24, 0x02	; 2
    3500:	91 05       	cpc	r25, r1
    3502:	10 f4       	brcc	.+4      	; 0x3508 <malloc+0xe>
    3504:	82 e0       	ldi	r24, 0x02	; 2
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	e0 91 df 01 	lds	r30, 0x01DF
    350c:	f0 91 e0 01 	lds	r31, 0x01E0
    3510:	40 e0       	ldi	r20, 0x00	; 0
    3512:	50 e0       	ldi	r21, 0x00	; 0
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	26 c0       	rjmp	.+76     	; 0x3566 <malloc+0x6c>
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	68 17       	cp	r22, r24
    3520:	79 07       	cpc	r23, r25
    3522:	e0 f0       	brcs	.+56     	; 0x355c <malloc+0x62>
    3524:	68 17       	cp	r22, r24
    3526:	79 07       	cpc	r23, r25
    3528:	81 f4       	brne	.+32     	; 0x354a <malloc+0x50>
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	93 81       	ldd	r25, Z+3	; 0x03
    352e:	21 15       	cp	r18, r1
    3530:	31 05       	cpc	r19, r1
    3532:	31 f0       	breq	.+12     	; 0x3540 <malloc+0x46>
    3534:	d9 01       	movw	r26, r18
    3536:	13 96       	adiw	r26, 0x03	; 3
    3538:	9c 93       	st	X, r25
    353a:	8e 93       	st	-X, r24
    353c:	12 97       	sbiw	r26, 0x02	; 2
    353e:	2b c0       	rjmp	.+86     	; 0x3596 <malloc+0x9c>
    3540:	90 93 e0 01 	sts	0x01E0, r25
    3544:	80 93 df 01 	sts	0x01DF, r24
    3548:	26 c0       	rjmp	.+76     	; 0x3596 <malloc+0x9c>
    354a:	41 15       	cp	r20, r1
    354c:	51 05       	cpc	r21, r1
    354e:	19 f0       	breq	.+6      	; 0x3556 <malloc+0x5c>
    3550:	64 17       	cp	r22, r20
    3552:	75 07       	cpc	r23, r21
    3554:	18 f4       	brcc	.+6      	; 0x355c <malloc+0x62>
    3556:	ab 01       	movw	r20, r22
    3558:	e9 01       	movw	r28, r18
    355a:	df 01       	movw	r26, r30
    355c:	9f 01       	movw	r18, r30
    355e:	72 81       	ldd	r23, Z+2	; 0x02
    3560:	63 81       	ldd	r22, Z+3	; 0x03
    3562:	e7 2f       	mov	r30, r23
    3564:	f6 2f       	mov	r31, r22
    3566:	30 97       	sbiw	r30, 0x00	; 0
    3568:	c1 f6       	brne	.-80     	; 0x351a <malloc+0x20>
    356a:	41 15       	cp	r20, r1
    356c:	51 05       	cpc	r21, r1
    356e:	01 f1       	breq	.+64     	; 0x35b0 <malloc+0xb6>
    3570:	48 1b       	sub	r20, r24
    3572:	59 0b       	sbc	r21, r25
    3574:	44 30       	cpi	r20, 0x04	; 4
    3576:	51 05       	cpc	r21, r1
    3578:	80 f4       	brcc	.+32     	; 0x359a <malloc+0xa0>
    357a:	12 96       	adiw	r26, 0x02	; 2
    357c:	8d 91       	ld	r24, X+
    357e:	9c 91       	ld	r25, X
    3580:	13 97       	sbiw	r26, 0x03	; 3
    3582:	20 97       	sbiw	r28, 0x00	; 0
    3584:	19 f0       	breq	.+6      	; 0x358c <malloc+0x92>
    3586:	9b 83       	std	Y+3, r25	; 0x03
    3588:	8a 83       	std	Y+2, r24	; 0x02
    358a:	04 c0       	rjmp	.+8      	; 0x3594 <malloc+0x9a>
    358c:	90 93 e0 01 	sts	0x01E0, r25
    3590:	80 93 df 01 	sts	0x01DF, r24
    3594:	fd 01       	movw	r30, r26
    3596:	32 96       	adiw	r30, 0x02	; 2
    3598:	46 c0       	rjmp	.+140    	; 0x3626 <malloc+0x12c>
    359a:	fd 01       	movw	r30, r26
    359c:	e4 0f       	add	r30, r20
    359e:	f5 1f       	adc	r31, r21
    35a0:	81 93       	st	Z+, r24
    35a2:	91 93       	st	Z+, r25
    35a4:	42 50       	subi	r20, 0x02	; 2
    35a6:	50 40       	sbci	r21, 0x00	; 0
    35a8:	11 96       	adiw	r26, 0x01	; 1
    35aa:	5c 93       	st	X, r21
    35ac:	4e 93       	st	-X, r20
    35ae:	3b c0       	rjmp	.+118    	; 0x3626 <malloc+0x12c>
    35b0:	20 91 dd 01 	lds	r18, 0x01DD
    35b4:	30 91 de 01 	lds	r19, 0x01DE
    35b8:	21 15       	cp	r18, r1
    35ba:	31 05       	cpc	r19, r1
    35bc:	41 f4       	brne	.+16     	; 0x35ce <malloc+0xd4>
    35be:	20 91 2e 01 	lds	r18, 0x012E
    35c2:	30 91 2f 01 	lds	r19, 0x012F
    35c6:	30 93 de 01 	sts	0x01DE, r19
    35ca:	20 93 dd 01 	sts	0x01DD, r18
    35ce:	20 91 30 01 	lds	r18, 0x0130
    35d2:	30 91 31 01 	lds	r19, 0x0131
    35d6:	21 15       	cp	r18, r1
    35d8:	31 05       	cpc	r19, r1
    35da:	41 f4       	brne	.+16     	; 0x35ec <malloc+0xf2>
    35dc:	2d b7       	in	r18, 0x3d	; 61
    35de:	3e b7       	in	r19, 0x3e	; 62
    35e0:	40 91 2c 01 	lds	r20, 0x012C
    35e4:	50 91 2d 01 	lds	r21, 0x012D
    35e8:	24 1b       	sub	r18, r20
    35ea:	35 0b       	sbc	r19, r21
    35ec:	e0 91 dd 01 	lds	r30, 0x01DD
    35f0:	f0 91 de 01 	lds	r31, 0x01DE
    35f4:	e2 17       	cp	r30, r18
    35f6:	f3 07       	cpc	r31, r19
    35f8:	a0 f4       	brcc	.+40     	; 0x3622 <malloc+0x128>
    35fa:	2e 1b       	sub	r18, r30
    35fc:	3f 0b       	sbc	r19, r31
    35fe:	28 17       	cp	r18, r24
    3600:	39 07       	cpc	r19, r25
    3602:	78 f0       	brcs	.+30     	; 0x3622 <malloc+0x128>
    3604:	ac 01       	movw	r20, r24
    3606:	4e 5f       	subi	r20, 0xFE	; 254
    3608:	5f 4f       	sbci	r21, 0xFF	; 255
    360a:	24 17       	cp	r18, r20
    360c:	35 07       	cpc	r19, r21
    360e:	48 f0       	brcs	.+18     	; 0x3622 <malloc+0x128>
    3610:	4e 0f       	add	r20, r30
    3612:	5f 1f       	adc	r21, r31
    3614:	50 93 de 01 	sts	0x01DE, r21
    3618:	40 93 dd 01 	sts	0x01DD, r20
    361c:	81 93       	st	Z+, r24
    361e:	91 93       	st	Z+, r25
    3620:	02 c0       	rjmp	.+4      	; 0x3626 <malloc+0x12c>
    3622:	e0 e0       	ldi	r30, 0x00	; 0
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	cf 01       	movw	r24, r30
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	08 95       	ret

0000362e <free>:
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	00 97       	sbiw	r24, 0x00	; 0
    3634:	09 f4       	brne	.+2      	; 0x3638 <free+0xa>
    3636:	91 c0       	rjmp	.+290    	; 0x375a <free+0x12c>
    3638:	fc 01       	movw	r30, r24
    363a:	32 97       	sbiw	r30, 0x02	; 2
    363c:	13 82       	std	Z+3, r1	; 0x03
    363e:	12 82       	std	Z+2, r1	; 0x02
    3640:	60 91 df 01 	lds	r22, 0x01DF
    3644:	70 91 e0 01 	lds	r23, 0x01E0
    3648:	61 15       	cp	r22, r1
    364a:	71 05       	cpc	r23, r1
    364c:	81 f4       	brne	.+32     	; 0x366e <free+0x40>
    364e:	20 81       	ld	r18, Z
    3650:	31 81       	ldd	r19, Z+1	; 0x01
    3652:	28 0f       	add	r18, r24
    3654:	39 1f       	adc	r19, r25
    3656:	80 91 dd 01 	lds	r24, 0x01DD
    365a:	90 91 de 01 	lds	r25, 0x01DE
    365e:	82 17       	cp	r24, r18
    3660:	93 07       	cpc	r25, r19
    3662:	99 f5       	brne	.+102    	; 0x36ca <free+0x9c>
    3664:	f0 93 de 01 	sts	0x01DE, r31
    3668:	e0 93 dd 01 	sts	0x01DD, r30
    366c:	76 c0       	rjmp	.+236    	; 0x375a <free+0x12c>
    366e:	db 01       	movw	r26, r22
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	02 c0       	rjmp	.+4      	; 0x367a <free+0x4c>
    3676:	cd 01       	movw	r24, r26
    3678:	d9 01       	movw	r26, r18
    367a:	ae 17       	cp	r26, r30
    367c:	bf 07       	cpc	r27, r31
    367e:	48 f4       	brcc	.+18     	; 0x3692 <free+0x64>
    3680:	12 96       	adiw	r26, 0x02	; 2
    3682:	2d 91       	ld	r18, X+
    3684:	3c 91       	ld	r19, X
    3686:	13 97       	sbiw	r26, 0x03	; 3
    3688:	21 15       	cp	r18, r1
    368a:	31 05       	cpc	r19, r1
    368c:	a1 f7       	brne	.-24     	; 0x3676 <free+0x48>
    368e:	cd 01       	movw	r24, r26
    3690:	21 c0       	rjmp	.+66     	; 0x36d4 <free+0xa6>
    3692:	b3 83       	std	Z+3, r27	; 0x03
    3694:	a2 83       	std	Z+2, r26	; 0x02
    3696:	ef 01       	movw	r28, r30
    3698:	49 91       	ld	r20, Y+
    369a:	59 91       	ld	r21, Y+
    369c:	9e 01       	movw	r18, r28
    369e:	24 0f       	add	r18, r20
    36a0:	35 1f       	adc	r19, r21
    36a2:	a2 17       	cp	r26, r18
    36a4:	b3 07       	cpc	r27, r19
    36a6:	79 f4       	brne	.+30     	; 0x36c6 <free+0x98>
    36a8:	2d 91       	ld	r18, X+
    36aa:	3c 91       	ld	r19, X
    36ac:	11 97       	sbiw	r26, 0x01	; 1
    36ae:	24 0f       	add	r18, r20
    36b0:	35 1f       	adc	r19, r21
    36b2:	2e 5f       	subi	r18, 0xFE	; 254
    36b4:	3f 4f       	sbci	r19, 0xFF	; 255
    36b6:	31 83       	std	Z+1, r19	; 0x01
    36b8:	20 83       	st	Z, r18
    36ba:	12 96       	adiw	r26, 0x02	; 2
    36bc:	2d 91       	ld	r18, X+
    36be:	3c 91       	ld	r19, X
    36c0:	13 97       	sbiw	r26, 0x03	; 3
    36c2:	33 83       	std	Z+3, r19	; 0x03
    36c4:	22 83       	std	Z+2, r18	; 0x02
    36c6:	00 97       	sbiw	r24, 0x00	; 0
    36c8:	29 f4       	brne	.+10     	; 0x36d4 <free+0xa6>
    36ca:	f0 93 e0 01 	sts	0x01E0, r31
    36ce:	e0 93 df 01 	sts	0x01DF, r30
    36d2:	43 c0       	rjmp	.+134    	; 0x375a <free+0x12c>
    36d4:	dc 01       	movw	r26, r24
    36d6:	13 96       	adiw	r26, 0x03	; 3
    36d8:	fc 93       	st	X, r31
    36da:	ee 93       	st	-X, r30
    36dc:	12 97       	sbiw	r26, 0x02	; 2
    36de:	4d 91       	ld	r20, X+
    36e0:	5d 91       	ld	r21, X+
    36e2:	a4 0f       	add	r26, r20
    36e4:	b5 1f       	adc	r27, r21
    36e6:	ea 17       	cp	r30, r26
    36e8:	fb 07       	cpc	r31, r27
    36ea:	69 f4       	brne	.+26     	; 0x3706 <free+0xd8>
    36ec:	20 81       	ld	r18, Z
    36ee:	31 81       	ldd	r19, Z+1	; 0x01
    36f0:	24 0f       	add	r18, r20
    36f2:	35 1f       	adc	r19, r21
    36f4:	2e 5f       	subi	r18, 0xFE	; 254
    36f6:	3f 4f       	sbci	r19, 0xFF	; 255
    36f8:	ec 01       	movw	r28, r24
    36fa:	39 83       	std	Y+1, r19	; 0x01
    36fc:	28 83       	st	Y, r18
    36fe:	22 81       	ldd	r18, Z+2	; 0x02
    3700:	33 81       	ldd	r19, Z+3	; 0x03
    3702:	3b 83       	std	Y+3, r19	; 0x03
    3704:	2a 83       	std	Y+2, r18	; 0x02
    3706:	e0 e0       	ldi	r30, 0x00	; 0
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <free+0xe2>
    370c:	fb 01       	movw	r30, r22
    370e:	bc 01       	movw	r22, r24
    3710:	db 01       	movw	r26, r22
    3712:	12 96       	adiw	r26, 0x02	; 2
    3714:	8d 91       	ld	r24, X+
    3716:	9c 91       	ld	r25, X
    3718:	13 97       	sbiw	r26, 0x03	; 3
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	b9 f7       	brne	.-18     	; 0x370c <free+0xde>
    371e:	9b 01       	movw	r18, r22
    3720:	2e 5f       	subi	r18, 0xFE	; 254
    3722:	3f 4f       	sbci	r19, 0xFF	; 255
    3724:	8d 91       	ld	r24, X+
    3726:	9c 91       	ld	r25, X
    3728:	11 97       	sbiw	r26, 0x01	; 1
    372a:	82 0f       	add	r24, r18
    372c:	93 1f       	adc	r25, r19
    372e:	40 91 dd 01 	lds	r20, 0x01DD
    3732:	50 91 de 01 	lds	r21, 0x01DE
    3736:	48 17       	cp	r20, r24
    3738:	59 07       	cpc	r21, r25
    373a:	79 f4       	brne	.+30     	; 0x375a <free+0x12c>
    373c:	30 97       	sbiw	r30, 0x00	; 0
    373e:	29 f4       	brne	.+10     	; 0x374a <free+0x11c>
    3740:	10 92 e0 01 	sts	0x01E0, r1
    3744:	10 92 df 01 	sts	0x01DF, r1
    3748:	02 c0       	rjmp	.+4      	; 0x374e <free+0x120>
    374a:	13 82       	std	Z+3, r1	; 0x03
    374c:	12 82       	std	Z+2, r1	; 0x02
    374e:	22 50       	subi	r18, 0x02	; 2
    3750:	30 40       	sbci	r19, 0x00	; 0
    3752:	30 93 de 01 	sts	0x01DE, r19
    3756:	20 93 dd 01 	sts	0x01DD, r18
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	08 95       	ret

00003760 <memcpy>:
    3760:	fb 01       	movw	r30, r22
    3762:	dc 01       	movw	r26, r24
    3764:	02 c0       	rjmp	.+4      	; 0x376a <memcpy+0xa>
    3766:	01 90       	ld	r0, Z+
    3768:	0d 92       	st	X+, r0
    376a:	41 50       	subi	r20, 0x01	; 1
    376c:	50 40       	sbci	r21, 0x00	; 0
    376e:	d8 f7       	brcc	.-10     	; 0x3766 <memcpy+0x6>
    3770:	08 95       	ret

00003772 <memset>:
    3772:	dc 01       	movw	r26, r24
    3774:	01 c0       	rjmp	.+2      	; 0x3778 <memset+0x6>
    3776:	6d 93       	st	X+, r22
    3778:	41 50       	subi	r20, 0x01	; 1
    377a:	50 40       	sbci	r21, 0x00	; 0
    377c:	e0 f7       	brcc	.-8      	; 0x3776 <memset+0x4>
    377e:	08 95       	ret

00003780 <strcat>:
    3780:	fb 01       	movw	r30, r22
    3782:	dc 01       	movw	r26, r24
    3784:	0d 90       	ld	r0, X+
    3786:	00 20       	and	r0, r0
    3788:	e9 f7       	brne	.-6      	; 0x3784 <strcat+0x4>
    378a:	11 97       	sbiw	r26, 0x01	; 1
    378c:	01 90       	ld	r0, Z+
    378e:	0d 92       	st	X+, r0
    3790:	00 20       	and	r0, r0
    3792:	e1 f7       	brne	.-8      	; 0x378c <strcat+0xc>
    3794:	08 95       	ret

00003796 <strcpy>:
    3796:	fb 01       	movw	r30, r22
    3798:	dc 01       	movw	r26, r24
    379a:	01 90       	ld	r0, Z+
    379c:	0d 92       	st	X+, r0
    379e:	00 20       	and	r0, r0
    37a0:	e1 f7       	brne	.-8      	; 0x379a <strcpy+0x4>
    37a2:	08 95       	ret

000037a4 <strupr>:
    37a4:	dc 01       	movw	r26, r24
    37a6:	6c 91       	ld	r22, X
    37a8:	61 56       	subi	r22, 0x61	; 97
    37aa:	6a 31       	cpi	r22, 0x1A	; 26
    37ac:	08 f0       	brcs	.+2      	; 0x37b0 <strupr+0xc>
    37ae:	60 5e       	subi	r22, 0xE0	; 224
    37b0:	6f 5b       	subi	r22, 0xBF	; 191
    37b2:	6d 93       	st	X+, r22
    37b4:	c1 f7       	brne	.-16     	; 0x37a6 <strupr+0x2>
    37b6:	08 95       	ret

000037b8 <sprintf>:
    37b8:	ae e0       	ldi	r26, 0x0E	; 14
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e2 ee       	ldi	r30, 0xE2	; 226
    37be:	fb e1       	ldi	r31, 0x1B	; 27
    37c0:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__prologue_saves__+0x1c>
    37c4:	0d 89       	ldd	r16, Y+21	; 0x15
    37c6:	1e 89       	ldd	r17, Y+22	; 0x16
    37c8:	86 e0       	ldi	r24, 0x06	; 6
    37ca:	8c 83       	std	Y+4, r24	; 0x04
    37cc:	1a 83       	std	Y+2, r17	; 0x02
    37ce:	09 83       	std	Y+1, r16	; 0x01
    37d0:	8f ef       	ldi	r24, 0xFF	; 255
    37d2:	9f e7       	ldi	r25, 0x7F	; 127
    37d4:	9e 83       	std	Y+6, r25	; 0x06
    37d6:	8d 83       	std	Y+5, r24	; 0x05
    37d8:	9e 01       	movw	r18, r28
    37da:	27 5e       	subi	r18, 0xE7	; 231
    37dc:	3f 4f       	sbci	r19, 0xFF	; 255
    37de:	ce 01       	movw	r24, r28
    37e0:	01 96       	adiw	r24, 0x01	; 1
    37e2:	6f 89       	ldd	r22, Y+23	; 0x17
    37e4:	78 8d       	ldd	r23, Y+24	; 0x18
    37e6:	a9 01       	movw	r20, r18
    37e8:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <vfprintf>
    37ec:	ef 81       	ldd	r30, Y+7	; 0x07
    37ee:	f8 85       	ldd	r31, Y+8	; 0x08
    37f0:	e0 0f       	add	r30, r16
    37f2:	f1 1f       	adc	r31, r17
    37f4:	10 82       	st	Z, r1
    37f6:	2e 96       	adiw	r28, 0x0e	; 14
    37f8:	e4 e0       	ldi	r30, 0x04	; 4
    37fa:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__epilogue_restores__+0x1c>

000037fe <vfprintf>:
    37fe:	ac e0       	ldi	r26, 0x0C	; 12
    3800:	b0 e0       	ldi	r27, 0x00	; 0
    3802:	e5 e0       	ldi	r30, 0x05	; 5
    3804:	fc e1       	ldi	r31, 0x1C	; 28
    3806:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__>
    380a:	6c 01       	movw	r12, r24
    380c:	1b 01       	movw	r2, r22
    380e:	8a 01       	movw	r16, r20
    3810:	fc 01       	movw	r30, r24
    3812:	17 82       	std	Z+7, r1	; 0x07
    3814:	16 82       	std	Z+6, r1	; 0x06
    3816:	83 81       	ldd	r24, Z+3	; 0x03
    3818:	81 ff       	sbrs	r24, 1
    381a:	d1 c1       	rjmp	.+930    	; 0x3bbe <vfprintf+0x3c0>
    381c:	2e 01       	movw	r4, r28
    381e:	08 94       	sec
    3820:	41 1c       	adc	r4, r1
    3822:	51 1c       	adc	r5, r1
    3824:	f6 01       	movw	r30, r12
    3826:	93 81       	ldd	r25, Z+3	; 0x03
    3828:	f1 01       	movw	r30, r2
    382a:	93 fd       	sbrc	r25, 3
    382c:	85 91       	lpm	r24, Z+
    382e:	93 ff       	sbrs	r25, 3
    3830:	81 91       	ld	r24, Z+
    3832:	1f 01       	movw	r2, r30
    3834:	88 23       	and	r24, r24
    3836:	09 f4       	brne	.+2      	; 0x383a <vfprintf+0x3c>
    3838:	be c1       	rjmp	.+892    	; 0x3bb6 <vfprintf+0x3b8>
    383a:	85 32       	cpi	r24, 0x25	; 37
    383c:	39 f4       	brne	.+14     	; 0x384c <vfprintf+0x4e>
    383e:	93 fd       	sbrc	r25, 3
    3840:	85 91       	lpm	r24, Z+
    3842:	93 ff       	sbrs	r25, 3
    3844:	81 91       	ld	r24, Z+
    3846:	1f 01       	movw	r2, r30
    3848:	85 32       	cpi	r24, 0x25	; 37
    384a:	29 f4       	brne	.+10     	; 0x3856 <vfprintf+0x58>
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	b6 01       	movw	r22, r12
    3850:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    3854:	e7 cf       	rjmp	.-50     	; 0x3824 <vfprintf+0x26>
    3856:	ee 24       	eor	r14, r14
    3858:	ff 24       	eor	r15, r15
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	20 32       	cpi	r18, 0x20	; 32
    385e:	b0 f4       	brcc	.+44     	; 0x388c <vfprintf+0x8e>
    3860:	8b 32       	cpi	r24, 0x2B	; 43
    3862:	69 f0       	breq	.+26     	; 0x387e <vfprintf+0x80>
    3864:	8c 32       	cpi	r24, 0x2C	; 44
    3866:	28 f4       	brcc	.+10     	; 0x3872 <vfprintf+0x74>
    3868:	80 32       	cpi	r24, 0x20	; 32
    386a:	51 f0       	breq	.+20     	; 0x3880 <vfprintf+0x82>
    386c:	83 32       	cpi	r24, 0x23	; 35
    386e:	71 f4       	brne	.+28     	; 0x388c <vfprintf+0x8e>
    3870:	0b c0       	rjmp	.+22     	; 0x3888 <vfprintf+0x8a>
    3872:	8d 32       	cpi	r24, 0x2D	; 45
    3874:	39 f0       	breq	.+14     	; 0x3884 <vfprintf+0x86>
    3876:	80 33       	cpi	r24, 0x30	; 48
    3878:	49 f4       	brne	.+18     	; 0x388c <vfprintf+0x8e>
    387a:	21 60       	ori	r18, 0x01	; 1
    387c:	2c c0       	rjmp	.+88     	; 0x38d6 <vfprintf+0xd8>
    387e:	22 60       	ori	r18, 0x02	; 2
    3880:	24 60       	ori	r18, 0x04	; 4
    3882:	29 c0       	rjmp	.+82     	; 0x38d6 <vfprintf+0xd8>
    3884:	28 60       	ori	r18, 0x08	; 8
    3886:	27 c0       	rjmp	.+78     	; 0x38d6 <vfprintf+0xd8>
    3888:	20 61       	ori	r18, 0x10	; 16
    388a:	25 c0       	rjmp	.+74     	; 0x38d6 <vfprintf+0xd8>
    388c:	27 fd       	sbrc	r18, 7
    388e:	2c c0       	rjmp	.+88     	; 0x38e8 <vfprintf+0xea>
    3890:	38 2f       	mov	r19, r24
    3892:	30 53       	subi	r19, 0x30	; 48
    3894:	3a 30       	cpi	r19, 0x0A	; 10
    3896:	98 f4       	brcc	.+38     	; 0x38be <vfprintf+0xc0>
    3898:	26 ff       	sbrs	r18, 6
    389a:	08 c0       	rjmp	.+16     	; 0x38ac <vfprintf+0xae>
    389c:	8e 2d       	mov	r24, r14
    389e:	88 0f       	add	r24, r24
    38a0:	e8 2e       	mov	r14, r24
    38a2:	ee 0c       	add	r14, r14
    38a4:	ee 0c       	add	r14, r14
    38a6:	e8 0e       	add	r14, r24
    38a8:	e3 0e       	add	r14, r19
    38aa:	15 c0       	rjmp	.+42     	; 0x38d6 <vfprintf+0xd8>
    38ac:	8f 2d       	mov	r24, r15
    38ae:	88 0f       	add	r24, r24
    38b0:	f8 2e       	mov	r15, r24
    38b2:	ff 0c       	add	r15, r15
    38b4:	ff 0c       	add	r15, r15
    38b6:	f8 0e       	add	r15, r24
    38b8:	f3 0e       	add	r15, r19
    38ba:	20 62       	ori	r18, 0x20	; 32
    38bc:	0c c0       	rjmp	.+24     	; 0x38d6 <vfprintf+0xd8>
    38be:	8e 32       	cpi	r24, 0x2E	; 46
    38c0:	21 f4       	brne	.+8      	; 0x38ca <vfprintf+0xcc>
    38c2:	26 fd       	sbrc	r18, 6
    38c4:	78 c1       	rjmp	.+752    	; 0x3bb6 <vfprintf+0x3b8>
    38c6:	20 64       	ori	r18, 0x40	; 64
    38c8:	06 c0       	rjmp	.+12     	; 0x38d6 <vfprintf+0xd8>
    38ca:	8c 36       	cpi	r24, 0x6C	; 108
    38cc:	11 f4       	brne	.+4      	; 0x38d2 <vfprintf+0xd4>
    38ce:	20 68       	ori	r18, 0x80	; 128
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <vfprintf+0xd8>
    38d2:	88 36       	cpi	r24, 0x68	; 104
    38d4:	49 f4       	brne	.+18     	; 0x38e8 <vfprintf+0xea>
    38d6:	f1 01       	movw	r30, r2
    38d8:	93 fd       	sbrc	r25, 3
    38da:	85 91       	lpm	r24, Z+
    38dc:	93 ff       	sbrs	r25, 3
    38de:	81 91       	ld	r24, Z+
    38e0:	1f 01       	movw	r2, r30
    38e2:	88 23       	and	r24, r24
    38e4:	09 f0       	breq	.+2      	; 0x38e8 <vfprintf+0xea>
    38e6:	ba cf       	rjmp	.-140    	; 0x385c <vfprintf+0x5e>
    38e8:	98 2f       	mov	r25, r24
    38ea:	95 54       	subi	r25, 0x45	; 69
    38ec:	93 30       	cpi	r25, 0x03	; 3
    38ee:	18 f0       	brcs	.+6      	; 0x38f6 <vfprintf+0xf8>
    38f0:	90 52       	subi	r25, 0x20	; 32
    38f2:	93 30       	cpi	r25, 0x03	; 3
    38f4:	28 f4       	brcc	.+10     	; 0x3900 <vfprintf+0x102>
    38f6:	0c 5f       	subi	r16, 0xFC	; 252
    38f8:	1f 4f       	sbci	r17, 0xFF	; 255
    38fa:	ff e3       	ldi	r31, 0x3F	; 63
    38fc:	f9 83       	std	Y+1, r31	; 0x01
    38fe:	0d c0       	rjmp	.+26     	; 0x391a <vfprintf+0x11c>
    3900:	83 36       	cpi	r24, 0x63	; 99
    3902:	31 f0       	breq	.+12     	; 0x3910 <vfprintf+0x112>
    3904:	83 37       	cpi	r24, 0x73	; 115
    3906:	71 f0       	breq	.+28     	; 0x3924 <vfprintf+0x126>
    3908:	83 35       	cpi	r24, 0x53	; 83
    390a:	09 f0       	breq	.+2      	; 0x390e <vfprintf+0x110>
    390c:	60 c0       	rjmp	.+192    	; 0x39ce <vfprintf+0x1d0>
    390e:	22 c0       	rjmp	.+68     	; 0x3954 <vfprintf+0x156>
    3910:	f8 01       	movw	r30, r16
    3912:	80 81       	ld	r24, Z
    3914:	89 83       	std	Y+1, r24	; 0x01
    3916:	0e 5f       	subi	r16, 0xFE	; 254
    3918:	1f 4f       	sbci	r17, 0xFF	; 255
    391a:	42 01       	movw	r8, r4
    391c:	71 e0       	ldi	r23, 0x01	; 1
    391e:	a7 2e       	mov	r10, r23
    3920:	b1 2c       	mov	r11, r1
    3922:	16 c0       	rjmp	.+44     	; 0x3950 <vfprintf+0x152>
    3924:	62 e0       	ldi	r22, 0x02	; 2
    3926:	66 2e       	mov	r6, r22
    3928:	71 2c       	mov	r7, r1
    392a:	60 0e       	add	r6, r16
    392c:	71 1e       	adc	r7, r17
    392e:	f8 01       	movw	r30, r16
    3930:	80 80       	ld	r8, Z
    3932:	91 80       	ldd	r9, Z+1	; 0x01
    3934:	26 ff       	sbrs	r18, 6
    3936:	03 c0       	rjmp	.+6      	; 0x393e <vfprintf+0x140>
    3938:	6e 2d       	mov	r22, r14
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	02 c0       	rjmp	.+4      	; 0x3942 <vfprintf+0x144>
    393e:	6f ef       	ldi	r22, 0xFF	; 255
    3940:	7f ef       	ldi	r23, 0xFF	; 255
    3942:	c4 01       	movw	r24, r8
    3944:	2c 87       	std	Y+12, r18	; 0x0c
    3946:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <strnlen>
    394a:	5c 01       	movw	r10, r24
    394c:	83 01       	movw	r16, r6
    394e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3950:	2f 77       	andi	r18, 0x7F	; 127
    3952:	17 c0       	rjmp	.+46     	; 0x3982 <vfprintf+0x184>
    3954:	52 e0       	ldi	r21, 0x02	; 2
    3956:	65 2e       	mov	r6, r21
    3958:	71 2c       	mov	r7, r1
    395a:	60 0e       	add	r6, r16
    395c:	71 1e       	adc	r7, r17
    395e:	f8 01       	movw	r30, r16
    3960:	80 80       	ld	r8, Z
    3962:	91 80       	ldd	r9, Z+1	; 0x01
    3964:	26 ff       	sbrs	r18, 6
    3966:	03 c0       	rjmp	.+6      	; 0x396e <vfprintf+0x170>
    3968:	6e 2d       	mov	r22, r14
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	02 c0       	rjmp	.+4      	; 0x3972 <vfprintf+0x174>
    396e:	6f ef       	ldi	r22, 0xFF	; 255
    3970:	7f ef       	ldi	r23, 0xFF	; 255
    3972:	c4 01       	movw	r24, r8
    3974:	2c 87       	std	Y+12, r18	; 0x0c
    3976:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <strnlen_P>
    397a:	5c 01       	movw	r10, r24
    397c:	2c 85       	ldd	r18, Y+12	; 0x0c
    397e:	20 68       	ori	r18, 0x80	; 128
    3980:	83 01       	movw	r16, r6
    3982:	23 fd       	sbrc	r18, 3
    3984:	20 c0       	rjmp	.+64     	; 0x39c6 <vfprintf+0x1c8>
    3986:	08 c0       	rjmp	.+16     	; 0x3998 <vfprintf+0x19a>
    3988:	80 e2       	ldi	r24, 0x20	; 32
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	b6 01       	movw	r22, r12
    398e:	2c 87       	std	Y+12, r18	; 0x0c
    3990:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    3994:	fa 94       	dec	r15
    3996:	2c 85       	ldd	r18, Y+12	; 0x0c
    3998:	8f 2d       	mov	r24, r15
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	a8 16       	cp	r10, r24
    399e:	b9 06       	cpc	r11, r25
    39a0:	98 f3       	brcs	.-26     	; 0x3988 <vfprintf+0x18a>
    39a2:	11 c0       	rjmp	.+34     	; 0x39c6 <vfprintf+0x1c8>
    39a4:	f4 01       	movw	r30, r8
    39a6:	27 fd       	sbrc	r18, 7
    39a8:	85 91       	lpm	r24, Z+
    39aa:	27 ff       	sbrs	r18, 7
    39ac:	81 91       	ld	r24, Z+
    39ae:	4f 01       	movw	r8, r30
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	b6 01       	movw	r22, r12
    39b4:	2c 87       	std	Y+12, r18	; 0x0c
    39b6:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    39ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    39bc:	f1 10       	cpse	r15, r1
    39be:	fa 94       	dec	r15
    39c0:	08 94       	sec
    39c2:	a1 08       	sbc	r10, r1
    39c4:	b1 08       	sbc	r11, r1
    39c6:	a1 14       	cp	r10, r1
    39c8:	b1 04       	cpc	r11, r1
    39ca:	61 f7       	brne	.-40     	; 0x39a4 <vfprintf+0x1a6>
    39cc:	f1 c0       	rjmp	.+482    	; 0x3bb0 <vfprintf+0x3b2>
    39ce:	84 36       	cpi	r24, 0x64	; 100
    39d0:	11 f0       	breq	.+4      	; 0x39d6 <vfprintf+0x1d8>
    39d2:	89 36       	cpi	r24, 0x69	; 105
    39d4:	49 f5       	brne	.+82     	; 0x3a28 <vfprintf+0x22a>
    39d6:	27 ff       	sbrs	r18, 7
    39d8:	08 c0       	rjmp	.+16     	; 0x39ea <vfprintf+0x1ec>
    39da:	f8 01       	movw	r30, r16
    39dc:	60 81       	ld	r22, Z
    39de:	71 81       	ldd	r23, Z+1	; 0x01
    39e0:	82 81       	ldd	r24, Z+2	; 0x02
    39e2:	93 81       	ldd	r25, Z+3	; 0x03
    39e4:	0c 5f       	subi	r16, 0xFC	; 252
    39e6:	1f 4f       	sbci	r17, 0xFF	; 255
    39e8:	09 c0       	rjmp	.+18     	; 0x39fc <vfprintf+0x1fe>
    39ea:	f8 01       	movw	r30, r16
    39ec:	60 81       	ld	r22, Z
    39ee:	71 81       	ldd	r23, Z+1	; 0x01
    39f0:	88 27       	eor	r24, r24
    39f2:	77 fd       	sbrc	r23, 7
    39f4:	80 95       	com	r24
    39f6:	98 2f       	mov	r25, r24
    39f8:	0e 5f       	subi	r16, 0xFE	; 254
    39fa:	1f 4f       	sbci	r17, 0xFF	; 255
    39fc:	4f e6       	ldi	r20, 0x6F	; 111
    39fe:	b4 2e       	mov	r11, r20
    3a00:	b2 22       	and	r11, r18
    3a02:	97 ff       	sbrs	r25, 7
    3a04:	09 c0       	rjmp	.+18     	; 0x3a18 <vfprintf+0x21a>
    3a06:	90 95       	com	r25
    3a08:	80 95       	com	r24
    3a0a:	70 95       	com	r23
    3a0c:	61 95       	neg	r22
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	8f 4f       	sbci	r24, 0xFF	; 255
    3a12:	9f 4f       	sbci	r25, 0xFF	; 255
    3a14:	f0 e8       	ldi	r31, 0x80	; 128
    3a16:	bf 2a       	or	r11, r31
    3a18:	a2 01       	movw	r20, r4
    3a1a:	2a e0       	ldi	r18, 0x0A	; 10
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__ultoa_invert>
    3a22:	78 2e       	mov	r7, r24
    3a24:	74 18       	sub	r7, r4
    3a26:	45 c0       	rjmp	.+138    	; 0x3ab2 <vfprintf+0x2b4>
    3a28:	85 37       	cpi	r24, 0x75	; 117
    3a2a:	31 f4       	brne	.+12     	; 0x3a38 <vfprintf+0x23a>
    3a2c:	3f ee       	ldi	r19, 0xEF	; 239
    3a2e:	b3 2e       	mov	r11, r19
    3a30:	b2 22       	and	r11, r18
    3a32:	2a e0       	ldi	r18, 0x0A	; 10
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	25 c0       	rjmp	.+74     	; 0x3a82 <vfprintf+0x284>
    3a38:	99 ef       	ldi	r25, 0xF9	; 249
    3a3a:	b9 2e       	mov	r11, r25
    3a3c:	b2 22       	and	r11, r18
    3a3e:	8f 36       	cpi	r24, 0x6F	; 111
    3a40:	c1 f0       	breq	.+48     	; 0x3a72 <vfprintf+0x274>
    3a42:	80 37       	cpi	r24, 0x70	; 112
    3a44:	20 f4       	brcc	.+8      	; 0x3a4e <vfprintf+0x250>
    3a46:	88 35       	cpi	r24, 0x58	; 88
    3a48:	09 f0       	breq	.+2      	; 0x3a4c <vfprintf+0x24e>
    3a4a:	b5 c0       	rjmp	.+362    	; 0x3bb6 <vfprintf+0x3b8>
    3a4c:	0d c0       	rjmp	.+26     	; 0x3a68 <vfprintf+0x26a>
    3a4e:	80 37       	cpi	r24, 0x70	; 112
    3a50:	21 f0       	breq	.+8      	; 0x3a5a <vfprintf+0x25c>
    3a52:	88 37       	cpi	r24, 0x78	; 120
    3a54:	09 f0       	breq	.+2      	; 0x3a58 <vfprintf+0x25a>
    3a56:	af c0       	rjmp	.+350    	; 0x3bb6 <vfprintf+0x3b8>
    3a58:	02 c0       	rjmp	.+4      	; 0x3a5e <vfprintf+0x260>
    3a5a:	20 e1       	ldi	r18, 0x10	; 16
    3a5c:	b2 2a       	or	r11, r18
    3a5e:	b4 fe       	sbrs	r11, 4
    3a60:	0b c0       	rjmp	.+22     	; 0x3a78 <vfprintf+0x27a>
    3a62:	84 e0       	ldi	r24, 0x04	; 4
    3a64:	b8 2a       	or	r11, r24
    3a66:	08 c0       	rjmp	.+16     	; 0x3a78 <vfprintf+0x27a>
    3a68:	b4 fe       	sbrs	r11, 4
    3a6a:	09 c0       	rjmp	.+18     	; 0x3a7e <vfprintf+0x280>
    3a6c:	e6 e0       	ldi	r30, 0x06	; 6
    3a6e:	be 2a       	or	r11, r30
    3a70:	06 c0       	rjmp	.+12     	; 0x3a7e <vfprintf+0x280>
    3a72:	28 e0       	ldi	r18, 0x08	; 8
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	05 c0       	rjmp	.+10     	; 0x3a82 <vfprintf+0x284>
    3a78:	20 e1       	ldi	r18, 0x10	; 16
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	02 c0       	rjmp	.+4      	; 0x3a82 <vfprintf+0x284>
    3a7e:	20 e1       	ldi	r18, 0x10	; 16
    3a80:	32 e0       	ldi	r19, 0x02	; 2
    3a82:	b7 fe       	sbrs	r11, 7
    3a84:	08 c0       	rjmp	.+16     	; 0x3a96 <vfprintf+0x298>
    3a86:	f8 01       	movw	r30, r16
    3a88:	60 81       	ld	r22, Z
    3a8a:	71 81       	ldd	r23, Z+1	; 0x01
    3a8c:	82 81       	ldd	r24, Z+2	; 0x02
    3a8e:	93 81       	ldd	r25, Z+3	; 0x03
    3a90:	0c 5f       	subi	r16, 0xFC	; 252
    3a92:	1f 4f       	sbci	r17, 0xFF	; 255
    3a94:	07 c0       	rjmp	.+14     	; 0x3aa4 <vfprintf+0x2a6>
    3a96:	f8 01       	movw	r30, r16
    3a98:	60 81       	ld	r22, Z
    3a9a:	71 81       	ldd	r23, Z+1	; 0x01
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	0e 5f       	subi	r16, 0xFE	; 254
    3aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa4:	a2 01       	movw	r20, r4
    3aa6:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__ultoa_invert>
    3aaa:	78 2e       	mov	r7, r24
    3aac:	74 18       	sub	r7, r4
    3aae:	ff e7       	ldi	r31, 0x7F	; 127
    3ab0:	bf 22       	and	r11, r31
    3ab2:	b6 fe       	sbrs	r11, 6
    3ab4:	0b c0       	rjmp	.+22     	; 0x3acc <vfprintf+0x2ce>
    3ab6:	2e ef       	ldi	r18, 0xFE	; 254
    3ab8:	b2 22       	and	r11, r18
    3aba:	7e 14       	cp	r7, r14
    3abc:	38 f4       	brcc	.+14     	; 0x3acc <vfprintf+0x2ce>
    3abe:	b4 fe       	sbrs	r11, 4
    3ac0:	07 c0       	rjmp	.+14     	; 0x3ad0 <vfprintf+0x2d2>
    3ac2:	b2 fc       	sbrc	r11, 2
    3ac4:	05 c0       	rjmp	.+10     	; 0x3ad0 <vfprintf+0x2d2>
    3ac6:	8f ee       	ldi	r24, 0xEF	; 239
    3ac8:	b8 22       	and	r11, r24
    3aca:	02 c0       	rjmp	.+4      	; 0x3ad0 <vfprintf+0x2d2>
    3acc:	a7 2c       	mov	r10, r7
    3ace:	01 c0       	rjmp	.+2      	; 0x3ad2 <vfprintf+0x2d4>
    3ad0:	ae 2c       	mov	r10, r14
    3ad2:	8b 2d       	mov	r24, r11
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	b4 fe       	sbrs	r11, 4
    3ad8:	0d c0       	rjmp	.+26     	; 0x3af4 <vfprintf+0x2f6>
    3ada:	fe 01       	movw	r30, r28
    3adc:	e7 0d       	add	r30, r7
    3ade:	f1 1d       	adc	r31, r1
    3ae0:	20 81       	ld	r18, Z
    3ae2:	20 33       	cpi	r18, 0x30	; 48
    3ae4:	19 f4       	brne	.+6      	; 0x3aec <vfprintf+0x2ee>
    3ae6:	e9 ee       	ldi	r30, 0xE9	; 233
    3ae8:	be 22       	and	r11, r30
    3aea:	09 c0       	rjmp	.+18     	; 0x3afe <vfprintf+0x300>
    3aec:	a3 94       	inc	r10
    3aee:	b2 fe       	sbrs	r11, 2
    3af0:	06 c0       	rjmp	.+12     	; 0x3afe <vfprintf+0x300>
    3af2:	04 c0       	rjmp	.+8      	; 0x3afc <vfprintf+0x2fe>
    3af4:	86 78       	andi	r24, 0x86	; 134
    3af6:	90 70       	andi	r25, 0x00	; 0
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	09 f0       	breq	.+2      	; 0x3afe <vfprintf+0x300>
    3afc:	a3 94       	inc	r10
    3afe:	8b 2c       	mov	r8, r11
    3b00:	99 24       	eor	r9, r9
    3b02:	b3 fc       	sbrc	r11, 3
    3b04:	14 c0       	rjmp	.+40     	; 0x3b2e <vfprintf+0x330>
    3b06:	b0 fe       	sbrs	r11, 0
    3b08:	0f c0       	rjmp	.+30     	; 0x3b28 <vfprintf+0x32a>
    3b0a:	af 14       	cp	r10, r15
    3b0c:	28 f4       	brcc	.+10     	; 0x3b18 <vfprintf+0x31a>
    3b0e:	e7 2c       	mov	r14, r7
    3b10:	ef 0c       	add	r14, r15
    3b12:	ea 18       	sub	r14, r10
    3b14:	af 2c       	mov	r10, r15
    3b16:	08 c0       	rjmp	.+16     	; 0x3b28 <vfprintf+0x32a>
    3b18:	e7 2c       	mov	r14, r7
    3b1a:	06 c0       	rjmp	.+12     	; 0x3b28 <vfprintf+0x32a>
    3b1c:	80 e2       	ldi	r24, 0x20	; 32
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	b6 01       	movw	r22, r12
    3b22:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    3b26:	a3 94       	inc	r10
    3b28:	af 14       	cp	r10, r15
    3b2a:	c0 f3       	brcs	.-16     	; 0x3b1c <vfprintf+0x31e>
    3b2c:	04 c0       	rjmp	.+8      	; 0x3b36 <vfprintf+0x338>
    3b2e:	af 14       	cp	r10, r15
    3b30:	10 f4       	brcc	.+4      	; 0x3b36 <vfprintf+0x338>
    3b32:	fa 18       	sub	r15, r10
    3b34:	01 c0       	rjmp	.+2      	; 0x3b38 <vfprintf+0x33a>
    3b36:	ff 24       	eor	r15, r15
    3b38:	84 fe       	sbrs	r8, 4
    3b3a:	0f c0       	rjmp	.+30     	; 0x3b5a <vfprintf+0x35c>
    3b3c:	80 e3       	ldi	r24, 0x30	; 48
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	b6 01       	movw	r22, r12
    3b42:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    3b46:	82 fe       	sbrs	r8, 2
    3b48:	1f c0       	rjmp	.+62     	; 0x3b88 <vfprintf+0x38a>
    3b4a:	81 fe       	sbrs	r8, 1
    3b4c:	03 c0       	rjmp	.+6      	; 0x3b54 <vfprintf+0x356>
    3b4e:	88 e5       	ldi	r24, 0x58	; 88
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	10 c0       	rjmp	.+32     	; 0x3b74 <vfprintf+0x376>
    3b54:	88 e7       	ldi	r24, 0x78	; 120
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	0d c0       	rjmp	.+26     	; 0x3b74 <vfprintf+0x376>
    3b5a:	c4 01       	movw	r24, r8
    3b5c:	86 78       	andi	r24, 0x86	; 134
    3b5e:	90 70       	andi	r25, 0x00	; 0
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	91 f0       	breq	.+36     	; 0x3b88 <vfprintf+0x38a>
    3b64:	81 fc       	sbrc	r8, 1
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <vfprintf+0x36e>
    3b68:	80 e2       	ldi	r24, 0x20	; 32
    3b6a:	01 c0       	rjmp	.+2      	; 0x3b6e <vfprintf+0x370>
    3b6c:	8b e2       	ldi	r24, 0x2B	; 43
    3b6e:	b7 fc       	sbrc	r11, 7
    3b70:	8d e2       	ldi	r24, 0x2D	; 45
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	b6 01       	movw	r22, r12
    3b76:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    3b7a:	06 c0       	rjmp	.+12     	; 0x3b88 <vfprintf+0x38a>
    3b7c:	80 e3       	ldi	r24, 0x30	; 48
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	b6 01       	movw	r22, r12
    3b82:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    3b86:	ea 94       	dec	r14
    3b88:	7e 14       	cp	r7, r14
    3b8a:	c0 f3       	brcs	.-16     	; 0x3b7c <vfprintf+0x37e>
    3b8c:	7a 94       	dec	r7
    3b8e:	f2 01       	movw	r30, r4
    3b90:	e7 0d       	add	r30, r7
    3b92:	f1 1d       	adc	r31, r1
    3b94:	80 81       	ld	r24, Z
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	b6 01       	movw	r22, r12
    3b9a:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    3b9e:	77 20       	and	r7, r7
    3ba0:	a9 f7       	brne	.-22     	; 0x3b8c <vfprintf+0x38e>
    3ba2:	06 c0       	rjmp	.+12     	; 0x3bb0 <vfprintf+0x3b2>
    3ba4:	80 e2       	ldi	r24, 0x20	; 32
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	b6 01       	movw	r22, r12
    3baa:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <fputc>
    3bae:	fa 94       	dec	r15
    3bb0:	ff 20       	and	r15, r15
    3bb2:	c1 f7       	brne	.-16     	; 0x3ba4 <vfprintf+0x3a6>
    3bb4:	37 ce       	rjmp	.-914    	; 0x3824 <vfprintf+0x26>
    3bb6:	f6 01       	movw	r30, r12
    3bb8:	26 81       	ldd	r18, Z+6	; 0x06
    3bba:	37 81       	ldd	r19, Z+7	; 0x07
    3bbc:	02 c0       	rjmp	.+4      	; 0x3bc2 <vfprintf+0x3c4>
    3bbe:	2f ef       	ldi	r18, 0xFF	; 255
    3bc0:	3f ef       	ldi	r19, 0xFF	; 255
    3bc2:	c9 01       	movw	r24, r18
    3bc4:	2c 96       	adiw	r28, 0x0c	; 12
    3bc6:	e2 e1       	ldi	r30, 0x12	; 18
    3bc8:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__>

00003bcc <__eerd_block_m168>:
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22

00003bd0 <__eerd_blraw_m168>:
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	f9 99       	sbic	0x1f, 1	; 31
    3bd4:	fe cf       	rjmp	.-4      	; 0x3bd2 <__eerd_blraw_m168+0x2>
    3bd6:	06 c0       	rjmp	.+12     	; 0x3be4 <__eerd_blraw_m168+0x14>
    3bd8:	f2 bd       	out	0x22, r31	; 34
    3bda:	e1 bd       	out	0x21, r30	; 33
    3bdc:	f8 9a       	sbi	0x1f, 0	; 31
    3bde:	31 96       	adiw	r30, 0x01	; 1
    3be0:	00 b4       	in	r0, 0x20	; 32
    3be2:	0d 92       	st	X+, r0
    3be4:	41 50       	subi	r20, 0x01	; 1
    3be6:	50 40       	sbci	r21, 0x00	; 0
    3be8:	b8 f7       	brcc	.-18     	; 0x3bd8 <__eerd_blraw_m168+0x8>
    3bea:	08 95       	ret

00003bec <__eerd_byte_m168>:
    3bec:	f9 99       	sbic	0x1f, 1	; 31
    3bee:	fe cf       	rjmp	.-4      	; 0x3bec <__eerd_byte_m168>
    3bf0:	92 bd       	out	0x22, r25	; 34
    3bf2:	81 bd       	out	0x21, r24	; 33
    3bf4:	f8 9a       	sbi	0x1f, 0	; 31
    3bf6:	99 27       	eor	r25, r25
    3bf8:	80 b5       	in	r24, 0x20	; 32
    3bfa:	08 95       	ret

00003bfc <__eeupd_block_m168>:
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	a4 0f       	add	r26, r20
    3c00:	b5 1f       	adc	r27, r21
    3c02:	41 50       	subi	r20, 0x01	; 1
    3c04:	50 40       	sbci	r21, 0x00	; 0
    3c06:	48 f0       	brcs	.+18     	; 0x3c1a <__eeupd_block_m168+0x1e>
    3c08:	cb 01       	movw	r24, r22
    3c0a:	84 0f       	add	r24, r20
    3c0c:	95 1f       	adc	r25, r21
    3c0e:	2e 91       	ld	r18, -X
    3c10:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__eeupd_r18_m168>
    3c14:	41 50       	subi	r20, 0x01	; 1
    3c16:	50 40       	sbci	r21, 0x00	; 0
    3c18:	d0 f7       	brcc	.-12     	; 0x3c0e <__eeupd_block_m168+0x12>
    3c1a:	08 95       	ret

00003c1c <__eeupd_byte_m168>:
    3c1c:	26 2f       	mov	r18, r22

00003c1e <__eeupd_r18_m168>:
    3c1e:	f9 99       	sbic	0x1f, 1	; 31
    3c20:	fe cf       	rjmp	.-4      	; 0x3c1e <__eeupd_r18_m168>
    3c22:	92 bd       	out	0x22, r25	; 34
    3c24:	81 bd       	out	0x21, r24	; 33
    3c26:	f8 9a       	sbi	0x1f, 0	; 31
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	00 b4       	in	r0, 0x20	; 32
    3c2c:	02 16       	cp	r0, r18
    3c2e:	39 f0       	breq	.+14     	; 0x3c3e <__eeupd_r18_m168+0x20>
    3c30:	1f ba       	out	0x1f, r1	; 31
    3c32:	20 bd       	out	0x20, r18	; 32
    3c34:	0f b6       	in	r0, 0x3f	; 63
    3c36:	f8 94       	cli
    3c38:	fa 9a       	sbi	0x1f, 2	; 31
    3c3a:	f9 9a       	sbi	0x1f, 1	; 31
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	08 95       	ret

00003c40 <__eewr_byte_m168>:
    3c40:	26 2f       	mov	r18, r22

00003c42 <__eewr_r18_m168>:
    3c42:	f9 99       	sbic	0x1f, 1	; 31
    3c44:	fe cf       	rjmp	.-4      	; 0x3c42 <__eewr_r18_m168>
    3c46:	1f ba       	out	0x1f, r1	; 31
    3c48:	92 bd       	out	0x22, r25	; 34
    3c4a:	81 bd       	out	0x21, r24	; 33
    3c4c:	20 bd       	out	0x20, r18	; 32
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	fa 9a       	sbi	0x1f, 2	; 31
    3c54:	f9 9a       	sbi	0x1f, 1	; 31
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	01 96       	adiw	r24, 0x01	; 1
    3c5a:	08 95       	ret

00003c5c <strnlen_P>:
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	05 90       	lpm	r0, Z+
    3c60:	61 50       	subi	r22, 0x01	; 1
    3c62:	70 40       	sbci	r23, 0x00	; 0
    3c64:	01 10       	cpse	r0, r1
    3c66:	d8 f7       	brcc	.-10     	; 0x3c5e <strnlen_P+0x2>
    3c68:	80 95       	com	r24
    3c6a:	90 95       	com	r25
    3c6c:	8e 0f       	add	r24, r30
    3c6e:	9f 1f       	adc	r25, r31
    3c70:	08 95       	ret

00003c72 <strnlen>:
    3c72:	fc 01       	movw	r30, r24
    3c74:	61 50       	subi	r22, 0x01	; 1
    3c76:	70 40       	sbci	r23, 0x00	; 0
    3c78:	01 90       	ld	r0, Z+
    3c7a:	01 10       	cpse	r0, r1
    3c7c:	d8 f7       	brcc	.-10     	; 0x3c74 <strnlen+0x2>
    3c7e:	80 95       	com	r24
    3c80:	90 95       	com	r25
    3c82:	8e 0f       	add	r24, r30
    3c84:	9f 1f       	adc	r25, r31
    3c86:	08 95       	ret

00003c88 <fputc>:
    3c88:	0f 93       	push	r16
    3c8a:	1f 93       	push	r17
    3c8c:	cf 93       	push	r28
    3c8e:	df 93       	push	r29
    3c90:	8c 01       	movw	r16, r24
    3c92:	eb 01       	movw	r28, r22
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	81 ff       	sbrs	r24, 1
    3c98:	1b c0       	rjmp	.+54     	; 0x3cd0 <fputc+0x48>
    3c9a:	82 ff       	sbrs	r24, 2
    3c9c:	0d c0       	rjmp	.+26     	; 0x3cb8 <fputc+0x30>
    3c9e:	2e 81       	ldd	r18, Y+6	; 0x06
    3ca0:	3f 81       	ldd	r19, Y+7	; 0x07
    3ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca6:	28 17       	cp	r18, r24
    3ca8:	39 07       	cpc	r19, r25
    3caa:	64 f4       	brge	.+24     	; 0x3cc4 <fputc+0x3c>
    3cac:	e8 81       	ld	r30, Y
    3cae:	f9 81       	ldd	r31, Y+1	; 0x01
    3cb0:	01 93       	st	Z+, r16
    3cb2:	f9 83       	std	Y+1, r31	; 0x01
    3cb4:	e8 83       	st	Y, r30
    3cb6:	06 c0       	rjmp	.+12     	; 0x3cc4 <fputc+0x3c>
    3cb8:	e8 85       	ldd	r30, Y+8	; 0x08
    3cba:	f9 85       	ldd	r31, Y+9	; 0x09
    3cbc:	80 2f       	mov	r24, r16
    3cbe:	09 95       	icall
    3cc0:	00 97       	sbiw	r24, 0x00	; 0
    3cc2:	31 f4       	brne	.+12     	; 0x3cd0 <fputc+0x48>
    3cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    3cc6:	9f 81       	ldd	r25, Y+7	; 0x07
    3cc8:	01 96       	adiw	r24, 0x01	; 1
    3cca:	9f 83       	std	Y+7, r25	; 0x07
    3ccc:	8e 83       	std	Y+6, r24	; 0x06
    3cce:	02 c0       	rjmp	.+4      	; 0x3cd4 <fputc+0x4c>
    3cd0:	0f ef       	ldi	r16, 0xFF	; 255
    3cd2:	1f ef       	ldi	r17, 0xFF	; 255
    3cd4:	c8 01       	movw	r24, r16
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	08 95       	ret

00003ce0 <__ultoa_invert>:
    3ce0:	fa 01       	movw	r30, r20
    3ce2:	aa 27       	eor	r26, r26
    3ce4:	28 30       	cpi	r18, 0x08	; 8
    3ce6:	51 f1       	breq	.+84     	; 0x3d3c <__ultoa_invert+0x5c>
    3ce8:	20 31       	cpi	r18, 0x10	; 16
    3cea:	81 f1       	breq	.+96     	; 0x3d4c <__ultoa_invert+0x6c>
    3cec:	e8 94       	clt
    3cee:	6f 93       	push	r22
    3cf0:	6e 7f       	andi	r22, 0xFE	; 254
    3cf2:	6e 5f       	subi	r22, 0xFE	; 254
    3cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    3cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfa:	af 4f       	sbci	r26, 0xFF	; 255
    3cfc:	b1 e0       	ldi	r27, 0x01	; 1
    3cfe:	3e d0       	rcall	.+124    	; 0x3d7c <__ultoa_invert+0x9c>
    3d00:	b4 e0       	ldi	r27, 0x04	; 4
    3d02:	3c d0       	rcall	.+120    	; 0x3d7c <__ultoa_invert+0x9c>
    3d04:	67 0f       	add	r22, r23
    3d06:	78 1f       	adc	r23, r24
    3d08:	89 1f       	adc	r24, r25
    3d0a:	9a 1f       	adc	r25, r26
    3d0c:	a1 1d       	adc	r26, r1
    3d0e:	68 0f       	add	r22, r24
    3d10:	79 1f       	adc	r23, r25
    3d12:	8a 1f       	adc	r24, r26
    3d14:	91 1d       	adc	r25, r1
    3d16:	a1 1d       	adc	r26, r1
    3d18:	6a 0f       	add	r22, r26
    3d1a:	71 1d       	adc	r23, r1
    3d1c:	81 1d       	adc	r24, r1
    3d1e:	91 1d       	adc	r25, r1
    3d20:	a1 1d       	adc	r26, r1
    3d22:	20 d0       	rcall	.+64     	; 0x3d64 <__ultoa_invert+0x84>
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <__ultoa_invert+0x48>
    3d26:	68 94       	set
    3d28:	3f 91       	pop	r19
    3d2a:	2a e0       	ldi	r18, 0x0A	; 10
    3d2c:	26 9f       	mul	r18, r22
    3d2e:	11 24       	eor	r1, r1
    3d30:	30 19       	sub	r19, r0
    3d32:	30 5d       	subi	r19, 0xD0	; 208
    3d34:	31 93       	st	Z+, r19
    3d36:	de f6       	brtc	.-74     	; 0x3cee <__ultoa_invert+0xe>
    3d38:	cf 01       	movw	r24, r30
    3d3a:	08 95       	ret
    3d3c:	46 2f       	mov	r20, r22
    3d3e:	47 70       	andi	r20, 0x07	; 7
    3d40:	40 5d       	subi	r20, 0xD0	; 208
    3d42:	41 93       	st	Z+, r20
    3d44:	b3 e0       	ldi	r27, 0x03	; 3
    3d46:	0f d0       	rcall	.+30     	; 0x3d66 <__ultoa_invert+0x86>
    3d48:	c9 f7       	brne	.-14     	; 0x3d3c <__ultoa_invert+0x5c>
    3d4a:	f6 cf       	rjmp	.-20     	; 0x3d38 <__ultoa_invert+0x58>
    3d4c:	46 2f       	mov	r20, r22
    3d4e:	4f 70       	andi	r20, 0x0F	; 15
    3d50:	40 5d       	subi	r20, 0xD0	; 208
    3d52:	4a 33       	cpi	r20, 0x3A	; 58
    3d54:	18 f0       	brcs	.+6      	; 0x3d5c <__ultoa_invert+0x7c>
    3d56:	49 5d       	subi	r20, 0xD9	; 217
    3d58:	31 fd       	sbrc	r19, 1
    3d5a:	40 52       	subi	r20, 0x20	; 32
    3d5c:	41 93       	st	Z+, r20
    3d5e:	02 d0       	rcall	.+4      	; 0x3d64 <__ultoa_invert+0x84>
    3d60:	a9 f7       	brne	.-22     	; 0x3d4c <__ultoa_invert+0x6c>
    3d62:	ea cf       	rjmp	.-44     	; 0x3d38 <__ultoa_invert+0x58>
    3d64:	b4 e0       	ldi	r27, 0x04	; 4
    3d66:	a6 95       	lsr	r26
    3d68:	97 95       	ror	r25
    3d6a:	87 95       	ror	r24
    3d6c:	77 95       	ror	r23
    3d6e:	67 95       	ror	r22
    3d70:	ba 95       	dec	r27
    3d72:	c9 f7       	brne	.-14     	; 0x3d66 <__ultoa_invert+0x86>
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	61 05       	cpc	r22, r1
    3d78:	71 05       	cpc	r23, r1
    3d7a:	08 95       	ret
    3d7c:	9b 01       	movw	r18, r22
    3d7e:	ac 01       	movw	r20, r24
    3d80:	0a 2e       	mov	r0, r26
    3d82:	06 94       	lsr	r0
    3d84:	57 95       	ror	r21
    3d86:	47 95       	ror	r20
    3d88:	37 95       	ror	r19
    3d8a:	27 95       	ror	r18
    3d8c:	ba 95       	dec	r27
    3d8e:	c9 f7       	brne	.-14     	; 0x3d82 <__ultoa_invert+0xa2>
    3d90:	62 0f       	add	r22, r18
    3d92:	73 1f       	adc	r23, r19
    3d94:	84 1f       	adc	r24, r20
    3d96:	95 1f       	adc	r25, r21
    3d98:	a0 1d       	adc	r26, r0
    3d9a:	08 95       	ret

00003d9c <__prologue_saves__>:
    3d9c:	2f 92       	push	r2
    3d9e:	3f 92       	push	r3
    3da0:	4f 92       	push	r4
    3da2:	5f 92       	push	r5
    3da4:	6f 92       	push	r6
    3da6:	7f 92       	push	r7
    3da8:	8f 92       	push	r8
    3daa:	9f 92       	push	r9
    3dac:	af 92       	push	r10
    3dae:	bf 92       	push	r11
    3db0:	cf 92       	push	r12
    3db2:	df 92       	push	r13
    3db4:	ef 92       	push	r14
    3db6:	ff 92       	push	r15
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	ca 1b       	sub	r28, r26
    3dc6:	db 0b       	sbc	r29, r27
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
    3dd2:	09 94       	ijmp

00003dd4 <__epilogue_restores__>:
    3dd4:	2a 88       	ldd	r2, Y+18	; 0x12
    3dd6:	39 88       	ldd	r3, Y+17	; 0x11
    3dd8:	48 88       	ldd	r4, Y+16	; 0x10
    3dda:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ddc:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dde:	7d 84       	ldd	r7, Y+13	; 0x0d
    3de0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3de2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3de4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3de6:	b9 84       	ldd	r11, Y+9	; 0x09
    3de8:	c8 84       	ldd	r12, Y+8	; 0x08
    3dea:	df 80       	ldd	r13, Y+7	; 0x07
    3dec:	ee 80       	ldd	r14, Y+6	; 0x06
    3dee:	fd 80       	ldd	r15, Y+5	; 0x05
    3df0:	0c 81       	ldd	r16, Y+4	; 0x04
    3df2:	1b 81       	ldd	r17, Y+3	; 0x03
    3df4:	aa 81       	ldd	r26, Y+2	; 0x02
    3df6:	b9 81       	ldd	r27, Y+1	; 0x01
    3df8:	ce 0f       	add	r28, r30
    3dfa:	d1 1d       	adc	r29, r1
    3dfc:	0f b6       	in	r0, 0x3f	; 63
    3dfe:	f8 94       	cli
    3e00:	de bf       	out	0x3e, r29	; 62
    3e02:	0f be       	out	0x3f, r0	; 63
    3e04:	cd bf       	out	0x3d, r28	; 61
    3e06:	ed 01       	movw	r28, r26
    3e08:	08 95       	ret

00003e0a <_exit>:
    3e0a:	f8 94       	cli

00003e0c <__stop_program>:
    3e0c:	ff cf       	rjmp	.-2      	; 0x3e0c <__stop_program>
