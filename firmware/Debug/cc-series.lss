
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00003f42  00003ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f42  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bb  00800150  00800150  00004046  2**0
                  ALLOC
  3 .eeprom       0000002a  00810000  00810000  00004046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000058c8  00000000  00000000  00004070  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000234c  00000000  00000000  00009938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 e0 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e2 e4       	ldi	r30, 0x42	; 66
     1b8:	ff e3       	ldi	r31, 0x3F	; 63
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	a0 35       	cpi	r26, 0x50	; 80
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	12 e0       	ldi	r17, 0x02	; 2
     1c8:	a0 e5       	ldi	r26, 0x50	; 80
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	ab 30       	cpi	r26, 0x0B	; 11
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <main>
     1da:	0c 94 9f 1f 	jmp	0x3f3e	; 0x3f3e <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_11>:

// Timer1 ISR
//
// Timer1 is the sinewave generator.
ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_11+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 50 01 	lds	r24, 0x0150
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_11+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_11+0xae>
	{
		//SIDETONE_DDR |= _BV(SIDETONE);

		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 b4 01 	lds	r18, 0x01B4
     21c:	30 91 b5 01 	lds	r19, 0x01B5
     220:	40 91 b6 01 	lds	r20, 0x01B6
     224:	50 91 b7 01 	lds	r21, 0x01B7
     228:	80 91 c6 01 	lds	r24, 0x01C6
     22c:	90 91 c7 01 	lds	r25, 0x01C7
     230:	a0 91 c8 01 	lds	r26, 0x01C8
     234:	b0 91 c9 01 	lds	r27, 0x01C9
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 b4 01 	sts	0x01B4, r24
     244:	90 93 b5 01 	sts	0x01B5, r25
     248:	a0 93 b6 01 	sts	0x01B6, r26
     24c:	b0 93 b7 01 	sts	0x01B7, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 b4 01 	lds	r24, 0x01B4
     254:	90 91 b5 01 	lds	r25, 0x01B5
     258:	a0 91 b6 01 	lds	r26, 0x01B6
     25c:	b0 91 b7 01 	lds	r27, 0x01B7
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 82 01 	sts	0x0182, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 82 01 	lds	r18, 0x0182
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
	{
		// Hi-Z the port when not using
		SIDETONE_DDR &= ~(_BV(SIDETONE));
		OCR0A = 0;
	} */
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(/*((timer > mute_start) && (timer < mute_end)) || */(mute_on == TRUE))
     2e4:	80 91 51 01 	lds	r24, 0x0151
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	51 f4       	brne	.+20     	; 0x300 <__vector_7+0x46>
		MUTE_PORT |= _BV(MUTE);
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	28 e2       	ldi	r18, 0x28	; 40
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	20 62       	ori	r18, 0x20	; 32
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_7+0x58>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     300:	88 e2       	ldi	r24, 0x28	; 40
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	28 e2       	ldi	r18, 0x28	; 40
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7d       	andi	r18, 0xDF	; 223
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     312:	80 91 52 01 	lds	r24, 0x0152
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	09 f0       	breq	.+2      	; 0x31c <__vector_7+0x62>
     31a:	43 c0       	rjmp	.+134    	; 0x3a2 <__vector_7+0xe8>
     31c:	20 91 84 01 	lds	r18, 0x0184
     320:	30 91 85 01 	lds	r19, 0x0185
     324:	40 91 86 01 	lds	r20, 0x0186
     328:	50 91 87 01 	lds	r21, 0x0187
     32c:	80 91 01 02 	lds	r24, 0x0201
     330:	90 91 02 02 	lds	r25, 0x0202
     334:	a0 91 03 02 	lds	r26, 0x0203
     338:	b0 91 04 02 	lds	r27, 0x0204
     33c:	28 17       	cp	r18, r24
     33e:	39 07       	cpc	r19, r25
     340:	4a 07       	cpc	r20, r26
     342:	5b 07       	cpc	r21, r27
     344:	70 f5       	brcc	.+92     	; 0x3a2 <__vector_7+0xe8>
     346:	20 91 84 01 	lds	r18, 0x0184
     34a:	30 91 85 01 	lds	r19, 0x0185
     34e:	40 91 86 01 	lds	r20, 0x0186
     352:	50 91 87 01 	lds	r21, 0x0187
     356:	80 91 be 01 	lds	r24, 0x01BE
     35a:	90 91 bf 01 	lds	r25, 0x01BF
     35e:	a0 91 c0 01 	lds	r26, 0x01C0
     362:	b0 91 c1 01 	lds	r27, 0x01C1
     366:	82 17       	cp	r24, r18
     368:	93 07       	cpc	r25, r19
     36a:	a4 07       	cpc	r26, r20
     36c:	b5 07       	cpc	r27, r21
     36e:	c8 f4       	brcc	.+50     	; 0x3a2 <__vector_7+0xe8>
	{
		if(inc_tune_state == RIT || inc_tune_state == XIT)
     370:	80 91 e2 01 	lds	r24, 0x01E2
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	21 f0       	breq	.+8      	; 0x380 <__vector_7+0xc6>
     378:	80 91 e2 01 	lds	r24, 0x01E2
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	21 f4       	brne	.+8      	; 0x388 <__vector_7+0xce>
			set_dds_freq_reg(REG_1);
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <set_dds_freq_reg>
     386:	03 c0       	rjmp	.+6      	; 0x38e <__vector_7+0xd4>
		else
			set_dds_freq_reg(REG_0);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     38e:	88 e2       	ldi	r24, 0x28	; 40
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	28 e2       	ldi	r18, 0x28	; 40
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	20 61       	ori	r18, 0x10	; 16
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
     3a0:	0d c0       	rjmp	.+26     	; 0x3bc <__vector_7+0x102>
	}
	else
	{
		set_dds_freq_reg(tune_reg);
     3a2:	80 91 e1 01 	lds	r24, 0x01E1
     3a6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     3aa:	88 e2       	ldi	r24, 0x28	; 40
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	28 e2       	ldi	r18, 0x28	; 40
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	2f 7e       	andi	r18, 0xEF	; 239
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
	}

	// Handle the RIT/XIT LED
	if(inc_tune_state != NONE)
     3bc:	80 91 e2 01 	lds	r24, 0x01E2
     3c0:	88 23       	and	r24, r24
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <__vector_7+0x10c>
     3c4:	45 c0       	rjmp	.+138    	; 0x450 <__vector_7+0x196>
	{
		if(inc_tune_state == RIT)
     3c6:	80 91 e2 01 	lds	r24, 0x01E2
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	51 f4       	brne	.+20     	; 0x3e2 <__vector_7+0x128>
		{
			//RIT_LED_DDR |= _BV(RIT_LED);
			RIT_LED_PORT |= _BV(RIT_LED);
     3ce:	88 e2       	ldi	r24, 0x28	; 40
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	28 e2       	ldi	r18, 0x28	; 40
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	22 60       	ori	r18, 0x02	; 2
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
     3e0:	37 c0       	rjmp	.+110    	; 0x450 <__vector_7+0x196>
		}
		else if(inc_tune_state == XIT)
     3e2:	80 91 e2 01 	lds	r24, 0x01E2
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	99 f5       	brne	.+102    	; 0x450 <__vector_7+0x196>
		{
			if(cur_timer > led_toggle)
     3ea:	20 91 7e 01 	lds	r18, 0x017E
     3ee:	30 91 7f 01 	lds	r19, 0x017F
     3f2:	40 91 80 01 	lds	r20, 0x0180
     3f6:	50 91 81 01 	lds	r21, 0x0181
     3fa:	80 91 ed 01 	lds	r24, 0x01ED
     3fe:	90 91 ee 01 	lds	r25, 0x01EE
     402:	a0 91 ef 01 	lds	r26, 0x01EF
     406:	b0 91 f0 01 	lds	r27, 0x01F0
     40a:	82 17       	cp	r24, r18
     40c:	93 07       	cpc	r25, r19
     40e:	a4 07       	cpc	r26, r20
     410:	b5 07       	cpc	r27, r21
     412:	f0 f4       	brcc	.+60     	; 0x450 <__vector_7+0x196>
			{
				RIT_LED_PORT ^= _BV(RIT_LED);
     414:	88 e2       	ldi	r24, 0x28	; 40
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	28 e2       	ldi	r18, 0x28	; 40
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	f9 01       	movw	r30, r18
     41e:	30 81       	ld	r19, Z
     420:	22 e0       	ldi	r18, 0x02	; 2
     422:	23 27       	eor	r18, r19
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
				led_toggle = cur_timer + XIT_BLINK;
     428:	80 91 7e 01 	lds	r24, 0x017E
     42c:	90 91 7f 01 	lds	r25, 0x017F
     430:	a0 91 80 01 	lds	r26, 0x0180
     434:	b0 91 81 01 	lds	r27, 0x0181
     438:	8c 50       	subi	r24, 0x0C	; 12
     43a:	9e 4f       	sbci	r25, 0xFE	; 254
     43c:	af 4f       	sbci	r26, 0xFF	; 255
     43e:	bf 4f       	sbci	r27, 0xFF	; 255
     440:	80 93 ed 01 	sts	0x01ED, r24
     444:	90 93 ee 01 	sts	0x01EE, r25
     448:	a0 93 ef 01 	sts	0x01EF, r26
     44c:	b0 93 f0 01 	sts	0x01F0, r27
			}
		}

	}

	debounce(FALSE);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>

	// Need to consider timer overflow?
	timer++;
     456:	80 91 84 01 	lds	r24, 0x0184
     45a:	90 91 85 01 	lds	r25, 0x0185
     45e:	a0 91 86 01 	lds	r26, 0x0186
     462:	b0 91 87 01 	lds	r27, 0x0187
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	a1 1d       	adc	r26, r1
     46a:	b1 1d       	adc	r27, r1
     46c:	80 93 84 01 	sts	0x0184, r24
     470:	90 93 85 01 	sts	0x0185, r25
     474:	a0 93 86 01 	sts	0x0186, r26
     478:	b0 93 87 01 	sts	0x0187, r27
}
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	7f 91       	pop	r23
     48e:	6f 91       	pop	r22
     490:	5f 91       	pop	r21
     492:	4f 91       	pop	r20
     494:	3f 91       	pop	r19
     496:	2f 91       	pop	r18
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     4c0:	88 e6       	ldi	r24, 0x68	; 104
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	fc 01       	movw	r30, r24
     4c6:	10 82       	st	Z, r1

	cur_mode = default_mode;
     4c8:	80 91 83 01 	lds	r24, 0x0183
     4cc:	80 93 b8 01 	sts	0x01B8, r24
	cur_state = IDLE;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 d6 01 	sts	0x01D6, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 100;
     4d6:	80 91 7e 01 	lds	r24, 0x017E
     4da:	90 91 7f 01 	lds	r25, 0x017F
     4de:	a0 91 80 01 	lds	r26, 0x0180
     4e2:	b0 91 81 01 	lds	r27, 0x0181
     4e6:	8c 59       	subi	r24, 0x9C	; 156
     4e8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ea:	af 4f       	sbci	r26, 0xFF	; 255
     4ec:	bf 4f       	sbci	r27, 0xFF	; 255
     4ee:	80 93 e4 01 	sts	0x01E4, r24
     4f2:	90 93 e5 01 	sts	0x01E5, r25
     4f6:	a0 93 e6 01 	sts	0x01E6, r26
     4fa:	b0 93 e7 01 	sts	0x01E7, r27
	sleep_timer = cur_timer + SLEEP_DELAY;
     4fe:	80 91 7e 01 	lds	r24, 0x017E
     502:	90 91 7f 01 	lds	r25, 0x017F
     506:	a0 91 80 01 	lds	r26, 0x0180
     50a:	b0 91 81 01 	lds	r27, 0x0181
     50e:	84 5d       	subi	r24, 0xD4	; 212
     510:	9e 4f       	sbci	r25, 0xFE	; 254
     512:	af 4f       	sbci	r26, 0xFF	; 255
     514:	bf 4f       	sbci	r27, 0xFF	; 255
     516:	80 93 dd 01 	sts	0x01DD, r24
     51a:	90 93 de 01 	sts	0x01DE, r25
     51e:	a0 93 df 01 	sts	0x01DF, r26
     522:	b0 93 e0 01 	sts	0x01E0, r27
}
     526:	cf 91       	pop	r28
     528:	df 91       	pop	r29
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	bf 91       	pop	r27
     530:	af 91       	pop	r26
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <init>:

void init(void)
{
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	00 d0       	rcall	.+0      	; 0x546 <init+0x6>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     54a:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     54c:	81 e6       	ldi	r24, 0x61	; 97
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	20 e8       	ldi	r18, 0x80	; 128
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
	CLKPR = 0;
     556:	81 e6       	ldi	r24, 0x61	; 97
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	fc 01       	movw	r30, r24
     55c:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     55e:	84 e4       	ldi	r24, 0x44	; 68
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	21 e8       	ldi	r18, 0x81	; 129
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     568:	85 e4       	ldi	r24, 0x45	; 69
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	21 e0       	ldi	r18, 0x01	; 1
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	//TCCR0B = _BV(CS01);
	//TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt

	// Setup Timer1 as sample rate generator for sidetone
	TCCR1B = _BV(WGM12) | _BV(CS10); // Set for CTC mode, Prescaler /1
     572:	81 e8       	ldi	r24, 0x81	; 129
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	29 e0       	ldi	r18, 0x09	; 9
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
	TCCR1A = 0;
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	10 82       	st	Z, r1
	OCR1A = 1000; // 16 MHz clock / 16 kHz sample rate = 1000
     584:	88 e8       	ldi	r24, 0x88	; 136
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	28 ee       	ldi	r18, 0xE8	; 232
     58a:	33 e0       	ldi	r19, 0x03	; 3
     58c:	fc 01       	movw	r30, r24
     58e:	31 83       	std	Z+1, r19	; 0x01
     590:	20 83       	st	Z, r18
	TIMSK1 = _BV(OCIE1A);
     592:	8f e6       	ldi	r24, 0x6F	; 111
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	22 e0       	ldi	r18, 0x02	; 2
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     59c:	80 eb       	ldi	r24, 0xB0	; 176
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     5a6:	81 eb       	ldi	r24, 0xB1	; 177
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	24 e0       	ldi	r18, 0x04	; 4
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     5b0:	80 e7       	ldi	r24, 0x70	; 112
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	20 e7       	ldi	r18, 0x70	; 112
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	f9 01       	movw	r30, r18
     5ba:	20 81       	ld	r18, Z
     5bc:	22 60       	ori	r18, 0x02	; 2
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     5c2:	83 eb       	ldi	r24, 0xB3	; 179
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	29 ef       	ldi	r18, 0xF9	; 249
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     5cc:	8a e7       	ldi	r24, 0x7A	; 122
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2a e7       	ldi	r18, 0x7A	; 122
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	24 68       	ori	r18, 0x84	; 132
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     5de:	8c e7       	ldi	r24, 0x7C	; 124
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	20 e6       	ldi	r18, 0x60	; 96
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     5e8:	8b e6       	ldi	r24, 0x6B	; 107
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) |_BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     5f2:	8d e6       	ldi	r24, 0x6D	; 109
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	2f e9       	ldi	r18, 0x9F	; 159
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     5fc:	8a e2       	ldi	r24, 0x2A	; 42
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2a e2       	ldi	r18, 0x2A	; 42
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	20 64       	ori	r18, 0x40	; 64
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     60e:	87 e2       	ldi	r24, 0x27	; 39
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	27 e2       	ldi	r18, 0x27	; 39
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	f9 01       	movw	r30, r18
     618:	20 81       	ld	r18, Z
     61a:	20 62       	ori	r18, 0x20	; 32
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     620:	87 e2       	ldi	r24, 0x27	; 39
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	27 e2       	ldi	r18, 0x27	; 39
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	f9 01       	movw	r30, r18
     62a:	20 81       	ld	r18, Z
     62c:	20 61       	ori	r18, 0x10	; 16
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     632:	87 e2       	ldi	r24, 0x27	; 39
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	27 e2       	ldi	r18, 0x27	; 39
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f9 01       	movw	r30, r18
     63c:	20 81       	ld	r18, Z
     63e:	2d 7f       	andi	r18, 0xFD	; 253
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     644:	88 e2       	ldi	r24, 0x28	; 40
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	28 e2       	ldi	r18, 0x28	; 40
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	2d 7f       	andi	r18, 0xFD	; 253
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     656:	8a e2       	ldi	r24, 0x2A	; 42
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	2a e2       	ldi	r18, 0x2A	; 42
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	f9 01       	movw	r30, r18
     660:	20 81       	ld	r18, Z
     662:	27 7f       	andi	r18, 0xF7	; 247
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     668:	8b e2       	ldi	r24, 0x2B	; 43
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	2b e2       	ldi	r18, 0x2B	; 43
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	28 60       	ori	r18, 0x08	; 8
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     67a:	8a e2       	ldi	r24, 0x2A	; 42
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	2a e2       	ldi	r18, 0x2A	; 42
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	2f 7e       	andi	r18, 0xEF	; 239
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     68c:	8b e2       	ldi	r24, 0x2B	; 43
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	2b e2       	ldi	r18, 0x2B	; 43
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	20 61       	ori	r18, 0x10	; 16
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     69e:	8a e2       	ldi	r24, 0x2A	; 42
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	2a e2       	ldi	r18, 0x2A	; 42
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	20 81       	ld	r18, Z
     6aa:	2b 7f       	andi	r18, 0xFB	; 251
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     6b0:	8b e2       	ldi	r24, 0x2B	; 43
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	2b e2       	ldi	r18, 0x2B	; 43
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	20 81       	ld	r18, Z
     6bc:	24 60       	ori	r18, 0x04	; 4
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     6c2:	8a e2       	ldi	r24, 0x2A	; 42
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2a e2       	ldi	r18, 0x2A	; 42
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	2d 7f       	andi	r18, 0xFD	; 253
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     6d4:	8b e2       	ldi	r24, 0x2B	; 43
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	2b e2       	ldi	r18, 0x2B	; 43
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	22 60       	ori	r18, 0x02	; 2
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     6e6:	84 e2       	ldi	r24, 0x24	; 36
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	24 e2       	ldi	r18, 0x24	; 36
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	2e 7f       	andi	r18, 0xFE	; 254
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     6f8:	85 e2       	ldi	r24, 0x25	; 37
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	25 e2       	ldi	r18, 0x25	; 37
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	21 60       	ori	r18, 0x01	; 1
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     70a:	8a e2       	ldi	r24, 0x2A	; 42
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	2a e2       	ldi	r18, 0x2A	; 42
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	20 81       	ld	r18, Z
     716:	2f 77       	andi	r18, 0x7F	; 127
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     71c:	8b e2       	ldi	r24, 0x2B	; 43
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2b e2       	ldi	r18, 0x2B	; 43
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	f9 01       	movw	r30, r18
     726:	20 81       	ld	r18, Z
     728:	20 68       	ori	r18, 0x80	; 128
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     72e:	8a e2       	ldi	r24, 0x2A	; 42
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	2a e2       	ldi	r18, 0x2A	; 42
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	f9 01       	movw	r30, r18
     738:	20 81       	ld	r18, Z
     73a:	2e 7f       	andi	r18, 0xFE	; 254
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     740:	8b e2       	ldi	r24, 0x2B	; 43
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	2b e2       	ldi	r18, 0x2B	; 43
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	f9 01       	movw	r30, r18
     74a:	20 81       	ld	r18, Z
     74c:	21 60       	ori	r18, 0x01	; 1
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     752:	84 e2       	ldi	r24, 0x24	; 36
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	24 e2       	ldi	r18, 0x24	; 36
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	f9 01       	movw	r30, r18
     75c:	20 81       	ld	r18, Z
     75e:	2e 62       	ori	r18, 0x2E	; 46
     760:	fc 01       	movw	r30, r24
     762:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     764:	8c e4       	ldi	r24, 0x4C	; 76
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	29 e5       	ldi	r18, 0x59	; 89
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     76e:	8d e4       	ldi	r24, 0x4D	; 77
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	80 81       	ld	r24, Z
     776:	8a 83       	std	Y+2, r24	; 0x02
	spi_data = SPDR;
     778:	8e e4       	ldi	r24, 0x4E	; 78
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	8a 83       	std	Y+2, r24	; 0x02

	// Power saving
	power_twi_disable();
     782:	84 e6       	ldi	r24, 0x64	; 100
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	24 e6       	ldi	r18, 0x64	; 100
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	20 68       	ori	r18, 0x80	; 128
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
	power_usart0_disable();
     794:	84 e6       	ldi	r24, 0x64	; 100
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	24 e6       	ldi	r18, 0x64	; 100
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	20 81       	ld	r18, Z
     7a0:	22 60       	ori	r18, 0x02	; 2
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18

	set_sleep_mode(SLEEP_MODE_STANDBY);
     7a6:	83 e5       	ldi	r24, 0x53	; 83
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	23 e5       	ldi	r18, 0x53	; 83
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	20 81       	ld	r18, Z
     7b2:	21 7f       	andi	r18, 0xF1	; 241
     7b4:	2c 60       	ori	r18, 0x0C	; 12
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 88 01 	sts	0x0188, r24
	cur_state = IDLE;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 d6 01 	sts	0x01D6, r24
	next_state = IDLE;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 bd 01 	sts	0x01BD, r24

	timer = 0;
     7cc:	10 92 84 01 	sts	0x0184, r1
     7d0:	10 92 85 01 	sts	0x0185, r1
     7d4:	10 92 86 01 	sts	0x0186, r1
     7d8:	10 92 87 01 	sts	0x0187, r1

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = DDS_INIT;
     7dc:	8c e0       	ldi	r24, 0x0C	; 12
     7de:	9f e1       	ldi	r25, 0x1F	; 31
     7e0:	a1 e1       	ldi	r26, 0x11	; 17
     7e2:	b5 e0       	ldi	r27, 0x05	; 5
     7e4:	80 93 c2 01 	sts	0x01C2, r24
     7e8:	90 93 c3 01 	sts	0x01C3, r25
     7ec:	a0 93 c4 01 	sts	0x01C4, r26
     7f0:	b0 93 c5 01 	sts	0x01C5, r27
	tune_freq = FREQ_INIT;
     7f4:	80 ee       	ldi	r24, 0xE0	; 224
     7f6:	99 e8       	ldi	r25, 0x89	; 137
     7f8:	a6 ed       	ldi	r26, 0xD6	; 214
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	80 93 f2 01 	sts	0x01F2, r24
     800:	90 93 f3 01 	sts	0x01F3, r25
     804:	a0 93 f4 01 	sts	0x01F4, r26
     808:	b0 93 f5 01 	sts	0x01F5, r27
	tune_dds(dds_freq_word, REG_0, TRUE);
     80c:	80 91 c2 01 	lds	r24, 0x01C2
     810:	90 91 c3 01 	lds	r25, 0x01C3
     814:	a0 91 c4 01 	lds	r26, 0x01C4
     818:	b0 91 c5 01 	lds	r27, 0x01C5
     81c:	bc 01       	movw	r22, r24
     81e:	cd 01       	movw	r24, r26
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
	tune_dds(dds_freq_word, REG_1, FALSE);
     828:	80 91 c2 01 	lds	r24, 0x01C2
     82c:	90 91 c3 01 	lds	r25, 0x01C3
     830:	a0 91 c4 01 	lds	r26, 0x01C4
     834:	b0 91 c5 01 	lds	r27, 0x01C5
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>

	st_freq = ST_DEFAULT;
     844:	84 ef       	ldi	r24, 0xF4	; 244
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	90 93 d1 01 	sts	0x01D1, r25
     84c:	80 93 d0 01 	sts	0x01D0, r24
	set_st_freq(st_freq);
     850:	80 91 d0 01 	lds	r24, 0x01D0
     854:	90 91 d1 01 	lds	r25, 0x01D1
     858:	cc 01       	movw	r24, r24
     85a:	a0 e0       	ldi	r26, 0x00	; 0
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	bc 01       	movw	r22, r24
     860:	cd 01       	movw	r24, r26
     862:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <set_st_freq>

	inc_tune_state = OFF;
     866:	10 92 e2 01 	sts	0x01E2, r1
	tune_reg = REG_0;
     86a:	10 92 e1 01 	sts	0x01E1, r1

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
     86e:	19 82       	std	Y+1, r1	; 0x01
     870:	06 c0       	rjmp	.+12     	; 0x87e <init+0x33e>
		debounce(FALSE);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>

	inc_tune_state = OFF;
	tune_reg = REG_0;

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	8f 30       	cpi	r24, 0x0F	; 15
     882:	b8 f3       	brcs	.-18     	; 0x872 <init+0x332>
		debounce(FALSE);

	eeprom_busy_wait();
     884:	8f e3       	ldi	r24, 0x3F	; 63
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	82 70       	andi	r24, 0x02	; 2
     892:	90 70       	andi	r25, 0x00	; 0
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	b1 f7       	brne	.-20     	; 0x884 <init+0x344>
	wpm = eeprom_read_byte(&ee_wpm);
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__eerd_byte_m168>
     8a0:	80 93 f6 01 	sts	0x01F6, r24
	set_wpm(wpm);
     8a4:	80 91 f6 01 	lds	r24, 0x01F6
     8a8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>

	eeprom_busy_wait();
     8ac:	8f e3       	ldi	r24, 0x3F	; 63
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	fc 01       	movw	r30, r24
     8b2:	80 81       	ld	r24, Z
     8b4:	88 2f       	mov	r24, r24
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	82 70       	andi	r24, 0x02	; 2
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	b1 f7       	brne	.-20     	; 0x8ac <init+0x36c>
	if(eeprom_read_byte(&ee_keyer) == FALSE)
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__eerd_byte_m168>
     8c8:	88 23       	and	r24, r24
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <init+0x394>
		cur_mode = SK;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 b8 01 	sts	0x01B8, r24
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <init+0x398>
	else
		cur_mode = KEYER;
     8d4:	10 92 b8 01 	sts	0x01B8, r1

	if((dah_active == TRUE) && (dit_active == FALSE))
     8d8:	80 91 d2 01 	lds	r24, 0x01D2
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	39 f4       	brne	.+14     	; 0x8ee <init+0x3ae>
     8e0:	80 91 ec 01 	lds	r24, 0x01EC
     8e4:	88 23       	and	r24, r24
     8e6:	19 f4       	brne	.+6      	; 0x8ee <init+0x3ae>
		cur_mode = SK;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 b8 01 	sts	0x01B8, r24

	// Enable interrupts
	sei();
     8ee:	78 94       	sei
}
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	0f 92       	push	r0
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 1 ms per timer tick
	dit_length = (1200 / new_wpm);
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	80 eb       	ldi	r24, 0xB0	; 176
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	b9 01       	movw	r22, r18
     912:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
     916:	9b 01       	movw	r18, r22
     918:	c9 01       	movw	r24, r18
     91a:	90 93 8a 01 	sts	0x018A, r25
     91e:	80 93 89 01 	sts	0x0189, r24
}
     922:	0f 90       	pop	r0
     924:	cf 91       	pop	r28
     926:	df 91       	pop	r29
     928:	08 95       	ret

0000092a <debounce>:

void debounce(enum BOOL flush)
{
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	0f 92       	push	r0
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	41 f5       	brne	.+80     	; 0x98c <debounce+0x62>
	{
		dit_on_count = 0;
     93c:	10 92 66 01 	sts	0x0166, r1
     940:	10 92 65 01 	sts	0x0165, r1
		dah_on_count = 0;
     944:	10 92 68 01 	sts	0x0168, r1
     948:	10 92 67 01 	sts	0x0167, r1
		dit_off_count = 0;
     94c:	10 92 6a 01 	sts	0x016A, r1
     950:	10 92 69 01 	sts	0x0169, r1
		dah_off_count = 0;
     954:	10 92 6c 01 	sts	0x016C, r1
     958:	10 92 6b 01 	sts	0x016B, r1
		cmd_on_count = 0;
     95c:	10 92 6e 01 	sts	0x016E, r1
     960:	10 92 6d 01 	sts	0x016D, r1
		msg_on_count = 0;
     964:	10 92 70 01 	sts	0x0170, r1
     968:	10 92 6f 01 	sts	0x016F, r1
		both_on_count = 0;
     96c:	10 92 72 01 	sts	0x0172, r1
     970:	10 92 71 01 	sts	0x0171, r1
		enc_on_count = 0;
     974:	10 92 74 01 	sts	0x0174, r1
     978:	10 92 73 01 	sts	0x0173, r1
		enca_on_count = 0;
     97c:	10 92 76 01 	sts	0x0176, r1
     980:	10 92 75 01 	sts	0x0175, r1
		encb_on_count = 0;
     984:	10 92 78 01 	sts	0x0178, r1
     988:	10 92 77 01 	sts	0x0177, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     98c:	89 e2       	ldi	r24, 0x29	; 41
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	fc 01       	movw	r30, r24
     992:	80 81       	ld	r24, Z
     994:	88 2f       	mov	r24, r24
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	88 70       	andi	r24, 0x08	; 8
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	a9 f4       	brne	.+42     	; 0x9ca <debounce+0xa0>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     9a0:	80 91 65 01 	lds	r24, 0x0165
     9a4:	90 91 66 01 	lds	r25, 0x0166
     9a8:	85 30       	cpi	r24, 0x05	; 5
     9aa:	91 05       	cpc	r25, r1
     9ac:	48 f4       	brcc	.+18     	; 0x9c0 <debounce+0x96>
			dit_on_count++;
     9ae:	80 91 65 01 	lds	r24, 0x0165
     9b2:	90 91 66 01 	lds	r25, 0x0166
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	90 93 66 01 	sts	0x0166, r25
     9bc:	80 93 65 01 	sts	0x0165, r24
		dit_off_count = 0;
     9c0:	10 92 6a 01 	sts	0x016A, r1
     9c4:	10 92 69 01 	sts	0x0169, r1
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <debounce+0xc8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     9ca:	80 91 69 01 	lds	r24, 0x0169
     9ce:	90 91 6a 01 	lds	r25, 0x016A
     9d2:	85 30       	cpi	r24, 0x05	; 5
     9d4:	91 05       	cpc	r25, r1
     9d6:	48 f4       	brcc	.+18     	; 0x9ea <debounce+0xc0>
			dit_off_count++;
     9d8:	80 91 69 01 	lds	r24, 0x0169
     9dc:	90 91 6a 01 	lds	r25, 0x016A
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	90 93 6a 01 	sts	0x016A, r25
     9e6:	80 93 69 01 	sts	0x0169, r24
		dit_on_count = 0;
     9ea:	10 92 66 01 	sts	0x0166, r1
     9ee:	10 92 65 01 	sts	0x0165, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     9f2:	89 e2       	ldi	r24, 0x29	; 41
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	fc 01       	movw	r30, r24
     9f8:	80 81       	ld	r24, Z
     9fa:	88 2f       	mov	r24, r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	80 71       	andi	r24, 0x10	; 16
     a00:	90 70       	andi	r25, 0x00	; 0
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a9 f4       	brne	.+42     	; 0xa30 <debounce+0x106>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     a06:	80 91 67 01 	lds	r24, 0x0167
     a0a:	90 91 68 01 	lds	r25, 0x0168
     a0e:	85 30       	cpi	r24, 0x05	; 5
     a10:	91 05       	cpc	r25, r1
     a12:	48 f4       	brcc	.+18     	; 0xa26 <debounce+0xfc>
			dah_on_count++;
     a14:	80 91 67 01 	lds	r24, 0x0167
     a18:	90 91 68 01 	lds	r25, 0x0168
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	90 93 68 01 	sts	0x0168, r25
     a22:	80 93 67 01 	sts	0x0167, r24
		dah_off_count = 0;
     a26:	10 92 6c 01 	sts	0x016C, r1
     a2a:	10 92 6b 01 	sts	0x016B, r1
     a2e:	14 c0       	rjmp	.+40     	; 0xa58 <debounce+0x12e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     a30:	80 91 6b 01 	lds	r24, 0x016B
     a34:	90 91 6c 01 	lds	r25, 0x016C
     a38:	85 30       	cpi	r24, 0x05	; 5
     a3a:	91 05       	cpc	r25, r1
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <debounce+0x126>
			dah_off_count++;
     a3e:	80 91 6b 01 	lds	r24, 0x016B
     a42:	90 91 6c 01 	lds	r25, 0x016C
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	90 93 6c 01 	sts	0x016C, r25
     a4c:	80 93 6b 01 	sts	0x016B, r24
		dah_on_count = 0;
     a50:	10 92 68 01 	sts	0x0168, r1
     a54:	10 92 67 01 	sts	0x0167, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     a58:	80 91 65 01 	lds	r24, 0x0165
     a5c:	90 91 66 01 	lds	r25, 0x0166
     a60:	85 30       	cpi	r24, 0x05	; 5
     a62:	91 05       	cpc	r25, r1
     a64:	18 f0       	brcs	.+6      	; 0xa6c <debounce+0x142>
		dit_active = TRUE;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 ec 01 	sts	0x01EC, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     a6c:	80 91 69 01 	lds	r24, 0x0169
     a70:	90 91 6a 01 	lds	r25, 0x016A
     a74:	85 30       	cpi	r24, 0x05	; 5
     a76:	91 05       	cpc	r25, r1
     a78:	10 f0       	brcs	.+4      	; 0xa7e <debounce+0x154>
		dit_active = FALSE;
     a7a:	10 92 ec 01 	sts	0x01EC, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     a7e:	80 91 67 01 	lds	r24, 0x0167
     a82:	90 91 68 01 	lds	r25, 0x0168
     a86:	85 30       	cpi	r24, 0x05	; 5
     a88:	91 05       	cpc	r25, r1
     a8a:	18 f0       	brcs	.+6      	; 0xa92 <debounce+0x168>
		dah_active = TRUE;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 d2 01 	sts	0x01D2, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     a92:	80 91 6b 01 	lds	r24, 0x016B
     a96:	90 91 6c 01 	lds	r25, 0x016C
     a9a:	85 30       	cpi	r24, 0x05	; 5
     a9c:	91 05       	cpc	r25, r1
     a9e:	10 f0       	brcs	.+4      	; 0xaa4 <debounce+0x17a>
		dah_active = FALSE;
     aa0:	10 92 d2 01 	sts	0x01D2, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     aa4:	89 e2       	ldi	r24, 0x29	; 41
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	80 81       	ld	r24, Z
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	84 70       	andi	r24, 0x04	; 4
     ab2:	90 70       	andi	r25, 0x00	; 0
     ab4:	00 97       	sbiw	r24, 0x00	; 0
     ab6:	a1 f4       	brne	.+40     	; 0xae0 <debounce+0x1b6>
     ab8:	89 e2       	ldi	r24, 0x29	; 41
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	82 70       	andi	r24, 0x02	; 2
     ac6:	90 70       	andi	r25, 0x00	; 0
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	51 f4       	brne	.+20     	; 0xae0 <debounce+0x1b6>
		both_on_count++;
     acc:	80 91 71 01 	lds	r24, 0x0171
     ad0:	90 91 72 01 	lds	r25, 0x0172
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	90 93 72 01 	sts	0x0172, r25
     ada:	80 93 71 01 	sts	0x0171, r24
     ade:	25 c0       	rjmp	.+74     	; 0xb2a <debounce+0x200>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     ae0:	80 91 71 01 	lds	r24, 0x0171
     ae4:	90 91 72 01 	lds	r25, 0x0172
     ae8:	85 30       	cpi	r24, 0x05	; 5
     aea:	91 05       	cpc	r25, r1
     aec:	60 f0       	brcs	.+24     	; 0xb06 <debounce+0x1dc>
     aee:	80 91 71 01 	lds	r24, 0x0171
     af2:	90 91 72 01 	lds	r25, 0x0172
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	84 3f       	cpi	r24, 0xF4	; 244
     afa:	9f 07       	cpc	r25, r31
     afc:	20 f4       	brcc	.+8      	; 0xb06 <debounce+0x1dc>
			both_btn = PRESS;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 d4 01 	sts	0x01D4, r24
     b04:	0e c0       	rjmp	.+28     	; 0xb22 <debounce+0x1f8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     b06:	80 91 71 01 	lds	r24, 0x0171
     b0a:	90 91 72 01 	lds	r25, 0x0172
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	84 3f       	cpi	r24, 0xF4	; 244
     b12:	92 07       	cpc	r25, r18
     b14:	20 f0       	brcs	.+8      	; 0xb1e <debounce+0x1f4>
			both_btn = HOLD;
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	80 93 d4 01 	sts	0x01D4, r24
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <debounce+0x1f8>
		else
			both_btn = OFF;
     b1e:	10 92 d4 01 	sts	0x01D4, r1

		both_on_count = 0;
     b22:	10 92 72 01 	sts	0x0172, r1
     b26:	10 92 71 01 	sts	0x0171, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     b2a:	89 e2       	ldi	r24, 0x29	; 41
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	fc 01       	movw	r30, r24
     b30:	80 81       	ld	r24, Z
     b32:	88 2f       	mov	r24, r24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	84 70       	andi	r24, 0x04	; 4
     b38:	90 70       	andi	r25, 0x00	; 0
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	51 f4       	brne	.+20     	; 0xb52 <debounce+0x228>
	{
		cmd_on_count++;
     b3e:	80 91 6d 01 	lds	r24, 0x016D
     b42:	90 91 6e 01 	lds	r25, 0x016E
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	90 93 6e 01 	sts	0x016E, r25
     b4c:	80 93 6d 01 	sts	0x016D, r24
     b50:	25 c0       	rjmp	.+74     	; 0xb9c <debounce+0x272>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     b52:	80 91 6d 01 	lds	r24, 0x016D
     b56:	90 91 6e 01 	lds	r25, 0x016E
     b5a:	85 30       	cpi	r24, 0x05	; 5
     b5c:	91 05       	cpc	r25, r1
     b5e:	60 f0       	brcs	.+24     	; 0xb78 <debounce+0x24e>
     b60:	80 91 6d 01 	lds	r24, 0x016D
     b64:	90 91 6e 01 	lds	r25, 0x016E
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	84 3f       	cpi	r24, 0xF4	; 244
     b6c:	9f 07       	cpc	r25, r31
     b6e:	20 f4       	brcc	.+8      	; 0xb78 <debounce+0x24e>
			cmd_btn = PRESS;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 d5 01 	sts	0x01D5, r24
     b76:	0e c0       	rjmp	.+28     	; 0xb94 <debounce+0x26a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     b78:	80 91 6d 01 	lds	r24, 0x016D
     b7c:	90 91 6e 01 	lds	r25, 0x016E
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	84 3f       	cpi	r24, 0xF4	; 244
     b84:	92 07       	cpc	r25, r18
     b86:	20 f0       	brcs	.+8      	; 0xb90 <debounce+0x266>
			cmd_btn = HOLD;
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	80 93 d5 01 	sts	0x01D5, r24
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <debounce+0x26a>
		else
			cmd_btn = OFF;
     b90:	10 92 d5 01 	sts	0x01D5, r1

		cmd_on_count = 0;
     b94:	10 92 6e 01 	sts	0x016E, r1
     b98:	10 92 6d 01 	sts	0x016D, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     b9c:	89 e2       	ldi	r24, 0x29	; 41
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	82 70       	andi	r24, 0x02	; 2
     baa:	90 70       	andi	r25, 0x00	; 0
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	51 f4       	brne	.+20     	; 0xbc4 <debounce+0x29a>
		msg_on_count++;
     bb0:	80 91 6f 01 	lds	r24, 0x016F
     bb4:	90 91 70 01 	lds	r25, 0x0170
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	90 93 70 01 	sts	0x0170, r25
     bbe:	80 93 6f 01 	sts	0x016F, r24
     bc2:	25 c0       	rjmp	.+74     	; 0xc0e <debounce+0x2e4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     bc4:	80 91 6f 01 	lds	r24, 0x016F
     bc8:	90 91 70 01 	lds	r25, 0x0170
     bcc:	85 30       	cpi	r24, 0x05	; 5
     bce:	91 05       	cpc	r25, r1
     bd0:	60 f0       	brcs	.+24     	; 0xbea <debounce+0x2c0>
     bd2:	80 91 6f 01 	lds	r24, 0x016F
     bd6:	90 91 70 01 	lds	r25, 0x0170
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	84 3f       	cpi	r24, 0xF4	; 244
     bde:	9f 07       	cpc	r25, r31
     be0:	20 f4       	brcc	.+8      	; 0xbea <debounce+0x2c0>
			msg_btn = PRESS;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 d3 01 	sts	0x01D3, r24
     be8:	0e c0       	rjmp	.+28     	; 0xc06 <debounce+0x2dc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     bea:	80 91 6f 01 	lds	r24, 0x016F
     bee:	90 91 70 01 	lds	r25, 0x0170
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	84 3f       	cpi	r24, 0xF4	; 244
     bf6:	92 07       	cpc	r25, r18
     bf8:	20 f0       	brcs	.+8      	; 0xc02 <debounce+0x2d8>
			msg_btn = HOLD;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	80 93 d3 01 	sts	0x01D3, r24
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <debounce+0x2dc>
		else
			msg_btn = OFF;
     c02:	10 92 d3 01 	sts	0x01D3, r1

		msg_on_count = 0;
     c06:	10 92 70 01 	sts	0x0170, r1
     c0a:	10 92 6f 01 	sts	0x016F, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     c0e:	89 e2       	ldi	r24, 0x29	; 41
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	81 70       	andi	r24, 0x01	; 1
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	51 f4       	brne	.+20     	; 0xc36 <debounce+0x30c>
		enc_on_count++;
     c22:	80 91 73 01 	lds	r24, 0x0173
     c26:	90 91 74 01 	lds	r25, 0x0174
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	90 93 74 01 	sts	0x0174, r25
     c30:	80 93 73 01 	sts	0x0173, r24
     c34:	25 c0       	rjmp	.+74     	; 0xc80 <debounce+0x356>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     c36:	80 91 73 01 	lds	r24, 0x0173
     c3a:	90 91 74 01 	lds	r25, 0x0174
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	91 05       	cpc	r25, r1
     c42:	60 f0       	brcs	.+24     	; 0xc5c <debounce+0x332>
     c44:	80 91 73 01 	lds	r24, 0x0173
     c48:	90 91 74 01 	lds	r25, 0x0174
     c4c:	f1 e0       	ldi	r31, 0x01	; 1
     c4e:	84 3f       	cpi	r24, 0xF4	; 244
     c50:	9f 07       	cpc	r25, r31
     c52:	20 f4       	brcc	.+8      	; 0xc5c <debounce+0x332>
			enc_btn = PRESS;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 e3 01 	sts	0x01E3, r24
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <debounce+0x34e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     c5c:	80 91 73 01 	lds	r24, 0x0173
     c60:	90 91 74 01 	lds	r25, 0x0174
     c64:	21 e0       	ldi	r18, 0x01	; 1
     c66:	84 3f       	cpi	r24, 0xF4	; 244
     c68:	92 07       	cpc	r25, r18
     c6a:	20 f0       	brcs	.+8      	; 0xc74 <debounce+0x34a>
			enc_btn = HOLD;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	80 93 e3 01 	sts	0x01E3, r24
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <debounce+0x34e>
		else
			enc_btn = OFF;
     c74:	10 92 e3 01 	sts	0x01E3, r1

		enc_on_count = 0;
     c78:	10 92 74 01 	sts	0x0174, r1
     c7c:	10 92 73 01 	sts	0x0173, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     c80:	83 e2       	ldi	r24, 0x23	; 35
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	81 70       	andi	r24, 0x01	; 1
     c8e:	90 70       	andi	r25, 0x00	; 0
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	a9 f4       	brne	.+42     	; 0xcbe <debounce+0x394>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     c94:	80 91 75 01 	lds	r24, 0x0175
     c98:	90 91 76 01 	lds	r25, 0x0176
     c9c:	85 30       	cpi	r24, 0x05	; 5
     c9e:	91 05       	cpc	r25, r1
     ca0:	48 f4       	brcc	.+18     	; 0xcb4 <debounce+0x38a>
			enca_on_count++;
     ca2:	80 91 75 01 	lds	r24, 0x0175
     ca6:	90 91 76 01 	lds	r25, 0x0176
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	90 93 76 01 	sts	0x0176, r25
     cb0:	80 93 75 01 	sts	0x0175, r24
		enca_off_count = 0;
     cb4:	10 92 7a 01 	sts	0x017A, r1
     cb8:	10 92 79 01 	sts	0x0179, r1
     cbc:	14 c0       	rjmp	.+40     	; 0xce6 <debounce+0x3bc>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     cbe:	80 91 79 01 	lds	r24, 0x0179
     cc2:	90 91 7a 01 	lds	r25, 0x017A
     cc6:	85 30       	cpi	r24, 0x05	; 5
     cc8:	91 05       	cpc	r25, r1
     cca:	48 f4       	brcc	.+18     	; 0xcde <debounce+0x3b4>
			enca_off_count++;
     ccc:	80 91 79 01 	lds	r24, 0x0179
     cd0:	90 91 7a 01 	lds	r25, 0x017A
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	90 93 7a 01 	sts	0x017A, r25
     cda:	80 93 79 01 	sts	0x0179, r24
		enca_on_count = 0;
     cde:	10 92 76 01 	sts	0x0176, r1
     ce2:	10 92 75 01 	sts	0x0175, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     ce6:	89 e2       	ldi	r24, 0x29	; 41
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	88 23       	and	r24, r24
     cf0:	ac f0       	brlt	.+42     	; 0xd1c <debounce+0x3f2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     cf2:	80 91 77 01 	lds	r24, 0x0177
     cf6:	90 91 78 01 	lds	r25, 0x0178
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	91 05       	cpc	r25, r1
     cfe:	48 f4       	brcc	.+18     	; 0xd12 <debounce+0x3e8>
			encb_on_count++;
     d00:	80 91 77 01 	lds	r24, 0x0177
     d04:	90 91 78 01 	lds	r25, 0x0178
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	90 93 78 01 	sts	0x0178, r25
     d0e:	80 93 77 01 	sts	0x0177, r24
		encb_off_count = 0;
     d12:	10 92 7c 01 	sts	0x017C, r1
     d16:	10 92 7b 01 	sts	0x017B, r1
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <debounce+0x41a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     d1c:	80 91 7b 01 	lds	r24, 0x017B
     d20:	90 91 7c 01 	lds	r25, 0x017C
     d24:	85 30       	cpi	r24, 0x05	; 5
     d26:	91 05       	cpc	r25, r1
     d28:	48 f4       	brcc	.+18     	; 0xd3c <debounce+0x412>
			encb_off_count++;
     d2a:	80 91 7b 01 	lds	r24, 0x017B
     d2e:	90 91 7c 01 	lds	r25, 0x017C
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	90 93 7c 01 	sts	0x017C, r25
     d38:	80 93 7b 01 	sts	0x017B, r24
		encb_on_count = 0;
     d3c:	10 92 78 01 	sts	0x0178, r1
     d40:	10 92 77 01 	sts	0x0177, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     d44:	80 91 75 01 	lds	r24, 0x0175
     d48:	90 91 76 01 	lds	r25, 0x0176
     d4c:	85 30       	cpi	r24, 0x05	; 5
     d4e:	91 05       	cpc	r25, r1
     d50:	18 f0       	brcs	.+6      	; 0xd58 <debounce+0x42e>
		enc_a = TRUE;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 7d 01 	sts	0x017D, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     d58:	80 91 79 01 	lds	r24, 0x0179
     d5c:	90 91 7a 01 	lds	r25, 0x017A
     d60:	85 30       	cpi	r24, 0x05	; 5
     d62:	91 05       	cpc	r25, r1
     d64:	10 f0       	brcs	.+4      	; 0xd6a <debounce+0x440>
		enc_a = FALSE;
     d66:	10 92 7d 01 	sts	0x017D, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     d6a:	80 91 77 01 	lds	r24, 0x0177
     d6e:	90 91 78 01 	lds	r25, 0x0178
     d72:	85 30       	cpi	r24, 0x05	; 5
     d74:	91 05       	cpc	r25, r1
     d76:	18 f0       	brcs	.+6      	; 0xd7e <debounce+0x454>
		enc_b = TRUE;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 05 02 	sts	0x0205, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     d7e:	80 91 7b 01 	lds	r24, 0x017B
     d82:	90 91 7c 01 	lds	r25, 0x017C
     d86:	85 30       	cpi	r24, 0x05	; 5
     d88:	91 05       	cpc	r25, r1
     d8a:	10 f0       	brcs	.+4      	; 0xd90 <debounce+0x466>
		enc_b = FALSE;
     d8c:	10 92 05 02 	sts	0x0205, r1
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
		allow_sleep = FALSE;
	else
		allow_sleep = TRUE;
		*/
}
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <announce>:

void announce(char * msg, uint16_t freq, uint8_t speed)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <announce+0x6>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <announce+0x8>
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	7c 83       	std	Y+4, r23	; 0x04
     dac:	6b 83       	std	Y+3, r22	; 0x03
     dae:	4d 83       	std	Y+5, r20	; 0x05
	// Convert to uppercase
	strupr(msg);
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	0e 94 8e 1c 	call	0x391c	; 0x391c <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     db8:	80 91 ff 01 	lds	r24, 0x01FF
     dbc:	90 91 00 02 	lds	r25, 0x0200
     dc0:	29 81       	ldd	r18, Y+1	; 0x01
     dc2:	3a 81       	ldd	r19, Y+2	; 0x02
     dc4:	b9 01       	movw	r22, r18
     dc6:	0e 94 87 1c 	call	0x390e	; 0x390e <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     dca:	80 91 d6 01 	lds	r24, 0x01D6
     dce:	80 93 88 01 	sts	0x0188, r24
	prev_state_end = cur_state_end;
     dd2:	80 91 e4 01 	lds	r24, 0x01E4
     dd6:	90 91 e5 01 	lds	r25, 0x01E5
     dda:	a0 91 e6 01 	lds	r26, 0x01E6
     dde:	b0 91 e7 01 	lds	r27, 0x01E7
     de2:	80 93 ca 01 	sts	0x01CA, r24
     de6:	90 93 cb 01 	sts	0x01CB, r25
     dea:	a0 93 cc 01 	sts	0x01CC, r26
     dee:	b0 93 cd 01 	sts	0x01CD, r27
	prev_mode = cur_mode;
     df2:	80 91 b8 01 	lds	r24, 0x01B8
     df6:	80 93 ce 01 	sts	0x01CE, r24
	prev_st_freq = st_freq;
     dfa:	80 91 d0 01 	lds	r24, 0x01D0
     dfe:	90 91 d1 01 	lds	r25, 0x01D1
     e02:	90 93 dc 01 	sts	0x01DC, r25
     e06:	80 93 db 01 	sts	0x01DB, r24
	st_freq = freq;
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	90 93 d1 01 	sts	0x01D1, r25
     e12:	80 93 d0 01 	sts	0x01D0, r24
	prev_wpm = wpm;
     e16:	80 91 f6 01 	lds	r24, 0x01F6
     e1a:	80 93 06 02 	sts	0x0206, r24
	wpm = speed;
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	80 93 f6 01 	sts	0x01F6, r24

	set_st_freq(st_freq);
     e24:	80 91 d0 01 	lds	r24, 0x01D0
     e28:	90 91 d1 01 	lds	r25, 0x01D1
     e2c:	cc 01       	movw	r24, r24
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <set_st_freq>
	set_wpm(wpm);
     e3a:	80 91 f6 01 	lds	r24, 0x01F6
     e3e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>

	// Set into announce mode
	cur_state = IDLE;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 d6 01 	sts	0x01D6, r24
	cur_mode = ANNOUNCE;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	80 93 b8 01 	sts	0x01B8, r24
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <read_voltage>:

void read_voltage(void)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <read_voltage+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <read_voltage+0x8>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <read_voltage+0xa>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     e6c:	8a e0       	ldi	r24, 0x0A	; 10
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 44 1b 	call	0x3688	; 0x3688 <malloc>
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     e78:	8a e7       	ldi	r24, 0x7A	; 122
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	2a e7       	ldi	r18, 0x7A	; 122
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	d9 01       	movw	r26, r18
     e82:	2c 91       	ld	r18, X
     e84:	20 64       	ori	r18, 0x40	; 64
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     e8a:	8a e7       	ldi	r24, 0x7A	; 122
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	dc 01       	movw	r26, r24
     e90:	8c 91       	ld	r24, X
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	80 74       	andi	r24, 0x40	; 64
     e98:	90 70       	andi	r25, 0x00	; 0
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	b1 f7       	brne	.-20     	; 0xe8a <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     e9e:	89 e7       	ldi	r24, 0x79	; 121
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 16.1 V
	// We'll use fixed point numbers, so full scale is 161 * 0.1 V
	vcc = (vcc_mon * 161) / 256;
     eae:	4b 81       	ldd	r20, Y+3	; 0x03
     eb0:	5c 81       	ldd	r21, Y+4	; 0x04
     eb2:	21 ea       	ldi	r18, 0xA1	; 161
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	42 9f       	mul	r20, r18
     eb8:	c0 01       	movw	r24, r0
     eba:	43 9f       	mul	r20, r19
     ebc:	90 0d       	add	r25, r0
     ebe:	52 9f       	mul	r21, r18
     ec0:	90 0d       	add	r25, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	89 2f       	mov	r24, r25
     ec6:	99 27       	eor	r25, r25
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	2a e0       	ldi	r18, 0x0A	; 10
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	b9 01       	movw	r22, r18
     ed6:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__udivmodhi4>
     eda:	9b 01       	movw	r18, r22
     edc:	f9 01       	movw	r30, r18
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	2a e0       	ldi	r18, 0x0A	; 10
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	b9 01       	movw	r22, r18
     ee8:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__udivmodhi4>
     eec:	9c 01       	movw	r18, r24
     eee:	8d b7       	in	r24, 0x3d	; 61
     ef0:	9e b7       	in	r25, 0x3e	; 62
     ef2:	08 97       	sbiw	r24, 0x08	; 8
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	9e bf       	out	0x3e, r25	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	8d bf       	out	0x3d, r24	; 61
     efe:	8d b7       	in	r24, 0x3d	; 61
     f00:	9e b7       	in	r25, 0x3e	; 62
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	49 81       	ldd	r20, Y+1	; 0x01
     f06:	5a 81       	ldd	r21, Y+2	; 0x02
     f08:	dc 01       	movw	r26, r24
     f0a:	4d 93       	st	X+, r20
     f0c:	5c 93       	st	X, r21
     f0e:	4b e0       	ldi	r20, 0x0B	; 11
     f10:	51 e0       	ldi	r21, 0x01	; 1
     f12:	dc 01       	movw	r26, r24
     f14:	13 96       	adiw	r26, 0x03	; 3
     f16:	5c 93       	st	X, r21
     f18:	4e 93       	st	-X, r20
     f1a:	12 97       	sbiw	r26, 0x02	; 2
     f1c:	dc 01       	movw	r26, r24
     f1e:	15 96       	adiw	r26, 0x05	; 5
     f20:	fc 93       	st	X, r31
     f22:	ee 93       	st	-X, r30
     f24:	14 97       	sbiw	r26, 0x04	; 4
     f26:	fc 01       	movw	r30, r24
     f28:	37 83       	std	Z+7, r19	; 0x07
     f2a:	26 83       	std	Z+6, r18	; 0x06
     f2c:	0e 94 98 1c 	call	0x3930	; 0x3930 <sprintf>
     f30:	8d b7       	in	r24, 0x3d	; 61
     f32:	9e b7       	in	r25, 0x3e	; 62
     f34:	08 96       	adiw	r24, 0x08	; 8
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	9e bf       	out	0x3e, r25	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq, wpm);
     f40:	20 91 d0 01 	lds	r18, 0x01D0
     f44:	30 91 d1 01 	lds	r19, 0x01D1
     f48:	40 91 f6 01 	lds	r20, 0x01F6
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	b9 01       	movw	r22, r18
     f52:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>

	free(vcc_out);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	0e 94 de 1b 	call	0x37bc	; 0x37bc <free>
}
     f5e:	26 96       	adiw	r28, 0x06	; 6
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <count_frequency>:

void count_frequency(void)
{
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <count_frequency+0xa>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     f7e:	8f e0       	ldi	r24, 0x0F	; 15
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 44 1b 	call	0x3688	; 0x3688 <malloc>
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	if(inc_tune_state == XIT || inc_tune_state == RIT)
     f8a:	80 91 e2 01 	lds	r24, 0x01E2
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	29 f0       	breq	.+10     	; 0xf9c <count_frequency+0x2c>
     f92:	80 91 e2 01 	lds	r24, 0x01E2
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	09 f0       	breq	.+2      	; 0xf9c <count_frequency+0x2c>
     f9a:	ae c0       	rjmp	.+348    	; 0x10f8 <count_frequency+0x188>
	{
		if(it_delta < 0)
     f9c:	80 91 d8 01 	lds	r24, 0x01D8
     fa0:	90 91 d9 01 	lds	r25, 0x01D9
     fa4:	99 23       	and	r25, r25
     fa6:	0c f0       	brlt	.+2      	; 0xfaa <count_frequency+0x3a>
     fa8:	56 c0       	rjmp	.+172    	; 0x1056 <count_frequency+0xe6>
			sprintf(freq_out, "-%1iR%2.2i", (int)abs(((it_delta / 1000) % 100)), (int)abs(((it_delta % 1000) / 10)));
     faa:	80 91 d8 01 	lds	r24, 0x01D8
     fae:	90 91 d9 01 	lds	r25, 0x01D9
     fb2:	28 ee       	ldi	r18, 0xE8	; 232
     fb4:	33 e0       	ldi	r19, 0x03	; 3
     fb6:	b9 01       	movw	r22, r18
     fb8:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
     fbc:	9b 01       	movw	r18, r22
     fbe:	c9 01       	movw	r24, r18
     fc0:	24 e6       	ldi	r18, 0x64	; 100
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	b9 01       	movw	r22, r18
     fc6:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
     fca:	99 23       	and	r25, r25
     fcc:	1c f4       	brge	.+6      	; 0xfd4 <count_frequency+0x64>
     fce:	90 95       	com	r25
     fd0:	81 95       	neg	r24
     fd2:	9f 4f       	sbci	r25, 0xFF	; 255
     fd4:	fc 01       	movw	r30, r24
     fd6:	80 91 d8 01 	lds	r24, 0x01D8
     fda:	90 91 d9 01 	lds	r25, 0x01D9
     fde:	28 ee       	ldi	r18, 0xE8	; 232
     fe0:	33 e0       	ldi	r19, 0x03	; 3
     fe2:	b9 01       	movw	r22, r18
     fe4:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
     fe8:	2a e0       	ldi	r18, 0x0A	; 10
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	b9 01       	movw	r22, r18
     fee:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
     ff2:	9b 01       	movw	r18, r22
     ff4:	c9 01       	movw	r24, r18
     ff6:	99 23       	and	r25, r25
     ff8:	1c f4       	brge	.+6      	; 0x1000 <count_frequency+0x90>
     ffa:	90 95       	com	r25
     ffc:	81 95       	neg	r24
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	9c 01       	movw	r18, r24
    1002:	8d b7       	in	r24, 0x3d	; 61
    1004:	9e b7       	in	r25, 0x3e	; 62
    1006:	08 97       	sbiw	r24, 0x08	; 8
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	9e bf       	out	0x3e, r25	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	8d bf       	out	0x3d, r24	; 61
    1012:	8d b7       	in	r24, 0x3d	; 61
    1014:	9e b7       	in	r25, 0x3e	; 62
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	49 81       	ldd	r20, Y+1	; 0x01
    101a:	5a 81       	ldd	r21, Y+2	; 0x02
    101c:	dc 01       	movw	r26, r24
    101e:	4d 93       	st	X+, r20
    1020:	5c 93       	st	X, r21
    1022:	41 e1       	ldi	r20, 0x11	; 17
    1024:	51 e0       	ldi	r21, 0x01	; 1
    1026:	dc 01       	movw	r26, r24
    1028:	13 96       	adiw	r26, 0x03	; 3
    102a:	5c 93       	st	X, r21
    102c:	4e 93       	st	-X, r20
    102e:	12 97       	sbiw	r26, 0x02	; 2
    1030:	dc 01       	movw	r26, r24
    1032:	15 96       	adiw	r26, 0x05	; 5
    1034:	fc 93       	st	X, r31
    1036:	ee 93       	st	-X, r30
    1038:	14 97       	sbiw	r26, 0x04	; 4
    103a:	fc 01       	movw	r30, r24
    103c:	37 83       	std	Z+7, r19	; 0x07
    103e:	26 83       	std	Z+6, r18	; 0x06
    1040:	0e 94 98 1c 	call	0x3930	; 0x3930 <sprintf>
    1044:	8d b7       	in	r24, 0x3d	; 61
    1046:	9e b7       	in	r25, 0x3e	; 62
    1048:	08 96       	adiw	r24, 0x08	; 8
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	9e bf       	out	0x3e, r25	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	8d bf       	out	0x3d, r24	; 61
	freq_out = malloc(15);

	// Format and output frequency
	if(inc_tune_state == XIT || inc_tune_state == RIT)
	{
		if(it_delta < 0)
    1054:	b4 c0       	rjmp	.+360    	; 0x11be <count_frequency+0x24e>
			sprintf(freq_out, "-%1iR%2.2i", (int)abs(((it_delta / 1000) % 100)), (int)abs(((it_delta % 1000) / 10)));
		else
			sprintf(freq_out, "%1iR%2.2i", (int)((it_delta / 1000) % 100), (int)abs(((it_delta % 1000) / 10)));
    1056:	80 91 d8 01 	lds	r24, 0x01D8
    105a:	90 91 d9 01 	lds	r25, 0x01D9
    105e:	28 ee       	ldi	r18, 0xE8	; 232
    1060:	33 e0       	ldi	r19, 0x03	; 3
    1062:	b9 01       	movw	r22, r18
    1064:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
    1068:	9b 01       	movw	r18, r22
    106a:	c9 01       	movw	r24, r18
    106c:	24 e6       	ldi	r18, 0x64	; 100
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	b9 01       	movw	r22, r18
    1072:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
    1076:	fc 01       	movw	r30, r24
    1078:	80 91 d8 01 	lds	r24, 0x01D8
    107c:	90 91 d9 01 	lds	r25, 0x01D9
    1080:	28 ee       	ldi	r18, 0xE8	; 232
    1082:	33 e0       	ldi	r19, 0x03	; 3
    1084:	b9 01       	movw	r22, r18
    1086:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	b9 01       	movw	r22, r18
    1090:	0e 94 0f 1b 	call	0x361e	; 0x361e <__divmodhi4>
    1094:	9b 01       	movw	r18, r22
    1096:	c9 01       	movw	r24, r18
    1098:	99 23       	and	r25, r25
    109a:	1c f4       	brge	.+6      	; 0x10a2 <count_frequency+0x132>
    109c:	90 95       	com	r25
    109e:	81 95       	neg	r24
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	9c 01       	movw	r18, r24
    10a4:	ad b7       	in	r26, 0x3d	; 61
    10a6:	be b7       	in	r27, 0x3e	; 62
    10a8:	18 97       	sbiw	r26, 0x08	; 8
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	be bf       	out	0x3e, r27	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	ad bf       	out	0x3d, r26	; 61
    10b4:	8d b7       	in	r24, 0x3d	; 61
    10b6:	9e b7       	in	r25, 0x3e	; 62
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	49 81       	ldd	r20, Y+1	; 0x01
    10bc:	5a 81       	ldd	r21, Y+2	; 0x02
    10be:	dc 01       	movw	r26, r24
    10c0:	4d 93       	st	X+, r20
    10c2:	5c 93       	st	X, r21
    10c4:	4c e1       	ldi	r20, 0x1C	; 28
    10c6:	51 e0       	ldi	r21, 0x01	; 1
    10c8:	dc 01       	movw	r26, r24
    10ca:	13 96       	adiw	r26, 0x03	; 3
    10cc:	5c 93       	st	X, r21
    10ce:	4e 93       	st	-X, r20
    10d0:	12 97       	sbiw	r26, 0x02	; 2
    10d2:	dc 01       	movw	r26, r24
    10d4:	15 96       	adiw	r26, 0x05	; 5
    10d6:	fc 93       	st	X, r31
    10d8:	ee 93       	st	-X, r30
    10da:	14 97       	sbiw	r26, 0x04	; 4
    10dc:	fc 01       	movw	r30, r24
    10de:	37 83       	std	Z+7, r19	; 0x07
    10e0:	26 83       	std	Z+6, r18	; 0x06
    10e2:	0e 94 98 1c 	call	0x3930	; 0x3930 <sprintf>
    10e6:	8d b7       	in	r24, 0x3d	; 61
    10e8:	9e b7       	in	r25, 0x3e	; 62
    10ea:	08 96       	adiw	r24, 0x08	; 8
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	9e bf       	out	0x3e, r25	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	8d bf       	out	0x3d, r24	; 61
	freq_out = malloc(15);

	// Format and output frequency
	if(inc_tune_state == XIT || inc_tune_state == RIT)
	{
		if(it_delta < 0)
    10f6:	63 c0       	rjmp	.+198    	; 0x11be <count_frequency+0x24e>
			sprintf(freq_out, "-%1iR%2.2i", (int)abs(((it_delta / 1000) % 100)), (int)abs(((it_delta % 1000) / 10)));
		else
			sprintf(freq_out, "%1iR%2.2i", (int)((it_delta / 1000) % 100), (int)abs(((it_delta % 1000) / 10)));
	}
	else
		sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
    10f8:	80 91 f2 01 	lds	r24, 0x01F2
    10fc:	90 91 f3 01 	lds	r25, 0x01F3
    1100:	a0 91 f4 01 	lds	r26, 0x01F4
    1104:	b0 91 f5 01 	lds	r27, 0x01F5
    1108:	28 ee       	ldi	r18, 0xE8	; 232
    110a:	33 e0       	ldi	r19, 0x03	; 3
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 22 1b 	call	0x3644	; 0x3644 <__udivmodsi4>
    1118:	da 01       	movw	r26, r20
    111a:	c9 01       	movw	r24, r18
    111c:	24 e6       	ldi	r18, 0x64	; 100
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 22 1b 	call	0x3644	; 0x3644 <__udivmodsi4>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8c 01       	movw	r16, r24
    1132:	80 91 f2 01 	lds	r24, 0x01F2
    1136:	90 91 f3 01 	lds	r25, 0x01F3
    113a:	a0 91 f4 01 	lds	r26, 0x01F4
    113e:	b0 91 f5 01 	lds	r27, 0x01F5
    1142:	28 ee       	ldi	r18, 0xE8	; 232
    1144:	33 e0       	ldi	r19, 0x03	; 3
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 22 1b 	call	0x3644	; 0x3644 <__udivmodsi4>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	2a e0       	ldi	r18, 0x0A	; 10
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 22 1b 	call	0x3644	; 0x3644 <__udivmodsi4>
    1166:	da 01       	movw	r26, r20
    1168:	c9 01       	movw	r24, r18
    116a:	9c 01       	movw	r18, r24
    116c:	ad b7       	in	r26, 0x3d	; 61
    116e:	be b7       	in	r27, 0x3e	; 62
    1170:	18 97       	sbiw	r26, 0x08	; 8
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	be bf       	out	0x3e, r27	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	ad bf       	out	0x3d, r26	; 61
    117c:	8d b7       	in	r24, 0x3d	; 61
    117e:	9e b7       	in	r25, 0x3e	; 62
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	49 81       	ldd	r20, Y+1	; 0x01
    1184:	5a 81       	ldd	r21, Y+2	; 0x02
    1186:	fc 01       	movw	r30, r24
    1188:	51 83       	std	Z+1, r21	; 0x01
    118a:	40 83       	st	Z, r20
    118c:	46 e2       	ldi	r20, 0x26	; 38
    118e:	51 e0       	ldi	r21, 0x01	; 1
    1190:	dc 01       	movw	r26, r24
    1192:	13 96       	adiw	r26, 0x03	; 3
    1194:	5c 93       	st	X, r21
    1196:	4e 93       	st	-X, r20
    1198:	12 97       	sbiw	r26, 0x02	; 2
    119a:	fc 01       	movw	r30, r24
    119c:	15 83       	std	Z+5, r17	; 0x05
    119e:	04 83       	std	Z+4, r16	; 0x04
    11a0:	dc 01       	movw	r26, r24
    11a2:	17 96       	adiw	r26, 0x07	; 7
    11a4:	3c 93       	st	X, r19
    11a6:	2e 93       	st	-X, r18
    11a8:	16 97       	sbiw	r26, 0x06	; 6
    11aa:	0e 94 98 1c 	call	0x3930	; 0x3930 <sprintf>
    11ae:	ed b7       	in	r30, 0x3d	; 61
    11b0:	fe b7       	in	r31, 0x3e	; 62
    11b2:	38 96       	adiw	r30, 0x08	; 8
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	fe bf       	out	0x3e, r31	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	ed bf       	out	0x3d, r30	; 61
	announce(freq_out, st_freq, wpm);
    11be:	20 91 d0 01 	lds	r18, 0x01D0
    11c2:	30 91 d1 01 	lds	r19, 0x01D1
    11c6:	40 91 f6 01 	lds	r20, 0x01F6
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	b9 01       	movw	r22, r18
    11d0:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>

	free(freq_out);
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	0e 94 de 1b 	call	0x37bc	; 0x37bc <free>
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	08 95       	ret

000011ea <poll_buttons>:

void poll_buttons(void)
{
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
    11fc:	80 91 d4 01 	lds	r24, 0x01D4
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	f9 f4       	brne	.+62     	; 0x1242 <poll_buttons+0x58>
	{
		cur_state = IDLE;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	80 93 d6 01 	sts	0x01D6, r24
		prev_mode = cur_mode;
    120a:	80 91 b8 01 	lds	r24, 0x01B8
    120e:	80 93 ce 01 	sts	0x01CE, r24
		cur_mode = TUNE;
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	80 93 b8 01 	sts	0x01B8, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1218:	80 91 7e 01 	lds	r24, 0x017E
    121c:	90 91 7f 01 	lds	r25, 0x017F
    1220:	a0 91 80 01 	lds	r26, 0x0180
    1224:	b0 91 81 01 	lds	r27, 0x0181
    1228:	84 5d       	subi	r24, 0xD4	; 212
    122a:	9e 4f       	sbci	r25, 0xFE	; 254
    122c:	af 4f       	sbci	r26, 0xFF	; 255
    122e:	bf 4f       	sbci	r27, 0xFF	; 255
    1230:	80 93 dd 01 	sts	0x01DD, r24
    1234:	90 93 de 01 	sts	0x01DE, r25
    1238:	a0 93 df 01 	sts	0x01DF, r26
    123c:	b0 93 e0 01 	sts	0x01E0, r27
    1240:	72 c0       	rjmp	.+228    	; 0x1326 <poll_buttons+0x13c>
	}
	else if(cmd_btn == PRESS)
    1242:	80 91 d5 01 	lds	r24, 0x01D5
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	f9 f4       	brne	.+62     	; 0x1288 <poll_buttons+0x9e>
	{
		prev_mode = cur_mode;
    124a:	80 91 b8 01 	lds	r24, 0x01B8
    124e:	80 93 ce 01 	sts	0x01CE, r24
		cur_mode = MENU;
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	80 93 b8 01 	sts	0x01B8, r24
		cur_state = IDLE;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 d6 01 	sts	0x01D6, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    125e:	80 91 7e 01 	lds	r24, 0x017E
    1262:	90 91 7f 01 	lds	r25, 0x017F
    1266:	a0 91 80 01 	lds	r26, 0x0180
    126a:	b0 91 81 01 	lds	r27, 0x0181
    126e:	84 5d       	subi	r24, 0xD4	; 212
    1270:	9e 4f       	sbci	r25, 0xFE	; 254
    1272:	af 4f       	sbci	r26, 0xFF	; 255
    1274:	bf 4f       	sbci	r27, 0xFF	; 255
    1276:	80 93 dd 01 	sts	0x01DD, r24
    127a:	90 93 de 01 	sts	0x01DE, r25
    127e:	a0 93 df 01 	sts	0x01DF, r26
    1282:	b0 93 e0 01 	sts	0x01E0, r27
    1286:	4f c0       	rjmp	.+158    	; 0x1326 <poll_buttons+0x13c>
	}
	else if(msg_btn == PRESS)
    1288:	80 91 d3 01 	lds	r24, 0x01D3
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	b9 f4       	brne	.+46     	; 0x12be <poll_buttons+0xd4>
	{
		count_frequency();
    1290:	0e 94 b8 07 	call	0xf70	; 0xf70 <count_frequency>
		sleep_timer = cur_timer + SLEEP_DELAY;
    1294:	80 91 7e 01 	lds	r24, 0x017E
    1298:	90 91 7f 01 	lds	r25, 0x017F
    129c:	a0 91 80 01 	lds	r26, 0x0180
    12a0:	b0 91 81 01 	lds	r27, 0x0181
    12a4:	84 5d       	subi	r24, 0xD4	; 212
    12a6:	9e 4f       	sbci	r25, 0xFE	; 254
    12a8:	af 4f       	sbci	r26, 0xFF	; 255
    12aa:	bf 4f       	sbci	r27, 0xFF	; 255
    12ac:	80 93 dd 01 	sts	0x01DD, r24
    12b0:	90 93 de 01 	sts	0x01DE, r25
    12b4:	a0 93 df 01 	sts	0x01DF, r26
    12b8:	b0 93 e0 01 	sts	0x01E0, r27
    12bc:	34 c0       	rjmp	.+104    	; 0x1326 <poll_buttons+0x13c>
	}
	else if(msg_btn == HOLD)
    12be:	80 91 d3 01 	lds	r24, 0x01D3
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	81 f5       	brne	.+96     	; 0x1326 <poll_buttons+0x13c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
    12c6:	8b e8       	ldi	r24, 0x8B	; 139
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	22 e0       	ldi	r18, 0x02	; 2
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	b9 01       	movw	r22, r18
    12d0:	48 e2       	ldi	r20, 0x28	; 40
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
    12d8:	80 91 ff 01 	lds	r24, 0x01FF
    12dc:	90 91 00 02 	lds	r25, 0x0200
    12e0:	2b e8       	ldi	r18, 0x8B	; 139
    12e2:	31 e0       	ldi	r19, 0x01	; 1
    12e4:	b9 01       	movw	r22, r18
    12e6:	0e 94 87 1c 	call	0x390e	; 0x390e <strcpy>
		cur_state = IDLE;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 d6 01 	sts	0x01D6, r24
		prev_mode = cur_mode;
    12f0:	80 91 b8 01 	lds	r24, 0x01B8
    12f4:	80 93 ce 01 	sts	0x01CE, r24
		cur_mode = PLAYBACK;
    12f8:	86 e0       	ldi	r24, 0x06	; 6
    12fa:	80 93 b8 01 	sts	0x01B8, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    12fe:	80 91 7e 01 	lds	r24, 0x017E
    1302:	90 91 7f 01 	lds	r25, 0x017F
    1306:	a0 91 80 01 	lds	r26, 0x0180
    130a:	b0 91 81 01 	lds	r27, 0x0181
    130e:	84 5d       	subi	r24, 0xD4	; 212
    1310:	9e 4f       	sbci	r25, 0xFE	; 254
    1312:	af 4f       	sbci	r26, 0xFF	; 255
    1314:	bf 4f       	sbci	r27, 0xFF	; 255
    1316:	80 93 dd 01 	sts	0x01DD, r24
    131a:	90 93 de 01 	sts	0x01DE, r25
    131e:	a0 93 df 01 	sts	0x01DF, r26
    1322:	b0 93 e0 01 	sts	0x01E0, r27
	}

	if(enc_btn == PRESS)
    1326:	80 91 e3 01 	lds	r24, 0x01E3
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	09 f0       	breq	.+2      	; 0x1330 <poll_buttons+0x146>
    132e:	77 c0       	rjmp	.+238    	; 0x141e <poll_buttons+0x234>
	{
		// If we are in normal tuning mode, pressing the tune knob toggles tuning rates
		if(inc_tune_state == NONE)
    1330:	80 91 e2 01 	lds	r24, 0x01E2
    1334:	88 23       	and	r24, r24
    1336:	09 f0       	breq	.+2      	; 0x133a <poll_buttons+0x150>
    1338:	59 c0       	rjmp	.+178    	; 0x13ec <poll_buttons+0x202>
		{
			if(tune_rate == FAST)
    133a:	80 91 06 01 	lds	r24, 0x0106
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	51 f5       	brne	.+84     	; 0x1396 <poll_buttons+0x1ac>
			{
				tune_rate = SLOW;
    1342:	10 92 06 01 	sts	0x0106, r1
				tune_step = DDS_20HZ;
    1346:	84 e3       	ldi	r24, 0x34	; 52
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	90 93 08 01 	sts	0x0108, r25
    134e:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 5;
    1352:	85 e0       	ldi	r24, 0x05	; 5
    1354:	80 93 09 01 	sts	0x0109, r24
				sleep_timer = cur_timer + SLEEP_DELAY;
    1358:	80 91 7e 01 	lds	r24, 0x017E
    135c:	90 91 7f 01 	lds	r25, 0x017F
    1360:	a0 91 80 01 	lds	r26, 0x0180
    1364:	b0 91 81 01 	lds	r27, 0x0181
    1368:	84 5d       	subi	r24, 0xD4	; 212
    136a:	9e 4f       	sbci	r25, 0xFE	; 254
    136c:	af 4f       	sbci	r26, 0xFF	; 255
    136e:	bf 4f       	sbci	r27, 0xFF	; 255
    1370:	80 93 dd 01 	sts	0x01DD, r24
    1374:	90 93 de 01 	sts	0x01DE, r25
    1378:	a0 93 df 01 	sts	0x01DF, r26
    137c:	b0 93 e0 01 	sts	0x01E0, r27
				debounce(TRUE);
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				announce("S", ST_LOW, 25);
    1386:	80 e3       	ldi	r24, 0x30	; 48
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	60 e9       	ldi	r22, 0x90	; 144
    138c:	71 e0       	ldi	r23, 0x01	; 1
    138e:	49 e1       	ldi	r20, 0x19	; 25
    1390:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    1394:	ab c1       	rjmp	.+854    	; 0x16ec <poll_buttons+0x502>
			}
			else
			{
				tune_rate = FAST;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 93 06 01 	sts	0x0106, r24
				tune_step = DDS_100HZ;
    139c:	8c e0       	ldi	r24, 0x0C	; 12
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	90 93 08 01 	sts	0x0108, r25
    13a4:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 25;
    13a8:	89 e1       	ldi	r24, 0x19	; 25
    13aa:	80 93 09 01 	sts	0x0109, r24
				sleep_timer = cur_timer + SLEEP_DELAY;
    13ae:	80 91 7e 01 	lds	r24, 0x017E
    13b2:	90 91 7f 01 	lds	r25, 0x017F
    13b6:	a0 91 80 01 	lds	r26, 0x0180
    13ba:	b0 91 81 01 	lds	r27, 0x0181
    13be:	84 5d       	subi	r24, 0xD4	; 212
    13c0:	9e 4f       	sbci	r25, 0xFE	; 254
    13c2:	af 4f       	sbci	r26, 0xFF	; 255
    13c4:	bf 4f       	sbci	r27, 0xFF	; 255
    13c6:	80 93 dd 01 	sts	0x01DD, r24
    13ca:	90 93 de 01 	sts	0x01DE, r25
    13ce:	a0 93 df 01 	sts	0x01DF, r26
    13d2:	b0 93 e0 01 	sts	0x01E0, r27
				debounce(TRUE);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				announce("S", ST_HIGH, 25);
    13dc:	80 e3       	ldi	r24, 0x30	; 48
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	64 e8       	ldi	r22, 0x84	; 132
    13e2:	73 e0       	ldi	r23, 0x03	; 3
    13e4:	49 e1       	ldi	r20, 0x19	; 25
    13e6:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    13ea:	80 c1       	rjmp	.+768    	; 0x16ec <poll_buttons+0x502>
			}
		}
		// Otherwise if we are in RIT or XIT, pressing the tune knob toggles between the two VFOs
		else
		{
			if(tune_reg == REG_0)
    13ec:	80 91 e1 01 	lds	r24, 0x01E1
    13f0:	88 23       	and	r24, r24
    13f2:	59 f4       	brne	.+22     	; 0x140a <poll_buttons+0x220>
			{
				tune_reg = REG_1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 e1 01 	sts	0x01E1, r24
				announce("T", ST_LOW, 25);
    13fa:	82 e3       	ldi	r24, 0x32	; 50
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	60 e9       	ldi	r22, 0x90	; 144
    1400:	71 e0       	ldi	r23, 0x01	; 1
    1402:	49 e1       	ldi	r20, 0x19	; 25
    1404:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    1408:	71 c1       	rjmp	.+738    	; 0x16ec <poll_buttons+0x502>
			}
			else
			{
				tune_reg = REG_0;
    140a:	10 92 e1 01 	sts	0x01E1, r1
				announce("R", ST_LOW, 25);
    140e:	84 e3       	ldi	r24, 0x34	; 52
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	60 e9       	ldi	r22, 0x90	; 144
    1414:	71 e0       	ldi	r23, 0x01	; 1
    1416:	49 e1       	ldi	r20, 0x19	; 25
    1418:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    141c:	67 c1       	rjmp	.+718    	; 0x16ec <poll_buttons+0x502>
			}
		}
	}
	else if(enc_btn == HOLD)
    141e:	80 91 e3 01 	lds	r24, 0x01E3
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	09 f0       	breq	.+2      	; 0x1428 <poll_buttons+0x23e>
    1426:	62 c1       	rjmp	.+708    	; 0x16ec <poll_buttons+0x502>
	{
		// Rotate through the 3 states
		inc_tune_state++;
    1428:	80 91 e2 01 	lds	r24, 0x01E2
    142c:	8f 5f       	subi	r24, 0xFF	; 255
    142e:	80 93 e2 01 	sts	0x01E2, r24
		if(inc_tune_state > 2)
    1432:	80 91 e2 01 	lds	r24, 0x01E2
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	10 f0       	brcs	.+4      	; 0x143e <poll_buttons+0x254>
			inc_tune_state = NONE;
    143a:	10 92 e2 01 	sts	0x01E2, r1

		switch(inc_tune_state)
    143e:	80 91 e2 01 	lds	r24, 0x01E2
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	29 f0       	breq	.+10     	; 0x1456 <poll_buttons+0x26c>
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	91 05       	cpc	r25, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <poll_buttons+0x26a>
    1452:	6a c0       	rjmp	.+212    	; 0x1528 <poll_buttons+0x33e>
    1454:	d8 c0       	rjmp	.+432    	; 0x1606 <poll_buttons+0x41c>
		{
			case RIT:
				RIT_LED_DDR |= _BV(RIT_LED);
    1456:	87 e2       	ldi	r24, 0x27	; 39
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	27 e2       	ldi	r18, 0x27	; 39
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	f9 01       	movw	r30, r18
    1460:	20 81       	ld	r18, Z
    1462:	22 60       	ori	r18, 0x02	; 2
    1464:	fc 01       	movw	r30, r24
    1466:	20 83       	st	Z, r18
				//RIT_LED_PORT |= _BV(RIT_LED);
				tune_rate = SLOW;
    1468:	10 92 06 01 	sts	0x0106, r1
				tune_step = DDS_20HZ;
    146c:	84 e3       	ldi	r24, 0x34	; 52
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	90 93 08 01 	sts	0x0108, r25
    1474:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 5;
    1478:	85 e0       	ldi	r24, 0x05	; 5
    147a:	80 93 09 01 	sts	0x0109, r24
				dds_it_freq_word = dds_freq_word;
    147e:	80 91 c2 01 	lds	r24, 0x01C2
    1482:	90 91 c3 01 	lds	r25, 0x01C3
    1486:	a0 91 c4 01 	lds	r26, 0x01C4
    148a:	b0 91 c5 01 	lds	r27, 0x01C5
    148e:	80 93 f7 01 	sts	0x01F7, r24
    1492:	90 93 f8 01 	sts	0x01F8, r25
    1496:	a0 93 f9 01 	sts	0x01F9, r26
    149a:	b0 93 fa 01 	sts	0x01FA, r27
				tune_dds(dds_it_freq_word, REG_0, FALSE);
    149e:	80 91 f7 01 	lds	r24, 0x01F7
    14a2:	90 91 f8 01 	lds	r25, 0x01F8
    14a6:	a0 91 f9 01 	lds	r26, 0x01F9
    14aa:	b0 91 fa 01 	lds	r27, 0x01FA
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
				tune_dds(dds_it_freq_word, REG_1, FALSE);
    14ba:	80 91 f7 01 	lds	r24, 0x01F7
    14be:	90 91 f8 01 	lds	r25, 0x01F8
    14c2:	a0 91 f9 01 	lds	r26, 0x01F9
    14c6:	b0 91 fa 01 	lds	r27, 0x01FA
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	41 e0       	ldi	r20, 0x01	; 1
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
				tune_reg = REG_0;
    14d6:	10 92 e1 01 	sts	0x01E1, r1
				set_dds_freq_reg(tune_reg);
    14da:	80 91 e1 01 	lds	r24, 0x01E1
    14de:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <set_dds_freq_reg>
				it_delta = 0;
    14e2:	10 92 d9 01 	sts	0x01D9, r1
    14e6:	10 92 d8 01 	sts	0x01D8, r1
				debounce(TRUE);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    14f0:	80 91 7e 01 	lds	r24, 0x017E
    14f4:	90 91 7f 01 	lds	r25, 0x017F
    14f8:	a0 91 80 01 	lds	r26, 0x0180
    14fc:	b0 91 81 01 	lds	r27, 0x0181
    1500:	84 5d       	subi	r24, 0xD4	; 212
    1502:	9e 4f       	sbci	r25, 0xFE	; 254
    1504:	af 4f       	sbci	r26, 0xFF	; 255
    1506:	bf 4f       	sbci	r27, 0xFF	; 255
    1508:	80 93 dd 01 	sts	0x01DD, r24
    150c:	90 93 de 01 	sts	0x01DE, r25
    1510:	a0 93 df 01 	sts	0x01DF, r26
    1514:	b0 93 e0 01 	sts	0x01E0, r27
				announce("R", ST_HIGH, 25);
    1518:	84 e3       	ldi	r24, 0x34	; 52
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	64 e8       	ldi	r22, 0x84	; 132
    151e:	73 e0       	ldi	r23, 0x03	; 3
    1520:	49 e1       	ldi	r20, 0x19	; 25
    1522:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
				break;
    1526:	e2 c0       	rjmp	.+452    	; 0x16ec <poll_buttons+0x502>

			case XIT:
				RIT_LED_DDR |= _BV(RIT_LED);
    1528:	87 e2       	ldi	r24, 0x27	; 39
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	27 e2       	ldi	r18, 0x27	; 39
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	f9 01       	movw	r30, r18
    1532:	20 81       	ld	r18, Z
    1534:	22 60       	ori	r18, 0x02	; 2
    1536:	fc 01       	movw	r30, r24
    1538:	20 83       	st	Z, r18
				//RIT_LED_PORT |= _BV(RIT_LED);
				led_toggle = cur_timer + XIT_BLINK;
    153a:	80 91 7e 01 	lds	r24, 0x017E
    153e:	90 91 7f 01 	lds	r25, 0x017F
    1542:	a0 91 80 01 	lds	r26, 0x0180
    1546:	b0 91 81 01 	lds	r27, 0x0181
    154a:	8c 50       	subi	r24, 0x0C	; 12
    154c:	9e 4f       	sbci	r25, 0xFE	; 254
    154e:	af 4f       	sbci	r26, 0xFF	; 255
    1550:	bf 4f       	sbci	r27, 0xFF	; 255
    1552:	80 93 ed 01 	sts	0x01ED, r24
    1556:	90 93 ee 01 	sts	0x01EE, r25
    155a:	a0 93 ef 01 	sts	0x01EF, r26
    155e:	b0 93 f0 01 	sts	0x01F0, r27
				tune_rate = FAST;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 93 06 01 	sts	0x0106, r24
				tune_step = DDS_100HZ;
    1568:	8c e0       	ldi	r24, 0x0C	; 12
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	90 93 08 01 	sts	0x0108, r25
    1570:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 25;
    1574:	89 e1       	ldi	r24, 0x19	; 25
    1576:	80 93 09 01 	sts	0x0109, r24
				tune_dds(dds_it_freq_word, REG_0, FALSE);
    157a:	80 91 f7 01 	lds	r24, 0x01F7
    157e:	90 91 f8 01 	lds	r25, 0x01F8
    1582:	a0 91 f9 01 	lds	r26, 0x01F9
    1586:	b0 91 fa 01 	lds	r27, 0x01FA
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
				tune_dds(dds_it_freq_word, REG_1, FALSE);
    1596:	80 91 f7 01 	lds	r24, 0x01F7
    159a:	90 91 f8 01 	lds	r25, 0x01F8
    159e:	a0 91 f9 01 	lds	r26, 0x01F9
    15a2:	b0 91 fa 01 	lds	r27, 0x01FA
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	41 e0       	ldi	r20, 0x01	; 1
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
				tune_reg = REG_1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 93 e1 01 	sts	0x01E1, r24
				set_dds_freq_reg(tune_reg);
    15b8:	80 91 e1 01 	lds	r24, 0x01E1
    15bc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <set_dds_freq_reg>
				it_delta = 0;
    15c0:	10 92 d9 01 	sts	0x01D9, r1
    15c4:	10 92 d8 01 	sts	0x01D8, r1
				debounce(TRUE);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    15ce:	80 91 7e 01 	lds	r24, 0x017E
    15d2:	90 91 7f 01 	lds	r25, 0x017F
    15d6:	a0 91 80 01 	lds	r26, 0x0180
    15da:	b0 91 81 01 	lds	r27, 0x0181
    15de:	84 5d       	subi	r24, 0xD4	; 212
    15e0:	9e 4f       	sbci	r25, 0xFE	; 254
    15e2:	af 4f       	sbci	r26, 0xFF	; 255
    15e4:	bf 4f       	sbci	r27, 0xFF	; 255
    15e6:	80 93 dd 01 	sts	0x01DD, r24
    15ea:	90 93 de 01 	sts	0x01DE, r25
    15ee:	a0 93 df 01 	sts	0x01DF, r26
    15f2:	b0 93 e0 01 	sts	0x01E0, r27
				announce("X", ST_HIGH, 25);
    15f6:	86 e3       	ldi	r24, 0x36	; 54
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	64 e8       	ldi	r22, 0x84	; 132
    15fc:	73 e0       	ldi	r23, 0x03	; 3
    15fe:	49 e1       	ldi	r20, 0x19	; 25
    1600:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
				break;
    1604:	73 c0       	rjmp	.+230    	; 0x16ec <poll_buttons+0x502>

			case NONE:
			default:
				RIT_LED_DDR &= ~(_BV(RIT_LED));
    1606:	87 e2       	ldi	r24, 0x27	; 39
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	27 e2       	ldi	r18, 0x27	; 39
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	f9 01       	movw	r30, r18
    1610:	20 81       	ld	r18, Z
    1612:	2d 7f       	andi	r18, 0xFD	; 253
    1614:	fc 01       	movw	r30, r24
    1616:	20 83       	st	Z, r18
				RIT_LED_PORT &= ~(_BV(RIT_LED));
    1618:	88 e2       	ldi	r24, 0x28	; 40
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	28 e2       	ldi	r18, 0x28	; 40
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	f9 01       	movw	r30, r18
    1622:	20 81       	ld	r18, Z
    1624:	2d 7f       	andi	r18, 0xFD	; 253
    1626:	fc 01       	movw	r30, r24
    1628:	20 83       	st	Z, r18
				tune_rate = FAST;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 06 01 	sts	0x0106, r24
				tune_step = DDS_100HZ;
    1630:	8c e0       	ldi	r24, 0x0C	; 12
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	90 93 08 01 	sts	0x0108, r25
    1638:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 25;
    163c:	89 e1       	ldi	r24, 0x19	; 25
    163e:	80 93 09 01 	sts	0x0109, r24
				dds_freq_word = dds_it_freq_word;
    1642:	80 91 f7 01 	lds	r24, 0x01F7
    1646:	90 91 f8 01 	lds	r25, 0x01F8
    164a:	a0 91 f9 01 	lds	r26, 0x01F9
    164e:	b0 91 fa 01 	lds	r27, 0x01FA
    1652:	80 93 c2 01 	sts	0x01C2, r24
    1656:	90 93 c3 01 	sts	0x01C3, r25
    165a:	a0 93 c4 01 	sts	0x01C4, r26
    165e:	b0 93 c5 01 	sts	0x01C5, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    1662:	80 91 c2 01 	lds	r24, 0x01C2
    1666:	90 91 c3 01 	lds	r25, 0x01C3
    166a:	a0 91 c4 01 	lds	r26, 0x01C4
    166e:	b0 91 c5 01 	lds	r27, 0x01C5
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
				tune_dds(dds_freq_word, REG_1, FALSE);
    167e:	80 91 c2 01 	lds	r24, 0x01C2
    1682:	90 91 c3 01 	lds	r25, 0x01C3
    1686:	a0 91 c4 01 	lds	r26, 0x01C4
    168a:	b0 91 c5 01 	lds	r27, 0x01C5
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
				tune_reg = REG_0;
    169a:	10 92 e1 01 	sts	0x01E1, r1
				set_dds_freq_reg(tune_reg);
    169e:	80 91 e1 01 	lds	r24, 0x01E1
    16a2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <set_dds_freq_reg>
				it_delta = 0;
    16a6:	10 92 d9 01 	sts	0x01D9, r1
    16aa:	10 92 d8 01 	sts	0x01D8, r1
				debounce(TRUE);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    16b4:	80 91 7e 01 	lds	r24, 0x017E
    16b8:	90 91 7f 01 	lds	r25, 0x017F
    16bc:	a0 91 80 01 	lds	r26, 0x0180
    16c0:	b0 91 81 01 	lds	r27, 0x0181
    16c4:	84 5d       	subi	r24, 0xD4	; 212
    16c6:	9e 4f       	sbci	r25, 0xFE	; 254
    16c8:	af 4f       	sbci	r26, 0xFF	; 255
    16ca:	bf 4f       	sbci	r27, 0xFF	; 255
    16cc:	80 93 dd 01 	sts	0x01DD, r24
    16d0:	90 93 de 01 	sts	0x01DE, r25
    16d4:	a0 93 df 01 	sts	0x01DF, r26
    16d8:	b0 93 e0 01 	sts	0x01E0, r27
				announce("O", ST_HIGH, 25);
    16dc:	88 e3       	ldi	r24, 0x38	; 56
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	64 e8       	ldi	r22, 0x84	; 132
    16e2:	73 e0       	ldi	r23, 0x03	; 3
    16e4:	49 e1       	ldi	r20, 0x19	; 25
    16e6:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
				break;
    16ea:	00 00       	nop
			sleep_timer = cur_timer + SLEEP_DELAY;
		} */
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    16ec:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    16ee:	80 91 7d 01 	lds	r24, 0x017D
    16f2:	88 23       	and	r24, r24
    16f4:	19 f0       	breq	.+6      	; 0x16fc <poll_buttons+0x512>
		cur_enc_state += 0x02;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	8e 5f       	subi	r24, 0xFE	; 254
    16fa:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    16fc:	80 91 05 02 	lds	r24, 0x0205
    1700:	88 23       	and	r24, r24
    1702:	19 f0       	breq	.+6      	; 0x170a <poll_buttons+0x520>
		cur_enc_state += 0x01;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    170a:	80 91 64 01 	lds	r24, 0x0164
    170e:	99 81       	ldd	r25, Y+1	; 0x01
    1710:	98 17       	cp	r25, r24
    1712:	09 f4       	brne	.+2      	; 0x1716 <poll_buttons+0x52c>
    1714:	56 c1       	rjmp	.+684    	; 0x19c2 <poll_buttons+0x7d8>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    1716:	80 91 64 01 	lds	r24, 0x0164
    171a:	86 95       	lsr	r24
    171c:	81 70       	andi	r24, 0x01	; 1
    171e:	80 93 64 01 	sts	0x0164, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1722:	80 91 7e 01 	lds	r24, 0x017E
    1726:	90 91 7f 01 	lds	r25, 0x017F
    172a:	a0 91 80 01 	lds	r26, 0x0180
    172e:	b0 91 81 01 	lds	r27, 0x0181
    1732:	84 5d       	subi	r24, 0xD4	; 212
    1734:	9e 4f       	sbci	r25, 0xFE	; 254
    1736:	af 4f       	sbci	r26, 0xFF	; 255
    1738:	bf 4f       	sbci	r27, 0xFF	; 255
    173a:	80 93 dd 01 	sts	0x01DD, r24
    173e:	90 93 de 01 	sts	0x01DE, r25
    1742:	a0 93 df 01 	sts	0x01DF, r26
    1746:	b0 93 e0 01 	sts	0x01E0, r27

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    174a:	80 91 64 01 	lds	r24, 0x0164
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	81 70       	andi	r24, 0x01	; 1
    175a:	90 70       	andi	r25, 0x00	; 0
    175c:	82 27       	eor	r24, r18
    175e:	93 27       	eor	r25, r19
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	91 05       	cpc	r25, r1
    1764:	09 f0       	breq	.+2      	; 0x1768 <poll_buttons+0x57e>
    1766:	9c c0       	rjmp	.+312    	; 0x18a0 <poll_buttons+0x6b6>
		{
			// Don't allow tuning if we are on the locked VFO
			if((inc_tune_state == RIT && tune_reg == REG_0) || (inc_tune_state == XIT && tune_reg == REG_1) || (inc_tune_state == NONE))
    1768:	80 91 e2 01 	lds	r24, 0x01E2
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	21 f4       	brne	.+8      	; 0x1778 <poll_buttons+0x58e>
    1770:	80 91 e1 01 	lds	r24, 0x01E1
    1774:	88 23       	and	r24, r24
    1776:	69 f0       	breq	.+26     	; 0x1792 <poll_buttons+0x5a8>
    1778:	80 91 e2 01 	lds	r24, 0x01E2
    177c:	82 30       	cpi	r24, 0x02	; 2
    177e:	21 f4       	brne	.+8      	; 0x1788 <poll_buttons+0x59e>
    1780:	80 91 e1 01 	lds	r24, 0x01E1
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	29 f0       	breq	.+10     	; 0x1792 <poll_buttons+0x5a8>
    1788:	80 91 e2 01 	lds	r24, 0x01E2
    178c:	88 23       	and	r24, r24
    178e:	09 f0       	breq	.+2      	; 0x1792 <poll_buttons+0x5a8>
    1790:	18 c1       	rjmp	.+560    	; 0x19c2 <poll_buttons+0x7d8>
			{

				if(tune_freq > LOWER_FREQ_LIMIT)
    1792:	80 91 f2 01 	lds	r24, 0x01F2
    1796:	90 91 f3 01 	lds	r25, 0x01F3
    179a:	a0 91 f4 01 	lds	r26, 0x01F4
    179e:	b0 91 f5 01 	lds	r27, 0x01F5
    17a2:	81 38       	cpi	r24, 0x81	; 129
    17a4:	ff e9       	ldi	r31, 0x9F	; 159
    17a6:	9f 07       	cpc	r25, r31
    17a8:	f5 ed       	ldi	r31, 0xD5	; 213
    17aa:	af 07       	cpc	r26, r31
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	bf 07       	cpc	r27, r31
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <poll_buttons+0x5ca>
    17b2:	6b c0       	rjmp	.+214    	; 0x188a <poll_buttons+0x6a0>
				{
					dds_freq_word -= tune_step;
    17b4:	20 91 c2 01 	lds	r18, 0x01C2
    17b8:	30 91 c3 01 	lds	r19, 0x01C3
    17bc:	40 91 c4 01 	lds	r20, 0x01C4
    17c0:	50 91 c5 01 	lds	r21, 0x01C5
    17c4:	80 91 07 01 	lds	r24, 0x0107
    17c8:	90 91 08 01 	lds	r25, 0x0108
    17cc:	cc 01       	movw	r24, r24
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	79 01       	movw	r14, r18
    17d4:	8a 01       	movw	r16, r20
    17d6:	e8 1a       	sub	r14, r24
    17d8:	f9 0a       	sbc	r15, r25
    17da:	0a 0b       	sbc	r16, r26
    17dc:	1b 0b       	sbc	r17, r27
    17de:	d8 01       	movw	r26, r16
    17e0:	c7 01       	movw	r24, r14
    17e2:	80 93 c2 01 	sts	0x01C2, r24
    17e6:	90 93 c3 01 	sts	0x01C3, r25
    17ea:	a0 93 c4 01 	sts	0x01C4, r26
    17ee:	b0 93 c5 01 	sts	0x01C5, r27
					if(inc_tune_state == XIT || inc_tune_state == RIT)
    17f2:	80 91 e2 01 	lds	r24, 0x01E2
    17f6:	82 30       	cpi	r24, 0x02	; 2
    17f8:	21 f0       	breq	.+8      	; 0x1802 <poll_buttons+0x618>
    17fa:	80 91 e2 01 	lds	r24, 0x01E2
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	89 f4       	brne	.+34     	; 0x1824 <poll_buttons+0x63a>
						it_delta -= tune_freq_step;
    1802:	20 91 d8 01 	lds	r18, 0x01D8
    1806:	30 91 d9 01 	lds	r19, 0x01D9
    180a:	80 91 09 01 	lds	r24, 0x0109
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	89 01       	movw	r16, r18
    1814:	08 1b       	sub	r16, r24
    1816:	19 0b       	sbc	r17, r25
    1818:	c8 01       	movw	r24, r16
    181a:	90 93 d9 01 	sts	0x01D9, r25
    181e:	80 93 d8 01 	sts	0x01D8, r24
    1822:	1e c0       	rjmp	.+60     	; 0x1860 <poll_buttons+0x676>
					else
						tune_freq -= tune_freq_step;
    1824:	20 91 f2 01 	lds	r18, 0x01F2
    1828:	30 91 f3 01 	lds	r19, 0x01F3
    182c:	40 91 f4 01 	lds	r20, 0x01F4
    1830:	50 91 f5 01 	lds	r21, 0x01F5
    1834:	80 91 09 01 	lds	r24, 0x0109
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	79 01       	movw	r14, r18
    1842:	8a 01       	movw	r16, r20
    1844:	e8 1a       	sub	r14, r24
    1846:	f9 0a       	sbc	r15, r25
    1848:	0a 0b       	sbc	r16, r26
    184a:	1b 0b       	sbc	r17, r27
    184c:	d8 01       	movw	r26, r16
    184e:	c7 01       	movw	r24, r14
    1850:	80 93 f2 01 	sts	0x01F2, r24
    1854:	90 93 f3 01 	sts	0x01F3, r25
    1858:	a0 93 f4 01 	sts	0x01F4, r26
    185c:	b0 93 f5 01 	sts	0x01F5, r27
					tune_dds(dds_freq_word, tune_reg, FALSE);
    1860:	80 91 c2 01 	lds	r24, 0x01C2
    1864:	90 91 c3 01 	lds	r25, 0x01C3
    1868:	a0 91 c4 01 	lds	r26, 0x01C4
    186c:	b0 91 c5 01 	lds	r27, 0x01C5
    1870:	20 91 e1 01 	lds	r18, 0x01E1
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	42 2f       	mov	r20, r18
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
					set_dds_freq_reg(tune_reg);
    1880:	80 91 e1 01 	lds	r24, 0x01E1
    1884:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <set_dds_freq_reg>
    1888:	9c c0       	rjmp	.+312    	; 0x19c2 <poll_buttons+0x7d8>
				}
				else
				{
					announce("L", ST_HIGH, 25);
    188a:	8a e3       	ldi	r24, 0x3A	; 58
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	64 e8       	ldi	r22, 0x84	; 132
    1890:	73 e0       	ldi	r23, 0x03	; 3
    1892:	49 e1       	ldi	r20, 0x19	; 25
    1894:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
					debounce(TRUE);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
    189e:	91 c0       	rjmp	.+290    	; 0x19c2 <poll_buttons+0x7d8>
			}
		}
		else
		{
			// Don't allow tuning if we are on the locked VFO
			if((inc_tune_state == RIT && tune_reg == REG_0) || (inc_tune_state == XIT && tune_reg == REG_1) || (inc_tune_state == NONE))
    18a0:	80 91 e2 01 	lds	r24, 0x01E2
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <poll_buttons+0x6c6>
    18a8:	80 91 e1 01 	lds	r24, 0x01E1
    18ac:	88 23       	and	r24, r24
    18ae:	69 f0       	breq	.+26     	; 0x18ca <poll_buttons+0x6e0>
    18b0:	80 91 e2 01 	lds	r24, 0x01E2
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	21 f4       	brne	.+8      	; 0x18c0 <poll_buttons+0x6d6>
    18b8:	80 91 e1 01 	lds	r24, 0x01E1
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	29 f0       	breq	.+10     	; 0x18ca <poll_buttons+0x6e0>
    18c0:	80 91 e2 01 	lds	r24, 0x01E2
    18c4:	88 23       	and	r24, r24
    18c6:	09 f0       	breq	.+2      	; 0x18ca <poll_buttons+0x6e0>
    18c8:	7c c0       	rjmp	.+248    	; 0x19c2 <poll_buttons+0x7d8>
			{

				// Tune up as long as we are not at upper limit
				if(tune_freq < UPPER_FREQ_LIMIT)
    18ca:	80 91 f2 01 	lds	r24, 0x01F2
    18ce:	90 91 f3 01 	lds	r25, 0x01F3
    18d2:	a0 91 f4 01 	lds	r26, 0x01F4
    18d6:	b0 91 f5 01 	lds	r27, 0x01F5
    18da:	80 3b       	cpi	r24, 0xB0	; 176
    18dc:	06 ef       	ldi	r16, 0xF6	; 246
    18de:	90 07       	cpc	r25, r16
    18e0:	0a ed       	ldi	r16, 0xDA	; 218
    18e2:	a0 07       	cpc	r26, r16
    18e4:	00 e0       	ldi	r16, 0x00	; 0
    18e6:	b0 07       	cpc	r27, r16
    18e8:	08 f0       	brcs	.+2      	; 0x18ec <poll_buttons+0x702>
    18ea:	61 c0       	rjmp	.+194    	; 0x19ae <poll_buttons+0x7c4>
				{
					dds_freq_word += tune_step;
    18ec:	80 91 07 01 	lds	r24, 0x0107
    18f0:	90 91 08 01 	lds	r25, 0x0108
    18f4:	9c 01       	movw	r18, r24
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	80 91 c2 01 	lds	r24, 0x01C2
    18fe:	90 91 c3 01 	lds	r25, 0x01C3
    1902:	a0 91 c4 01 	lds	r26, 0x01C4
    1906:	b0 91 c5 01 	lds	r27, 0x01C5
    190a:	82 0f       	add	r24, r18
    190c:	93 1f       	adc	r25, r19
    190e:	a4 1f       	adc	r26, r20
    1910:	b5 1f       	adc	r27, r21
    1912:	80 93 c2 01 	sts	0x01C2, r24
    1916:	90 93 c3 01 	sts	0x01C3, r25
    191a:	a0 93 c4 01 	sts	0x01C4, r26
    191e:	b0 93 c5 01 	sts	0x01C5, r27
					if(inc_tune_state == XIT || inc_tune_state == RIT)
    1922:	80 91 e2 01 	lds	r24, 0x01E2
    1926:	82 30       	cpi	r24, 0x02	; 2
    1928:	21 f0       	breq	.+8      	; 0x1932 <poll_buttons+0x748>
    192a:	80 91 e2 01 	lds	r24, 0x01E2
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	79 f4       	brne	.+30     	; 0x1950 <poll_buttons+0x766>
						it_delta += tune_freq_step;
    1932:	80 91 09 01 	lds	r24, 0x0109
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	80 91 d8 01 	lds	r24, 0x01D8
    193e:	90 91 d9 01 	lds	r25, 0x01D9
    1942:	82 0f       	add	r24, r18
    1944:	93 1f       	adc	r25, r19
    1946:	90 93 d9 01 	sts	0x01D9, r25
    194a:	80 93 d8 01 	sts	0x01D8, r24
    194e:	1a c0       	rjmp	.+52     	; 0x1984 <poll_buttons+0x79a>
					else
						tune_freq += tune_freq_step;
    1950:	80 91 09 01 	lds	r24, 0x0109
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	80 91 f2 01 	lds	r24, 0x01F2
    1960:	90 91 f3 01 	lds	r25, 0x01F3
    1964:	a0 91 f4 01 	lds	r26, 0x01F4
    1968:	b0 91 f5 01 	lds	r27, 0x01F5
    196c:	82 0f       	add	r24, r18
    196e:	93 1f       	adc	r25, r19
    1970:	a4 1f       	adc	r26, r20
    1972:	b5 1f       	adc	r27, r21
    1974:	80 93 f2 01 	sts	0x01F2, r24
    1978:	90 93 f3 01 	sts	0x01F3, r25
    197c:	a0 93 f4 01 	sts	0x01F4, r26
    1980:	b0 93 f5 01 	sts	0x01F5, r27
					tune_dds(dds_freq_word, tune_reg, FALSE);
    1984:	80 91 c2 01 	lds	r24, 0x01C2
    1988:	90 91 c3 01 	lds	r25, 0x01C3
    198c:	a0 91 c4 01 	lds	r26, 0x01C4
    1990:	b0 91 c5 01 	lds	r27, 0x01C5
    1994:	20 91 e1 01 	lds	r18, 0x01E1
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	42 2f       	mov	r20, r18
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <tune_dds>
					set_dds_freq_reg(tune_reg);
    19a4:	80 91 e1 01 	lds	r24, 0x01E1
    19a8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <set_dds_freq_reg>
    19ac:	0a c0       	rjmp	.+20     	; 0x19c2 <poll_buttons+0x7d8>
				}
				else
				{
					announce("U", ST_HIGH, 25);
    19ae:	8c e3       	ldi	r24, 0x3C	; 60
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	64 e8       	ldi	r22, 0x84	; 132
    19b4:	73 e0       	ldi	r23, 0x03	; 3
    19b6:	49 e1       	ldi	r20, 0x19	; 25
    19b8:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
					debounce(TRUE);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
				announce("U", ST_HIGH, 23);
				*/
		}
	}

	prev_enc_state = cur_enc_state;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	80 93 64 01 	sts	0x0164, r24
}
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	08 95       	ret

000019d8 <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg, enum BOOL init)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	2c 97       	sbiw	r28, 0x0c	; 12
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	6f 83       	std	Y+7, r22	; 0x07
    19ee:	78 87       	std	Y+8, r23	; 0x08
    19f0:	89 87       	std	Y+9, r24	; 0x09
    19f2:	9a 87       	std	Y+10, r25	; 0x0a
    19f4:	4b 87       	std	Y+11, r20	; 0x0b
    19f6:	2c 87       	std	Y+12, r18	; 0x0c
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    19f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	29 f4       	brne	.+10     	; 0x1a08 <tune_dds+0x30>
		freq_reg = 0x8000;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e8       	ldi	r25, 0x80	; 128
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <tune_dds+0x38>
	else
		freq_reg = 0x4000;
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e4       	ldi	r25, 0x40	; 64
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    1a10:	8f 81       	ldd	r24, Y+7	; 0x07
    1a12:	98 85       	ldd	r25, Y+8	; 0x08
    1a14:	9c 01       	movw	r18, r24
    1a16:	3f 73       	andi	r19, 0x3F	; 63
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    1a24:	8f 81       	ldd	r24, Y+7	; 0x07
    1a26:	98 85       	ldd	r25, Y+8	; 0x08
    1a28:	a9 85       	ldd	r26, Y+9	; 0x09
    1a2a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1a2c:	07 2e       	mov	r0, r23
    1a2e:	7e e0       	ldi	r23, 0x0E	; 14
    1a30:	b6 95       	lsr	r27
    1a32:	a7 95       	ror	r26
    1a34:	97 95       	ror	r25
    1a36:	87 95       	ror	r24
    1a38:	7a 95       	dec	r23
    1a3a:	d1 f7       	brne	.-12     	; 0x1a30 <tune_dds+0x58>
    1a3c:	70 2d       	mov	r23, r0
    1a3e:	9c 01       	movw	r18, r24
    1a40:	3f 73       	andi	r19, 0x3F	; 63
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	82 0f       	add	r24, r18
    1a48:	93 1f       	adc	r25, r19
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05

	if(init == TRUE)
    1a4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	21 f4       	brne	.+8      	; 0x1a5c <tune_dds+0x84>
		send_dds_word(0x2100);
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	91 e2       	ldi	r25, 0x21	; 33
    1a58:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <send_dds_word>

	if(init == TRUE)
    1a6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	41 f4       	brne	.+16     	; 0x1a82 <tune_dds+0xaa>
	{
		// Send phase
		send_dds_word(0xC000);
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 ec       	ldi	r25, 0xC0	; 192
    1a76:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <send_dds_word>

		// Exit reset
		send_dds_word(0x2000);
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e2       	ldi	r25, 0x20	; 32
    1a7e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <send_dds_word>
	}
}
    1a82:	2c 96       	adiw	r28, 0x0c	; 12
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <send_dds_word>:
	send_dds_word(0x2000);
}
*/

void send_dds_word(uint16_t dds_word)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <send_dds_word+0x6>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    1aa2:	85 e2       	ldi	r24, 0x25	; 37
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	25 e2       	ldi	r18, 0x25	; 37
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	f9 01       	movw	r30, r18
    1aac:	20 81       	ld	r18, Z
    1aae:	20 62       	ori	r18, 0x20	; 32
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    1ab4:	85 e2       	ldi	r24, 0x25	; 37
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	25 e2       	ldi	r18, 0x25	; 37
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	f9 01       	movw	r30, r18
    1abe:	20 81       	ld	r18, Z
    1ac0:	2d 7f       	andi	r18, 0xFD	; 253
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    1ac6:	8e e4       	ldi	r24, 0x4E	; 78
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	29 81       	ldd	r18, Y+1	; 0x01
    1acc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ace:	23 2f       	mov	r18, r19
    1ad0:	33 27       	eor	r19, r19
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1ad6:	00 00       	nop
    1ad8:	8d e4       	ldi	r24, 0x4D	; 77
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	fc 01       	movw	r30, r24
    1ade:	80 81       	ld	r24, Z
    1ae0:	88 23       	and	r24, r24
    1ae2:	d4 f7       	brge	.-12     	; 0x1ad8 <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    1ae4:	8e e4       	ldi	r24, 0x4E	; 78
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	29 81       	ldd	r18, Y+1	; 0x01
    1aea:	fc 01       	movw	r30, r24
    1aec:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1aee:	00 00       	nop
    1af0:	8d e4       	ldi	r24, 0x4D	; 77
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	fc 01       	movw	r30, r24
    1af6:	80 81       	ld	r24, Z
    1af8:	88 23       	and	r24, r24
    1afa:	d4 f7       	brge	.-12     	; 0x1af0 <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    1afc:	85 e2       	ldi	r24, 0x25	; 37
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	25 e2       	ldi	r18, 0x25	; 37
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	f9 01       	movw	r30, r18
    1b06:	20 81       	ld	r18, Z
    1b08:	22 60       	ori	r18, 0x02	; 2
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	20 83       	st	Z, r18
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	98 e2       	ldi	r25, 0x28	; 40
    1b2e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <send_dds_word>
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e2       	ldi	r25, 0x20	; 32
    1b38:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <send_dds_word>
}
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <set_st_freq+0x6>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <set_st_freq+0x8>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	69 83       	std	Y+1, r22	; 0x01
    1b52:	7a 83       	std	Y+2, r23	; 0x02
    1b54:	8b 83       	std	Y+3, r24	; 0x03
    1b56:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	ab 81       	ldd	r26, Y+3	; 0x03
    1b5e:	bc 81       	ldd	r27, Y+4	; 0x04
    1b60:	23 e9       	ldi	r18, 0x93	; 147
    1b62:	38 e1       	ldi	r19, 0x18	; 24
    1b64:	44 e0       	ldi	r20, 0x04	; 4
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__mulsi3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	80 93 c6 01 	sts	0x01C6, r24
    1b78:	90 93 c7 01 	sts	0x01C7, r25
    1b7c:	a0 93 c8 01 	sts	0x01C8, r26
    1b80:	b0 93 c9 01 	sts	0x01C9, r27
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <main>:

int main(void)
{
    1b92:	1f 93       	push	r17
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	2c 97       	sbiw	r28, 0x0c	; 12
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    1ba8:	89 e2       	ldi	r24, 0x29	; 41
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 44 1b 	call	0x3688	; 0x3688 <malloc>
    1bb0:	90 93 00 02 	sts	0x0200, r25
    1bb4:	80 93 ff 01 	sts	0x01FF, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    1bb8:	80 91 ff 01 	lds	r24, 0x01FF
    1bbc:	90 91 00 02 	lds	r25, 0x0200
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	49 e2       	ldi	r20, 0x29	; 41
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	0e 94 80 1c 	call	0x3900	; 0x3900 <memset>
	cur_char_p = announce_buffer;
    1bcc:	80 91 ff 01 	lds	r24, 0x01FF
    1bd0:	90 91 00 02 	lds	r25, 0x0200
    1bd4:	90 93 55 01 	sts	0x0155, r25
    1bd8:	80 93 54 01 	sts	0x0154, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    1bdc:	89 e2       	ldi	r24, 0x29	; 41
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 44 1b 	call	0x3688	; 0x3688 <malloc>
    1be4:	90 93 57 01 	sts	0x0157, r25
    1be8:	80 93 56 01 	sts	0x0156, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    1bec:	80 91 56 01 	lds	r24, 0x0156
    1bf0:	90 91 57 01 	lds	r25, 0x0157
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	49 e2       	ldi	r20, 0x29	; 41
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	0e 94 80 1c 	call	0x3900	; 0x3900 <memset>

	init();
    1c00:	0e 94 a0 02 	call	0x540	; 0x540 <init>

	announce("CC", st_freq, 15);
    1c04:	20 91 d0 01 	lds	r18, 0x01D0
    1c08:	30 91 d1 01 	lds	r19, 0x01D1
    1c0c:	8e e3       	ldi	r24, 0x3E	; 62
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	b9 01       	movw	r22, r18
    1c12:	4f e0       	ldi	r20, 0x0F	; 15
    1c14:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    1c18:	f8 94       	cli
		cur_timer = timer;
    1c1a:	80 91 84 01 	lds	r24, 0x0184
    1c1e:	90 91 85 01 	lds	r25, 0x0185
    1c22:	a0 91 86 01 	lds	r26, 0x0186
    1c26:	b0 91 87 01 	lds	r27, 0x0187
    1c2a:	80 93 7e 01 	sts	0x017E, r24
    1c2e:	90 93 7f 01 	sts	0x017F, r25
    1c32:	a0 93 80 01 	sts	0x0180, r26
    1c36:	b0 93 81 01 	sts	0x0181, r27
		sei();
    1c3a:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    1c3c:	80 91 b8 01 	lds	r24, 0x01B8
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	91 05       	cpc	r25, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <main+0xba>
    1c4a:	fc c6       	rjmp	.+3576   	; 0x2a44 <main+0xeb2>
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	91 05       	cpc	r25, r1
    1c50:	64 f4       	brge	.+24     	; 0x1c6a <main+0xd8>
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	91 05       	cpc	r25, r1
    1c56:	c9 f0       	breq	.+50     	; 0x1c8a <main+0xf8>
    1c58:	82 30       	cpi	r24, 0x02	; 2
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	0c f0       	brlt	.+2      	; 0x1c60 <main+0xce>
    1c5e:	40 c5       	rjmp	.+2688   	; 0x26e0 <main+0xb4e>
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <main+0xd4>
    1c64:	0e c1       	rjmp	.+540    	; 0x1e82 <main+0x2f0>
    1c66:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <main+0x1a20>
    1c6a:	85 30       	cpi	r24, 0x05	; 5
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <main+0xe2>
    1c70:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <main+0x13b8>
    1c74:	85 30       	cpi	r24, 0x05	; 5
    1c76:	91 05       	cpc	r25, r1
    1c78:	0c f4       	brge	.+2      	; 0x1c7c <main+0xea>
    1c7a:	a3 c7       	rjmp	.+3910   	; 0x2bc2 <main+0x1030>
    1c7c:	86 30       	cpi	r24, 0x06	; 6
    1c7e:	91 05       	cpc	r25, r1
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <main+0xf4>
    1c82:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <main+0x153c>
    1c86:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <main+0x1a20>
		{
		case SK:
			default_mode = SK;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	80 93 83 01 	sts	0x0183, r24
			poll_buttons();
    1c90:	0e 94 f5 08 	call	0x11ea	; 0x11ea <poll_buttons>

			switch(cur_state)
    1c94:	80 91 d6 01 	lds	r24, 0x01D6
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	87 30       	cpi	r24, 0x07	; 7
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <main+0x112>
    1ca2:	43 c0       	rjmp	.+134    	; 0x1d2a <main+0x198>
    1ca4:	8c 30       	cpi	r24, 0x0C	; 12
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <main+0x11a>
    1caa:	a6 c0       	rjmp	.+332    	; 0x1df8 <main+0x266>
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	91 05       	cpc	r25, r1
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <main+0x122>
				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;

			default:
				break;
    1cb2:	e5 c0       	rjmp	.+458    	; 0x1e7e <main+0x2ec>
			poll_buttons();

			switch(cur_state)
			{
			case IDLE:
				key_down = FALSE;
    1cb4:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = FALSE;
    1cb8:	10 92 50 01 	sts	0x0150, r1
				mute_on = FALSE;
    1cbc:	10 92 51 01 	sts	0x0151, r1
					mute_on = FALSE;
				else
					mute_on = TRUE;
					*/

				if(dit_active == TRUE)
    1cc0:	80 91 ec 01 	lds	r24, 0x01EC
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	69 f5       	brne	.+90     	; 0x1d22 <main+0x190>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    1cc8:	80 91 7e 01 	lds	r24, 0x017E
    1ccc:	90 91 7f 01 	lds	r25, 0x017F
    1cd0:	a0 91 80 01 	lds	r26, 0x0180
    1cd4:	b0 91 81 01 	lds	r27, 0x0181
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	a1 1d       	adc	r26, r1
    1cdc:	b1 1d       	adc	r27, r1
    1cde:	80 93 be 01 	sts	0x01BE, r24
    1ce2:	90 93 bf 01 	sts	0x01BF, r25
    1ce6:	a0 93 c0 01 	sts	0x01C0, r26
    1cea:	b0 93 c1 01 	sts	0x01C1, r27
					tx_end = UINT32_MAX;
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	9f ef       	ldi	r25, 0xFF	; 255
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	80 93 01 02 	sts	0x0201, r24
    1cf8:	90 93 02 02 	sts	0x0202, r25
    1cfc:	a0 93 03 02 	sts	0x0203, r26
    1d00:	b0 93 04 02 	sts	0x0204, r27
					cur_state_end = UINT32_MAX;
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	9f ef       	ldi	r25, 0xFF	; 255
    1d08:	dc 01       	movw	r26, r24
    1d0a:	80 93 e4 01 	sts	0x01E4, r24
    1d0e:	90 93 e5 01 	sts	0x01E5, r25
    1d12:	a0 93 e6 01 	sts	0x01E6, r26
    1d16:	b0 93 e7 01 	sts	0x01E7, r27
					cur_state = KEYDOWN;
    1d1a:	87 e0       	ldi	r24, 0x07	; 7
    1d1c:	80 93 d6 01 	sts	0x01D6, r24
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <main+0x196>
				}
				else
				{
					cur_state = IDLE;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	80 93 d6 01 	sts	0x01D6, r24
				}
				break;
    1d28:	aa c0       	rjmp	.+340    	; 0x1e7e <main+0x2ec>

			case KEYDOWN:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1d2a:	80 91 f2 01 	lds	r24, 0x01F2
    1d2e:	90 91 f3 01 	lds	r25, 0x01F3
    1d32:	a0 91 f4 01 	lds	r26, 0x01F4
    1d36:	b0 91 f5 01 	lds	r27, 0x01F5
    1d3a:	81 3b       	cpi	r24, 0xB1	; 177
    1d3c:	26 ef       	ldi	r18, 0xF6	; 246
    1d3e:	92 07       	cpc	r25, r18
    1d40:	2a ed       	ldi	r18, 0xDA	; 218
    1d42:	a2 07       	cpc	r26, r18
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	b2 07       	cpc	r27, r18
    1d48:	80 f4       	brcc	.+32     	; 0x1d6a <main+0x1d8>
    1d4a:	80 91 f2 01 	lds	r24, 0x01F2
    1d4e:	90 91 f3 01 	lds	r25, 0x01F3
    1d52:	a0 91 f4 01 	lds	r26, 0x01F4
    1d56:	b0 91 f5 01 	lds	r27, 0x01F5
    1d5a:	80 38       	cpi	r24, 0x80	; 128
    1d5c:	ef e9       	ldi	r30, 0x9F	; 159
    1d5e:	9e 07       	cpc	r25, r30
    1d60:	e5 ed       	ldi	r30, 0xD5	; 213
    1d62:	ae 07       	cpc	r26, r30
    1d64:	e0 e0       	ldi	r30, 0x00	; 0
    1d66:	be 07       	cpc	r27, r30
    1d68:	38 f4       	brcc	.+14     	; 0x1d78 <main+0x1e6>
				{
					key_down = FALSE;
    1d6a:	10 92 52 01 	sts	0x0152, r1
					sidetone_on = FALSE;
    1d6e:	10 92 50 01 	sts	0x0150, r1
					mute_on = FALSE;
    1d72:	10 92 51 01 	sts	0x0151, r1
    1d76:	09 c0       	rjmp	.+18     	; 0x1d8a <main+0x1f8>
				}
				else
				{
					key_down = TRUE;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	80 93 52 01 	sts	0x0152, r24
					sidetone_on = TRUE;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 50 01 	sts	0x0150, r24
					mute_on = TRUE;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 51 01 	sts	0x0151, r24
				}

				if(dit_active == FALSE)
    1d8a:	80 91 ec 01 	lds	r24, 0x01EC
    1d8e:	88 23       	and	r24, r24
    1d90:	39 f5       	brne	.+78     	; 0x1de0 <main+0x24e>
				{
					cur_state = EXIT;
    1d92:	8c e0       	ldi	r24, 0x0C	; 12
    1d94:	80 93 d6 01 	sts	0x01D6, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    1d98:	80 91 7e 01 	lds	r24, 0x017E
    1d9c:	90 91 7f 01 	lds	r25, 0x017F
    1da0:	a0 91 80 01 	lds	r26, 0x0180
    1da4:	b0 91 81 01 	lds	r27, 0x0181
    1da8:	c2 96       	adiw	r24, 0x32	; 50
    1daa:	a1 1d       	adc	r26, r1
    1dac:	b1 1d       	adc	r27, r1
    1dae:	80 93 e4 01 	sts	0x01E4, r24
    1db2:	90 93 e5 01 	sts	0x01E5, r25
    1db6:	a0 93 e6 01 	sts	0x01E6, r26
    1dba:	b0 93 e7 01 	sts	0x01E7, r27
					tx_end = cur_timer;
    1dbe:	80 91 7e 01 	lds	r24, 0x017E
    1dc2:	90 91 7f 01 	lds	r25, 0x017F
    1dc6:	a0 91 80 01 	lds	r26, 0x0180
    1dca:	b0 91 81 01 	lds	r27, 0x0181
    1dce:	80 93 01 02 	sts	0x0201, r24
    1dd2:	90 93 02 02 	sts	0x0202, r25
    1dd6:	a0 93 03 02 	sts	0x0203, r26
    1dda:	b0 93 04 02 	sts	0x0204, r27
    1dde:	0b c0       	rjmp	.+22     	; 0x1df6 <main+0x264>
				}
				else
					tx_end = UINT32_MAX;
    1de0:	8f ef       	ldi	r24, 0xFF	; 255
    1de2:	9f ef       	ldi	r25, 0xFF	; 255
    1de4:	dc 01       	movw	r26, r24
    1de6:	80 93 01 02 	sts	0x0201, r24
    1dea:	90 93 02 02 	sts	0x0202, r25
    1dee:	a0 93 03 02 	sts	0x0203, r26
    1df2:	b0 93 04 02 	sts	0x0204, r27
				break;
    1df6:	43 c0       	rjmp	.+134    	; 0x1e7e <main+0x2ec>

			case EXIT:
				key_down = FALSE;
    1df8:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = FALSE;
    1dfc:	10 92 50 01 	sts	0x0150, r1

				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1e00:	80 91 f2 01 	lds	r24, 0x01F2
    1e04:	90 91 f3 01 	lds	r25, 0x01F3
    1e08:	a0 91 f4 01 	lds	r26, 0x01F4
    1e0c:	b0 91 f5 01 	lds	r27, 0x01F5
    1e10:	81 3b       	cpi	r24, 0xB1	; 177
    1e12:	f6 ef       	ldi	r31, 0xF6	; 246
    1e14:	9f 07       	cpc	r25, r31
    1e16:	fa ed       	ldi	r31, 0xDA	; 218
    1e18:	af 07       	cpc	r26, r31
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	bf 07       	cpc	r27, r31
    1e1e:	80 f4       	brcc	.+32     	; 0x1e40 <main+0x2ae>
    1e20:	80 91 f2 01 	lds	r24, 0x01F2
    1e24:	90 91 f3 01 	lds	r25, 0x01F3
    1e28:	a0 91 f4 01 	lds	r26, 0x01F4
    1e2c:	b0 91 f5 01 	lds	r27, 0x01F5
    1e30:	80 38       	cpi	r24, 0x80	; 128
    1e32:	2f e9       	ldi	r18, 0x9F	; 159
    1e34:	92 07       	cpc	r25, r18
    1e36:	25 ed       	ldi	r18, 0xD5	; 213
    1e38:	a2 07       	cpc	r26, r18
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	b2 07       	cpc	r27, r18
    1e3e:	18 f4       	brcc	.+6      	; 0x1e46 <main+0x2b4>
					mute_on = FALSE;
    1e40:	10 92 51 01 	sts	0x0151, r1
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <main+0x2ba>
				else
					mute_on = TRUE;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	80 93 51 01 	sts	0x0151, r24

				if(cur_timer >= cur_state_end)
    1e4c:	20 91 7e 01 	lds	r18, 0x017E
    1e50:	30 91 7f 01 	lds	r19, 0x017F
    1e54:	40 91 80 01 	lds	r20, 0x0180
    1e58:	50 91 81 01 	lds	r21, 0x0181
    1e5c:	80 91 e4 01 	lds	r24, 0x01E4
    1e60:	90 91 e5 01 	lds	r25, 0x01E5
    1e64:	a0 91 e6 01 	lds	r26, 0x01E6
    1e68:	b0 91 e7 01 	lds	r27, 0x01E7
    1e6c:	28 17       	cp	r18, r24
    1e6e:	39 07       	cpc	r19, r25
    1e70:	4a 07       	cpc	r20, r26
    1e72:	5b 07       	cpc	r21, r27
    1e74:	18 f0       	brcs	.+6      	; 0x1e7c <main+0x2ea>
					cur_state = IDLE;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	80 93 d6 01 	sts	0x01D6, r24
				break;
    1e7c:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    1e7e:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <main+0x1a22>

		case KEYER:
			default_mode = KEYER;
    1e82:	10 92 83 01 	sts	0x0183, r1
			poll_buttons();
    1e86:	0e 94 f5 08 	call	0x11ea	; 0x11ea <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    1e8a:	80 91 d6 01 	lds	r24, 0x01D6
    1e8e:	88 2f       	mov	r24, r24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	83 30       	cpi	r24, 0x03	; 3
    1e94:	91 05       	cpc	r25, r1
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <main+0x308>
    1e98:	15 c2       	rjmp	.+1066   	; 0x22c4 <main+0x732>
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	44 f4       	brge	.+16     	; 0x1eb0 <main+0x31e>
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	71 f0       	breq	.+28     	; 0x1ec2 <main+0x330>
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <main+0x31c>
    1eac:	75 c1       	rjmp	.+746    	; 0x2198 <main+0x606>
    1eae:	15 c4       	rjmp	.+2090   	; 0x26da <main+0xb48>
    1eb0:	84 30       	cpi	r24, 0x04	; 4
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <main+0x326>
    1eb6:	9c c2       	rjmp	.+1336   	; 0x23f0 <main+0x85e>
    1eb8:	8c 30       	cpi	r24, 0x0C	; 12
    1eba:	91 05       	cpc	r25, r1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <main+0x32e>
    1ebe:	da c3       	rjmp	.+1972   	; 0x2674 <main+0xae2>
    1ec0:	0c c4       	rjmp	.+2072   	; 0x26da <main+0xb48>
			{
			case IDLE:
				key_down = FALSE;
    1ec2:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = FALSE;
    1ec6:	10 92 50 01 	sts	0x0150, r1
				mute_on = FALSE;
    1eca:	10 92 51 01 	sts	0x0151, r1
				mute_end = cur_timer;
    1ece:	80 91 7e 01 	lds	r24, 0x017E
    1ed2:	90 91 7f 01 	lds	r25, 0x017F
    1ed6:	a0 91 80 01 	lds	r26, 0x0180
    1eda:	b0 91 81 01 	lds	r27, 0x0181
    1ede:	80 93 e8 01 	sts	0x01E8, r24
    1ee2:	90 93 e9 01 	sts	0x01E9, r25
    1ee6:	a0 93 ea 01 	sts	0x01EA, r26
    1eea:	b0 93 eb 01 	sts	0x01EB, r27

				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    1eee:	80 91 ec 01 	lds	r24, 0x01EC
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <main+0x366>
    1ef6:	68 c0       	rjmp	.+208    	; 0x1fc8 <main+0x436>
    1ef8:	80 91 d2 01 	lds	r24, 0x01D2
    1efc:	88 23       	and	r24, r24
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <main+0x370>
    1f00:	63 c0       	rjmp	.+198    	; 0x1fc8 <main+0x436>
				{
					prev_state = IDLE;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 88 01 	sts	0x0188, r24
					cur_state = DIT;
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	80 93 d6 01 	sts	0x01D6, r24
					next_state = IDLE;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 bd 01 	sts	0x01BD, r24
					cur_state_end = cur_timer + dit_length;
    1f14:	80 91 89 01 	lds	r24, 0x0189
    1f18:	90 91 8a 01 	lds	r25, 0x018A
    1f1c:	9c 01       	movw	r18, r24
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	80 91 7e 01 	lds	r24, 0x017E
    1f26:	90 91 7f 01 	lds	r25, 0x017F
    1f2a:	a0 91 80 01 	lds	r26, 0x0180
    1f2e:	b0 91 81 01 	lds	r27, 0x0181
    1f32:	82 0f       	add	r24, r18
    1f34:	93 1f       	adc	r25, r19
    1f36:	a4 1f       	adc	r26, r20
    1f38:	b5 1f       	adc	r27, r21
    1f3a:	80 93 e4 01 	sts	0x01E4, r24
    1f3e:	90 93 e5 01 	sts	0x01E5, r25
    1f42:	a0 93 e6 01 	sts	0x01E6, r26
    1f46:	b0 93 e7 01 	sts	0x01E7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1f4a:	80 91 7e 01 	lds	r24, 0x017E
    1f4e:	90 91 7f 01 	lds	r25, 0x017F
    1f52:	a0 91 80 01 	lds	r26, 0x0180
    1f56:	b0 91 81 01 	lds	r27, 0x0181
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	a1 1d       	adc	r26, r1
    1f5e:	b1 1d       	adc	r27, r1
    1f60:	80 93 be 01 	sts	0x01BE, r24
    1f64:	90 93 bf 01 	sts	0x01BF, r25
    1f68:	a0 93 c0 01 	sts	0x01C0, r26
    1f6c:	b0 93 c1 01 	sts	0x01C1, r27
					tx_end = cur_state_end;
    1f70:	80 91 e4 01 	lds	r24, 0x01E4
    1f74:	90 91 e5 01 	lds	r25, 0x01E5
    1f78:	a0 91 e6 01 	lds	r26, 0x01E6
    1f7c:	b0 91 e7 01 	lds	r27, 0x01E7
    1f80:	80 93 01 02 	sts	0x0201, r24
    1f84:	90 93 02 02 	sts	0x0202, r25
    1f88:	a0 93 03 02 	sts	0x0203, r26
    1f8c:	b0 93 04 02 	sts	0x0204, r27
					mute_start = cur_timer;
    1f90:	80 91 7e 01 	lds	r24, 0x017E
    1f94:	90 91 7f 01 	lds	r25, 0x017F
    1f98:	a0 91 80 01 	lds	r26, 0x0180
    1f9c:	b0 91 81 01 	lds	r27, 0x0181
    1fa0:	80 93 fb 01 	sts	0x01FB, r24
    1fa4:	90 93 fc 01 	sts	0x01FC, r25
    1fa8:	a0 93 fd 01 	sts	0x01FD, r26
    1fac:	b0 93 fe 01 	sts	0x01FE, r27
					mute_end = UINT32_MAX;
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	9f ef       	ldi	r25, 0xFF	; 255
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	80 93 e8 01 	sts	0x01E8, r24
    1fba:	90 93 e9 01 	sts	0x01E9, r25
    1fbe:	a0 93 ea 01 	sts	0x01EA, r26
    1fc2:	b0 93 eb 01 	sts	0x01EB, r27
    1fc6:	e7 c0       	rjmp	.+462    	; 0x2196 <main+0x604>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    1fc8:	80 91 d2 01 	lds	r24, 0x01D2
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <main+0x440>
    1fd0:	6d c0       	rjmp	.+218    	; 0x20ac <main+0x51a>
    1fd2:	80 91 ec 01 	lds	r24, 0x01EC
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <main+0x44a>
    1fda:	68 c0       	rjmp	.+208    	; 0x20ac <main+0x51a>
				{
					prev_state = IDLE;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	80 93 88 01 	sts	0x0188, r24
					cur_state = DAH;
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	80 93 d6 01 	sts	0x01D6, r24
					next_state = IDLE;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 bd 01 	sts	0x01BD, r24
					cur_state_end = cur_timer + (dit_length * 3);
    1fee:	20 91 89 01 	lds	r18, 0x0189
    1ff2:	30 91 8a 01 	lds	r19, 0x018A
    1ff6:	c9 01       	movw	r24, r18
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	9c 01       	movw	r18, r24
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	80 91 7e 01 	lds	r24, 0x017E
    200a:	90 91 7f 01 	lds	r25, 0x017F
    200e:	a0 91 80 01 	lds	r26, 0x0180
    2012:	b0 91 81 01 	lds	r27, 0x0181
    2016:	82 0f       	add	r24, r18
    2018:	93 1f       	adc	r25, r19
    201a:	a4 1f       	adc	r26, r20
    201c:	b5 1f       	adc	r27, r21
    201e:	80 93 e4 01 	sts	0x01E4, r24
    2022:	90 93 e5 01 	sts	0x01E5, r25
    2026:	a0 93 e6 01 	sts	0x01E6, r26
    202a:	b0 93 e7 01 	sts	0x01E7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    202e:	80 91 7e 01 	lds	r24, 0x017E
    2032:	90 91 7f 01 	lds	r25, 0x017F
    2036:	a0 91 80 01 	lds	r26, 0x0180
    203a:	b0 91 81 01 	lds	r27, 0x0181
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	a1 1d       	adc	r26, r1
    2042:	b1 1d       	adc	r27, r1
    2044:	80 93 be 01 	sts	0x01BE, r24
    2048:	90 93 bf 01 	sts	0x01BF, r25
    204c:	a0 93 c0 01 	sts	0x01C0, r26
    2050:	b0 93 c1 01 	sts	0x01C1, r27
					tx_end = cur_state_end;
    2054:	80 91 e4 01 	lds	r24, 0x01E4
    2058:	90 91 e5 01 	lds	r25, 0x01E5
    205c:	a0 91 e6 01 	lds	r26, 0x01E6
    2060:	b0 91 e7 01 	lds	r27, 0x01E7
    2064:	80 93 01 02 	sts	0x0201, r24
    2068:	90 93 02 02 	sts	0x0202, r25
    206c:	a0 93 03 02 	sts	0x0203, r26
    2070:	b0 93 04 02 	sts	0x0204, r27
					mute_start = cur_timer;
    2074:	80 91 7e 01 	lds	r24, 0x017E
    2078:	90 91 7f 01 	lds	r25, 0x017F
    207c:	a0 91 80 01 	lds	r26, 0x0180
    2080:	b0 91 81 01 	lds	r27, 0x0181
    2084:	80 93 fb 01 	sts	0x01FB, r24
    2088:	90 93 fc 01 	sts	0x01FC, r25
    208c:	a0 93 fd 01 	sts	0x01FD, r26
    2090:	b0 93 fe 01 	sts	0x01FE, r27
					mute_end = UINT32_MAX;
    2094:	8f ef       	ldi	r24, 0xFF	; 255
    2096:	9f ef       	ldi	r25, 0xFF	; 255
    2098:	dc 01       	movw	r26, r24
    209a:	80 93 e8 01 	sts	0x01E8, r24
    209e:	90 93 e9 01 	sts	0x01E9, r25
    20a2:	a0 93 ea 01 	sts	0x01EA, r26
    20a6:	b0 93 eb 01 	sts	0x01EB, r27
    20aa:	75 c0       	rjmp	.+234    	; 0x2196 <main+0x604>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    20ac:	80 91 ec 01 	lds	r24, 0x01EC
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <main+0x524>
    20b4:	6d c0       	rjmp	.+218    	; 0x2190 <main+0x5fe>
    20b6:	80 91 d2 01 	lds	r24, 0x01D2
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <main+0x52e>
    20be:	68 c0       	rjmp	.+208    	; 0x2190 <main+0x5fe>
    20c0:	80 91 bd 01 	lds	r24, 0x01BD
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	09 f0       	breq	.+2      	; 0x20ca <main+0x538>
    20c8:	63 c0       	rjmp	.+198    	; 0x2190 <main+0x5fe>
				{
					prev_state = IDLE;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	80 93 88 01 	sts	0x0188, r24
					cur_state = DIT;
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	80 93 d6 01 	sts	0x01D6, r24
					next_state = DAH;
    20d6:	83 e0       	ldi	r24, 0x03	; 3
    20d8:	80 93 bd 01 	sts	0x01BD, r24
					cur_state_end = cur_timer + dit_length;
    20dc:	80 91 89 01 	lds	r24, 0x0189
    20e0:	90 91 8a 01 	lds	r25, 0x018A
    20e4:	9c 01       	movw	r18, r24
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	80 91 7e 01 	lds	r24, 0x017E
    20ee:	90 91 7f 01 	lds	r25, 0x017F
    20f2:	a0 91 80 01 	lds	r26, 0x0180
    20f6:	b0 91 81 01 	lds	r27, 0x0181
    20fa:	82 0f       	add	r24, r18
    20fc:	93 1f       	adc	r25, r19
    20fe:	a4 1f       	adc	r26, r20
    2100:	b5 1f       	adc	r27, r21
    2102:	80 93 e4 01 	sts	0x01E4, r24
    2106:	90 93 e5 01 	sts	0x01E5, r25
    210a:	a0 93 e6 01 	sts	0x01E6, r26
    210e:	b0 93 e7 01 	sts	0x01E7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    2112:	80 91 7e 01 	lds	r24, 0x017E
    2116:	90 91 7f 01 	lds	r25, 0x017F
    211a:	a0 91 80 01 	lds	r26, 0x0180
    211e:	b0 91 81 01 	lds	r27, 0x0181
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	a1 1d       	adc	r26, r1
    2126:	b1 1d       	adc	r27, r1
    2128:	80 93 be 01 	sts	0x01BE, r24
    212c:	90 93 bf 01 	sts	0x01BF, r25
    2130:	a0 93 c0 01 	sts	0x01C0, r26
    2134:	b0 93 c1 01 	sts	0x01C1, r27
					tx_end = cur_state_end;
    2138:	80 91 e4 01 	lds	r24, 0x01E4
    213c:	90 91 e5 01 	lds	r25, 0x01E5
    2140:	a0 91 e6 01 	lds	r26, 0x01E6
    2144:	b0 91 e7 01 	lds	r27, 0x01E7
    2148:	80 93 01 02 	sts	0x0201, r24
    214c:	90 93 02 02 	sts	0x0202, r25
    2150:	a0 93 03 02 	sts	0x0203, r26
    2154:	b0 93 04 02 	sts	0x0204, r27
					mute_start = cur_timer;
    2158:	80 91 7e 01 	lds	r24, 0x017E
    215c:	90 91 7f 01 	lds	r25, 0x017F
    2160:	a0 91 80 01 	lds	r26, 0x0180
    2164:	b0 91 81 01 	lds	r27, 0x0181
    2168:	80 93 fb 01 	sts	0x01FB, r24
    216c:	90 93 fc 01 	sts	0x01FC, r25
    2170:	a0 93 fd 01 	sts	0x01FD, r26
    2174:	b0 93 fe 01 	sts	0x01FE, r27
					mute_end = UINT32_MAX;
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	9f ef       	ldi	r25, 0xFF	; 255
    217c:	dc 01       	movw	r26, r24
    217e:	80 93 e8 01 	sts	0x01E8, r24
    2182:	90 93 e9 01 	sts	0x01E9, r25
    2186:	a0 93 ea 01 	sts	0x01EA, r26
    218a:	b0 93 eb 01 	sts	0x01EB, r27
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <main+0x604>
				}
				else
				{
					cur_state = IDLE;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 d6 01 	sts	0x01D6, r24
				}

				break;
    2196:	a2 c2       	rjmp	.+1348   	; 0x26dc <main+0xb4a>

			case DIT:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    2198:	80 91 f2 01 	lds	r24, 0x01F2
    219c:	90 91 f3 01 	lds	r25, 0x01F3
    21a0:	a0 91 f4 01 	lds	r26, 0x01F4
    21a4:	b0 91 f5 01 	lds	r27, 0x01F5
    21a8:	81 3b       	cpi	r24, 0xB1	; 177
    21aa:	e6 ef       	ldi	r30, 0xF6	; 246
    21ac:	9e 07       	cpc	r25, r30
    21ae:	ea ed       	ldi	r30, 0xDA	; 218
    21b0:	ae 07       	cpc	r26, r30
    21b2:	e0 e0       	ldi	r30, 0x00	; 0
    21b4:	be 07       	cpc	r27, r30
    21b6:	80 f4       	brcc	.+32     	; 0x21d8 <main+0x646>
    21b8:	80 91 f2 01 	lds	r24, 0x01F2
    21bc:	90 91 f3 01 	lds	r25, 0x01F3
    21c0:	a0 91 f4 01 	lds	r26, 0x01F4
    21c4:	b0 91 f5 01 	lds	r27, 0x01F5
    21c8:	80 38       	cpi	r24, 0x80	; 128
    21ca:	ff e9       	ldi	r31, 0x9F	; 159
    21cc:	9f 07       	cpc	r25, r31
    21ce:	f5 ed       	ldi	r31, 0xD5	; 213
    21d0:	af 07       	cpc	r26, r31
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	bf 07       	cpc	r27, r31
    21d6:	38 f4       	brcc	.+14     	; 0x21e6 <main+0x654>
				{
					key_down = FALSE;
    21d8:	10 92 52 01 	sts	0x0152, r1
					sidetone_on = FALSE;
    21dc:	10 92 50 01 	sts	0x0150, r1
					mute_on = FALSE;
    21e0:	10 92 51 01 	sts	0x0151, r1
    21e4:	09 c0       	rjmp	.+18     	; 0x21f8 <main+0x666>
				}
				else
				{
					key_down = TRUE;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 52 01 	sts	0x0152, r24
					sidetone_on = TRUE;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 50 01 	sts	0x0150, r24
					mute_on = TRUE;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	80 93 51 01 	sts	0x0151, r24
				}

				if(cur_timer > cur_state_end)
    21f8:	20 91 7e 01 	lds	r18, 0x017E
    21fc:	30 91 7f 01 	lds	r19, 0x017F
    2200:	40 91 80 01 	lds	r20, 0x0180
    2204:	50 91 81 01 	lds	r21, 0x0181
    2208:	80 91 e4 01 	lds	r24, 0x01E4
    220c:	90 91 e5 01 	lds	r25, 0x01E5
    2210:	a0 91 e6 01 	lds	r26, 0x01E6
    2214:	b0 91 e7 01 	lds	r27, 0x01E7
    2218:	82 17       	cp	r24, r18
    221a:	93 07       	cpc	r25, r19
    221c:	a4 07       	cpc	r26, r20
    221e:	b5 07       	cpc	r27, r21
    2220:	08 f0       	brcs	.+2      	; 0x2224 <main+0x692>
    2222:	44 c0       	rjmp	.+136    	; 0x22ac <main+0x71a>
				{
					prev_state = DIT;
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	80 93 88 01 	sts	0x0188, r24
					cur_state = DITDELAY;
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	80 93 d6 01 	sts	0x01D6, r24
					cur_state_end = cur_timer + dit_length;
    2230:	80 91 89 01 	lds	r24, 0x0189
    2234:	90 91 8a 01 	lds	r25, 0x018A
    2238:	9c 01       	movw	r18, r24
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	80 91 7e 01 	lds	r24, 0x017E
    2242:	90 91 7f 01 	lds	r25, 0x017F
    2246:	a0 91 80 01 	lds	r26, 0x0180
    224a:	b0 91 81 01 	lds	r27, 0x0181
    224e:	82 0f       	add	r24, r18
    2250:	93 1f       	adc	r25, r19
    2252:	a4 1f       	adc	r26, r20
    2254:	b5 1f       	adc	r27, r21
    2256:	80 93 e4 01 	sts	0x01E4, r24
    225a:	90 93 e5 01 	sts	0x01E5, r25
    225e:	a0 93 e6 01 	sts	0x01E6, r26
    2262:	b0 93 e7 01 	sts	0x01E7, r27
					mute_start = cur_timer;
    2266:	80 91 7e 01 	lds	r24, 0x017E
    226a:	90 91 7f 01 	lds	r25, 0x017F
    226e:	a0 91 80 01 	lds	r26, 0x0180
    2272:	b0 91 81 01 	lds	r27, 0x0181
    2276:	80 93 fb 01 	sts	0x01FB, r24
    227a:	90 93 fc 01 	sts	0x01FC, r25
    227e:	a0 93 fd 01 	sts	0x01FD, r26
    2282:	b0 93 fe 01 	sts	0x01FE, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    2286:	80 91 e4 01 	lds	r24, 0x01E4
    228a:	90 91 e5 01 	lds	r25, 0x01E5
    228e:	a0 91 e6 01 	lds	r26, 0x01E6
    2292:	b0 91 e7 01 	lds	r27, 0x01E7
    2296:	c2 96       	adiw	r24, 0x32	; 50
    2298:	a1 1d       	adc	r26, r1
    229a:	b1 1d       	adc	r27, r1
    229c:	80 93 e8 01 	sts	0x01E8, r24
    22a0:	90 93 e9 01 	sts	0x01E9, r25
    22a4:	a0 93 ea 01 	sts	0x01EA, r26
    22a8:	b0 93 eb 01 	sts	0x01EB, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    22ac:	80 91 d2 01 	lds	r24, 0x01D2
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	39 f4       	brne	.+14     	; 0x22c2 <main+0x730>
    22b4:	80 91 bd 01 	lds	r24, 0x01BD
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	19 f4       	brne	.+6      	; 0x22c2 <main+0x730>
					next_state = DAH;
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	80 93 bd 01 	sts	0x01BD, r24

				break;
    22c2:	0c c2       	rjmp	.+1048   	; 0x26dc <main+0xb4a>

			case DAH:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    22c4:	80 91 f2 01 	lds	r24, 0x01F2
    22c8:	90 91 f3 01 	lds	r25, 0x01F3
    22cc:	a0 91 f4 01 	lds	r26, 0x01F4
    22d0:	b0 91 f5 01 	lds	r27, 0x01F5
    22d4:	81 3b       	cpi	r24, 0xB1	; 177
    22d6:	26 ef       	ldi	r18, 0xF6	; 246
    22d8:	92 07       	cpc	r25, r18
    22da:	2a ed       	ldi	r18, 0xDA	; 218
    22dc:	a2 07       	cpc	r26, r18
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	b2 07       	cpc	r27, r18
    22e2:	80 f4       	brcc	.+32     	; 0x2304 <main+0x772>
    22e4:	80 91 f2 01 	lds	r24, 0x01F2
    22e8:	90 91 f3 01 	lds	r25, 0x01F3
    22ec:	a0 91 f4 01 	lds	r26, 0x01F4
    22f0:	b0 91 f5 01 	lds	r27, 0x01F5
    22f4:	80 38       	cpi	r24, 0x80	; 128
    22f6:	ef e9       	ldi	r30, 0x9F	; 159
    22f8:	9e 07       	cpc	r25, r30
    22fa:	e5 ed       	ldi	r30, 0xD5	; 213
    22fc:	ae 07       	cpc	r26, r30
    22fe:	e0 e0       	ldi	r30, 0x00	; 0
    2300:	be 07       	cpc	r27, r30
    2302:	38 f4       	brcc	.+14     	; 0x2312 <main+0x780>
				{
					key_down = FALSE;
    2304:	10 92 52 01 	sts	0x0152, r1
					sidetone_on = FALSE;
    2308:	10 92 50 01 	sts	0x0150, r1
					mute_on = FALSE;
    230c:	10 92 51 01 	sts	0x0151, r1
    2310:	09 c0       	rjmp	.+18     	; 0x2324 <main+0x792>
				}
				else
				{
					key_down = TRUE;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	80 93 52 01 	sts	0x0152, r24
					sidetone_on = TRUE;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 50 01 	sts	0x0150, r24
					mute_on = TRUE;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	80 93 51 01 	sts	0x0151, r24
				}

				if(cur_timer > cur_state_end)
    2324:	20 91 7e 01 	lds	r18, 0x017E
    2328:	30 91 7f 01 	lds	r19, 0x017F
    232c:	40 91 80 01 	lds	r20, 0x0180
    2330:	50 91 81 01 	lds	r21, 0x0181
    2334:	80 91 e4 01 	lds	r24, 0x01E4
    2338:	90 91 e5 01 	lds	r25, 0x01E5
    233c:	a0 91 e6 01 	lds	r26, 0x01E6
    2340:	b0 91 e7 01 	lds	r27, 0x01E7
    2344:	82 17       	cp	r24, r18
    2346:	93 07       	cpc	r25, r19
    2348:	a4 07       	cpc	r26, r20
    234a:	b5 07       	cpc	r27, r21
    234c:	08 f0       	brcs	.+2      	; 0x2350 <main+0x7be>
    234e:	44 c0       	rjmp	.+136    	; 0x23d8 <main+0x846>
				{
					prev_state = DAH;
    2350:	83 e0       	ldi	r24, 0x03	; 3
    2352:	80 93 88 01 	sts	0x0188, r24
					cur_state = DITDELAY;
    2356:	84 e0       	ldi	r24, 0x04	; 4
    2358:	80 93 d6 01 	sts	0x01D6, r24
					cur_state_end = cur_timer + dit_length;
    235c:	80 91 89 01 	lds	r24, 0x0189
    2360:	90 91 8a 01 	lds	r25, 0x018A
    2364:	9c 01       	movw	r18, r24
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	50 e0       	ldi	r21, 0x00	; 0
    236a:	80 91 7e 01 	lds	r24, 0x017E
    236e:	90 91 7f 01 	lds	r25, 0x017F
    2372:	a0 91 80 01 	lds	r26, 0x0180
    2376:	b0 91 81 01 	lds	r27, 0x0181
    237a:	82 0f       	add	r24, r18
    237c:	93 1f       	adc	r25, r19
    237e:	a4 1f       	adc	r26, r20
    2380:	b5 1f       	adc	r27, r21
    2382:	80 93 e4 01 	sts	0x01E4, r24
    2386:	90 93 e5 01 	sts	0x01E5, r25
    238a:	a0 93 e6 01 	sts	0x01E6, r26
    238e:	b0 93 e7 01 	sts	0x01E7, r27
					mute_start = cur_timer;
    2392:	80 91 7e 01 	lds	r24, 0x017E
    2396:	90 91 7f 01 	lds	r25, 0x017F
    239a:	a0 91 80 01 	lds	r26, 0x0180
    239e:	b0 91 81 01 	lds	r27, 0x0181
    23a2:	80 93 fb 01 	sts	0x01FB, r24
    23a6:	90 93 fc 01 	sts	0x01FC, r25
    23aa:	a0 93 fd 01 	sts	0x01FD, r26
    23ae:	b0 93 fe 01 	sts	0x01FE, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    23b2:	80 91 e4 01 	lds	r24, 0x01E4
    23b6:	90 91 e5 01 	lds	r25, 0x01E5
    23ba:	a0 91 e6 01 	lds	r26, 0x01E6
    23be:	b0 91 e7 01 	lds	r27, 0x01E7
    23c2:	c2 96       	adiw	r24, 0x32	; 50
    23c4:	a1 1d       	adc	r26, r1
    23c6:	b1 1d       	adc	r27, r1
    23c8:	80 93 e8 01 	sts	0x01E8, r24
    23cc:	90 93 e9 01 	sts	0x01E9, r25
    23d0:	a0 93 ea 01 	sts	0x01EA, r26
    23d4:	b0 93 eb 01 	sts	0x01EB, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    23d8:	80 91 ec 01 	lds	r24, 0x01EC
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	39 f4       	brne	.+14     	; 0x23ee <main+0x85c>
    23e0:	80 91 bd 01 	lds	r24, 0x01BD
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	19 f4       	brne	.+6      	; 0x23ee <main+0x85c>
					next_state = DIT;
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	80 93 bd 01 	sts	0x01BD, r24

				break;
    23ee:	76 c1       	rjmp	.+748    	; 0x26dc <main+0xb4a>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    23f0:	20 91 7e 01 	lds	r18, 0x017E
    23f4:	30 91 7f 01 	lds	r19, 0x017F
    23f8:	40 91 80 01 	lds	r20, 0x0180
    23fc:	50 91 81 01 	lds	r21, 0x0181
    2400:	80 91 e4 01 	lds	r24, 0x01E4
    2404:	90 91 e5 01 	lds	r25, 0x01E5
    2408:	a0 91 e6 01 	lds	r26, 0x01E6
    240c:	b0 91 e7 01 	lds	r27, 0x01E7
    2410:	82 17       	cp	r24, r18
    2412:	93 07       	cpc	r25, r19
    2414:	a4 07       	cpc	r26, r20
    2416:	b5 07       	cpc	r27, r21
    2418:	08 f0       	brcs	.+2      	; 0x241c <main+0x88a>
    241a:	e2 c0       	rjmp	.+452    	; 0x25e0 <main+0xa4e>
				{
					if(next_state == DIT)
    241c:	80 91 bd 01 	lds	r24, 0x01BD
    2420:	82 30       	cpi	r24, 0x02	; 2
    2422:	09 f0       	breq	.+2      	; 0x2426 <main+0x894>
    2424:	5d c0       	rjmp	.+186    	; 0x24e0 <main+0x94e>
					{
						cur_state = DIT;
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	80 93 d6 01 	sts	0x01D6, r24
						cur_state_end = cur_timer + dit_length;
    242c:	80 91 89 01 	lds	r24, 0x0189
    2430:	90 91 8a 01 	lds	r25, 0x018A
    2434:	9c 01       	movw	r18, r24
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	80 91 7e 01 	lds	r24, 0x017E
    243e:	90 91 7f 01 	lds	r25, 0x017F
    2442:	a0 91 80 01 	lds	r26, 0x0180
    2446:	b0 91 81 01 	lds	r27, 0x0181
    244a:	82 0f       	add	r24, r18
    244c:	93 1f       	adc	r25, r19
    244e:	a4 1f       	adc	r26, r20
    2450:	b5 1f       	adc	r27, r21
    2452:	80 93 e4 01 	sts	0x01E4, r24
    2456:	90 93 e5 01 	sts	0x01E5, r25
    245a:	a0 93 e6 01 	sts	0x01E6, r26
    245e:	b0 93 e7 01 	sts	0x01E7, r27
						tx_start = cur_timer + TX_ON_DELAY;
    2462:	80 91 7e 01 	lds	r24, 0x017E
    2466:	90 91 7f 01 	lds	r25, 0x017F
    246a:	a0 91 80 01 	lds	r26, 0x0180
    246e:	b0 91 81 01 	lds	r27, 0x0181
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	a1 1d       	adc	r26, r1
    2476:	b1 1d       	adc	r27, r1
    2478:	80 93 be 01 	sts	0x01BE, r24
    247c:	90 93 bf 01 	sts	0x01BF, r25
    2480:	a0 93 c0 01 	sts	0x01C0, r26
    2484:	b0 93 c1 01 	sts	0x01C1, r27
						tx_end = cur_state_end;
    2488:	80 91 e4 01 	lds	r24, 0x01E4
    248c:	90 91 e5 01 	lds	r25, 0x01E5
    2490:	a0 91 e6 01 	lds	r26, 0x01E6
    2494:	b0 91 e7 01 	lds	r27, 0x01E7
    2498:	80 93 01 02 	sts	0x0201, r24
    249c:	90 93 02 02 	sts	0x0202, r25
    24a0:	a0 93 03 02 	sts	0x0203, r26
    24a4:	b0 93 04 02 	sts	0x0204, r27
						mute_start = cur_timer;
    24a8:	80 91 7e 01 	lds	r24, 0x017E
    24ac:	90 91 7f 01 	lds	r25, 0x017F
    24b0:	a0 91 80 01 	lds	r26, 0x0180
    24b4:	b0 91 81 01 	lds	r27, 0x0181
    24b8:	80 93 fb 01 	sts	0x01FB, r24
    24bc:	90 93 fc 01 	sts	0x01FC, r25
    24c0:	a0 93 fd 01 	sts	0x01FD, r26
    24c4:	b0 93 fe 01 	sts	0x01FE, r27
						mute_end = UINT32_MAX;
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	9f ef       	ldi	r25, 0xFF	; 255
    24cc:	dc 01       	movw	r26, r24
    24ce:	80 93 e8 01 	sts	0x01E8, r24
    24d2:	90 93 e9 01 	sts	0x01E9, r25
    24d6:	a0 93 ea 01 	sts	0x01EA, r26
    24da:	b0 93 eb 01 	sts	0x01EB, r27
    24de:	7a c0       	rjmp	.+244    	; 0x25d4 <main+0xa42>
					}
					else if(next_state == DAH)
    24e0:	80 91 bd 01 	lds	r24, 0x01BD
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	09 f0       	breq	.+2      	; 0x24ea <main+0x958>
    24e8:	62 c0       	rjmp	.+196    	; 0x25ae <main+0xa1c>
					{
						cur_state = DAH;
    24ea:	83 e0       	ldi	r24, 0x03	; 3
    24ec:	80 93 d6 01 	sts	0x01D6, r24
						cur_state_end = cur_timer + (dit_length * 3);
    24f0:	20 91 89 01 	lds	r18, 0x0189
    24f4:	30 91 8a 01 	lds	r19, 0x018A
    24f8:	c9 01       	movw	r24, r18
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	82 0f       	add	r24, r18
    2500:	93 1f       	adc	r25, r19
    2502:	9c 01       	movw	r18, r24
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	80 91 7e 01 	lds	r24, 0x017E
    250c:	90 91 7f 01 	lds	r25, 0x017F
    2510:	a0 91 80 01 	lds	r26, 0x0180
    2514:	b0 91 81 01 	lds	r27, 0x0181
    2518:	82 0f       	add	r24, r18
    251a:	93 1f       	adc	r25, r19
    251c:	a4 1f       	adc	r26, r20
    251e:	b5 1f       	adc	r27, r21
    2520:	80 93 e4 01 	sts	0x01E4, r24
    2524:	90 93 e5 01 	sts	0x01E5, r25
    2528:	a0 93 e6 01 	sts	0x01E6, r26
    252c:	b0 93 e7 01 	sts	0x01E7, r27
						tx_start = cur_timer + TX_ON_DELAY;
    2530:	80 91 7e 01 	lds	r24, 0x017E
    2534:	90 91 7f 01 	lds	r25, 0x017F
    2538:	a0 91 80 01 	lds	r26, 0x0180
    253c:	b0 91 81 01 	lds	r27, 0x0181
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	a1 1d       	adc	r26, r1
    2544:	b1 1d       	adc	r27, r1
    2546:	80 93 be 01 	sts	0x01BE, r24
    254a:	90 93 bf 01 	sts	0x01BF, r25
    254e:	a0 93 c0 01 	sts	0x01C0, r26
    2552:	b0 93 c1 01 	sts	0x01C1, r27
						tx_end = cur_state_end;
    2556:	80 91 e4 01 	lds	r24, 0x01E4
    255a:	90 91 e5 01 	lds	r25, 0x01E5
    255e:	a0 91 e6 01 	lds	r26, 0x01E6
    2562:	b0 91 e7 01 	lds	r27, 0x01E7
    2566:	80 93 01 02 	sts	0x0201, r24
    256a:	90 93 02 02 	sts	0x0202, r25
    256e:	a0 93 03 02 	sts	0x0203, r26
    2572:	b0 93 04 02 	sts	0x0204, r27
						mute_start = cur_timer;
    2576:	80 91 7e 01 	lds	r24, 0x017E
    257a:	90 91 7f 01 	lds	r25, 0x017F
    257e:	a0 91 80 01 	lds	r26, 0x0180
    2582:	b0 91 81 01 	lds	r27, 0x0181
    2586:	80 93 fb 01 	sts	0x01FB, r24
    258a:	90 93 fc 01 	sts	0x01FC, r25
    258e:	a0 93 fd 01 	sts	0x01FD, r26
    2592:	b0 93 fe 01 	sts	0x01FE, r27
						mute_end = UINT32_MAX;
    2596:	8f ef       	ldi	r24, 0xFF	; 255
    2598:	9f ef       	ldi	r25, 0xFF	; 255
    259a:	dc 01       	movw	r26, r24
    259c:	80 93 e8 01 	sts	0x01E8, r24
    25a0:	90 93 e9 01 	sts	0x01E9, r25
    25a4:	a0 93 ea 01 	sts	0x01EA, r26
    25a8:	b0 93 eb 01 	sts	0x01EB, r27
    25ac:	13 c0       	rjmp	.+38     	; 0x25d4 <main+0xa42>
					}
					else
					{
						cur_state = IDLE;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	80 93 d6 01 	sts	0x01D6, r24
						cur_state_end = cur_timer;
    25b4:	80 91 7e 01 	lds	r24, 0x017E
    25b8:	90 91 7f 01 	lds	r25, 0x017F
    25bc:	a0 91 80 01 	lds	r26, 0x0180
    25c0:	b0 91 81 01 	lds	r27, 0x0181
    25c4:	80 93 e4 01 	sts	0x01E4, r24
    25c8:	90 93 e5 01 	sts	0x01E5, r25
    25cc:	a0 93 e6 01 	sts	0x01E6, r26
    25d0:	b0 93 e7 01 	sts	0x01E7, r27
					}

					prev_state = DITDELAY;
    25d4:	84 e0       	ldi	r24, 0x04	; 4
    25d6:	80 93 88 01 	sts	0x0188, r24
					next_state = IDLE;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	80 93 bd 01 	sts	0x01BD, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    25e0:	80 91 ec 01 	lds	r24, 0x01EC
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	61 f4       	brne	.+24     	; 0x2600 <main+0xa6e>
    25e8:	80 91 88 01 	lds	r24, 0x0188
    25ec:	83 30       	cpi	r24, 0x03	; 3
    25ee:	41 f4       	brne	.+16     	; 0x2600 <main+0xa6e>
    25f0:	80 91 bd 01 	lds	r24, 0x01BD
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	21 f4       	brne	.+8      	; 0x2600 <main+0xa6e>
					next_state = DIT;
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	80 93 bd 01 	sts	0x01BD, r24
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <main+0xa8c>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    2600:	80 91 d2 01 	lds	r24, 0x01D2
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	59 f4       	brne	.+22     	; 0x261e <main+0xa8c>
    2608:	80 91 88 01 	lds	r24, 0x0188
    260c:	82 30       	cpi	r24, 0x02	; 2
    260e:	39 f4       	brne	.+14     	; 0x261e <main+0xa8c>
    2610:	80 91 bd 01 	lds	r24, 0x01BD
    2614:	81 30       	cpi	r24, 0x01	; 1
    2616:	19 f4       	brne	.+6      	; 0x261e <main+0xa8c>
					next_state = DAH;
    2618:	83 e0       	ldi	r24, 0x03	; 3
    261a:	80 93 bd 01 	sts	0x01BD, r24

				key_down = FALSE;
    261e:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = FALSE;
    2622:	10 92 50 01 	sts	0x0150, r1
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    2626:	80 91 f2 01 	lds	r24, 0x01F2
    262a:	90 91 f3 01 	lds	r25, 0x01F3
    262e:	a0 91 f4 01 	lds	r26, 0x01F4
    2632:	b0 91 f5 01 	lds	r27, 0x01F5
    2636:	81 3b       	cpi	r24, 0xB1	; 177
    2638:	f6 ef       	ldi	r31, 0xF6	; 246
    263a:	9f 07       	cpc	r25, r31
    263c:	fa ed       	ldi	r31, 0xDA	; 218
    263e:	af 07       	cpc	r26, r31
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	bf 07       	cpc	r27, r31
    2644:	80 f4       	brcc	.+32     	; 0x2666 <main+0xad4>
    2646:	80 91 f2 01 	lds	r24, 0x01F2
    264a:	90 91 f3 01 	lds	r25, 0x01F3
    264e:	a0 91 f4 01 	lds	r26, 0x01F4
    2652:	b0 91 f5 01 	lds	r27, 0x01F5
    2656:	80 38       	cpi	r24, 0x80	; 128
    2658:	2f e9       	ldi	r18, 0x9F	; 159
    265a:	92 07       	cpc	r25, r18
    265c:	25 ed       	ldi	r18, 0xD5	; 213
    265e:	a2 07       	cpc	r26, r18
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	b2 07       	cpc	r27, r18
    2664:	18 f4       	brcc	.+6      	; 0x266c <main+0xada>
					mute_on = FALSE;
    2666:	10 92 51 01 	sts	0x0151, r1
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <main+0xae0>
				else
					mute_on = TRUE;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	80 93 51 01 	sts	0x0151, r24
				break;
    2672:	34 c0       	rjmp	.+104    	; 0x26dc <main+0xb4a>

			case EXIT:
				key_down = FALSE;
    2674:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = FALSE;
    2678:	10 92 50 01 	sts	0x0150, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    267c:	10 92 51 01 	sts	0x0151, r1

				if(cur_timer > cur_state_end)
    2680:	20 91 7e 01 	lds	r18, 0x017E
    2684:	30 91 7f 01 	lds	r19, 0x017F
    2688:	40 91 80 01 	lds	r20, 0x0180
    268c:	50 91 81 01 	lds	r21, 0x0181
    2690:	80 91 e4 01 	lds	r24, 0x01E4
    2694:	90 91 e5 01 	lds	r25, 0x01E5
    2698:	a0 91 e6 01 	lds	r26, 0x01E6
    269c:	b0 91 e7 01 	lds	r27, 0x01E7
    26a0:	82 17       	cp	r24, r18
    26a2:	93 07       	cpc	r25, r19
    26a4:	a4 07       	cpc	r26, r20
    26a6:	b5 07       	cpc	r27, r21
    26a8:	18 f4       	brcc	.+6      	; 0x26b0 <main+0xb1e>
				{
					cur_state = IDLE;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	80 93 d6 01 	sts	0x01D6, r24
				}

				sleep_timer = cur_timer + SLEEP_DELAY;
    26b0:	80 91 7e 01 	lds	r24, 0x017E
    26b4:	90 91 7f 01 	lds	r25, 0x017F
    26b8:	a0 91 80 01 	lds	r26, 0x0180
    26bc:	b0 91 81 01 	lds	r27, 0x0181
    26c0:	84 5d       	subi	r24, 0xD4	; 212
    26c2:	9e 4f       	sbci	r25, 0xFE	; 254
    26c4:	af 4f       	sbci	r26, 0xFF	; 255
    26c6:	bf 4f       	sbci	r27, 0xFF	; 255
    26c8:	80 93 dd 01 	sts	0x01DD, r24
    26cc:	90 93 de 01 	sts	0x01DE, r25
    26d0:	a0 93 df 01 	sts	0x01DF, r26
    26d4:	b0 93 e0 01 	sts	0x01E0, r27
				break;
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <main+0xb4a>

			default:
				break;
    26da:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    26dc:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <main+0x1a22>

		case ANNOUNCE:
			switch(cur_state)
    26e0:	80 91 d6 01 	lds	r24, 0x01D6
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	84 30       	cpi	r24, 0x04	; 4
    26ea:	91 05       	cpc	r25, r1
    26ec:	44 f4       	brge	.+16     	; 0x26fe <main+0xb6c>
    26ee:	82 30       	cpi	r24, 0x02	; 2
    26f0:	91 05       	cpc	r25, r1
    26f2:	0c f0       	brlt	.+2      	; 0x26f6 <main+0xb64>
    26f4:	49 c1       	rjmp	.+658    	; 0x2988 <main+0xdf6>
    26f6:	81 30       	cpi	r24, 0x01	; 1
    26f8:	91 05       	cpc	r25, r1
    26fa:	31 f0       	breq	.+12     	; 0x2708 <main+0xb76>
    26fc:	a1 c1       	rjmp	.+834    	; 0x2a40 <main+0xeae>
    26fe:	87 30       	cpi	r24, 0x07	; 7
    2700:	91 05       	cpc	r25, r1
    2702:	0c f0       	brlt	.+2      	; 0x2706 <main+0xb74>
    2704:	9d c1       	rjmp	.+826    	; 0x2a40 <main+0xeae>
    2706:	7c c1       	rjmp	.+760    	; 0x2a00 <main+0xe6e>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2708:	20 91 54 01 	lds	r18, 0x0154
    270c:	30 91 55 01 	lds	r19, 0x0155
    2710:	80 91 ff 01 	lds	r24, 0x01FF
    2714:	90 91 00 02 	lds	r25, 0x0200
    2718:	28 17       	cp	r18, r24
    271a:	39 07       	cpc	r19, r25
    271c:	c9 f4       	brne	.+50     	; 0x2750 <main+0xbbe>
    271e:	80 91 58 01 	lds	r24, 0x0158
    2722:	88 23       	and	r24, r24
    2724:	a9 f4       	brne	.+42     	; 0x2750 <main+0xbbe>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2726:	80 91 54 01 	lds	r24, 0x0154
    272a:	90 91 55 01 	lds	r25, 0x0155
    272e:	fc 01       	movw	r30, r24
    2730:	80 81       	ld	r24, Z
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	80 97       	sbiw	r24, 0x20	; 32
    2738:	88 59       	subi	r24, 0x98	; 152
    273a:	9f 4f       	sbci	r25, 0xFF	; 255
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	fc 01       	movw	r30, r24
    2746:	14 91       	lpm	r17, Z+
    2748:	1b 83       	std	Y+3, r17	; 0x03
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	80 93 58 01 	sts	0x0158, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2750:	80 91 58 01 	lds	r24, 0x0158
    2754:	88 23       	and	r24, r24
    2756:	09 f4       	brne	.+2      	; 0x275a <main+0xbc8>
    2758:	ce c0       	rjmp	.+412    	; 0x28f6 <main+0xd64>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    275a:	80 91 58 01 	lds	r24, 0x0158
    275e:	80 38       	cpi	r24, 0x80	; 128
    2760:	29 f0       	breq	.+10     	; 0x276c <main+0xbda>
    2762:	80 91 58 01 	lds	r24, 0x0158
    2766:	8f 3f       	cpi	r24, 0xFF	; 255
    2768:	09 f0       	breq	.+2      	; 0x276c <main+0xbda>
    276a:	79 c0       	rjmp	.+242    	; 0x285e <main+0xccc>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    276c:	80 91 58 01 	lds	r24, 0x0158
    2770:	80 38       	cpi	r24, 0x80	; 128
    2772:	21 f5       	brne	.+72     	; 0x27bc <main+0xc2a>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2774:	20 91 89 01 	lds	r18, 0x0189
    2778:	30 91 8a 01 	lds	r19, 0x018A
    277c:	c9 01       	movw	r24, r18
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	82 0f       	add	r24, r18
    2784:	93 1f       	adc	r25, r19
    2786:	9c 01       	movw	r18, r24
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	80 91 7e 01 	lds	r24, 0x017E
    2790:	90 91 7f 01 	lds	r25, 0x017F
    2794:	a0 91 80 01 	lds	r26, 0x0180
    2798:	b0 91 81 01 	lds	r27, 0x0181
    279c:	82 0f       	add	r24, r18
    279e:	93 1f       	adc	r25, r19
    27a0:	a4 1f       	adc	r26, r20
    27a2:	b5 1f       	adc	r27, r21
    27a4:	80 93 e4 01 	sts	0x01E4, r24
    27a8:	90 93 e5 01 	sts	0x01E5, r25
    27ac:	a0 93 e6 01 	sts	0x01E6, r26
    27b0:	b0 93 e7 01 	sts	0x01E7, r27
							cur_state = DAHDELAY;
    27b4:	85 e0       	ldi	r24, 0x05	; 5
    27b6:	80 93 d6 01 	sts	0x01D6, r24
    27ba:	27 c0       	rjmp	.+78     	; 0x280a <main+0xc78>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    27bc:	20 91 89 01 	lds	r18, 0x0189
    27c0:	30 91 8a 01 	lds	r19, 0x018A
    27c4:	c9 01       	movw	r24, r18
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	82 1b       	sub	r24, r18
    27d4:	93 0b       	sbc	r25, r19
    27d6:	9c 01       	movw	r18, r24
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	80 91 7e 01 	lds	r24, 0x017E
    27e0:	90 91 7f 01 	lds	r25, 0x017F
    27e4:	a0 91 80 01 	lds	r26, 0x0180
    27e8:	b0 91 81 01 	lds	r27, 0x0181
    27ec:	82 0f       	add	r24, r18
    27ee:	93 1f       	adc	r25, r19
    27f0:	a4 1f       	adc	r26, r20
    27f2:	b5 1f       	adc	r27, r21
    27f4:	80 93 e4 01 	sts	0x01E4, r24
    27f8:	90 93 e5 01 	sts	0x01E5, r25
    27fc:	a0 93 e6 01 	sts	0x01E6, r26
    2800:	b0 93 e7 01 	sts	0x01E7, r27
							cur_state = DAHDELAY;
    2804:	85 e0       	ldi	r24, 0x05	; 5
    2806:	80 93 d6 01 	sts	0x01D6, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    280a:	80 91 54 01 	lds	r24, 0x0154
    280e:	90 91 55 01 	lds	r25, 0x0155
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	90 93 55 01 	sts	0x0155, r25
    2818:	80 93 54 01 	sts	0x0154, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    281c:	80 91 54 01 	lds	r24, 0x0154
    2820:	90 91 55 01 	lds	r25, 0x0155
    2824:	fc 01       	movw	r30, r24
    2826:	80 81       	ld	r24, Z
    2828:	88 23       	and	r24, r24
    282a:	19 f4       	brne	.+6      	; 0x2832 <main+0xca0>
							cur_character = '\0';
    282c:	10 92 58 01 	sts	0x0158, r1
    2830:	15 c0       	rjmp	.+42     	; 0x285c <main+0xcca>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2832:	80 91 54 01 	lds	r24, 0x0154
    2836:	90 91 55 01 	lds	r25, 0x0155
    283a:	fc 01       	movw	r30, r24
    283c:	80 81       	ld	r24, Z
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	80 97       	sbiw	r24, 0x20	; 32
    2844:	88 59       	subi	r24, 0x98	; 152
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	9d 83       	std	Y+5, r25	; 0x05
    284a:	8c 83       	std	Y+4, r24	; 0x04
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	9d 81       	ldd	r25, Y+5	; 0x05
    2850:	fc 01       	movw	r30, r24
    2852:	14 91       	lpm	r17, Z+
    2854:	1e 83       	std	Y+6, r17	; 0x06
    2856:	8e 81       	ldd	r24, Y+6	; 0x06
    2858:	80 93 58 01 	sts	0x0158, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    285c:	4b c0       	rjmp	.+150    	; 0x28f4 <main+0xd62>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    285e:	80 91 58 01 	lds	r24, 0x0158
    2862:	88 23       	and	r24, r24
    2864:	24 f5       	brge	.+72     	; 0x28ae <main+0xd1c>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2866:	20 91 89 01 	lds	r18, 0x0189
    286a:	30 91 8a 01 	lds	r19, 0x018A
    286e:	c9 01       	movw	r24, r18
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	82 0f       	add	r24, r18
    2876:	93 1f       	adc	r25, r19
    2878:	9c 01       	movw	r18, r24
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	50 e0       	ldi	r21, 0x00	; 0
    287e:	80 91 7e 01 	lds	r24, 0x017E
    2882:	90 91 7f 01 	lds	r25, 0x017F
    2886:	a0 91 80 01 	lds	r26, 0x0180
    288a:	b0 91 81 01 	lds	r27, 0x0181
    288e:	82 0f       	add	r24, r18
    2890:	93 1f       	adc	r25, r19
    2892:	a4 1f       	adc	r26, r20
    2894:	b5 1f       	adc	r27, r21
    2896:	80 93 e4 01 	sts	0x01E4, r24
    289a:	90 93 e5 01 	sts	0x01E5, r25
    289e:	a0 93 e6 01 	sts	0x01E6, r26
    28a2:	b0 93 e7 01 	sts	0x01E7, r27
							cur_state = DAH;
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	80 93 d6 01 	sts	0x01D6, r24
    28ac:	1e c0       	rjmp	.+60     	; 0x28ea <main+0xd58>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    28ae:	80 91 89 01 	lds	r24, 0x0189
    28b2:	90 91 8a 01 	lds	r25, 0x018A
    28b6:	9c 01       	movw	r18, r24
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	80 91 7e 01 	lds	r24, 0x017E
    28c0:	90 91 7f 01 	lds	r25, 0x017F
    28c4:	a0 91 80 01 	lds	r26, 0x0180
    28c8:	b0 91 81 01 	lds	r27, 0x0181
    28cc:	82 0f       	add	r24, r18
    28ce:	93 1f       	adc	r25, r19
    28d0:	a4 1f       	adc	r26, r20
    28d2:	b5 1f       	adc	r27, r21
    28d4:	80 93 e4 01 	sts	0x01E4, r24
    28d8:	90 93 e5 01 	sts	0x01E5, r25
    28dc:	a0 93 e6 01 	sts	0x01E6, r26
    28e0:	b0 93 e7 01 	sts	0x01E7, r27
							cur_state = DIT;
    28e4:	82 e0       	ldi	r24, 0x02	; 2
    28e6:	80 93 d6 01 	sts	0x01D6, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    28ea:	80 91 58 01 	lds	r24, 0x0158
    28ee:	88 0f       	add	r24, r24
    28f0:	80 93 58 01 	sts	0x0158, r24
    28f4:	48 c0       	rjmp	.+144    	; 0x2986 <main+0xdf4>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    28f6:	80 91 ff 01 	lds	r24, 0x01FF
    28fa:	90 91 00 02 	lds	r25, 0x0200
    28fe:	21 e4       	ldi	r18, 0x41	; 65
    2900:	31 e0       	ldi	r19, 0x01	; 1
    2902:	b9 01       	movw	r22, r18
    2904:	41 e0       	ldi	r20, 0x01	; 1
    2906:	50 e0       	ldi	r21, 0x00	; 0
    2908:	0e 94 77 1c 	call	0x38ee	; 0x38ee <memcpy>
					cur_char_p = announce_buffer;
    290c:	80 91 ff 01 	lds	r24, 0x01FF
    2910:	90 91 00 02 	lds	r25, 0x0200
    2914:	90 93 55 01 	sts	0x0155, r25
    2918:	80 93 54 01 	sts	0x0154, r24
					cur_character = '\0';
    291c:	10 92 58 01 	sts	0x0158, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    2920:	80 91 db 01 	lds	r24, 0x01DB
    2924:	90 91 dc 01 	lds	r25, 0x01DC
    2928:	90 93 d1 01 	sts	0x01D1, r25
    292c:	80 93 d0 01 	sts	0x01D0, r24
					set_st_freq(st_freq);
    2930:	80 91 d0 01 	lds	r24, 0x01D0
    2934:	90 91 d1 01 	lds	r25, 0x01D1
    2938:	cc 01       	movw	r24, r24
    293a:	a0 e0       	ldi	r26, 0x00	; 0
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <set_st_freq>

					wpm = prev_wpm;
    2946:	80 91 06 02 	lds	r24, 0x0206
    294a:	80 93 f6 01 	sts	0x01F6, r24
					set_wpm(wpm);
    294e:	80 91 f6 01 	lds	r24, 0x01F6
    2952:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>

					cur_mode = prev_mode;
    2956:	80 91 ce 01 	lds	r24, 0x01CE
    295a:	80 93 b8 01 	sts	0x01B8, r24
					cur_state = prev_state;
    295e:	80 91 88 01 	lds	r24, 0x0188
    2962:	80 93 d6 01 	sts	0x01D6, r24
					cur_state_end = prev_state_end;
    2966:	80 91 ca 01 	lds	r24, 0x01CA
    296a:	90 91 cb 01 	lds	r25, 0x01CB
    296e:	a0 91 cc 01 	lds	r26, 0x01CC
    2972:	b0 91 cd 01 	lds	r27, 0x01CD
    2976:	80 93 e4 01 	sts	0x01E4, r24
    297a:	90 93 e5 01 	sts	0x01E5, r25
    297e:	a0 93 e6 01 	sts	0x01E6, r26
    2982:	b0 93 e7 01 	sts	0x01E7, r27
				}
				break;
    2986:	5d c0       	rjmp	.+186    	; 0x2a42 <main+0xeb0>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2988:	20 91 7e 01 	lds	r18, 0x017E
    298c:	30 91 7f 01 	lds	r19, 0x017F
    2990:	40 91 80 01 	lds	r20, 0x0180
    2994:	50 91 81 01 	lds	r21, 0x0181
    2998:	80 91 e4 01 	lds	r24, 0x01E4
    299c:	90 91 e5 01 	lds	r25, 0x01E5
    29a0:	a0 91 e6 01 	lds	r26, 0x01E6
    29a4:	b0 91 e7 01 	lds	r27, 0x01E7
    29a8:	82 17       	cp	r24, r18
    29aa:	93 07       	cpc	r25, r19
    29ac:	a4 07       	cpc	r26, r20
    29ae:	b5 07       	cpc	r27, r21
    29b0:	f0 f4       	brcc	.+60     	; 0x29ee <main+0xe5c>
				{
					cur_state_end = cur_timer + dit_length;
    29b2:	80 91 89 01 	lds	r24, 0x0189
    29b6:	90 91 8a 01 	lds	r25, 0x018A
    29ba:	9c 01       	movw	r18, r24
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	80 91 7e 01 	lds	r24, 0x017E
    29c4:	90 91 7f 01 	lds	r25, 0x017F
    29c8:	a0 91 80 01 	lds	r26, 0x0180
    29cc:	b0 91 81 01 	lds	r27, 0x0181
    29d0:	82 0f       	add	r24, r18
    29d2:	93 1f       	adc	r25, r19
    29d4:	a4 1f       	adc	r26, r20
    29d6:	b5 1f       	adc	r27, r21
    29d8:	80 93 e4 01 	sts	0x01E4, r24
    29dc:	90 93 e5 01 	sts	0x01E5, r25
    29e0:	a0 93 e6 01 	sts	0x01E6, r26
    29e4:	b0 93 e7 01 	sts	0x01E7, r27
					cur_state = DITDELAY;
    29e8:	84 e0       	ldi	r24, 0x04	; 4
    29ea:	80 93 d6 01 	sts	0x01D6, r24
				}

				key_down = FALSE;
    29ee:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = TRUE;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 50 01 	sts	0x0150, r24
				mute_on = TRUE;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 93 51 01 	sts	0x0151, r24
				break;
    29fe:	21 c0       	rjmp	.+66     	; 0x2a42 <main+0xeb0>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    2a00:	20 91 7e 01 	lds	r18, 0x017E
    2a04:	30 91 7f 01 	lds	r19, 0x017F
    2a08:	40 91 80 01 	lds	r20, 0x0180
    2a0c:	50 91 81 01 	lds	r21, 0x0181
    2a10:	80 91 e4 01 	lds	r24, 0x01E4
    2a14:	90 91 e5 01 	lds	r25, 0x01E5
    2a18:	a0 91 e6 01 	lds	r26, 0x01E6
    2a1c:	b0 91 e7 01 	lds	r27, 0x01E7
    2a20:	82 17       	cp	r24, r18
    2a22:	93 07       	cpc	r25, r19
    2a24:	a4 07       	cpc	r26, r20
    2a26:	b5 07       	cpc	r27, r21
    2a28:	18 f4       	brcc	.+6      	; 0x2a30 <main+0xe9e>
					cur_state = IDLE;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	80 93 d6 01 	sts	0x01D6, r24

				key_down = FALSE;
    2a30:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = FALSE;
    2a34:	10 92 50 01 	sts	0x0150, r1
				mute_on = TRUE;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 93 51 01 	sts	0x0151, r24
				break;
    2a3e:	01 c0       	rjmp	.+2      	; 0x2a42 <main+0xeb0>

			default:
				break;
    2a40:	00 00       	nop
			}
			break;
    2a42:	b8 c5       	rjmp	.+2928   	; 0x35b4 <main+0x1a22>

		case TUNE:
			switch(cur_state)
    2a44:	80 91 d6 01 	lds	r24, 0x01D6
    2a48:	88 2f       	mov	r24, r24
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	87 30       	cpi	r24, 0x07	; 7
    2a4e:	91 05       	cpc	r25, r1
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <main+0xec2>
    2a52:	50 c0       	rjmp	.+160    	; 0x2af4 <main+0xf62>
    2a54:	88 30       	cpi	r24, 0x08	; 8
    2a56:	91 05       	cpc	r25, r1
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <main+0xeca>
    2a5a:	8c c0       	rjmp	.+280    	; 0x2b74 <main+0xfe2>
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	91 05       	cpc	r25, r1
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <main+0xed2>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    2a62:	ae c0       	rjmp	.+348    	; 0x2bc0 <main+0x102e>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    2a64:	80 91 7e 01 	lds	r24, 0x017E
    2a68:	90 91 7f 01 	lds	r25, 0x017F
    2a6c:	a0 91 80 01 	lds	r26, 0x0180
    2a70:	b0 91 81 01 	lds	r27, 0x0181
    2a74:	01 96       	adiw	r24, 0x01	; 1
    2a76:	a1 1d       	adc	r26, r1
    2a78:	b1 1d       	adc	r27, r1
    2a7a:	80 93 be 01 	sts	0x01BE, r24
    2a7e:	90 93 bf 01 	sts	0x01BF, r25
    2a82:	a0 93 c0 01 	sts	0x01C0, r26
    2a86:	b0 93 c1 01 	sts	0x01C1, r27
				tx_end = UINT32_MAX;
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	9f ef       	ldi	r25, 0xFF	; 255
    2a8e:	dc 01       	movw	r26, r24
    2a90:	80 93 01 02 	sts	0x0201, r24
    2a94:	90 93 02 02 	sts	0x0202, r25
    2a98:	a0 93 03 02 	sts	0x0203, r26
    2a9c:	b0 93 04 02 	sts	0x0204, r27
				cur_state_end = UINT32_MAX;
    2aa0:	8f ef       	ldi	r24, 0xFF	; 255
    2aa2:	9f ef       	ldi	r25, 0xFF	; 255
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	80 93 e4 01 	sts	0x01E4, r24
    2aaa:	90 93 e5 01 	sts	0x01E5, r25
    2aae:	a0 93 e6 01 	sts	0x01E6, r26
    2ab2:	b0 93 e7 01 	sts	0x01E7, r27
				mute_start = cur_timer;
    2ab6:	80 91 7e 01 	lds	r24, 0x017E
    2aba:	90 91 7f 01 	lds	r25, 0x017F
    2abe:	a0 91 80 01 	lds	r26, 0x0180
    2ac2:	b0 91 81 01 	lds	r27, 0x0181
    2ac6:	80 93 fb 01 	sts	0x01FB, r24
    2aca:	90 93 fc 01 	sts	0x01FC, r25
    2ace:	a0 93 fd 01 	sts	0x01FD, r26
    2ad2:	b0 93 fe 01 	sts	0x01FE, r27
				mute_end = UINT32_MAX;
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	9f ef       	ldi	r25, 0xFF	; 255
    2ada:	dc 01       	movw	r26, r24
    2adc:	80 93 e8 01 	sts	0x01E8, r24
    2ae0:	90 93 e9 01 	sts	0x01E9, r25
    2ae4:	a0 93 ea 01 	sts	0x01EA, r26
    2ae8:	b0 93 eb 01 	sts	0x01EB, r27

				cur_state = KEYDOWN;
    2aec:	87 e0       	ldi	r24, 0x07	; 7
    2aee:	80 93 d6 01 	sts	0x01D6, r24
				break;
    2af2:	66 c0       	rjmp	.+204    	; 0x2bc0 <main+0x102e>

			case KEYDOWN:
				key_down = TRUE;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	80 93 52 01 	sts	0x0152, r24
				sidetone_on = TRUE;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	80 93 50 01 	sts	0x0150, r24
				mute_on = TRUE;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	80 93 51 01 	sts	0x0151, r24

				if(ANYBUTTON)
    2b06:	80 91 ec 01 	lds	r24, 0x01EC
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	61 f0       	breq	.+24     	; 0x2b26 <main+0xf94>
    2b0e:	80 91 d2 01 	lds	r24, 0x01D2
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	41 f0       	breq	.+16     	; 0x2b26 <main+0xf94>
    2b16:	80 91 d5 01 	lds	r24, 0x01D5
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	21 f0       	breq	.+8      	; 0x2b26 <main+0xf94>
    2b1e:	80 91 d3 01 	lds	r24, 0x01D3
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	31 f5       	brne	.+76     	; 0x2b72 <main+0xfe0>
				{
					cur_state = ENDKEYDOWN;
    2b26:	88 e0       	ldi	r24, 0x08	; 8
    2b28:	80 93 d6 01 	sts	0x01D6, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    2b2c:	80 91 7e 01 	lds	r24, 0x017E
    2b30:	90 91 7f 01 	lds	r25, 0x017F
    2b34:	a0 91 80 01 	lds	r26, 0x0180
    2b38:	b0 91 81 01 	lds	r27, 0x0181
    2b3c:	c2 96       	adiw	r24, 0x32	; 50
    2b3e:	a1 1d       	adc	r26, r1
    2b40:	b1 1d       	adc	r27, r1
    2b42:	80 93 e4 01 	sts	0x01E4, r24
    2b46:	90 93 e5 01 	sts	0x01E5, r25
    2b4a:	a0 93 e6 01 	sts	0x01E6, r26
    2b4e:	b0 93 e7 01 	sts	0x01E7, r27
					tx_end = cur_timer;
    2b52:	80 91 7e 01 	lds	r24, 0x017E
    2b56:	90 91 7f 01 	lds	r25, 0x017F
    2b5a:	a0 91 80 01 	lds	r26, 0x0180
    2b5e:	b0 91 81 01 	lds	r27, 0x0181
    2b62:	80 93 01 02 	sts	0x0201, r24
    2b66:	90 93 02 02 	sts	0x0202, r25
    2b6a:	a0 93 03 02 	sts	0x0203, r26
    2b6e:	b0 93 04 02 	sts	0x0204, r27
				}
				break;
    2b72:	26 c0       	rjmp	.+76     	; 0x2bc0 <main+0x102e>

			case ENDKEYDOWN:
				key_down = FALSE;
    2b74:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = FALSE;
    2b78:	10 92 50 01 	sts	0x0150, r1
				mute_on = TRUE;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	80 93 51 01 	sts	0x0151, r24

				if(cur_timer >= cur_state_end)
    2b82:	20 91 7e 01 	lds	r18, 0x017E
    2b86:	30 91 7f 01 	lds	r19, 0x017F
    2b8a:	40 91 80 01 	lds	r20, 0x0180
    2b8e:	50 91 81 01 	lds	r21, 0x0181
    2b92:	80 91 e4 01 	lds	r24, 0x01E4
    2b96:	90 91 e5 01 	lds	r25, 0x01E5
    2b9a:	a0 91 e6 01 	lds	r26, 0x01E6
    2b9e:	b0 91 e7 01 	lds	r27, 0x01E7
    2ba2:	28 17       	cp	r18, r24
    2ba4:	39 07       	cpc	r19, r25
    2ba6:	4a 07       	cpc	r20, r26
    2ba8:	5b 07       	cpc	r21, r27
    2baa:	48 f0       	brcs	.+18     	; 0x2bbe <main+0x102c>
				{
					mute_on = FALSE;
    2bac:	10 92 51 01 	sts	0x0151, r1
					cur_state = IDLE;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	80 93 d6 01 	sts	0x01D6, r24
					cur_mode = default_mode;
    2bb6:	80 91 83 01 	lds	r24, 0x0183
    2bba:	80 93 b8 01 	sts	0x01B8, r24
				}
				break;
    2bbe:	00 00       	nop

			default:
				break;
			}
			break;
    2bc0:	f9 c4       	rjmp	.+2546   	; 0x35b4 <main+0x1a22>

		case MENU:
			switch(cur_state)
    2bc2:	80 91 d6 01 	lds	r24, 0x01D6
    2bc6:	88 2f       	mov	r24, r24
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	89 30       	cpi	r24, 0x09	; 9
    2bcc:	91 05       	cpc	r25, r1
    2bce:	91 f0       	breq	.+36     	; 0x2bf4 <main+0x1062>
    2bd0:	8a 30       	cpi	r24, 0x0A	; 10
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <main+0x1046>
    2bd6:	58 c0       	rjmp	.+176    	; 0x2c88 <main+0x10f6>
    2bd8:	81 30       	cpi	r24, 0x01	; 1
    2bda:	91 05       	cpc	r25, r1
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <main+0x104e>
    2bde:	ac c1       	rjmp	.+856    	; 0x2f38 <main+0x13a6>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	90 93 5a 01 	sts	0x015A, r25
    2be8:	80 93 59 01 	sts	0x0159, r24
				cur_state = MENUANNOUNCE;
    2bec:	89 e0       	ldi	r24, 0x09	; 9
    2bee:	80 93 d6 01 	sts	0x01D6, r24
				break;
    2bf2:	aa c1       	rjmp	.+852    	; 0x2f48 <main+0x13b6>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 44 1b 	call	0x3688	; 0x3688 <malloc>
    2bfc:	90 93 5c 01 	sts	0x015C, r25
    2c00:	80 93 5b 01 	sts	0x015B, r24
				memset(cur_menu, '\0', 2);
    2c04:	80 91 5b 01 	lds	r24, 0x015B
    2c08:	90 91 5c 01 	lds	r25, 0x015C
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	42 e0       	ldi	r20, 0x02	; 2
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	0e 94 80 1c 	call	0x3900	; 0x3900 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    2c18:	80 91 5b 01 	lds	r24, 0x015B
    2c1c:	90 91 5c 01 	lds	r25, 0x015C
    2c20:	20 91 59 01 	lds	r18, 0x0159
    2c24:	30 91 5a 01 	lds	r19, 0x015A
    2c28:	b9 01       	movw	r22, r18
    2c2a:	41 e0       	ldi	r20, 0x01	; 1
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	0e 94 77 1c 	call	0x38ee	; 0x38ee <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    2c32:	80 91 7e 01 	lds	r24, 0x017E
    2c36:	90 91 7f 01 	lds	r25, 0x017F
    2c3a:	a0 91 80 01 	lds	r26, 0x0180
    2c3e:	b0 91 81 01 	lds	r27, 0x0181
    2c42:	80 56       	subi	r24, 0x60	; 96
    2c44:	90 4f       	sbci	r25, 0xF0	; 240
    2c46:	af 4f       	sbci	r26, 0xFF	; 255
    2c48:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4a:	80 93 e4 01 	sts	0x01E4, r24
    2c4e:	90 93 e5 01 	sts	0x01E5, r25
    2c52:	a0 93 e6 01 	sts	0x01E6, r26
    2c56:	b0 93 e7 01 	sts	0x01E7, r27

				// Set next state
				cur_state = MENUINPUT;
    2c5a:	8a e0       	ldi	r24, 0x0A	; 10
    2c5c:	80 93 d6 01 	sts	0x01D6, r24

				// Announce the menu item
				announce(cur_menu, st_freq, wpm);
    2c60:	80 91 5b 01 	lds	r24, 0x015B
    2c64:	90 91 5c 01 	lds	r25, 0x015C
    2c68:	20 91 d0 01 	lds	r18, 0x01D0
    2c6c:	30 91 d1 01 	lds	r19, 0x01D1
    2c70:	40 91 f6 01 	lds	r20, 0x01F6
    2c74:	b9 01       	movw	r22, r18
    2c76:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>

				free(cur_menu);
    2c7a:	80 91 5b 01 	lds	r24, 0x015B
    2c7e:	90 91 5c 01 	lds	r25, 0x015C
    2c82:	0e 94 de 1b 	call	0x37bc	; 0x37bc <free>
				break;
    2c86:	60 c1       	rjmp	.+704    	; 0x2f48 <main+0x13b6>

			case MENUINPUT:
				text_buffer = malloc(20);
    2c88:	84 e1       	ldi	r24, 0x14	; 20
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 44 1b 	call	0x3688	; 0x3688 <malloc>
    2c90:	90 93 57 01 	sts	0x0157, r25
    2c94:	80 93 56 01 	sts	0x0156, r24
				memset(text_buffer, '\0', 20);
    2c98:	80 91 56 01 	lds	r24, 0x0156
    2c9c:	90 91 57 01 	lds	r25, 0x0157
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	44 e1       	ldi	r20, 0x14	; 20
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	0e 94 80 1c 	call	0x3900	; 0x3900 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    2cac:	20 91 7e 01 	lds	r18, 0x017E
    2cb0:	30 91 7f 01 	lds	r19, 0x017F
    2cb4:	40 91 80 01 	lds	r20, 0x0180
    2cb8:	50 91 81 01 	lds	r21, 0x0181
    2cbc:	80 91 e4 01 	lds	r24, 0x01E4
    2cc0:	90 91 e5 01 	lds	r25, 0x01E5
    2cc4:	a0 91 e6 01 	lds	r26, 0x01E6
    2cc8:	b0 91 e7 01 	lds	r27, 0x01E7
    2ccc:	28 17       	cp	r18, r24
    2cce:	39 07       	cpc	r19, r25
    2cd0:	4a 07       	cpc	r20, r26
    2cd2:	5b 07       	cpc	r21, r27
    2cd4:	08 f0       	brcs	.+2      	; 0x2cd8 <main+0x1146>
    2cd6:	17 c1       	rjmp	.+558    	; 0x2f06 <main+0x1374>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    2cd8:	80 91 d5 01 	lds	r24, 0x01D5
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	49 f5       	brne	.+82     	; 0x2d32 <main+0x11a0>
					{
						debounce(TRUE);
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>
						cur_menu_p++;
    2ce6:	80 91 59 01 	lds	r24, 0x0159
    2cea:	90 91 5a 01 	lds	r25, 0x015A
    2cee:	01 96       	adiw	r24, 0x01	; 1
    2cf0:	90 93 5a 01 	sts	0x015A, r25
    2cf4:	80 93 59 01 	sts	0x0159, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    2cf8:	80 91 59 01 	lds	r24, 0x0159
    2cfc:	90 91 5a 01 	lds	r25, 0x015A
    2d00:	fc 01       	movw	r30, r24
    2d02:	80 81       	ld	r24, Z
    2d04:	88 23       	and	r24, r24
    2d06:	89 f4       	brne	.+34     	; 0x2d2a <main+0x1198>
						{
							cur_state = IDLE;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	80 93 d6 01 	sts	0x01D6, r24
							cur_mode = default_mode;
    2d0e:	80 91 83 01 	lds	r24, 0x0183
    2d12:	80 93 b8 01 	sts	0x01B8, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
    2d16:	20 91 f6 01 	lds	r18, 0x01F6
    2d1a:	86 e3       	ldi	r24, 0x36	; 54
    2d1c:	91 e0       	ldi	r25, 0x01	; 1
    2d1e:	60 e9       	ldi	r22, 0x90	; 144
    2d20:	71 e0       	ldi	r23, 0x01	; 1
    2d22:	42 2f       	mov	r20, r18
    2d24:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2d28:	00 c1       	rjmp	.+512    	; 0x2f2a <main+0x1398>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
						}
						else
							cur_state = MENUANNOUNCE;
    2d2a:	89 e0       	ldi	r24, 0x09	; 9
    2d2c:	80 93 d6 01 	sts	0x01D6, r24
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2d30:	fc c0       	rjmp	.+504    	; 0x2f2a <main+0x1398>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    2d32:	80 91 d3 01 	lds	r24, 0x01D3
    2d36:	81 30       	cpi	r24, 0x01	; 1
    2d38:	09 f0       	breq	.+2      	; 0x2d3c <main+0x11aa>
    2d3a:	f6 c0       	rjmp	.+492    	; 0x2f28 <main+0x1396>
					{
						// need to clear the button buffer
						debounce(TRUE);
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	0e 94 95 04 	call	0x92a	; 0x92a <debounce>

						switch(*cur_menu_p)
    2d42:	80 91 59 01 	lds	r24, 0x0159
    2d46:	90 91 5a 01 	lds	r25, 0x015A
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	80 81       	ld	r24, Z
    2d4e:	88 2f       	mov	r24, r24
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	83 35       	cpi	r24, 0x53	; 83
    2d54:	91 05       	cpc	r25, r1
    2d56:	a1 f0       	breq	.+40     	; 0x2d80 <main+0x11ee>
    2d58:	84 35       	cpi	r24, 0x54	; 84
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	4c f4       	brge	.+18     	; 0x2d70 <main+0x11de>
    2d5e:	8b 34       	cpi	r24, 0x4B	; 75
    2d60:	91 05       	cpc	r25, r1
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <main+0x11d4>
    2d64:	83 c0       	rjmp	.+262    	; 0x2e6c <main+0x12da>
    2d66:	82 35       	cpi	r24, 0x52	; 82
    2d68:	91 05       	cpc	r25, r1
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <main+0x11dc>
    2d6c:	64 c0       	rjmp	.+200    	; 0x2e36 <main+0x12a4>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2d6e:	dd c0       	rjmp	.+442    	; 0x2f2a <main+0x1398>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    2d70:	86 35       	cpi	r24, 0x56	; 86
    2d72:	91 05       	cpc	r25, r1
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <main+0x11e6>
    2d76:	70 c0       	rjmp	.+224    	; 0x2e58 <main+0x12c6>
    2d78:	87 35       	cpi	r24, 0x57	; 87
    2d7a:	91 05       	cpc	r25, r1
    2d7c:	21 f1       	breq	.+72     	; 0x2dc6 <main+0x1234>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2d7e:	d5 c0       	rjmp	.+426    	; 0x2f2a <main+0x1398>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    2d80:	80 91 7e 01 	lds	r24, 0x017E
    2d84:	90 91 7f 01 	lds	r25, 0x017F
    2d88:	a0 91 80 01 	lds	r26, 0x0180
    2d8c:	b0 91 81 01 	lds	r27, 0x0181
    2d90:	80 56       	subi	r24, 0x60	; 96
    2d92:	90 4f       	sbci	r25, 0xF0	; 240
    2d94:	af 4f       	sbci	r26, 0xFF	; 255
    2d96:	bf 4f       	sbci	r27, 0xFF	; 255
    2d98:	80 93 e4 01 	sts	0x01E4, r24
    2d9c:	90 93 e5 01 	sts	0x01E5, r25
    2da0:	a0 93 e6 01 	sts	0x01E6, r26
    2da4:	b0 93 e7 01 	sts	0x01E7, r27
							cur_mode = SETWPM;
    2da8:	85 e0       	ldi	r24, 0x05	; 5
    2daa:	80 93 b8 01 	sts	0x01B8, r24

							announce("R", st_freq, wpm);
    2dae:	20 91 d0 01 	lds	r18, 0x01D0
    2db2:	30 91 d1 01 	lds	r19, 0x01D1
    2db6:	40 91 f6 01 	lds	r20, 0x01F6
    2dba:	84 e3       	ldi	r24, 0x34	; 52
    2dbc:	91 e0       	ldi	r25, 0x01	; 1
    2dbe:	b9 01       	movw	r22, r18
    2dc0:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
							break;
    2dc4:	b2 c0       	rjmp	.+356    	; 0x2f2a <main+0x1398>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	80 93 d6 01 	sts	0x01D6, r24
							cur_mode = default_mode;
    2dcc:	80 91 83 01 	lds	r24, 0x0183
    2dd0:	80 93 b8 01 	sts	0x01B8, r24

							sprintf(text_buffer, "%d", wpm);
    2dd4:	40 91 56 01 	lds	r20, 0x0156
    2dd8:	50 91 57 01 	lds	r21, 0x0157
    2ddc:	80 91 f6 01 	lds	r24, 0x01F6
    2de0:	28 2f       	mov	r18, r24
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <main+0x1254>
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <main+0x1256>
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <main+0x1258>
    2dea:	8d b7       	in	r24, 0x3d	; 61
    2dec:	9e b7       	in	r25, 0x3e	; 62
    2dee:	01 96       	adiw	r24, 0x01	; 1
    2df0:	fc 01       	movw	r30, r24
    2df2:	51 83       	std	Z+1, r21	; 0x01
    2df4:	40 83       	st	Z, r20
    2df6:	42 e4       	ldi	r20, 0x42	; 66
    2df8:	51 e0       	ldi	r21, 0x01	; 1
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	53 83       	std	Z+3, r21	; 0x03
    2dfe:	42 83       	std	Z+2, r20	; 0x02
    2e00:	fc 01       	movw	r30, r24
    2e02:	35 83       	std	Z+5, r19	; 0x05
    2e04:	24 83       	std	Z+4, r18	; 0x04
    2e06:	0e 94 98 1c 	call	0x3930	; 0x3930 <sprintf>
    2e0a:	8d b7       	in	r24, 0x3d	; 61
    2e0c:	9e b7       	in	r25, 0x3e	; 62
    2e0e:	06 96       	adiw	r24, 0x06	; 6
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	9e bf       	out	0x3e, r25	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq, wpm);
    2e1a:	80 91 56 01 	lds	r24, 0x0156
    2e1e:	90 91 57 01 	lds	r25, 0x0157
    2e22:	20 91 d0 01 	lds	r18, 0x01D0
    2e26:	30 91 d1 01 	lds	r19, 0x01D1
    2e2a:	40 91 f6 01 	lds	r20, 0x01F6
    2e2e:	b9 01       	movw	r22, r18
    2e30:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
							break;
    2e34:	7a c0       	rjmp	.+244    	; 0x2f2a <main+0x1398>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    2e36:	10 92 d6 01 	sts	0x01D6, r1
							cur_mode = RECORD;
    2e3a:	87 e0       	ldi	r24, 0x07	; 7
    2e3c:	80 93 b8 01 	sts	0x01B8, r24

							announce("R", st_freq, wpm);
    2e40:	20 91 d0 01 	lds	r18, 0x01D0
    2e44:	30 91 d1 01 	lds	r19, 0x01D1
    2e48:	40 91 f6 01 	lds	r20, 0x01F6
    2e4c:	84 e3       	ldi	r24, 0x34	; 52
    2e4e:	91 e0       	ldi	r25, 0x01	; 1
    2e50:	b9 01       	movw	r22, r18
    2e52:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
							break;
    2e56:	69 c0       	rjmp	.+210    	; 0x2f2a <main+0x1398>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	80 93 d6 01 	sts	0x01D6, r24
							cur_mode = default_mode;
    2e5e:	80 91 83 01 	lds	r24, 0x0183
    2e62:	80 93 b8 01 	sts	0x01B8, r24

							read_voltage();
    2e66:	0e 94 2f 07 	call	0xe5e	; 0xe5e <read_voltage>
							break;
    2e6a:	5f c0       	rjmp	.+190    	; 0x2f2a <main+0x1398>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    2e6c:	80 91 83 01 	lds	r24, 0x0183
    2e70:	88 23       	and	r24, r24
    2e72:	29 f5       	brne	.+74     	; 0x2ebe <main+0x132c>
							{
								default_mode = SK;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	80 93 83 01 	sts	0x0183, r24
								cur_state = IDLE;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	80 93 d6 01 	sts	0x01D6, r24
								cur_mode = default_mode;
    2e80:	80 91 83 01 	lds	r24, 0x0183
    2e84:	80 93 b8 01 	sts	0x01B8, r24
								eeprom_busy_wait();
    2e88:	8f e3       	ldi	r24, 0x3F	; 63
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 2f       	mov	r24, r24
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	82 70       	andi	r24, 0x02	; 2
    2e96:	90 70       	andi	r25, 0x00	; 0
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	b1 f7       	brne	.-20     	; 0x2e88 <main+0x12f6>
								eeprom_write_byte(&ee_keyer, FALSE);
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__eewr_byte_m168>

								announce("S", st_freq, wpm);
    2ea6:	20 91 d0 01 	lds	r18, 0x01D0
    2eaa:	30 91 d1 01 	lds	r19, 0x01D1
    2eae:	40 91 f6 01 	lds	r20, 0x01F6
    2eb2:	80 e3       	ldi	r24, 0x30	; 48
    2eb4:	91 e0       	ldi	r25, 0x01	; 1
    2eb6:	b9 01       	movw	r22, r18
    2eb8:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
								eeprom_busy_wait();
								eeprom_write_byte(&ee_keyer, TRUE);

								announce("K", st_freq, wpm);
							}
							break;
    2ebc:	36 c0       	rjmp	.+108    	; 0x2f2a <main+0x1398>

								announce("S", st_freq, wpm);
							}
							else
							{
								default_mode = KEYER;
    2ebe:	10 92 83 01 	sts	0x0183, r1
								cur_state = IDLE;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	80 93 d6 01 	sts	0x01D6, r24
								cur_mode = default_mode;
    2ec8:	80 91 83 01 	lds	r24, 0x0183
    2ecc:	80 93 b8 01 	sts	0x01B8, r24
								eeprom_busy_wait();
    2ed0:	8f e3       	ldi	r24, 0x3F	; 63
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	80 81       	ld	r24, Z
    2ed8:	88 2f       	mov	r24, r24
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	82 70       	andi	r24, 0x02	; 2
    2ede:	90 70       	andi	r25, 0x00	; 0
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	b1 f7       	brne	.-20     	; 0x2ed0 <main+0x133e>
								eeprom_write_byte(&ee_keyer, TRUE);
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__eewr_byte_m168>

								announce("K", st_freq, wpm);
    2eee:	20 91 d0 01 	lds	r18, 0x01D0
    2ef2:	30 91 d1 01 	lds	r19, 0x01D1
    2ef6:	40 91 f6 01 	lds	r20, 0x01F6
    2efa:	85 e4       	ldi	r24, 0x45	; 69
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	b9 01       	movw	r22, r18
    2f00:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
							}
							break;
    2f04:	12 c0       	rjmp	.+36     	; 0x2f2a <main+0x1398>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	80 93 d6 01 	sts	0x01D6, r24
					cur_mode = default_mode;
    2f0c:	80 91 83 01 	lds	r24, 0x0183
    2f10:	80 93 b8 01 	sts	0x01B8, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    2f14:	20 91 f6 01 	lds	r18, 0x01F6
    2f18:	86 e3       	ldi	r24, 0x36	; 54
    2f1a:	91 e0       	ldi	r25, 0x01	; 1
    2f1c:	60 e9       	ldi	r22, 0x90	; 144
    2f1e:	71 e0       	ldi	r23, 0x01	; 1
    2f20:	42 2f       	mov	r20, r18
    2f22:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    2f26:	01 c0       	rjmp	.+2      	; 0x2f2a <main+0x1398>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2f28:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
				}

				free(text_buffer);
    2f2a:	80 91 56 01 	lds	r24, 0x0156
    2f2e:	90 91 57 01 	lds	r25, 0x0157
    2f32:	0e 94 de 1b 	call	0x37bc	; 0x37bc <free>
				break;
    2f36:	08 c0       	rjmp	.+16     	; 0x2f48 <main+0x13b6>

			default:
				cur_state = IDLE;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	80 93 d6 01 	sts	0x01D6, r24
				cur_mode = default_mode;
    2f3e:	80 91 83 01 	lds	r24, 0x0183
    2f42:	80 93 b8 01 	sts	0x01B8, r24
				break;
    2f46:	00 00       	nop
			}
			break;
    2f48:	35 c3       	rjmp	.+1642   	; 0x35b4 <main+0x1a22>

		case SETWPM:
			if(cur_timer < cur_state_end)
    2f4a:	20 91 7e 01 	lds	r18, 0x017E
    2f4e:	30 91 7f 01 	lds	r19, 0x017F
    2f52:	40 91 80 01 	lds	r20, 0x0180
    2f56:	50 91 81 01 	lds	r21, 0x0181
    2f5a:	80 91 e4 01 	lds	r24, 0x01E4
    2f5e:	90 91 e5 01 	lds	r25, 0x01E5
    2f62:	a0 91 e6 01 	lds	r26, 0x01E6
    2f66:	b0 91 e7 01 	lds	r27, 0x01E7
    2f6a:	28 17       	cp	r18, r24
    2f6c:	39 07       	cpc	r19, r25
    2f6e:	4a 07       	cpc	r20, r26
    2f70:	5b 07       	cpc	r21, r27
    2f72:	08 f0       	brcs	.+2      	; 0x2f76 <main+0x13e4>
    2f74:	63 c0       	rjmp	.+198    	; 0x303c <main+0x14aa>
			{
				if(cmd_btn == PRESS)
    2f76:	80 91 d5 01 	lds	r24, 0x01D5
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	69 f5       	brne	.+90     	; 0x2fd8 <main+0x1446>
				{
					if(wpm < MAX_WPM)
    2f7e:	80 91 f6 01 	lds	r24, 0x01F6
    2f82:	88 32       	cpi	r24, 0x28	; 40
    2f84:	28 f4       	brcc	.+10     	; 0x2f90 <main+0x13fe>
						wpm++;
    2f86:	80 91 f6 01 	lds	r24, 0x01F6
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	80 93 f6 01 	sts	0x01F6, r24
					set_wpm(wpm);
    2f90:	80 91 f6 01 	lds	r24, 0x01F6
    2f94:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2f98:	80 91 7e 01 	lds	r24, 0x017E
    2f9c:	90 91 7f 01 	lds	r25, 0x017F
    2fa0:	a0 91 80 01 	lds	r26, 0x0180
    2fa4:	b0 91 81 01 	lds	r27, 0x0181
    2fa8:	80 56       	subi	r24, 0x60	; 96
    2faa:	90 4f       	sbci	r25, 0xF0	; 240
    2fac:	af 4f       	sbci	r26, 0xFF	; 255
    2fae:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb0:	80 93 e4 01 	sts	0x01E4, r24
    2fb4:	90 93 e5 01 	sts	0x01E5, r25
    2fb8:	a0 93 e6 01 	sts	0x01E6, r26
    2fbc:	b0 93 e7 01 	sts	0x01E7, r27
					announce("I", st_freq, wpm);
    2fc0:	20 91 d0 01 	lds	r18, 0x01D0
    2fc4:	30 91 d1 01 	lds	r19, 0x01D1
    2fc8:	40 91 f6 01 	lds	r20, 0x01F6
    2fcc:	87 e4       	ldi	r24, 0x47	; 71
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	b9 01       	movw	r22, r18
    2fd2:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    2fd6:	7a c0       	rjmp	.+244    	; 0x30cc <main+0x153a>
				}
				else if(msg_btn == PRESS)
    2fd8:	80 91 d3 01 	lds	r24, 0x01D3
    2fdc:	81 30       	cpi	r24, 0x01	; 1
    2fde:	09 f0       	breq	.+2      	; 0x2fe2 <main+0x1450>
    2fe0:	75 c0       	rjmp	.+234    	; 0x30cc <main+0x153a>
				{
					if(wpm > MIN_WPM)
    2fe2:	80 91 f6 01 	lds	r24, 0x01F6
    2fe6:	86 30       	cpi	r24, 0x06	; 6
    2fe8:	28 f0       	brcs	.+10     	; 0x2ff4 <main+0x1462>
						wpm--;
    2fea:	80 91 f6 01 	lds	r24, 0x01F6
    2fee:	81 50       	subi	r24, 0x01	; 1
    2ff0:	80 93 f6 01 	sts	0x01F6, r24
					set_wpm(wpm);
    2ff4:	80 91 f6 01 	lds	r24, 0x01F6
    2ff8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2ffc:	80 91 7e 01 	lds	r24, 0x017E
    3000:	90 91 7f 01 	lds	r25, 0x017F
    3004:	a0 91 80 01 	lds	r26, 0x0180
    3008:	b0 91 81 01 	lds	r27, 0x0181
    300c:	80 56       	subi	r24, 0x60	; 96
    300e:	90 4f       	sbci	r25, 0xF0	; 240
    3010:	af 4f       	sbci	r26, 0xFF	; 255
    3012:	bf 4f       	sbci	r27, 0xFF	; 255
    3014:	80 93 e4 01 	sts	0x01E4, r24
    3018:	90 93 e5 01 	sts	0x01E5, r25
    301c:	a0 93 e6 01 	sts	0x01E6, r26
    3020:	b0 93 e7 01 	sts	0x01E7, r27
					announce("I", st_freq, wpm);
    3024:	20 91 d0 01 	lds	r18, 0x01D0
    3028:	30 91 d1 01 	lds	r19, 0x01D1
    302c:	40 91 f6 01 	lds	r20, 0x01F6
    3030:	87 e4       	ldi	r24, 0x47	; 71
    3032:	91 e0       	ldi	r25, 0x01	; 1
    3034:	b9 01       	movw	r22, r18
    3036:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
    303a:	48 c0       	rjmp	.+144    	; 0x30cc <main+0x153a>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_busy_wait();
    303c:	8f e3       	ldi	r24, 0x3F	; 63
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	fc 01       	movw	r30, r24
    3042:	80 81       	ld	r24, Z
    3044:	88 2f       	mov	r24, r24
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	82 70       	andi	r24, 0x02	; 2
    304a:	90 70       	andi	r25, 0x00	; 0
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	b1 f7       	brne	.-20     	; 0x303c <main+0x14aa>
				eeprom_write_byte(&ee_wpm, wpm);
    3050:	20 91 f6 01 	lds	r18, 0x01F6
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	62 2f       	mov	r22, r18
    305a:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <__eewr_byte_m168>

				cur_state = IDLE;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	80 93 d6 01 	sts	0x01D6, r24
				cur_mode = default_mode;
    3064:	80 91 83 01 	lds	r24, 0x0183
    3068:	80 93 b8 01 	sts	0x01B8, r24

				sprintf(text_buffer, "%d", wpm);
    306c:	40 91 56 01 	lds	r20, 0x0156
    3070:	50 91 57 01 	lds	r21, 0x0157
    3074:	80 91 f6 01 	lds	r24, 0x01F6
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	00 d0       	rcall	.+0      	; 0x307e <main+0x14ec>
    307e:	00 d0       	rcall	.+0      	; 0x3080 <main+0x14ee>
    3080:	00 d0       	rcall	.+0      	; 0x3082 <main+0x14f0>
    3082:	8d b7       	in	r24, 0x3d	; 61
    3084:	9e b7       	in	r25, 0x3e	; 62
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	fc 01       	movw	r30, r24
    308a:	51 83       	std	Z+1, r21	; 0x01
    308c:	40 83       	st	Z, r20
    308e:	42 e4       	ldi	r20, 0x42	; 66
    3090:	51 e0       	ldi	r21, 0x01	; 1
    3092:	fc 01       	movw	r30, r24
    3094:	53 83       	std	Z+3, r21	; 0x03
    3096:	42 83       	std	Z+2, r20	; 0x02
    3098:	fc 01       	movw	r30, r24
    309a:	35 83       	std	Z+5, r19	; 0x05
    309c:	24 83       	std	Z+4, r18	; 0x04
    309e:	0e 94 98 1c 	call	0x3930	; 0x3930 <sprintf>
    30a2:	8d b7       	in	r24, 0x3d	; 61
    30a4:	9e b7       	in	r25, 0x3e	; 62
    30a6:	06 96       	adiw	r24, 0x06	; 6
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	9e bf       	out	0x3e, r25	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq, wpm);
    30b2:	80 91 56 01 	lds	r24, 0x0156
    30b6:	90 91 57 01 	lds	r25, 0x0157
    30ba:	20 91 d0 01 	lds	r18, 0x01D0
    30be:	30 91 d1 01 	lds	r19, 0x01D1
    30c2:	40 91 f6 01 	lds	r20, 0x01F6
    30c6:	b9 01       	movw	r22, r18
    30c8:	0e 94 cc 06 	call	0xd98	; 0xd98 <announce>
			}
			break;
    30cc:	73 c2       	rjmp	.+1254   	; 0x35b4 <main+0x1a22>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    30ce:	80 91 ec 01 	lds	r24, 0x01EC
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	61 f0       	breq	.+24     	; 0x30ee <main+0x155c>
    30d6:	80 91 d2 01 	lds	r24, 0x01D2
    30da:	81 30       	cpi	r24, 0x01	; 1
    30dc:	41 f0       	breq	.+16     	; 0x30ee <main+0x155c>
    30de:	80 91 d5 01 	lds	r24, 0x01D5
    30e2:	81 30       	cpi	r24, 0x01	; 1
    30e4:	21 f0       	breq	.+8      	; 0x30ee <main+0x155c>
    30e6:	80 91 d3 01 	lds	r24, 0x01D3
    30ea:	81 30       	cpi	r24, 0x01	; 1
    30ec:	e9 f5       	brne	.+122    	; 0x3168 <main+0x15d6>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    30ee:	80 91 ff 01 	lds	r24, 0x01FF
    30f2:	90 91 00 02 	lds	r25, 0x0200
    30f6:	21 e4       	ldi	r18, 0x41	; 65
    30f8:	31 e0       	ldi	r19, 0x01	; 1
    30fa:	b9 01       	movw	r22, r18
    30fc:	41 e0       	ldi	r20, 0x01	; 1
    30fe:	50 e0       	ldi	r21, 0x00	; 0
    3100:	0e 94 77 1c 	call	0x38ee	; 0x38ee <memcpy>
				cur_char_p = announce_buffer;
    3104:	80 91 ff 01 	lds	r24, 0x01FF
    3108:	90 91 00 02 	lds	r25, 0x0200
    310c:	90 93 55 01 	sts	0x0155, r25
    3110:	80 93 54 01 	sts	0x0154, r24
				cur_character = '\0';
    3114:	10 92 58 01 	sts	0x0158, r1

				// Set back into previous mode
				mute_end = cur_timer;
    3118:	80 91 7e 01 	lds	r24, 0x017E
    311c:	90 91 7f 01 	lds	r25, 0x017F
    3120:	a0 91 80 01 	lds	r26, 0x0180
    3124:	b0 91 81 01 	lds	r27, 0x0181
    3128:	80 93 e8 01 	sts	0x01E8, r24
    312c:	90 93 e9 01 	sts	0x01E9, r25
    3130:	a0 93 ea 01 	sts	0x01EA, r26
    3134:	b0 93 eb 01 	sts	0x01EB, r27
				cur_mode = prev_mode;
    3138:	80 91 ce 01 	lds	r24, 0x01CE
    313c:	80 93 b8 01 	sts	0x01B8, r24
				cur_state = prev_state;
    3140:	80 91 88 01 	lds	r24, 0x0188
    3144:	80 93 d6 01 	sts	0x01D6, r24
				cur_state_end = prev_state_end;
    3148:	80 91 ca 01 	lds	r24, 0x01CA
    314c:	90 91 cb 01 	lds	r25, 0x01CB
    3150:	a0 91 cc 01 	lds	r26, 0x01CC
    3154:	b0 91 cd 01 	lds	r27, 0x01CD
    3158:	80 93 e4 01 	sts	0x01E4, r24
    315c:	90 93 e5 01 	sts	0x01E5, r25
    3160:	a0 93 e6 01 	sts	0x01E6, r26
    3164:	b0 93 e7 01 	sts	0x01E7, r27
			}

			switch(cur_state)
    3168:	80 91 d6 01 	lds	r24, 0x01D6
    316c:	88 2f       	mov	r24, r24
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	84 30       	cpi	r24, 0x04	; 4
    3172:	91 05       	cpc	r25, r1
    3174:	44 f4       	brge	.+16     	; 0x3186 <main+0x15f4>
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	91 05       	cpc	r25, r1
    317a:	0c f0       	brlt	.+2      	; 0x317e <main+0x15ec>
    317c:	bb c1       	rjmp	.+886    	; 0x34f4 <main+0x1962>
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	91 05       	cpc	r25, r1
    3182:	31 f0       	breq	.+12     	; 0x3190 <main+0x15fe>
    3184:	14 c2       	rjmp	.+1064   	; 0x35ae <main+0x1a1c>
    3186:	87 30       	cpi	r24, 0x07	; 7
    3188:	91 05       	cpc	r25, r1
    318a:	0c f0       	brlt	.+2      	; 0x318e <main+0x15fc>
    318c:	10 c2       	rjmp	.+1056   	; 0x35ae <main+0x1a1c>
    318e:	ef c1       	rjmp	.+990    	; 0x356e <main+0x19dc>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    3190:	20 91 54 01 	lds	r18, 0x0154
    3194:	30 91 55 01 	lds	r19, 0x0155
    3198:	80 91 ff 01 	lds	r24, 0x01FF
    319c:	90 91 00 02 	lds	r25, 0x0200
    31a0:	28 17       	cp	r18, r24
    31a2:	39 07       	cpc	r19, r25
    31a4:	c9 f4       	brne	.+50     	; 0x31d8 <main+0x1646>
    31a6:	80 91 58 01 	lds	r24, 0x0158
    31aa:	88 23       	and	r24, r24
    31ac:	a9 f4       	brne	.+42     	; 0x31d8 <main+0x1646>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    31ae:	80 91 54 01 	lds	r24, 0x0154
    31b2:	90 91 55 01 	lds	r25, 0x0155
    31b6:	fc 01       	movw	r30, r24
    31b8:	80 81       	ld	r24, Z
    31ba:	88 2f       	mov	r24, r24
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	80 97       	sbiw	r24, 0x20	; 32
    31c0:	88 59       	subi	r24, 0x98	; 152
    31c2:	9f 4f       	sbci	r25, 0xFF	; 255
    31c4:	98 87       	std	Y+8, r25	; 0x08
    31c6:	8f 83       	std	Y+7, r24	; 0x07
    31c8:	8f 81       	ldd	r24, Y+7	; 0x07
    31ca:	98 85       	ldd	r25, Y+8	; 0x08
    31cc:	fc 01       	movw	r30, r24
    31ce:	14 91       	lpm	r17, Z+
    31d0:	19 87       	std	Y+9, r17	; 0x09
    31d2:	89 85       	ldd	r24, Y+9	; 0x09
    31d4:	80 93 58 01 	sts	0x0158, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    31d8:	80 91 58 01 	lds	r24, 0x0158
    31dc:	88 23       	and	r24, r24
    31de:	09 f4       	brne	.+2      	; 0x31e2 <main+0x1650>
    31e0:	4b c1       	rjmp	.+662    	; 0x3478 <main+0x18e6>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    31e2:	80 91 58 01 	lds	r24, 0x0158
    31e6:	80 38       	cpi	r24, 0x80	; 128
    31e8:	29 f0       	breq	.+10     	; 0x31f4 <main+0x1662>
    31ea:	80 91 58 01 	lds	r24, 0x0158
    31ee:	8f 3f       	cpi	r24, 0xFF	; 255
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <main+0x1662>
    31f2:	79 c0       	rjmp	.+242    	; 0x32e6 <main+0x1754>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    31f4:	80 91 58 01 	lds	r24, 0x0158
    31f8:	80 38       	cpi	r24, 0x80	; 128
    31fa:	21 f5       	brne	.+72     	; 0x3244 <main+0x16b2>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    31fc:	20 91 89 01 	lds	r18, 0x0189
    3200:	30 91 8a 01 	lds	r19, 0x018A
    3204:	c9 01       	movw	r24, r18
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	82 0f       	add	r24, r18
    320c:	93 1f       	adc	r25, r19
    320e:	9c 01       	movw	r18, r24
    3210:	40 e0       	ldi	r20, 0x00	; 0
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	80 91 7e 01 	lds	r24, 0x017E
    3218:	90 91 7f 01 	lds	r25, 0x017F
    321c:	a0 91 80 01 	lds	r26, 0x0180
    3220:	b0 91 81 01 	lds	r27, 0x0181
    3224:	82 0f       	add	r24, r18
    3226:	93 1f       	adc	r25, r19
    3228:	a4 1f       	adc	r26, r20
    322a:	b5 1f       	adc	r27, r21
    322c:	80 93 e4 01 	sts	0x01E4, r24
    3230:	90 93 e5 01 	sts	0x01E5, r25
    3234:	a0 93 e6 01 	sts	0x01E6, r26
    3238:	b0 93 e7 01 	sts	0x01E7, r27
							cur_state = DAHDELAY;
    323c:	85 e0       	ldi	r24, 0x05	; 5
    323e:	80 93 d6 01 	sts	0x01D6, r24
    3242:	27 c0       	rjmp	.+78     	; 0x3292 <main+0x1700>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    3244:	20 91 89 01 	lds	r18, 0x0189
    3248:	30 91 8a 01 	lds	r19, 0x018A
    324c:	c9 01       	movw	r24, r18
    324e:	88 0f       	add	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	82 1b       	sub	r24, r18
    325c:	93 0b       	sbc	r25, r19
    325e:	9c 01       	movw	r18, r24
    3260:	40 e0       	ldi	r20, 0x00	; 0
    3262:	50 e0       	ldi	r21, 0x00	; 0
    3264:	80 91 7e 01 	lds	r24, 0x017E
    3268:	90 91 7f 01 	lds	r25, 0x017F
    326c:	a0 91 80 01 	lds	r26, 0x0180
    3270:	b0 91 81 01 	lds	r27, 0x0181
    3274:	82 0f       	add	r24, r18
    3276:	93 1f       	adc	r25, r19
    3278:	a4 1f       	adc	r26, r20
    327a:	b5 1f       	adc	r27, r21
    327c:	80 93 e4 01 	sts	0x01E4, r24
    3280:	90 93 e5 01 	sts	0x01E5, r25
    3284:	a0 93 e6 01 	sts	0x01E6, r26
    3288:	b0 93 e7 01 	sts	0x01E7, r27
							cur_state = DAHDELAY;
    328c:	85 e0       	ldi	r24, 0x05	; 5
    328e:	80 93 d6 01 	sts	0x01D6, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    3292:	80 91 54 01 	lds	r24, 0x0154
    3296:	90 91 55 01 	lds	r25, 0x0155
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	90 93 55 01 	sts	0x0155, r25
    32a0:	80 93 54 01 	sts	0x0154, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    32a4:	80 91 54 01 	lds	r24, 0x0154
    32a8:	90 91 55 01 	lds	r25, 0x0155
    32ac:	fc 01       	movw	r30, r24
    32ae:	80 81       	ld	r24, Z
    32b0:	88 23       	and	r24, r24
    32b2:	19 f4       	brne	.+6      	; 0x32ba <main+0x1728>
							cur_character = '\0';
    32b4:	10 92 58 01 	sts	0x0158, r1
    32b8:	15 c0       	rjmp	.+42     	; 0x32e4 <main+0x1752>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    32ba:	80 91 54 01 	lds	r24, 0x0154
    32be:	90 91 55 01 	lds	r25, 0x0155
    32c2:	fc 01       	movw	r30, r24
    32c4:	80 81       	ld	r24, Z
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	80 97       	sbiw	r24, 0x20	; 32
    32cc:	88 59       	subi	r24, 0x98	; 152
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	9b 87       	std	Y+11, r25	; 0x0b
    32d2:	8a 87       	std	Y+10, r24	; 0x0a
    32d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d8:	fc 01       	movw	r30, r24
    32da:	14 91       	lpm	r17, Z+
    32dc:	1c 87       	std	Y+12, r17	; 0x0c
    32de:	8c 85       	ldd	r24, Y+12	; 0x0c
    32e0:	80 93 58 01 	sts	0x0158, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    32e4:	c8 c0       	rjmp	.+400    	; 0x3476 <main+0x18e4>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    32e6:	80 91 58 01 	lds	r24, 0x0158
    32ea:	88 23       	and	r24, r24
    32ec:	0c f0       	brlt	.+2      	; 0x32f0 <main+0x175e>
    32ee:	62 c0       	rjmp	.+196    	; 0x33b4 <main+0x1822>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    32f0:	20 91 89 01 	lds	r18, 0x0189
    32f4:	30 91 8a 01 	lds	r19, 0x018A
    32f8:	c9 01       	movw	r24, r18
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	82 0f       	add	r24, r18
    3300:	93 1f       	adc	r25, r19
    3302:	9c 01       	movw	r18, r24
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	80 91 7e 01 	lds	r24, 0x017E
    330c:	90 91 7f 01 	lds	r25, 0x017F
    3310:	a0 91 80 01 	lds	r26, 0x0180
    3314:	b0 91 81 01 	lds	r27, 0x0181
    3318:	82 0f       	add	r24, r18
    331a:	93 1f       	adc	r25, r19
    331c:	a4 1f       	adc	r26, r20
    331e:	b5 1f       	adc	r27, r21
    3320:	80 93 e4 01 	sts	0x01E4, r24
    3324:	90 93 e5 01 	sts	0x01E5, r25
    3328:	a0 93 e6 01 	sts	0x01E6, r26
    332c:	b0 93 e7 01 	sts	0x01E7, r27
							cur_state = DAH;
    3330:	83 e0       	ldi	r24, 0x03	; 3
    3332:	80 93 d6 01 	sts	0x01D6, r24
							tx_start = cur_timer + TX_ON_DELAY;
    3336:	80 91 7e 01 	lds	r24, 0x017E
    333a:	90 91 7f 01 	lds	r25, 0x017F
    333e:	a0 91 80 01 	lds	r26, 0x0180
    3342:	b0 91 81 01 	lds	r27, 0x0181
    3346:	01 96       	adiw	r24, 0x01	; 1
    3348:	a1 1d       	adc	r26, r1
    334a:	b1 1d       	adc	r27, r1
    334c:	80 93 be 01 	sts	0x01BE, r24
    3350:	90 93 bf 01 	sts	0x01BF, r25
    3354:	a0 93 c0 01 	sts	0x01C0, r26
    3358:	b0 93 c1 01 	sts	0x01C1, r27
							tx_end = cur_state_end;
    335c:	80 91 e4 01 	lds	r24, 0x01E4
    3360:	90 91 e5 01 	lds	r25, 0x01E5
    3364:	a0 91 e6 01 	lds	r26, 0x01E6
    3368:	b0 91 e7 01 	lds	r27, 0x01E7
    336c:	80 93 01 02 	sts	0x0201, r24
    3370:	90 93 02 02 	sts	0x0202, r25
    3374:	a0 93 03 02 	sts	0x0203, r26
    3378:	b0 93 04 02 	sts	0x0204, r27
							mute_start = cur_timer;
    337c:	80 91 7e 01 	lds	r24, 0x017E
    3380:	90 91 7f 01 	lds	r25, 0x017F
    3384:	a0 91 80 01 	lds	r26, 0x0180
    3388:	b0 91 81 01 	lds	r27, 0x0181
    338c:	80 93 fb 01 	sts	0x01FB, r24
    3390:	90 93 fc 01 	sts	0x01FC, r25
    3394:	a0 93 fd 01 	sts	0x01FD, r26
    3398:	b0 93 fe 01 	sts	0x01FE, r27
							mute_end = UINT32_MAX;
    339c:	8f ef       	ldi	r24, 0xFF	; 255
    339e:	9f ef       	ldi	r25, 0xFF	; 255
    33a0:	dc 01       	movw	r26, r24
    33a2:	80 93 e8 01 	sts	0x01E8, r24
    33a6:	90 93 e9 01 	sts	0x01E9, r25
    33aa:	a0 93 ea 01 	sts	0x01EA, r26
    33ae:	b0 93 eb 01 	sts	0x01EB, r27
    33b2:	5c c0       	rjmp	.+184    	; 0x346c <main+0x18da>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    33b4:	80 91 89 01 	lds	r24, 0x0189
    33b8:	90 91 8a 01 	lds	r25, 0x018A
    33bc:	9c 01       	movw	r18, r24
    33be:	40 e0       	ldi	r20, 0x00	; 0
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	80 91 7e 01 	lds	r24, 0x017E
    33c6:	90 91 7f 01 	lds	r25, 0x017F
    33ca:	a0 91 80 01 	lds	r26, 0x0180
    33ce:	b0 91 81 01 	lds	r27, 0x0181
    33d2:	82 0f       	add	r24, r18
    33d4:	93 1f       	adc	r25, r19
    33d6:	a4 1f       	adc	r26, r20
    33d8:	b5 1f       	adc	r27, r21
    33da:	80 93 e4 01 	sts	0x01E4, r24
    33de:	90 93 e5 01 	sts	0x01E5, r25
    33e2:	a0 93 e6 01 	sts	0x01E6, r26
    33e6:	b0 93 e7 01 	sts	0x01E7, r27
							cur_state = DIT;
    33ea:	82 e0       	ldi	r24, 0x02	; 2
    33ec:	80 93 d6 01 	sts	0x01D6, r24
							tx_start = cur_timer + TX_ON_DELAY;
    33f0:	80 91 7e 01 	lds	r24, 0x017E
    33f4:	90 91 7f 01 	lds	r25, 0x017F
    33f8:	a0 91 80 01 	lds	r26, 0x0180
    33fc:	b0 91 81 01 	lds	r27, 0x0181
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	a1 1d       	adc	r26, r1
    3404:	b1 1d       	adc	r27, r1
    3406:	80 93 be 01 	sts	0x01BE, r24
    340a:	90 93 bf 01 	sts	0x01BF, r25
    340e:	a0 93 c0 01 	sts	0x01C0, r26
    3412:	b0 93 c1 01 	sts	0x01C1, r27
							tx_end = cur_state_end;
    3416:	80 91 e4 01 	lds	r24, 0x01E4
    341a:	90 91 e5 01 	lds	r25, 0x01E5
    341e:	a0 91 e6 01 	lds	r26, 0x01E6
    3422:	b0 91 e7 01 	lds	r27, 0x01E7
    3426:	80 93 01 02 	sts	0x0201, r24
    342a:	90 93 02 02 	sts	0x0202, r25
    342e:	a0 93 03 02 	sts	0x0203, r26
    3432:	b0 93 04 02 	sts	0x0204, r27
							mute_start = cur_timer;
    3436:	80 91 7e 01 	lds	r24, 0x017E
    343a:	90 91 7f 01 	lds	r25, 0x017F
    343e:	a0 91 80 01 	lds	r26, 0x0180
    3442:	b0 91 81 01 	lds	r27, 0x0181
    3446:	80 93 fb 01 	sts	0x01FB, r24
    344a:	90 93 fc 01 	sts	0x01FC, r25
    344e:	a0 93 fd 01 	sts	0x01FD, r26
    3452:	b0 93 fe 01 	sts	0x01FE, r27
							mute_end = UINT32_MAX;
    3456:	8f ef       	ldi	r24, 0xFF	; 255
    3458:	9f ef       	ldi	r25, 0xFF	; 255
    345a:	dc 01       	movw	r26, r24
    345c:	80 93 e8 01 	sts	0x01E8, r24
    3460:	90 93 e9 01 	sts	0x01E9, r25
    3464:	a0 93 ea 01 	sts	0x01EA, r26
    3468:	b0 93 eb 01 	sts	0x01EB, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    346c:	80 91 58 01 	lds	r24, 0x0158
    3470:	88 0f       	add	r24, r24
    3472:	80 93 58 01 	sts	0x0158, r24
    3476:	3d c0       	rjmp	.+122    	; 0x34f2 <main+0x1960>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    3478:	80 91 ff 01 	lds	r24, 0x01FF
    347c:	90 91 00 02 	lds	r25, 0x0200
    3480:	21 e4       	ldi	r18, 0x41	; 65
    3482:	31 e0       	ldi	r19, 0x01	; 1
    3484:	b9 01       	movw	r22, r18
    3486:	41 e0       	ldi	r20, 0x01	; 1
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	0e 94 77 1c 	call	0x38ee	; 0x38ee <memcpy>
					cur_char_p = announce_buffer;
    348e:	80 91 ff 01 	lds	r24, 0x01FF
    3492:	90 91 00 02 	lds	r25, 0x0200
    3496:	90 93 55 01 	sts	0x0155, r25
    349a:	80 93 54 01 	sts	0x0154, r24
					cur_character = '\0';
    349e:	10 92 58 01 	sts	0x0158, r1

					// Set back into previous mode
					mute_end = cur_timer;
    34a2:	80 91 7e 01 	lds	r24, 0x017E
    34a6:	90 91 7f 01 	lds	r25, 0x017F
    34aa:	a0 91 80 01 	lds	r26, 0x0180
    34ae:	b0 91 81 01 	lds	r27, 0x0181
    34b2:	80 93 e8 01 	sts	0x01E8, r24
    34b6:	90 93 e9 01 	sts	0x01E9, r25
    34ba:	a0 93 ea 01 	sts	0x01EA, r26
    34be:	b0 93 eb 01 	sts	0x01EB, r27
					cur_mode = prev_mode;
    34c2:	80 91 ce 01 	lds	r24, 0x01CE
    34c6:	80 93 b8 01 	sts	0x01B8, r24
					cur_state = prev_state;
    34ca:	80 91 88 01 	lds	r24, 0x0188
    34ce:	80 93 d6 01 	sts	0x01D6, r24
					cur_state_end = prev_state_end;
    34d2:	80 91 ca 01 	lds	r24, 0x01CA
    34d6:	90 91 cb 01 	lds	r25, 0x01CB
    34da:	a0 91 cc 01 	lds	r26, 0x01CC
    34de:	b0 91 cd 01 	lds	r27, 0x01CD
    34e2:	80 93 e4 01 	sts	0x01E4, r24
    34e6:	90 93 e5 01 	sts	0x01E5, r25
    34ea:	a0 93 e6 01 	sts	0x01E6, r26
    34ee:	b0 93 e7 01 	sts	0x01E7, r27
				}
				break;
    34f2:	5e c0       	rjmp	.+188    	; 0x35b0 <main+0x1a1e>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    34f4:	20 91 7e 01 	lds	r18, 0x017E
    34f8:	30 91 7f 01 	lds	r19, 0x017F
    34fc:	40 91 80 01 	lds	r20, 0x0180
    3500:	50 91 81 01 	lds	r21, 0x0181
    3504:	80 91 e4 01 	lds	r24, 0x01E4
    3508:	90 91 e5 01 	lds	r25, 0x01E5
    350c:	a0 91 e6 01 	lds	r26, 0x01E6
    3510:	b0 91 e7 01 	lds	r27, 0x01E7
    3514:	82 17       	cp	r24, r18
    3516:	93 07       	cpc	r25, r19
    3518:	a4 07       	cpc	r26, r20
    351a:	b5 07       	cpc	r27, r21
    351c:	f0 f4       	brcc	.+60     	; 0x355a <main+0x19c8>
				{
					cur_state_end = cur_timer + dit_length;
    351e:	80 91 89 01 	lds	r24, 0x0189
    3522:	90 91 8a 01 	lds	r25, 0x018A
    3526:	9c 01       	movw	r18, r24
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	80 91 7e 01 	lds	r24, 0x017E
    3530:	90 91 7f 01 	lds	r25, 0x017F
    3534:	a0 91 80 01 	lds	r26, 0x0180
    3538:	b0 91 81 01 	lds	r27, 0x0181
    353c:	82 0f       	add	r24, r18
    353e:	93 1f       	adc	r25, r19
    3540:	a4 1f       	adc	r26, r20
    3542:	b5 1f       	adc	r27, r21
    3544:	80 93 e4 01 	sts	0x01E4, r24
    3548:	90 93 e5 01 	sts	0x01E5, r25
    354c:	a0 93 e6 01 	sts	0x01E6, r26
    3550:	b0 93 e7 01 	sts	0x01E7, r27
					cur_state = DITDELAY;
    3554:	84 e0       	ldi	r24, 0x04	; 4
    3556:	80 93 d6 01 	sts	0x01D6, r24
				}

				key_down = TRUE;
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	80 93 52 01 	sts	0x0152, r24
				sidetone_on = TRUE;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	80 93 50 01 	sts	0x0150, r24
				mute_on = TRUE;
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	80 93 51 01 	sts	0x0151, r24
				break;
    356c:	21 c0       	rjmp	.+66     	; 0x35b0 <main+0x1a1e>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    356e:	20 91 7e 01 	lds	r18, 0x017E
    3572:	30 91 7f 01 	lds	r19, 0x017F
    3576:	40 91 80 01 	lds	r20, 0x0180
    357a:	50 91 81 01 	lds	r21, 0x0181
    357e:	80 91 e4 01 	lds	r24, 0x01E4
    3582:	90 91 e5 01 	lds	r25, 0x01E5
    3586:	a0 91 e6 01 	lds	r26, 0x01E6
    358a:	b0 91 e7 01 	lds	r27, 0x01E7
    358e:	82 17       	cp	r24, r18
    3590:	93 07       	cpc	r25, r19
    3592:	a4 07       	cpc	r26, r20
    3594:	b5 07       	cpc	r27, r21
    3596:	18 f4       	brcc	.+6      	; 0x359e <main+0x1a0c>
					cur_state = IDLE;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	80 93 d6 01 	sts	0x01D6, r24

				key_down = FALSE;
    359e:	10 92 52 01 	sts	0x0152, r1
				sidetone_on = FALSE;
    35a2:	10 92 50 01 	sts	0x0150, r1
				mute_on = TRUE;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	80 93 51 01 	sts	0x0151, r24
				break;
    35ac:	01 c0       	rjmp	.+2      	; 0x35b0 <main+0x1a1e>

			default:
				break;
    35ae:	00 00       	nop
			}
			break;
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <main+0x1a22>
				break;
			}
			break;
		*/
		default:
			break;
    35b2:	00 00       	nop
		} // END switch(cur_mode)

	}
    35b4:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <main+0x86>

000035b8 <__mulsi3>:
    35b8:	62 9f       	mul	r22, r18
    35ba:	d0 01       	movw	r26, r0
    35bc:	73 9f       	mul	r23, r19
    35be:	f0 01       	movw	r30, r0
    35c0:	82 9f       	mul	r24, r18
    35c2:	e0 0d       	add	r30, r0
    35c4:	f1 1d       	adc	r31, r1
    35c6:	64 9f       	mul	r22, r20
    35c8:	e0 0d       	add	r30, r0
    35ca:	f1 1d       	adc	r31, r1
    35cc:	92 9f       	mul	r25, r18
    35ce:	f0 0d       	add	r31, r0
    35d0:	83 9f       	mul	r24, r19
    35d2:	f0 0d       	add	r31, r0
    35d4:	74 9f       	mul	r23, r20
    35d6:	f0 0d       	add	r31, r0
    35d8:	65 9f       	mul	r22, r21
    35da:	f0 0d       	add	r31, r0
    35dc:	99 27       	eor	r25, r25
    35de:	72 9f       	mul	r23, r18
    35e0:	b0 0d       	add	r27, r0
    35e2:	e1 1d       	adc	r30, r1
    35e4:	f9 1f       	adc	r31, r25
    35e6:	63 9f       	mul	r22, r19
    35e8:	b0 0d       	add	r27, r0
    35ea:	e1 1d       	adc	r30, r1
    35ec:	f9 1f       	adc	r31, r25
    35ee:	bd 01       	movw	r22, r26
    35f0:	cf 01       	movw	r24, r30
    35f2:	11 24       	eor	r1, r1
    35f4:	08 95       	ret

000035f6 <__udivmodhi4>:
    35f6:	aa 1b       	sub	r26, r26
    35f8:	bb 1b       	sub	r27, r27
    35fa:	51 e1       	ldi	r21, 0x11	; 17
    35fc:	07 c0       	rjmp	.+14     	; 0x360c <__udivmodhi4_ep>

000035fe <__udivmodhi4_loop>:
    35fe:	aa 1f       	adc	r26, r26
    3600:	bb 1f       	adc	r27, r27
    3602:	a6 17       	cp	r26, r22
    3604:	b7 07       	cpc	r27, r23
    3606:	10 f0       	brcs	.+4      	; 0x360c <__udivmodhi4_ep>
    3608:	a6 1b       	sub	r26, r22
    360a:	b7 0b       	sbc	r27, r23

0000360c <__udivmodhi4_ep>:
    360c:	88 1f       	adc	r24, r24
    360e:	99 1f       	adc	r25, r25
    3610:	5a 95       	dec	r21
    3612:	a9 f7       	brne	.-22     	; 0x35fe <__udivmodhi4_loop>
    3614:	80 95       	com	r24
    3616:	90 95       	com	r25
    3618:	bc 01       	movw	r22, r24
    361a:	cd 01       	movw	r24, r26
    361c:	08 95       	ret

0000361e <__divmodhi4>:
    361e:	97 fb       	bst	r25, 7
    3620:	09 2e       	mov	r0, r25
    3622:	07 26       	eor	r0, r23
    3624:	0a d0       	rcall	.+20     	; 0x363a <__divmodhi4_neg1>
    3626:	77 fd       	sbrc	r23, 7
    3628:	04 d0       	rcall	.+8      	; 0x3632 <__divmodhi4_neg2>
    362a:	e5 df       	rcall	.-54     	; 0x35f6 <__udivmodhi4>
    362c:	06 d0       	rcall	.+12     	; 0x363a <__divmodhi4_neg1>
    362e:	00 20       	and	r0, r0
    3630:	1a f4       	brpl	.+6      	; 0x3638 <__divmodhi4_exit>

00003632 <__divmodhi4_neg2>:
    3632:	70 95       	com	r23
    3634:	61 95       	neg	r22
    3636:	7f 4f       	sbci	r23, 0xFF	; 255

00003638 <__divmodhi4_exit>:
    3638:	08 95       	ret

0000363a <__divmodhi4_neg1>:
    363a:	f6 f7       	brtc	.-4      	; 0x3638 <__divmodhi4_exit>
    363c:	90 95       	com	r25
    363e:	81 95       	neg	r24
    3640:	9f 4f       	sbci	r25, 0xFF	; 255
    3642:	08 95       	ret

00003644 <__udivmodsi4>:
    3644:	a1 e2       	ldi	r26, 0x21	; 33
    3646:	1a 2e       	mov	r1, r26
    3648:	aa 1b       	sub	r26, r26
    364a:	bb 1b       	sub	r27, r27
    364c:	fd 01       	movw	r30, r26
    364e:	0d c0       	rjmp	.+26     	; 0x366a <__udivmodsi4_ep>

00003650 <__udivmodsi4_loop>:
    3650:	aa 1f       	adc	r26, r26
    3652:	bb 1f       	adc	r27, r27
    3654:	ee 1f       	adc	r30, r30
    3656:	ff 1f       	adc	r31, r31
    3658:	a2 17       	cp	r26, r18
    365a:	b3 07       	cpc	r27, r19
    365c:	e4 07       	cpc	r30, r20
    365e:	f5 07       	cpc	r31, r21
    3660:	20 f0       	brcs	.+8      	; 0x366a <__udivmodsi4_ep>
    3662:	a2 1b       	sub	r26, r18
    3664:	b3 0b       	sbc	r27, r19
    3666:	e4 0b       	sbc	r30, r20
    3668:	f5 0b       	sbc	r31, r21

0000366a <__udivmodsi4_ep>:
    366a:	66 1f       	adc	r22, r22
    366c:	77 1f       	adc	r23, r23
    366e:	88 1f       	adc	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	1a 94       	dec	r1
    3674:	69 f7       	brne	.-38     	; 0x3650 <__udivmodsi4_loop>
    3676:	60 95       	com	r22
    3678:	70 95       	com	r23
    367a:	80 95       	com	r24
    367c:	90 95       	com	r25
    367e:	9b 01       	movw	r18, r22
    3680:	ac 01       	movw	r20, r24
    3682:	bd 01       	movw	r22, r26
    3684:	cf 01       	movw	r24, r30
    3686:	08 95       	ret

00003688 <malloc>:
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	82 30       	cpi	r24, 0x02	; 2
    368e:	91 05       	cpc	r25, r1
    3690:	10 f4       	brcc	.+4      	; 0x3696 <malloc+0xe>
    3692:	82 e0       	ldi	r24, 0x02	; 2
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	e0 91 09 02 	lds	r30, 0x0209
    369a:	f0 91 0a 02 	lds	r31, 0x020A
    369e:	40 e0       	ldi	r20, 0x00	; 0
    36a0:	50 e0       	ldi	r21, 0x00	; 0
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	26 c0       	rjmp	.+76     	; 0x36f4 <malloc+0x6c>
    36a8:	60 81       	ld	r22, Z
    36aa:	71 81       	ldd	r23, Z+1	; 0x01
    36ac:	68 17       	cp	r22, r24
    36ae:	79 07       	cpc	r23, r25
    36b0:	e0 f0       	brcs	.+56     	; 0x36ea <malloc+0x62>
    36b2:	68 17       	cp	r22, r24
    36b4:	79 07       	cpc	r23, r25
    36b6:	81 f4       	brne	.+32     	; 0x36d8 <malloc+0x50>
    36b8:	82 81       	ldd	r24, Z+2	; 0x02
    36ba:	93 81       	ldd	r25, Z+3	; 0x03
    36bc:	21 15       	cp	r18, r1
    36be:	31 05       	cpc	r19, r1
    36c0:	31 f0       	breq	.+12     	; 0x36ce <malloc+0x46>
    36c2:	d9 01       	movw	r26, r18
    36c4:	13 96       	adiw	r26, 0x03	; 3
    36c6:	9c 93       	st	X, r25
    36c8:	8e 93       	st	-X, r24
    36ca:	12 97       	sbiw	r26, 0x02	; 2
    36cc:	2b c0       	rjmp	.+86     	; 0x3724 <malloc+0x9c>
    36ce:	90 93 0a 02 	sts	0x020A, r25
    36d2:	80 93 09 02 	sts	0x0209, r24
    36d6:	26 c0       	rjmp	.+76     	; 0x3724 <malloc+0x9c>
    36d8:	41 15       	cp	r20, r1
    36da:	51 05       	cpc	r21, r1
    36dc:	19 f0       	breq	.+6      	; 0x36e4 <malloc+0x5c>
    36de:	64 17       	cp	r22, r20
    36e0:	75 07       	cpc	r23, r21
    36e2:	18 f4       	brcc	.+6      	; 0x36ea <malloc+0x62>
    36e4:	ab 01       	movw	r20, r22
    36e6:	e9 01       	movw	r28, r18
    36e8:	df 01       	movw	r26, r30
    36ea:	9f 01       	movw	r18, r30
    36ec:	72 81       	ldd	r23, Z+2	; 0x02
    36ee:	63 81       	ldd	r22, Z+3	; 0x03
    36f0:	e7 2f       	mov	r30, r23
    36f2:	f6 2f       	mov	r31, r22
    36f4:	30 97       	sbiw	r30, 0x00	; 0
    36f6:	c1 f6       	brne	.-80     	; 0x36a8 <malloc+0x20>
    36f8:	41 15       	cp	r20, r1
    36fa:	51 05       	cpc	r21, r1
    36fc:	01 f1       	breq	.+64     	; 0x373e <malloc+0xb6>
    36fe:	48 1b       	sub	r20, r24
    3700:	59 0b       	sbc	r21, r25
    3702:	44 30       	cpi	r20, 0x04	; 4
    3704:	51 05       	cpc	r21, r1
    3706:	80 f4       	brcc	.+32     	; 0x3728 <malloc+0xa0>
    3708:	12 96       	adiw	r26, 0x02	; 2
    370a:	8d 91       	ld	r24, X+
    370c:	9c 91       	ld	r25, X
    370e:	13 97       	sbiw	r26, 0x03	; 3
    3710:	20 97       	sbiw	r28, 0x00	; 0
    3712:	19 f0       	breq	.+6      	; 0x371a <malloc+0x92>
    3714:	9b 83       	std	Y+3, r25	; 0x03
    3716:	8a 83       	std	Y+2, r24	; 0x02
    3718:	04 c0       	rjmp	.+8      	; 0x3722 <malloc+0x9a>
    371a:	90 93 0a 02 	sts	0x020A, r25
    371e:	80 93 09 02 	sts	0x0209, r24
    3722:	fd 01       	movw	r30, r26
    3724:	32 96       	adiw	r30, 0x02	; 2
    3726:	46 c0       	rjmp	.+140    	; 0x37b4 <malloc+0x12c>
    3728:	fd 01       	movw	r30, r26
    372a:	e4 0f       	add	r30, r20
    372c:	f5 1f       	adc	r31, r21
    372e:	81 93       	st	Z+, r24
    3730:	91 93       	st	Z+, r25
    3732:	42 50       	subi	r20, 0x02	; 2
    3734:	50 40       	sbci	r21, 0x00	; 0
    3736:	11 96       	adiw	r26, 0x01	; 1
    3738:	5c 93       	st	X, r21
    373a:	4e 93       	st	-X, r20
    373c:	3b c0       	rjmp	.+118    	; 0x37b4 <malloc+0x12c>
    373e:	20 91 07 02 	lds	r18, 0x0207
    3742:	30 91 08 02 	lds	r19, 0x0208
    3746:	21 15       	cp	r18, r1
    3748:	31 05       	cpc	r19, r1
    374a:	41 f4       	brne	.+16     	; 0x375c <malloc+0xd4>
    374c:	20 91 4b 01 	lds	r18, 0x014B
    3750:	30 91 4c 01 	lds	r19, 0x014C
    3754:	30 93 08 02 	sts	0x0208, r19
    3758:	20 93 07 02 	sts	0x0207, r18
    375c:	20 91 4d 01 	lds	r18, 0x014D
    3760:	30 91 4e 01 	lds	r19, 0x014E
    3764:	21 15       	cp	r18, r1
    3766:	31 05       	cpc	r19, r1
    3768:	41 f4       	brne	.+16     	; 0x377a <malloc+0xf2>
    376a:	2d b7       	in	r18, 0x3d	; 61
    376c:	3e b7       	in	r19, 0x3e	; 62
    376e:	40 91 49 01 	lds	r20, 0x0149
    3772:	50 91 4a 01 	lds	r21, 0x014A
    3776:	24 1b       	sub	r18, r20
    3778:	35 0b       	sbc	r19, r21
    377a:	e0 91 07 02 	lds	r30, 0x0207
    377e:	f0 91 08 02 	lds	r31, 0x0208
    3782:	e2 17       	cp	r30, r18
    3784:	f3 07       	cpc	r31, r19
    3786:	a0 f4       	brcc	.+40     	; 0x37b0 <malloc+0x128>
    3788:	2e 1b       	sub	r18, r30
    378a:	3f 0b       	sbc	r19, r31
    378c:	28 17       	cp	r18, r24
    378e:	39 07       	cpc	r19, r25
    3790:	78 f0       	brcs	.+30     	; 0x37b0 <malloc+0x128>
    3792:	ac 01       	movw	r20, r24
    3794:	4e 5f       	subi	r20, 0xFE	; 254
    3796:	5f 4f       	sbci	r21, 0xFF	; 255
    3798:	24 17       	cp	r18, r20
    379a:	35 07       	cpc	r19, r21
    379c:	48 f0       	brcs	.+18     	; 0x37b0 <malloc+0x128>
    379e:	4e 0f       	add	r20, r30
    37a0:	5f 1f       	adc	r21, r31
    37a2:	50 93 08 02 	sts	0x0208, r21
    37a6:	40 93 07 02 	sts	0x0207, r20
    37aa:	81 93       	st	Z+, r24
    37ac:	91 93       	st	Z+, r25
    37ae:	02 c0       	rjmp	.+4      	; 0x37b4 <malloc+0x12c>
    37b0:	e0 e0       	ldi	r30, 0x00	; 0
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	cf 01       	movw	r24, r30
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	08 95       	ret

000037bc <free>:
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <free+0xa>
    37c4:	91 c0       	rjmp	.+290    	; 0x38e8 <free+0x12c>
    37c6:	fc 01       	movw	r30, r24
    37c8:	32 97       	sbiw	r30, 0x02	; 2
    37ca:	13 82       	std	Z+3, r1	; 0x03
    37cc:	12 82       	std	Z+2, r1	; 0x02
    37ce:	60 91 09 02 	lds	r22, 0x0209
    37d2:	70 91 0a 02 	lds	r23, 0x020A
    37d6:	61 15       	cp	r22, r1
    37d8:	71 05       	cpc	r23, r1
    37da:	81 f4       	brne	.+32     	; 0x37fc <free+0x40>
    37dc:	20 81       	ld	r18, Z
    37de:	31 81       	ldd	r19, Z+1	; 0x01
    37e0:	28 0f       	add	r18, r24
    37e2:	39 1f       	adc	r19, r25
    37e4:	80 91 07 02 	lds	r24, 0x0207
    37e8:	90 91 08 02 	lds	r25, 0x0208
    37ec:	82 17       	cp	r24, r18
    37ee:	93 07       	cpc	r25, r19
    37f0:	99 f5       	brne	.+102    	; 0x3858 <free+0x9c>
    37f2:	f0 93 08 02 	sts	0x0208, r31
    37f6:	e0 93 07 02 	sts	0x0207, r30
    37fa:	76 c0       	rjmp	.+236    	; 0x38e8 <free+0x12c>
    37fc:	db 01       	movw	r26, r22
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <free+0x4c>
    3804:	cd 01       	movw	r24, r26
    3806:	d9 01       	movw	r26, r18
    3808:	ae 17       	cp	r26, r30
    380a:	bf 07       	cpc	r27, r31
    380c:	48 f4       	brcc	.+18     	; 0x3820 <free+0x64>
    380e:	12 96       	adiw	r26, 0x02	; 2
    3810:	2d 91       	ld	r18, X+
    3812:	3c 91       	ld	r19, X
    3814:	13 97       	sbiw	r26, 0x03	; 3
    3816:	21 15       	cp	r18, r1
    3818:	31 05       	cpc	r19, r1
    381a:	a1 f7       	brne	.-24     	; 0x3804 <free+0x48>
    381c:	cd 01       	movw	r24, r26
    381e:	21 c0       	rjmp	.+66     	; 0x3862 <free+0xa6>
    3820:	b3 83       	std	Z+3, r27	; 0x03
    3822:	a2 83       	std	Z+2, r26	; 0x02
    3824:	ef 01       	movw	r28, r30
    3826:	49 91       	ld	r20, Y+
    3828:	59 91       	ld	r21, Y+
    382a:	9e 01       	movw	r18, r28
    382c:	24 0f       	add	r18, r20
    382e:	35 1f       	adc	r19, r21
    3830:	a2 17       	cp	r26, r18
    3832:	b3 07       	cpc	r27, r19
    3834:	79 f4       	brne	.+30     	; 0x3854 <free+0x98>
    3836:	2d 91       	ld	r18, X+
    3838:	3c 91       	ld	r19, X
    383a:	11 97       	sbiw	r26, 0x01	; 1
    383c:	24 0f       	add	r18, r20
    383e:	35 1f       	adc	r19, r21
    3840:	2e 5f       	subi	r18, 0xFE	; 254
    3842:	3f 4f       	sbci	r19, 0xFF	; 255
    3844:	31 83       	std	Z+1, r19	; 0x01
    3846:	20 83       	st	Z, r18
    3848:	12 96       	adiw	r26, 0x02	; 2
    384a:	2d 91       	ld	r18, X+
    384c:	3c 91       	ld	r19, X
    384e:	13 97       	sbiw	r26, 0x03	; 3
    3850:	33 83       	std	Z+3, r19	; 0x03
    3852:	22 83       	std	Z+2, r18	; 0x02
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	29 f4       	brne	.+10     	; 0x3862 <free+0xa6>
    3858:	f0 93 0a 02 	sts	0x020A, r31
    385c:	e0 93 09 02 	sts	0x0209, r30
    3860:	43 c0       	rjmp	.+134    	; 0x38e8 <free+0x12c>
    3862:	dc 01       	movw	r26, r24
    3864:	13 96       	adiw	r26, 0x03	; 3
    3866:	fc 93       	st	X, r31
    3868:	ee 93       	st	-X, r30
    386a:	12 97       	sbiw	r26, 0x02	; 2
    386c:	4d 91       	ld	r20, X+
    386e:	5d 91       	ld	r21, X+
    3870:	a4 0f       	add	r26, r20
    3872:	b5 1f       	adc	r27, r21
    3874:	ea 17       	cp	r30, r26
    3876:	fb 07       	cpc	r31, r27
    3878:	69 f4       	brne	.+26     	; 0x3894 <free+0xd8>
    387a:	20 81       	ld	r18, Z
    387c:	31 81       	ldd	r19, Z+1	; 0x01
    387e:	24 0f       	add	r18, r20
    3880:	35 1f       	adc	r19, r21
    3882:	2e 5f       	subi	r18, 0xFE	; 254
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
    3886:	ec 01       	movw	r28, r24
    3888:	39 83       	std	Y+1, r19	; 0x01
    388a:	28 83       	st	Y, r18
    388c:	22 81       	ldd	r18, Z+2	; 0x02
    388e:	33 81       	ldd	r19, Z+3	; 0x03
    3890:	3b 83       	std	Y+3, r19	; 0x03
    3892:	2a 83       	std	Y+2, r18	; 0x02
    3894:	e0 e0       	ldi	r30, 0x00	; 0
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	02 c0       	rjmp	.+4      	; 0x389e <free+0xe2>
    389a:	fb 01       	movw	r30, r22
    389c:	bc 01       	movw	r22, r24
    389e:	db 01       	movw	r26, r22
    38a0:	12 96       	adiw	r26, 0x02	; 2
    38a2:	8d 91       	ld	r24, X+
    38a4:	9c 91       	ld	r25, X
    38a6:	13 97       	sbiw	r26, 0x03	; 3
    38a8:	00 97       	sbiw	r24, 0x00	; 0
    38aa:	b9 f7       	brne	.-18     	; 0x389a <free+0xde>
    38ac:	9b 01       	movw	r18, r22
    38ae:	2e 5f       	subi	r18, 0xFE	; 254
    38b0:	3f 4f       	sbci	r19, 0xFF	; 255
    38b2:	8d 91       	ld	r24, X+
    38b4:	9c 91       	ld	r25, X
    38b6:	11 97       	sbiw	r26, 0x01	; 1
    38b8:	82 0f       	add	r24, r18
    38ba:	93 1f       	adc	r25, r19
    38bc:	40 91 07 02 	lds	r20, 0x0207
    38c0:	50 91 08 02 	lds	r21, 0x0208
    38c4:	48 17       	cp	r20, r24
    38c6:	59 07       	cpc	r21, r25
    38c8:	79 f4       	brne	.+30     	; 0x38e8 <free+0x12c>
    38ca:	30 97       	sbiw	r30, 0x00	; 0
    38cc:	29 f4       	brne	.+10     	; 0x38d8 <free+0x11c>
    38ce:	10 92 0a 02 	sts	0x020A, r1
    38d2:	10 92 09 02 	sts	0x0209, r1
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <free+0x120>
    38d8:	13 82       	std	Z+3, r1	; 0x03
    38da:	12 82       	std	Z+2, r1	; 0x02
    38dc:	22 50       	subi	r18, 0x02	; 2
    38de:	30 40       	sbci	r19, 0x00	; 0
    38e0:	30 93 08 02 	sts	0x0208, r19
    38e4:	20 93 07 02 	sts	0x0207, r18
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	08 95       	ret

000038ee <memcpy>:
    38ee:	fb 01       	movw	r30, r22
    38f0:	dc 01       	movw	r26, r24
    38f2:	02 c0       	rjmp	.+4      	; 0x38f8 <memcpy+0xa>
    38f4:	01 90       	ld	r0, Z+
    38f6:	0d 92       	st	X+, r0
    38f8:	41 50       	subi	r20, 0x01	; 1
    38fa:	50 40       	sbci	r21, 0x00	; 0
    38fc:	d8 f7       	brcc	.-10     	; 0x38f4 <memcpy+0x6>
    38fe:	08 95       	ret

00003900 <memset>:
    3900:	dc 01       	movw	r26, r24
    3902:	01 c0       	rjmp	.+2      	; 0x3906 <memset+0x6>
    3904:	6d 93       	st	X+, r22
    3906:	41 50       	subi	r20, 0x01	; 1
    3908:	50 40       	sbci	r21, 0x00	; 0
    390a:	e0 f7       	brcc	.-8      	; 0x3904 <memset+0x4>
    390c:	08 95       	ret

0000390e <strcpy>:
    390e:	fb 01       	movw	r30, r22
    3910:	dc 01       	movw	r26, r24
    3912:	01 90       	ld	r0, Z+
    3914:	0d 92       	st	X+, r0
    3916:	00 20       	and	r0, r0
    3918:	e1 f7       	brne	.-8      	; 0x3912 <strcpy+0x4>
    391a:	08 95       	ret

0000391c <strupr>:
    391c:	dc 01       	movw	r26, r24
    391e:	6c 91       	ld	r22, X
    3920:	61 56       	subi	r22, 0x61	; 97
    3922:	6a 31       	cpi	r22, 0x1A	; 26
    3924:	08 f0       	brcs	.+2      	; 0x3928 <strupr+0xc>
    3926:	60 5e       	subi	r22, 0xE0	; 224
    3928:	6f 5b       	subi	r22, 0xBF	; 191
    392a:	6d 93       	st	X+, r22
    392c:	c1 f7       	brne	.-16     	; 0x391e <strupr+0x2>
    392e:	08 95       	ret

00003930 <sprintf>:
    3930:	ae e0       	ldi	r26, 0x0E	; 14
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	ee e9       	ldi	r30, 0x9E	; 158
    3936:	fc e1       	ldi	r31, 0x1C	; 28
    3938:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__+0x1c>
    393c:	0d 89       	ldd	r16, Y+21	; 0x15
    393e:	1e 89       	ldd	r17, Y+22	; 0x16
    3940:	86 e0       	ldi	r24, 0x06	; 6
    3942:	8c 83       	std	Y+4, r24	; 0x04
    3944:	1a 83       	std	Y+2, r17	; 0x02
    3946:	09 83       	std	Y+1, r16	; 0x01
    3948:	8f ef       	ldi	r24, 0xFF	; 255
    394a:	9f e7       	ldi	r25, 0x7F	; 127
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	9e 01       	movw	r18, r28
    3952:	27 5e       	subi	r18, 0xE7	; 231
    3954:	3f 4f       	sbci	r19, 0xFF	; 255
    3956:	ce 01       	movw	r24, r28
    3958:	01 96       	adiw	r24, 0x01	; 1
    395a:	6f 89       	ldd	r22, Y+23	; 0x17
    395c:	78 8d       	ldd	r23, Y+24	; 0x18
    395e:	a9 01       	movw	r20, r18
    3960:	0e 94 bb 1c 	call	0x3976	; 0x3976 <vfprintf>
    3964:	ef 81       	ldd	r30, Y+7	; 0x07
    3966:	f8 85       	ldd	r31, Y+8	; 0x08
    3968:	e0 0f       	add	r30, r16
    396a:	f1 1f       	adc	r31, r17
    396c:	10 82       	st	Z, r1
    396e:	2e 96       	adiw	r28, 0x0e	; 14
    3970:	e4 e0       	ldi	r30, 0x04	; 4
    3972:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__+0x1c>

00003976 <vfprintf>:
    3976:	ac e0       	ldi	r26, 0x0C	; 12
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	e1 ec       	ldi	r30, 0xC1	; 193
    397c:	fc e1       	ldi	r31, 0x1C	; 28
    397e:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__prologue_saves__>
    3982:	6c 01       	movw	r12, r24
    3984:	1b 01       	movw	r2, r22
    3986:	8a 01       	movw	r16, r20
    3988:	fc 01       	movw	r30, r24
    398a:	17 82       	std	Z+7, r1	; 0x07
    398c:	16 82       	std	Z+6, r1	; 0x06
    398e:	83 81       	ldd	r24, Z+3	; 0x03
    3990:	81 ff       	sbrs	r24, 1
    3992:	d1 c1       	rjmp	.+930    	; 0x3d36 <vfprintf+0x3c0>
    3994:	2e 01       	movw	r4, r28
    3996:	08 94       	sec
    3998:	41 1c       	adc	r4, r1
    399a:	51 1c       	adc	r5, r1
    399c:	f6 01       	movw	r30, r12
    399e:	93 81       	ldd	r25, Z+3	; 0x03
    39a0:	f1 01       	movw	r30, r2
    39a2:	93 fd       	sbrc	r25, 3
    39a4:	85 91       	lpm	r24, Z+
    39a6:	93 ff       	sbrs	r25, 3
    39a8:	81 91       	ld	r24, Z+
    39aa:	1f 01       	movw	r2, r30
    39ac:	88 23       	and	r24, r24
    39ae:	09 f4       	brne	.+2      	; 0x39b2 <vfprintf+0x3c>
    39b0:	be c1       	rjmp	.+892    	; 0x3d2e <vfprintf+0x3b8>
    39b2:	85 32       	cpi	r24, 0x25	; 37
    39b4:	39 f4       	brne	.+14     	; 0x39c4 <vfprintf+0x4e>
    39b6:	93 fd       	sbrc	r25, 3
    39b8:	85 91       	lpm	r24, Z+
    39ba:	93 ff       	sbrs	r25, 3
    39bc:	81 91       	ld	r24, Z+
    39be:	1f 01       	movw	r2, r30
    39c0:	85 32       	cpi	r24, 0x25	; 37
    39c2:	29 f4       	brne	.+10     	; 0x39ce <vfprintf+0x58>
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	b6 01       	movw	r22, r12
    39c8:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    39cc:	e7 cf       	rjmp	.-50     	; 0x399c <vfprintf+0x26>
    39ce:	ee 24       	eor	r14, r14
    39d0:	ff 24       	eor	r15, r15
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	20 32       	cpi	r18, 0x20	; 32
    39d6:	b0 f4       	brcc	.+44     	; 0x3a04 <vfprintf+0x8e>
    39d8:	8b 32       	cpi	r24, 0x2B	; 43
    39da:	69 f0       	breq	.+26     	; 0x39f6 <vfprintf+0x80>
    39dc:	8c 32       	cpi	r24, 0x2C	; 44
    39de:	28 f4       	brcc	.+10     	; 0x39ea <vfprintf+0x74>
    39e0:	80 32       	cpi	r24, 0x20	; 32
    39e2:	51 f0       	breq	.+20     	; 0x39f8 <vfprintf+0x82>
    39e4:	83 32       	cpi	r24, 0x23	; 35
    39e6:	71 f4       	brne	.+28     	; 0x3a04 <vfprintf+0x8e>
    39e8:	0b c0       	rjmp	.+22     	; 0x3a00 <vfprintf+0x8a>
    39ea:	8d 32       	cpi	r24, 0x2D	; 45
    39ec:	39 f0       	breq	.+14     	; 0x39fc <vfprintf+0x86>
    39ee:	80 33       	cpi	r24, 0x30	; 48
    39f0:	49 f4       	brne	.+18     	; 0x3a04 <vfprintf+0x8e>
    39f2:	21 60       	ori	r18, 0x01	; 1
    39f4:	2c c0       	rjmp	.+88     	; 0x3a4e <vfprintf+0xd8>
    39f6:	22 60       	ori	r18, 0x02	; 2
    39f8:	24 60       	ori	r18, 0x04	; 4
    39fa:	29 c0       	rjmp	.+82     	; 0x3a4e <vfprintf+0xd8>
    39fc:	28 60       	ori	r18, 0x08	; 8
    39fe:	27 c0       	rjmp	.+78     	; 0x3a4e <vfprintf+0xd8>
    3a00:	20 61       	ori	r18, 0x10	; 16
    3a02:	25 c0       	rjmp	.+74     	; 0x3a4e <vfprintf+0xd8>
    3a04:	27 fd       	sbrc	r18, 7
    3a06:	2c c0       	rjmp	.+88     	; 0x3a60 <vfprintf+0xea>
    3a08:	38 2f       	mov	r19, r24
    3a0a:	30 53       	subi	r19, 0x30	; 48
    3a0c:	3a 30       	cpi	r19, 0x0A	; 10
    3a0e:	98 f4       	brcc	.+38     	; 0x3a36 <vfprintf+0xc0>
    3a10:	26 ff       	sbrs	r18, 6
    3a12:	08 c0       	rjmp	.+16     	; 0x3a24 <vfprintf+0xae>
    3a14:	8e 2d       	mov	r24, r14
    3a16:	88 0f       	add	r24, r24
    3a18:	e8 2e       	mov	r14, r24
    3a1a:	ee 0c       	add	r14, r14
    3a1c:	ee 0c       	add	r14, r14
    3a1e:	e8 0e       	add	r14, r24
    3a20:	e3 0e       	add	r14, r19
    3a22:	15 c0       	rjmp	.+42     	; 0x3a4e <vfprintf+0xd8>
    3a24:	8f 2d       	mov	r24, r15
    3a26:	88 0f       	add	r24, r24
    3a28:	f8 2e       	mov	r15, r24
    3a2a:	ff 0c       	add	r15, r15
    3a2c:	ff 0c       	add	r15, r15
    3a2e:	f8 0e       	add	r15, r24
    3a30:	f3 0e       	add	r15, r19
    3a32:	20 62       	ori	r18, 0x20	; 32
    3a34:	0c c0       	rjmp	.+24     	; 0x3a4e <vfprintf+0xd8>
    3a36:	8e 32       	cpi	r24, 0x2E	; 46
    3a38:	21 f4       	brne	.+8      	; 0x3a42 <vfprintf+0xcc>
    3a3a:	26 fd       	sbrc	r18, 6
    3a3c:	78 c1       	rjmp	.+752    	; 0x3d2e <vfprintf+0x3b8>
    3a3e:	20 64       	ori	r18, 0x40	; 64
    3a40:	06 c0       	rjmp	.+12     	; 0x3a4e <vfprintf+0xd8>
    3a42:	8c 36       	cpi	r24, 0x6C	; 108
    3a44:	11 f4       	brne	.+4      	; 0x3a4a <vfprintf+0xd4>
    3a46:	20 68       	ori	r18, 0x80	; 128
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <vfprintf+0xd8>
    3a4a:	88 36       	cpi	r24, 0x68	; 104
    3a4c:	49 f4       	brne	.+18     	; 0x3a60 <vfprintf+0xea>
    3a4e:	f1 01       	movw	r30, r2
    3a50:	93 fd       	sbrc	r25, 3
    3a52:	85 91       	lpm	r24, Z+
    3a54:	93 ff       	sbrs	r25, 3
    3a56:	81 91       	ld	r24, Z+
    3a58:	1f 01       	movw	r2, r30
    3a5a:	88 23       	and	r24, r24
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <vfprintf+0xea>
    3a5e:	ba cf       	rjmp	.-140    	; 0x39d4 <vfprintf+0x5e>
    3a60:	98 2f       	mov	r25, r24
    3a62:	95 54       	subi	r25, 0x45	; 69
    3a64:	93 30       	cpi	r25, 0x03	; 3
    3a66:	18 f0       	brcs	.+6      	; 0x3a6e <vfprintf+0xf8>
    3a68:	90 52       	subi	r25, 0x20	; 32
    3a6a:	93 30       	cpi	r25, 0x03	; 3
    3a6c:	28 f4       	brcc	.+10     	; 0x3a78 <vfprintf+0x102>
    3a6e:	0c 5f       	subi	r16, 0xFC	; 252
    3a70:	1f 4f       	sbci	r17, 0xFF	; 255
    3a72:	ff e3       	ldi	r31, 0x3F	; 63
    3a74:	f9 83       	std	Y+1, r31	; 0x01
    3a76:	0d c0       	rjmp	.+26     	; 0x3a92 <vfprintf+0x11c>
    3a78:	83 36       	cpi	r24, 0x63	; 99
    3a7a:	31 f0       	breq	.+12     	; 0x3a88 <vfprintf+0x112>
    3a7c:	83 37       	cpi	r24, 0x73	; 115
    3a7e:	71 f0       	breq	.+28     	; 0x3a9c <vfprintf+0x126>
    3a80:	83 35       	cpi	r24, 0x53	; 83
    3a82:	09 f0       	breq	.+2      	; 0x3a86 <vfprintf+0x110>
    3a84:	60 c0       	rjmp	.+192    	; 0x3b46 <vfprintf+0x1d0>
    3a86:	22 c0       	rjmp	.+68     	; 0x3acc <vfprintf+0x156>
    3a88:	f8 01       	movw	r30, r16
    3a8a:	80 81       	ld	r24, Z
    3a8c:	89 83       	std	Y+1, r24	; 0x01
    3a8e:	0e 5f       	subi	r16, 0xFE	; 254
    3a90:	1f 4f       	sbci	r17, 0xFF	; 255
    3a92:	42 01       	movw	r8, r4
    3a94:	71 e0       	ldi	r23, 0x01	; 1
    3a96:	a7 2e       	mov	r10, r23
    3a98:	b1 2c       	mov	r11, r1
    3a9a:	16 c0       	rjmp	.+44     	; 0x3ac8 <vfprintf+0x152>
    3a9c:	62 e0       	ldi	r22, 0x02	; 2
    3a9e:	66 2e       	mov	r6, r22
    3aa0:	71 2c       	mov	r7, r1
    3aa2:	60 0e       	add	r6, r16
    3aa4:	71 1e       	adc	r7, r17
    3aa6:	f8 01       	movw	r30, r16
    3aa8:	80 80       	ld	r8, Z
    3aaa:	91 80       	ldd	r9, Z+1	; 0x01
    3aac:	26 ff       	sbrs	r18, 6
    3aae:	03 c0       	rjmp	.+6      	; 0x3ab6 <vfprintf+0x140>
    3ab0:	6e 2d       	mov	r22, r14
    3ab2:	70 e0       	ldi	r23, 0x00	; 0
    3ab4:	02 c0       	rjmp	.+4      	; 0x3aba <vfprintf+0x144>
    3ab6:	6f ef       	ldi	r22, 0xFF	; 255
    3ab8:	7f ef       	ldi	r23, 0xFF	; 255
    3aba:	c4 01       	movw	r24, r8
    3abc:	2c 87       	std	Y+12, r18	; 0x0c
    3abe:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <strnlen>
    3ac2:	5c 01       	movw	r10, r24
    3ac4:	83 01       	movw	r16, r6
    3ac6:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ac8:	2f 77       	andi	r18, 0x7F	; 127
    3aca:	17 c0       	rjmp	.+46     	; 0x3afa <vfprintf+0x184>
    3acc:	52 e0       	ldi	r21, 0x02	; 2
    3ace:	65 2e       	mov	r6, r21
    3ad0:	71 2c       	mov	r7, r1
    3ad2:	60 0e       	add	r6, r16
    3ad4:	71 1e       	adc	r7, r17
    3ad6:	f8 01       	movw	r30, r16
    3ad8:	80 80       	ld	r8, Z
    3ada:	91 80       	ldd	r9, Z+1	; 0x01
    3adc:	26 ff       	sbrs	r18, 6
    3ade:	03 c0       	rjmp	.+6      	; 0x3ae6 <vfprintf+0x170>
    3ae0:	6e 2d       	mov	r22, r14
    3ae2:	70 e0       	ldi	r23, 0x00	; 0
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <vfprintf+0x174>
    3ae6:	6f ef       	ldi	r22, 0xFF	; 255
    3ae8:	7f ef       	ldi	r23, 0xFF	; 255
    3aea:	c4 01       	movw	r24, r8
    3aec:	2c 87       	std	Y+12, r18	; 0x0c
    3aee:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <strnlen_P>
    3af2:	5c 01       	movw	r10, r24
    3af4:	2c 85       	ldd	r18, Y+12	; 0x0c
    3af6:	20 68       	ori	r18, 0x80	; 128
    3af8:	83 01       	movw	r16, r6
    3afa:	23 fd       	sbrc	r18, 3
    3afc:	20 c0       	rjmp	.+64     	; 0x3b3e <vfprintf+0x1c8>
    3afe:	08 c0       	rjmp	.+16     	; 0x3b10 <vfprintf+0x19a>
    3b00:	80 e2       	ldi	r24, 0x20	; 32
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	b6 01       	movw	r22, r12
    3b06:	2c 87       	std	Y+12, r18	; 0x0c
    3b08:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    3b0c:	fa 94       	dec	r15
    3b0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b10:	8f 2d       	mov	r24, r15
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	a8 16       	cp	r10, r24
    3b16:	b9 06       	cpc	r11, r25
    3b18:	98 f3       	brcs	.-26     	; 0x3b00 <vfprintf+0x18a>
    3b1a:	11 c0       	rjmp	.+34     	; 0x3b3e <vfprintf+0x1c8>
    3b1c:	f4 01       	movw	r30, r8
    3b1e:	27 fd       	sbrc	r18, 7
    3b20:	85 91       	lpm	r24, Z+
    3b22:	27 ff       	sbrs	r18, 7
    3b24:	81 91       	ld	r24, Z+
    3b26:	4f 01       	movw	r8, r30
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	b6 01       	movw	r22, r12
    3b2c:	2c 87       	std	Y+12, r18	; 0x0c
    3b2e:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    3b32:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b34:	f1 10       	cpse	r15, r1
    3b36:	fa 94       	dec	r15
    3b38:	08 94       	sec
    3b3a:	a1 08       	sbc	r10, r1
    3b3c:	b1 08       	sbc	r11, r1
    3b3e:	a1 14       	cp	r10, r1
    3b40:	b1 04       	cpc	r11, r1
    3b42:	61 f7       	brne	.-40     	; 0x3b1c <vfprintf+0x1a6>
    3b44:	f1 c0       	rjmp	.+482    	; 0x3d28 <vfprintf+0x3b2>
    3b46:	84 36       	cpi	r24, 0x64	; 100
    3b48:	11 f0       	breq	.+4      	; 0x3b4e <vfprintf+0x1d8>
    3b4a:	89 36       	cpi	r24, 0x69	; 105
    3b4c:	49 f5       	brne	.+82     	; 0x3ba0 <vfprintf+0x22a>
    3b4e:	27 ff       	sbrs	r18, 7
    3b50:	08 c0       	rjmp	.+16     	; 0x3b62 <vfprintf+0x1ec>
    3b52:	f8 01       	movw	r30, r16
    3b54:	60 81       	ld	r22, Z
    3b56:	71 81       	ldd	r23, Z+1	; 0x01
    3b58:	82 81       	ldd	r24, Z+2	; 0x02
    3b5a:	93 81       	ldd	r25, Z+3	; 0x03
    3b5c:	0c 5f       	subi	r16, 0xFC	; 252
    3b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b60:	09 c0       	rjmp	.+18     	; 0x3b74 <vfprintf+0x1fe>
    3b62:	f8 01       	movw	r30, r16
    3b64:	60 81       	ld	r22, Z
    3b66:	71 81       	ldd	r23, Z+1	; 0x01
    3b68:	88 27       	eor	r24, r24
    3b6a:	77 fd       	sbrc	r23, 7
    3b6c:	80 95       	com	r24
    3b6e:	98 2f       	mov	r25, r24
    3b70:	0e 5f       	subi	r16, 0xFE	; 254
    3b72:	1f 4f       	sbci	r17, 0xFF	; 255
    3b74:	4f e6       	ldi	r20, 0x6F	; 111
    3b76:	b4 2e       	mov	r11, r20
    3b78:	b2 22       	and	r11, r18
    3b7a:	97 ff       	sbrs	r25, 7
    3b7c:	09 c0       	rjmp	.+18     	; 0x3b90 <vfprintf+0x21a>
    3b7e:	90 95       	com	r25
    3b80:	80 95       	com	r24
    3b82:	70 95       	com	r23
    3b84:	61 95       	neg	r22
    3b86:	7f 4f       	sbci	r23, 0xFF	; 255
    3b88:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8c:	f0 e8       	ldi	r31, 0x80	; 128
    3b8e:	bf 2a       	or	r11, r31
    3b90:	a2 01       	movw	r20, r4
    3b92:	2a e0       	ldi	r18, 0x0A	; 10
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__ultoa_invert>
    3b9a:	78 2e       	mov	r7, r24
    3b9c:	74 18       	sub	r7, r4
    3b9e:	45 c0       	rjmp	.+138    	; 0x3c2a <vfprintf+0x2b4>
    3ba0:	85 37       	cpi	r24, 0x75	; 117
    3ba2:	31 f4       	brne	.+12     	; 0x3bb0 <vfprintf+0x23a>
    3ba4:	3f ee       	ldi	r19, 0xEF	; 239
    3ba6:	b3 2e       	mov	r11, r19
    3ba8:	b2 22       	and	r11, r18
    3baa:	2a e0       	ldi	r18, 0x0A	; 10
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	25 c0       	rjmp	.+74     	; 0x3bfa <vfprintf+0x284>
    3bb0:	99 ef       	ldi	r25, 0xF9	; 249
    3bb2:	b9 2e       	mov	r11, r25
    3bb4:	b2 22       	and	r11, r18
    3bb6:	8f 36       	cpi	r24, 0x6F	; 111
    3bb8:	c1 f0       	breq	.+48     	; 0x3bea <vfprintf+0x274>
    3bba:	80 37       	cpi	r24, 0x70	; 112
    3bbc:	20 f4       	brcc	.+8      	; 0x3bc6 <vfprintf+0x250>
    3bbe:	88 35       	cpi	r24, 0x58	; 88
    3bc0:	09 f0       	breq	.+2      	; 0x3bc4 <vfprintf+0x24e>
    3bc2:	b5 c0       	rjmp	.+362    	; 0x3d2e <vfprintf+0x3b8>
    3bc4:	0d c0       	rjmp	.+26     	; 0x3be0 <vfprintf+0x26a>
    3bc6:	80 37       	cpi	r24, 0x70	; 112
    3bc8:	21 f0       	breq	.+8      	; 0x3bd2 <vfprintf+0x25c>
    3bca:	88 37       	cpi	r24, 0x78	; 120
    3bcc:	09 f0       	breq	.+2      	; 0x3bd0 <vfprintf+0x25a>
    3bce:	af c0       	rjmp	.+350    	; 0x3d2e <vfprintf+0x3b8>
    3bd0:	02 c0       	rjmp	.+4      	; 0x3bd6 <vfprintf+0x260>
    3bd2:	20 e1       	ldi	r18, 0x10	; 16
    3bd4:	b2 2a       	or	r11, r18
    3bd6:	b4 fe       	sbrs	r11, 4
    3bd8:	0b c0       	rjmp	.+22     	; 0x3bf0 <vfprintf+0x27a>
    3bda:	84 e0       	ldi	r24, 0x04	; 4
    3bdc:	b8 2a       	or	r11, r24
    3bde:	08 c0       	rjmp	.+16     	; 0x3bf0 <vfprintf+0x27a>
    3be0:	b4 fe       	sbrs	r11, 4
    3be2:	09 c0       	rjmp	.+18     	; 0x3bf6 <vfprintf+0x280>
    3be4:	e6 e0       	ldi	r30, 0x06	; 6
    3be6:	be 2a       	or	r11, r30
    3be8:	06 c0       	rjmp	.+12     	; 0x3bf6 <vfprintf+0x280>
    3bea:	28 e0       	ldi	r18, 0x08	; 8
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	05 c0       	rjmp	.+10     	; 0x3bfa <vfprintf+0x284>
    3bf0:	20 e1       	ldi	r18, 0x10	; 16
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	02 c0       	rjmp	.+4      	; 0x3bfa <vfprintf+0x284>
    3bf6:	20 e1       	ldi	r18, 0x10	; 16
    3bf8:	32 e0       	ldi	r19, 0x02	; 2
    3bfa:	b7 fe       	sbrs	r11, 7
    3bfc:	08 c0       	rjmp	.+16     	; 0x3c0e <vfprintf+0x298>
    3bfe:	f8 01       	movw	r30, r16
    3c00:	60 81       	ld	r22, Z
    3c02:	71 81       	ldd	r23, Z+1	; 0x01
    3c04:	82 81       	ldd	r24, Z+2	; 0x02
    3c06:	93 81       	ldd	r25, Z+3	; 0x03
    3c08:	0c 5f       	subi	r16, 0xFC	; 252
    3c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c0c:	07 c0       	rjmp	.+14     	; 0x3c1c <vfprintf+0x2a6>
    3c0e:	f8 01       	movw	r30, r16
    3c10:	60 81       	ld	r22, Z
    3c12:	71 81       	ldd	r23, Z+1	; 0x01
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 5f       	subi	r16, 0xFE	; 254
    3c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1c:	a2 01       	movw	r20, r4
    3c1e:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__ultoa_invert>
    3c22:	78 2e       	mov	r7, r24
    3c24:	74 18       	sub	r7, r4
    3c26:	ff e7       	ldi	r31, 0x7F	; 127
    3c28:	bf 22       	and	r11, r31
    3c2a:	b6 fe       	sbrs	r11, 6
    3c2c:	0b c0       	rjmp	.+22     	; 0x3c44 <vfprintf+0x2ce>
    3c2e:	2e ef       	ldi	r18, 0xFE	; 254
    3c30:	b2 22       	and	r11, r18
    3c32:	7e 14       	cp	r7, r14
    3c34:	38 f4       	brcc	.+14     	; 0x3c44 <vfprintf+0x2ce>
    3c36:	b4 fe       	sbrs	r11, 4
    3c38:	07 c0       	rjmp	.+14     	; 0x3c48 <vfprintf+0x2d2>
    3c3a:	b2 fc       	sbrc	r11, 2
    3c3c:	05 c0       	rjmp	.+10     	; 0x3c48 <vfprintf+0x2d2>
    3c3e:	8f ee       	ldi	r24, 0xEF	; 239
    3c40:	b8 22       	and	r11, r24
    3c42:	02 c0       	rjmp	.+4      	; 0x3c48 <vfprintf+0x2d2>
    3c44:	a7 2c       	mov	r10, r7
    3c46:	01 c0       	rjmp	.+2      	; 0x3c4a <vfprintf+0x2d4>
    3c48:	ae 2c       	mov	r10, r14
    3c4a:	8b 2d       	mov	r24, r11
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	b4 fe       	sbrs	r11, 4
    3c50:	0d c0       	rjmp	.+26     	; 0x3c6c <vfprintf+0x2f6>
    3c52:	fe 01       	movw	r30, r28
    3c54:	e7 0d       	add	r30, r7
    3c56:	f1 1d       	adc	r31, r1
    3c58:	20 81       	ld	r18, Z
    3c5a:	20 33       	cpi	r18, 0x30	; 48
    3c5c:	19 f4       	brne	.+6      	; 0x3c64 <vfprintf+0x2ee>
    3c5e:	e9 ee       	ldi	r30, 0xE9	; 233
    3c60:	be 22       	and	r11, r30
    3c62:	09 c0       	rjmp	.+18     	; 0x3c76 <vfprintf+0x300>
    3c64:	a3 94       	inc	r10
    3c66:	b2 fe       	sbrs	r11, 2
    3c68:	06 c0       	rjmp	.+12     	; 0x3c76 <vfprintf+0x300>
    3c6a:	04 c0       	rjmp	.+8      	; 0x3c74 <vfprintf+0x2fe>
    3c6c:	86 78       	andi	r24, 0x86	; 134
    3c6e:	90 70       	andi	r25, 0x00	; 0
    3c70:	00 97       	sbiw	r24, 0x00	; 0
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <vfprintf+0x300>
    3c74:	a3 94       	inc	r10
    3c76:	8b 2c       	mov	r8, r11
    3c78:	99 24       	eor	r9, r9
    3c7a:	b3 fc       	sbrc	r11, 3
    3c7c:	14 c0       	rjmp	.+40     	; 0x3ca6 <vfprintf+0x330>
    3c7e:	b0 fe       	sbrs	r11, 0
    3c80:	0f c0       	rjmp	.+30     	; 0x3ca0 <vfprintf+0x32a>
    3c82:	af 14       	cp	r10, r15
    3c84:	28 f4       	brcc	.+10     	; 0x3c90 <vfprintf+0x31a>
    3c86:	e7 2c       	mov	r14, r7
    3c88:	ef 0c       	add	r14, r15
    3c8a:	ea 18       	sub	r14, r10
    3c8c:	af 2c       	mov	r10, r15
    3c8e:	08 c0       	rjmp	.+16     	; 0x3ca0 <vfprintf+0x32a>
    3c90:	e7 2c       	mov	r14, r7
    3c92:	06 c0       	rjmp	.+12     	; 0x3ca0 <vfprintf+0x32a>
    3c94:	80 e2       	ldi	r24, 0x20	; 32
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	b6 01       	movw	r22, r12
    3c9a:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    3c9e:	a3 94       	inc	r10
    3ca0:	af 14       	cp	r10, r15
    3ca2:	c0 f3       	brcs	.-16     	; 0x3c94 <vfprintf+0x31e>
    3ca4:	04 c0       	rjmp	.+8      	; 0x3cae <vfprintf+0x338>
    3ca6:	af 14       	cp	r10, r15
    3ca8:	10 f4       	brcc	.+4      	; 0x3cae <vfprintf+0x338>
    3caa:	fa 18       	sub	r15, r10
    3cac:	01 c0       	rjmp	.+2      	; 0x3cb0 <vfprintf+0x33a>
    3cae:	ff 24       	eor	r15, r15
    3cb0:	84 fe       	sbrs	r8, 4
    3cb2:	0f c0       	rjmp	.+30     	; 0x3cd2 <vfprintf+0x35c>
    3cb4:	80 e3       	ldi	r24, 0x30	; 48
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	b6 01       	movw	r22, r12
    3cba:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    3cbe:	82 fe       	sbrs	r8, 2
    3cc0:	1f c0       	rjmp	.+62     	; 0x3d00 <vfprintf+0x38a>
    3cc2:	81 fe       	sbrs	r8, 1
    3cc4:	03 c0       	rjmp	.+6      	; 0x3ccc <vfprintf+0x356>
    3cc6:	88 e5       	ldi	r24, 0x58	; 88
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	10 c0       	rjmp	.+32     	; 0x3cec <vfprintf+0x376>
    3ccc:	88 e7       	ldi	r24, 0x78	; 120
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	0d c0       	rjmp	.+26     	; 0x3cec <vfprintf+0x376>
    3cd2:	c4 01       	movw	r24, r8
    3cd4:	86 78       	andi	r24, 0x86	; 134
    3cd6:	90 70       	andi	r25, 0x00	; 0
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	91 f0       	breq	.+36     	; 0x3d00 <vfprintf+0x38a>
    3cdc:	81 fc       	sbrc	r8, 1
    3cde:	02 c0       	rjmp	.+4      	; 0x3ce4 <vfprintf+0x36e>
    3ce0:	80 e2       	ldi	r24, 0x20	; 32
    3ce2:	01 c0       	rjmp	.+2      	; 0x3ce6 <vfprintf+0x370>
    3ce4:	8b e2       	ldi	r24, 0x2B	; 43
    3ce6:	b7 fc       	sbrc	r11, 7
    3ce8:	8d e2       	ldi	r24, 0x2D	; 45
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	b6 01       	movw	r22, r12
    3cee:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    3cf2:	06 c0       	rjmp	.+12     	; 0x3d00 <vfprintf+0x38a>
    3cf4:	80 e3       	ldi	r24, 0x30	; 48
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	b6 01       	movw	r22, r12
    3cfa:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    3cfe:	ea 94       	dec	r14
    3d00:	7e 14       	cp	r7, r14
    3d02:	c0 f3       	brcs	.-16     	; 0x3cf4 <vfprintf+0x37e>
    3d04:	7a 94       	dec	r7
    3d06:	f2 01       	movw	r30, r4
    3d08:	e7 0d       	add	r30, r7
    3d0a:	f1 1d       	adc	r31, r1
    3d0c:	80 81       	ld	r24, Z
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	b6 01       	movw	r22, r12
    3d12:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    3d16:	77 20       	and	r7, r7
    3d18:	a9 f7       	brne	.-22     	; 0x3d04 <vfprintf+0x38e>
    3d1a:	06 c0       	rjmp	.+12     	; 0x3d28 <vfprintf+0x3b2>
    3d1c:	80 e2       	ldi	r24, 0x20	; 32
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	b6 01       	movw	r22, r12
    3d22:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <fputc>
    3d26:	fa 94       	dec	r15
    3d28:	ff 20       	and	r15, r15
    3d2a:	c1 f7       	brne	.-16     	; 0x3d1c <vfprintf+0x3a6>
    3d2c:	37 ce       	rjmp	.-914    	; 0x399c <vfprintf+0x26>
    3d2e:	f6 01       	movw	r30, r12
    3d30:	26 81       	ldd	r18, Z+6	; 0x06
    3d32:	37 81       	ldd	r19, Z+7	; 0x07
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <vfprintf+0x3c4>
    3d36:	2f ef       	ldi	r18, 0xFF	; 255
    3d38:	3f ef       	ldi	r19, 0xFF	; 255
    3d3a:	c9 01       	movw	r24, r18
    3d3c:	2c 96       	adiw	r28, 0x0c	; 12
    3d3e:	e2 e1       	ldi	r30, 0x12	; 18
    3d40:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__epilogue_restores__>

00003d44 <__eerd_block_m168>:
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22

00003d48 <__eerd_blraw_m168>:
    3d48:	fc 01       	movw	r30, r24
    3d4a:	f9 99       	sbic	0x1f, 1	; 31
    3d4c:	fe cf       	rjmp	.-4      	; 0x3d4a <__eerd_blraw_m168+0x2>
    3d4e:	06 c0       	rjmp	.+12     	; 0x3d5c <__eerd_blraw_m168+0x14>
    3d50:	f2 bd       	out	0x22, r31	; 34
    3d52:	e1 bd       	out	0x21, r30	; 33
    3d54:	f8 9a       	sbi	0x1f, 0	; 31
    3d56:	31 96       	adiw	r30, 0x01	; 1
    3d58:	00 b4       	in	r0, 0x20	; 32
    3d5a:	0d 92       	st	X+, r0
    3d5c:	41 50       	subi	r20, 0x01	; 1
    3d5e:	50 40       	sbci	r21, 0x00	; 0
    3d60:	b8 f7       	brcc	.-18     	; 0x3d50 <__eerd_blraw_m168+0x8>
    3d62:	08 95       	ret

00003d64 <__eerd_byte_m168>:
    3d64:	f9 99       	sbic	0x1f, 1	; 31
    3d66:	fe cf       	rjmp	.-4      	; 0x3d64 <__eerd_byte_m168>
    3d68:	92 bd       	out	0x22, r25	; 34
    3d6a:	81 bd       	out	0x21, r24	; 33
    3d6c:	f8 9a       	sbi	0x1f, 0	; 31
    3d6e:	99 27       	eor	r25, r25
    3d70:	80 b5       	in	r24, 0x20	; 32
    3d72:	08 95       	ret

00003d74 <__eewr_byte_m168>:
    3d74:	26 2f       	mov	r18, r22

00003d76 <__eewr_r18_m168>:
    3d76:	f9 99       	sbic	0x1f, 1	; 31
    3d78:	fe cf       	rjmp	.-4      	; 0x3d76 <__eewr_r18_m168>
    3d7a:	1f ba       	out	0x1f, r1	; 31
    3d7c:	92 bd       	out	0x22, r25	; 34
    3d7e:	81 bd       	out	0x21, r24	; 33
    3d80:	20 bd       	out	0x20, r18	; 32
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	fa 9a       	sbi	0x1f, 2	; 31
    3d88:	f9 9a       	sbi	0x1f, 1	; 31
    3d8a:	0f be       	out	0x3f, r0	; 63
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	08 95       	ret

00003d90 <strnlen_P>:
    3d90:	fc 01       	movw	r30, r24
    3d92:	05 90       	lpm	r0, Z+
    3d94:	61 50       	subi	r22, 0x01	; 1
    3d96:	70 40       	sbci	r23, 0x00	; 0
    3d98:	01 10       	cpse	r0, r1
    3d9a:	d8 f7       	brcc	.-10     	; 0x3d92 <strnlen_P+0x2>
    3d9c:	80 95       	com	r24
    3d9e:	90 95       	com	r25
    3da0:	8e 0f       	add	r24, r30
    3da2:	9f 1f       	adc	r25, r31
    3da4:	08 95       	ret

00003da6 <strnlen>:
    3da6:	fc 01       	movw	r30, r24
    3da8:	61 50       	subi	r22, 0x01	; 1
    3daa:	70 40       	sbci	r23, 0x00	; 0
    3dac:	01 90       	ld	r0, Z+
    3dae:	01 10       	cpse	r0, r1
    3db0:	d8 f7       	brcc	.-10     	; 0x3da8 <strnlen+0x2>
    3db2:	80 95       	com	r24
    3db4:	90 95       	com	r25
    3db6:	8e 0f       	add	r24, r30
    3db8:	9f 1f       	adc	r25, r31
    3dba:	08 95       	ret

00003dbc <fputc>:
    3dbc:	0f 93       	push	r16
    3dbe:	1f 93       	push	r17
    3dc0:	cf 93       	push	r28
    3dc2:	df 93       	push	r29
    3dc4:	8c 01       	movw	r16, r24
    3dc6:	eb 01       	movw	r28, r22
    3dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dca:	81 ff       	sbrs	r24, 1
    3dcc:	1b c0       	rjmp	.+54     	; 0x3e04 <fputc+0x48>
    3dce:	82 ff       	sbrs	r24, 2
    3dd0:	0d c0       	rjmp	.+26     	; 0x3dec <fputc+0x30>
    3dd2:	2e 81       	ldd	r18, Y+6	; 0x06
    3dd4:	3f 81       	ldd	r19, Y+7	; 0x07
    3dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dda:	28 17       	cp	r18, r24
    3ddc:	39 07       	cpc	r19, r25
    3dde:	64 f4       	brge	.+24     	; 0x3df8 <fputc+0x3c>
    3de0:	e8 81       	ld	r30, Y
    3de2:	f9 81       	ldd	r31, Y+1	; 0x01
    3de4:	01 93       	st	Z+, r16
    3de6:	f9 83       	std	Y+1, r31	; 0x01
    3de8:	e8 83       	st	Y, r30
    3dea:	06 c0       	rjmp	.+12     	; 0x3df8 <fputc+0x3c>
    3dec:	e8 85       	ldd	r30, Y+8	; 0x08
    3dee:	f9 85       	ldd	r31, Y+9	; 0x09
    3df0:	80 2f       	mov	r24, r16
    3df2:	09 95       	icall
    3df4:	00 97       	sbiw	r24, 0x00	; 0
    3df6:	31 f4       	brne	.+12     	; 0x3e04 <fputc+0x48>
    3df8:	8e 81       	ldd	r24, Y+6	; 0x06
    3dfa:	9f 81       	ldd	r25, Y+7	; 0x07
    3dfc:	01 96       	adiw	r24, 0x01	; 1
    3dfe:	9f 83       	std	Y+7, r25	; 0x07
    3e00:	8e 83       	std	Y+6, r24	; 0x06
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <fputc+0x4c>
    3e04:	0f ef       	ldi	r16, 0xFF	; 255
    3e06:	1f ef       	ldi	r17, 0xFF	; 255
    3e08:	c8 01       	movw	r24, r16
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	08 95       	ret

00003e14 <__ultoa_invert>:
    3e14:	fa 01       	movw	r30, r20
    3e16:	aa 27       	eor	r26, r26
    3e18:	28 30       	cpi	r18, 0x08	; 8
    3e1a:	51 f1       	breq	.+84     	; 0x3e70 <__ultoa_invert+0x5c>
    3e1c:	20 31       	cpi	r18, 0x10	; 16
    3e1e:	81 f1       	breq	.+96     	; 0x3e80 <__ultoa_invert+0x6c>
    3e20:	e8 94       	clt
    3e22:	6f 93       	push	r22
    3e24:	6e 7f       	andi	r22, 0xFE	; 254
    3e26:	6e 5f       	subi	r22, 0xFE	; 254
    3e28:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2e:	af 4f       	sbci	r26, 0xFF	; 255
    3e30:	b1 e0       	ldi	r27, 0x01	; 1
    3e32:	3e d0       	rcall	.+124    	; 0x3eb0 <__ultoa_invert+0x9c>
    3e34:	b4 e0       	ldi	r27, 0x04	; 4
    3e36:	3c d0       	rcall	.+120    	; 0x3eb0 <__ultoa_invert+0x9c>
    3e38:	67 0f       	add	r22, r23
    3e3a:	78 1f       	adc	r23, r24
    3e3c:	89 1f       	adc	r24, r25
    3e3e:	9a 1f       	adc	r25, r26
    3e40:	a1 1d       	adc	r26, r1
    3e42:	68 0f       	add	r22, r24
    3e44:	79 1f       	adc	r23, r25
    3e46:	8a 1f       	adc	r24, r26
    3e48:	91 1d       	adc	r25, r1
    3e4a:	a1 1d       	adc	r26, r1
    3e4c:	6a 0f       	add	r22, r26
    3e4e:	71 1d       	adc	r23, r1
    3e50:	81 1d       	adc	r24, r1
    3e52:	91 1d       	adc	r25, r1
    3e54:	a1 1d       	adc	r26, r1
    3e56:	20 d0       	rcall	.+64     	; 0x3e98 <__ultoa_invert+0x84>
    3e58:	09 f4       	brne	.+2      	; 0x3e5c <__ultoa_invert+0x48>
    3e5a:	68 94       	set
    3e5c:	3f 91       	pop	r19
    3e5e:	2a e0       	ldi	r18, 0x0A	; 10
    3e60:	26 9f       	mul	r18, r22
    3e62:	11 24       	eor	r1, r1
    3e64:	30 19       	sub	r19, r0
    3e66:	30 5d       	subi	r19, 0xD0	; 208
    3e68:	31 93       	st	Z+, r19
    3e6a:	de f6       	brtc	.-74     	; 0x3e22 <__ultoa_invert+0xe>
    3e6c:	cf 01       	movw	r24, r30
    3e6e:	08 95       	ret
    3e70:	46 2f       	mov	r20, r22
    3e72:	47 70       	andi	r20, 0x07	; 7
    3e74:	40 5d       	subi	r20, 0xD0	; 208
    3e76:	41 93       	st	Z+, r20
    3e78:	b3 e0       	ldi	r27, 0x03	; 3
    3e7a:	0f d0       	rcall	.+30     	; 0x3e9a <__ultoa_invert+0x86>
    3e7c:	c9 f7       	brne	.-14     	; 0x3e70 <__ultoa_invert+0x5c>
    3e7e:	f6 cf       	rjmp	.-20     	; 0x3e6c <__ultoa_invert+0x58>
    3e80:	46 2f       	mov	r20, r22
    3e82:	4f 70       	andi	r20, 0x0F	; 15
    3e84:	40 5d       	subi	r20, 0xD0	; 208
    3e86:	4a 33       	cpi	r20, 0x3A	; 58
    3e88:	18 f0       	brcs	.+6      	; 0x3e90 <__ultoa_invert+0x7c>
    3e8a:	49 5d       	subi	r20, 0xD9	; 217
    3e8c:	31 fd       	sbrc	r19, 1
    3e8e:	40 52       	subi	r20, 0x20	; 32
    3e90:	41 93       	st	Z+, r20
    3e92:	02 d0       	rcall	.+4      	; 0x3e98 <__ultoa_invert+0x84>
    3e94:	a9 f7       	brne	.-22     	; 0x3e80 <__ultoa_invert+0x6c>
    3e96:	ea cf       	rjmp	.-44     	; 0x3e6c <__ultoa_invert+0x58>
    3e98:	b4 e0       	ldi	r27, 0x04	; 4
    3e9a:	a6 95       	lsr	r26
    3e9c:	97 95       	ror	r25
    3e9e:	87 95       	ror	r24
    3ea0:	77 95       	ror	r23
    3ea2:	67 95       	ror	r22
    3ea4:	ba 95       	dec	r27
    3ea6:	c9 f7       	brne	.-14     	; 0x3e9a <__ultoa_invert+0x86>
    3ea8:	00 97       	sbiw	r24, 0x00	; 0
    3eaa:	61 05       	cpc	r22, r1
    3eac:	71 05       	cpc	r23, r1
    3eae:	08 95       	ret
    3eb0:	9b 01       	movw	r18, r22
    3eb2:	ac 01       	movw	r20, r24
    3eb4:	0a 2e       	mov	r0, r26
    3eb6:	06 94       	lsr	r0
    3eb8:	57 95       	ror	r21
    3eba:	47 95       	ror	r20
    3ebc:	37 95       	ror	r19
    3ebe:	27 95       	ror	r18
    3ec0:	ba 95       	dec	r27
    3ec2:	c9 f7       	brne	.-14     	; 0x3eb6 <__ultoa_invert+0xa2>
    3ec4:	62 0f       	add	r22, r18
    3ec6:	73 1f       	adc	r23, r19
    3ec8:	84 1f       	adc	r24, r20
    3eca:	95 1f       	adc	r25, r21
    3ecc:	a0 1d       	adc	r26, r0
    3ece:	08 95       	ret

00003ed0 <__prologue_saves__>:
    3ed0:	2f 92       	push	r2
    3ed2:	3f 92       	push	r3
    3ed4:	4f 92       	push	r4
    3ed6:	5f 92       	push	r5
    3ed8:	6f 92       	push	r6
    3eda:	7f 92       	push	r7
    3edc:	8f 92       	push	r8
    3ede:	9f 92       	push	r9
    3ee0:	af 92       	push	r10
    3ee2:	bf 92       	push	r11
    3ee4:	cf 92       	push	r12
    3ee6:	df 92       	push	r13
    3ee8:	ef 92       	push	r14
    3eea:	ff 92       	push	r15
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	ca 1b       	sub	r28, r26
    3efa:	db 0b       	sbc	r29, r27
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	09 94       	ijmp

00003f08 <__epilogue_restores__>:
    3f08:	2a 88       	ldd	r2, Y+18	; 0x12
    3f0a:	39 88       	ldd	r3, Y+17	; 0x11
    3f0c:	48 88       	ldd	r4, Y+16	; 0x10
    3f0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f10:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f12:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f14:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f16:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f18:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f1a:	b9 84       	ldd	r11, Y+9	; 0x09
    3f1c:	c8 84       	ldd	r12, Y+8	; 0x08
    3f1e:	df 80       	ldd	r13, Y+7	; 0x07
    3f20:	ee 80       	ldd	r14, Y+6	; 0x06
    3f22:	fd 80       	ldd	r15, Y+5	; 0x05
    3f24:	0c 81       	ldd	r16, Y+4	; 0x04
    3f26:	1b 81       	ldd	r17, Y+3	; 0x03
    3f28:	aa 81       	ldd	r26, Y+2	; 0x02
    3f2a:	b9 81       	ldd	r27, Y+1	; 0x01
    3f2c:	ce 0f       	add	r28, r30
    3f2e:	d1 1d       	adc	r29, r1
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	ed 01       	movw	r28, r26
    3f3c:	08 95       	ret

00003f3e <_exit>:
    3f3e:	f8 94       	cli

00003f40 <__stop_program>:
    3f40:	ff cf       	rjmp	.-2      	; 0x3f40 <__stop_program>
