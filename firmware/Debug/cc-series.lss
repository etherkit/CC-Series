
cc-series.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00003cd6  00003d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cd6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  0080013a  0080013a  00003dc4  2**0
                  ALLOC
  3 .eeprom       0000002a  00810000  00810000  00003dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005760  00000000  00000000  00003df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002356  00000000  00000000  00009550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_5>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_7>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <morsechar>:
      68:	ff 80 80 80 80 80 80 80 80 80 80 80 80 80 80 94     ................
      78:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      88:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      98:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

000000a3 <sinewave>:
      a3:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
      b3:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
      c3:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
      d3:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
      e3:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
      f3:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     103:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     113:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     123:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     133:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     143:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     153:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     163:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     173:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     183:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     193:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|
	...

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e6 ed       	ldi	r30, 0xD6	; 214
     1b8:	fc e3       	ldi	r31, 0x3C	; 60
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	aa 33       	cpi	r26, 0x3A	; 58
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	aa e3       	ldi	r26, 0x3A	; 58
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a7 3f       	cpi	r26, 0xF7	; 247
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 8c 0c 	call	0x1918	; 0x1918 <main>
     1da:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e2 <__vector_11>:

// Timer1 ISR
//
// Timer1 is the sinewave generator.
ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	1f 93       	push	r17
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	5f 93       	push	r21
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	ef 93       	push	r30
     200:	ff 93       	push	r31
     202:	df 93       	push	r29
     204:	cf 93       	push	r28
     206:	00 d0       	rcall	.+0      	; 0x208 <__vector_11+0x26>
     208:	0f 92       	push	r0
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	if(sidetone_on == TRUE)
     20e:	80 91 3a 01 	lds	r24, 0x013A
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__vector_11+0x36>
     216:	3c c0       	rjmp	.+120    	; 0x290 <__vector_11+0xae>
	{
		//SIDETONE_DDR |= _BV(SIDETONE);

		st_phase_acc = st_phase_acc + st_tune_word;
     218:	20 91 9e 01 	lds	r18, 0x019E
     21c:	30 91 9f 01 	lds	r19, 0x019F
     220:	40 91 a0 01 	lds	r20, 0x01A0
     224:	50 91 a1 01 	lds	r21, 0x01A1
     228:	80 91 b0 01 	lds	r24, 0x01B0
     22c:	90 91 b1 01 	lds	r25, 0x01B1
     230:	a0 91 b2 01 	lds	r26, 0x01B2
     234:	b0 91 b3 01 	lds	r27, 0x01B3
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	a4 1f       	adc	r26, r20
     23e:	b5 1f       	adc	r27, r21
     240:	80 93 9e 01 	sts	0x019E, r24
     244:	90 93 9f 01 	sts	0x019F, r25
     248:	a0 93 a0 01 	sts	0x01A0, r26
     24c:	b0 93 a1 01 	sts	0x01A1, r27
		st_sine_lookup = (uint8_t)(st_phase_acc >> 24);
     250:	80 91 9e 01 	lds	r24, 0x019E
     254:	90 91 9f 01 	lds	r25, 0x019F
     258:	a0 91 a0 01 	lds	r26, 0x01A0
     25c:	b0 91 a1 01 	lds	r27, 0x01A1
     260:	8b 2f       	mov	r24, r27
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	80 93 6c 01 	sts	0x016C, r24
		OCR0A = pgm_read_byte_near(&sinewave[st_sine_lookup]); // Just use the upper 8 bits for sine lookup
     26c:	87 e4       	ldi	r24, 0x47	; 71
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	20 91 6c 01 	lds	r18, 0x016C
     274:	22 2f       	mov	r18, r18
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	2d 55       	subi	r18, 0x5D	; 93
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	3a 83       	std	Y+2, r19	; 0x02
     27e:	29 83       	std	Y+1, r18	; 0x01
     280:	29 81       	ldd	r18, Y+1	; 0x01
     282:	3a 81       	ldd	r19, Y+2	; 0x02
     284:	f9 01       	movw	r30, r18
     286:	14 91       	lpm	r17, Z+
     288:	1b 83       	std	Y+3, r17	; 0x03
     28a:	2b 81       	ldd	r18, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
	{
		// Hi-Z the port when not using
		SIDETONE_DDR &= ~(_BV(SIDETONE));
		OCR0A = 0;
	} */
}
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	ff 91       	pop	r31
     29c:	ef 91       	pop	r30
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	5f 91       	pop	r21
     2a8:	4f 91       	pop	r20
     2aa:	3f 91       	pop	r19
     2ac:	2f 91       	pop	r18
     2ae:	1f 91       	pop	r17
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
// Timer2 ISR
//
// Fires every 1 ms. Used as a main system clock, for frequency counting, and handles the
// mute and transmit ports.
ISR(TIMER2_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	2f 93       	push	r18
     2c6:	3f 93       	push	r19
     2c8:	4f 93       	push	r20
     2ca:	5f 93       	push	r21
     2cc:	6f 93       	push	r22
     2ce:	7f 93       	push	r23
     2d0:	8f 93       	push	r24
     2d2:	9f 93       	push	r25
     2d4:	af 93       	push	r26
     2d6:	bf 93       	push	r27
     2d8:	ef 93       	push	r30
     2da:	ff 93       	push	r31
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
		fc_ovf = 0;
	}
	*/

	// Handle mute
	if(/*((timer > mute_start) && (timer < mute_end)) || */(mute_on == TRUE))
     2e4:	80 91 3b 01 	lds	r24, 0x013B
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	51 f4       	brne	.+20     	; 0x300 <__vector_7+0x46>
		MUTE_PORT |= _BV(MUTE);
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	28 e2       	ldi	r18, 0x28	; 40
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	20 62       	ori	r18, 0x20	; 32
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
     2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_7+0x58>
	else
		MUTE_PORT &= ~(_BV(MUTE));
     300:	88 e2       	ldi	r24, 0x28	; 40
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	28 e2       	ldi	r18, 0x28	; 40
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	f9 01       	movw	r30, r18
     30a:	20 81       	ld	r18, Z
     30c:	2f 7d       	andi	r18, 0xDF	; 223
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18

	// Handle transmit
	if((key_down == TRUE) && (timer < tx_end) && (timer > tx_start))
     312:	80 91 3c 01 	lds	r24, 0x013C
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	09 f0       	breq	.+2      	; 0x31c <__vector_7+0x62>
     31a:	43 c0       	rjmp	.+134    	; 0x3a2 <__vector_7+0xe8>
     31c:	20 91 6e 01 	lds	r18, 0x016E
     320:	30 91 6f 01 	lds	r19, 0x016F
     324:	40 91 70 01 	lds	r20, 0x0170
     328:	50 91 71 01 	lds	r21, 0x0171
     32c:	80 91 ed 01 	lds	r24, 0x01ED
     330:	90 91 ee 01 	lds	r25, 0x01EE
     334:	a0 91 ef 01 	lds	r26, 0x01EF
     338:	b0 91 f0 01 	lds	r27, 0x01F0
     33c:	28 17       	cp	r18, r24
     33e:	39 07       	cpc	r19, r25
     340:	4a 07       	cpc	r20, r26
     342:	5b 07       	cpc	r21, r27
     344:	70 f5       	brcc	.+92     	; 0x3a2 <__vector_7+0xe8>
     346:	20 91 6e 01 	lds	r18, 0x016E
     34a:	30 91 6f 01 	lds	r19, 0x016F
     34e:	40 91 70 01 	lds	r20, 0x0170
     352:	50 91 71 01 	lds	r21, 0x0171
     356:	80 91 a8 01 	lds	r24, 0x01A8
     35a:	90 91 a9 01 	lds	r25, 0x01A9
     35e:	a0 91 aa 01 	lds	r26, 0x01AA
     362:	b0 91 ab 01 	lds	r27, 0x01AB
     366:	82 17       	cp	r24, r18
     368:	93 07       	cpc	r25, r19
     36a:	a4 07       	cpc	r26, r20
     36c:	b5 07       	cpc	r27, r21
     36e:	c8 f4       	brcc	.+50     	; 0x3a2 <__vector_7+0xe8>
	{
		if(inc_tune_state == RIT || inc_tune_state == XIT)
     370:	80 91 d2 01 	lds	r24, 0x01D2
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	21 f0       	breq	.+8      	; 0x380 <__vector_7+0xc6>
     378:	80 91 d2 01 	lds	r24, 0x01D2
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	21 f4       	brne	.+8      	; 0x388 <__vector_7+0xce>
			set_dds_freq_reg(REG_1);
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 4f 0c 	call	0x189e	; 0x189e <set_dds_freq_reg>
     386:	03 c0       	rjmp	.+6      	; 0x38e <__vector_7+0xd4>
		else
			set_dds_freq_reg(REG_0);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 4f 0c 	call	0x189e	; 0x189e <set_dds_freq_reg>
		TX_PORT |= _BV(TX);
     38e:	88 e2       	ldi	r24, 0x28	; 40
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	28 e2       	ldi	r18, 0x28	; 40
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	20 61       	ori	r18, 0x10	; 16
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
     3a0:	0d c0       	rjmp	.+26     	; 0x3bc <__vector_7+0x102>
	}
	else
	{
		set_dds_freq_reg(tune_reg);
     3a2:	80 91 d1 01 	lds	r24, 0x01D1
     3a6:	0e 94 4f 0c 	call	0x189e	; 0x189e <set_dds_freq_reg>
		TX_PORT &= ~(_BV(TX));
     3aa:	88 e2       	ldi	r24, 0x28	; 40
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	28 e2       	ldi	r18, 0x28	; 40
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	2f 7e       	andi	r18, 0xEF	; 239
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
	}

	// Handle the RIT/XIT LED
	if(inc_tune_state != NONE)
     3bc:	80 91 d2 01 	lds	r24, 0x01D2
     3c0:	88 23       	and	r24, r24
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <__vector_7+0x10c>
     3c4:	45 c0       	rjmp	.+138    	; 0x450 <__vector_7+0x196>
	{
		if(inc_tune_state == RIT)
     3c6:	80 91 d2 01 	lds	r24, 0x01D2
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	51 f4       	brne	.+20     	; 0x3e2 <__vector_7+0x128>
		{
			//RIT_LED_DDR |= _BV(RIT_LED);
			RIT_LED_PORT |= _BV(RIT_LED);
     3ce:	88 e2       	ldi	r24, 0x28	; 40
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	28 e2       	ldi	r18, 0x28	; 40
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	22 60       	ori	r18, 0x02	; 2
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
     3e0:	37 c0       	rjmp	.+110    	; 0x450 <__vector_7+0x196>
		}
		else if(inc_tune_state == XIT)
     3e2:	80 91 d2 01 	lds	r24, 0x01D2
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	99 f5       	brne	.+102    	; 0x450 <__vector_7+0x196>
		{
			if(cur_timer > led_toggle)
     3ea:	20 91 68 01 	lds	r18, 0x0168
     3ee:	30 91 69 01 	lds	r19, 0x0169
     3f2:	40 91 6a 01 	lds	r20, 0x016A
     3f6:	50 91 6b 01 	lds	r21, 0x016B
     3fa:	80 91 dd 01 	lds	r24, 0x01DD
     3fe:	90 91 de 01 	lds	r25, 0x01DE
     402:	a0 91 df 01 	lds	r26, 0x01DF
     406:	b0 91 e0 01 	lds	r27, 0x01E0
     40a:	82 17       	cp	r24, r18
     40c:	93 07       	cpc	r25, r19
     40e:	a4 07       	cpc	r26, r20
     410:	b5 07       	cpc	r27, r21
     412:	f0 f4       	brcc	.+60     	; 0x450 <__vector_7+0x196>
			{
				RIT_LED_PORT ^= _BV(RIT_LED);
     414:	88 e2       	ldi	r24, 0x28	; 40
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	28 e2       	ldi	r18, 0x28	; 40
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	f9 01       	movw	r30, r18
     41e:	30 81       	ld	r19, Z
     420:	22 e0       	ldi	r18, 0x02	; 2
     422:	23 27       	eor	r18, r19
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
				led_toggle = cur_timer + XIT_BLINK;
     428:	80 91 68 01 	lds	r24, 0x0168
     42c:	90 91 69 01 	lds	r25, 0x0169
     430:	a0 91 6a 01 	lds	r26, 0x016A
     434:	b0 91 6b 01 	lds	r27, 0x016B
     438:	8c 50       	subi	r24, 0x0C	; 12
     43a:	9e 4f       	sbci	r25, 0xFE	; 254
     43c:	af 4f       	sbci	r26, 0xFF	; 255
     43e:	bf 4f       	sbci	r27, 0xFF	; 255
     440:	80 93 dd 01 	sts	0x01DD, r24
     444:	90 93 de 01 	sts	0x01DE, r25
     448:	a0 93 df 01 	sts	0x01DF, r26
     44c:	b0 93 e0 01 	sts	0x01E0, r27
			}
		}

	}

	debounce(FALSE);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>

	// Need to consider timer overflow?
	timer++;
     456:	80 91 6e 01 	lds	r24, 0x016E
     45a:	90 91 6f 01 	lds	r25, 0x016F
     45e:	a0 91 70 01 	lds	r26, 0x0170
     462:	b0 91 71 01 	lds	r27, 0x0171
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	a1 1d       	adc	r26, r1
     46a:	b1 1d       	adc	r27, r1
     46c:	80 93 6e 01 	sts	0x016E, r24
     470:	90 93 6f 01 	sts	0x016F, r25
     474:	a0 93 70 01 	sts	0x0170, r26
     478:	b0 93 71 01 	sts	0x0171, r27
}
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	7f 91       	pop	r23
     48e:	6f 91       	pop	r22
     490:	5f 91       	pop	r21
     492:	4f 91       	pop	r20
     494:	3f 91       	pop	r19
     496:	2f 91       	pop	r18
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <__vector_5>:

// Just needed to wake up on pin change
ISR(PCINT2_vect)
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	// Stop any more pin change interrupts
	PCICR = 0;
     4c0:	88 e6       	ldi	r24, 0x68	; 104
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	fc 01       	movw	r30, r24
     4c6:	10 82       	st	Z, r1

	cur_mode = default_mode;
     4c8:	80 91 6d 01 	lds	r24, 0x016D
     4cc:	80 93 a2 01 	sts	0x01A2, r24
	cur_state = IDLE;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 c8 01 	sts	0x01C8, r24

	// Needs some idle time to get up to speed
	cur_state_end = cur_timer + 100;
     4d6:	80 91 68 01 	lds	r24, 0x0168
     4da:	90 91 69 01 	lds	r25, 0x0169
     4de:	a0 91 6a 01 	lds	r26, 0x016A
     4e2:	b0 91 6b 01 	lds	r27, 0x016B
     4e6:	8c 59       	subi	r24, 0x9C	; 156
     4e8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ea:	af 4f       	sbci	r26, 0xFF	; 255
     4ec:	bf 4f       	sbci	r27, 0xFF	; 255
     4ee:	80 93 d4 01 	sts	0x01D4, r24
     4f2:	90 93 d5 01 	sts	0x01D5, r25
     4f6:	a0 93 d6 01 	sts	0x01D6, r26
     4fa:	b0 93 d7 01 	sts	0x01D7, r27
	sleep_timer = cur_timer + SLEEP_DELAY;
     4fe:	80 91 68 01 	lds	r24, 0x0168
     502:	90 91 69 01 	lds	r25, 0x0169
     506:	a0 91 6a 01 	lds	r26, 0x016A
     50a:	b0 91 6b 01 	lds	r27, 0x016B
     50e:	84 5d       	subi	r24, 0xD4	; 212
     510:	9e 4f       	sbci	r25, 0xFE	; 254
     512:	af 4f       	sbci	r26, 0xFF	; 255
     514:	bf 4f       	sbci	r27, 0xFF	; 255
     516:	80 93 cd 01 	sts	0x01CD, r24
     51a:	90 93 ce 01 	sts	0x01CE, r25
     51e:	a0 93 cf 01 	sts	0x01CF, r26
     522:	b0 93 d0 01 	sts	0x01D0, r27
}
     526:	cf 91       	pop	r28
     528:	df 91       	pop	r29
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	bf 91       	pop	r27
     530:	af 91       	pop	r26
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <init>:

void init(void)
{
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	0f 92       	push	r0
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	// Disable interrupts
	cli();
     54a:	f8 94       	cli

	// Osc is 16 MHz, configure system clock for /1
	CLKPR = _BV(CLKPCE);
     54c:	81 e6       	ldi	r24, 0x61	; 97
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	20 e8       	ldi	r18, 0x80	; 128
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
	CLKPR = 0;
     556:	81 e6       	ldi	r24, 0x61	; 97
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	fc 01       	movw	r30, r24
     55c:	10 82       	st	Z, r1

	// Setup Timer0 as phase correct PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00); // Set for Phase Correct PWM mode, output on OC0A
     55e:	84 e4       	ldi	r24, 0x44	; 68
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	21 e8       	ldi	r18, 0x81	; 129
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00); // Prescaler /1
     568:	85 e4       	ldi	r24, 0x45	; 69
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	21 e0       	ldi	r18, 0x01	; 1
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	//TCCR0B = _BV(CS01);
	//TIMSK0 |= _BV(TOIE0); // Enable Timer0 CTC overflow interrupt

	// Setup Timer1 as sample rate generator for sidetone
	TCCR1B = _BV(WGM12) | _BV(CS10); // Set for CTC mode, Prescaler /1
     572:	81 e8       	ldi	r24, 0x81	; 129
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	29 e0       	ldi	r18, 0x09	; 9
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
	TCCR1A = 0;
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	10 82       	st	Z, r1
	OCR1A = 1000; // 16 MHz clock / 16 kHz sample rate = 1000
     584:	88 e8       	ldi	r24, 0x88	; 136
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	28 ee       	ldi	r18, 0xE8	; 232
     58a:	33 e0       	ldi	r19, 0x03	; 3
     58c:	fc 01       	movw	r30, r24
     58e:	31 83       	std	Z+1, r19	; 0x01
     590:	20 83       	st	Z, r18
	TIMSK1 = _BV(OCIE1A);
     592:	8f e6       	ldi	r24, 0x6F	; 111
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	22 e0       	ldi	r18, 0x02	; 2
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
	TCCR1B = _BV(CS12) | _BV(CS11) | _BV(CS10); // Ext. clock source on T1, rising edge
	TIMSK1 = _BV(TOIE1); // Enable overflow interrupt
	*/

	// Setup Timer2 as main event timer, 4 us tick
	TCCR2A = _BV(WGM21); // Set for CTC mode
     59c:	80 eb       	ldi	r24, 0xB0	; 176
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS21) | _BV(CS20); // Prescaler /32 for 8 MHz clock
	TCCR2B = _BV(CS22); // Prescaler /64 for 16 MHz clock
     5a6:	81 eb       	ldi	r24, 0xB1	; 177
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	24 e0       	ldi	r18, 0x04	; 4
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
	//TCCR2B = _BV(CS22) | _BV(CS20);
	TIMSK2 |= _BV(OCIE2A); // Enable Timer2 CTC interrupt
     5b0:	80 e7       	ldi	r24, 0x70	; 112
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	20 e7       	ldi	r18, 0x70	; 112
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	f9 01       	movw	r30, r18
     5ba:	20 81       	ld	r18, Z
     5bc:	22 60       	ori	r18, 0x02	; 2
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
	OCR2A = TIMER2_COUNT; // Timer2 CTC A value
     5c2:	83 eb       	ldi	r24, 0xB3	; 179
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	29 ef       	ldi	r18, 0xF9	; 249
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18

	// Setup ADC
	ADCSRA |= _BV(ADPS2) | _BV(ADEN); // Prescaler /16, enable ADC
     5cc:	8a e7       	ldi	r24, 0x7A	; 122
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2a e7       	ldi	r18, 0x7A	; 122
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	24 68       	ori	r18, 0x84	; 132
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
	ADMUX = _BV(REFS0) | _BV(ADLAR);  // AREF ref voltage, left adjust result, read channel 0
     5de:	8c e7       	ldi	r24, 0x7C	; 124
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	20 e6       	ldi	r18, 0x60	; 96
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18

	// Setup pin change interrupts on paddle inputs and buttons
	//PCMSK2 = _BV(PCINT18);
	PCMSK0 = _BV(ENC_A_PC);
     5e8:	8b e6       	ldi	r24, 0x6B	; 107
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	PCMSK2 = _BV(PADDLE_DIT_PC) | _BV(PADDLE_DAH_PC) | _BV(CMD_BUTTON_PC) | _BV(MSG_BUTTON_PC) |_BV(ENC_B_PC) | _BV(ENC_BUTTON_PC);
     5f2:	8d e6       	ldi	r24, 0x6D	; 109
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	2f e9       	ldi	r18, 0x9F	; 159
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
	//PCICR = _BV(PCIE2);

	// Configure output ports
	SIDETONE_DDR |= _BV(SIDETONE);
     5fc:	8a e2       	ldi	r24, 0x2A	; 42
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2a e2       	ldi	r18, 0x2A	; 42
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	20 64       	ori	r18, 0x40	; 64
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	MUTE_DDR |= _BV(MUTE);
     60e:	87 e2       	ldi	r24, 0x27	; 39
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	27 e2       	ldi	r18, 0x27	; 39
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	f9 01       	movw	r30, r18
     618:	20 81       	ld	r18, Z
     61a:	20 62       	ori	r18, 0x20	; 32
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	TX_DDR |= _BV(TX);
     620:	87 e2       	ldi	r24, 0x27	; 39
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	27 e2       	ldi	r18, 0x27	; 39
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	f9 01       	movw	r30, r18
     62a:	20 81       	ld	r18, Z
     62c:	20 61       	ori	r18, 0x10	; 16
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
	RIT_LED_DDR &= ~(_BV(RIT_LED));
     632:	87 e2       	ldi	r24, 0x27	; 39
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	27 e2       	ldi	r18, 0x27	; 39
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f9 01       	movw	r30, r18
     63c:	20 81       	ld	r18, Z
     63e:	2d 7f       	andi	r18, 0xFD	; 253
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
	RIT_LED_PORT &= ~(_BV(RIT_LED));
     644:	88 e2       	ldi	r24, 0x28	; 40
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	28 e2       	ldi	r18, 0x28	; 40
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	2d 7f       	andi	r18, 0xFD	; 253
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18

	// Configure input ports
	PADDLE_DIT_DDR &= ~(_BV(PADDLE_DIT));
     656:	8a e2       	ldi	r24, 0x2A	; 42
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	2a e2       	ldi	r18, 0x2A	; 42
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	f9 01       	movw	r30, r18
     660:	20 81       	ld	r18, Z
     662:	27 7f       	andi	r18, 0xF7	; 247
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
	PADDLE_DIT_PORT |= _BV(PADDLE_DIT); // Enable pull-up
     668:	8b e2       	ldi	r24, 0x2B	; 43
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	2b e2       	ldi	r18, 0x2B	; 43
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	28 60       	ori	r18, 0x08	; 8
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18

	PADDLE_DAH_DDR &= ~(_BV(PADDLE_DAH));
     67a:	8a e2       	ldi	r24, 0x2A	; 42
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	2a e2       	ldi	r18, 0x2A	; 42
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	2f 7e       	andi	r18, 0xEF	; 239
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
	PADDLE_DAH_PORT |= _BV(PADDLE_DAH); // Enable pull-up
     68c:	8b e2       	ldi	r24, 0x2B	; 43
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	2b e2       	ldi	r18, 0x2B	; 43
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	20 61       	ori	r18, 0x10	; 16
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18

	CMD_BUTTON_DDR &= ~(_BV(CMD_BUTTON));
     69e:	8a e2       	ldi	r24, 0x2A	; 42
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	2a e2       	ldi	r18, 0x2A	; 42
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	20 81       	ld	r18, Z
     6aa:	2b 7f       	andi	r18, 0xFB	; 251
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
	CMD_BUTTON_PORT |= _BV(CMD_BUTTON); // Enable pull-up
     6b0:	8b e2       	ldi	r24, 0x2B	; 43
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	2b e2       	ldi	r18, 0x2B	; 43
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	20 81       	ld	r18, Z
     6bc:	24 60       	ori	r18, 0x04	; 4
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18

	MSG_BUTTON_DDR &= ~(_BV(MSG_BUTTON));
     6c2:	8a e2       	ldi	r24, 0x2A	; 42
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2a e2       	ldi	r18, 0x2A	; 42
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	2d 7f       	andi	r18, 0xFD	; 253
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
	MSG_BUTTON_PORT |= _BV(MSG_BUTTON); // Enable pull-up
     6d4:	8b e2       	ldi	r24, 0x2B	; 43
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	2b e2       	ldi	r18, 0x2B	; 43
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	22 60       	ori	r18, 0x02	; 2
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18

	ENC_A_DDR &= ~(_BV(ENC_A));
     6e6:	84 e2       	ldi	r24, 0x24	; 36
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	24 e2       	ldi	r18, 0x24	; 36
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	2e 7f       	andi	r18, 0xFE	; 254
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
	ENC_A_PORT |= _BV(ENC_A); // Enable pull-up
     6f8:	85 e2       	ldi	r24, 0x25	; 37
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	25 e2       	ldi	r18, 0x25	; 37
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	21 60       	ori	r18, 0x01	; 1
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18

	ENC_B_DDR &= ~(_BV(ENC_B));
     70a:	8a e2       	ldi	r24, 0x2A	; 42
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	2a e2       	ldi	r18, 0x2A	; 42
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	20 81       	ld	r18, Z
     716:	2f 77       	andi	r18, 0x7F	; 127
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
	ENC_B_PORT |= _BV(ENC_B); // Enable pull-up
     71c:	8b e2       	ldi	r24, 0x2B	; 43
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2b e2       	ldi	r18, 0x2B	; 43
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	f9 01       	movw	r30, r18
     726:	20 81       	ld	r18, Z
     728:	20 68       	ori	r18, 0x80	; 128
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18

	ENC_BUTTON_DDR &= ~(_BV(ENC_BUTTON));
     72e:	8a e2       	ldi	r24, 0x2A	; 42
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	2a e2       	ldi	r18, 0x2A	; 42
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	f9 01       	movw	r30, r18
     738:	20 81       	ld	r18, Z
     73a:	2e 7f       	andi	r18, 0xFE	; 254
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
	ENC_BUTTON_PORT |= _BV(ENC_BUTTON); // Enable pull-up
     740:	8b e2       	ldi	r24, 0x2B	; 43
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	2b e2       	ldi	r18, 0x2B	; 43
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	f9 01       	movw	r30, r18
     74a:	20 81       	ld	r18, Z
     74c:	21 60       	ori	r18, 0x01	; 1
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18

	// Configure SPI
	uint8_t spi_data;
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | _BV(SPI_FSYNC);
     752:	84 e2       	ldi	r24, 0x24	; 36
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	24 e2       	ldi	r18, 0x24	; 36
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	f9 01       	movw	r30, r18
     75c:	20 81       	ld	r18, Z
     75e:	2e 62       	ori	r18, 0x2E	; 46
     760:	fc 01       	movw	r30, r24
     762:	20 83       	st	Z, r18
	SPCR = _BV(SPE) | _BV(MSTR) |_BV(CPOL) | _BV(SPR0);
     764:	8c e4       	ldi	r24, 0x4C	; 76
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	29 e5       	ldi	r18, 0x59	; 89
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
	//SPI_PORT |= _BV(SPI_SS);

	spi_data = SPSR; // Dummy read to clear interrupt flag
     76e:	8d e4       	ldi	r24, 0x4D	; 77
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	80 81       	ld	r24, Z
     776:	89 83       	std	Y+1, r24	; 0x01
	spi_data = SPDR;
     778:	8e e4       	ldi	r24, 0x4E	; 78
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	89 83       	std	Y+1, r24	; 0x01

	// Power saving
	power_twi_disable();
     782:	84 e6       	ldi	r24, 0x64	; 100
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	24 e6       	ldi	r18, 0x64	; 100
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	20 68       	ori	r18, 0x80	; 128
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
	power_usart0_disable();
     794:	84 e6       	ldi	r24, 0x64	; 100
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	24 e6       	ldi	r18, 0x64	; 100
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	20 81       	ld	r18, Z
     7a0:	22 60       	ori	r18, 0x02	; 2
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18

	set_sleep_mode(SLEEP_MODE_STANDBY);
     7a6:	83 e5       	ldi	r24, 0x53	; 83
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	23 e5       	ldi	r18, 0x53	; 83
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	20 81       	ld	r18, Z
     7b2:	21 7f       	andi	r18, 0xF1	; 241
     7b4:	2c 60       	ori	r18, 0x0C	; 12
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18

	// Initialize global variables
	prev_state = IDLE;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 72 01 	sts	0x0172, r24
	cur_state = IDLE;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 c8 01 	sts	0x01C8, r24
	next_state = IDLE;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 a7 01 	sts	0x01A7, r24

	timer = 0;
     7cc:	10 92 6e 01 	sts	0x016E, r1
     7d0:	10 92 6f 01 	sts	0x016F, r1
     7d4:	10 92 70 01 	sts	0x0170, r1
     7d8:	10 92 71 01 	sts	0x0171, r1

	eeprom_busy_wait();
     7dc:	8f e3       	ldi	r24, 0x3F	; 63
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	fc 01       	movw	r30, r24
     7e2:	80 81       	ld	r24, Z
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	82 70       	andi	r24, 0x02	; 2
     7ea:	90 70       	andi	r25, 0x00	; 0
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	b1 f7       	brne	.-20     	; 0x7dc <init+0x29c>
	wpm = eeprom_read_byte(&ee_wpm);
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <__eerd_byte_m168>
     7f8:	80 93 e6 01 	sts	0x01E6, r24
	set_wpm(wpm);
     7fc:	80 91 e6 01 	lds	r24, 0x01E6
     800:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_wpm>

	//dds_freq_word = 0x05DA5119;
	dds_freq_word = DDS_INIT;
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	9f e1       	ldi	r25, 0x1F	; 31
     808:	a1 e1       	ldi	r26, 0x11	; 17
     80a:	b5 e0       	ldi	r27, 0x05	; 5
     80c:	80 93 ac 01 	sts	0x01AC, r24
     810:	90 93 ad 01 	sts	0x01AD, r25
     814:	a0 93 ae 01 	sts	0x01AE, r26
     818:	b0 93 af 01 	sts	0x01AF, r27
	tune_freq = FREQ_INIT;
     81c:	80 ee       	ldi	r24, 0xE0	; 224
     81e:	99 e8       	ldi	r25, 0x89	; 137
     820:	a6 ed       	ldi	r26, 0xD6	; 214
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	80 93 e2 01 	sts	0x01E2, r24
     828:	90 93 e3 01 	sts	0x01E3, r25
     82c:	a0 93 e4 01 	sts	0x01E4, r26
     830:	b0 93 e5 01 	sts	0x01E5, r27
	tune_dds(dds_freq_word, REG_0, TRUE);
     834:	80 91 ac 01 	lds	r24, 0x01AC
     838:	90 91 ad 01 	lds	r25, 0x01AD
     83c:	a0 91 ae 01 	lds	r26, 0x01AE
     840:	b0 91 af 01 	lds	r27, 0x01AF
     844:	bc 01       	movw	r22, r24
     846:	cd 01       	movw	r24, r26
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
	tune_dds(dds_freq_word, REG_1, FALSE);
     850:	80 91 ac 01 	lds	r24, 0x01AC
     854:	90 91 ad 01 	lds	r25, 0x01AD
     858:	a0 91 ae 01 	lds	r26, 0x01AE
     85c:	b0 91 af 01 	lds	r27, 0x01AF
     860:	bc 01       	movw	r22, r24
     862:	cd 01       	movw	r24, r26
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>

	st_freq = ST_DEFAULT;
     86c:	84 ef       	ldi	r24, 0xF4	; 244
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	90 93 bb 01 	sts	0x01BB, r25
     874:	80 93 ba 01 	sts	0x01BA, r24
	set_st_freq(st_freq);
     878:	80 91 ba 01 	lds	r24, 0x01BA
     87c:	90 91 bb 01 	lds	r25, 0x01BB
     880:	cc 01       	movw	r24, r24
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	bc 01       	movw	r22, r24
     888:	cd 01       	movw	r24, r26
     88a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <set_st_freq>

	inc_tune_state = OFF;
     88e:	10 92 d2 01 	sts	0x01D2, r1
	tune_reg = REG_0;
     892:	10 92 d1 01 	sts	0x01D1, r1

	// Enable interrupts
	sei();
     896:	78 94       	sei
}
     898:	0f 90       	pop	r0
     89a:	cf 91       	pop	r28
     89c:	df 91       	pop	r29
     89e:	08 95       	ret

000008a0 <set_wpm>:

void set_wpm(uint8_t new_wpm)
{
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	0f 92       	push	r0
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	89 83       	std	Y+1, r24	; 0x01
	// Dit length in milliseconds is 1200 ms / WPM
	// then divide that by the 1 ms per timer tick
	dit_length = (1200 / new_wpm);
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	28 2f       	mov	r18, r24
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	80 eb       	ldi	r24, 0xB0	; 176
     8b4:	94 e0       	ldi	r25, 0x04	; 4
     8b6:	b9 01       	movw	r22, r18
     8b8:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__divmodhi4>
     8bc:	9b 01       	movw	r18, r22
     8be:	c9 01       	movw	r24, r18
     8c0:	90 93 74 01 	sts	0x0174, r25
     8c4:	80 93 73 01 	sts	0x0173, r24
}
     8c8:	0f 90       	pop	r0
     8ca:	cf 91       	pop	r28
     8cc:	df 91       	pop	r29
     8ce:	08 95       	ret

000008d0 <debounce>:

void debounce(enum BOOL flush)
{
     8d0:	df 93       	push	r29
     8d2:	cf 93       	push	r28
     8d4:	0f 92       	push	r0
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	89 83       	std	Y+1, r24	; 0x01

	static uint16_t dit_on_count, dah_on_count, dit_off_count, dah_off_count, cmd_on_count, msg_on_count, both_on_count;
	static uint16_t enca_on_count, enca_off_count, encb_on_count, encb_off_count, enc_on_count;

	if(flush == TRUE)
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	41 f5       	brne	.+80     	; 0x932 <debounce+0x62>
	{
		dit_on_count = 0;
     8e2:	10 92 50 01 	sts	0x0150, r1
     8e6:	10 92 4f 01 	sts	0x014F, r1
		dah_on_count = 0;
     8ea:	10 92 52 01 	sts	0x0152, r1
     8ee:	10 92 51 01 	sts	0x0151, r1
		dit_off_count = 0;
     8f2:	10 92 54 01 	sts	0x0154, r1
     8f6:	10 92 53 01 	sts	0x0153, r1
		dah_off_count = 0;
     8fa:	10 92 56 01 	sts	0x0156, r1
     8fe:	10 92 55 01 	sts	0x0155, r1
		cmd_on_count = 0;
     902:	10 92 58 01 	sts	0x0158, r1
     906:	10 92 57 01 	sts	0x0157, r1
		msg_on_count = 0;
     90a:	10 92 5a 01 	sts	0x015A, r1
     90e:	10 92 59 01 	sts	0x0159, r1
		both_on_count = 0;
     912:	10 92 5c 01 	sts	0x015C, r1
     916:	10 92 5b 01 	sts	0x015B, r1
		enc_on_count = 0;
     91a:	10 92 5e 01 	sts	0x015E, r1
     91e:	10 92 5d 01 	sts	0x015D, r1
		enca_on_count = 0;
     922:	10 92 60 01 	sts	0x0160, r1
     926:	10 92 5f 01 	sts	0x015F, r1
		encb_on_count = 0;
     92a:	10 92 62 01 	sts	0x0162, r1
     92e:	10 92 61 01 	sts	0x0161, r1
	}

	// Debounce DIT
	if(bit_is_clear(PADDLE_DIT_PIN, PADDLE_DIT))
     932:	89 e2       	ldi	r24, 0x29	; 41
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	88 2f       	mov	r24, r24
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	88 70       	andi	r24, 0x08	; 8
     940:	90 70       	andi	r25, 0x00	; 0
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	a9 f4       	brne	.+42     	; 0x970 <debounce+0xa0>
	{
		if(dit_on_count < DEBOUNCE_PRESS_TIME)
     946:	80 91 4f 01 	lds	r24, 0x014F
     94a:	90 91 50 01 	lds	r25, 0x0150
     94e:	85 30       	cpi	r24, 0x05	; 5
     950:	91 05       	cpc	r25, r1
     952:	48 f4       	brcc	.+18     	; 0x966 <debounce+0x96>
			dit_on_count++;
     954:	80 91 4f 01 	lds	r24, 0x014F
     958:	90 91 50 01 	lds	r25, 0x0150
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	90 93 50 01 	sts	0x0150, r25
     962:	80 93 4f 01 	sts	0x014F, r24
		dit_off_count = 0;
     966:	10 92 54 01 	sts	0x0154, r1
     96a:	10 92 53 01 	sts	0x0153, r1
     96e:	14 c0       	rjmp	.+40     	; 0x998 <debounce+0xc8>
	}
	else
	{
		if(dit_off_count < DEBOUNCE_PRESS_TIME)
     970:	80 91 53 01 	lds	r24, 0x0153
     974:	90 91 54 01 	lds	r25, 0x0154
     978:	85 30       	cpi	r24, 0x05	; 5
     97a:	91 05       	cpc	r25, r1
     97c:	48 f4       	brcc	.+18     	; 0x990 <debounce+0xc0>
			dit_off_count++;
     97e:	80 91 53 01 	lds	r24, 0x0153
     982:	90 91 54 01 	lds	r25, 0x0154
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	90 93 54 01 	sts	0x0154, r25
     98c:	80 93 53 01 	sts	0x0153, r24
		dit_on_count = 0;
     990:	10 92 50 01 	sts	0x0150, r1
     994:	10 92 4f 01 	sts	0x014F, r1
	}

	// Debounce DAH
	if(bit_is_clear(PADDLE_DAH_PIN, PADDLE_DAH))
     998:	89 e2       	ldi	r24, 0x29	; 41
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	fc 01       	movw	r30, r24
     99e:	80 81       	ld	r24, Z
     9a0:	88 2f       	mov	r24, r24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	80 71       	andi	r24, 0x10	; 16
     9a6:	90 70       	andi	r25, 0x00	; 0
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	a9 f4       	brne	.+42     	; 0x9d6 <debounce+0x106>
	{
		if(dah_on_count < DEBOUNCE_PRESS_TIME)
     9ac:	80 91 51 01 	lds	r24, 0x0151
     9b0:	90 91 52 01 	lds	r25, 0x0152
     9b4:	85 30       	cpi	r24, 0x05	; 5
     9b6:	91 05       	cpc	r25, r1
     9b8:	48 f4       	brcc	.+18     	; 0x9cc <debounce+0xfc>
			dah_on_count++;
     9ba:	80 91 51 01 	lds	r24, 0x0151
     9be:	90 91 52 01 	lds	r25, 0x0152
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	90 93 52 01 	sts	0x0152, r25
     9c8:	80 93 51 01 	sts	0x0151, r24
		dah_off_count = 0;
     9cc:	10 92 56 01 	sts	0x0156, r1
     9d0:	10 92 55 01 	sts	0x0155, r1
     9d4:	14 c0       	rjmp	.+40     	; 0x9fe <debounce+0x12e>
	}
	else
	{
		if(dah_off_count < DEBOUNCE_PRESS_TIME)
     9d6:	80 91 55 01 	lds	r24, 0x0155
     9da:	90 91 56 01 	lds	r25, 0x0156
     9de:	85 30       	cpi	r24, 0x05	; 5
     9e0:	91 05       	cpc	r25, r1
     9e2:	48 f4       	brcc	.+18     	; 0x9f6 <debounce+0x126>
			dah_off_count++;
     9e4:	80 91 55 01 	lds	r24, 0x0155
     9e8:	90 91 56 01 	lds	r25, 0x0156
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	90 93 56 01 	sts	0x0156, r25
     9f2:	80 93 55 01 	sts	0x0155, r24
		dah_on_count = 0;
     9f6:	10 92 52 01 	sts	0x0152, r1
     9fa:	10 92 51 01 	sts	0x0151, r1
	}

	// Set button flags according to final debounce count
	if(dit_on_count >= DEBOUNCE_PRESS_TIME)
     9fe:	80 91 4f 01 	lds	r24, 0x014F
     a02:	90 91 50 01 	lds	r25, 0x0150
     a06:	85 30       	cpi	r24, 0x05	; 5
     a08:	91 05       	cpc	r25, r1
     a0a:	18 f0       	brcs	.+6      	; 0xa12 <debounce+0x142>
		dit_active = TRUE;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 dc 01 	sts	0x01DC, r24
	if(dit_off_count >= DEBOUNCE_PRESS_TIME)
     a12:	80 91 53 01 	lds	r24, 0x0153
     a16:	90 91 54 01 	lds	r25, 0x0154
     a1a:	85 30       	cpi	r24, 0x05	; 5
     a1c:	91 05       	cpc	r25, r1
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <debounce+0x154>
		dit_active = FALSE;
     a20:	10 92 dc 01 	sts	0x01DC, r1

	if(dah_on_count >= DEBOUNCE_PRESS_TIME)
     a24:	80 91 51 01 	lds	r24, 0x0151
     a28:	90 91 52 01 	lds	r25, 0x0152
     a2c:	85 30       	cpi	r24, 0x05	; 5
     a2e:	91 05       	cpc	r25, r1
     a30:	18 f0       	brcs	.+6      	; 0xa38 <debounce+0x168>
		dah_active = TRUE;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 c0 01 	sts	0x01C0, r24
	if(dah_off_count >= DEBOUNCE_PRESS_TIME)
     a38:	80 91 55 01 	lds	r24, 0x0155
     a3c:	90 91 56 01 	lds	r25, 0x0156
     a40:	85 30       	cpi	r24, 0x05	; 5
     a42:	91 05       	cpc	r25, r1
     a44:	10 f0       	brcs	.+4      	; 0xa4a <debounce+0x17a>
		dah_active = FALSE;
     a46:	10 92 c0 01 	sts	0x01C0, r1


	// Debounce both control buttons
	if((bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON)) && bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     a4a:	89 e2       	ldi	r24, 0x29	; 41
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	fc 01       	movw	r30, r24
     a50:	80 81       	ld	r24, Z
     a52:	88 2f       	mov	r24, r24
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	84 70       	andi	r24, 0x04	; 4
     a58:	90 70       	andi	r25, 0x00	; 0
     a5a:	00 97       	sbiw	r24, 0x00	; 0
     a5c:	a1 f4       	brne	.+40     	; 0xa86 <debounce+0x1b6>
     a5e:	89 e2       	ldi	r24, 0x29	; 41
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	82 70       	andi	r24, 0x02	; 2
     a6c:	90 70       	andi	r25, 0x00	; 0
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	51 f4       	brne	.+20     	; 0xa86 <debounce+0x1b6>
		both_on_count++;
     a72:	80 91 5b 01 	lds	r24, 0x015B
     a76:	90 91 5c 01 	lds	r25, 0x015C
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	90 93 5c 01 	sts	0x015C, r25
     a80:	80 93 5b 01 	sts	0x015B, r24
     a84:	25 c0       	rjmp	.+74     	; 0xad0 <debounce+0x200>
	else
	{
		if((both_on_count >= DEBOUNCE_PRESS_TIME) && (both_on_count < DEBOUNCE_HOLD_TIME))
     a86:	80 91 5b 01 	lds	r24, 0x015B
     a8a:	90 91 5c 01 	lds	r25, 0x015C
     a8e:	85 30       	cpi	r24, 0x05	; 5
     a90:	91 05       	cpc	r25, r1
     a92:	60 f0       	brcs	.+24     	; 0xaac <debounce+0x1dc>
     a94:	80 91 5b 01 	lds	r24, 0x015B
     a98:	90 91 5c 01 	lds	r25, 0x015C
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	84 3f       	cpi	r24, 0xF4	; 244
     aa0:	9f 07       	cpc	r25, r31
     aa2:	20 f4       	brcc	.+8      	; 0xaac <debounce+0x1dc>
			both_btn = PRESS;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 c6 01 	sts	0x01C6, r24
     aaa:	0e c0       	rjmp	.+28     	; 0xac8 <debounce+0x1f8>
		else if(both_on_count >= DEBOUNCE_HOLD_TIME)
     aac:	80 91 5b 01 	lds	r24, 0x015B
     ab0:	90 91 5c 01 	lds	r25, 0x015C
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	84 3f       	cpi	r24, 0xF4	; 244
     ab8:	92 07       	cpc	r25, r18
     aba:	20 f0       	brcs	.+8      	; 0xac4 <debounce+0x1f4>
			both_btn = HOLD;
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	80 93 c6 01 	sts	0x01C6, r24
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <debounce+0x1f8>
		else
			both_btn = OFF;
     ac4:	10 92 c6 01 	sts	0x01C6, r1

		both_on_count = 0;
     ac8:	10 92 5c 01 	sts	0x015C, r1
     acc:	10 92 5b 01 	sts	0x015B, r1
	}


	// Debounce CMD/FREQ button
	if(bit_is_clear(CMD_BUTTON_PIN, CMD_BUTTON))
     ad0:	89 e2       	ldi	r24, 0x29	; 41
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	84 70       	andi	r24, 0x04	; 4
     ade:	90 70       	andi	r25, 0x00	; 0
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	51 f4       	brne	.+20     	; 0xaf8 <debounce+0x228>
	{
		cmd_on_count++;
     ae4:	80 91 57 01 	lds	r24, 0x0157
     ae8:	90 91 58 01 	lds	r25, 0x0158
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	90 93 58 01 	sts	0x0158, r25
     af2:	80 93 57 01 	sts	0x0157, r24
     af6:	25 c0       	rjmp	.+74     	; 0xb42 <debounce+0x272>
		//mute_on = TRUE;
	}
	else
	{
		if((cmd_on_count >= DEBOUNCE_PRESS_TIME) && (cmd_on_count < DEBOUNCE_HOLD_TIME))
     af8:	80 91 57 01 	lds	r24, 0x0157
     afc:	90 91 58 01 	lds	r25, 0x0158
     b00:	85 30       	cpi	r24, 0x05	; 5
     b02:	91 05       	cpc	r25, r1
     b04:	60 f0       	brcs	.+24     	; 0xb1e <debounce+0x24e>
     b06:	80 91 57 01 	lds	r24, 0x0157
     b0a:	90 91 58 01 	lds	r25, 0x0158
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	84 3f       	cpi	r24, 0xF4	; 244
     b12:	9f 07       	cpc	r25, r31
     b14:	20 f4       	brcc	.+8      	; 0xb1e <debounce+0x24e>
			cmd_btn = PRESS;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 c7 01 	sts	0x01C7, r24
     b1c:	0e c0       	rjmp	.+28     	; 0xb3a <debounce+0x26a>
		else if(cmd_on_count >= DEBOUNCE_HOLD_TIME)
     b1e:	80 91 57 01 	lds	r24, 0x0157
     b22:	90 91 58 01 	lds	r25, 0x0158
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	84 3f       	cpi	r24, 0xF4	; 244
     b2a:	92 07       	cpc	r25, r18
     b2c:	20 f0       	brcs	.+8      	; 0xb36 <debounce+0x266>
			cmd_btn = HOLD;
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	80 93 c7 01 	sts	0x01C7, r24
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <debounce+0x26a>
		else
			cmd_btn = OFF;
     b36:	10 92 c7 01 	sts	0x01C7, r1

		cmd_on_count = 0;
     b3a:	10 92 58 01 	sts	0x0158, r1
     b3e:	10 92 57 01 	sts	0x0157, r1
	}

	// Debounce MSG/OK button
	if(bit_is_clear(MSG_BUTTON_PIN, MSG_BUTTON))
     b42:	89 e2       	ldi	r24, 0x29	; 41
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	82 70       	andi	r24, 0x02	; 2
     b50:	90 70       	andi	r25, 0x00	; 0
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	51 f4       	brne	.+20     	; 0xb6a <debounce+0x29a>
		msg_on_count++;
     b56:	80 91 59 01 	lds	r24, 0x0159
     b5a:	90 91 5a 01 	lds	r25, 0x015A
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	90 93 5a 01 	sts	0x015A, r25
     b64:	80 93 59 01 	sts	0x0159, r24
     b68:	25 c0       	rjmp	.+74     	; 0xbb4 <debounce+0x2e4>
	else
	{
		if((msg_on_count >= DEBOUNCE_PRESS_TIME) && (msg_on_count < DEBOUNCE_HOLD_TIME))
     b6a:	80 91 59 01 	lds	r24, 0x0159
     b6e:	90 91 5a 01 	lds	r25, 0x015A
     b72:	85 30       	cpi	r24, 0x05	; 5
     b74:	91 05       	cpc	r25, r1
     b76:	60 f0       	brcs	.+24     	; 0xb90 <debounce+0x2c0>
     b78:	80 91 59 01 	lds	r24, 0x0159
     b7c:	90 91 5a 01 	lds	r25, 0x015A
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	84 3f       	cpi	r24, 0xF4	; 244
     b84:	9f 07       	cpc	r25, r31
     b86:	20 f4       	brcc	.+8      	; 0xb90 <debounce+0x2c0>
			msg_btn = PRESS;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 c5 01 	sts	0x01C5, r24
     b8e:	0e c0       	rjmp	.+28     	; 0xbac <debounce+0x2dc>
		else if(msg_on_count >= DEBOUNCE_HOLD_TIME)
     b90:	80 91 59 01 	lds	r24, 0x0159
     b94:	90 91 5a 01 	lds	r25, 0x015A
     b98:	21 e0       	ldi	r18, 0x01	; 1
     b9a:	84 3f       	cpi	r24, 0xF4	; 244
     b9c:	92 07       	cpc	r25, r18
     b9e:	20 f0       	brcs	.+8      	; 0xba8 <debounce+0x2d8>
			msg_btn = HOLD;
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	80 93 c5 01 	sts	0x01C5, r24
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <debounce+0x2dc>
		else
			msg_btn = OFF;
     ba8:	10 92 c5 01 	sts	0x01C5, r1

		msg_on_count = 0;
     bac:	10 92 5a 01 	sts	0x015A, r1
     bb0:	10 92 59 01 	sts	0x0159, r1
	}

	// Debounce encoder button
	if(bit_is_clear(ENC_BUTTON_PIN, ENC_BUTTON))
     bb4:	89 e2       	ldi	r24, 0x29	; 41
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	81 70       	andi	r24, 0x01	; 1
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	51 f4       	brne	.+20     	; 0xbdc <debounce+0x30c>
		enc_on_count++;
     bc8:	80 91 5d 01 	lds	r24, 0x015D
     bcc:	90 91 5e 01 	lds	r25, 0x015E
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	90 93 5e 01 	sts	0x015E, r25
     bd6:	80 93 5d 01 	sts	0x015D, r24
     bda:	25 c0       	rjmp	.+74     	; 0xc26 <debounce+0x356>
	else
	{
		if((enc_on_count >= DEBOUNCE_PRESS_TIME) && (enc_on_count < DEBOUNCE_HOLD_TIME))
     bdc:	80 91 5d 01 	lds	r24, 0x015D
     be0:	90 91 5e 01 	lds	r25, 0x015E
     be4:	85 30       	cpi	r24, 0x05	; 5
     be6:	91 05       	cpc	r25, r1
     be8:	60 f0       	brcs	.+24     	; 0xc02 <debounce+0x332>
     bea:	80 91 5d 01 	lds	r24, 0x015D
     bee:	90 91 5e 01 	lds	r25, 0x015E
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	84 3f       	cpi	r24, 0xF4	; 244
     bf6:	9f 07       	cpc	r25, r31
     bf8:	20 f4       	brcc	.+8      	; 0xc02 <debounce+0x332>
			enc_btn = PRESS;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 93 d3 01 	sts	0x01D3, r24
     c00:	0e c0       	rjmp	.+28     	; 0xc1e <debounce+0x34e>
		else if(enc_on_count >= DEBOUNCE_HOLD_TIME)
     c02:	80 91 5d 01 	lds	r24, 0x015D
     c06:	90 91 5e 01 	lds	r25, 0x015E
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	84 3f       	cpi	r24, 0xF4	; 244
     c0e:	92 07       	cpc	r25, r18
     c10:	20 f0       	brcs	.+8      	; 0xc1a <debounce+0x34a>
			enc_btn = HOLD;
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	80 93 d3 01 	sts	0x01D3, r24
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <debounce+0x34e>
		else
			enc_btn = OFF;
     c1a:	10 92 d3 01 	sts	0x01D3, r1

		enc_on_count = 0;
     c1e:	10 92 5e 01 	sts	0x015E, r1
     c22:	10 92 5d 01 	sts	0x015D, r1
	}


	// Debounce Encoder A
	if(bit_is_clear(ENC_A_PIN, ENC_A))
     c26:	83 e2       	ldi	r24, 0x23	; 35
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	81 70       	andi	r24, 0x01	; 1
     c34:	90 70       	andi	r25, 0x00	; 0
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	a9 f4       	brne	.+42     	; 0xc64 <debounce+0x394>
	{
		if(enca_on_count < DEBOUNCE_PRESS_TIME)
     c3a:	80 91 5f 01 	lds	r24, 0x015F
     c3e:	90 91 60 01 	lds	r25, 0x0160
     c42:	85 30       	cpi	r24, 0x05	; 5
     c44:	91 05       	cpc	r25, r1
     c46:	48 f4       	brcc	.+18     	; 0xc5a <debounce+0x38a>
			enca_on_count++;
     c48:	80 91 5f 01 	lds	r24, 0x015F
     c4c:	90 91 60 01 	lds	r25, 0x0160
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	90 93 60 01 	sts	0x0160, r25
     c56:	80 93 5f 01 	sts	0x015F, r24
		enca_off_count = 0;
     c5a:	10 92 64 01 	sts	0x0164, r1
     c5e:	10 92 63 01 	sts	0x0163, r1
     c62:	14 c0       	rjmp	.+40     	; 0xc8c <debounce+0x3bc>
	}
	else
	{
		if(enca_off_count < DEBOUNCE_PRESS_TIME)
     c64:	80 91 63 01 	lds	r24, 0x0163
     c68:	90 91 64 01 	lds	r25, 0x0164
     c6c:	85 30       	cpi	r24, 0x05	; 5
     c6e:	91 05       	cpc	r25, r1
     c70:	48 f4       	brcc	.+18     	; 0xc84 <debounce+0x3b4>
			enca_off_count++;
     c72:	80 91 63 01 	lds	r24, 0x0163
     c76:	90 91 64 01 	lds	r25, 0x0164
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	90 93 64 01 	sts	0x0164, r25
     c80:	80 93 63 01 	sts	0x0163, r24
		enca_on_count = 0;
     c84:	10 92 60 01 	sts	0x0160, r1
     c88:	10 92 5f 01 	sts	0x015F, r1
	}


	// Debounce Encoder B
	if(bit_is_clear(ENC_B_PIN, ENC_B))
     c8c:	89 e2       	ldi	r24, 0x29	; 41
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	88 23       	and	r24, r24
     c96:	ac f0       	brlt	.+42     	; 0xcc2 <debounce+0x3f2>
	{
		if(encb_on_count < DEBOUNCE_PRESS_TIME)
     c98:	80 91 61 01 	lds	r24, 0x0161
     c9c:	90 91 62 01 	lds	r25, 0x0162
     ca0:	85 30       	cpi	r24, 0x05	; 5
     ca2:	91 05       	cpc	r25, r1
     ca4:	48 f4       	brcc	.+18     	; 0xcb8 <debounce+0x3e8>
			encb_on_count++;
     ca6:	80 91 61 01 	lds	r24, 0x0161
     caa:	90 91 62 01 	lds	r25, 0x0162
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	90 93 62 01 	sts	0x0162, r25
     cb4:	80 93 61 01 	sts	0x0161, r24
		encb_off_count = 0;
     cb8:	10 92 66 01 	sts	0x0166, r1
     cbc:	10 92 65 01 	sts	0x0165, r1
     cc0:	14 c0       	rjmp	.+40     	; 0xcea <debounce+0x41a>
	}
	else
	{
		if(encb_off_count < DEBOUNCE_PRESS_TIME)
     cc2:	80 91 65 01 	lds	r24, 0x0165
     cc6:	90 91 66 01 	lds	r25, 0x0166
     cca:	85 30       	cpi	r24, 0x05	; 5
     ccc:	91 05       	cpc	r25, r1
     cce:	48 f4       	brcc	.+18     	; 0xce2 <debounce+0x412>
			encb_off_count++;
     cd0:	80 91 65 01 	lds	r24, 0x0165
     cd4:	90 91 66 01 	lds	r25, 0x0166
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	90 93 66 01 	sts	0x0166, r25
     cde:	80 93 65 01 	sts	0x0165, r24
		encb_on_count = 0;
     ce2:	10 92 62 01 	sts	0x0162, r1
     ce6:	10 92 61 01 	sts	0x0161, r1
	}

	// Set encoder flags
	if(enca_on_count >= DEBOUNCE_PRESS_TIME)
     cea:	80 91 5f 01 	lds	r24, 0x015F
     cee:	90 91 60 01 	lds	r25, 0x0160
     cf2:	85 30       	cpi	r24, 0x05	; 5
     cf4:	91 05       	cpc	r25, r1
     cf6:	18 f0       	brcs	.+6      	; 0xcfe <debounce+0x42e>
		enc_a = TRUE;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 67 01 	sts	0x0167, r24
	if(enca_off_count >= DEBOUNCE_PRESS_TIME)
     cfe:	80 91 63 01 	lds	r24, 0x0163
     d02:	90 91 64 01 	lds	r25, 0x0164
     d06:	85 30       	cpi	r24, 0x05	; 5
     d08:	91 05       	cpc	r25, r1
     d0a:	10 f0       	brcs	.+4      	; 0xd10 <debounce+0x440>
		enc_a = FALSE;
     d0c:	10 92 67 01 	sts	0x0167, r1

	if(encb_on_count >= DEBOUNCE_PRESS_TIME)
     d10:	80 91 61 01 	lds	r24, 0x0161
     d14:	90 91 62 01 	lds	r25, 0x0162
     d18:	85 30       	cpi	r24, 0x05	; 5
     d1a:	91 05       	cpc	r25, r1
     d1c:	18 f0       	brcs	.+6      	; 0xd24 <debounce+0x454>
		enc_b = TRUE;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 f1 01 	sts	0x01F1, r24
	if(encb_off_count >= DEBOUNCE_PRESS_TIME)
     d24:	80 91 65 01 	lds	r24, 0x0165
     d28:	90 91 66 01 	lds	r25, 0x0166
     d2c:	85 30       	cpi	r24, 0x05	; 5
     d2e:	91 05       	cpc	r25, r1
     d30:	10 f0       	brcs	.+4      	; 0xd36 <debounce+0x466>
		enc_b = FALSE;
     d32:	10 92 f1 01 	sts	0x01F1, r1
	if((dit_on_count > 0) || (dah_on_count > 0) || (cmd_on_count > 0) || (msg_on_count > 0) || (both_on_count > 0))
		allow_sleep = FALSE;
	else
		allow_sleep = TRUE;
		*/
}
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <announce>:

void announce(char * msg, uint16_t freq, uint8_t speed)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <announce+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <announce+0x8>
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	7c 83       	std	Y+4, r23	; 0x04
     d52:	6b 83       	std	Y+3, r22	; 0x03
     d54:	4d 83       	std	Y+5, r20	; 0x05
	// Convert to uppercase
	strupr(msg);
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <strupr>

	// Need buffer overflow checking here
	strcpy(announce_buffer, msg);
     d5e:	80 91 eb 01 	lds	r24, 0x01EB
     d62:	90 91 ec 01 	lds	r25, 0x01EC
     d66:	29 81       	ldd	r18, Y+1	; 0x01
     d68:	3a 81       	ldd	r19, Y+2	; 0x02
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <strcpy>

	// Retain the current state and mode
	prev_state = cur_state;
     d70:	80 91 c8 01 	lds	r24, 0x01C8
     d74:	80 93 72 01 	sts	0x0172, r24
	prev_state_end = cur_state_end;
     d78:	80 91 d4 01 	lds	r24, 0x01D4
     d7c:	90 91 d5 01 	lds	r25, 0x01D5
     d80:	a0 91 d6 01 	lds	r26, 0x01D6
     d84:	b0 91 d7 01 	lds	r27, 0x01D7
     d88:	80 93 b4 01 	sts	0x01B4, r24
     d8c:	90 93 b5 01 	sts	0x01B5, r25
     d90:	a0 93 b6 01 	sts	0x01B6, r26
     d94:	b0 93 b7 01 	sts	0x01B7, r27
	prev_mode = cur_mode;
     d98:	80 91 a2 01 	lds	r24, 0x01A2
     d9c:	80 93 b8 01 	sts	0x01B8, r24
	prev_st_freq = st_freq;
     da0:	80 91 ba 01 	lds	r24, 0x01BA
     da4:	90 91 bb 01 	lds	r25, 0x01BB
     da8:	90 93 cc 01 	sts	0x01CC, r25
     dac:	80 93 cb 01 	sts	0x01CB, r24
	st_freq = freq;
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	90 93 bb 01 	sts	0x01BB, r25
     db8:	80 93 ba 01 	sts	0x01BA, r24
	prev_wpm = wpm;
     dbc:	80 91 e6 01 	lds	r24, 0x01E6
     dc0:	80 93 f2 01 	sts	0x01F2, r24
	wpm = speed;
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	80 93 e6 01 	sts	0x01E6, r24

	set_st_freq(st_freq);
     dca:	80 91 ba 01 	lds	r24, 0x01BA
     dce:	90 91 bb 01 	lds	r25, 0x01BB
     dd2:	cc 01       	movw	r24, r24
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <set_st_freq>
	set_wpm(wpm);
     de0:	80 91 e6 01 	lds	r24, 0x01E6
     de4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_wpm>

	// Set into announce mode
	cur_state = IDLE;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 c8 01 	sts	0x01C8, r24
	cur_mode = ANNOUNCE;
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	80 93 a2 01 	sts	0x01A2, r24
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <read_voltage>:

void read_voltage(void)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	00 d0       	rcall	.+0      	; 0xe0a <read_voltage+0x6>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <read_voltage+0x8>
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <read_voltage+0xa>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	uint16_t vcc, vcc_mon;
	char *vcc_out;

	vcc_out = malloc(10);
     e12:	8a e0       	ldi	r24, 0x0A	; 10
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 0e 1a 	call	0x341c	; 0x341c <malloc>
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01

	// Start ADC conversion
	ADCSRA |= _BV(ADSC);
     e1e:	8a e7       	ldi	r24, 0x7A	; 122
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	2a e7       	ldi	r18, 0x7A	; 122
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	d9 01       	movw	r26, r18
     e28:	2c 91       	ld	r18, X
     e2a:	20 64       	ori	r18, 0x40	; 64
     e2c:	fc 01       	movw	r30, r24
     e2e:	20 83       	st	Z, r18

	// Wait for ADC conversion to finish
	loop_until_bit_is_clear(ADCSRA, ADSC);
     e30:	8a e7       	ldi	r24, 0x7A	; 122
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	dc 01       	movw	r26, r24
     e36:	8c 91       	ld	r24, X
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	80 74       	andi	r24, 0x40	; 64
     e3e:	90 70       	andi	r25, 0x00	; 0
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	b1 f7       	brne	.-20     	; 0xe30 <read_voltage+0x2c>

	// Get ADC value
	vcc_mon = ADCH;
     e44:	89 e7       	ldi	r24, 0x79	; 121
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	fc 01       	movw	r30, r24
     e4a:	80 81       	ld	r24, Z
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03

	// Full scale reading at uC is 16.1 V
	// We'll use fixed point numbers, so full scale is 161 * 0.1 V
	vcc = (vcc_mon * 161) / 256;
     e54:	4b 81       	ldd	r20, Y+3	; 0x03
     e56:	5c 81       	ldd	r21, Y+4	; 0x04
     e58:	21 ea       	ldi	r18, 0xA1	; 161
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	42 9f       	mul	r20, r18
     e5e:	c0 01       	movw	r24, r0
     e60:	43 9f       	mul	r20, r19
     e62:	90 0d       	add	r25, r0
     e64:	52 9f       	mul	r21, r18
     e66:	90 0d       	add	r25, r0
     e68:	11 24       	eor	r1, r1
     e6a:	89 2f       	mov	r24, r25
     e6c:	99 27       	eor	r25, r25
     e6e:	9e 83       	std	Y+6, r25	; 0x06
     e70:	8d 83       	std	Y+5, r24	; 0x05

	// Format for output
	sprintf(vcc_out, "%dR%d", vcc / 10, vcc % 10);
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	2a e0       	ldi	r18, 0x0A	; 10
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	b9 01       	movw	r22, r18
     e7c:	0e 94 c5 19 	call	0x338a	; 0x338a <__udivmodhi4>
     e80:	9b 01       	movw	r18, r22
     e82:	f9 01       	movw	r30, r18
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	2a e0       	ldi	r18, 0x0A	; 10
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	b9 01       	movw	r22, r18
     e8e:	0e 94 c5 19 	call	0x338a	; 0x338a <__udivmodhi4>
     e92:	9c 01       	movw	r18, r24
     e94:	8d b7       	in	r24, 0x3d	; 61
     e96:	9e b7       	in	r25, 0x3e	; 62
     e98:	08 97       	sbiw	r24, 0x08	; 8
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	9e bf       	out	0x3e, r25	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	8d bf       	out	0x3d, r24	; 61
     ea4:	8d b7       	in	r24, 0x3d	; 61
     ea6:	9e b7       	in	r25, 0x3e	; 62
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	49 81       	ldd	r20, Y+1	; 0x01
     eac:	5a 81       	ldd	r21, Y+2	; 0x02
     eae:	dc 01       	movw	r26, r24
     eb0:	4d 93       	st	X+, r20
     eb2:	5c 93       	st	X, r21
     eb4:	4b e0       	ldi	r20, 0x0B	; 11
     eb6:	51 e0       	ldi	r21, 0x01	; 1
     eb8:	dc 01       	movw	r26, r24
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	5c 93       	st	X, r21
     ebe:	4e 93       	st	-X, r20
     ec0:	12 97       	sbiw	r26, 0x02	; 2
     ec2:	dc 01       	movw	r26, r24
     ec4:	15 96       	adiw	r26, 0x05	; 5
     ec6:	fc 93       	st	X, r31
     ec8:	ee 93       	st	-X, r30
     eca:	14 97       	sbiw	r26, 0x04	; 4
     ecc:	fc 01       	movw	r30, r24
     ece:	37 83       	std	Z+7, r19	; 0x07
     ed0:	26 83       	std	Z+6, r18	; 0x06
     ed2:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <sprintf>
     ed6:	8d b7       	in	r24, 0x3d	; 61
     ed8:	9e b7       	in	r25, 0x3e	; 62
     eda:	08 96       	adiw	r24, 0x08	; 8
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	9e bf       	out	0x3e, r25	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	8d bf       	out	0x3d, r24	; 61

	announce(vcc_out, st_freq, wpm);
     ee6:	20 91 ba 01 	lds	r18, 0x01BA
     eea:	30 91 bb 01 	lds	r19, 0x01BB
     eee:	40 91 e6 01 	lds	r20, 0x01E6
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	b9 01       	movw	r22, r18
     ef8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>

	free(vcc_out);
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	0e 94 a8 1a 	call	0x3550	; 0x3550 <free>
}
     f04:	26 96       	adiw	r28, 0x06	; 6
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <count_frequency>:

void count_frequency(void)
{
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <count_frequency+0xa>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	char *freq_out;

	freq_out = malloc(15);
     f24:	8f e0       	ldi	r24, 0x0F	; 15
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 0e 1a 	call	0x341c	; 0x341c <malloc>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01

	// Format and output frequency
	sprintf(freq_out, "%02uR%02u", (unsigned int)((tune_freq / 1000) % 100), (unsigned int)((tune_freq % 1000) / 10));
     f30:	80 91 e2 01 	lds	r24, 0x01E2
     f34:	90 91 e3 01 	lds	r25, 0x01E3
     f38:	a0 91 e4 01 	lds	r26, 0x01E4
     f3c:	b0 91 e5 01 	lds	r27, 0x01E5
     f40:	28 ee       	ldi	r18, 0xE8	; 232
     f42:	33 e0       	ldi	r19, 0x03	; 3
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	bc 01       	movw	r22, r24
     f4a:	cd 01       	movw	r24, r26
     f4c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__udivmodsi4>
     f50:	da 01       	movw	r26, r20
     f52:	c9 01       	movw	r24, r18
     f54:	24 e6       	ldi	r18, 0x64	; 100
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	bc 01       	movw	r22, r24
     f5e:	cd 01       	movw	r24, r26
     f60:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__udivmodsi4>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	8c 01       	movw	r16, r24
     f6a:	80 91 e2 01 	lds	r24, 0x01E2
     f6e:	90 91 e3 01 	lds	r25, 0x01E3
     f72:	a0 91 e4 01 	lds	r26, 0x01E4
     f76:	b0 91 e5 01 	lds	r27, 0x01E5
     f7a:	28 ee       	ldi	r18, 0xE8	; 232
     f7c:	33 e0       	ldi	r19, 0x03	; 3
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	bc 01       	movw	r22, r24
     f84:	cd 01       	movw	r24, r26
     f86:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__udivmodsi4>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	2a e0       	ldi	r18, 0x0A	; 10
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__udivmodsi4>
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	9c 01       	movw	r18, r24
     fa4:	8d b7       	in	r24, 0x3d	; 61
     fa6:	9e b7       	in	r25, 0x3e	; 62
     fa8:	08 97       	sbiw	r24, 0x08	; 8
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	9e bf       	out	0x3e, r25	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	8d bf       	out	0x3d, r24	; 61
     fb4:	8d b7       	in	r24, 0x3d	; 61
     fb6:	9e b7       	in	r25, 0x3e	; 62
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	49 81       	ldd	r20, Y+1	; 0x01
     fbc:	5a 81       	ldd	r21, Y+2	; 0x02
     fbe:	fc 01       	movw	r30, r24
     fc0:	51 83       	std	Z+1, r21	; 0x01
     fc2:	40 83       	st	Z, r20
     fc4:	41 e1       	ldi	r20, 0x11	; 17
     fc6:	51 e0       	ldi	r21, 0x01	; 1
     fc8:	fc 01       	movw	r30, r24
     fca:	53 83       	std	Z+3, r21	; 0x03
     fcc:	42 83       	std	Z+2, r20	; 0x02
     fce:	fc 01       	movw	r30, r24
     fd0:	15 83       	std	Z+5, r17	; 0x05
     fd2:	04 83       	std	Z+4, r16	; 0x04
     fd4:	fc 01       	movw	r30, r24
     fd6:	37 83       	std	Z+7, r19	; 0x07
     fd8:	26 83       	std	Z+6, r18	; 0x06
     fda:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <sprintf>
     fde:	8d b7       	in	r24, 0x3d	; 61
     fe0:	9e b7       	in	r25, 0x3e	; 62
     fe2:	08 96       	adiw	r24, 0x08	; 8
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	9e bf       	out	0x3e, r25	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	8d bf       	out	0x3d, r24	; 61
	announce(freq_out, st_freq, wpm);
     fee:	20 91 ba 01 	lds	r18, 0x01BA
     ff2:	30 91 bb 01 	lds	r19, 0x01BB
     ff6:	40 91 e6 01 	lds	r20, 0x01E6
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	b9 01       	movw	r22, r18
    1000:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>

	free(freq_out);
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	9a 81       	ldd	r25, Y+2	; 0x02
    1008:	0e 94 a8 1a 	call	0x3550	; 0x3550 <free>
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	08 95       	ret

0000101a <poll_buttons>:

void poll_buttons(void)
{
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t prev_enc_state;

	// Handle buttons
	if(both_btn == HOLD)
    102c:	80 91 c6 01 	lds	r24, 0x01C6
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	f9 f4       	brne	.+62     	; 0x1072 <poll_buttons+0x58>
	{
		cur_state = IDLE;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 93 c8 01 	sts	0x01C8, r24
		prev_mode = cur_mode;
    103a:	80 91 a2 01 	lds	r24, 0x01A2
    103e:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = TUNE;
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	80 93 a2 01 	sts	0x01A2, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1048:	80 91 68 01 	lds	r24, 0x0168
    104c:	90 91 69 01 	lds	r25, 0x0169
    1050:	a0 91 6a 01 	lds	r26, 0x016A
    1054:	b0 91 6b 01 	lds	r27, 0x016B
    1058:	84 5d       	subi	r24, 0xD4	; 212
    105a:	9e 4f       	sbci	r25, 0xFE	; 254
    105c:	af 4f       	sbci	r26, 0xFF	; 255
    105e:	bf 4f       	sbci	r27, 0xFF	; 255
    1060:	80 93 cd 01 	sts	0x01CD, r24
    1064:	90 93 ce 01 	sts	0x01CE, r25
    1068:	a0 93 cf 01 	sts	0x01CF, r26
    106c:	b0 93 d0 01 	sts	0x01D0, r27
    1070:	72 c0       	rjmp	.+228    	; 0x1156 <poll_buttons+0x13c>
	}
	else if(cmd_btn == PRESS)
    1072:	80 91 c7 01 	lds	r24, 0x01C7
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	f9 f4       	brne	.+62     	; 0x10b8 <poll_buttons+0x9e>
	{
		prev_mode = cur_mode;
    107a:	80 91 a2 01 	lds	r24, 0x01A2
    107e:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = MENU;
    1082:	84 e0       	ldi	r24, 0x04	; 4
    1084:	80 93 a2 01 	sts	0x01A2, r24
		cur_state = IDLE;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 c8 01 	sts	0x01C8, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    108e:	80 91 68 01 	lds	r24, 0x0168
    1092:	90 91 69 01 	lds	r25, 0x0169
    1096:	a0 91 6a 01 	lds	r26, 0x016A
    109a:	b0 91 6b 01 	lds	r27, 0x016B
    109e:	84 5d       	subi	r24, 0xD4	; 212
    10a0:	9e 4f       	sbci	r25, 0xFE	; 254
    10a2:	af 4f       	sbci	r26, 0xFF	; 255
    10a4:	bf 4f       	sbci	r27, 0xFF	; 255
    10a6:	80 93 cd 01 	sts	0x01CD, r24
    10aa:	90 93 ce 01 	sts	0x01CE, r25
    10ae:	a0 93 cf 01 	sts	0x01CF, r26
    10b2:	b0 93 d0 01 	sts	0x01D0, r27
    10b6:	4f c0       	rjmp	.+158    	; 0x1156 <poll_buttons+0x13c>
	}
	else if(msg_btn == PRESS)
    10b8:	80 91 c5 01 	lds	r24, 0x01C5
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	b9 f4       	brne	.+46     	; 0x10ee <poll_buttons+0xd4>
	{
		count_frequency();
    10c0:	0e 94 8b 07 	call	0xf16	; 0xf16 <count_frequency>
		sleep_timer = cur_timer + SLEEP_DELAY;
    10c4:	80 91 68 01 	lds	r24, 0x0168
    10c8:	90 91 69 01 	lds	r25, 0x0169
    10cc:	a0 91 6a 01 	lds	r26, 0x016A
    10d0:	b0 91 6b 01 	lds	r27, 0x016B
    10d4:	84 5d       	subi	r24, 0xD4	; 212
    10d6:	9e 4f       	sbci	r25, 0xFE	; 254
    10d8:	af 4f       	sbci	r26, 0xFF	; 255
    10da:	bf 4f       	sbci	r27, 0xFF	; 255
    10dc:	80 93 cd 01 	sts	0x01CD, r24
    10e0:	90 93 ce 01 	sts	0x01CE, r25
    10e4:	a0 93 cf 01 	sts	0x01CF, r26
    10e8:	b0 93 d0 01 	sts	0x01D0, r27
    10ec:	34 c0       	rjmp	.+104    	; 0x1156 <poll_buttons+0x13c>
	}
	else if(msg_btn == HOLD)
    10ee:	80 91 c5 01 	lds	r24, 0x01C5
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	81 f5       	brne	.+96     	; 0x1156 <poll_buttons+0x13c>
	{
		// Playback message memory 1
		eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, 40);
    10f6:	85 e7       	ldi	r24, 0x75	; 117
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	22 e0       	ldi	r18, 0x02	; 2
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	b9 01       	movw	r22, r18
    1100:	48 e2       	ldi	r20, 0x28	; 40
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__eerd_block_m168>
		strcpy(announce_buffer, msg_buffer);
    1108:	80 91 eb 01 	lds	r24, 0x01EB
    110c:	90 91 ec 01 	lds	r25, 0x01EC
    1110:	25 e7       	ldi	r18, 0x75	; 117
    1112:	31 e0       	ldi	r19, 0x01	; 1
    1114:	b9 01       	movw	r22, r18
    1116:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <strcpy>
		cur_state = IDLE;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 c8 01 	sts	0x01C8, r24
		prev_mode = cur_mode;
    1120:	80 91 a2 01 	lds	r24, 0x01A2
    1124:	80 93 b8 01 	sts	0x01B8, r24
		cur_mode = PLAYBACK;
    1128:	86 e0       	ldi	r24, 0x06	; 6
    112a:	80 93 a2 01 	sts	0x01A2, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    112e:	80 91 68 01 	lds	r24, 0x0168
    1132:	90 91 69 01 	lds	r25, 0x0169
    1136:	a0 91 6a 01 	lds	r26, 0x016A
    113a:	b0 91 6b 01 	lds	r27, 0x016B
    113e:	84 5d       	subi	r24, 0xD4	; 212
    1140:	9e 4f       	sbci	r25, 0xFE	; 254
    1142:	af 4f       	sbci	r26, 0xFF	; 255
    1144:	bf 4f       	sbci	r27, 0xFF	; 255
    1146:	80 93 cd 01 	sts	0x01CD, r24
    114a:	90 93 ce 01 	sts	0x01CE, r25
    114e:	a0 93 cf 01 	sts	0x01CF, r26
    1152:	b0 93 d0 01 	sts	0x01D0, r27
	}

	if(enc_btn == PRESS)
    1156:	80 91 d3 01 	lds	r24, 0x01D3
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	09 f0       	breq	.+2      	; 0x1160 <poll_buttons+0x146>
    115e:	77 c0       	rjmp	.+238    	; 0x124e <poll_buttons+0x234>
	{
		// If we are in normal tuning mode, pressing the tune knob toggles tuning rates
		if(inc_tune_state == NONE)
    1160:	80 91 d2 01 	lds	r24, 0x01D2
    1164:	88 23       	and	r24, r24
    1166:	09 f0       	breq	.+2      	; 0x116a <poll_buttons+0x150>
    1168:	59 c0       	rjmp	.+178    	; 0x121c <poll_buttons+0x202>
		{
			if(tune_rate == FAST)
    116a:	80 91 06 01 	lds	r24, 0x0106
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	51 f5       	brne	.+84     	; 0x11c6 <poll_buttons+0x1ac>
			{
				tune_rate = SLOW;
    1172:	10 92 06 01 	sts	0x0106, r1
				tune_step = DDS_20HZ;
    1176:	84 e3       	ldi	r24, 0x34	; 52
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	90 93 08 01 	sts	0x0108, r25
    117e:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 5;
    1182:	85 e0       	ldi	r24, 0x05	; 5
    1184:	80 93 09 01 	sts	0x0109, r24
				sleep_timer = cur_timer + SLEEP_DELAY;
    1188:	80 91 68 01 	lds	r24, 0x0168
    118c:	90 91 69 01 	lds	r25, 0x0169
    1190:	a0 91 6a 01 	lds	r26, 0x016A
    1194:	b0 91 6b 01 	lds	r27, 0x016B
    1198:	84 5d       	subi	r24, 0xD4	; 212
    119a:	9e 4f       	sbci	r25, 0xFE	; 254
    119c:	af 4f       	sbci	r26, 0xFF	; 255
    119e:	bf 4f       	sbci	r27, 0xFF	; 255
    11a0:	80 93 cd 01 	sts	0x01CD, r24
    11a4:	90 93 ce 01 	sts	0x01CE, r25
    11a8:	a0 93 cf 01 	sts	0x01CF, r26
    11ac:	b0 93 d0 01 	sts	0x01D0, r27
				debounce(TRUE);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
				announce("S", ST_LOW, 25);
    11b6:	8b e1       	ldi	r24, 0x1B	; 27
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	60 e9       	ldi	r22, 0x90	; 144
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	49 e1       	ldi	r20, 0x19	; 25
    11c0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
    11c4:	86 c1       	rjmp	.+780    	; 0x14d2 <poll_buttons+0x4b8>
			}
			else
			{
				tune_rate = FAST;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 06 01 	sts	0x0106, r24
				tune_step = DDS_100HZ;
    11cc:	8c e0       	ldi	r24, 0x0C	; 12
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	90 93 08 01 	sts	0x0108, r25
    11d4:	80 93 07 01 	sts	0x0107, r24
				tune_freq_step = 25;
    11d8:	89 e1       	ldi	r24, 0x19	; 25
    11da:	80 93 09 01 	sts	0x0109, r24
				sleep_timer = cur_timer + SLEEP_DELAY;
    11de:	80 91 68 01 	lds	r24, 0x0168
    11e2:	90 91 69 01 	lds	r25, 0x0169
    11e6:	a0 91 6a 01 	lds	r26, 0x016A
    11ea:	b0 91 6b 01 	lds	r27, 0x016B
    11ee:	84 5d       	subi	r24, 0xD4	; 212
    11f0:	9e 4f       	sbci	r25, 0xFE	; 254
    11f2:	af 4f       	sbci	r26, 0xFF	; 255
    11f4:	bf 4f       	sbci	r27, 0xFF	; 255
    11f6:	80 93 cd 01 	sts	0x01CD, r24
    11fa:	90 93 ce 01 	sts	0x01CE, r25
    11fe:	a0 93 cf 01 	sts	0x01CF, r26
    1202:	b0 93 d0 01 	sts	0x01D0, r27
				debounce(TRUE);
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
				announce("S", ST_HIGH, 25);
    120c:	8b e1       	ldi	r24, 0x1B	; 27
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	64 e8       	ldi	r22, 0x84	; 132
    1212:	73 e0       	ldi	r23, 0x03	; 3
    1214:	49 e1       	ldi	r20, 0x19	; 25
    1216:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
    121a:	5b c1       	rjmp	.+694    	; 0x14d2 <poll_buttons+0x4b8>
			}
		}
		// Otherwise if we are in RIT or XIT, pressing the tune knob toggles between the two VFOs
		else
		{
			if(tune_reg == REG_0)
    121c:	80 91 d1 01 	lds	r24, 0x01D1
    1220:	88 23       	and	r24, r24
    1222:	59 f4       	brne	.+22     	; 0x123a <poll_buttons+0x220>
			{
				tune_reg = REG_1;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	80 93 d1 01 	sts	0x01D1, r24
				announce("T", ST_LOW, 25);
    122a:	8d e1       	ldi	r24, 0x1D	; 29
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	60 e9       	ldi	r22, 0x90	; 144
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	49 e1       	ldi	r20, 0x19	; 25
    1234:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
    1238:	4c c1       	rjmp	.+664    	; 0x14d2 <poll_buttons+0x4b8>
			}
			else
			{
				tune_reg = REG_0;
    123a:	10 92 d1 01 	sts	0x01D1, r1
				announce("R", ST_LOW, 25);
    123e:	8f e1       	ldi	r24, 0x1F	; 31
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	60 e9       	ldi	r22, 0x90	; 144
    1244:	71 e0       	ldi	r23, 0x01	; 1
    1246:	49 e1       	ldi	r20, 0x19	; 25
    1248:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
    124c:	42 c1       	rjmp	.+644    	; 0x14d2 <poll_buttons+0x4b8>
			}
		}
	}
	else if(enc_btn == HOLD)
    124e:	80 91 d3 01 	lds	r24, 0x01D3
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	09 f0       	breq	.+2      	; 0x1258 <poll_buttons+0x23e>
    1256:	3d c1       	rjmp	.+634    	; 0x14d2 <poll_buttons+0x4b8>
	{
		// Rotate through the 3 states
		inc_tune_state++;
    1258:	80 91 d2 01 	lds	r24, 0x01D2
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	80 93 d2 01 	sts	0x01D2, r24
		if(inc_tune_state > 2)
    1262:	80 91 d2 01 	lds	r24, 0x01D2
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	10 f0       	brcs	.+4      	; 0x126e <poll_buttons+0x254>
			inc_tune_state = NONE;
    126a:	10 92 d2 01 	sts	0x01D2, r1

		switch(inc_tune_state)
    126e:	80 91 d2 01 	lds	r24, 0x01D2
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	91 05       	cpc	r25, r1
    127a:	29 f0       	breq	.+10     	; 0x1286 <poll_buttons+0x26c>
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	91 05       	cpc	r25, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <poll_buttons+0x26a>
    1282:	55 c0       	rjmp	.+170    	; 0x132e <poll_buttons+0x314>
    1284:	c3 c0       	rjmp	.+390    	; 0x140c <poll_buttons+0x3f2>
		{
			case RIT:
				RIT_LED_DDR |= _BV(RIT_LED);
    1286:	87 e2       	ldi	r24, 0x27	; 39
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	27 e2       	ldi	r18, 0x27	; 39
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	f9 01       	movw	r30, r18
    1290:	20 81       	ld	r18, Z
    1292:	22 60       	ori	r18, 0x02	; 2
    1294:	fc 01       	movw	r30, r24
    1296:	20 83       	st	Z, r18
				//RIT_LED_PORT |= _BV(RIT_LED);
				dds_rit_freq_word = dds_freq_word;
    1298:	80 91 ac 01 	lds	r24, 0x01AC
    129c:	90 91 ad 01 	lds	r25, 0x01AD
    12a0:	a0 91 ae 01 	lds	r26, 0x01AE
    12a4:	b0 91 af 01 	lds	r27, 0x01AF
    12a8:	80 93 bc 01 	sts	0x01BC, r24
    12ac:	90 93 bd 01 	sts	0x01BD, r25
    12b0:	a0 93 be 01 	sts	0x01BE, r26
    12b4:	b0 93 bf 01 	sts	0x01BF, r27
				tune_dds(dds_rit_freq_word, REG_0, FALSE);
    12b8:	80 91 bc 01 	lds	r24, 0x01BC
    12bc:	90 91 bd 01 	lds	r25, 0x01BD
    12c0:	a0 91 be 01 	lds	r26, 0x01BE
    12c4:	b0 91 bf 01 	lds	r27, 0x01BF
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
				tune_dds(dds_rit_freq_word, REG_1, FALSE);
    12d4:	80 91 bc 01 	lds	r24, 0x01BC
    12d8:	90 91 bd 01 	lds	r25, 0x01BD
    12dc:	a0 91 be 01 	lds	r26, 0x01BE
    12e0:	b0 91 bf 01 	lds	r27, 0x01BF
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
				//tune_reg = REG_0;
				//set_dds_freq_reg(tune_reg);
				debounce(TRUE);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    12f6:	80 91 68 01 	lds	r24, 0x0168
    12fa:	90 91 69 01 	lds	r25, 0x0169
    12fe:	a0 91 6a 01 	lds	r26, 0x016A
    1302:	b0 91 6b 01 	lds	r27, 0x016B
    1306:	84 5d       	subi	r24, 0xD4	; 212
    1308:	9e 4f       	sbci	r25, 0xFE	; 254
    130a:	af 4f       	sbci	r26, 0xFF	; 255
    130c:	bf 4f       	sbci	r27, 0xFF	; 255
    130e:	80 93 cd 01 	sts	0x01CD, r24
    1312:	90 93 ce 01 	sts	0x01CE, r25
    1316:	a0 93 cf 01 	sts	0x01CF, r26
    131a:	b0 93 d0 01 	sts	0x01D0, r27
				announce("R", ST_HIGH, 25);
    131e:	8f e1       	ldi	r24, 0x1F	; 31
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	64 e8       	ldi	r22, 0x84	; 132
    1324:	73 e0       	ldi	r23, 0x03	; 3
    1326:	49 e1       	ldi	r20, 0x19	; 25
    1328:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
				break;
    132c:	d2 c0       	rjmp	.+420    	; 0x14d2 <poll_buttons+0x4b8>

			case XIT:
				RIT_LED_DDR |= _BV(RIT_LED);
    132e:	87 e2       	ldi	r24, 0x27	; 39
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	27 e2       	ldi	r18, 0x27	; 39
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	f9 01       	movw	r30, r18
    1338:	20 81       	ld	r18, Z
    133a:	22 60       	ori	r18, 0x02	; 2
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18
				//RIT_LED_PORT |= _BV(RIT_LED);
				led_toggle = cur_timer + XIT_BLINK;
    1340:	80 91 68 01 	lds	r24, 0x0168
    1344:	90 91 69 01 	lds	r25, 0x0169
    1348:	a0 91 6a 01 	lds	r26, 0x016A
    134c:	b0 91 6b 01 	lds	r27, 0x016B
    1350:	8c 50       	subi	r24, 0x0C	; 12
    1352:	9e 4f       	sbci	r25, 0xFE	; 254
    1354:	af 4f       	sbci	r26, 0xFF	; 255
    1356:	bf 4f       	sbci	r27, 0xFF	; 255
    1358:	80 93 dd 01 	sts	0x01DD, r24
    135c:	90 93 de 01 	sts	0x01DE, r25
    1360:	a0 93 df 01 	sts	0x01DF, r26
    1364:	b0 93 e0 01 	sts	0x01E0, r27
				dds_xit_freq_word = dds_rit_freq_word;
    1368:	80 91 bc 01 	lds	r24, 0x01BC
    136c:	90 91 bd 01 	lds	r25, 0x01BD
    1370:	a0 91 be 01 	lds	r26, 0x01BE
    1374:	b0 91 bf 01 	lds	r27, 0x01BF
    1378:	80 93 c1 01 	sts	0x01C1, r24
    137c:	90 93 c2 01 	sts	0x01C2, r25
    1380:	a0 93 c3 01 	sts	0x01C3, r26
    1384:	b0 93 c4 01 	sts	0x01C4, r27
				tune_dds(dds_xit_freq_word, REG_0, FALSE);
    1388:	80 91 c1 01 	lds	r24, 0x01C1
    138c:	90 91 c2 01 	lds	r25, 0x01C2
    1390:	a0 91 c3 01 	lds	r26, 0x01C3
    1394:	b0 91 c4 01 	lds	r27, 0x01C4
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
				tune_dds(dds_xit_freq_word, REG_1, FALSE);
    13a4:	80 91 c1 01 	lds	r24, 0x01C1
    13a8:	90 91 c2 01 	lds	r25, 0x01C2
    13ac:	a0 91 c3 01 	lds	r26, 0x01C3
    13b0:	b0 91 c4 01 	lds	r27, 0x01C4
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
				tune_reg = REG_1;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 93 d1 01 	sts	0x01D1, r24
				set_dds_freq_reg(tune_reg);
    13c6:	80 91 d1 01 	lds	r24, 0x01D1
    13ca:	0e 94 4f 0c 	call	0x189e	; 0x189e <set_dds_freq_reg>
				debounce(TRUE);
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    13d4:	80 91 68 01 	lds	r24, 0x0168
    13d8:	90 91 69 01 	lds	r25, 0x0169
    13dc:	a0 91 6a 01 	lds	r26, 0x016A
    13e0:	b0 91 6b 01 	lds	r27, 0x016B
    13e4:	84 5d       	subi	r24, 0xD4	; 212
    13e6:	9e 4f       	sbci	r25, 0xFE	; 254
    13e8:	af 4f       	sbci	r26, 0xFF	; 255
    13ea:	bf 4f       	sbci	r27, 0xFF	; 255
    13ec:	80 93 cd 01 	sts	0x01CD, r24
    13f0:	90 93 ce 01 	sts	0x01CE, r25
    13f4:	a0 93 cf 01 	sts	0x01CF, r26
    13f8:	b0 93 d0 01 	sts	0x01D0, r27
				announce("X", ST_HIGH, 25);
    13fc:	81 e2       	ldi	r24, 0x21	; 33
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	64 e8       	ldi	r22, 0x84	; 132
    1402:	73 e0       	ldi	r23, 0x03	; 3
    1404:	49 e1       	ldi	r20, 0x19	; 25
    1406:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
				break;
    140a:	63 c0       	rjmp	.+198    	; 0x14d2 <poll_buttons+0x4b8>

			case NONE:
			default:
				RIT_LED_DDR &= ~(_BV(RIT_LED));
    140c:	87 e2       	ldi	r24, 0x27	; 39
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	27 e2       	ldi	r18, 0x27	; 39
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	f9 01       	movw	r30, r18
    1416:	20 81       	ld	r18, Z
    1418:	2d 7f       	andi	r18, 0xFD	; 253
    141a:	fc 01       	movw	r30, r24
    141c:	20 83       	st	Z, r18
				RIT_LED_PORT &= ~(_BV(RIT_LED));
    141e:	88 e2       	ldi	r24, 0x28	; 40
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	28 e2       	ldi	r18, 0x28	; 40
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	f9 01       	movw	r30, r18
    1428:	20 81       	ld	r18, Z
    142a:	2d 7f       	andi	r18, 0xFD	; 253
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
				dds_freq_word = dds_xit_freq_word;
    1430:	80 91 c1 01 	lds	r24, 0x01C1
    1434:	90 91 c2 01 	lds	r25, 0x01C2
    1438:	a0 91 c3 01 	lds	r26, 0x01C3
    143c:	b0 91 c4 01 	lds	r27, 0x01C4
    1440:	80 93 ac 01 	sts	0x01AC, r24
    1444:	90 93 ad 01 	sts	0x01AD, r25
    1448:	a0 93 ae 01 	sts	0x01AE, r26
    144c:	b0 93 af 01 	sts	0x01AF, r27
				tune_dds(dds_freq_word, REG_0, FALSE);
    1450:	80 91 ac 01 	lds	r24, 0x01AC
    1454:	90 91 ad 01 	lds	r25, 0x01AD
    1458:	a0 91 ae 01 	lds	r26, 0x01AE
    145c:	b0 91 af 01 	lds	r27, 0x01AF
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
				tune_dds(dds_freq_word, REG_1, FALSE);
    146c:	80 91 ac 01 	lds	r24, 0x01AC
    1470:	90 91 ad 01 	lds	r25, 0x01AD
    1474:	a0 91 ae 01 	lds	r26, 0x01AE
    1478:	b0 91 af 01 	lds	r27, 0x01AF
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
				tune_reg = REG_0;
    1488:	10 92 d1 01 	sts	0x01D1, r1
				set_dds_freq_reg(tune_reg);
    148c:	80 91 d1 01 	lds	r24, 0x01D1
    1490:	0e 94 4f 0c 	call	0x189e	; 0x189e <set_dds_freq_reg>
				debounce(TRUE);
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
				sleep_timer = cur_timer + SLEEP_DELAY;
    149a:	80 91 68 01 	lds	r24, 0x0168
    149e:	90 91 69 01 	lds	r25, 0x0169
    14a2:	a0 91 6a 01 	lds	r26, 0x016A
    14a6:	b0 91 6b 01 	lds	r27, 0x016B
    14aa:	84 5d       	subi	r24, 0xD4	; 212
    14ac:	9e 4f       	sbci	r25, 0xFE	; 254
    14ae:	af 4f       	sbci	r26, 0xFF	; 255
    14b0:	bf 4f       	sbci	r27, 0xFF	; 255
    14b2:	80 93 cd 01 	sts	0x01CD, r24
    14b6:	90 93 ce 01 	sts	0x01CE, r25
    14ba:	a0 93 cf 01 	sts	0x01CF, r26
    14be:	b0 93 d0 01 	sts	0x01D0, r27
				announce("O", ST_HIGH, 25);
    14c2:	83 e2       	ldi	r24, 0x23	; 35
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	64 e8       	ldi	r22, 0x84	; 132
    14c8:	73 e0       	ldi	r23, 0x03	; 3
    14ca:	49 e1       	ldi	r20, 0x19	; 25
    14cc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
				break;
    14d0:	00 00       	nop
			sleep_timer = cur_timer + SLEEP_DELAY;
		} */
	}

	// Handle encoder
	uint8_t cur_enc_state = 0;
    14d2:	19 82       	std	Y+1, r1	; 0x01

	// Set bits representing current encoder state
	if(enc_a)
    14d4:	80 91 67 01 	lds	r24, 0x0167
    14d8:	88 23       	and	r24, r24
    14da:	19 f0       	breq	.+6      	; 0x14e2 <poll_buttons+0x4c8>
		cur_enc_state += 0x02;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	8e 5f       	subi	r24, 0xFE	; 254
    14e0:	89 83       	std	Y+1, r24	; 0x01
	if(enc_b)
    14e2:	80 91 f1 01 	lds	r24, 0x01F1
    14e6:	88 23       	and	r24, r24
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <poll_buttons+0x4d6>
		cur_enc_state += 0x01;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	89 83       	std	Y+1, r24	; 0x01

	// If the current state is different from previous state, the encoder has moved
	if(cur_enc_state != prev_enc_state)
    14f0:	80 91 4e 01 	lds	r24, 0x014E
    14f4:	99 81       	ldd	r25, Y+1	; 0x01
    14f6:	98 17       	cp	r25, r24
    14f8:	09 f4       	brne	.+2      	; 0x14fc <poll_buttons+0x4e2>
    14fa:	26 c1       	rjmp	.+588    	; 0x1748 <poll_buttons+0x72e>
	{
		prev_enc_state = (prev_enc_state >> 1) & 0x01;
    14fc:	80 91 4e 01 	lds	r24, 0x014E
    1500:	86 95       	lsr	r24
    1502:	81 70       	andi	r24, 0x01	; 1
    1504:	80 93 4e 01 	sts	0x014E, r24
		sleep_timer = cur_timer + SLEEP_DELAY;
    1508:	80 91 68 01 	lds	r24, 0x0168
    150c:	90 91 69 01 	lds	r25, 0x0169
    1510:	a0 91 6a 01 	lds	r26, 0x016A
    1514:	b0 91 6b 01 	lds	r27, 0x016B
    1518:	84 5d       	subi	r24, 0xD4	; 212
    151a:	9e 4f       	sbci	r25, 0xFE	; 254
    151c:	af 4f       	sbci	r26, 0xFF	; 255
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	80 93 cd 01 	sts	0x01CD, r24
    1524:	90 93 ce 01 	sts	0x01CE, r25
    1528:	a0 93 cf 01 	sts	0x01CF, r26
    152c:	b0 93 d0 01 	sts	0x01D0, r27

		// Compare current B state to previous A state
		if((prev_enc_state ^ (cur_enc_state & 0x01)) == 1)
    1530:	80 91 4e 01 	lds	r24, 0x014E
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	81 70       	andi	r24, 0x01	; 1
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	82 27       	eor	r24, r18
    1544:	93 27       	eor	r25, r19
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	91 05       	cpc	r25, r1
    154a:	09 f0       	breq	.+2      	; 0x154e <poll_buttons+0x534>
    154c:	83 c0       	rjmp	.+262    	; 0x1654 <poll_buttons+0x63a>
		{
			// Don't allow tuning if we are on the locked VFO
			if((inc_tune_state == RIT && tune_reg == REG_0) || (inc_tune_state == XIT && tune_reg == REG_1) || (inc_tune_state == NONE))
    154e:	80 91 d2 01 	lds	r24, 0x01D2
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	21 f4       	brne	.+8      	; 0x155e <poll_buttons+0x544>
    1556:	80 91 d1 01 	lds	r24, 0x01D1
    155a:	88 23       	and	r24, r24
    155c:	69 f0       	breq	.+26     	; 0x1578 <poll_buttons+0x55e>
    155e:	80 91 d2 01 	lds	r24, 0x01D2
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	21 f4       	brne	.+8      	; 0x156e <poll_buttons+0x554>
    1566:	80 91 d1 01 	lds	r24, 0x01D1
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	29 f0       	breq	.+10     	; 0x1578 <poll_buttons+0x55e>
    156e:	80 91 d2 01 	lds	r24, 0x01D2
    1572:	88 23       	and	r24, r24
    1574:	09 f0       	breq	.+2      	; 0x1578 <poll_buttons+0x55e>
    1576:	e8 c0       	rjmp	.+464    	; 0x1748 <poll_buttons+0x72e>
			{

				if(tune_freq > LOWER_FREQ_LIMIT)
    1578:	80 91 e2 01 	lds	r24, 0x01E2
    157c:	90 91 e3 01 	lds	r25, 0x01E3
    1580:	a0 91 e4 01 	lds	r26, 0x01E4
    1584:	b0 91 e5 01 	lds	r27, 0x01E5
    1588:	81 38       	cpi	r24, 0x81	; 129
    158a:	ff e9       	ldi	r31, 0x9F	; 159
    158c:	9f 07       	cpc	r25, r31
    158e:	f5 ed       	ldi	r31, 0xD5	; 213
    1590:	af 07       	cpc	r26, r31
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	bf 07       	cpc	r27, r31
    1596:	08 f4       	brcc	.+2      	; 0x159a <poll_buttons+0x580>
    1598:	52 c0       	rjmp	.+164    	; 0x163e <poll_buttons+0x624>
				{
					dds_freq_word -= tune_step;
    159a:	20 91 ac 01 	lds	r18, 0x01AC
    159e:	30 91 ad 01 	lds	r19, 0x01AD
    15a2:	40 91 ae 01 	lds	r20, 0x01AE
    15a6:	50 91 af 01 	lds	r21, 0x01AF
    15aa:	80 91 07 01 	lds	r24, 0x0107
    15ae:	90 91 08 01 	lds	r25, 0x0108
    15b2:	cc 01       	movw	r24, r24
    15b4:	a0 e0       	ldi	r26, 0x00	; 0
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	79 01       	movw	r14, r18
    15ba:	8a 01       	movw	r16, r20
    15bc:	e8 1a       	sub	r14, r24
    15be:	f9 0a       	sbc	r15, r25
    15c0:	0a 0b       	sbc	r16, r26
    15c2:	1b 0b       	sbc	r17, r27
    15c4:	d8 01       	movw	r26, r16
    15c6:	c7 01       	movw	r24, r14
    15c8:	80 93 ac 01 	sts	0x01AC, r24
    15cc:	90 93 ad 01 	sts	0x01AD, r25
    15d0:	a0 93 ae 01 	sts	0x01AE, r26
    15d4:	b0 93 af 01 	sts	0x01AF, r27
					tune_freq -= tune_freq_step;
    15d8:	20 91 e2 01 	lds	r18, 0x01E2
    15dc:	30 91 e3 01 	lds	r19, 0x01E3
    15e0:	40 91 e4 01 	lds	r20, 0x01E4
    15e4:	50 91 e5 01 	lds	r21, 0x01E5
    15e8:	80 91 09 01 	lds	r24, 0x0109
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	79 01       	movw	r14, r18
    15f6:	8a 01       	movw	r16, r20
    15f8:	e8 1a       	sub	r14, r24
    15fa:	f9 0a       	sbc	r15, r25
    15fc:	0a 0b       	sbc	r16, r26
    15fe:	1b 0b       	sbc	r17, r27
    1600:	d8 01       	movw	r26, r16
    1602:	c7 01       	movw	r24, r14
    1604:	80 93 e2 01 	sts	0x01E2, r24
    1608:	90 93 e3 01 	sts	0x01E3, r25
    160c:	a0 93 e4 01 	sts	0x01E4, r26
    1610:	b0 93 e5 01 	sts	0x01E5, r27
					tune_dds(dds_freq_word, tune_reg, FALSE);
    1614:	80 91 ac 01 	lds	r24, 0x01AC
    1618:	90 91 ad 01 	lds	r25, 0x01AD
    161c:	a0 91 ae 01 	lds	r26, 0x01AE
    1620:	b0 91 af 01 	lds	r27, 0x01AF
    1624:	20 91 d1 01 	lds	r18, 0x01D1
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	42 2f       	mov	r20, r18
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
					set_dds_freq_reg(tune_reg);
    1634:	80 91 d1 01 	lds	r24, 0x01D1
    1638:	0e 94 4f 0c 	call	0x189e	; 0x189e <set_dds_freq_reg>
    163c:	85 c0       	rjmp	.+266    	; 0x1748 <poll_buttons+0x72e>
				}
				else
				{
					announce("L", ST_HIGH, 25);
    163e:	85 e2       	ldi	r24, 0x25	; 37
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	64 e8       	ldi	r22, 0x84	; 132
    1644:	73 e0       	ldi	r23, 0x03	; 3
    1646:	49 e1       	ldi	r20, 0x19	; 25
    1648:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
					debounce(TRUE);
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
    1652:	7a c0       	rjmp	.+244    	; 0x1748 <poll_buttons+0x72e>
			}
		}
		else
		{
			// Don't allow tuning if we are on the locked VFO
			if((inc_tune_state == RIT && tune_reg == REG_0) || (inc_tune_state == XIT && tune_reg == REG_1) || (inc_tune_state == NONE))
    1654:	80 91 d2 01 	lds	r24, 0x01D2
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	21 f4       	brne	.+8      	; 0x1664 <poll_buttons+0x64a>
    165c:	80 91 d1 01 	lds	r24, 0x01D1
    1660:	88 23       	and	r24, r24
    1662:	69 f0       	breq	.+26     	; 0x167e <poll_buttons+0x664>
    1664:	80 91 d2 01 	lds	r24, 0x01D2
    1668:	82 30       	cpi	r24, 0x02	; 2
    166a:	21 f4       	brne	.+8      	; 0x1674 <poll_buttons+0x65a>
    166c:	80 91 d1 01 	lds	r24, 0x01D1
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	29 f0       	breq	.+10     	; 0x167e <poll_buttons+0x664>
    1674:	80 91 d2 01 	lds	r24, 0x01D2
    1678:	88 23       	and	r24, r24
    167a:	09 f0       	breq	.+2      	; 0x167e <poll_buttons+0x664>
    167c:	65 c0       	rjmp	.+202    	; 0x1748 <poll_buttons+0x72e>
			{

				// Tune up as long as we are not at upper limit
				if(tune_freq < UPPER_FREQ_LIMIT)
    167e:	80 91 e2 01 	lds	r24, 0x01E2
    1682:	90 91 e3 01 	lds	r25, 0x01E3
    1686:	a0 91 e4 01 	lds	r26, 0x01E4
    168a:	b0 91 e5 01 	lds	r27, 0x01E5
    168e:	80 3b       	cpi	r24, 0xB0	; 176
    1690:	06 ef       	ldi	r16, 0xF6	; 246
    1692:	90 07       	cpc	r25, r16
    1694:	0a ed       	ldi	r16, 0xDA	; 218
    1696:	a0 07       	cpc	r26, r16
    1698:	00 e0       	ldi	r16, 0x00	; 0
    169a:	b0 07       	cpc	r27, r16
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <poll_buttons+0x686>
    169e:	4a c0       	rjmp	.+148    	; 0x1734 <poll_buttons+0x71a>
				{
					dds_freq_word += tune_step;
    16a0:	80 91 07 01 	lds	r24, 0x0107
    16a4:	90 91 08 01 	lds	r25, 0x0108
    16a8:	9c 01       	movw	r18, r24
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	80 91 ac 01 	lds	r24, 0x01AC
    16b2:	90 91 ad 01 	lds	r25, 0x01AD
    16b6:	a0 91 ae 01 	lds	r26, 0x01AE
    16ba:	b0 91 af 01 	lds	r27, 0x01AF
    16be:	82 0f       	add	r24, r18
    16c0:	93 1f       	adc	r25, r19
    16c2:	a4 1f       	adc	r26, r20
    16c4:	b5 1f       	adc	r27, r21
    16c6:	80 93 ac 01 	sts	0x01AC, r24
    16ca:	90 93 ad 01 	sts	0x01AD, r25
    16ce:	a0 93 ae 01 	sts	0x01AE, r26
    16d2:	b0 93 af 01 	sts	0x01AF, r27
					tune_freq += tune_freq_step;
    16d6:	80 91 09 01 	lds	r24, 0x0109
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	80 91 e2 01 	lds	r24, 0x01E2
    16e6:	90 91 e3 01 	lds	r25, 0x01E3
    16ea:	a0 91 e4 01 	lds	r26, 0x01E4
    16ee:	b0 91 e5 01 	lds	r27, 0x01E5
    16f2:	82 0f       	add	r24, r18
    16f4:	93 1f       	adc	r25, r19
    16f6:	a4 1f       	adc	r26, r20
    16f8:	b5 1f       	adc	r27, r21
    16fa:	80 93 e2 01 	sts	0x01E2, r24
    16fe:	90 93 e3 01 	sts	0x01E3, r25
    1702:	a0 93 e4 01 	sts	0x01E4, r26
    1706:	b0 93 e5 01 	sts	0x01E5, r27
					tune_dds(dds_freq_word, tune_reg, FALSE);
    170a:	80 91 ac 01 	lds	r24, 0x01AC
    170e:	90 91 ad 01 	lds	r25, 0x01AD
    1712:	a0 91 ae 01 	lds	r26, 0x01AE
    1716:	b0 91 af 01 	lds	r27, 0x01AF
    171a:	20 91 d1 01 	lds	r18, 0x01D1
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	42 2f       	mov	r20, r18
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	0e 94 af 0b 	call	0x175e	; 0x175e <tune_dds>
					set_dds_freq_reg(tune_reg);
    172a:	80 91 d1 01 	lds	r24, 0x01D1
    172e:	0e 94 4f 0c 	call	0x189e	; 0x189e <set_dds_freq_reg>
    1732:	0a c0       	rjmp	.+20     	; 0x1748 <poll_buttons+0x72e>
				}
				else
				{
					announce("U", ST_HIGH, 25);
    1734:	87 e2       	ldi	r24, 0x27	; 39
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	64 e8       	ldi	r22, 0x84	; 132
    173a:	73 e0       	ldi	r23, 0x03	; 3
    173c:	49 e1       	ldi	r20, 0x19	; 25
    173e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
					debounce(TRUE);
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
				announce("U", ST_HIGH, 23);
				*/
		}
	}

	prev_enc_state = cur_enc_state;
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	80 93 4e 01 	sts	0x014E, r24
}
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	08 95       	ret

0000175e <tune_dds>:

void tune_dds(uint32_t dds_word, enum FREQREG reg, enum BOOL init)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	2c 97       	sbiw	r28, 0x0c	; 12
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	6f 83       	std	Y+7, r22	; 0x07
    1774:	78 87       	std	Y+8, r23	; 0x08
    1776:	89 87       	std	Y+9, r24	; 0x09
    1778:	9a 87       	std	Y+10, r25	; 0x0a
    177a:	4b 87       	std	Y+11, r20	; 0x0b
    177c:	2c 87       	std	Y+12, r18	; 0x0c
	uint16_t dds_word_high, dds_word_low, freq_reg;

	if(reg == REG_1)
    177e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	29 f4       	brne	.+10     	; 0x178e <tune_dds+0x30>
		freq_reg = 0x8000;
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e8       	ldi	r25, 0x80	; 128
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <tune_dds+0x38>
	else
		freq_reg = 0x4000;
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e4       	ldi	r25, 0x40	; 64
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01

	dds_word_low = (uint16_t)((dds_word & 0x3FFF) + freq_reg);
    1796:	8f 81       	ldd	r24, Y+7	; 0x07
    1798:	98 85       	ldd	r25, Y+8	; 0x08
    179a:	9c 01       	movw	r18, r24
    179c:	3f 73       	andi	r19, 0x3F	; 63
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	82 0f       	add	r24, r18
    17a4:	93 1f       	adc	r25, r19
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
	dds_word_high = (uint16_t)(((dds_word >> 14) & 0x3FFF) + freq_reg);
    17aa:	8f 81       	ldd	r24, Y+7	; 0x07
    17ac:	98 85       	ldd	r25, Y+8	; 0x08
    17ae:	a9 85       	ldd	r26, Y+9	; 0x09
    17b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    17b2:	07 2e       	mov	r0, r23
    17b4:	7e e0       	ldi	r23, 0x0E	; 14
    17b6:	b6 95       	lsr	r27
    17b8:	a7 95       	ror	r26
    17ba:	97 95       	ror	r25
    17bc:	87 95       	ror	r24
    17be:	7a 95       	dec	r23
    17c0:	d1 f7       	brne	.-12     	; 0x17b6 <tune_dds+0x58>
    17c2:	70 2d       	mov	r23, r0
    17c4:	9c 01       	movw	r18, r24
    17c6:	3f 73       	andi	r19, 0x3F	; 63
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	82 0f       	add	r24, r18
    17ce:	93 1f       	adc	r25, r19
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05

	if(init == TRUE)
    17d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	21 f4       	brne	.+8      	; 0x17e2 <tune_dds+0x84>
		send_dds_word(0x2100);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	91 e2       	ldi	r25, 0x21	; 33
    17de:	0e 94 0d 0c 	call	0x181a	; 0x181a <send_dds_word>

	// Send frequency word LSB
	send_dds_word(dds_word_low);
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	0e 94 0d 0c 	call	0x181a	; 0x181a <send_dds_word>

	// Send frequency word MSB
	send_dds_word(dds_word_high);
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	0e 94 0d 0c 	call	0x181a	; 0x181a <send_dds_word>

	if(init == TRUE)
    17f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	41 f4       	brne	.+16     	; 0x1808 <tune_dds+0xaa>
	{
		// Send phase
		send_dds_word(0xC000);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 ec       	ldi	r25, 0xC0	; 192
    17fc:	0e 94 0d 0c 	call	0x181a	; 0x181a <send_dds_word>

		// Exit reset
		send_dds_word(0x2000);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e2       	ldi	r25, 0x20	; 32
    1804:	0e 94 0d 0c 	call	0x181a	; 0x181a <send_dds_word>
	}
}
    1808:	2c 96       	adiw	r28, 0x0c	; 12
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <send_dds_word>:
	send_dds_word(0x2000);
}
*/

void send_dds_word(uint16_t dds_word)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <send_dds_word+0x6>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
	SPI_PORT |= _BV(SPI_SCK);
    1828:	85 e2       	ldi	r24, 0x25	; 37
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	25 e2       	ldi	r18, 0x25	; 37
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	f9 01       	movw	r30, r18
    1832:	20 81       	ld	r18, Z
    1834:	20 62       	ori	r18, 0x20	; 32
    1836:	fc 01       	movw	r30, r24
    1838:	20 83       	st	Z, r18
	SPI_PORT &= ~(_BV(SPI_FSYNC));
    183a:	85 e2       	ldi	r24, 0x25	; 37
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	25 e2       	ldi	r18, 0x25	; 37
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	f9 01       	movw	r30, r18
    1844:	20 81       	ld	r18, Z
    1846:	2d 7f       	andi	r18, 0xFD	; 253
    1848:	fc 01       	movw	r30, r24
    184a:	20 83       	st	Z, r18
	SPDR = (uint8_t)((dds_word >> 8) & 0xFF);
    184c:	8e e4       	ldi	r24, 0x4E	; 78
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	29 81       	ldd	r18, Y+1	; 0x01
    1852:	3a 81       	ldd	r19, Y+2	; 0x02
    1854:	23 2f       	mov	r18, r19
    1856:	33 27       	eor	r19, r19
    1858:	fc 01       	movw	r30, r24
    185a:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    185c:	00 00       	nop
    185e:	8d e4       	ldi	r24, 0x4D	; 77
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	fc 01       	movw	r30, r24
    1864:	80 81       	ld	r24, Z
    1866:	88 23       	and	r24, r24
    1868:	d4 f7       	brge	.-12     	; 0x185e <send_dds_word+0x44>
	SPDR = (uint8_t)(dds_word & 0xFF);
    186a:	8e e4       	ldi	r24, 0x4E	; 78
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	29 81       	ldd	r18, Y+1	; 0x01
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1874:	00 00       	nop
    1876:	8d e4       	ldi	r24, 0x4D	; 77
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	fc 01       	movw	r30, r24
    187c:	80 81       	ld	r24, Z
    187e:	88 23       	and	r24, r24
    1880:	d4 f7       	brge	.-12     	; 0x1876 <send_dds_word+0x5c>
	SPI_PORT |= _BV(SPI_FSYNC);
    1882:	85 e2       	ldi	r24, 0x25	; 37
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	25 e2       	ldi	r18, 0x25	; 37
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	f9 01       	movw	r30, r18
    188c:	20 81       	ld	r18, Z
    188e:	22 60       	ori	r18, 0x02	; 2
    1890:	fc 01       	movw	r30, r24
    1892:	20 83       	st	Z, r18
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <set_dds_freq_reg>:

void set_dds_freq_reg(enum FREQREG reg)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	89 83       	std	Y+1, r24	; 0x01
	// Control register
	if(reg == REG_1)
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	29 f4       	brne	.+10     	; 0x18ba <set_dds_freq_reg+0x1c>
		send_dds_word(0x2800);
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	98 e2       	ldi	r25, 0x28	; 40
    18b4:	0e 94 0d 0c 	call	0x181a	; 0x181a <send_dds_word>
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <set_dds_freq_reg+0x24>
	else
		send_dds_word(0x2000);
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e2       	ldi	r25, 0x20	; 32
    18be:	0e 94 0d 0c 	call	0x181a	; 0x181a <send_dds_word>
}
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <set_st_freq>:

void set_st_freq(uint32_t st_freq)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <set_st_freq+0x6>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <set_st_freq+0x8>
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	69 83       	std	Y+1, r22	; 0x01
    18d8:	7a 83       	std	Y+2, r23	; 0x02
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	9c 83       	std	Y+4, r25	; 0x04
	st_tune_word = st_freq  * ST_REFCLK; // A way to avoid 64-bit math, ST_REFCLK is 1/(2^32/REFCLK)
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	ab 81       	ldd	r26, Y+3	; 0x03
    18e4:	bc 81       	ldd	r27, Y+4	; 0x04
    18e6:	23 e9       	ldi	r18, 0x93	; 147
    18e8:	38 e1       	ldi	r19, 0x18	; 24
    18ea:	44 e0       	ldi	r20, 0x04	; 4
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 a6 19 	call	0x334c	; 0x334c <__mulsi3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	80 93 b0 01 	sts	0x01B0, r24
    18fe:	90 93 b1 01 	sts	0x01B1, r25
    1902:	a0 93 b2 01 	sts	0x01B2, r26
    1906:	b0 93 b3 01 	sts	0x01B3, r27
}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <main>:

int main(void)
{
    1918:	1f 93       	push	r17
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	2d 97       	sbiw	r28, 0x0d	; 13
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
	static char * cur_menu_p;
	static char * cur_menu;
	static char * text_buffer;
	static uint8_t val_index;

	announce_buffer = malloc(ANNOUNCE_BUFFER_SIZE);
    192e:	89 e2       	ldi	r24, 0x29	; 41
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 0e 1a 	call	0x341c	; 0x341c <malloc>
    1936:	90 93 ec 01 	sts	0x01EC, r25
    193a:	80 93 eb 01 	sts	0x01EB, r24
	memset(announce_buffer, '\0', ANNOUNCE_BUFFER_SIZE);
    193e:	80 91 eb 01 	lds	r24, 0x01EB
    1942:	90 91 ec 01 	lds	r25, 0x01EC
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	49 e2       	ldi	r20, 0x29	; 41
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <memset>
	cur_char_p = announce_buffer;
    1952:	80 91 eb 01 	lds	r24, 0x01EB
    1956:	90 91 ec 01 	lds	r25, 0x01EC
    195a:	90 93 3f 01 	sts	0x013F, r25
    195e:	80 93 3e 01 	sts	0x013E, r24

	text_buffer = malloc(MSG_BUFFER_SIZE);
    1962:	89 e2       	ldi	r24, 0x29	; 41
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 0e 1a 	call	0x341c	; 0x341c <malloc>
    196a:	90 93 41 01 	sts	0x0141, r25
    196e:	80 93 40 01 	sts	0x0140, r24
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);
    1972:	80 91 40 01 	lds	r24, 0x0140
    1976:	90 91 41 01 	lds	r25, 0x0141
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	49 e2       	ldi	r20, 0x29	; 41
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	0e 94 4a 1b 	call	0x3694	; 0x3694 <memset>

	init();
    1986:	0e 94 a0 02 	call	0x540	; 0x540 <init>

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    198a:	19 82       	std	Y+1, r1	; 0x01
    198c:	06 c0       	rjmp	.+12     	; 0x199a <main+0x82>
		debounce(FALSE);
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
	memset(text_buffer, '\0', MSG_BUFFER_SIZE);

	init();

	// Check to see if we should startup in straight key mode
	for (uint8_t i = 0; i < DEBOUNCE_PRESS_TIME + 10; i++)
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	8f 30       	cpi	r24, 0x0F	; 15
    199e:	b8 f3       	brcs	.-18     	; 0x198e <main+0x76>
		debounce(FALSE);
	if(eeprom_read_byte(&ee_keyer) == FALSE)
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <__eerd_byte_m168>
    19a8:	88 23       	and	r24, r24
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <main+0x9c>
		cur_mode = SK;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	80 93 a2 01 	sts	0x01A2, r24
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <main+0xa0>
	else
		cur_mode = KEYER;
    19b4:	10 92 a2 01 	sts	0x01A2, r1

	if((dah_active == TRUE) && (dit_active == FALSE))
    19b8:	80 91 c0 01 	lds	r24, 0x01C0
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	39 f4       	brne	.+14     	; 0x19ce <main+0xb6>
    19c0:	80 91 dc 01 	lds	r24, 0x01DC
    19c4:	88 23       	and	r24, r24
    19c6:	19 f4       	brne	.+6      	; 0x19ce <main+0xb6>
		cur_mode = SK;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	80 93 a2 01 	sts	0x01A2, r24

	announce("CC", st_freq, 15);
    19ce:	20 91 ba 01 	lds	r18, 0x01BA
    19d2:	30 91 bb 01 	lds	r19, 0x01BB
    19d6:	89 e2       	ldi	r24, 0x29	; 41
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	b9 01       	movw	r22, r18
    19dc:	4f e0       	ldi	r20, 0x0F	; 15
    19de:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
	// Main event loop
	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
    19e2:	f8 94       	cli
		cur_timer = timer;
    19e4:	80 91 6e 01 	lds	r24, 0x016E
    19e8:	90 91 6f 01 	lds	r25, 0x016F
    19ec:	a0 91 70 01 	lds	r26, 0x0170
    19f0:	b0 91 71 01 	lds	r27, 0x0171
    19f4:	80 93 68 01 	sts	0x0168, r24
    19f8:	90 93 69 01 	sts	0x0169, r25
    19fc:	a0 93 6a 01 	sts	0x016A, r26
    1a00:	b0 93 6b 01 	sts	0x016B, r27
		sei();
    1a04:	78 94       	sei

		// Handle the current mode
		switch(cur_mode)
    1a06:	80 91 a2 01 	lds	r24, 0x01A2
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	91 05       	cpc	r25, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <main+0xfe>
    1a14:	fe c6       	rjmp	.+3580   	; 0x2812 <main+0xefa>
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	91 05       	cpc	r25, r1
    1a1a:	64 f4       	brge	.+24     	; 0x1a34 <main+0x11c>
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	91 05       	cpc	r25, r1
    1a20:	c9 f0       	breq	.+50     	; 0x1a54 <main+0x13c>
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	91 05       	cpc	r25, r1
    1a26:	0c f0       	brlt	.+2      	; 0x1a2a <main+0x112>
    1a28:	42 c5       	rjmp	.+2692   	; 0x24ae <main+0xb96>
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <main+0x118>
    1a2e:	0f c1       	rjmp	.+542    	; 0x1c4e <main+0x336>
    1a30:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <main+0x1a2e>
    1a34:	85 30       	cpi	r24, 0x05	; 5
    1a36:	91 05       	cpc	r25, r1
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <main+0x126>
    1a3a:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <main+0x13da>
    1a3e:	85 30       	cpi	r24, 0x05	; 5
    1a40:	91 05       	cpc	r25, r1
    1a42:	0c f4       	brge	.+2      	; 0x1a46 <main+0x12e>
    1a44:	a6 c7       	rjmp	.+3916   	; 0x2992 <main+0x107a>
    1a46:	86 30       	cpi	r24, 0x06	; 6
    1a48:	91 05       	cpc	r25, r1
    1a4a:	11 f4       	brne	.+4      	; 0x1a50 <main+0x138>
    1a4c:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <main+0x154a>
    1a50:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <main+0x1a2e>
		{
		case SK:
			default_mode = SK;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	80 93 6d 01 	sts	0x016D, r24
			poll_buttons();
    1a5a:	0e 94 0d 08 	call	0x101a	; 0x101a <poll_buttons>

			switch(cur_state)
    1a5e:	80 91 c8 01 	lds	r24, 0x01C8
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	87 30       	cpi	r24, 0x07	; 7
    1a68:	91 05       	cpc	r25, r1
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <main+0x156>
    1a6c:	43 c0       	rjmp	.+134    	; 0x1af4 <main+0x1dc>
    1a6e:	8c 30       	cpi	r24, 0x0C	; 12
    1a70:	91 05       	cpc	r25, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <main+0x15e>
    1a74:	a7 c0       	rjmp	.+334    	; 0x1bc4 <main+0x2ac>
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	91 05       	cpc	r25, r1
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <main+0x166>
				if(cur_timer >= cur_state_end)
					cur_state = IDLE;
				break;

			default:
				break;
    1a7c:	e6 c0       	rjmp	.+460    	; 0x1c4a <main+0x332>
			poll_buttons();

			switch(cur_state)
			{
			case IDLE:
				key_down = FALSE;
    1a7e:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1a82:	10 92 3a 01 	sts	0x013A, r1
				mute_on = FALSE;
    1a86:	10 92 3b 01 	sts	0x013B, r1
					mute_on = FALSE;
				else
					mute_on = TRUE;
					*/

				if(dit_active == TRUE)
    1a8a:	80 91 dc 01 	lds	r24, 0x01DC
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	69 f5       	brne	.+90     	; 0x1aec <main+0x1d4>
				{
					tx_start = cur_timer + TX_ON_DELAY;
    1a92:	80 91 68 01 	lds	r24, 0x0168
    1a96:	90 91 69 01 	lds	r25, 0x0169
    1a9a:	a0 91 6a 01 	lds	r26, 0x016A
    1a9e:	b0 91 6b 01 	lds	r27, 0x016B
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	a1 1d       	adc	r26, r1
    1aa6:	b1 1d       	adc	r27, r1
    1aa8:	80 93 a8 01 	sts	0x01A8, r24
    1aac:	90 93 a9 01 	sts	0x01A9, r25
    1ab0:	a0 93 aa 01 	sts	0x01AA, r26
    1ab4:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = UINT32_MAX;
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	9f ef       	ldi	r25, 0xFF	; 255
    1abc:	dc 01       	movw	r26, r24
    1abe:	80 93 ed 01 	sts	0x01ED, r24
    1ac2:	90 93 ee 01 	sts	0x01EE, r25
    1ac6:	a0 93 ef 01 	sts	0x01EF, r26
    1aca:	b0 93 f0 01 	sts	0x01F0, r27
					cur_state_end = UINT32_MAX;
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
    1ad0:	9f ef       	ldi	r25, 0xFF	; 255
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	80 93 d4 01 	sts	0x01D4, r24
    1ad8:	90 93 d5 01 	sts	0x01D5, r25
    1adc:	a0 93 d6 01 	sts	0x01D6, r26
    1ae0:	b0 93 d7 01 	sts	0x01D7, r27
					cur_state = KEYDOWN;
    1ae4:	87 e0       	ldi	r24, 0x07	; 7
    1ae6:	80 93 c8 01 	sts	0x01C8, r24
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <main+0x1da>
				}
				else
				{
					cur_state = IDLE;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 93 c8 01 	sts	0x01C8, r24
				}
				break;
    1af2:	ab c0       	rjmp	.+342    	; 0x1c4a <main+0x332>

			case KEYDOWN:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1af4:	80 91 e2 01 	lds	r24, 0x01E2
    1af8:	90 91 e3 01 	lds	r25, 0x01E3
    1afc:	a0 91 e4 01 	lds	r26, 0x01E4
    1b00:	b0 91 e5 01 	lds	r27, 0x01E5
    1b04:	81 3b       	cpi	r24, 0xB1	; 177
    1b06:	26 ef       	ldi	r18, 0xF6	; 246
    1b08:	92 07       	cpc	r25, r18
    1b0a:	2a ed       	ldi	r18, 0xDA	; 218
    1b0c:	a2 07       	cpc	r26, r18
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	b2 07       	cpc	r27, r18
    1b12:	80 f4       	brcc	.+32     	; 0x1b34 <main+0x21c>
    1b14:	80 91 e2 01 	lds	r24, 0x01E2
    1b18:	90 91 e3 01 	lds	r25, 0x01E3
    1b1c:	a0 91 e4 01 	lds	r26, 0x01E4
    1b20:	b0 91 e5 01 	lds	r27, 0x01E5
    1b24:	80 38       	cpi	r24, 0x80	; 128
    1b26:	ef e9       	ldi	r30, 0x9F	; 159
    1b28:	9e 07       	cpc	r25, r30
    1b2a:	e5 ed       	ldi	r30, 0xD5	; 213
    1b2c:	ae 07       	cpc	r26, r30
    1b2e:	e0 e0       	ldi	r30, 0x00	; 0
    1b30:	be 07       	cpc	r27, r30
    1b32:	38 f4       	brcc	.+14     	; 0x1b42 <main+0x22a>
				{
					key_down = FALSE;
    1b34:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    1b38:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    1b3c:	10 92 3b 01 	sts	0x013B, r1
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <main+0x23c>
				}
				else
				{
					key_down = TRUE;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	80 93 3b 01 	sts	0x013B, r24
				}

				if(dit_active == FALSE)
    1b54:	80 91 dc 01 	lds	r24, 0x01DC
    1b58:	88 23       	and	r24, r24
    1b5a:	41 f5       	brne	.+80     	; 0x1bac <main+0x294>
				{
					cur_state = EXIT;
    1b5c:	8c e0       	ldi	r24, 0x0C	; 12
    1b5e:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    1b62:	80 91 68 01 	lds	r24, 0x0168
    1b66:	90 91 69 01 	lds	r25, 0x0169
    1b6a:	a0 91 6a 01 	lds	r26, 0x016A
    1b6e:	b0 91 6b 01 	lds	r27, 0x016B
    1b72:	8c 59       	subi	r24, 0x9C	; 156
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	af 4f       	sbci	r26, 0xFF	; 255
    1b78:	bf 4f       	sbci	r27, 0xFF	; 255
    1b7a:	80 93 d4 01 	sts	0x01D4, r24
    1b7e:	90 93 d5 01 	sts	0x01D5, r25
    1b82:	a0 93 d6 01 	sts	0x01D6, r26
    1b86:	b0 93 d7 01 	sts	0x01D7, r27
					tx_end = cur_timer;
    1b8a:	80 91 68 01 	lds	r24, 0x0168
    1b8e:	90 91 69 01 	lds	r25, 0x0169
    1b92:	a0 91 6a 01 	lds	r26, 0x016A
    1b96:	b0 91 6b 01 	lds	r27, 0x016B
    1b9a:	80 93 ed 01 	sts	0x01ED, r24
    1b9e:	90 93 ee 01 	sts	0x01EE, r25
    1ba2:	a0 93 ef 01 	sts	0x01EF, r26
    1ba6:	b0 93 f0 01 	sts	0x01F0, r27
    1baa:	0b c0       	rjmp	.+22     	; 0x1bc2 <main+0x2aa>
				}
				else
					tx_end = UINT32_MAX;
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	9f ef       	ldi	r25, 0xFF	; 255
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	80 93 ed 01 	sts	0x01ED, r24
    1bb6:	90 93 ee 01 	sts	0x01EE, r25
    1bba:	a0 93 ef 01 	sts	0x01EF, r26
    1bbe:	b0 93 f0 01 	sts	0x01F0, r27
				break;
    1bc2:	43 c0       	rjmp	.+134    	; 0x1c4a <main+0x332>

			case EXIT:
				key_down = FALSE;
    1bc4:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1bc8:	10 92 3a 01 	sts	0x013A, r1

				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1bcc:	80 91 e2 01 	lds	r24, 0x01E2
    1bd0:	90 91 e3 01 	lds	r25, 0x01E3
    1bd4:	a0 91 e4 01 	lds	r26, 0x01E4
    1bd8:	b0 91 e5 01 	lds	r27, 0x01E5
    1bdc:	81 3b       	cpi	r24, 0xB1	; 177
    1bde:	f6 ef       	ldi	r31, 0xF6	; 246
    1be0:	9f 07       	cpc	r25, r31
    1be2:	fa ed       	ldi	r31, 0xDA	; 218
    1be4:	af 07       	cpc	r26, r31
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	bf 07       	cpc	r27, r31
    1bea:	80 f4       	brcc	.+32     	; 0x1c0c <main+0x2f4>
    1bec:	80 91 e2 01 	lds	r24, 0x01E2
    1bf0:	90 91 e3 01 	lds	r25, 0x01E3
    1bf4:	a0 91 e4 01 	lds	r26, 0x01E4
    1bf8:	b0 91 e5 01 	lds	r27, 0x01E5
    1bfc:	80 38       	cpi	r24, 0x80	; 128
    1bfe:	2f e9       	ldi	r18, 0x9F	; 159
    1c00:	92 07       	cpc	r25, r18
    1c02:	25 ed       	ldi	r18, 0xD5	; 213
    1c04:	a2 07       	cpc	r26, r18
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	b2 07       	cpc	r27, r18
    1c0a:	18 f4       	brcc	.+6      	; 0x1c12 <main+0x2fa>
					mute_on = FALSE;
    1c0c:	10 92 3b 01 	sts	0x013B, r1
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <main+0x300>
				else
					mute_on = TRUE;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 93 3b 01 	sts	0x013B, r24

				if(cur_timer >= cur_state_end)
    1c18:	20 91 68 01 	lds	r18, 0x0168
    1c1c:	30 91 69 01 	lds	r19, 0x0169
    1c20:	40 91 6a 01 	lds	r20, 0x016A
    1c24:	50 91 6b 01 	lds	r21, 0x016B
    1c28:	80 91 d4 01 	lds	r24, 0x01D4
    1c2c:	90 91 d5 01 	lds	r25, 0x01D5
    1c30:	a0 91 d6 01 	lds	r26, 0x01D6
    1c34:	b0 91 d7 01 	lds	r27, 0x01D7
    1c38:	28 17       	cp	r18, r24
    1c3a:	39 07       	cpc	r19, r25
    1c3c:	4a 07       	cpc	r20, r26
    1c3e:	5b 07       	cpc	r21, r27
    1c40:	18 f0       	brcs	.+6      	; 0x1c48 <main+0x330>
					cur_state = IDLE;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	80 93 c8 01 	sts	0x01C8, r24
				break;
    1c48:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    1c4a:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <main+0x1a30>

		case KEYER:
			default_mode = KEYER;
    1c4e:	10 92 6d 01 	sts	0x016D, r1
			poll_buttons();
    1c52:	0e 94 0d 08 	call	0x101a	; 0x101a <poll_buttons>

			// Handle KEYER state conditions
			switch(cur_state)
    1c56:	80 91 c8 01 	lds	r24, 0x01C8
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	83 30       	cpi	r24, 0x03	; 3
    1c60:	91 05       	cpc	r25, r1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <main+0x34e>
    1c64:	16 c2       	rjmp	.+1068   	; 0x2092 <main+0x77a>
    1c66:	84 30       	cpi	r24, 0x04	; 4
    1c68:	91 05       	cpc	r25, r1
    1c6a:	44 f4       	brge	.+16     	; 0x1c7c <main+0x364>
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	91 05       	cpc	r25, r1
    1c70:	71 f0       	breq	.+28     	; 0x1c8e <main+0x376>
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	91 05       	cpc	r25, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <main+0x362>
    1c78:	75 c1       	rjmp	.+746    	; 0x1f64 <main+0x64c>
    1c7a:	17 c4       	rjmp	.+2094   	; 0x24aa <main+0xb92>
    1c7c:	84 30       	cpi	r24, 0x04	; 4
    1c7e:	91 05       	cpc	r25, r1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <main+0x36c>
    1c82:	9e c2       	rjmp	.+1340   	; 0x21c0 <main+0x8a8>
    1c84:	8c 30       	cpi	r24, 0x0C	; 12
    1c86:	91 05       	cpc	r25, r1
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <main+0x374>
    1c8a:	dc c3       	rjmp	.+1976   	; 0x2444 <main+0xb2c>
    1c8c:	0e c4       	rjmp	.+2076   	; 0x24aa <main+0xb92>
			{
			case IDLE:
				key_down = FALSE;
    1c8e:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    1c92:	10 92 3a 01 	sts	0x013A, r1
				mute_on = FALSE;
    1c96:	10 92 3b 01 	sts	0x013B, r1
				mute_end = cur_timer;
    1c9a:	80 91 68 01 	lds	r24, 0x0168
    1c9e:	90 91 69 01 	lds	r25, 0x0169
    1ca2:	a0 91 6a 01 	lds	r26, 0x016A
    1ca6:	b0 91 6b 01 	lds	r27, 0x016B
    1caa:	80 93 d8 01 	sts	0x01D8, r24
    1cae:	90 93 d9 01 	sts	0x01D9, r25
    1cb2:	a0 93 da 01 	sts	0x01DA, r26
    1cb6:	b0 93 db 01 	sts	0x01DB, r27

				// Dit paddle only
				if((dit_active == TRUE) && (dah_active == FALSE))
    1cba:	80 91 dc 01 	lds	r24, 0x01DC
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <main+0x3ac>
    1cc2:	68 c0       	rjmp	.+208    	; 0x1d94 <main+0x47c>
    1cc4:	80 91 c0 01 	lds	r24, 0x01C0
    1cc8:	88 23       	and	r24, r24
    1cca:	09 f0       	breq	.+2      	; 0x1cce <main+0x3b6>
    1ccc:	63 c0       	rjmp	.+198    	; 0x1d94 <main+0x47c>
				{
					prev_state = IDLE;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	80 93 72 01 	sts	0x0172, r24
					cur_state = DIT;
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	80 93 c8 01 	sts	0x01C8, r24
					next_state = IDLE;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + dit_length;
    1ce0:	80 91 73 01 	lds	r24, 0x0173
    1ce4:	90 91 74 01 	lds	r25, 0x0174
    1ce8:	9c 01       	movw	r18, r24
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	80 91 68 01 	lds	r24, 0x0168
    1cf2:	90 91 69 01 	lds	r25, 0x0169
    1cf6:	a0 91 6a 01 	lds	r26, 0x016A
    1cfa:	b0 91 6b 01 	lds	r27, 0x016B
    1cfe:	82 0f       	add	r24, r18
    1d00:	93 1f       	adc	r25, r19
    1d02:	a4 1f       	adc	r26, r20
    1d04:	b5 1f       	adc	r27, r21
    1d06:	80 93 d4 01 	sts	0x01D4, r24
    1d0a:	90 93 d5 01 	sts	0x01D5, r25
    1d0e:	a0 93 d6 01 	sts	0x01D6, r26
    1d12:	b0 93 d7 01 	sts	0x01D7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1d16:	80 91 68 01 	lds	r24, 0x0168
    1d1a:	90 91 69 01 	lds	r25, 0x0169
    1d1e:	a0 91 6a 01 	lds	r26, 0x016A
    1d22:	b0 91 6b 01 	lds	r27, 0x016B
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	a1 1d       	adc	r26, r1
    1d2a:	b1 1d       	adc	r27, r1
    1d2c:	80 93 a8 01 	sts	0x01A8, r24
    1d30:	90 93 a9 01 	sts	0x01A9, r25
    1d34:	a0 93 aa 01 	sts	0x01AA, r26
    1d38:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1d3c:	80 91 d4 01 	lds	r24, 0x01D4
    1d40:	90 91 d5 01 	lds	r25, 0x01D5
    1d44:	a0 91 d6 01 	lds	r26, 0x01D6
    1d48:	b0 91 d7 01 	lds	r27, 0x01D7
    1d4c:	80 93 ed 01 	sts	0x01ED, r24
    1d50:	90 93 ee 01 	sts	0x01EE, r25
    1d54:	a0 93 ef 01 	sts	0x01EF, r26
    1d58:	b0 93 f0 01 	sts	0x01F0, r27
					mute_start = cur_timer;
    1d5c:	80 91 68 01 	lds	r24, 0x0168
    1d60:	90 91 69 01 	lds	r25, 0x0169
    1d64:	a0 91 6a 01 	lds	r26, 0x016A
    1d68:	b0 91 6b 01 	lds	r27, 0x016B
    1d6c:	80 93 e7 01 	sts	0x01E7, r24
    1d70:	90 93 e8 01 	sts	0x01E8, r25
    1d74:	a0 93 e9 01 	sts	0x01E9, r26
    1d78:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = UINT32_MAX;
    1d7c:	8f ef       	ldi	r24, 0xFF	; 255
    1d7e:	9f ef       	ldi	r25, 0xFF	; 255
    1d80:	dc 01       	movw	r26, r24
    1d82:	80 93 d8 01 	sts	0x01D8, r24
    1d86:	90 93 d9 01 	sts	0x01D9, r25
    1d8a:	a0 93 da 01 	sts	0x01DA, r26
    1d8e:	b0 93 db 01 	sts	0x01DB, r27
    1d92:	e7 c0       	rjmp	.+462    	; 0x1f62 <main+0x64a>
				}
				// Dah paddle only
				else if((dah_active == TRUE) && (dit_active == FALSE))
    1d94:	80 91 c0 01 	lds	r24, 0x01C0
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <main+0x486>
    1d9c:	6d c0       	rjmp	.+218    	; 0x1e78 <main+0x560>
    1d9e:	80 91 dc 01 	lds	r24, 0x01DC
    1da2:	88 23       	and	r24, r24
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <main+0x490>
    1da6:	68 c0       	rjmp	.+208    	; 0x1e78 <main+0x560>
				{
					prev_state = IDLE;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	80 93 72 01 	sts	0x0172, r24
					cur_state = DAH;
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	80 93 c8 01 	sts	0x01C8, r24
					next_state = IDLE;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + (dit_length * 3);
    1dba:	20 91 73 01 	lds	r18, 0x0173
    1dbe:	30 91 74 01 	lds	r19, 0x0174
    1dc2:	c9 01       	movw	r24, r18
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	82 0f       	add	r24, r18
    1dca:	93 1f       	adc	r25, r19
    1dcc:	9c 01       	movw	r18, r24
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	80 91 68 01 	lds	r24, 0x0168
    1dd6:	90 91 69 01 	lds	r25, 0x0169
    1dda:	a0 91 6a 01 	lds	r26, 0x016A
    1dde:	b0 91 6b 01 	lds	r27, 0x016B
    1de2:	82 0f       	add	r24, r18
    1de4:	93 1f       	adc	r25, r19
    1de6:	a4 1f       	adc	r26, r20
    1de8:	b5 1f       	adc	r27, r21
    1dea:	80 93 d4 01 	sts	0x01D4, r24
    1dee:	90 93 d5 01 	sts	0x01D5, r25
    1df2:	a0 93 d6 01 	sts	0x01D6, r26
    1df6:	b0 93 d7 01 	sts	0x01D7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1dfa:	80 91 68 01 	lds	r24, 0x0168
    1dfe:	90 91 69 01 	lds	r25, 0x0169
    1e02:	a0 91 6a 01 	lds	r26, 0x016A
    1e06:	b0 91 6b 01 	lds	r27, 0x016B
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	a1 1d       	adc	r26, r1
    1e0e:	b1 1d       	adc	r27, r1
    1e10:	80 93 a8 01 	sts	0x01A8, r24
    1e14:	90 93 a9 01 	sts	0x01A9, r25
    1e18:	a0 93 aa 01 	sts	0x01AA, r26
    1e1c:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1e20:	80 91 d4 01 	lds	r24, 0x01D4
    1e24:	90 91 d5 01 	lds	r25, 0x01D5
    1e28:	a0 91 d6 01 	lds	r26, 0x01D6
    1e2c:	b0 91 d7 01 	lds	r27, 0x01D7
    1e30:	80 93 ed 01 	sts	0x01ED, r24
    1e34:	90 93 ee 01 	sts	0x01EE, r25
    1e38:	a0 93 ef 01 	sts	0x01EF, r26
    1e3c:	b0 93 f0 01 	sts	0x01F0, r27
					mute_start = cur_timer;
    1e40:	80 91 68 01 	lds	r24, 0x0168
    1e44:	90 91 69 01 	lds	r25, 0x0169
    1e48:	a0 91 6a 01 	lds	r26, 0x016A
    1e4c:	b0 91 6b 01 	lds	r27, 0x016B
    1e50:	80 93 e7 01 	sts	0x01E7, r24
    1e54:	90 93 e8 01 	sts	0x01E8, r25
    1e58:	a0 93 e9 01 	sts	0x01E9, r26
    1e5c:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = UINT32_MAX;
    1e60:	8f ef       	ldi	r24, 0xFF	; 255
    1e62:	9f ef       	ldi	r25, 0xFF	; 255
    1e64:	dc 01       	movw	r26, r24
    1e66:	80 93 d8 01 	sts	0x01D8, r24
    1e6a:	90 93 d9 01 	sts	0x01D9, r25
    1e6e:	a0 93 da 01 	sts	0x01DA, r26
    1e72:	b0 93 db 01 	sts	0x01DB, r27
    1e76:	75 c0       	rjmp	.+234    	; 0x1f62 <main+0x64a>
				}
				// Dit and dah paddle at same time (rare case)
				else if((dit_active == TRUE) && (dah_active == TRUE) && (next_state == IDLE))
    1e78:	80 91 dc 01 	lds	r24, 0x01DC
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <main+0x56a>
    1e80:	6d c0       	rjmp	.+218    	; 0x1f5c <main+0x644>
    1e82:	80 91 c0 01 	lds	r24, 0x01C0
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <main+0x574>
    1e8a:	68 c0       	rjmp	.+208    	; 0x1f5c <main+0x644>
    1e8c:	80 91 a7 01 	lds	r24, 0x01A7
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <main+0x57e>
    1e94:	63 c0       	rjmp	.+198    	; 0x1f5c <main+0x644>
				{
					prev_state = IDLE;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	80 93 72 01 	sts	0x0172, r24
					cur_state = DIT;
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	80 93 c8 01 	sts	0x01C8, r24
					next_state = DAH;
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	80 93 a7 01 	sts	0x01A7, r24
					cur_state_end = cur_timer + dit_length;
    1ea8:	80 91 73 01 	lds	r24, 0x0173
    1eac:	90 91 74 01 	lds	r25, 0x0174
    1eb0:	9c 01       	movw	r18, r24
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	80 91 68 01 	lds	r24, 0x0168
    1eba:	90 91 69 01 	lds	r25, 0x0169
    1ebe:	a0 91 6a 01 	lds	r26, 0x016A
    1ec2:	b0 91 6b 01 	lds	r27, 0x016B
    1ec6:	82 0f       	add	r24, r18
    1ec8:	93 1f       	adc	r25, r19
    1eca:	a4 1f       	adc	r26, r20
    1ecc:	b5 1f       	adc	r27, r21
    1ece:	80 93 d4 01 	sts	0x01D4, r24
    1ed2:	90 93 d5 01 	sts	0x01D5, r25
    1ed6:	a0 93 d6 01 	sts	0x01D6, r26
    1eda:	b0 93 d7 01 	sts	0x01D7, r27
					tx_start = cur_timer + TX_ON_DELAY;
    1ede:	80 91 68 01 	lds	r24, 0x0168
    1ee2:	90 91 69 01 	lds	r25, 0x0169
    1ee6:	a0 91 6a 01 	lds	r26, 0x016A
    1eea:	b0 91 6b 01 	lds	r27, 0x016B
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	a1 1d       	adc	r26, r1
    1ef2:	b1 1d       	adc	r27, r1
    1ef4:	80 93 a8 01 	sts	0x01A8, r24
    1ef8:	90 93 a9 01 	sts	0x01A9, r25
    1efc:	a0 93 aa 01 	sts	0x01AA, r26
    1f00:	b0 93 ab 01 	sts	0x01AB, r27
					tx_end = cur_state_end;
    1f04:	80 91 d4 01 	lds	r24, 0x01D4
    1f08:	90 91 d5 01 	lds	r25, 0x01D5
    1f0c:	a0 91 d6 01 	lds	r26, 0x01D6
    1f10:	b0 91 d7 01 	lds	r27, 0x01D7
    1f14:	80 93 ed 01 	sts	0x01ED, r24
    1f18:	90 93 ee 01 	sts	0x01EE, r25
    1f1c:	a0 93 ef 01 	sts	0x01EF, r26
    1f20:	b0 93 f0 01 	sts	0x01F0, r27
					mute_start = cur_timer;
    1f24:	80 91 68 01 	lds	r24, 0x0168
    1f28:	90 91 69 01 	lds	r25, 0x0169
    1f2c:	a0 91 6a 01 	lds	r26, 0x016A
    1f30:	b0 91 6b 01 	lds	r27, 0x016B
    1f34:	80 93 e7 01 	sts	0x01E7, r24
    1f38:	90 93 e8 01 	sts	0x01E8, r25
    1f3c:	a0 93 e9 01 	sts	0x01E9, r26
    1f40:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = UINT32_MAX;
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	dc 01       	movw	r26, r24
    1f4a:	80 93 d8 01 	sts	0x01D8, r24
    1f4e:	90 93 d9 01 	sts	0x01D9, r25
    1f52:	a0 93 da 01 	sts	0x01DA, r26
    1f56:	b0 93 db 01 	sts	0x01DB, r27
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <main+0x64a>
				}
				else
				{
					cur_state = IDLE;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	80 93 c8 01 	sts	0x01C8, r24
				}

				break;
    1f62:	a4 c2       	rjmp	.+1352   	; 0x24ac <main+0xb94>

			case DIT:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    1f64:	80 91 e2 01 	lds	r24, 0x01E2
    1f68:	90 91 e3 01 	lds	r25, 0x01E3
    1f6c:	a0 91 e4 01 	lds	r26, 0x01E4
    1f70:	b0 91 e5 01 	lds	r27, 0x01E5
    1f74:	81 3b       	cpi	r24, 0xB1	; 177
    1f76:	e6 ef       	ldi	r30, 0xF6	; 246
    1f78:	9e 07       	cpc	r25, r30
    1f7a:	ea ed       	ldi	r30, 0xDA	; 218
    1f7c:	ae 07       	cpc	r26, r30
    1f7e:	e0 e0       	ldi	r30, 0x00	; 0
    1f80:	be 07       	cpc	r27, r30
    1f82:	80 f4       	brcc	.+32     	; 0x1fa4 <main+0x68c>
    1f84:	80 91 e2 01 	lds	r24, 0x01E2
    1f88:	90 91 e3 01 	lds	r25, 0x01E3
    1f8c:	a0 91 e4 01 	lds	r26, 0x01E4
    1f90:	b0 91 e5 01 	lds	r27, 0x01E5
    1f94:	80 38       	cpi	r24, 0x80	; 128
    1f96:	ff e9       	ldi	r31, 0x9F	; 159
    1f98:	9f 07       	cpc	r25, r31
    1f9a:	f5 ed       	ldi	r31, 0xD5	; 213
    1f9c:	af 07       	cpc	r26, r31
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	bf 07       	cpc	r27, r31
    1fa2:	38 f4       	brcc	.+14     	; 0x1fb2 <main+0x69a>
				{
					key_down = FALSE;
    1fa4:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    1fa8:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    1fac:	10 92 3b 01 	sts	0x013B, r1
    1fb0:	09 c0       	rjmp	.+18     	; 0x1fc4 <main+0x6ac>
				}
				else
				{
					key_down = TRUE;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	80 93 3b 01 	sts	0x013B, r24
				}

				if(cur_timer > cur_state_end)
    1fc4:	20 91 68 01 	lds	r18, 0x0168
    1fc8:	30 91 69 01 	lds	r19, 0x0169
    1fcc:	40 91 6a 01 	lds	r20, 0x016A
    1fd0:	50 91 6b 01 	lds	r21, 0x016B
    1fd4:	80 91 d4 01 	lds	r24, 0x01D4
    1fd8:	90 91 d5 01 	lds	r25, 0x01D5
    1fdc:	a0 91 d6 01 	lds	r26, 0x01D6
    1fe0:	b0 91 d7 01 	lds	r27, 0x01D7
    1fe4:	82 17       	cp	r24, r18
    1fe6:	93 07       	cpc	r25, r19
    1fe8:	a4 07       	cpc	r26, r20
    1fea:	b5 07       	cpc	r27, r21
    1fec:	08 f0       	brcs	.+2      	; 0x1ff0 <main+0x6d8>
    1fee:	45 c0       	rjmp	.+138    	; 0x207a <main+0x762>
				{
					prev_state = DIT;
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	80 93 72 01 	sts	0x0172, r24
					cur_state = DITDELAY;
    1ff6:	84 e0       	ldi	r24, 0x04	; 4
    1ff8:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = cur_timer + dit_length;
    1ffc:	80 91 73 01 	lds	r24, 0x0173
    2000:	90 91 74 01 	lds	r25, 0x0174
    2004:	9c 01       	movw	r18, r24
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	80 91 68 01 	lds	r24, 0x0168
    200e:	90 91 69 01 	lds	r25, 0x0169
    2012:	a0 91 6a 01 	lds	r26, 0x016A
    2016:	b0 91 6b 01 	lds	r27, 0x016B
    201a:	82 0f       	add	r24, r18
    201c:	93 1f       	adc	r25, r19
    201e:	a4 1f       	adc	r26, r20
    2020:	b5 1f       	adc	r27, r21
    2022:	80 93 d4 01 	sts	0x01D4, r24
    2026:	90 93 d5 01 	sts	0x01D5, r25
    202a:	a0 93 d6 01 	sts	0x01D6, r26
    202e:	b0 93 d7 01 	sts	0x01D7, r27
					mute_start = cur_timer;
    2032:	80 91 68 01 	lds	r24, 0x0168
    2036:	90 91 69 01 	lds	r25, 0x0169
    203a:	a0 91 6a 01 	lds	r26, 0x016A
    203e:	b0 91 6b 01 	lds	r27, 0x016B
    2042:	80 93 e7 01 	sts	0x01E7, r24
    2046:	90 93 e8 01 	sts	0x01E8, r25
    204a:	a0 93 e9 01 	sts	0x01E9, r26
    204e:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    2052:	80 91 d4 01 	lds	r24, 0x01D4
    2056:	90 91 d5 01 	lds	r25, 0x01D5
    205a:	a0 91 d6 01 	lds	r26, 0x01D6
    205e:	b0 91 d7 01 	lds	r27, 0x01D7
    2062:	8c 59       	subi	r24, 0x9C	; 156
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	af 4f       	sbci	r26, 0xFF	; 255
    2068:	bf 4f       	sbci	r27, 0xFF	; 255
    206a:	80 93 d8 01 	sts	0x01D8, r24
    206e:	90 93 d9 01 	sts	0x01D9, r25
    2072:	a0 93 da 01 	sts	0x01DA, r26
    2076:	b0 93 db 01 	sts	0x01DB, r27
				}

				if((dah_active == TRUE) && (next_state == IDLE))
    207a:	80 91 c0 01 	lds	r24, 0x01C0
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	39 f4       	brne	.+14     	; 0x2090 <main+0x778>
    2082:	80 91 a7 01 	lds	r24, 0x01A7
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	19 f4       	brne	.+6      	; 0x2090 <main+0x778>
					next_state = DAH;
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	80 93 a7 01 	sts	0x01A7, r24

				break;
    2090:	0d c2       	rjmp	.+1050   	; 0x24ac <main+0xb94>

			case DAH:
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    2092:	80 91 e2 01 	lds	r24, 0x01E2
    2096:	90 91 e3 01 	lds	r25, 0x01E3
    209a:	a0 91 e4 01 	lds	r26, 0x01E4
    209e:	b0 91 e5 01 	lds	r27, 0x01E5
    20a2:	81 3b       	cpi	r24, 0xB1	; 177
    20a4:	26 ef       	ldi	r18, 0xF6	; 246
    20a6:	92 07       	cpc	r25, r18
    20a8:	2a ed       	ldi	r18, 0xDA	; 218
    20aa:	a2 07       	cpc	r26, r18
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	b2 07       	cpc	r27, r18
    20b0:	80 f4       	brcc	.+32     	; 0x20d2 <main+0x7ba>
    20b2:	80 91 e2 01 	lds	r24, 0x01E2
    20b6:	90 91 e3 01 	lds	r25, 0x01E3
    20ba:	a0 91 e4 01 	lds	r26, 0x01E4
    20be:	b0 91 e5 01 	lds	r27, 0x01E5
    20c2:	80 38       	cpi	r24, 0x80	; 128
    20c4:	ef e9       	ldi	r30, 0x9F	; 159
    20c6:	9e 07       	cpc	r25, r30
    20c8:	e5 ed       	ldi	r30, 0xD5	; 213
    20ca:	ae 07       	cpc	r26, r30
    20cc:	e0 e0       	ldi	r30, 0x00	; 0
    20ce:	be 07       	cpc	r27, r30
    20d0:	38 f4       	brcc	.+14     	; 0x20e0 <main+0x7c8>
				{
					key_down = FALSE;
    20d2:	10 92 3c 01 	sts	0x013C, r1
					sidetone_on = FALSE;
    20d6:	10 92 3a 01 	sts	0x013A, r1
					mute_on = FALSE;
    20da:	10 92 3b 01 	sts	0x013B, r1
    20de:	09 c0       	rjmp	.+18     	; 0x20f2 <main+0x7da>
				}
				else
				{
					key_down = TRUE;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	80 93 3c 01 	sts	0x013C, r24
					sidetone_on = TRUE;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	80 93 3a 01 	sts	0x013A, r24
					mute_on = TRUE;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	80 93 3b 01 	sts	0x013B, r24
				}

				if(cur_timer > cur_state_end)
    20f2:	20 91 68 01 	lds	r18, 0x0168
    20f6:	30 91 69 01 	lds	r19, 0x0169
    20fa:	40 91 6a 01 	lds	r20, 0x016A
    20fe:	50 91 6b 01 	lds	r21, 0x016B
    2102:	80 91 d4 01 	lds	r24, 0x01D4
    2106:	90 91 d5 01 	lds	r25, 0x01D5
    210a:	a0 91 d6 01 	lds	r26, 0x01D6
    210e:	b0 91 d7 01 	lds	r27, 0x01D7
    2112:	82 17       	cp	r24, r18
    2114:	93 07       	cpc	r25, r19
    2116:	a4 07       	cpc	r26, r20
    2118:	b5 07       	cpc	r27, r21
    211a:	08 f0       	brcs	.+2      	; 0x211e <main+0x806>
    211c:	45 c0       	rjmp	.+138    	; 0x21a8 <main+0x890>
				{
					prev_state = DAH;
    211e:	83 e0       	ldi	r24, 0x03	; 3
    2120:	80 93 72 01 	sts	0x0172, r24
					cur_state = DITDELAY;
    2124:	84 e0       	ldi	r24, 0x04	; 4
    2126:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = cur_timer + dit_length;
    212a:	80 91 73 01 	lds	r24, 0x0173
    212e:	90 91 74 01 	lds	r25, 0x0174
    2132:	9c 01       	movw	r18, r24
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	80 91 68 01 	lds	r24, 0x0168
    213c:	90 91 69 01 	lds	r25, 0x0169
    2140:	a0 91 6a 01 	lds	r26, 0x016A
    2144:	b0 91 6b 01 	lds	r27, 0x016B
    2148:	82 0f       	add	r24, r18
    214a:	93 1f       	adc	r25, r19
    214c:	a4 1f       	adc	r26, r20
    214e:	b5 1f       	adc	r27, r21
    2150:	80 93 d4 01 	sts	0x01D4, r24
    2154:	90 93 d5 01 	sts	0x01D5, r25
    2158:	a0 93 d6 01 	sts	0x01D6, r26
    215c:	b0 93 d7 01 	sts	0x01D7, r27
					mute_start = cur_timer;
    2160:	80 91 68 01 	lds	r24, 0x0168
    2164:	90 91 69 01 	lds	r25, 0x0169
    2168:	a0 91 6a 01 	lds	r26, 0x016A
    216c:	b0 91 6b 01 	lds	r27, 0x016B
    2170:	80 93 e7 01 	sts	0x01E7, r24
    2174:	90 93 e8 01 	sts	0x01E8, r25
    2178:	a0 93 e9 01 	sts	0x01E9, r26
    217c:	b0 93 ea 01 	sts	0x01EA, r27
					mute_end = cur_state_end + MUTE_OFF_DELAY;
    2180:	80 91 d4 01 	lds	r24, 0x01D4
    2184:	90 91 d5 01 	lds	r25, 0x01D5
    2188:	a0 91 d6 01 	lds	r26, 0x01D6
    218c:	b0 91 d7 01 	lds	r27, 0x01D7
    2190:	8c 59       	subi	r24, 0x9C	; 156
    2192:	9f 4f       	sbci	r25, 0xFF	; 255
    2194:	af 4f       	sbci	r26, 0xFF	; 255
    2196:	bf 4f       	sbci	r27, 0xFF	; 255
    2198:	80 93 d8 01 	sts	0x01D8, r24
    219c:	90 93 d9 01 	sts	0x01D9, r25
    21a0:	a0 93 da 01 	sts	0x01DA, r26
    21a4:	b0 93 db 01 	sts	0x01DB, r27
				}

				if((dit_active == TRUE) && (next_state == IDLE))
    21a8:	80 91 dc 01 	lds	r24, 0x01DC
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	39 f4       	brne	.+14     	; 0x21be <main+0x8a6>
    21b0:	80 91 a7 01 	lds	r24, 0x01A7
    21b4:	81 30       	cpi	r24, 0x01	; 1
    21b6:	19 f4       	brne	.+6      	; 0x21be <main+0x8a6>
					next_state = DIT;
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	80 93 a7 01 	sts	0x01A7, r24

				break;
    21be:	76 c1       	rjmp	.+748    	; 0x24ac <main+0xb94>

			case DITDELAY:
				if(cur_timer > cur_state_end)
    21c0:	20 91 68 01 	lds	r18, 0x0168
    21c4:	30 91 69 01 	lds	r19, 0x0169
    21c8:	40 91 6a 01 	lds	r20, 0x016A
    21cc:	50 91 6b 01 	lds	r21, 0x016B
    21d0:	80 91 d4 01 	lds	r24, 0x01D4
    21d4:	90 91 d5 01 	lds	r25, 0x01D5
    21d8:	a0 91 d6 01 	lds	r26, 0x01D6
    21dc:	b0 91 d7 01 	lds	r27, 0x01D7
    21e0:	82 17       	cp	r24, r18
    21e2:	93 07       	cpc	r25, r19
    21e4:	a4 07       	cpc	r26, r20
    21e6:	b5 07       	cpc	r27, r21
    21e8:	08 f0       	brcs	.+2      	; 0x21ec <main+0x8d4>
    21ea:	e2 c0       	rjmp	.+452    	; 0x23b0 <main+0xa98>
				{
					if(next_state == DIT)
    21ec:	80 91 a7 01 	lds	r24, 0x01A7
    21f0:	82 30       	cpi	r24, 0x02	; 2
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <main+0x8de>
    21f4:	5d c0       	rjmp	.+186    	; 0x22b0 <main+0x998>
					{
						cur_state = DIT;
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	80 93 c8 01 	sts	0x01C8, r24
						cur_state_end = cur_timer + dit_length;
    21fc:	80 91 73 01 	lds	r24, 0x0173
    2200:	90 91 74 01 	lds	r25, 0x0174
    2204:	9c 01       	movw	r18, r24
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	80 91 68 01 	lds	r24, 0x0168
    220e:	90 91 69 01 	lds	r25, 0x0169
    2212:	a0 91 6a 01 	lds	r26, 0x016A
    2216:	b0 91 6b 01 	lds	r27, 0x016B
    221a:	82 0f       	add	r24, r18
    221c:	93 1f       	adc	r25, r19
    221e:	a4 1f       	adc	r26, r20
    2220:	b5 1f       	adc	r27, r21
    2222:	80 93 d4 01 	sts	0x01D4, r24
    2226:	90 93 d5 01 	sts	0x01D5, r25
    222a:	a0 93 d6 01 	sts	0x01D6, r26
    222e:	b0 93 d7 01 	sts	0x01D7, r27
						tx_start = cur_timer + TX_ON_DELAY;
    2232:	80 91 68 01 	lds	r24, 0x0168
    2236:	90 91 69 01 	lds	r25, 0x0169
    223a:	a0 91 6a 01 	lds	r26, 0x016A
    223e:	b0 91 6b 01 	lds	r27, 0x016B
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	a1 1d       	adc	r26, r1
    2246:	b1 1d       	adc	r27, r1
    2248:	80 93 a8 01 	sts	0x01A8, r24
    224c:	90 93 a9 01 	sts	0x01A9, r25
    2250:	a0 93 aa 01 	sts	0x01AA, r26
    2254:	b0 93 ab 01 	sts	0x01AB, r27
						tx_end = cur_state_end;
    2258:	80 91 d4 01 	lds	r24, 0x01D4
    225c:	90 91 d5 01 	lds	r25, 0x01D5
    2260:	a0 91 d6 01 	lds	r26, 0x01D6
    2264:	b0 91 d7 01 	lds	r27, 0x01D7
    2268:	80 93 ed 01 	sts	0x01ED, r24
    226c:	90 93 ee 01 	sts	0x01EE, r25
    2270:	a0 93 ef 01 	sts	0x01EF, r26
    2274:	b0 93 f0 01 	sts	0x01F0, r27
						mute_start = cur_timer;
    2278:	80 91 68 01 	lds	r24, 0x0168
    227c:	90 91 69 01 	lds	r25, 0x0169
    2280:	a0 91 6a 01 	lds	r26, 0x016A
    2284:	b0 91 6b 01 	lds	r27, 0x016B
    2288:	80 93 e7 01 	sts	0x01E7, r24
    228c:	90 93 e8 01 	sts	0x01E8, r25
    2290:	a0 93 e9 01 	sts	0x01E9, r26
    2294:	b0 93 ea 01 	sts	0x01EA, r27
						mute_end = UINT32_MAX;
    2298:	8f ef       	ldi	r24, 0xFF	; 255
    229a:	9f ef       	ldi	r25, 0xFF	; 255
    229c:	dc 01       	movw	r26, r24
    229e:	80 93 d8 01 	sts	0x01D8, r24
    22a2:	90 93 d9 01 	sts	0x01D9, r25
    22a6:	a0 93 da 01 	sts	0x01DA, r26
    22aa:	b0 93 db 01 	sts	0x01DB, r27
    22ae:	7a c0       	rjmp	.+244    	; 0x23a4 <main+0xa8c>
					}
					else if(next_state == DAH)
    22b0:	80 91 a7 01 	lds	r24, 0x01A7
    22b4:	83 30       	cpi	r24, 0x03	; 3
    22b6:	09 f0       	breq	.+2      	; 0x22ba <main+0x9a2>
    22b8:	62 c0       	rjmp	.+196    	; 0x237e <main+0xa66>
					{
						cur_state = DAH;
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	80 93 c8 01 	sts	0x01C8, r24
						cur_state_end = cur_timer + (dit_length * 3);
    22c0:	20 91 73 01 	lds	r18, 0x0173
    22c4:	30 91 74 01 	lds	r19, 0x0174
    22c8:	c9 01       	movw	r24, r18
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	82 0f       	add	r24, r18
    22d0:	93 1f       	adc	r25, r19
    22d2:	9c 01       	movw	r18, r24
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	80 91 68 01 	lds	r24, 0x0168
    22dc:	90 91 69 01 	lds	r25, 0x0169
    22e0:	a0 91 6a 01 	lds	r26, 0x016A
    22e4:	b0 91 6b 01 	lds	r27, 0x016B
    22e8:	82 0f       	add	r24, r18
    22ea:	93 1f       	adc	r25, r19
    22ec:	a4 1f       	adc	r26, r20
    22ee:	b5 1f       	adc	r27, r21
    22f0:	80 93 d4 01 	sts	0x01D4, r24
    22f4:	90 93 d5 01 	sts	0x01D5, r25
    22f8:	a0 93 d6 01 	sts	0x01D6, r26
    22fc:	b0 93 d7 01 	sts	0x01D7, r27
						tx_start = cur_timer + TX_ON_DELAY;
    2300:	80 91 68 01 	lds	r24, 0x0168
    2304:	90 91 69 01 	lds	r25, 0x0169
    2308:	a0 91 6a 01 	lds	r26, 0x016A
    230c:	b0 91 6b 01 	lds	r27, 0x016B
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	a1 1d       	adc	r26, r1
    2314:	b1 1d       	adc	r27, r1
    2316:	80 93 a8 01 	sts	0x01A8, r24
    231a:	90 93 a9 01 	sts	0x01A9, r25
    231e:	a0 93 aa 01 	sts	0x01AA, r26
    2322:	b0 93 ab 01 	sts	0x01AB, r27
						tx_end = cur_state_end;
    2326:	80 91 d4 01 	lds	r24, 0x01D4
    232a:	90 91 d5 01 	lds	r25, 0x01D5
    232e:	a0 91 d6 01 	lds	r26, 0x01D6
    2332:	b0 91 d7 01 	lds	r27, 0x01D7
    2336:	80 93 ed 01 	sts	0x01ED, r24
    233a:	90 93 ee 01 	sts	0x01EE, r25
    233e:	a0 93 ef 01 	sts	0x01EF, r26
    2342:	b0 93 f0 01 	sts	0x01F0, r27
						mute_start = cur_timer;
    2346:	80 91 68 01 	lds	r24, 0x0168
    234a:	90 91 69 01 	lds	r25, 0x0169
    234e:	a0 91 6a 01 	lds	r26, 0x016A
    2352:	b0 91 6b 01 	lds	r27, 0x016B
    2356:	80 93 e7 01 	sts	0x01E7, r24
    235a:	90 93 e8 01 	sts	0x01E8, r25
    235e:	a0 93 e9 01 	sts	0x01E9, r26
    2362:	b0 93 ea 01 	sts	0x01EA, r27
						mute_end = UINT32_MAX;
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	9f ef       	ldi	r25, 0xFF	; 255
    236a:	dc 01       	movw	r26, r24
    236c:	80 93 d8 01 	sts	0x01D8, r24
    2370:	90 93 d9 01 	sts	0x01D9, r25
    2374:	a0 93 da 01 	sts	0x01DA, r26
    2378:	b0 93 db 01 	sts	0x01DB, r27
    237c:	13 c0       	rjmp	.+38     	; 0x23a4 <main+0xa8c>
					}
					else
					{
						cur_state = IDLE;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	80 93 c8 01 	sts	0x01C8, r24
						cur_state_end = cur_timer;
    2384:	80 91 68 01 	lds	r24, 0x0168
    2388:	90 91 69 01 	lds	r25, 0x0169
    238c:	a0 91 6a 01 	lds	r26, 0x016A
    2390:	b0 91 6b 01 	lds	r27, 0x016B
    2394:	80 93 d4 01 	sts	0x01D4, r24
    2398:	90 93 d5 01 	sts	0x01D5, r25
    239c:	a0 93 d6 01 	sts	0x01D6, r26
    23a0:	b0 93 d7 01 	sts	0x01D7, r27
					}

					prev_state = DITDELAY;
    23a4:	84 e0       	ldi	r24, 0x04	; 4
    23a6:	80 93 72 01 	sts	0x0172, r24
					next_state = IDLE;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	80 93 a7 01 	sts	0x01A7, r24
				}

				if((dit_active == TRUE) && (prev_state == DAH) && (next_state == IDLE))
    23b0:	80 91 dc 01 	lds	r24, 0x01DC
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	61 f4       	brne	.+24     	; 0x23d0 <main+0xab8>
    23b8:	80 91 72 01 	lds	r24, 0x0172
    23bc:	83 30       	cpi	r24, 0x03	; 3
    23be:	41 f4       	brne	.+16     	; 0x23d0 <main+0xab8>
    23c0:	80 91 a7 01 	lds	r24, 0x01A7
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	21 f4       	brne	.+8      	; 0x23d0 <main+0xab8>
					next_state = DIT;
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	80 93 a7 01 	sts	0x01A7, r24
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <main+0xad6>
				else if((dah_active == TRUE) && (prev_state == DIT) && (next_state == IDLE))
    23d0:	80 91 c0 01 	lds	r24, 0x01C0
    23d4:	81 30       	cpi	r24, 0x01	; 1
    23d6:	59 f4       	brne	.+22     	; 0x23ee <main+0xad6>
    23d8:	80 91 72 01 	lds	r24, 0x0172
    23dc:	82 30       	cpi	r24, 0x02	; 2
    23de:	39 f4       	brne	.+14     	; 0x23ee <main+0xad6>
    23e0:	80 91 a7 01 	lds	r24, 0x01A7
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	19 f4       	brne	.+6      	; 0x23ee <main+0xad6>
					next_state = DAH;
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	80 93 a7 01 	sts	0x01A7, r24

				key_down = FALSE;
    23ee:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    23f2:	10 92 3a 01 	sts	0x013A, r1
				if(tune_freq > UPPER_FREQ_LIMIT || tune_freq < LOWER_FREQ_LIMIT)
    23f6:	80 91 e2 01 	lds	r24, 0x01E2
    23fa:	90 91 e3 01 	lds	r25, 0x01E3
    23fe:	a0 91 e4 01 	lds	r26, 0x01E4
    2402:	b0 91 e5 01 	lds	r27, 0x01E5
    2406:	81 3b       	cpi	r24, 0xB1	; 177
    2408:	f6 ef       	ldi	r31, 0xF6	; 246
    240a:	9f 07       	cpc	r25, r31
    240c:	fa ed       	ldi	r31, 0xDA	; 218
    240e:	af 07       	cpc	r26, r31
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	bf 07       	cpc	r27, r31
    2414:	80 f4       	brcc	.+32     	; 0x2436 <main+0xb1e>
    2416:	80 91 e2 01 	lds	r24, 0x01E2
    241a:	90 91 e3 01 	lds	r25, 0x01E3
    241e:	a0 91 e4 01 	lds	r26, 0x01E4
    2422:	b0 91 e5 01 	lds	r27, 0x01E5
    2426:	80 38       	cpi	r24, 0x80	; 128
    2428:	2f e9       	ldi	r18, 0x9F	; 159
    242a:	92 07       	cpc	r25, r18
    242c:	25 ed       	ldi	r18, 0xD5	; 213
    242e:	a2 07       	cpc	r26, r18
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	b2 07       	cpc	r27, r18
    2434:	18 f4       	brcc	.+6      	; 0x243c <main+0xb24>
					mute_on = FALSE;
    2436:	10 92 3b 01 	sts	0x013B, r1
    243a:	03 c0       	rjmp	.+6      	; 0x2442 <main+0xb2a>
				else
					mute_on = TRUE;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	80 93 3b 01 	sts	0x013B, r24
				break;
    2442:	34 c0       	rjmp	.+104    	; 0x24ac <main+0xb94>

			case EXIT:
				key_down = FALSE;
    2444:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2448:	10 92 3a 01 	sts	0x013A, r1
				//mute_on = TRUE;
				mute_on = FALSE;
    244c:	10 92 3b 01 	sts	0x013B, r1

				if(cur_timer > cur_state_end)
    2450:	20 91 68 01 	lds	r18, 0x0168
    2454:	30 91 69 01 	lds	r19, 0x0169
    2458:	40 91 6a 01 	lds	r20, 0x016A
    245c:	50 91 6b 01 	lds	r21, 0x016B
    2460:	80 91 d4 01 	lds	r24, 0x01D4
    2464:	90 91 d5 01 	lds	r25, 0x01D5
    2468:	a0 91 d6 01 	lds	r26, 0x01D6
    246c:	b0 91 d7 01 	lds	r27, 0x01D7
    2470:	82 17       	cp	r24, r18
    2472:	93 07       	cpc	r25, r19
    2474:	a4 07       	cpc	r26, r20
    2476:	b5 07       	cpc	r27, r21
    2478:	18 f4       	brcc	.+6      	; 0x2480 <main+0xb68>
				{
					cur_state = IDLE;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	80 93 c8 01 	sts	0x01C8, r24
				}

				sleep_timer = cur_timer + SLEEP_DELAY;
    2480:	80 91 68 01 	lds	r24, 0x0168
    2484:	90 91 69 01 	lds	r25, 0x0169
    2488:	a0 91 6a 01 	lds	r26, 0x016A
    248c:	b0 91 6b 01 	lds	r27, 0x016B
    2490:	84 5d       	subi	r24, 0xD4	; 212
    2492:	9e 4f       	sbci	r25, 0xFE	; 254
    2494:	af 4f       	sbci	r26, 0xFF	; 255
    2496:	bf 4f       	sbci	r27, 0xFF	; 255
    2498:	80 93 cd 01 	sts	0x01CD, r24
    249c:	90 93 ce 01 	sts	0x01CE, r25
    24a0:	a0 93 cf 01 	sts	0x01CF, r26
    24a4:	b0 93 d0 01 	sts	0x01D0, r27
				break;
    24a8:	01 c0       	rjmp	.+2      	; 0x24ac <main+0xb94>

			default:
				break;
    24aa:	00 00       	nop
				sleep_disable();
			}
			sei();
			*/

			break;
    24ac:	4d c7       	rjmp	.+3738   	; 0x3348 <main+0x1a30>

		case ANNOUNCE:
			switch(cur_state)
    24ae:	80 91 c8 01 	lds	r24, 0x01C8
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	84 30       	cpi	r24, 0x04	; 4
    24b8:	91 05       	cpc	r25, r1
    24ba:	44 f4       	brge	.+16     	; 0x24cc <main+0xbb4>
    24bc:	82 30       	cpi	r24, 0x02	; 2
    24be:	91 05       	cpc	r25, r1
    24c0:	0c f0       	brlt	.+2      	; 0x24c4 <main+0xbac>
    24c2:	49 c1       	rjmp	.+658    	; 0x2756 <main+0xe3e>
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	91 05       	cpc	r25, r1
    24c8:	31 f0       	breq	.+12     	; 0x24d6 <main+0xbbe>
    24ca:	a1 c1       	rjmp	.+834    	; 0x280e <main+0xef6>
    24cc:	87 30       	cpi	r24, 0x07	; 7
    24ce:	91 05       	cpc	r25, r1
    24d0:	0c f0       	brlt	.+2      	; 0x24d4 <main+0xbbc>
    24d2:	9d c1       	rjmp	.+826    	; 0x280e <main+0xef6>
    24d4:	7c c1       	rjmp	.+760    	; 0x27ce <main+0xeb6>
			{
			case IDLE:
				// If this is the first time thru the ANNOUNCE loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    24d6:	20 91 3e 01 	lds	r18, 0x013E
    24da:	30 91 3f 01 	lds	r19, 0x013F
    24de:	80 91 eb 01 	lds	r24, 0x01EB
    24e2:	90 91 ec 01 	lds	r25, 0x01EC
    24e6:	28 17       	cp	r18, r24
    24e8:	39 07       	cpc	r19, r25
    24ea:	c9 f4       	brne	.+50     	; 0x251e <main+0xc06>
    24ec:	80 91 42 01 	lds	r24, 0x0142
    24f0:	88 23       	and	r24, r24
    24f2:	a9 f4       	brne	.+42     	; 0x251e <main+0xc06>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    24f4:	80 91 3e 01 	lds	r24, 0x013E
    24f8:	90 91 3f 01 	lds	r25, 0x013F
    24fc:	fc 01       	movw	r30, r24
    24fe:	80 81       	ld	r24, Z
    2500:	88 2f       	mov	r24, r24
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	80 97       	sbiw	r24, 0x20	; 32
    2506:	88 59       	subi	r24, 0x98	; 152
    2508:	9f 4f       	sbci	r25, 0xFF	; 255
    250a:	9b 83       	std	Y+3, r25	; 0x03
    250c:	8a 83       	std	Y+2, r24	; 0x02
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	9b 81       	ldd	r25, Y+3	; 0x03
    2512:	fc 01       	movw	r30, r24
    2514:	14 91       	lpm	r17, Z+
    2516:	1c 83       	std	Y+4, r17	; 0x04
    2518:	8c 81       	ldd	r24, Y+4	; 0x04
    251a:	80 93 42 01 	sts	0x0142, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    251e:	80 91 42 01 	lds	r24, 0x0142
    2522:	88 23       	and	r24, r24
    2524:	09 f4       	brne	.+2      	; 0x2528 <main+0xc10>
    2526:	ce c0       	rjmp	.+412    	; 0x26c4 <main+0xdac>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2528:	80 91 42 01 	lds	r24, 0x0142
    252c:	80 38       	cpi	r24, 0x80	; 128
    252e:	29 f0       	breq	.+10     	; 0x253a <main+0xc22>
    2530:	80 91 42 01 	lds	r24, 0x0142
    2534:	8f 3f       	cpi	r24, 0xFF	; 255
    2536:	09 f0       	breq	.+2      	; 0x253a <main+0xc22>
    2538:	79 c0       	rjmp	.+242    	; 0x262c <main+0xd14>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    253a:	80 91 42 01 	lds	r24, 0x0142
    253e:	80 38       	cpi	r24, 0x80	; 128
    2540:	21 f5       	brne	.+72     	; 0x258a <main+0xc72>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2542:	20 91 73 01 	lds	r18, 0x0173
    2546:	30 91 74 01 	lds	r19, 0x0174
    254a:	c9 01       	movw	r24, r18
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	9c 01       	movw	r18, r24
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	80 91 68 01 	lds	r24, 0x0168
    255e:	90 91 69 01 	lds	r25, 0x0169
    2562:	a0 91 6a 01 	lds	r26, 0x016A
    2566:	b0 91 6b 01 	lds	r27, 0x016B
    256a:	82 0f       	add	r24, r18
    256c:	93 1f       	adc	r25, r19
    256e:	a4 1f       	adc	r26, r20
    2570:	b5 1f       	adc	r27, r21
    2572:	80 93 d4 01 	sts	0x01D4, r24
    2576:	90 93 d5 01 	sts	0x01D5, r25
    257a:	a0 93 d6 01 	sts	0x01D6, r26
    257e:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAHDELAY;
    2582:	85 e0       	ldi	r24, 0x05	; 5
    2584:	80 93 c8 01 	sts	0x01C8, r24
    2588:	27 c0       	rjmp	.+78     	; 0x25d8 <main+0xcc0>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    258a:	20 91 73 01 	lds	r18, 0x0173
    258e:	30 91 74 01 	lds	r19, 0x0174
    2592:	c9 01       	movw	r24, r18
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	82 1b       	sub	r24, r18
    25a2:	93 0b       	sbc	r25, r19
    25a4:	9c 01       	movw	r18, r24
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	80 91 68 01 	lds	r24, 0x0168
    25ae:	90 91 69 01 	lds	r25, 0x0169
    25b2:	a0 91 6a 01 	lds	r26, 0x016A
    25b6:	b0 91 6b 01 	lds	r27, 0x016B
    25ba:	82 0f       	add	r24, r18
    25bc:	93 1f       	adc	r25, r19
    25be:	a4 1f       	adc	r26, r20
    25c0:	b5 1f       	adc	r27, r21
    25c2:	80 93 d4 01 	sts	0x01D4, r24
    25c6:	90 93 d5 01 	sts	0x01D5, r25
    25ca:	a0 93 d6 01 	sts	0x01D6, r26
    25ce:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAHDELAY;
    25d2:	85 e0       	ldi	r24, 0x05	; 5
    25d4:	80 93 c8 01 	sts	0x01C8, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    25d8:	80 91 3e 01 	lds	r24, 0x013E
    25dc:	90 91 3f 01 	lds	r25, 0x013F
    25e0:	01 96       	adiw	r24, 0x01	; 1
    25e2:	90 93 3f 01 	sts	0x013F, r25
    25e6:	80 93 3e 01 	sts	0x013E, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    25ea:	80 91 3e 01 	lds	r24, 0x013E
    25ee:	90 91 3f 01 	lds	r25, 0x013F
    25f2:	fc 01       	movw	r30, r24
    25f4:	80 81       	ld	r24, Z
    25f6:	88 23       	and	r24, r24
    25f8:	19 f4       	brne	.+6      	; 0x2600 <main+0xce8>
							cur_character = '\0';
    25fa:	10 92 42 01 	sts	0x0142, r1
    25fe:	15 c0       	rjmp	.+42     	; 0x262a <main+0xd12>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2600:	80 91 3e 01 	lds	r24, 0x013E
    2604:	90 91 3f 01 	lds	r25, 0x013F
    2608:	fc 01       	movw	r30, r24
    260a:	80 81       	ld	r24, Z
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	80 97       	sbiw	r24, 0x20	; 32
    2612:	88 59       	subi	r24, 0x98	; 152
    2614:	9f 4f       	sbci	r25, 0xFF	; 255
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	8d 81       	ldd	r24, Y+5	; 0x05
    261c:	9e 81       	ldd	r25, Y+6	; 0x06
    261e:	fc 01       	movw	r30, r24
    2620:	14 91       	lpm	r17, Z+
    2622:	1f 83       	std	Y+7, r17	; 0x07
    2624:	8f 81       	ldd	r24, Y+7	; 0x07
    2626:	80 93 42 01 	sts	0x0142, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    262a:	4b c0       	rjmp	.+150    	; 0x26c2 <main+0xdaa>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    262c:	80 91 42 01 	lds	r24, 0x0142
    2630:	88 23       	and	r24, r24
    2632:	24 f5       	brge	.+72     	; 0x267c <main+0xd64>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2634:	20 91 73 01 	lds	r18, 0x0173
    2638:	30 91 74 01 	lds	r19, 0x0174
    263c:	c9 01       	movw	r24, r18
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	82 0f       	add	r24, r18
    2644:	93 1f       	adc	r25, r19
    2646:	9c 01       	movw	r18, r24
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	80 91 68 01 	lds	r24, 0x0168
    2650:	90 91 69 01 	lds	r25, 0x0169
    2654:	a0 91 6a 01 	lds	r26, 0x016A
    2658:	b0 91 6b 01 	lds	r27, 0x016B
    265c:	82 0f       	add	r24, r18
    265e:	93 1f       	adc	r25, r19
    2660:	a4 1f       	adc	r26, r20
    2662:	b5 1f       	adc	r27, r21
    2664:	80 93 d4 01 	sts	0x01D4, r24
    2668:	90 93 d5 01 	sts	0x01D5, r25
    266c:	a0 93 d6 01 	sts	0x01D6, r26
    2670:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAH;
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	80 93 c8 01 	sts	0x01C8, r24
    267a:	1e c0       	rjmp	.+60     	; 0x26b8 <main+0xda0>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    267c:	80 91 73 01 	lds	r24, 0x0173
    2680:	90 91 74 01 	lds	r25, 0x0174
    2684:	9c 01       	movw	r18, r24
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	80 91 68 01 	lds	r24, 0x0168
    268e:	90 91 69 01 	lds	r25, 0x0169
    2692:	a0 91 6a 01 	lds	r26, 0x016A
    2696:	b0 91 6b 01 	lds	r27, 0x016B
    269a:	82 0f       	add	r24, r18
    269c:	93 1f       	adc	r25, r19
    269e:	a4 1f       	adc	r26, r20
    26a0:	b5 1f       	adc	r27, r21
    26a2:	80 93 d4 01 	sts	0x01D4, r24
    26a6:	90 93 d5 01 	sts	0x01D5, r25
    26aa:	a0 93 d6 01 	sts	0x01D6, r26
    26ae:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DIT;
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	80 93 c8 01 	sts	0x01C8, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    26b8:	80 91 42 01 	lds	r24, 0x0142
    26bc:	88 0f       	add	r24, r24
    26be:	80 93 42 01 	sts	0x0142, r24
    26c2:	48 c0       	rjmp	.+144    	; 0x2754 <main+0xe3c>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    26c4:	80 91 eb 01 	lds	r24, 0x01EB
    26c8:	90 91 ec 01 	lds	r25, 0x01EC
    26cc:	2c e2       	ldi	r18, 0x2C	; 44
    26ce:	31 e0       	ldi	r19, 0x01	; 1
    26d0:	b9 01       	movw	r22, r18
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	0e 94 41 1b 	call	0x3682	; 0x3682 <memcpy>
					cur_char_p = announce_buffer;
    26da:	80 91 eb 01 	lds	r24, 0x01EB
    26de:	90 91 ec 01 	lds	r25, 0x01EC
    26e2:	90 93 3f 01 	sts	0x013F, r25
    26e6:	80 93 3e 01 	sts	0x013E, r24
					cur_character = '\0';
    26ea:	10 92 42 01 	sts	0x0142, r1

					// Set back into previous mode
					st_freq = prev_st_freq;
    26ee:	80 91 cb 01 	lds	r24, 0x01CB
    26f2:	90 91 cc 01 	lds	r25, 0x01CC
    26f6:	90 93 bb 01 	sts	0x01BB, r25
    26fa:	80 93 ba 01 	sts	0x01BA, r24
					set_st_freq(st_freq);
    26fe:	80 91 ba 01 	lds	r24, 0x01BA
    2702:	90 91 bb 01 	lds	r25, 0x01BB
    2706:	cc 01       	movw	r24, r24
    2708:	a0 e0       	ldi	r26, 0x00	; 0
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 65 0c 	call	0x18ca	; 0x18ca <set_st_freq>

					wpm = prev_wpm;
    2714:	80 91 f2 01 	lds	r24, 0x01F2
    2718:	80 93 e6 01 	sts	0x01E6, r24
					set_wpm(wpm);
    271c:	80 91 e6 01 	lds	r24, 0x01E6
    2720:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_wpm>

					cur_mode = prev_mode;
    2724:	80 91 b8 01 	lds	r24, 0x01B8
    2728:	80 93 a2 01 	sts	0x01A2, r24
					cur_state = prev_state;
    272c:	80 91 72 01 	lds	r24, 0x0172
    2730:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = prev_state_end;
    2734:	80 91 b4 01 	lds	r24, 0x01B4
    2738:	90 91 b5 01 	lds	r25, 0x01B5
    273c:	a0 91 b6 01 	lds	r26, 0x01B6
    2740:	b0 91 b7 01 	lds	r27, 0x01B7
    2744:	80 93 d4 01 	sts	0x01D4, r24
    2748:	90 93 d5 01 	sts	0x01D5, r25
    274c:	a0 93 d6 01 	sts	0x01D6, r26
    2750:	b0 93 d7 01 	sts	0x01D7, r27
				}
				break;
    2754:	5d c0       	rjmp	.+186    	; 0x2810 <main+0xef8>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    2756:	20 91 68 01 	lds	r18, 0x0168
    275a:	30 91 69 01 	lds	r19, 0x0169
    275e:	40 91 6a 01 	lds	r20, 0x016A
    2762:	50 91 6b 01 	lds	r21, 0x016B
    2766:	80 91 d4 01 	lds	r24, 0x01D4
    276a:	90 91 d5 01 	lds	r25, 0x01D5
    276e:	a0 91 d6 01 	lds	r26, 0x01D6
    2772:	b0 91 d7 01 	lds	r27, 0x01D7
    2776:	82 17       	cp	r24, r18
    2778:	93 07       	cpc	r25, r19
    277a:	a4 07       	cpc	r26, r20
    277c:	b5 07       	cpc	r27, r21
    277e:	f0 f4       	brcc	.+60     	; 0x27bc <main+0xea4>
				{
					cur_state_end = cur_timer + dit_length;
    2780:	80 91 73 01 	lds	r24, 0x0173
    2784:	90 91 74 01 	lds	r25, 0x0174
    2788:	9c 01       	movw	r18, r24
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	80 91 68 01 	lds	r24, 0x0168
    2792:	90 91 69 01 	lds	r25, 0x0169
    2796:	a0 91 6a 01 	lds	r26, 0x016A
    279a:	b0 91 6b 01 	lds	r27, 0x016B
    279e:	82 0f       	add	r24, r18
    27a0:	93 1f       	adc	r25, r19
    27a2:	a4 1f       	adc	r26, r20
    27a4:	b5 1f       	adc	r27, r21
    27a6:	80 93 d4 01 	sts	0x01D4, r24
    27aa:	90 93 d5 01 	sts	0x01D5, r25
    27ae:	a0 93 d6 01 	sts	0x01D6, r26
    27b2:	b0 93 d7 01 	sts	0x01D7, r27
					cur_state = DITDELAY;
    27b6:	84 e0       	ldi	r24, 0x04	; 4
    27b8:	80 93 c8 01 	sts	0x01C8, r24
				}

				key_down = FALSE;
    27bc:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = TRUE;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	80 93 3b 01 	sts	0x013B, r24
				break;
    27cc:	21 c0       	rjmp	.+66     	; 0x2810 <main+0xef8>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    27ce:	20 91 68 01 	lds	r18, 0x0168
    27d2:	30 91 69 01 	lds	r19, 0x0169
    27d6:	40 91 6a 01 	lds	r20, 0x016A
    27da:	50 91 6b 01 	lds	r21, 0x016B
    27de:	80 91 d4 01 	lds	r24, 0x01D4
    27e2:	90 91 d5 01 	lds	r25, 0x01D5
    27e6:	a0 91 d6 01 	lds	r26, 0x01D6
    27ea:	b0 91 d7 01 	lds	r27, 0x01D7
    27ee:	82 17       	cp	r24, r18
    27f0:	93 07       	cpc	r25, r19
    27f2:	a4 07       	cpc	r26, r20
    27f4:	b5 07       	cpc	r27, r21
    27f6:	18 f4       	brcc	.+6      	; 0x27fe <main+0xee6>
					cur_state = IDLE;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	80 93 c8 01 	sts	0x01C8, r24

				key_down = FALSE;
    27fe:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2802:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	80 93 3b 01 	sts	0x013B, r24
				break;
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <main+0xef8>

			default:
				break;
    280e:	00 00       	nop
			}
			break;
    2810:	9b c5       	rjmp	.+2870   	; 0x3348 <main+0x1a30>

		case TUNE:
			switch(cur_state)
    2812:	80 91 c8 01 	lds	r24, 0x01C8
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	87 30       	cpi	r24, 0x07	; 7
    281c:	91 05       	cpc	r25, r1
    281e:	09 f4       	brne	.+2      	; 0x2822 <main+0xf0a>
    2820:	50 c0       	rjmp	.+160    	; 0x28c2 <main+0xfaa>
    2822:	88 30       	cpi	r24, 0x08	; 8
    2824:	91 05       	cpc	r25, r1
    2826:	09 f4       	brne	.+2      	; 0x282a <main+0xf12>
    2828:	8d c0       	rjmp	.+282    	; 0x2944 <main+0x102c>
    282a:	81 30       	cpi	r24, 0x01	; 1
    282c:	91 05       	cpc	r25, r1
    282e:	09 f0       	breq	.+2      	; 0x2832 <main+0xf1a>
					cur_mode = default_mode;
				}
				break;

			default:
				break;
    2830:	af c0       	rjmp	.+350    	; 0x2990 <main+0x1078>

		case TUNE:
			switch(cur_state)
			{
			case IDLE:
				tx_start = cur_timer + TX_ON_DELAY;
    2832:	80 91 68 01 	lds	r24, 0x0168
    2836:	90 91 69 01 	lds	r25, 0x0169
    283a:	a0 91 6a 01 	lds	r26, 0x016A
    283e:	b0 91 6b 01 	lds	r27, 0x016B
    2842:	01 96       	adiw	r24, 0x01	; 1
    2844:	a1 1d       	adc	r26, r1
    2846:	b1 1d       	adc	r27, r1
    2848:	80 93 a8 01 	sts	0x01A8, r24
    284c:	90 93 a9 01 	sts	0x01A9, r25
    2850:	a0 93 aa 01 	sts	0x01AA, r26
    2854:	b0 93 ab 01 	sts	0x01AB, r27
				tx_end = UINT32_MAX;
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	9f ef       	ldi	r25, 0xFF	; 255
    285c:	dc 01       	movw	r26, r24
    285e:	80 93 ed 01 	sts	0x01ED, r24
    2862:	90 93 ee 01 	sts	0x01EE, r25
    2866:	a0 93 ef 01 	sts	0x01EF, r26
    286a:	b0 93 f0 01 	sts	0x01F0, r27
				cur_state_end = UINT32_MAX;
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	9f ef       	ldi	r25, 0xFF	; 255
    2872:	dc 01       	movw	r26, r24
    2874:	80 93 d4 01 	sts	0x01D4, r24
    2878:	90 93 d5 01 	sts	0x01D5, r25
    287c:	a0 93 d6 01 	sts	0x01D6, r26
    2880:	b0 93 d7 01 	sts	0x01D7, r27
				mute_start = cur_timer;
    2884:	80 91 68 01 	lds	r24, 0x0168
    2888:	90 91 69 01 	lds	r25, 0x0169
    288c:	a0 91 6a 01 	lds	r26, 0x016A
    2890:	b0 91 6b 01 	lds	r27, 0x016B
    2894:	80 93 e7 01 	sts	0x01E7, r24
    2898:	90 93 e8 01 	sts	0x01E8, r25
    289c:	a0 93 e9 01 	sts	0x01E9, r26
    28a0:	b0 93 ea 01 	sts	0x01EA, r27
				mute_end = UINT32_MAX;
    28a4:	8f ef       	ldi	r24, 0xFF	; 255
    28a6:	9f ef       	ldi	r25, 0xFF	; 255
    28a8:	dc 01       	movw	r26, r24
    28aa:	80 93 d8 01 	sts	0x01D8, r24
    28ae:	90 93 d9 01 	sts	0x01D9, r25
    28b2:	a0 93 da 01 	sts	0x01DA, r26
    28b6:	b0 93 db 01 	sts	0x01DB, r27

				cur_state = KEYDOWN;
    28ba:	87 e0       	ldi	r24, 0x07	; 7
    28bc:	80 93 c8 01 	sts	0x01C8, r24
				break;
    28c0:	67 c0       	rjmp	.+206    	; 0x2990 <main+0x1078>

			case KEYDOWN:
				key_down = TRUE;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	80 93 3c 01 	sts	0x013C, r24
				sidetone_on = TRUE;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	80 93 3b 01 	sts	0x013B, r24

				if(ANYBUTTON)
    28d4:	80 91 dc 01 	lds	r24, 0x01DC
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	61 f0       	breq	.+24     	; 0x28f4 <main+0xfdc>
    28dc:	80 91 c0 01 	lds	r24, 0x01C0
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	41 f0       	breq	.+16     	; 0x28f4 <main+0xfdc>
    28e4:	80 91 c7 01 	lds	r24, 0x01C7
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	21 f0       	breq	.+8      	; 0x28f4 <main+0xfdc>
    28ec:	80 91 c5 01 	lds	r24, 0x01C5
    28f0:	81 30       	cpi	r24, 0x01	; 1
    28f2:	39 f5       	brne	.+78     	; 0x2942 <main+0x102a>
				{
					cur_state = ENDKEYDOWN;
    28f4:	88 e0       	ldi	r24, 0x08	; 8
    28f6:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = cur_timer + MUTE_OFF_DELAY;
    28fa:	80 91 68 01 	lds	r24, 0x0168
    28fe:	90 91 69 01 	lds	r25, 0x0169
    2902:	a0 91 6a 01 	lds	r26, 0x016A
    2906:	b0 91 6b 01 	lds	r27, 0x016B
    290a:	8c 59       	subi	r24, 0x9C	; 156
    290c:	9f 4f       	sbci	r25, 0xFF	; 255
    290e:	af 4f       	sbci	r26, 0xFF	; 255
    2910:	bf 4f       	sbci	r27, 0xFF	; 255
    2912:	80 93 d4 01 	sts	0x01D4, r24
    2916:	90 93 d5 01 	sts	0x01D5, r25
    291a:	a0 93 d6 01 	sts	0x01D6, r26
    291e:	b0 93 d7 01 	sts	0x01D7, r27
					tx_end = cur_timer;
    2922:	80 91 68 01 	lds	r24, 0x0168
    2926:	90 91 69 01 	lds	r25, 0x0169
    292a:	a0 91 6a 01 	lds	r26, 0x016A
    292e:	b0 91 6b 01 	lds	r27, 0x016B
    2932:	80 93 ed 01 	sts	0x01ED, r24
    2936:	90 93 ee 01 	sts	0x01EE, r25
    293a:	a0 93 ef 01 	sts	0x01EF, r26
    293e:	b0 93 f0 01 	sts	0x01F0, r27
				}
				break;
    2942:	26 c0       	rjmp	.+76     	; 0x2990 <main+0x1078>

			case ENDKEYDOWN:
				key_down = FALSE;
    2944:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    2948:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	80 93 3b 01 	sts	0x013B, r24

				if(cur_timer >= cur_state_end)
    2952:	20 91 68 01 	lds	r18, 0x0168
    2956:	30 91 69 01 	lds	r19, 0x0169
    295a:	40 91 6a 01 	lds	r20, 0x016A
    295e:	50 91 6b 01 	lds	r21, 0x016B
    2962:	80 91 d4 01 	lds	r24, 0x01D4
    2966:	90 91 d5 01 	lds	r25, 0x01D5
    296a:	a0 91 d6 01 	lds	r26, 0x01D6
    296e:	b0 91 d7 01 	lds	r27, 0x01D7
    2972:	28 17       	cp	r18, r24
    2974:	39 07       	cpc	r19, r25
    2976:	4a 07       	cpc	r20, r26
    2978:	5b 07       	cpc	r21, r27
    297a:	48 f0       	brcs	.+18     	; 0x298e <main+0x1076>
				{
					mute_on = FALSE;
    297c:	10 92 3b 01 	sts	0x013B, r1
					cur_state = IDLE;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	80 93 c8 01 	sts	0x01C8, r24
					cur_mode = default_mode;
    2986:	80 91 6d 01 	lds	r24, 0x016D
    298a:	80 93 a2 01 	sts	0x01A2, r24
				}
				break;
    298e:	00 00       	nop

			default:
				break;
			}
			break;
    2990:	db c4       	rjmp	.+2486   	; 0x3348 <main+0x1a30>

		case MENU:
			switch(cur_state)
    2992:	80 91 c8 01 	lds	r24, 0x01C8
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	89 30       	cpi	r24, 0x09	; 9
    299c:	91 05       	cpc	r25, r1
    299e:	91 f0       	breq	.+36     	; 0x29c4 <main+0x10ac>
    29a0:	8a 30       	cpi	r24, 0x0A	; 10
    29a2:	91 05       	cpc	r25, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <main+0x1090>
    29a6:	58 c0       	rjmp	.+176    	; 0x2a58 <main+0x1140>
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	91 05       	cpc	r25, r1
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <main+0x1098>
    29ae:	98 c1       	rjmp	.+816    	; 0x2ce0 <main+0x13c8>
			{
			case IDLE:
				// Point to the beginning of the menu
				cur_menu_p = menu;
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	90 93 44 01 	sts	0x0144, r25
    29b8:	80 93 43 01 	sts	0x0143, r24
				cur_state = MENUANNOUNCE;
    29bc:	89 e0       	ldi	r24, 0x09	; 9
    29be:	80 93 c8 01 	sts	0x01C8, r24
				break;
    29c2:	96 c1       	rjmp	.+812    	; 0x2cf0 <main+0x13d8>

			case MENUANNOUNCE:
				cur_menu = malloc(2);
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	0e 94 0e 1a 	call	0x341c	; 0x341c <malloc>
    29cc:	90 93 46 01 	sts	0x0146, r25
    29d0:	80 93 45 01 	sts	0x0145, r24
				memset(cur_menu, '\0', 2);
    29d4:	80 91 45 01 	lds	r24, 0x0145
    29d8:	90 91 46 01 	lds	r25, 0x0146
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	42 e0       	ldi	r20, 0x02	; 2
    29e2:	50 e0       	ldi	r21, 0x00	; 0
    29e4:	0e 94 4a 1b 	call	0x3694	; 0x3694 <memset>

				// Get the menu char (just 1 from the array)
				memcpy(cur_menu, cur_menu_p, 1);
    29e8:	80 91 45 01 	lds	r24, 0x0145
    29ec:	90 91 46 01 	lds	r25, 0x0146
    29f0:	20 91 43 01 	lds	r18, 0x0143
    29f4:	30 91 44 01 	lds	r19, 0x0144
    29f8:	b9 01       	movw	r22, r18
    29fa:	41 e0       	ldi	r20, 0x01	; 1
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	0e 94 41 1b 	call	0x3682	; 0x3682 <memcpy>

				// Set menu input expiration
				cur_state_end = cur_timer + MENU_EXPIRATION;
    2a02:	80 91 68 01 	lds	r24, 0x0168
    2a06:	90 91 69 01 	lds	r25, 0x0169
    2a0a:	a0 91 6a 01 	lds	r26, 0x016A
    2a0e:	b0 91 6b 01 	lds	r27, 0x016B
    2a12:	80 56       	subi	r24, 0x60	; 96
    2a14:	90 4f       	sbci	r25, 0xF0	; 240
    2a16:	af 4f       	sbci	r26, 0xFF	; 255
    2a18:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1a:	80 93 d4 01 	sts	0x01D4, r24
    2a1e:	90 93 d5 01 	sts	0x01D5, r25
    2a22:	a0 93 d6 01 	sts	0x01D6, r26
    2a26:	b0 93 d7 01 	sts	0x01D7, r27

				// Set next state
				cur_state = MENUINPUT;
    2a2a:	8a e0       	ldi	r24, 0x0A	; 10
    2a2c:	80 93 c8 01 	sts	0x01C8, r24

				// Announce the menu item
				announce(cur_menu, st_freq, wpm);
    2a30:	80 91 45 01 	lds	r24, 0x0145
    2a34:	90 91 46 01 	lds	r25, 0x0146
    2a38:	20 91 ba 01 	lds	r18, 0x01BA
    2a3c:	30 91 bb 01 	lds	r19, 0x01BB
    2a40:	40 91 e6 01 	lds	r20, 0x01E6
    2a44:	b9 01       	movw	r22, r18
    2a46:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>

				free(cur_menu);
    2a4a:	80 91 45 01 	lds	r24, 0x0145
    2a4e:	90 91 46 01 	lds	r25, 0x0146
    2a52:	0e 94 a8 1a 	call	0x3550	; 0x3550 <free>
				break;
    2a56:	4c c1       	rjmp	.+664    	; 0x2cf0 <main+0x13d8>

			case MENUINPUT:
				text_buffer = malloc(20);
    2a58:	84 e1       	ldi	r24, 0x14	; 20
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 0e 1a 	call	0x341c	; 0x341c <malloc>
    2a60:	90 93 41 01 	sts	0x0141, r25
    2a64:	80 93 40 01 	sts	0x0140, r24
				memset(text_buffer, '\0', 20);
    2a68:	80 91 40 01 	lds	r24, 0x0140
    2a6c:	90 91 41 01 	lds	r25, 0x0141
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	44 e1       	ldi	r20, 0x14	; 20
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	0e 94 4a 1b 	call	0x3694	; 0x3694 <memset>

				// Wait for input
				if(cur_timer < cur_state_end)
    2a7c:	20 91 68 01 	lds	r18, 0x0168
    2a80:	30 91 69 01 	lds	r19, 0x0169
    2a84:	40 91 6a 01 	lds	r20, 0x016A
    2a88:	50 91 6b 01 	lds	r21, 0x016B
    2a8c:	80 91 d4 01 	lds	r24, 0x01D4
    2a90:	90 91 d5 01 	lds	r25, 0x01D5
    2a94:	a0 91 d6 01 	lds	r26, 0x01D6
    2a98:	b0 91 d7 01 	lds	r27, 0x01D7
    2a9c:	28 17       	cp	r18, r24
    2a9e:	39 07       	cpc	r19, r25
    2aa0:	4a 07       	cpc	r20, r26
    2aa2:	5b 07       	cpc	r21, r27
    2aa4:	08 f0       	brcs	.+2      	; 0x2aa8 <main+0x1190>
    2aa6:	03 c1       	rjmp	.+518    	; 0x2cae <main+0x1396>
				{
					// If CMD/FREQ pressed, advance to next menu item
					if(cmd_btn == PRESS)
    2aa8:	80 91 c7 01 	lds	r24, 0x01C7
    2aac:	81 30       	cpi	r24, 0x01	; 1
    2aae:	49 f5       	brne	.+82     	; 0x2b02 <main+0x11ea>
					{
						debounce(TRUE);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>
						cur_menu_p++;
    2ab6:	80 91 43 01 	lds	r24, 0x0143
    2aba:	90 91 44 01 	lds	r25, 0x0144
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	90 93 44 01 	sts	0x0144, r25
    2ac4:	80 93 43 01 	sts	0x0143, r24
						// If at end of menu, return to previous mode
						if((*cur_menu_p) == '\0')
    2ac8:	80 91 43 01 	lds	r24, 0x0143
    2acc:	90 91 44 01 	lds	r25, 0x0144
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	80 81       	ld	r24, Z
    2ad4:	88 23       	and	r24, r24
    2ad6:	89 f4       	brne	.+34     	; 0x2afa <main+0x11e2>
						{
							cur_state = IDLE;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	80 93 c8 01 	sts	0x01C8, r24
							cur_mode = default_mode;
    2ade:	80 91 6d 01 	lds	r24, 0x016D
    2ae2:	80 93 a2 01 	sts	0x01A2, r24

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
    2ae6:	20 91 e6 01 	lds	r18, 0x01E6
    2aea:	81 e2       	ldi	r24, 0x21	; 33
    2aec:	91 e0       	ldi	r25, 0x01	; 1
    2aee:	60 e9       	ldi	r22, 0x90	; 144
    2af0:	71 e0       	ldi	r23, 0x01	; 1
    2af2:	42 2f       	mov	r20, r18
    2af4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2af8:	ec c0       	rjmp	.+472    	; 0x2cd2 <main+0x13ba>

							//set_st_freq(ST_LOW);
							announce("X", ST_LOW, wpm);
						}
						else
							cur_state = MENUANNOUNCE;
    2afa:	89 e0       	ldi	r24, 0x09	; 9
    2afc:	80 93 c8 01 	sts	0x01C8, r24
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2b00:	e8 c0       	rjmp	.+464    	; 0x2cd2 <main+0x13ba>
						}
						else
							cur_state = MENUANNOUNCE;
					}
					// If MSG/OK pressed, select this menu item
					else if(msg_btn == PRESS)
    2b02:	80 91 c5 01 	lds	r24, 0x01C5
    2b06:	81 30       	cpi	r24, 0x01	; 1
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <main+0x11f4>
    2b0a:	e2 c0       	rjmp	.+452    	; 0x2cd0 <main+0x13b8>
					{
						// need to clear the button buffer
						debounce(TRUE);
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <debounce>

						switch(*cur_menu_p)
    2b12:	80 91 43 01 	lds	r24, 0x0143
    2b16:	90 91 44 01 	lds	r25, 0x0144
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	83 35       	cpi	r24, 0x53	; 83
    2b24:	91 05       	cpc	r25, r1
    2b26:	a1 f0       	breq	.+40     	; 0x2b50 <main+0x1238>
    2b28:	84 35       	cpi	r24, 0x54	; 84
    2b2a:	91 05       	cpc	r25, r1
    2b2c:	4c f4       	brge	.+18     	; 0x2b40 <main+0x1228>
    2b2e:	8b 34       	cpi	r24, 0x4B	; 75
    2b30:	91 05       	cpc	r25, r1
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <main+0x121e>
    2b34:	83 c0       	rjmp	.+262    	; 0x2c3c <main+0x1324>
    2b36:	82 35       	cpi	r24, 0x52	; 82
    2b38:	91 05       	cpc	r25, r1
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <main+0x1226>
    2b3c:	64 c0       	rjmp	.+200    	; 0x2c06 <main+0x12ee>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2b3e:	c9 c0       	rjmp	.+402    	; 0x2cd2 <main+0x13ba>
					else if(msg_btn == PRESS)
					{
						// need to clear the button buffer
						debounce(TRUE);

						switch(*cur_menu_p)
    2b40:	86 35       	cpi	r24, 0x56	; 86
    2b42:	91 05       	cpc	r25, r1
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <main+0x1230>
    2b46:	70 c0       	rjmp	.+224    	; 0x2c28 <main+0x1310>
    2b48:	87 35       	cpi	r24, 0x57	; 87
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	21 f1       	breq	.+72     	; 0x2b96 <main+0x127e>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2b4e:	c1 c0       	rjmp	.+386    	; 0x2cd2 <main+0x13ba>

						switch(*cur_menu_p)
						{
						// Change keyer speed
						case 'S':
							cur_state_end = cur_timer + MENU_EXPIRATION;
    2b50:	80 91 68 01 	lds	r24, 0x0168
    2b54:	90 91 69 01 	lds	r25, 0x0169
    2b58:	a0 91 6a 01 	lds	r26, 0x016A
    2b5c:	b0 91 6b 01 	lds	r27, 0x016B
    2b60:	80 56       	subi	r24, 0x60	; 96
    2b62:	90 4f       	sbci	r25, 0xF0	; 240
    2b64:	af 4f       	sbci	r26, 0xFF	; 255
    2b66:	bf 4f       	sbci	r27, 0xFF	; 255
    2b68:	80 93 d4 01 	sts	0x01D4, r24
    2b6c:	90 93 d5 01 	sts	0x01D5, r25
    2b70:	a0 93 d6 01 	sts	0x01D6, r26
    2b74:	b0 93 d7 01 	sts	0x01D7, r27
							cur_mode = SETWPM;
    2b78:	85 e0       	ldi	r24, 0x05	; 5
    2b7a:	80 93 a2 01 	sts	0x01A2, r24

							announce("R", st_freq, wpm);
    2b7e:	20 91 ba 01 	lds	r18, 0x01BA
    2b82:	30 91 bb 01 	lds	r19, 0x01BB
    2b86:	40 91 e6 01 	lds	r20, 0x01E6
    2b8a:	8f e1       	ldi	r24, 0x1F	; 31
    2b8c:	91 e0       	ldi	r25, 0x01	; 1
    2b8e:	b9 01       	movw	r22, r18
    2b90:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
							break;
    2b94:	9e c0       	rjmp	.+316    	; 0x2cd2 <main+0x13ba>

						// Read WPM
						case 'W':
							cur_state = IDLE;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	80 93 c8 01 	sts	0x01C8, r24
							cur_mode = default_mode;
    2b9c:	80 91 6d 01 	lds	r24, 0x016D
    2ba0:	80 93 a2 01 	sts	0x01A2, r24

							sprintf(text_buffer, "%d", wpm);
    2ba4:	40 91 40 01 	lds	r20, 0x0140
    2ba8:	50 91 41 01 	lds	r21, 0x0141
    2bac:	80 91 e6 01 	lds	r24, 0x01E6
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <main+0x129e>
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <main+0x12a0>
    2bb8:	00 d0       	rcall	.+0      	; 0x2bba <main+0x12a2>
    2bba:	8d b7       	in	r24, 0x3d	; 61
    2bbc:	9e b7       	in	r25, 0x3e	; 62
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	51 83       	std	Z+1, r21	; 0x01
    2bc4:	40 83       	st	Z, r20
    2bc6:	4d e2       	ldi	r20, 0x2D	; 45
    2bc8:	51 e0       	ldi	r21, 0x01	; 1
    2bca:	fc 01       	movw	r30, r24
    2bcc:	53 83       	std	Z+3, r21	; 0x03
    2bce:	42 83       	std	Z+2, r20	; 0x02
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	35 83       	std	Z+5, r19	; 0x05
    2bd4:	24 83       	std	Z+4, r18	; 0x04
    2bd6:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <sprintf>
    2bda:	8d b7       	in	r24, 0x3d	; 61
    2bdc:	9e b7       	in	r25, 0x3e	; 62
    2bde:	06 96       	adiw	r24, 0x06	; 6
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	9e bf       	out	0x3e, r25	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	8d bf       	out	0x3d, r24	; 61
							announce(text_buffer, st_freq, wpm);
    2bea:	80 91 40 01 	lds	r24, 0x0140
    2bee:	90 91 41 01 	lds	r25, 0x0141
    2bf2:	20 91 ba 01 	lds	r18, 0x01BA
    2bf6:	30 91 bb 01 	lds	r19, 0x01BB
    2bfa:	40 91 e6 01 	lds	r20, 0x01E6
    2bfe:	b9 01       	movw	r22, r18
    2c00:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
							break;
    2c04:	66 c0       	rjmp	.+204    	; 0x2cd2 <main+0x13ba>

						// Record keyer memory
						case 'R':
							cur_state = INIT;
    2c06:	10 92 c8 01 	sts	0x01C8, r1
							cur_mode = RECORD;
    2c0a:	87 e0       	ldi	r24, 0x07	; 7
    2c0c:	80 93 a2 01 	sts	0x01A2, r24

							announce("R", st_freq, wpm);
    2c10:	20 91 ba 01 	lds	r18, 0x01BA
    2c14:	30 91 bb 01 	lds	r19, 0x01BB
    2c18:	40 91 e6 01 	lds	r20, 0x01E6
    2c1c:	8f e1       	ldi	r24, 0x1F	; 31
    2c1e:	91 e0       	ldi	r25, 0x01	; 1
    2c20:	b9 01       	movw	r22, r18
    2c22:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
							break;
    2c26:	55 c0       	rjmp	.+170    	; 0x2cd2 <main+0x13ba>

						// Read voltage
						case 'V':
							cur_state = IDLE;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	80 93 c8 01 	sts	0x01C8, r24
							cur_mode = default_mode;
    2c2e:	80 91 6d 01 	lds	r24, 0x016D
    2c32:	80 93 a2 01 	sts	0x01A2, r24

							read_voltage();
    2c36:	0e 94 02 07 	call	0xe04	; 0xe04 <read_voltage>
							break;
    2c3a:	4b c0       	rjmp	.+150    	; 0x2cd2 <main+0x13ba>

						// Toggle keyer/straight key mode
						case 'K':
							if(default_mode == KEYER)
    2c3c:	80 91 6d 01 	lds	r24, 0x016D
    2c40:	88 23       	and	r24, r24
    2c42:	d9 f4       	brne	.+54     	; 0x2c7a <main+0x1362>
							{
								default_mode = SK;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	80 93 6d 01 	sts	0x016D, r24
								cur_state = IDLE;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	80 93 c8 01 	sts	0x01C8, r24
								cur_mode = default_mode;
    2c50:	80 91 6d 01 	lds	r24, 0x016D
    2c54:	80 93 a2 01 	sts	0x01A2, r24
								eeprom_write_byte(&ee_keyer, FALSE);
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__eewr_byte_m168>

								announce("S", st_freq, wpm);
    2c62:	20 91 ba 01 	lds	r18, 0x01BA
    2c66:	30 91 bb 01 	lds	r19, 0x01BB
    2c6a:	40 91 e6 01 	lds	r20, 0x01E6
    2c6e:	8b e1       	ldi	r24, 0x1B	; 27
    2c70:	91 e0       	ldi	r25, 0x01	; 1
    2c72:	b9 01       	movw	r22, r18
    2c74:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
								cur_mode = default_mode;
								eeprom_write_byte(&ee_keyer, TRUE);

								announce("K", st_freq, wpm);
							}
							break;
    2c78:	2c c0       	rjmp	.+88     	; 0x2cd2 <main+0x13ba>

								announce("S", st_freq, wpm);
							}
							else
							{
								default_mode = KEYER;
    2c7a:	10 92 6d 01 	sts	0x016D, r1
								cur_state = IDLE;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	80 93 c8 01 	sts	0x01C8, r24
								cur_mode = default_mode;
    2c84:	80 91 6d 01 	lds	r24, 0x016D
    2c88:	80 93 a2 01 	sts	0x01A2, r24
								eeprom_write_byte(&ee_keyer, TRUE);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	61 e0       	ldi	r22, 0x01	; 1
    2c92:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__eewr_byte_m168>

								announce("K", st_freq, wpm);
    2c96:	20 91 ba 01 	lds	r18, 0x01BA
    2c9a:	30 91 bb 01 	lds	r19, 0x01BB
    2c9e:	40 91 e6 01 	lds	r20, 0x01E6
    2ca2:	80 e3       	ldi	r24, 0x30	; 48
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	b9 01       	movw	r22, r18
    2ca8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
							}
							break;
    2cac:	12 c0       	rjmp	.+36     	; 0x2cd2 <main+0x13ba>
						}
					}
				}
				else // Bail out of menu if past menu expiration
				{
					cur_state = IDLE;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 c8 01 	sts	0x01C8, r24
					cur_mode = default_mode;
    2cb4:	80 91 6d 01 	lds	r24, 0x016D
    2cb8:	80 93 a2 01 	sts	0x01A2, r24

					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
    2cbc:	20 91 e6 01 	lds	r18, 0x01E6
    2cc0:	81 e2       	ldi	r24, 0x21	; 33
    2cc2:	91 e0       	ldi	r25, 0x01	; 1
    2cc4:	60 e9       	ldi	r22, 0x90	; 144
    2cc6:	71 e0       	ldi	r23, 0x01	; 1
    2cc8:	42 2f       	mov	r20, r18
    2cca:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
    2cce:	01 c0       	rjmp	.+2      	; 0x2cd2 <main+0x13ba>
								announce("K", st_freq, wpm);
							}
							break;

						default:
							break;
    2cd0:	00 00       	nop
					// Send "X" to indicate expiration
					//set_st_freq(ST_LOW);
					announce("X", ST_LOW, wpm);
				}

				free(text_buffer);
    2cd2:	80 91 40 01 	lds	r24, 0x0140
    2cd6:	90 91 41 01 	lds	r25, 0x0141
    2cda:	0e 94 a8 1a 	call	0x3550	; 0x3550 <free>
				break;
    2cde:	08 c0       	rjmp	.+16     	; 0x2cf0 <main+0x13d8>

			default:
				cur_state = IDLE;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	80 93 c8 01 	sts	0x01C8, r24
				cur_mode = default_mode;
    2ce6:	80 91 6d 01 	lds	r24, 0x016D
    2cea:	80 93 a2 01 	sts	0x01A2, r24
				break;
    2cee:	00 00       	nop
			}
			break;
    2cf0:	2b c3       	rjmp	.+1622   	; 0x3348 <main+0x1a30>

		case SETWPM:
			if(cur_timer < cur_state_end)
    2cf2:	20 91 68 01 	lds	r18, 0x0168
    2cf6:	30 91 69 01 	lds	r19, 0x0169
    2cfa:	40 91 6a 01 	lds	r20, 0x016A
    2cfe:	50 91 6b 01 	lds	r21, 0x016B
    2d02:	80 91 d4 01 	lds	r24, 0x01D4
    2d06:	90 91 d5 01 	lds	r25, 0x01D5
    2d0a:	a0 91 d6 01 	lds	r26, 0x01D6
    2d0e:	b0 91 d7 01 	lds	r27, 0x01D7
    2d12:	28 17       	cp	r18, r24
    2d14:	39 07       	cpc	r19, r25
    2d16:	4a 07       	cpc	r20, r26
    2d18:	5b 07       	cpc	r21, r27
    2d1a:	08 f0       	brcs	.+2      	; 0x2d1e <main+0x1406>
    2d1c:	63 c0       	rjmp	.+198    	; 0x2de4 <main+0x14cc>
			{
				if(cmd_btn == PRESS)
    2d1e:	80 91 c7 01 	lds	r24, 0x01C7
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	69 f5       	brne	.+90     	; 0x2d80 <main+0x1468>
				{
					if(wpm < MAX_WPM)
    2d26:	80 91 e6 01 	lds	r24, 0x01E6
    2d2a:	88 32       	cpi	r24, 0x28	; 40
    2d2c:	28 f4       	brcc	.+10     	; 0x2d38 <main+0x1420>
						wpm++;
    2d2e:	80 91 e6 01 	lds	r24, 0x01E6
    2d32:	8f 5f       	subi	r24, 0xFF	; 255
    2d34:	80 93 e6 01 	sts	0x01E6, r24
					set_wpm(wpm);
    2d38:	80 91 e6 01 	lds	r24, 0x01E6
    2d3c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2d40:	80 91 68 01 	lds	r24, 0x0168
    2d44:	90 91 69 01 	lds	r25, 0x0169
    2d48:	a0 91 6a 01 	lds	r26, 0x016A
    2d4c:	b0 91 6b 01 	lds	r27, 0x016B
    2d50:	80 56       	subi	r24, 0x60	; 96
    2d52:	90 4f       	sbci	r25, 0xF0	; 240
    2d54:	af 4f       	sbci	r26, 0xFF	; 255
    2d56:	bf 4f       	sbci	r27, 0xFF	; 255
    2d58:	80 93 d4 01 	sts	0x01D4, r24
    2d5c:	90 93 d5 01 	sts	0x01D5, r25
    2d60:	a0 93 d6 01 	sts	0x01D6, r26
    2d64:	b0 93 d7 01 	sts	0x01D7, r27
					announce("I", st_freq, wpm);
    2d68:	20 91 ba 01 	lds	r18, 0x01BA
    2d6c:	30 91 bb 01 	lds	r19, 0x01BB
    2d70:	40 91 e6 01 	lds	r20, 0x01E6
    2d74:	82 e3       	ldi	r24, 0x32	; 50
    2d76:	91 e0       	ldi	r25, 0x01	; 1
    2d78:	b9 01       	movw	r22, r18
    2d7a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
    2d7e:	70 c0       	rjmp	.+224    	; 0x2e60 <main+0x1548>
				}
				else if(msg_btn == PRESS)
    2d80:	80 91 c5 01 	lds	r24, 0x01C5
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	09 f0       	breq	.+2      	; 0x2d8a <main+0x1472>
    2d88:	6b c0       	rjmp	.+214    	; 0x2e60 <main+0x1548>
				{
					if(wpm > MIN_WPM)
    2d8a:	80 91 e6 01 	lds	r24, 0x01E6
    2d8e:	86 30       	cpi	r24, 0x06	; 6
    2d90:	28 f0       	brcs	.+10     	; 0x2d9c <main+0x1484>
						wpm--;
    2d92:	80 91 e6 01 	lds	r24, 0x01E6
    2d96:	81 50       	subi	r24, 0x01	; 1
    2d98:	80 93 e6 01 	sts	0x01E6, r24
					set_wpm(wpm);
    2d9c:	80 91 e6 01 	lds	r24, 0x01E6
    2da0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <set_wpm>
					cur_state_end = cur_timer + MENU_EXPIRATION;
    2da4:	80 91 68 01 	lds	r24, 0x0168
    2da8:	90 91 69 01 	lds	r25, 0x0169
    2dac:	a0 91 6a 01 	lds	r26, 0x016A
    2db0:	b0 91 6b 01 	lds	r27, 0x016B
    2db4:	80 56       	subi	r24, 0x60	; 96
    2db6:	90 4f       	sbci	r25, 0xF0	; 240
    2db8:	af 4f       	sbci	r26, 0xFF	; 255
    2dba:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbc:	80 93 d4 01 	sts	0x01D4, r24
    2dc0:	90 93 d5 01 	sts	0x01D5, r25
    2dc4:	a0 93 d6 01 	sts	0x01D6, r26
    2dc8:	b0 93 d7 01 	sts	0x01D7, r27
					announce("I", st_freq, wpm);
    2dcc:	20 91 ba 01 	lds	r18, 0x01BA
    2dd0:	30 91 bb 01 	lds	r19, 0x01BB
    2dd4:	40 91 e6 01 	lds	r20, 0x01E6
    2dd8:	82 e3       	ldi	r24, 0x32	; 50
    2dda:	91 e0       	ldi	r25, 0x01	; 1
    2ddc:	b9 01       	movw	r22, r18
    2dde:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
    2de2:	3e c0       	rjmp	.+124    	; 0x2e60 <main+0x1548>
				}
			}
			else // done setting WPM, announce current setting
			{
				// Save WPM in EEPROM
				eeprom_write_byte(&ee_wpm, wpm);
    2de4:	20 91 e6 01 	lds	r18, 0x01E6
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	62 2f       	mov	r22, r18
    2dee:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__eewr_byte_m168>

				cur_state = IDLE;
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	80 93 c8 01 	sts	0x01C8, r24
				cur_mode = default_mode;
    2df8:	80 91 6d 01 	lds	r24, 0x016D
    2dfc:	80 93 a2 01 	sts	0x01A2, r24

				sprintf(text_buffer, "%d", wpm);
    2e00:	40 91 40 01 	lds	r20, 0x0140
    2e04:	50 91 41 01 	lds	r21, 0x0141
    2e08:	80 91 e6 01 	lds	r24, 0x01E6
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <main+0x14fa>
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <main+0x14fc>
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <main+0x14fe>
    2e16:	8d b7       	in	r24, 0x3d	; 61
    2e18:	9e b7       	in	r25, 0x3e	; 62
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	51 83       	std	Z+1, r21	; 0x01
    2e20:	40 83       	st	Z, r20
    2e22:	4d e2       	ldi	r20, 0x2D	; 45
    2e24:	51 e0       	ldi	r21, 0x01	; 1
    2e26:	fc 01       	movw	r30, r24
    2e28:	53 83       	std	Z+3, r21	; 0x03
    2e2a:	42 83       	std	Z+2, r20	; 0x02
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	35 83       	std	Z+5, r19	; 0x05
    2e30:	24 83       	std	Z+4, r18	; 0x04
    2e32:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <sprintf>
    2e36:	8d b7       	in	r24, 0x3d	; 61
    2e38:	9e b7       	in	r25, 0x3e	; 62
    2e3a:	06 96       	adiw	r24, 0x06	; 6
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	9e bf       	out	0x3e, r25	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	8d bf       	out	0x3d, r24	; 61
				announce(text_buffer, st_freq, wpm);
    2e46:	80 91 40 01 	lds	r24, 0x0140
    2e4a:	90 91 41 01 	lds	r25, 0x0141
    2e4e:	20 91 ba 01 	lds	r18, 0x01BA
    2e52:	30 91 bb 01 	lds	r19, 0x01BB
    2e56:	40 91 e6 01 	lds	r20, 0x01E6
    2e5a:	b9 01       	movw	r22, r18
    2e5c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <announce>
			}
			break;
    2e60:	73 c2       	rjmp	.+1254   	; 0x3348 <main+0x1a30>

		// Consolidate with ANNOUNCE code
		case PLAYBACK:
			// Cancel playback if any button pressed
			if(ANYBUTTON)
    2e62:	80 91 dc 01 	lds	r24, 0x01DC
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	61 f0       	breq	.+24     	; 0x2e82 <main+0x156a>
    2e6a:	80 91 c0 01 	lds	r24, 0x01C0
    2e6e:	81 30       	cpi	r24, 0x01	; 1
    2e70:	41 f0       	breq	.+16     	; 0x2e82 <main+0x156a>
    2e72:	80 91 c7 01 	lds	r24, 0x01C7
    2e76:	81 30       	cpi	r24, 0x01	; 1
    2e78:	21 f0       	breq	.+8      	; 0x2e82 <main+0x156a>
    2e7a:	80 91 c5 01 	lds	r24, 0x01C5
    2e7e:	81 30       	cpi	r24, 0x01	; 1
    2e80:	e9 f5       	brne	.+122    	; 0x2efc <main+0x15e4>
			{
				// Clear the announcement buffer and set buffer pointer back to beginning
				strcpy(announce_buffer, "");
    2e82:	80 91 eb 01 	lds	r24, 0x01EB
    2e86:	90 91 ec 01 	lds	r25, 0x01EC
    2e8a:	2c e2       	ldi	r18, 0x2C	; 44
    2e8c:	31 e0       	ldi	r19, 0x01	; 1
    2e8e:	b9 01       	movw	r22, r18
    2e90:	41 e0       	ldi	r20, 0x01	; 1
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	0e 94 41 1b 	call	0x3682	; 0x3682 <memcpy>
				cur_char_p = announce_buffer;
    2e98:	80 91 eb 01 	lds	r24, 0x01EB
    2e9c:	90 91 ec 01 	lds	r25, 0x01EC
    2ea0:	90 93 3f 01 	sts	0x013F, r25
    2ea4:	80 93 3e 01 	sts	0x013E, r24
				cur_character = '\0';
    2ea8:	10 92 42 01 	sts	0x0142, r1

				// Set back into previous mode
				mute_end = cur_timer;
    2eac:	80 91 68 01 	lds	r24, 0x0168
    2eb0:	90 91 69 01 	lds	r25, 0x0169
    2eb4:	a0 91 6a 01 	lds	r26, 0x016A
    2eb8:	b0 91 6b 01 	lds	r27, 0x016B
    2ebc:	80 93 d8 01 	sts	0x01D8, r24
    2ec0:	90 93 d9 01 	sts	0x01D9, r25
    2ec4:	a0 93 da 01 	sts	0x01DA, r26
    2ec8:	b0 93 db 01 	sts	0x01DB, r27
				cur_mode = prev_mode;
    2ecc:	80 91 b8 01 	lds	r24, 0x01B8
    2ed0:	80 93 a2 01 	sts	0x01A2, r24
				cur_state = prev_state;
    2ed4:	80 91 72 01 	lds	r24, 0x0172
    2ed8:	80 93 c8 01 	sts	0x01C8, r24
				cur_state_end = prev_state_end;
    2edc:	80 91 b4 01 	lds	r24, 0x01B4
    2ee0:	90 91 b5 01 	lds	r25, 0x01B5
    2ee4:	a0 91 b6 01 	lds	r26, 0x01B6
    2ee8:	b0 91 b7 01 	lds	r27, 0x01B7
    2eec:	80 93 d4 01 	sts	0x01D4, r24
    2ef0:	90 93 d5 01 	sts	0x01D5, r25
    2ef4:	a0 93 d6 01 	sts	0x01D6, r26
    2ef8:	b0 93 d7 01 	sts	0x01D7, r27
			}

			switch(cur_state)
    2efc:	80 91 c8 01 	lds	r24, 0x01C8
    2f00:	88 2f       	mov	r24, r24
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	84 30       	cpi	r24, 0x04	; 4
    2f06:	91 05       	cpc	r25, r1
    2f08:	44 f4       	brge	.+16     	; 0x2f1a <main+0x1602>
    2f0a:	82 30       	cpi	r24, 0x02	; 2
    2f0c:	91 05       	cpc	r25, r1
    2f0e:	0c f0       	brlt	.+2      	; 0x2f12 <main+0x15fa>
    2f10:	bb c1       	rjmp	.+886    	; 0x3288 <main+0x1970>
    2f12:	81 30       	cpi	r24, 0x01	; 1
    2f14:	91 05       	cpc	r25, r1
    2f16:	31 f0       	breq	.+12     	; 0x2f24 <main+0x160c>
    2f18:	14 c2       	rjmp	.+1064   	; 0x3342 <main+0x1a2a>
    2f1a:	87 30       	cpi	r24, 0x07	; 7
    2f1c:	91 05       	cpc	r25, r1
    2f1e:	0c f0       	brlt	.+2      	; 0x2f22 <main+0x160a>
    2f20:	10 c2       	rjmp	.+1056   	; 0x3342 <main+0x1a2a>
    2f22:	ef c1       	rjmp	.+990    	; 0x3302 <main+0x19ea>
			{
			case IDLE:
				// If this is the first time thru the PLAYBACK loop, get the first character
				if((cur_char_p == announce_buffer) && (cur_character == '\0'))
    2f24:	20 91 3e 01 	lds	r18, 0x013E
    2f28:	30 91 3f 01 	lds	r19, 0x013F
    2f2c:	80 91 eb 01 	lds	r24, 0x01EB
    2f30:	90 91 ec 01 	lds	r25, 0x01EC
    2f34:	28 17       	cp	r18, r24
    2f36:	39 07       	cpc	r19, r25
    2f38:	c9 f4       	brne	.+50     	; 0x2f6c <main+0x1654>
    2f3a:	80 91 42 01 	lds	r24, 0x0142
    2f3e:	88 23       	and	r24, r24
    2f40:	a9 f4       	brne	.+42     	; 0x2f6c <main+0x1654>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    2f42:	80 91 3e 01 	lds	r24, 0x013E
    2f46:	90 91 3f 01 	lds	r25, 0x013F
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	80 81       	ld	r24, Z
    2f4e:	88 2f       	mov	r24, r24
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	80 97       	sbiw	r24, 0x20	; 32
    2f54:	88 59       	subi	r24, 0x98	; 152
    2f56:	9f 4f       	sbci	r25, 0xFF	; 255
    2f58:	99 87       	std	Y+9, r25	; 0x09
    2f5a:	88 87       	std	Y+8, r24	; 0x08
    2f5c:	88 85       	ldd	r24, Y+8	; 0x08
    2f5e:	99 85       	ldd	r25, Y+9	; 0x09
    2f60:	fc 01       	movw	r30, r24
    2f62:	14 91       	lpm	r17, Z+
    2f64:	1a 87       	std	Y+10, r17	; 0x0a
    2f66:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f68:	80 93 42 01 	sts	0x0142, r24
				}

				// Get the current element in the current character
				if(cur_character != '\0')
    2f6c:	80 91 42 01 	lds	r24, 0x0142
    2f70:	88 23       	and	r24, r24
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <main+0x165e>
    2f74:	4b c1       	rjmp	.+662    	; 0x320c <main+0x18f4>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
    2f76:	80 91 42 01 	lds	r24, 0x0142
    2f7a:	80 38       	cpi	r24, 0x80	; 128
    2f7c:	29 f0       	breq	.+10     	; 0x2f88 <main+0x1670>
    2f7e:	80 91 42 01 	lds	r24, 0x0142
    2f82:	8f 3f       	cpi	r24, 0xFF	; 255
    2f84:	09 f0       	breq	.+2      	; 0x2f88 <main+0x1670>
    2f86:	79 c0       	rjmp	.+242    	; 0x307a <main+0x1762>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
    2f88:	80 91 42 01 	lds	r24, 0x0142
    2f8c:	80 38       	cpi	r24, 0x80	; 128
    2f8e:	21 f5       	brne	.+72     	; 0x2fd8 <main+0x16c0>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    2f90:	20 91 73 01 	lds	r18, 0x0173
    2f94:	30 91 74 01 	lds	r19, 0x0174
    2f98:	c9 01       	movw	r24, r18
    2f9a:	88 0f       	add	r24, r24
    2f9c:	99 1f       	adc	r25, r25
    2f9e:	82 0f       	add	r24, r18
    2fa0:	93 1f       	adc	r25, r19
    2fa2:	9c 01       	movw	r18, r24
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	50 e0       	ldi	r21, 0x00	; 0
    2fa8:	80 91 68 01 	lds	r24, 0x0168
    2fac:	90 91 69 01 	lds	r25, 0x0169
    2fb0:	a0 91 6a 01 	lds	r26, 0x016A
    2fb4:	b0 91 6b 01 	lds	r27, 0x016B
    2fb8:	82 0f       	add	r24, r18
    2fba:	93 1f       	adc	r25, r19
    2fbc:	a4 1f       	adc	r26, r20
    2fbe:	b5 1f       	adc	r27, r21
    2fc0:	80 93 d4 01 	sts	0x01D4, r24
    2fc4:	90 93 d5 01 	sts	0x01D5, r25
    2fc8:	a0 93 d6 01 	sts	0x01D6, r26
    2fcc:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAHDELAY;
    2fd0:	85 e0       	ldi	r24, 0x05	; 5
    2fd2:	80 93 c8 01 	sts	0x01C8, r24
    2fd6:	27 c0       	rjmp	.+78     	; 0x3026 <main+0x170e>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * 7);
    2fd8:	20 91 73 01 	lds	r18, 0x0173
    2fdc:	30 91 74 01 	lds	r19, 0x0174
    2fe0:	c9 01       	movw	r24, r18
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	82 1b       	sub	r24, r18
    2ff0:	93 0b       	sbc	r25, r19
    2ff2:	9c 01       	movw	r18, r24
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	80 91 68 01 	lds	r24, 0x0168
    2ffc:	90 91 69 01 	lds	r25, 0x0169
    3000:	a0 91 6a 01 	lds	r26, 0x016A
    3004:	b0 91 6b 01 	lds	r27, 0x016B
    3008:	82 0f       	add	r24, r18
    300a:	93 1f       	adc	r25, r19
    300c:	a4 1f       	adc	r26, r20
    300e:	b5 1f       	adc	r27, r21
    3010:	80 93 d4 01 	sts	0x01D4, r24
    3014:	90 93 d5 01 	sts	0x01D5, r25
    3018:	a0 93 d6 01 	sts	0x01D6, r26
    301c:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAHDELAY;
    3020:	85 e0       	ldi	r24, 0x05	; 5
    3022:	80 93 c8 01 	sts	0x01C8, r24
						}

						// Grab next character, set state to inter-character delay
						cur_char_p++;
    3026:	80 91 3e 01 	lds	r24, 0x013E
    302a:	90 91 3f 01 	lds	r25, 0x013F
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	90 93 3f 01 	sts	0x013F, r25
    3034:	80 93 3e 01 	sts	0x013E, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    3038:	80 91 3e 01 	lds	r24, 0x013E
    303c:	90 91 3f 01 	lds	r25, 0x013F
    3040:	fc 01       	movw	r30, r24
    3042:	80 81       	ld	r24, Z
    3044:	88 23       	and	r24, r24
    3046:	19 f4       	brne	.+6      	; 0x304e <main+0x1736>
							cur_character = '\0';
    3048:	10 92 42 01 	sts	0x0142, r1
    304c:	15 c0       	rjmp	.+42     	; 0x3078 <main+0x1760>
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
    304e:	80 91 3e 01 	lds	r24, 0x013E
    3052:	90 91 3f 01 	lds	r25, 0x013F
    3056:	fc 01       	movw	r30, r24
    3058:	80 81       	ld	r24, Z
    305a:	88 2f       	mov	r24, r24
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	80 97       	sbiw	r24, 0x20	; 32
    3060:	88 59       	subi	r24, 0x98	; 152
    3062:	9f 4f       	sbci	r25, 0xFF	; 255
    3064:	9c 87       	std	Y+12, r25	; 0x0c
    3066:	8b 87       	std	Y+11, r24	; 0x0b
    3068:	8b 85       	ldd	r24, Y+11	; 0x0b
    306a:	9c 85       	ldd	r25, Y+12	; 0x0c
    306c:	fc 01       	movw	r30, r24
    306e:	14 91       	lpm	r17, Z+
    3070:	1d 87       	std	Y+13, r17	; 0x0d
    3072:	8d 85       	ldd	r24, Y+13	; 0x0d
    3074:	80 93 42 01 	sts	0x0142, r24
						// Grab next character, set state to inter-character delay
						cur_char_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_char_p) == '\0')
    3078:	c8 c0       	rjmp	.+400    	; 0x320a <main+0x18f2>
							cur_character = pgm_read_byte(&morsechar[(*cur_char_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
    307a:	80 91 42 01 	lds	r24, 0x0142
    307e:	88 23       	and	r24, r24
    3080:	0c f0       	brlt	.+2      	; 0x3084 <main+0x176c>
    3082:	62 c0       	rjmp	.+196    	; 0x3148 <main+0x1830>
						{
							cur_state_end = cur_timer + (dit_length * 3);
    3084:	20 91 73 01 	lds	r18, 0x0173
    3088:	30 91 74 01 	lds	r19, 0x0174
    308c:	c9 01       	movw	r24, r18
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	9c 01       	movw	r18, r24
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	50 e0       	ldi	r21, 0x00	; 0
    309c:	80 91 68 01 	lds	r24, 0x0168
    30a0:	90 91 69 01 	lds	r25, 0x0169
    30a4:	a0 91 6a 01 	lds	r26, 0x016A
    30a8:	b0 91 6b 01 	lds	r27, 0x016B
    30ac:	82 0f       	add	r24, r18
    30ae:	93 1f       	adc	r25, r19
    30b0:	a4 1f       	adc	r26, r20
    30b2:	b5 1f       	adc	r27, r21
    30b4:	80 93 d4 01 	sts	0x01D4, r24
    30b8:	90 93 d5 01 	sts	0x01D5, r25
    30bc:	a0 93 d6 01 	sts	0x01D6, r26
    30c0:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DAH;
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	80 93 c8 01 	sts	0x01C8, r24
							tx_start = cur_timer + TX_ON_DELAY;
    30ca:	80 91 68 01 	lds	r24, 0x0168
    30ce:	90 91 69 01 	lds	r25, 0x0169
    30d2:	a0 91 6a 01 	lds	r26, 0x016A
    30d6:	b0 91 6b 01 	lds	r27, 0x016B
    30da:	01 96       	adiw	r24, 0x01	; 1
    30dc:	a1 1d       	adc	r26, r1
    30de:	b1 1d       	adc	r27, r1
    30e0:	80 93 a8 01 	sts	0x01A8, r24
    30e4:	90 93 a9 01 	sts	0x01A9, r25
    30e8:	a0 93 aa 01 	sts	0x01AA, r26
    30ec:	b0 93 ab 01 	sts	0x01AB, r27
							tx_end = cur_state_end;
    30f0:	80 91 d4 01 	lds	r24, 0x01D4
    30f4:	90 91 d5 01 	lds	r25, 0x01D5
    30f8:	a0 91 d6 01 	lds	r26, 0x01D6
    30fc:	b0 91 d7 01 	lds	r27, 0x01D7
    3100:	80 93 ed 01 	sts	0x01ED, r24
    3104:	90 93 ee 01 	sts	0x01EE, r25
    3108:	a0 93 ef 01 	sts	0x01EF, r26
    310c:	b0 93 f0 01 	sts	0x01F0, r27
							mute_start = cur_timer;
    3110:	80 91 68 01 	lds	r24, 0x0168
    3114:	90 91 69 01 	lds	r25, 0x0169
    3118:	a0 91 6a 01 	lds	r26, 0x016A
    311c:	b0 91 6b 01 	lds	r27, 0x016B
    3120:	80 93 e7 01 	sts	0x01E7, r24
    3124:	90 93 e8 01 	sts	0x01E8, r25
    3128:	a0 93 e9 01 	sts	0x01E9, r26
    312c:	b0 93 ea 01 	sts	0x01EA, r27
							mute_end = UINT32_MAX;
    3130:	8f ef       	ldi	r24, 0xFF	; 255
    3132:	9f ef       	ldi	r25, 0xFF	; 255
    3134:	dc 01       	movw	r26, r24
    3136:	80 93 d8 01 	sts	0x01D8, r24
    313a:	90 93 d9 01 	sts	0x01D9, r25
    313e:	a0 93 da 01 	sts	0x01DA, r26
    3142:	b0 93 db 01 	sts	0x01DB, r27
    3146:	5c c0       	rjmp	.+184    	; 0x3200 <main+0x18e8>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
    3148:	80 91 73 01 	lds	r24, 0x0173
    314c:	90 91 74 01 	lds	r25, 0x0174
    3150:	9c 01       	movw	r18, r24
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	80 91 68 01 	lds	r24, 0x0168
    315a:	90 91 69 01 	lds	r25, 0x0169
    315e:	a0 91 6a 01 	lds	r26, 0x016A
    3162:	b0 91 6b 01 	lds	r27, 0x016B
    3166:	82 0f       	add	r24, r18
    3168:	93 1f       	adc	r25, r19
    316a:	a4 1f       	adc	r26, r20
    316c:	b5 1f       	adc	r27, r21
    316e:	80 93 d4 01 	sts	0x01D4, r24
    3172:	90 93 d5 01 	sts	0x01D5, r25
    3176:	a0 93 d6 01 	sts	0x01D6, r26
    317a:	b0 93 d7 01 	sts	0x01D7, r27
							cur_state = DIT;
    317e:	82 e0       	ldi	r24, 0x02	; 2
    3180:	80 93 c8 01 	sts	0x01C8, r24
							tx_start = cur_timer + TX_ON_DELAY;
    3184:	80 91 68 01 	lds	r24, 0x0168
    3188:	90 91 69 01 	lds	r25, 0x0169
    318c:	a0 91 6a 01 	lds	r26, 0x016A
    3190:	b0 91 6b 01 	lds	r27, 0x016B
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	a1 1d       	adc	r26, r1
    3198:	b1 1d       	adc	r27, r1
    319a:	80 93 a8 01 	sts	0x01A8, r24
    319e:	90 93 a9 01 	sts	0x01A9, r25
    31a2:	a0 93 aa 01 	sts	0x01AA, r26
    31a6:	b0 93 ab 01 	sts	0x01AB, r27
							tx_end = cur_state_end;
    31aa:	80 91 d4 01 	lds	r24, 0x01D4
    31ae:	90 91 d5 01 	lds	r25, 0x01D5
    31b2:	a0 91 d6 01 	lds	r26, 0x01D6
    31b6:	b0 91 d7 01 	lds	r27, 0x01D7
    31ba:	80 93 ed 01 	sts	0x01ED, r24
    31be:	90 93 ee 01 	sts	0x01EE, r25
    31c2:	a0 93 ef 01 	sts	0x01EF, r26
    31c6:	b0 93 f0 01 	sts	0x01F0, r27
							mute_start = cur_timer;
    31ca:	80 91 68 01 	lds	r24, 0x0168
    31ce:	90 91 69 01 	lds	r25, 0x0169
    31d2:	a0 91 6a 01 	lds	r26, 0x016A
    31d6:	b0 91 6b 01 	lds	r27, 0x016B
    31da:	80 93 e7 01 	sts	0x01E7, r24
    31de:	90 93 e8 01 	sts	0x01E8, r25
    31e2:	a0 93 e9 01 	sts	0x01E9, r26
    31e6:	b0 93 ea 01 	sts	0x01EA, r27
							mute_end = UINT32_MAX;
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	9f ef       	ldi	r25, 0xFF	; 255
    31ee:	dc 01       	movw	r26, r24
    31f0:	80 93 d8 01 	sts	0x01D8, r24
    31f4:	90 93 d9 01 	sts	0x01D9, r25
    31f8:	a0 93 da 01 	sts	0x01DA, r26
    31fc:	b0 93 db 01 	sts	0x01DB, r27
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
    3200:	80 91 42 01 	lds	r24, 0x0142
    3204:	88 0f       	add	r24, r24
    3206:	80 93 42 01 	sts	0x0142, r24
    320a:	3d c0       	rjmp	.+122    	; 0x3286 <main+0x196e>
					}
				}
				else
				{
					// Clear the announcement buffer and set buffer pointer back to beginning
					strcpy(announce_buffer, "");
    320c:	80 91 eb 01 	lds	r24, 0x01EB
    3210:	90 91 ec 01 	lds	r25, 0x01EC
    3214:	2c e2       	ldi	r18, 0x2C	; 44
    3216:	31 e0       	ldi	r19, 0x01	; 1
    3218:	b9 01       	movw	r22, r18
    321a:	41 e0       	ldi	r20, 0x01	; 1
    321c:	50 e0       	ldi	r21, 0x00	; 0
    321e:	0e 94 41 1b 	call	0x3682	; 0x3682 <memcpy>
					cur_char_p = announce_buffer;
    3222:	80 91 eb 01 	lds	r24, 0x01EB
    3226:	90 91 ec 01 	lds	r25, 0x01EC
    322a:	90 93 3f 01 	sts	0x013F, r25
    322e:	80 93 3e 01 	sts	0x013E, r24
					cur_character = '\0';
    3232:	10 92 42 01 	sts	0x0142, r1

					// Set back into previous mode
					mute_end = cur_timer;
    3236:	80 91 68 01 	lds	r24, 0x0168
    323a:	90 91 69 01 	lds	r25, 0x0169
    323e:	a0 91 6a 01 	lds	r26, 0x016A
    3242:	b0 91 6b 01 	lds	r27, 0x016B
    3246:	80 93 d8 01 	sts	0x01D8, r24
    324a:	90 93 d9 01 	sts	0x01D9, r25
    324e:	a0 93 da 01 	sts	0x01DA, r26
    3252:	b0 93 db 01 	sts	0x01DB, r27
					cur_mode = prev_mode;
    3256:	80 91 b8 01 	lds	r24, 0x01B8
    325a:	80 93 a2 01 	sts	0x01A2, r24
					cur_state = prev_state;
    325e:	80 91 72 01 	lds	r24, 0x0172
    3262:	80 93 c8 01 	sts	0x01C8, r24
					cur_state_end = prev_state_end;
    3266:	80 91 b4 01 	lds	r24, 0x01B4
    326a:	90 91 b5 01 	lds	r25, 0x01B5
    326e:	a0 91 b6 01 	lds	r26, 0x01B6
    3272:	b0 91 b7 01 	lds	r27, 0x01B7
    3276:	80 93 d4 01 	sts	0x01D4, r24
    327a:	90 93 d5 01 	sts	0x01D5, r25
    327e:	a0 93 d6 01 	sts	0x01D6, r26
    3282:	b0 93 d7 01 	sts	0x01D7, r27
				}
				break;
    3286:	5e c0       	rjmp	.+188    	; 0x3344 <main+0x1a2c>

			case DIT:
			case DAH:
				if(cur_timer > cur_state_end)
    3288:	20 91 68 01 	lds	r18, 0x0168
    328c:	30 91 69 01 	lds	r19, 0x0169
    3290:	40 91 6a 01 	lds	r20, 0x016A
    3294:	50 91 6b 01 	lds	r21, 0x016B
    3298:	80 91 d4 01 	lds	r24, 0x01D4
    329c:	90 91 d5 01 	lds	r25, 0x01D5
    32a0:	a0 91 d6 01 	lds	r26, 0x01D6
    32a4:	b0 91 d7 01 	lds	r27, 0x01D7
    32a8:	82 17       	cp	r24, r18
    32aa:	93 07       	cpc	r25, r19
    32ac:	a4 07       	cpc	r26, r20
    32ae:	b5 07       	cpc	r27, r21
    32b0:	f0 f4       	brcc	.+60     	; 0x32ee <main+0x19d6>
				{
					cur_state_end = cur_timer + dit_length;
    32b2:	80 91 73 01 	lds	r24, 0x0173
    32b6:	90 91 74 01 	lds	r25, 0x0174
    32ba:	9c 01       	movw	r18, r24
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	50 e0       	ldi	r21, 0x00	; 0
    32c0:	80 91 68 01 	lds	r24, 0x0168
    32c4:	90 91 69 01 	lds	r25, 0x0169
    32c8:	a0 91 6a 01 	lds	r26, 0x016A
    32cc:	b0 91 6b 01 	lds	r27, 0x016B
    32d0:	82 0f       	add	r24, r18
    32d2:	93 1f       	adc	r25, r19
    32d4:	a4 1f       	adc	r26, r20
    32d6:	b5 1f       	adc	r27, r21
    32d8:	80 93 d4 01 	sts	0x01D4, r24
    32dc:	90 93 d5 01 	sts	0x01D5, r25
    32e0:	a0 93 d6 01 	sts	0x01D6, r26
    32e4:	b0 93 d7 01 	sts	0x01D7, r27
					cur_state = DITDELAY;
    32e8:	84 e0       	ldi	r24, 0x04	; 4
    32ea:	80 93 c8 01 	sts	0x01C8, r24
				}

				key_down = TRUE;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	80 93 3c 01 	sts	0x013C, r24
				sidetone_on = TRUE;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	80 93 3a 01 	sts	0x013A, r24
				mute_on = TRUE;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	80 93 3b 01 	sts	0x013B, r24
				break;
    3300:	21 c0       	rjmp	.+66     	; 0x3344 <main+0x1a2c>

			case DITDELAY:
			case DAHDELAY:
			case WORDDELAY:
				if(cur_timer > cur_state_end)
    3302:	20 91 68 01 	lds	r18, 0x0168
    3306:	30 91 69 01 	lds	r19, 0x0169
    330a:	40 91 6a 01 	lds	r20, 0x016A
    330e:	50 91 6b 01 	lds	r21, 0x016B
    3312:	80 91 d4 01 	lds	r24, 0x01D4
    3316:	90 91 d5 01 	lds	r25, 0x01D5
    331a:	a0 91 d6 01 	lds	r26, 0x01D6
    331e:	b0 91 d7 01 	lds	r27, 0x01D7
    3322:	82 17       	cp	r24, r18
    3324:	93 07       	cpc	r25, r19
    3326:	a4 07       	cpc	r26, r20
    3328:	b5 07       	cpc	r27, r21
    332a:	18 f4       	brcc	.+6      	; 0x3332 <main+0x1a1a>
					cur_state = IDLE;
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	80 93 c8 01 	sts	0x01C8, r24

				key_down = FALSE;
    3332:	10 92 3c 01 	sts	0x013C, r1
				sidetone_on = FALSE;
    3336:	10 92 3a 01 	sts	0x013A, r1
				mute_on = TRUE;
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	80 93 3b 01 	sts	0x013B, r24
				break;
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <main+0x1a2c>

			default:
				break;
    3342:	00 00       	nop
			}
			break;
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <main+0x1a30>
				break;
			}
			break;
		*/
		default:
			break;
    3346:	00 00       	nop
		} // END switch(cur_mode)

	}
    3348:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <main+0xca>

0000334c <__mulsi3>:
    334c:	62 9f       	mul	r22, r18
    334e:	d0 01       	movw	r26, r0
    3350:	73 9f       	mul	r23, r19
    3352:	f0 01       	movw	r30, r0
    3354:	82 9f       	mul	r24, r18
    3356:	e0 0d       	add	r30, r0
    3358:	f1 1d       	adc	r31, r1
    335a:	64 9f       	mul	r22, r20
    335c:	e0 0d       	add	r30, r0
    335e:	f1 1d       	adc	r31, r1
    3360:	92 9f       	mul	r25, r18
    3362:	f0 0d       	add	r31, r0
    3364:	83 9f       	mul	r24, r19
    3366:	f0 0d       	add	r31, r0
    3368:	74 9f       	mul	r23, r20
    336a:	f0 0d       	add	r31, r0
    336c:	65 9f       	mul	r22, r21
    336e:	f0 0d       	add	r31, r0
    3370:	99 27       	eor	r25, r25
    3372:	72 9f       	mul	r23, r18
    3374:	b0 0d       	add	r27, r0
    3376:	e1 1d       	adc	r30, r1
    3378:	f9 1f       	adc	r31, r25
    337a:	63 9f       	mul	r22, r19
    337c:	b0 0d       	add	r27, r0
    337e:	e1 1d       	adc	r30, r1
    3380:	f9 1f       	adc	r31, r25
    3382:	bd 01       	movw	r22, r26
    3384:	cf 01       	movw	r24, r30
    3386:	11 24       	eor	r1, r1
    3388:	08 95       	ret

0000338a <__udivmodhi4>:
    338a:	aa 1b       	sub	r26, r26
    338c:	bb 1b       	sub	r27, r27
    338e:	51 e1       	ldi	r21, 0x11	; 17
    3390:	07 c0       	rjmp	.+14     	; 0x33a0 <__udivmodhi4_ep>

00003392 <__udivmodhi4_loop>:
    3392:	aa 1f       	adc	r26, r26
    3394:	bb 1f       	adc	r27, r27
    3396:	a6 17       	cp	r26, r22
    3398:	b7 07       	cpc	r27, r23
    339a:	10 f0       	brcs	.+4      	; 0x33a0 <__udivmodhi4_ep>
    339c:	a6 1b       	sub	r26, r22
    339e:	b7 0b       	sbc	r27, r23

000033a0 <__udivmodhi4_ep>:
    33a0:	88 1f       	adc	r24, r24
    33a2:	99 1f       	adc	r25, r25
    33a4:	5a 95       	dec	r21
    33a6:	a9 f7       	brne	.-22     	; 0x3392 <__udivmodhi4_loop>
    33a8:	80 95       	com	r24
    33aa:	90 95       	com	r25
    33ac:	bc 01       	movw	r22, r24
    33ae:	cd 01       	movw	r24, r26
    33b0:	08 95       	ret

000033b2 <__divmodhi4>:
    33b2:	97 fb       	bst	r25, 7
    33b4:	09 2e       	mov	r0, r25
    33b6:	07 26       	eor	r0, r23
    33b8:	0a d0       	rcall	.+20     	; 0x33ce <__divmodhi4_neg1>
    33ba:	77 fd       	sbrc	r23, 7
    33bc:	04 d0       	rcall	.+8      	; 0x33c6 <__divmodhi4_neg2>
    33be:	e5 df       	rcall	.-54     	; 0x338a <__udivmodhi4>
    33c0:	06 d0       	rcall	.+12     	; 0x33ce <__divmodhi4_neg1>
    33c2:	00 20       	and	r0, r0
    33c4:	1a f4       	brpl	.+6      	; 0x33cc <__divmodhi4_exit>

000033c6 <__divmodhi4_neg2>:
    33c6:	70 95       	com	r23
    33c8:	61 95       	neg	r22
    33ca:	7f 4f       	sbci	r23, 0xFF	; 255

000033cc <__divmodhi4_exit>:
    33cc:	08 95       	ret

000033ce <__divmodhi4_neg1>:
    33ce:	f6 f7       	brtc	.-4      	; 0x33cc <__divmodhi4_exit>
    33d0:	90 95       	com	r25
    33d2:	81 95       	neg	r24
    33d4:	9f 4f       	sbci	r25, 0xFF	; 255
    33d6:	08 95       	ret

000033d8 <__udivmodsi4>:
    33d8:	a1 e2       	ldi	r26, 0x21	; 33
    33da:	1a 2e       	mov	r1, r26
    33dc:	aa 1b       	sub	r26, r26
    33de:	bb 1b       	sub	r27, r27
    33e0:	fd 01       	movw	r30, r26
    33e2:	0d c0       	rjmp	.+26     	; 0x33fe <__udivmodsi4_ep>

000033e4 <__udivmodsi4_loop>:
    33e4:	aa 1f       	adc	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	ee 1f       	adc	r30, r30
    33ea:	ff 1f       	adc	r31, r31
    33ec:	a2 17       	cp	r26, r18
    33ee:	b3 07       	cpc	r27, r19
    33f0:	e4 07       	cpc	r30, r20
    33f2:	f5 07       	cpc	r31, r21
    33f4:	20 f0       	brcs	.+8      	; 0x33fe <__udivmodsi4_ep>
    33f6:	a2 1b       	sub	r26, r18
    33f8:	b3 0b       	sbc	r27, r19
    33fa:	e4 0b       	sbc	r30, r20
    33fc:	f5 0b       	sbc	r31, r21

000033fe <__udivmodsi4_ep>:
    33fe:	66 1f       	adc	r22, r22
    3400:	77 1f       	adc	r23, r23
    3402:	88 1f       	adc	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	1a 94       	dec	r1
    3408:	69 f7       	brne	.-38     	; 0x33e4 <__udivmodsi4_loop>
    340a:	60 95       	com	r22
    340c:	70 95       	com	r23
    340e:	80 95       	com	r24
    3410:	90 95       	com	r25
    3412:	9b 01       	movw	r18, r22
    3414:	ac 01       	movw	r20, r24
    3416:	bd 01       	movw	r22, r26
    3418:	cf 01       	movw	r24, r30
    341a:	08 95       	ret

0000341c <malloc>:
    341c:	cf 93       	push	r28
    341e:	df 93       	push	r29
    3420:	82 30       	cpi	r24, 0x02	; 2
    3422:	91 05       	cpc	r25, r1
    3424:	10 f4       	brcc	.+4      	; 0x342a <malloc+0xe>
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	e0 91 f5 01 	lds	r30, 0x01F5
    342e:	f0 91 f6 01 	lds	r31, 0x01F6
    3432:	40 e0       	ldi	r20, 0x00	; 0
    3434:	50 e0       	ldi	r21, 0x00	; 0
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	26 c0       	rjmp	.+76     	; 0x3488 <malloc+0x6c>
    343c:	60 81       	ld	r22, Z
    343e:	71 81       	ldd	r23, Z+1	; 0x01
    3440:	68 17       	cp	r22, r24
    3442:	79 07       	cpc	r23, r25
    3444:	e0 f0       	brcs	.+56     	; 0x347e <malloc+0x62>
    3446:	68 17       	cp	r22, r24
    3448:	79 07       	cpc	r23, r25
    344a:	81 f4       	brne	.+32     	; 0x346c <malloc+0x50>
    344c:	82 81       	ldd	r24, Z+2	; 0x02
    344e:	93 81       	ldd	r25, Z+3	; 0x03
    3450:	21 15       	cp	r18, r1
    3452:	31 05       	cpc	r19, r1
    3454:	31 f0       	breq	.+12     	; 0x3462 <malloc+0x46>
    3456:	d9 01       	movw	r26, r18
    3458:	13 96       	adiw	r26, 0x03	; 3
    345a:	9c 93       	st	X, r25
    345c:	8e 93       	st	-X, r24
    345e:	12 97       	sbiw	r26, 0x02	; 2
    3460:	2b c0       	rjmp	.+86     	; 0x34b8 <malloc+0x9c>
    3462:	90 93 f6 01 	sts	0x01F6, r25
    3466:	80 93 f5 01 	sts	0x01F5, r24
    346a:	26 c0       	rjmp	.+76     	; 0x34b8 <malloc+0x9c>
    346c:	41 15       	cp	r20, r1
    346e:	51 05       	cpc	r21, r1
    3470:	19 f0       	breq	.+6      	; 0x3478 <malloc+0x5c>
    3472:	64 17       	cp	r22, r20
    3474:	75 07       	cpc	r23, r21
    3476:	18 f4       	brcc	.+6      	; 0x347e <malloc+0x62>
    3478:	ab 01       	movw	r20, r22
    347a:	e9 01       	movw	r28, r18
    347c:	df 01       	movw	r26, r30
    347e:	9f 01       	movw	r18, r30
    3480:	72 81       	ldd	r23, Z+2	; 0x02
    3482:	63 81       	ldd	r22, Z+3	; 0x03
    3484:	e7 2f       	mov	r30, r23
    3486:	f6 2f       	mov	r31, r22
    3488:	30 97       	sbiw	r30, 0x00	; 0
    348a:	c1 f6       	brne	.-80     	; 0x343c <malloc+0x20>
    348c:	41 15       	cp	r20, r1
    348e:	51 05       	cpc	r21, r1
    3490:	01 f1       	breq	.+64     	; 0x34d2 <malloc+0xb6>
    3492:	48 1b       	sub	r20, r24
    3494:	59 0b       	sbc	r21, r25
    3496:	44 30       	cpi	r20, 0x04	; 4
    3498:	51 05       	cpc	r21, r1
    349a:	80 f4       	brcc	.+32     	; 0x34bc <malloc+0xa0>
    349c:	12 96       	adiw	r26, 0x02	; 2
    349e:	8d 91       	ld	r24, X+
    34a0:	9c 91       	ld	r25, X
    34a2:	13 97       	sbiw	r26, 0x03	; 3
    34a4:	20 97       	sbiw	r28, 0x00	; 0
    34a6:	19 f0       	breq	.+6      	; 0x34ae <malloc+0x92>
    34a8:	9b 83       	std	Y+3, r25	; 0x03
    34aa:	8a 83       	std	Y+2, r24	; 0x02
    34ac:	04 c0       	rjmp	.+8      	; 0x34b6 <malloc+0x9a>
    34ae:	90 93 f6 01 	sts	0x01F6, r25
    34b2:	80 93 f5 01 	sts	0x01F5, r24
    34b6:	fd 01       	movw	r30, r26
    34b8:	32 96       	adiw	r30, 0x02	; 2
    34ba:	46 c0       	rjmp	.+140    	; 0x3548 <malloc+0x12c>
    34bc:	fd 01       	movw	r30, r26
    34be:	e4 0f       	add	r30, r20
    34c0:	f5 1f       	adc	r31, r21
    34c2:	81 93       	st	Z+, r24
    34c4:	91 93       	st	Z+, r25
    34c6:	42 50       	subi	r20, 0x02	; 2
    34c8:	50 40       	sbci	r21, 0x00	; 0
    34ca:	11 96       	adiw	r26, 0x01	; 1
    34cc:	5c 93       	st	X, r21
    34ce:	4e 93       	st	-X, r20
    34d0:	3b c0       	rjmp	.+118    	; 0x3548 <malloc+0x12c>
    34d2:	20 91 f3 01 	lds	r18, 0x01F3
    34d6:	30 91 f4 01 	lds	r19, 0x01F4
    34da:	21 15       	cp	r18, r1
    34dc:	31 05       	cpc	r19, r1
    34de:	41 f4       	brne	.+16     	; 0x34f0 <malloc+0xd4>
    34e0:	20 91 36 01 	lds	r18, 0x0136
    34e4:	30 91 37 01 	lds	r19, 0x0137
    34e8:	30 93 f4 01 	sts	0x01F4, r19
    34ec:	20 93 f3 01 	sts	0x01F3, r18
    34f0:	20 91 38 01 	lds	r18, 0x0138
    34f4:	30 91 39 01 	lds	r19, 0x0139
    34f8:	21 15       	cp	r18, r1
    34fa:	31 05       	cpc	r19, r1
    34fc:	41 f4       	brne	.+16     	; 0x350e <malloc+0xf2>
    34fe:	2d b7       	in	r18, 0x3d	; 61
    3500:	3e b7       	in	r19, 0x3e	; 62
    3502:	40 91 34 01 	lds	r20, 0x0134
    3506:	50 91 35 01 	lds	r21, 0x0135
    350a:	24 1b       	sub	r18, r20
    350c:	35 0b       	sbc	r19, r21
    350e:	e0 91 f3 01 	lds	r30, 0x01F3
    3512:	f0 91 f4 01 	lds	r31, 0x01F4
    3516:	e2 17       	cp	r30, r18
    3518:	f3 07       	cpc	r31, r19
    351a:	a0 f4       	brcc	.+40     	; 0x3544 <malloc+0x128>
    351c:	2e 1b       	sub	r18, r30
    351e:	3f 0b       	sbc	r19, r31
    3520:	28 17       	cp	r18, r24
    3522:	39 07       	cpc	r19, r25
    3524:	78 f0       	brcs	.+30     	; 0x3544 <malloc+0x128>
    3526:	ac 01       	movw	r20, r24
    3528:	4e 5f       	subi	r20, 0xFE	; 254
    352a:	5f 4f       	sbci	r21, 0xFF	; 255
    352c:	24 17       	cp	r18, r20
    352e:	35 07       	cpc	r19, r21
    3530:	48 f0       	brcs	.+18     	; 0x3544 <malloc+0x128>
    3532:	4e 0f       	add	r20, r30
    3534:	5f 1f       	adc	r21, r31
    3536:	50 93 f4 01 	sts	0x01F4, r21
    353a:	40 93 f3 01 	sts	0x01F3, r20
    353e:	81 93       	st	Z+, r24
    3540:	91 93       	st	Z+, r25
    3542:	02 c0       	rjmp	.+4      	; 0x3548 <malloc+0x12c>
    3544:	e0 e0       	ldi	r30, 0x00	; 0
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	cf 01       	movw	r24, r30
    354a:	df 91       	pop	r29
    354c:	cf 91       	pop	r28
    354e:	08 95       	ret

00003550 <free>:
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	09 f4       	brne	.+2      	; 0x355a <free+0xa>
    3558:	91 c0       	rjmp	.+290    	; 0x367c <free+0x12c>
    355a:	fc 01       	movw	r30, r24
    355c:	32 97       	sbiw	r30, 0x02	; 2
    355e:	13 82       	std	Z+3, r1	; 0x03
    3560:	12 82       	std	Z+2, r1	; 0x02
    3562:	60 91 f5 01 	lds	r22, 0x01F5
    3566:	70 91 f6 01 	lds	r23, 0x01F6
    356a:	61 15       	cp	r22, r1
    356c:	71 05       	cpc	r23, r1
    356e:	81 f4       	brne	.+32     	; 0x3590 <free+0x40>
    3570:	20 81       	ld	r18, Z
    3572:	31 81       	ldd	r19, Z+1	; 0x01
    3574:	28 0f       	add	r18, r24
    3576:	39 1f       	adc	r19, r25
    3578:	80 91 f3 01 	lds	r24, 0x01F3
    357c:	90 91 f4 01 	lds	r25, 0x01F4
    3580:	82 17       	cp	r24, r18
    3582:	93 07       	cpc	r25, r19
    3584:	99 f5       	brne	.+102    	; 0x35ec <free+0x9c>
    3586:	f0 93 f4 01 	sts	0x01F4, r31
    358a:	e0 93 f3 01 	sts	0x01F3, r30
    358e:	76 c0       	rjmp	.+236    	; 0x367c <free+0x12c>
    3590:	db 01       	movw	r26, r22
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	02 c0       	rjmp	.+4      	; 0x359c <free+0x4c>
    3598:	cd 01       	movw	r24, r26
    359a:	d9 01       	movw	r26, r18
    359c:	ae 17       	cp	r26, r30
    359e:	bf 07       	cpc	r27, r31
    35a0:	48 f4       	brcc	.+18     	; 0x35b4 <free+0x64>
    35a2:	12 96       	adiw	r26, 0x02	; 2
    35a4:	2d 91       	ld	r18, X+
    35a6:	3c 91       	ld	r19, X
    35a8:	13 97       	sbiw	r26, 0x03	; 3
    35aa:	21 15       	cp	r18, r1
    35ac:	31 05       	cpc	r19, r1
    35ae:	a1 f7       	brne	.-24     	; 0x3598 <free+0x48>
    35b0:	cd 01       	movw	r24, r26
    35b2:	21 c0       	rjmp	.+66     	; 0x35f6 <free+0xa6>
    35b4:	b3 83       	std	Z+3, r27	; 0x03
    35b6:	a2 83       	std	Z+2, r26	; 0x02
    35b8:	ef 01       	movw	r28, r30
    35ba:	49 91       	ld	r20, Y+
    35bc:	59 91       	ld	r21, Y+
    35be:	9e 01       	movw	r18, r28
    35c0:	24 0f       	add	r18, r20
    35c2:	35 1f       	adc	r19, r21
    35c4:	a2 17       	cp	r26, r18
    35c6:	b3 07       	cpc	r27, r19
    35c8:	79 f4       	brne	.+30     	; 0x35e8 <free+0x98>
    35ca:	2d 91       	ld	r18, X+
    35cc:	3c 91       	ld	r19, X
    35ce:	11 97       	sbiw	r26, 0x01	; 1
    35d0:	24 0f       	add	r18, r20
    35d2:	35 1f       	adc	r19, r21
    35d4:	2e 5f       	subi	r18, 0xFE	; 254
    35d6:	3f 4f       	sbci	r19, 0xFF	; 255
    35d8:	31 83       	std	Z+1, r19	; 0x01
    35da:	20 83       	st	Z, r18
    35dc:	12 96       	adiw	r26, 0x02	; 2
    35de:	2d 91       	ld	r18, X+
    35e0:	3c 91       	ld	r19, X
    35e2:	13 97       	sbiw	r26, 0x03	; 3
    35e4:	33 83       	std	Z+3, r19	; 0x03
    35e6:	22 83       	std	Z+2, r18	; 0x02
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	29 f4       	brne	.+10     	; 0x35f6 <free+0xa6>
    35ec:	f0 93 f6 01 	sts	0x01F6, r31
    35f0:	e0 93 f5 01 	sts	0x01F5, r30
    35f4:	43 c0       	rjmp	.+134    	; 0x367c <free+0x12c>
    35f6:	dc 01       	movw	r26, r24
    35f8:	13 96       	adiw	r26, 0x03	; 3
    35fa:	fc 93       	st	X, r31
    35fc:	ee 93       	st	-X, r30
    35fe:	12 97       	sbiw	r26, 0x02	; 2
    3600:	4d 91       	ld	r20, X+
    3602:	5d 91       	ld	r21, X+
    3604:	a4 0f       	add	r26, r20
    3606:	b5 1f       	adc	r27, r21
    3608:	ea 17       	cp	r30, r26
    360a:	fb 07       	cpc	r31, r27
    360c:	69 f4       	brne	.+26     	; 0x3628 <free+0xd8>
    360e:	20 81       	ld	r18, Z
    3610:	31 81       	ldd	r19, Z+1	; 0x01
    3612:	24 0f       	add	r18, r20
    3614:	35 1f       	adc	r19, r21
    3616:	2e 5f       	subi	r18, 0xFE	; 254
    3618:	3f 4f       	sbci	r19, 0xFF	; 255
    361a:	ec 01       	movw	r28, r24
    361c:	39 83       	std	Y+1, r19	; 0x01
    361e:	28 83       	st	Y, r18
    3620:	22 81       	ldd	r18, Z+2	; 0x02
    3622:	33 81       	ldd	r19, Z+3	; 0x03
    3624:	3b 83       	std	Y+3, r19	; 0x03
    3626:	2a 83       	std	Y+2, r18	; 0x02
    3628:	e0 e0       	ldi	r30, 0x00	; 0
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <free+0xe2>
    362e:	fb 01       	movw	r30, r22
    3630:	bc 01       	movw	r22, r24
    3632:	db 01       	movw	r26, r22
    3634:	12 96       	adiw	r26, 0x02	; 2
    3636:	8d 91       	ld	r24, X+
    3638:	9c 91       	ld	r25, X
    363a:	13 97       	sbiw	r26, 0x03	; 3
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	b9 f7       	brne	.-18     	; 0x362e <free+0xde>
    3640:	9b 01       	movw	r18, r22
    3642:	2e 5f       	subi	r18, 0xFE	; 254
    3644:	3f 4f       	sbci	r19, 0xFF	; 255
    3646:	8d 91       	ld	r24, X+
    3648:	9c 91       	ld	r25, X
    364a:	11 97       	sbiw	r26, 0x01	; 1
    364c:	82 0f       	add	r24, r18
    364e:	93 1f       	adc	r25, r19
    3650:	40 91 f3 01 	lds	r20, 0x01F3
    3654:	50 91 f4 01 	lds	r21, 0x01F4
    3658:	48 17       	cp	r20, r24
    365a:	59 07       	cpc	r21, r25
    365c:	79 f4       	brne	.+30     	; 0x367c <free+0x12c>
    365e:	30 97       	sbiw	r30, 0x00	; 0
    3660:	29 f4       	brne	.+10     	; 0x366c <free+0x11c>
    3662:	10 92 f6 01 	sts	0x01F6, r1
    3666:	10 92 f5 01 	sts	0x01F5, r1
    366a:	02 c0       	rjmp	.+4      	; 0x3670 <free+0x120>
    366c:	13 82       	std	Z+3, r1	; 0x03
    366e:	12 82       	std	Z+2, r1	; 0x02
    3670:	22 50       	subi	r18, 0x02	; 2
    3672:	30 40       	sbci	r19, 0x00	; 0
    3674:	30 93 f4 01 	sts	0x01F4, r19
    3678:	20 93 f3 01 	sts	0x01F3, r18
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	08 95       	ret

00003682 <memcpy>:
    3682:	fb 01       	movw	r30, r22
    3684:	dc 01       	movw	r26, r24
    3686:	02 c0       	rjmp	.+4      	; 0x368c <memcpy+0xa>
    3688:	01 90       	ld	r0, Z+
    368a:	0d 92       	st	X+, r0
    368c:	41 50       	subi	r20, 0x01	; 1
    368e:	50 40       	sbci	r21, 0x00	; 0
    3690:	d8 f7       	brcc	.-10     	; 0x3688 <memcpy+0x6>
    3692:	08 95       	ret

00003694 <memset>:
    3694:	dc 01       	movw	r26, r24
    3696:	01 c0       	rjmp	.+2      	; 0x369a <memset+0x6>
    3698:	6d 93       	st	X+, r22
    369a:	41 50       	subi	r20, 0x01	; 1
    369c:	50 40       	sbci	r21, 0x00	; 0
    369e:	e0 f7       	brcc	.-8      	; 0x3698 <memset+0x4>
    36a0:	08 95       	ret

000036a2 <strcpy>:
    36a2:	fb 01       	movw	r30, r22
    36a4:	dc 01       	movw	r26, r24
    36a6:	01 90       	ld	r0, Z+
    36a8:	0d 92       	st	X+, r0
    36aa:	00 20       	and	r0, r0
    36ac:	e1 f7       	brne	.-8      	; 0x36a6 <strcpy+0x4>
    36ae:	08 95       	ret

000036b0 <strupr>:
    36b0:	dc 01       	movw	r26, r24
    36b2:	6c 91       	ld	r22, X
    36b4:	61 56       	subi	r22, 0x61	; 97
    36b6:	6a 31       	cpi	r22, 0x1A	; 26
    36b8:	08 f0       	brcs	.+2      	; 0x36bc <strupr+0xc>
    36ba:	60 5e       	subi	r22, 0xE0	; 224
    36bc:	6f 5b       	subi	r22, 0xBF	; 191
    36be:	6d 93       	st	X+, r22
    36c0:	c1 f7       	brne	.-16     	; 0x36b2 <strupr+0x2>
    36c2:	08 95       	ret

000036c4 <sprintf>:
    36c4:	ae e0       	ldi	r26, 0x0E	; 14
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	e8 e6       	ldi	r30, 0x68	; 104
    36ca:	fb e1       	ldi	r31, 0x1B	; 27
    36cc:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x1c>
    36d0:	0d 89       	ldd	r16, Y+21	; 0x15
    36d2:	1e 89       	ldd	r17, Y+22	; 0x16
    36d4:	86 e0       	ldi	r24, 0x06	; 6
    36d6:	8c 83       	std	Y+4, r24	; 0x04
    36d8:	1a 83       	std	Y+2, r17	; 0x02
    36da:	09 83       	std	Y+1, r16	; 0x01
    36dc:	8f ef       	ldi	r24, 0xFF	; 255
    36de:	9f e7       	ldi	r25, 0x7F	; 127
    36e0:	9e 83       	std	Y+6, r25	; 0x06
    36e2:	8d 83       	std	Y+5, r24	; 0x05
    36e4:	9e 01       	movw	r18, r28
    36e6:	27 5e       	subi	r18, 0xE7	; 231
    36e8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ea:	ce 01       	movw	r24, r28
    36ec:	01 96       	adiw	r24, 0x01	; 1
    36ee:	6f 89       	ldd	r22, Y+23	; 0x17
    36f0:	78 8d       	ldd	r23, Y+24	; 0x18
    36f2:	a9 01       	movw	r20, r18
    36f4:	0e 94 85 1b 	call	0x370a	; 0x370a <vfprintf>
    36f8:	ef 81       	ldd	r30, Y+7	; 0x07
    36fa:	f8 85       	ldd	r31, Y+8	; 0x08
    36fc:	e0 0f       	add	r30, r16
    36fe:	f1 1f       	adc	r31, r17
    3700:	10 82       	st	Z, r1
    3702:	2e 96       	adiw	r28, 0x0e	; 14
    3704:	e4 e0       	ldi	r30, 0x04	; 4
    3706:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x1c>

0000370a <vfprintf>:
    370a:	ac e0       	ldi	r26, 0x0C	; 12
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	eb e8       	ldi	r30, 0x8B	; 139
    3710:	fb e1       	ldi	r31, 0x1B	; 27
    3712:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__prologue_saves__>
    3716:	6c 01       	movw	r12, r24
    3718:	1b 01       	movw	r2, r22
    371a:	8a 01       	movw	r16, r20
    371c:	fc 01       	movw	r30, r24
    371e:	17 82       	std	Z+7, r1	; 0x07
    3720:	16 82       	std	Z+6, r1	; 0x06
    3722:	83 81       	ldd	r24, Z+3	; 0x03
    3724:	81 ff       	sbrs	r24, 1
    3726:	d1 c1       	rjmp	.+930    	; 0x3aca <vfprintf+0x3c0>
    3728:	2e 01       	movw	r4, r28
    372a:	08 94       	sec
    372c:	41 1c       	adc	r4, r1
    372e:	51 1c       	adc	r5, r1
    3730:	f6 01       	movw	r30, r12
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	f1 01       	movw	r30, r2
    3736:	93 fd       	sbrc	r25, 3
    3738:	85 91       	lpm	r24, Z+
    373a:	93 ff       	sbrs	r25, 3
    373c:	81 91       	ld	r24, Z+
    373e:	1f 01       	movw	r2, r30
    3740:	88 23       	and	r24, r24
    3742:	09 f4       	brne	.+2      	; 0x3746 <vfprintf+0x3c>
    3744:	be c1       	rjmp	.+892    	; 0x3ac2 <vfprintf+0x3b8>
    3746:	85 32       	cpi	r24, 0x25	; 37
    3748:	39 f4       	brne	.+14     	; 0x3758 <vfprintf+0x4e>
    374a:	93 fd       	sbrc	r25, 3
    374c:	85 91       	lpm	r24, Z+
    374e:	93 ff       	sbrs	r25, 3
    3750:	81 91       	ld	r24, Z+
    3752:	1f 01       	movw	r2, r30
    3754:	85 32       	cpi	r24, 0x25	; 37
    3756:	29 f4       	brne	.+10     	; 0x3762 <vfprintf+0x58>
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	b6 01       	movw	r22, r12
    375c:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    3760:	e7 cf       	rjmp	.-50     	; 0x3730 <vfprintf+0x26>
    3762:	ee 24       	eor	r14, r14
    3764:	ff 24       	eor	r15, r15
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	20 32       	cpi	r18, 0x20	; 32
    376a:	b0 f4       	brcc	.+44     	; 0x3798 <vfprintf+0x8e>
    376c:	8b 32       	cpi	r24, 0x2B	; 43
    376e:	69 f0       	breq	.+26     	; 0x378a <vfprintf+0x80>
    3770:	8c 32       	cpi	r24, 0x2C	; 44
    3772:	28 f4       	brcc	.+10     	; 0x377e <vfprintf+0x74>
    3774:	80 32       	cpi	r24, 0x20	; 32
    3776:	51 f0       	breq	.+20     	; 0x378c <vfprintf+0x82>
    3778:	83 32       	cpi	r24, 0x23	; 35
    377a:	71 f4       	brne	.+28     	; 0x3798 <vfprintf+0x8e>
    377c:	0b c0       	rjmp	.+22     	; 0x3794 <vfprintf+0x8a>
    377e:	8d 32       	cpi	r24, 0x2D	; 45
    3780:	39 f0       	breq	.+14     	; 0x3790 <vfprintf+0x86>
    3782:	80 33       	cpi	r24, 0x30	; 48
    3784:	49 f4       	brne	.+18     	; 0x3798 <vfprintf+0x8e>
    3786:	21 60       	ori	r18, 0x01	; 1
    3788:	2c c0       	rjmp	.+88     	; 0x37e2 <vfprintf+0xd8>
    378a:	22 60       	ori	r18, 0x02	; 2
    378c:	24 60       	ori	r18, 0x04	; 4
    378e:	29 c0       	rjmp	.+82     	; 0x37e2 <vfprintf+0xd8>
    3790:	28 60       	ori	r18, 0x08	; 8
    3792:	27 c0       	rjmp	.+78     	; 0x37e2 <vfprintf+0xd8>
    3794:	20 61       	ori	r18, 0x10	; 16
    3796:	25 c0       	rjmp	.+74     	; 0x37e2 <vfprintf+0xd8>
    3798:	27 fd       	sbrc	r18, 7
    379a:	2c c0       	rjmp	.+88     	; 0x37f4 <vfprintf+0xea>
    379c:	38 2f       	mov	r19, r24
    379e:	30 53       	subi	r19, 0x30	; 48
    37a0:	3a 30       	cpi	r19, 0x0A	; 10
    37a2:	98 f4       	brcc	.+38     	; 0x37ca <vfprintf+0xc0>
    37a4:	26 ff       	sbrs	r18, 6
    37a6:	08 c0       	rjmp	.+16     	; 0x37b8 <vfprintf+0xae>
    37a8:	8e 2d       	mov	r24, r14
    37aa:	88 0f       	add	r24, r24
    37ac:	e8 2e       	mov	r14, r24
    37ae:	ee 0c       	add	r14, r14
    37b0:	ee 0c       	add	r14, r14
    37b2:	e8 0e       	add	r14, r24
    37b4:	e3 0e       	add	r14, r19
    37b6:	15 c0       	rjmp	.+42     	; 0x37e2 <vfprintf+0xd8>
    37b8:	8f 2d       	mov	r24, r15
    37ba:	88 0f       	add	r24, r24
    37bc:	f8 2e       	mov	r15, r24
    37be:	ff 0c       	add	r15, r15
    37c0:	ff 0c       	add	r15, r15
    37c2:	f8 0e       	add	r15, r24
    37c4:	f3 0e       	add	r15, r19
    37c6:	20 62       	ori	r18, 0x20	; 32
    37c8:	0c c0       	rjmp	.+24     	; 0x37e2 <vfprintf+0xd8>
    37ca:	8e 32       	cpi	r24, 0x2E	; 46
    37cc:	21 f4       	brne	.+8      	; 0x37d6 <vfprintf+0xcc>
    37ce:	26 fd       	sbrc	r18, 6
    37d0:	78 c1       	rjmp	.+752    	; 0x3ac2 <vfprintf+0x3b8>
    37d2:	20 64       	ori	r18, 0x40	; 64
    37d4:	06 c0       	rjmp	.+12     	; 0x37e2 <vfprintf+0xd8>
    37d6:	8c 36       	cpi	r24, 0x6C	; 108
    37d8:	11 f4       	brne	.+4      	; 0x37de <vfprintf+0xd4>
    37da:	20 68       	ori	r18, 0x80	; 128
    37dc:	02 c0       	rjmp	.+4      	; 0x37e2 <vfprintf+0xd8>
    37de:	88 36       	cpi	r24, 0x68	; 104
    37e0:	49 f4       	brne	.+18     	; 0x37f4 <vfprintf+0xea>
    37e2:	f1 01       	movw	r30, r2
    37e4:	93 fd       	sbrc	r25, 3
    37e6:	85 91       	lpm	r24, Z+
    37e8:	93 ff       	sbrs	r25, 3
    37ea:	81 91       	ld	r24, Z+
    37ec:	1f 01       	movw	r2, r30
    37ee:	88 23       	and	r24, r24
    37f0:	09 f0       	breq	.+2      	; 0x37f4 <vfprintf+0xea>
    37f2:	ba cf       	rjmp	.-140    	; 0x3768 <vfprintf+0x5e>
    37f4:	98 2f       	mov	r25, r24
    37f6:	95 54       	subi	r25, 0x45	; 69
    37f8:	93 30       	cpi	r25, 0x03	; 3
    37fa:	18 f0       	brcs	.+6      	; 0x3802 <vfprintf+0xf8>
    37fc:	90 52       	subi	r25, 0x20	; 32
    37fe:	93 30       	cpi	r25, 0x03	; 3
    3800:	28 f4       	brcc	.+10     	; 0x380c <vfprintf+0x102>
    3802:	0c 5f       	subi	r16, 0xFC	; 252
    3804:	1f 4f       	sbci	r17, 0xFF	; 255
    3806:	ff e3       	ldi	r31, 0x3F	; 63
    3808:	f9 83       	std	Y+1, r31	; 0x01
    380a:	0d c0       	rjmp	.+26     	; 0x3826 <vfprintf+0x11c>
    380c:	83 36       	cpi	r24, 0x63	; 99
    380e:	31 f0       	breq	.+12     	; 0x381c <vfprintf+0x112>
    3810:	83 37       	cpi	r24, 0x73	; 115
    3812:	71 f0       	breq	.+28     	; 0x3830 <vfprintf+0x126>
    3814:	83 35       	cpi	r24, 0x53	; 83
    3816:	09 f0       	breq	.+2      	; 0x381a <vfprintf+0x110>
    3818:	60 c0       	rjmp	.+192    	; 0x38da <vfprintf+0x1d0>
    381a:	22 c0       	rjmp	.+68     	; 0x3860 <vfprintf+0x156>
    381c:	f8 01       	movw	r30, r16
    381e:	80 81       	ld	r24, Z
    3820:	89 83       	std	Y+1, r24	; 0x01
    3822:	0e 5f       	subi	r16, 0xFE	; 254
    3824:	1f 4f       	sbci	r17, 0xFF	; 255
    3826:	42 01       	movw	r8, r4
    3828:	71 e0       	ldi	r23, 0x01	; 1
    382a:	a7 2e       	mov	r10, r23
    382c:	b1 2c       	mov	r11, r1
    382e:	16 c0       	rjmp	.+44     	; 0x385c <vfprintf+0x152>
    3830:	62 e0       	ldi	r22, 0x02	; 2
    3832:	66 2e       	mov	r6, r22
    3834:	71 2c       	mov	r7, r1
    3836:	60 0e       	add	r6, r16
    3838:	71 1e       	adc	r7, r17
    383a:	f8 01       	movw	r30, r16
    383c:	80 80       	ld	r8, Z
    383e:	91 80       	ldd	r9, Z+1	; 0x01
    3840:	26 ff       	sbrs	r18, 6
    3842:	03 c0       	rjmp	.+6      	; 0x384a <vfprintf+0x140>
    3844:	6e 2d       	mov	r22, r14
    3846:	70 e0       	ldi	r23, 0x00	; 0
    3848:	02 c0       	rjmp	.+4      	; 0x384e <vfprintf+0x144>
    384a:	6f ef       	ldi	r22, 0xFF	; 255
    384c:	7f ef       	ldi	r23, 0xFF	; 255
    384e:	c4 01       	movw	r24, r8
    3850:	2c 87       	std	Y+12, r18	; 0x0c
    3852:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <strnlen>
    3856:	5c 01       	movw	r10, r24
    3858:	83 01       	movw	r16, r6
    385a:	2c 85       	ldd	r18, Y+12	; 0x0c
    385c:	2f 77       	andi	r18, 0x7F	; 127
    385e:	17 c0       	rjmp	.+46     	; 0x388e <vfprintf+0x184>
    3860:	52 e0       	ldi	r21, 0x02	; 2
    3862:	65 2e       	mov	r6, r21
    3864:	71 2c       	mov	r7, r1
    3866:	60 0e       	add	r6, r16
    3868:	71 1e       	adc	r7, r17
    386a:	f8 01       	movw	r30, r16
    386c:	80 80       	ld	r8, Z
    386e:	91 80       	ldd	r9, Z+1	; 0x01
    3870:	26 ff       	sbrs	r18, 6
    3872:	03 c0       	rjmp	.+6      	; 0x387a <vfprintf+0x170>
    3874:	6e 2d       	mov	r22, r14
    3876:	70 e0       	ldi	r23, 0x00	; 0
    3878:	02 c0       	rjmp	.+4      	; 0x387e <vfprintf+0x174>
    387a:	6f ef       	ldi	r22, 0xFF	; 255
    387c:	7f ef       	ldi	r23, 0xFF	; 255
    387e:	c4 01       	movw	r24, r8
    3880:	2c 87       	std	Y+12, r18	; 0x0c
    3882:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <strnlen_P>
    3886:	5c 01       	movw	r10, r24
    3888:	2c 85       	ldd	r18, Y+12	; 0x0c
    388a:	20 68       	ori	r18, 0x80	; 128
    388c:	83 01       	movw	r16, r6
    388e:	23 fd       	sbrc	r18, 3
    3890:	20 c0       	rjmp	.+64     	; 0x38d2 <vfprintf+0x1c8>
    3892:	08 c0       	rjmp	.+16     	; 0x38a4 <vfprintf+0x19a>
    3894:	80 e2       	ldi	r24, 0x20	; 32
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	b6 01       	movw	r22, r12
    389a:	2c 87       	std	Y+12, r18	; 0x0c
    389c:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    38a0:	fa 94       	dec	r15
    38a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    38a4:	8f 2d       	mov	r24, r15
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	a8 16       	cp	r10, r24
    38aa:	b9 06       	cpc	r11, r25
    38ac:	98 f3       	brcs	.-26     	; 0x3894 <vfprintf+0x18a>
    38ae:	11 c0       	rjmp	.+34     	; 0x38d2 <vfprintf+0x1c8>
    38b0:	f4 01       	movw	r30, r8
    38b2:	27 fd       	sbrc	r18, 7
    38b4:	85 91       	lpm	r24, Z+
    38b6:	27 ff       	sbrs	r18, 7
    38b8:	81 91       	ld	r24, Z+
    38ba:	4f 01       	movw	r8, r30
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	b6 01       	movw	r22, r12
    38c0:	2c 87       	std	Y+12, r18	; 0x0c
    38c2:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    38c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    38c8:	f1 10       	cpse	r15, r1
    38ca:	fa 94       	dec	r15
    38cc:	08 94       	sec
    38ce:	a1 08       	sbc	r10, r1
    38d0:	b1 08       	sbc	r11, r1
    38d2:	a1 14       	cp	r10, r1
    38d4:	b1 04       	cpc	r11, r1
    38d6:	61 f7       	brne	.-40     	; 0x38b0 <vfprintf+0x1a6>
    38d8:	f1 c0       	rjmp	.+482    	; 0x3abc <vfprintf+0x3b2>
    38da:	84 36       	cpi	r24, 0x64	; 100
    38dc:	11 f0       	breq	.+4      	; 0x38e2 <vfprintf+0x1d8>
    38de:	89 36       	cpi	r24, 0x69	; 105
    38e0:	49 f5       	brne	.+82     	; 0x3934 <vfprintf+0x22a>
    38e2:	27 ff       	sbrs	r18, 7
    38e4:	08 c0       	rjmp	.+16     	; 0x38f6 <vfprintf+0x1ec>
    38e6:	f8 01       	movw	r30, r16
    38e8:	60 81       	ld	r22, Z
    38ea:	71 81       	ldd	r23, Z+1	; 0x01
    38ec:	82 81       	ldd	r24, Z+2	; 0x02
    38ee:	93 81       	ldd	r25, Z+3	; 0x03
    38f0:	0c 5f       	subi	r16, 0xFC	; 252
    38f2:	1f 4f       	sbci	r17, 0xFF	; 255
    38f4:	09 c0       	rjmp	.+18     	; 0x3908 <vfprintf+0x1fe>
    38f6:	f8 01       	movw	r30, r16
    38f8:	60 81       	ld	r22, Z
    38fa:	71 81       	ldd	r23, Z+1	; 0x01
    38fc:	88 27       	eor	r24, r24
    38fe:	77 fd       	sbrc	r23, 7
    3900:	80 95       	com	r24
    3902:	98 2f       	mov	r25, r24
    3904:	0e 5f       	subi	r16, 0xFE	; 254
    3906:	1f 4f       	sbci	r17, 0xFF	; 255
    3908:	4f e6       	ldi	r20, 0x6F	; 111
    390a:	b4 2e       	mov	r11, r20
    390c:	b2 22       	and	r11, r18
    390e:	97 ff       	sbrs	r25, 7
    3910:	09 c0       	rjmp	.+18     	; 0x3924 <vfprintf+0x21a>
    3912:	90 95       	com	r25
    3914:	80 95       	com	r24
    3916:	70 95       	com	r23
    3918:	61 95       	neg	r22
    391a:	7f 4f       	sbci	r23, 0xFF	; 255
    391c:	8f 4f       	sbci	r24, 0xFF	; 255
    391e:	9f 4f       	sbci	r25, 0xFF	; 255
    3920:	f0 e8       	ldi	r31, 0x80	; 128
    3922:	bf 2a       	or	r11, r31
    3924:	a2 01       	movw	r20, r4
    3926:	2a e0       	ldi	r18, 0x0A	; 10
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__ultoa_invert>
    392e:	78 2e       	mov	r7, r24
    3930:	74 18       	sub	r7, r4
    3932:	45 c0       	rjmp	.+138    	; 0x39be <vfprintf+0x2b4>
    3934:	85 37       	cpi	r24, 0x75	; 117
    3936:	31 f4       	brne	.+12     	; 0x3944 <vfprintf+0x23a>
    3938:	3f ee       	ldi	r19, 0xEF	; 239
    393a:	b3 2e       	mov	r11, r19
    393c:	b2 22       	and	r11, r18
    393e:	2a e0       	ldi	r18, 0x0A	; 10
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	25 c0       	rjmp	.+74     	; 0x398e <vfprintf+0x284>
    3944:	99 ef       	ldi	r25, 0xF9	; 249
    3946:	b9 2e       	mov	r11, r25
    3948:	b2 22       	and	r11, r18
    394a:	8f 36       	cpi	r24, 0x6F	; 111
    394c:	c1 f0       	breq	.+48     	; 0x397e <vfprintf+0x274>
    394e:	80 37       	cpi	r24, 0x70	; 112
    3950:	20 f4       	brcc	.+8      	; 0x395a <vfprintf+0x250>
    3952:	88 35       	cpi	r24, 0x58	; 88
    3954:	09 f0       	breq	.+2      	; 0x3958 <vfprintf+0x24e>
    3956:	b5 c0       	rjmp	.+362    	; 0x3ac2 <vfprintf+0x3b8>
    3958:	0d c0       	rjmp	.+26     	; 0x3974 <vfprintf+0x26a>
    395a:	80 37       	cpi	r24, 0x70	; 112
    395c:	21 f0       	breq	.+8      	; 0x3966 <vfprintf+0x25c>
    395e:	88 37       	cpi	r24, 0x78	; 120
    3960:	09 f0       	breq	.+2      	; 0x3964 <vfprintf+0x25a>
    3962:	af c0       	rjmp	.+350    	; 0x3ac2 <vfprintf+0x3b8>
    3964:	02 c0       	rjmp	.+4      	; 0x396a <vfprintf+0x260>
    3966:	20 e1       	ldi	r18, 0x10	; 16
    3968:	b2 2a       	or	r11, r18
    396a:	b4 fe       	sbrs	r11, 4
    396c:	0b c0       	rjmp	.+22     	; 0x3984 <vfprintf+0x27a>
    396e:	84 e0       	ldi	r24, 0x04	; 4
    3970:	b8 2a       	or	r11, r24
    3972:	08 c0       	rjmp	.+16     	; 0x3984 <vfprintf+0x27a>
    3974:	b4 fe       	sbrs	r11, 4
    3976:	09 c0       	rjmp	.+18     	; 0x398a <vfprintf+0x280>
    3978:	e6 e0       	ldi	r30, 0x06	; 6
    397a:	be 2a       	or	r11, r30
    397c:	06 c0       	rjmp	.+12     	; 0x398a <vfprintf+0x280>
    397e:	28 e0       	ldi	r18, 0x08	; 8
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	05 c0       	rjmp	.+10     	; 0x398e <vfprintf+0x284>
    3984:	20 e1       	ldi	r18, 0x10	; 16
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	02 c0       	rjmp	.+4      	; 0x398e <vfprintf+0x284>
    398a:	20 e1       	ldi	r18, 0x10	; 16
    398c:	32 e0       	ldi	r19, 0x02	; 2
    398e:	b7 fe       	sbrs	r11, 7
    3990:	08 c0       	rjmp	.+16     	; 0x39a2 <vfprintf+0x298>
    3992:	f8 01       	movw	r30, r16
    3994:	60 81       	ld	r22, Z
    3996:	71 81       	ldd	r23, Z+1	; 0x01
    3998:	82 81       	ldd	r24, Z+2	; 0x02
    399a:	93 81       	ldd	r25, Z+3	; 0x03
    399c:	0c 5f       	subi	r16, 0xFC	; 252
    399e:	1f 4f       	sbci	r17, 0xFF	; 255
    39a0:	07 c0       	rjmp	.+14     	; 0x39b0 <vfprintf+0x2a6>
    39a2:	f8 01       	movw	r30, r16
    39a4:	60 81       	ld	r22, Z
    39a6:	71 81       	ldd	r23, Z+1	; 0x01
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	0e 5f       	subi	r16, 0xFE	; 254
    39ae:	1f 4f       	sbci	r17, 0xFF	; 255
    39b0:	a2 01       	movw	r20, r4
    39b2:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__ultoa_invert>
    39b6:	78 2e       	mov	r7, r24
    39b8:	74 18       	sub	r7, r4
    39ba:	ff e7       	ldi	r31, 0x7F	; 127
    39bc:	bf 22       	and	r11, r31
    39be:	b6 fe       	sbrs	r11, 6
    39c0:	0b c0       	rjmp	.+22     	; 0x39d8 <vfprintf+0x2ce>
    39c2:	2e ef       	ldi	r18, 0xFE	; 254
    39c4:	b2 22       	and	r11, r18
    39c6:	7e 14       	cp	r7, r14
    39c8:	38 f4       	brcc	.+14     	; 0x39d8 <vfprintf+0x2ce>
    39ca:	b4 fe       	sbrs	r11, 4
    39cc:	07 c0       	rjmp	.+14     	; 0x39dc <vfprintf+0x2d2>
    39ce:	b2 fc       	sbrc	r11, 2
    39d0:	05 c0       	rjmp	.+10     	; 0x39dc <vfprintf+0x2d2>
    39d2:	8f ee       	ldi	r24, 0xEF	; 239
    39d4:	b8 22       	and	r11, r24
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <vfprintf+0x2d2>
    39d8:	a7 2c       	mov	r10, r7
    39da:	01 c0       	rjmp	.+2      	; 0x39de <vfprintf+0x2d4>
    39dc:	ae 2c       	mov	r10, r14
    39de:	8b 2d       	mov	r24, r11
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	b4 fe       	sbrs	r11, 4
    39e4:	0d c0       	rjmp	.+26     	; 0x3a00 <vfprintf+0x2f6>
    39e6:	fe 01       	movw	r30, r28
    39e8:	e7 0d       	add	r30, r7
    39ea:	f1 1d       	adc	r31, r1
    39ec:	20 81       	ld	r18, Z
    39ee:	20 33       	cpi	r18, 0x30	; 48
    39f0:	19 f4       	brne	.+6      	; 0x39f8 <vfprintf+0x2ee>
    39f2:	e9 ee       	ldi	r30, 0xE9	; 233
    39f4:	be 22       	and	r11, r30
    39f6:	09 c0       	rjmp	.+18     	; 0x3a0a <vfprintf+0x300>
    39f8:	a3 94       	inc	r10
    39fa:	b2 fe       	sbrs	r11, 2
    39fc:	06 c0       	rjmp	.+12     	; 0x3a0a <vfprintf+0x300>
    39fe:	04 c0       	rjmp	.+8      	; 0x3a08 <vfprintf+0x2fe>
    3a00:	86 78       	andi	r24, 0x86	; 134
    3a02:	90 70       	andi	r25, 0x00	; 0
    3a04:	00 97       	sbiw	r24, 0x00	; 0
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <vfprintf+0x300>
    3a08:	a3 94       	inc	r10
    3a0a:	8b 2c       	mov	r8, r11
    3a0c:	99 24       	eor	r9, r9
    3a0e:	b3 fc       	sbrc	r11, 3
    3a10:	14 c0       	rjmp	.+40     	; 0x3a3a <vfprintf+0x330>
    3a12:	b0 fe       	sbrs	r11, 0
    3a14:	0f c0       	rjmp	.+30     	; 0x3a34 <vfprintf+0x32a>
    3a16:	af 14       	cp	r10, r15
    3a18:	28 f4       	brcc	.+10     	; 0x3a24 <vfprintf+0x31a>
    3a1a:	e7 2c       	mov	r14, r7
    3a1c:	ef 0c       	add	r14, r15
    3a1e:	ea 18       	sub	r14, r10
    3a20:	af 2c       	mov	r10, r15
    3a22:	08 c0       	rjmp	.+16     	; 0x3a34 <vfprintf+0x32a>
    3a24:	e7 2c       	mov	r14, r7
    3a26:	06 c0       	rjmp	.+12     	; 0x3a34 <vfprintf+0x32a>
    3a28:	80 e2       	ldi	r24, 0x20	; 32
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	b6 01       	movw	r22, r12
    3a2e:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    3a32:	a3 94       	inc	r10
    3a34:	af 14       	cp	r10, r15
    3a36:	c0 f3       	brcs	.-16     	; 0x3a28 <vfprintf+0x31e>
    3a38:	04 c0       	rjmp	.+8      	; 0x3a42 <vfprintf+0x338>
    3a3a:	af 14       	cp	r10, r15
    3a3c:	10 f4       	brcc	.+4      	; 0x3a42 <vfprintf+0x338>
    3a3e:	fa 18       	sub	r15, r10
    3a40:	01 c0       	rjmp	.+2      	; 0x3a44 <vfprintf+0x33a>
    3a42:	ff 24       	eor	r15, r15
    3a44:	84 fe       	sbrs	r8, 4
    3a46:	0f c0       	rjmp	.+30     	; 0x3a66 <vfprintf+0x35c>
    3a48:	80 e3       	ldi	r24, 0x30	; 48
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	b6 01       	movw	r22, r12
    3a4e:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    3a52:	82 fe       	sbrs	r8, 2
    3a54:	1f c0       	rjmp	.+62     	; 0x3a94 <vfprintf+0x38a>
    3a56:	81 fe       	sbrs	r8, 1
    3a58:	03 c0       	rjmp	.+6      	; 0x3a60 <vfprintf+0x356>
    3a5a:	88 e5       	ldi	r24, 0x58	; 88
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	10 c0       	rjmp	.+32     	; 0x3a80 <vfprintf+0x376>
    3a60:	88 e7       	ldi	r24, 0x78	; 120
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	0d c0       	rjmp	.+26     	; 0x3a80 <vfprintf+0x376>
    3a66:	c4 01       	movw	r24, r8
    3a68:	86 78       	andi	r24, 0x86	; 134
    3a6a:	90 70       	andi	r25, 0x00	; 0
    3a6c:	00 97       	sbiw	r24, 0x00	; 0
    3a6e:	91 f0       	breq	.+36     	; 0x3a94 <vfprintf+0x38a>
    3a70:	81 fc       	sbrc	r8, 1
    3a72:	02 c0       	rjmp	.+4      	; 0x3a78 <vfprintf+0x36e>
    3a74:	80 e2       	ldi	r24, 0x20	; 32
    3a76:	01 c0       	rjmp	.+2      	; 0x3a7a <vfprintf+0x370>
    3a78:	8b e2       	ldi	r24, 0x2B	; 43
    3a7a:	b7 fc       	sbrc	r11, 7
    3a7c:	8d e2       	ldi	r24, 0x2D	; 45
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	b6 01       	movw	r22, r12
    3a82:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    3a86:	06 c0       	rjmp	.+12     	; 0x3a94 <vfprintf+0x38a>
    3a88:	80 e3       	ldi	r24, 0x30	; 48
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	b6 01       	movw	r22, r12
    3a8e:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    3a92:	ea 94       	dec	r14
    3a94:	7e 14       	cp	r7, r14
    3a96:	c0 f3       	brcs	.-16     	; 0x3a88 <vfprintf+0x37e>
    3a98:	7a 94       	dec	r7
    3a9a:	f2 01       	movw	r30, r4
    3a9c:	e7 0d       	add	r30, r7
    3a9e:	f1 1d       	adc	r31, r1
    3aa0:	80 81       	ld	r24, Z
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	b6 01       	movw	r22, r12
    3aa6:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    3aaa:	77 20       	and	r7, r7
    3aac:	a9 f7       	brne	.-22     	; 0x3a98 <vfprintf+0x38e>
    3aae:	06 c0       	rjmp	.+12     	; 0x3abc <vfprintf+0x3b2>
    3ab0:	80 e2       	ldi	r24, 0x20	; 32
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	b6 01       	movw	r22, r12
    3ab6:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <fputc>
    3aba:	fa 94       	dec	r15
    3abc:	ff 20       	and	r15, r15
    3abe:	c1 f7       	brne	.-16     	; 0x3ab0 <vfprintf+0x3a6>
    3ac0:	37 ce       	rjmp	.-914    	; 0x3730 <vfprintf+0x26>
    3ac2:	f6 01       	movw	r30, r12
    3ac4:	26 81       	ldd	r18, Z+6	; 0x06
    3ac6:	37 81       	ldd	r19, Z+7	; 0x07
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <vfprintf+0x3c4>
    3aca:	2f ef       	ldi	r18, 0xFF	; 255
    3acc:	3f ef       	ldi	r19, 0xFF	; 255
    3ace:	c9 01       	movw	r24, r18
    3ad0:	2c 96       	adiw	r28, 0x0c	; 12
    3ad2:	e2 e1       	ldi	r30, 0x12	; 18
    3ad4:	0c 94 4e 1e 	jmp	0x3c9c	; 0x3c9c <__epilogue_restores__>

00003ad8 <__eerd_block_m168>:
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22

00003adc <__eerd_blraw_m168>:
    3adc:	fc 01       	movw	r30, r24
    3ade:	f9 99       	sbic	0x1f, 1	; 31
    3ae0:	fe cf       	rjmp	.-4      	; 0x3ade <__eerd_blraw_m168+0x2>
    3ae2:	06 c0       	rjmp	.+12     	; 0x3af0 <__eerd_blraw_m168+0x14>
    3ae4:	f2 bd       	out	0x22, r31	; 34
    3ae6:	e1 bd       	out	0x21, r30	; 33
    3ae8:	f8 9a       	sbi	0x1f, 0	; 31
    3aea:	31 96       	adiw	r30, 0x01	; 1
    3aec:	00 b4       	in	r0, 0x20	; 32
    3aee:	0d 92       	st	X+, r0
    3af0:	41 50       	subi	r20, 0x01	; 1
    3af2:	50 40       	sbci	r21, 0x00	; 0
    3af4:	b8 f7       	brcc	.-18     	; 0x3ae4 <__eerd_blraw_m168+0x8>
    3af6:	08 95       	ret

00003af8 <__eerd_byte_m168>:
    3af8:	f9 99       	sbic	0x1f, 1	; 31
    3afa:	fe cf       	rjmp	.-4      	; 0x3af8 <__eerd_byte_m168>
    3afc:	92 bd       	out	0x22, r25	; 34
    3afe:	81 bd       	out	0x21, r24	; 33
    3b00:	f8 9a       	sbi	0x1f, 0	; 31
    3b02:	99 27       	eor	r25, r25
    3b04:	80 b5       	in	r24, 0x20	; 32
    3b06:	08 95       	ret

00003b08 <__eewr_byte_m168>:
    3b08:	26 2f       	mov	r18, r22

00003b0a <__eewr_r18_m168>:
    3b0a:	f9 99       	sbic	0x1f, 1	; 31
    3b0c:	fe cf       	rjmp	.-4      	; 0x3b0a <__eewr_r18_m168>
    3b0e:	1f ba       	out	0x1f, r1	; 31
    3b10:	92 bd       	out	0x22, r25	; 34
    3b12:	81 bd       	out	0x21, r24	; 33
    3b14:	20 bd       	out	0x20, r18	; 32
    3b16:	0f b6       	in	r0, 0x3f	; 63
    3b18:	f8 94       	cli
    3b1a:	fa 9a       	sbi	0x1f, 2	; 31
    3b1c:	f9 9a       	sbi	0x1f, 1	; 31
    3b1e:	0f be       	out	0x3f, r0	; 63
    3b20:	01 96       	adiw	r24, 0x01	; 1
    3b22:	08 95       	ret

00003b24 <strnlen_P>:
    3b24:	fc 01       	movw	r30, r24
    3b26:	05 90       	lpm	r0, Z+
    3b28:	61 50       	subi	r22, 0x01	; 1
    3b2a:	70 40       	sbci	r23, 0x00	; 0
    3b2c:	01 10       	cpse	r0, r1
    3b2e:	d8 f7       	brcc	.-10     	; 0x3b26 <strnlen_P+0x2>
    3b30:	80 95       	com	r24
    3b32:	90 95       	com	r25
    3b34:	8e 0f       	add	r24, r30
    3b36:	9f 1f       	adc	r25, r31
    3b38:	08 95       	ret

00003b3a <strnlen>:
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	61 50       	subi	r22, 0x01	; 1
    3b3e:	70 40       	sbci	r23, 0x00	; 0
    3b40:	01 90       	ld	r0, Z+
    3b42:	01 10       	cpse	r0, r1
    3b44:	d8 f7       	brcc	.-10     	; 0x3b3c <strnlen+0x2>
    3b46:	80 95       	com	r24
    3b48:	90 95       	com	r25
    3b4a:	8e 0f       	add	r24, r30
    3b4c:	9f 1f       	adc	r25, r31
    3b4e:	08 95       	ret

00003b50 <fputc>:
    3b50:	0f 93       	push	r16
    3b52:	1f 93       	push	r17
    3b54:	cf 93       	push	r28
    3b56:	df 93       	push	r29
    3b58:	8c 01       	movw	r16, r24
    3b5a:	eb 01       	movw	r28, r22
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	81 ff       	sbrs	r24, 1
    3b60:	1b c0       	rjmp	.+54     	; 0x3b98 <fputc+0x48>
    3b62:	82 ff       	sbrs	r24, 2
    3b64:	0d c0       	rjmp	.+26     	; 0x3b80 <fputc+0x30>
    3b66:	2e 81       	ldd	r18, Y+6	; 0x06
    3b68:	3f 81       	ldd	r19, Y+7	; 0x07
    3b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b6e:	28 17       	cp	r18, r24
    3b70:	39 07       	cpc	r19, r25
    3b72:	64 f4       	brge	.+24     	; 0x3b8c <fputc+0x3c>
    3b74:	e8 81       	ld	r30, Y
    3b76:	f9 81       	ldd	r31, Y+1	; 0x01
    3b78:	01 93       	st	Z+, r16
    3b7a:	f9 83       	std	Y+1, r31	; 0x01
    3b7c:	e8 83       	st	Y, r30
    3b7e:	06 c0       	rjmp	.+12     	; 0x3b8c <fputc+0x3c>
    3b80:	e8 85       	ldd	r30, Y+8	; 0x08
    3b82:	f9 85       	ldd	r31, Y+9	; 0x09
    3b84:	80 2f       	mov	r24, r16
    3b86:	09 95       	icall
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	31 f4       	brne	.+12     	; 0x3b98 <fputc+0x48>
    3b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    3b90:	01 96       	adiw	r24, 0x01	; 1
    3b92:	9f 83       	std	Y+7, r25	; 0x07
    3b94:	8e 83       	std	Y+6, r24	; 0x06
    3b96:	02 c0       	rjmp	.+4      	; 0x3b9c <fputc+0x4c>
    3b98:	0f ef       	ldi	r16, 0xFF	; 255
    3b9a:	1f ef       	ldi	r17, 0xFF	; 255
    3b9c:	c8 01       	movw	r24, r16
    3b9e:	df 91       	pop	r29
    3ba0:	cf 91       	pop	r28
    3ba2:	1f 91       	pop	r17
    3ba4:	0f 91       	pop	r16
    3ba6:	08 95       	ret

00003ba8 <__ultoa_invert>:
    3ba8:	fa 01       	movw	r30, r20
    3baa:	aa 27       	eor	r26, r26
    3bac:	28 30       	cpi	r18, 0x08	; 8
    3bae:	51 f1       	breq	.+84     	; 0x3c04 <__ultoa_invert+0x5c>
    3bb0:	20 31       	cpi	r18, 0x10	; 16
    3bb2:	81 f1       	breq	.+96     	; 0x3c14 <__ultoa_invert+0x6c>
    3bb4:	e8 94       	clt
    3bb6:	6f 93       	push	r22
    3bb8:	6e 7f       	andi	r22, 0xFE	; 254
    3bba:	6e 5f       	subi	r22, 0xFE	; 254
    3bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc2:	af 4f       	sbci	r26, 0xFF	; 255
    3bc4:	b1 e0       	ldi	r27, 0x01	; 1
    3bc6:	3e d0       	rcall	.+124    	; 0x3c44 <__ultoa_invert+0x9c>
    3bc8:	b4 e0       	ldi	r27, 0x04	; 4
    3bca:	3c d0       	rcall	.+120    	; 0x3c44 <__ultoa_invert+0x9c>
    3bcc:	67 0f       	add	r22, r23
    3bce:	78 1f       	adc	r23, r24
    3bd0:	89 1f       	adc	r24, r25
    3bd2:	9a 1f       	adc	r25, r26
    3bd4:	a1 1d       	adc	r26, r1
    3bd6:	68 0f       	add	r22, r24
    3bd8:	79 1f       	adc	r23, r25
    3bda:	8a 1f       	adc	r24, r26
    3bdc:	91 1d       	adc	r25, r1
    3bde:	a1 1d       	adc	r26, r1
    3be0:	6a 0f       	add	r22, r26
    3be2:	71 1d       	adc	r23, r1
    3be4:	81 1d       	adc	r24, r1
    3be6:	91 1d       	adc	r25, r1
    3be8:	a1 1d       	adc	r26, r1
    3bea:	20 d0       	rcall	.+64     	; 0x3c2c <__ultoa_invert+0x84>
    3bec:	09 f4       	brne	.+2      	; 0x3bf0 <__ultoa_invert+0x48>
    3bee:	68 94       	set
    3bf0:	3f 91       	pop	r19
    3bf2:	2a e0       	ldi	r18, 0x0A	; 10
    3bf4:	26 9f       	mul	r18, r22
    3bf6:	11 24       	eor	r1, r1
    3bf8:	30 19       	sub	r19, r0
    3bfa:	30 5d       	subi	r19, 0xD0	; 208
    3bfc:	31 93       	st	Z+, r19
    3bfe:	de f6       	brtc	.-74     	; 0x3bb6 <__ultoa_invert+0xe>
    3c00:	cf 01       	movw	r24, r30
    3c02:	08 95       	ret
    3c04:	46 2f       	mov	r20, r22
    3c06:	47 70       	andi	r20, 0x07	; 7
    3c08:	40 5d       	subi	r20, 0xD0	; 208
    3c0a:	41 93       	st	Z+, r20
    3c0c:	b3 e0       	ldi	r27, 0x03	; 3
    3c0e:	0f d0       	rcall	.+30     	; 0x3c2e <__ultoa_invert+0x86>
    3c10:	c9 f7       	brne	.-14     	; 0x3c04 <__ultoa_invert+0x5c>
    3c12:	f6 cf       	rjmp	.-20     	; 0x3c00 <__ultoa_invert+0x58>
    3c14:	46 2f       	mov	r20, r22
    3c16:	4f 70       	andi	r20, 0x0F	; 15
    3c18:	40 5d       	subi	r20, 0xD0	; 208
    3c1a:	4a 33       	cpi	r20, 0x3A	; 58
    3c1c:	18 f0       	brcs	.+6      	; 0x3c24 <__ultoa_invert+0x7c>
    3c1e:	49 5d       	subi	r20, 0xD9	; 217
    3c20:	31 fd       	sbrc	r19, 1
    3c22:	40 52       	subi	r20, 0x20	; 32
    3c24:	41 93       	st	Z+, r20
    3c26:	02 d0       	rcall	.+4      	; 0x3c2c <__ultoa_invert+0x84>
    3c28:	a9 f7       	brne	.-22     	; 0x3c14 <__ultoa_invert+0x6c>
    3c2a:	ea cf       	rjmp	.-44     	; 0x3c00 <__ultoa_invert+0x58>
    3c2c:	b4 e0       	ldi	r27, 0x04	; 4
    3c2e:	a6 95       	lsr	r26
    3c30:	97 95       	ror	r25
    3c32:	87 95       	ror	r24
    3c34:	77 95       	ror	r23
    3c36:	67 95       	ror	r22
    3c38:	ba 95       	dec	r27
    3c3a:	c9 f7       	brne	.-14     	; 0x3c2e <__ultoa_invert+0x86>
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	61 05       	cpc	r22, r1
    3c40:	71 05       	cpc	r23, r1
    3c42:	08 95       	ret
    3c44:	9b 01       	movw	r18, r22
    3c46:	ac 01       	movw	r20, r24
    3c48:	0a 2e       	mov	r0, r26
    3c4a:	06 94       	lsr	r0
    3c4c:	57 95       	ror	r21
    3c4e:	47 95       	ror	r20
    3c50:	37 95       	ror	r19
    3c52:	27 95       	ror	r18
    3c54:	ba 95       	dec	r27
    3c56:	c9 f7       	brne	.-14     	; 0x3c4a <__ultoa_invert+0xa2>
    3c58:	62 0f       	add	r22, r18
    3c5a:	73 1f       	adc	r23, r19
    3c5c:	84 1f       	adc	r24, r20
    3c5e:	95 1f       	adc	r25, r21
    3c60:	a0 1d       	adc	r26, r0
    3c62:	08 95       	ret

00003c64 <__prologue_saves__>:
    3c64:	2f 92       	push	r2
    3c66:	3f 92       	push	r3
    3c68:	4f 92       	push	r4
    3c6a:	5f 92       	push	r5
    3c6c:	6f 92       	push	r6
    3c6e:	7f 92       	push	r7
    3c70:	8f 92       	push	r8
    3c72:	9f 92       	push	r9
    3c74:	af 92       	push	r10
    3c76:	bf 92       	push	r11
    3c78:	cf 92       	push	r12
    3c7a:	df 92       	push	r13
    3c7c:	ef 92       	push	r14
    3c7e:	ff 92       	push	r15
    3c80:	0f 93       	push	r16
    3c82:	1f 93       	push	r17
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	ca 1b       	sub	r28, r26
    3c8e:	db 0b       	sbc	r29, r27
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	09 94       	ijmp

00003c9c <__epilogue_restores__>:
    3c9c:	2a 88       	ldd	r2, Y+18	; 0x12
    3c9e:	39 88       	ldd	r3, Y+17	; 0x11
    3ca0:	48 88       	ldd	r4, Y+16	; 0x10
    3ca2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ca4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ca6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ca8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3caa:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cac:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cae:	b9 84       	ldd	r11, Y+9	; 0x09
    3cb0:	c8 84       	ldd	r12, Y+8	; 0x08
    3cb2:	df 80       	ldd	r13, Y+7	; 0x07
    3cb4:	ee 80       	ldd	r14, Y+6	; 0x06
    3cb6:	fd 80       	ldd	r15, Y+5	; 0x05
    3cb8:	0c 81       	ldd	r16, Y+4	; 0x04
    3cba:	1b 81       	ldd	r17, Y+3	; 0x03
    3cbc:	aa 81       	ldd	r26, Y+2	; 0x02
    3cbe:	b9 81       	ldd	r27, Y+1	; 0x01
    3cc0:	ce 0f       	add	r28, r30
    3cc2:	d1 1d       	adc	r29, r1
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
    3cce:	ed 01       	movw	r28, r26
    3cd0:	08 95       	ret

00003cd2 <_exit>:
    3cd2:	f8 94       	cli

00003cd4 <__stop_program>:
    3cd4:	ff cf       	rjmp	.-2      	; 0x3cd4 <__stop_program>
